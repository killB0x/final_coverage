/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Oct 26 09:39:19 GMT 2022
 */

package com.jpaquery.core.render.impl;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class JpaQueryRenderImpl_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.jpaquery.core.render.impl.JpaQueryRenderImpl"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/user"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JpaQueryRenderImpl_ESTest_scaffolding.class.getClassLoader() ,
      "com.jpaquery.core.facade.JoinPath$JoinPathType",
      "com.jpaquery.core.facade.And",
      "com.jpaquery.core.impl.WhereImpl",
      "com.jpaquery.util._MergeMap",
      "com.jpaquery.core.facade.Having",
      "com.jpaquery.core.impl.WherePathImpl",
      "com.jpaquery.core.impl.JpaQueryImpl",
      "com.jpaquery.core.facade.WherePath$WherePathType",
      "com.jpaquery.core.impl.SubJpaQueryImpl",
      "com.jpaquery.core.render.JpaQueryRender",
      "com.jpaquery.core.facade.WherePath",
      "com.jpaquery.core.facade.GroupPath",
      "com.jpaquery.core.impl.JpaQueryHandler",
      "com.jpaquery.core.facade.Where",
      "com.jpaquery.core.facade.SelectPath",
      "com.jpaquery.core.facade.Group",
      "com.jpaquery.core.facade.BetweenPath",
      "com.jpaquery.core.facade.Or",
      "com.jpaquery.core.impl.OrderImpl",
      "com.jpaquery.core.impl.SelectPathImpl",
      "com.jpaquery.core.facade.OrderPath",
      "com.jpaquery.core.vo.PathInfo",
      "com.jpaquery.core.render.impl.JpaQueryRenderImpl",
      "com.jpaquery.core.facade.QueryRender",
      "com.jpaquery.core.facade.SubJpaQuery$SubJpaQueryType",
      "com.jpaquery.builder.JPQL$SqlFormatter",
      "com.jpaquery.core.impl.GroupPathImpl",
      "com.jpaquery.core.facade.HavingPath",
      "com.jpaquery.core.impl.SelectImpl",
      "com.jpaquery.core.impl.OrderPathImpl",
      "com.jpaquery.core.facade.HavingFunctionPath",
      "com.jpaquery.core.impl.QueryAppenderImpl",
      "com.jpaquery.core.facade.JoinPath",
      "com.jpaquery.core.facade.Where$WhereType",
      "com.jpaquery.core.impl.JoinPathImpl",
      "com.jpaquery.core.facade.JoinHandler",
      "com.jpaquery.core.facade.FunctionPath",
      "com.jpaquery.core.facade.Order",
      "com.jpaquery.core.render.impl.JpaQueryRenderImpl$1",
      "com.jpaquery.core.facade.SubJpaQuery",
      "com.jpaquery.core.impl.GroupImpl",
      "com.jpaquery.core.vo.QueryContent",
      "com.jpaquery.core.facade.Select",
      "com.jpaquery.core.impl.HavingPathImpl",
      "com.jpaquery.util._Helper",
      "com.jpaquery.core.vo.FromInfo",
      "com.jpaquery.core.impl.JoinImpl",
      "com.jpaquery.builder.JPQL$SqlFormatter$FormatProcess",
      "com.jpaquery.core.facade.WhereHandler",
      "com.jpaquery.core.facade.OrderPath$OrderPathType",
      "com.jpaquery.core.facade.Join",
      "com.jpaquery.core.facade.QueryAppender",
      "com.jpaquery.core.vo.EntityInfo",
      "com.jpaquery.core.facade.SelectPath$SelectPathType",
      "com.jpaquery.core.impl.HavingImpl",
      "com.jpaquery.core.facade.JpaQuery"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.jpaquery.core.facade.WhereHandler", false, JpaQueryRenderImpl_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JpaQueryRenderImpl_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.jpaquery.core.render.impl.JpaQueryRenderImpl",
      "com.jpaquery.core.facade.WherePath$WherePathType",
      "com.jpaquery.core.facade.SubJpaQuery$SubJpaQueryType",
      "com.jpaquery.core.render.impl.JpaQueryRenderImpl$1",
      "com.jpaquery.core.constant.LikeWay",
      "com.jpaquery.core.facade.SelectPath$SelectPathType",
      "com.jpaquery.core.impl.JpaQueryHandler",
      "com.jpaquery.core.impl.GroupImpl",
      "com.jpaquery.core.impl.SelectPathImpl",
      "com.jpaquery.core.impl.HavingImpl",
      "com.jpaquery.core.impl.HavingPathImpl",
      "com.jpaquery.core.vo.QueryContent",
      "com.jpaquery.builder.JPQL$SqlFormatter",
      "com.jpaquery.builder.JPQL$SqlFormatter$FormatProcess",
      "com.jpaquery.core.impl.OrderImpl",
      "com.jpaquery.core.impl.QueryAppenderImpl",
      "com.jpaquery.core.impl.OrderPathImpl",
      "com.jpaquery.core.facade.OrderPath$OrderPathType",
      "com.jpaquery.util._Helper",
      "com.jpaquery.core.impl.WherePathImpl",
      "com.jpaquery.core.impl.GroupPathImpl",
      "com.jpaquery.core.impl.BetweenPathImpl",
      "com.jpaquery.core.impl.JoinImpl",
      "com.jpaquery.core.vo.EntityInfo",
      "com.jpaquery.core.impl.JoinPathImpl",
      "com.jpaquery.core.facade.JoinPath$JoinPathType",
      "com.jpaquery.core.impl.WhereImpl",
      "com.jpaquery.util._MergeMap",
      "com.jpaquery.core.vo.PathInfo",
      "com.jpaquery.core.impl.SubJpaQueryImpl",
      "com.jpaquery.core.vo.FromInfo",
      "com.jpaquery.core.facade.Where$WhereType"
    );
  }
}
