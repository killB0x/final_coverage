/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 09:45:21 GMT 2022
 */

package com.jpaquery.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jpaquery.util._MergeMap;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class _MergeMap_ESTest extends _MergeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      _MergeMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        _MergeMap0.get(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Integer integer0 = new Integer(1222);
      _MergeMap0.containsValue(integer0);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , anyInt());
      _MergeMap0.compute(integer0, biFunction0);
      _MergeMap<Map<Integer, Integer>, LinkedHashSet<Integer>> _MergeMap1 = new _MergeMap<Map<Integer, Integer>, LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      _MergeMap1.putIfAbsent(_MergeMap0, linkedHashSet0);
      _MergeMap1.remove((Object) _MergeMap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      _MergeMap<Integer, LinkedHashSet<Integer>> _MergeMap0 = new _MergeMap<Integer, LinkedHashSet<Integer>>();
      Integer integer0 = new Integer(0);
      _MergeMap0.entrySet();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      BiFunction<LinkedHashSet<Integer>, LinkedHashSet<Integer>, LinkedHashSet<Integer>> biFunction0 = (BiFunction<LinkedHashSet<Integer>, LinkedHashSet<Integer>, LinkedHashSet<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      _MergeMap0.clear();
      LinkedHashSet<Integer> linkedHashSet1 = _MergeMap0.merge(integer0, linkedHashSet0, biFunction0);
      _MergeMap0.keySet();
      _MergeMap<LinkedHashSet<Integer>, HashMap<Integer, Integer>> _MergeMap1 = new _MergeMap<LinkedHashSet<Integer>, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(0);
      linkedHashSet0.add(integer1);
      hashMap0.put((Integer) null, integer0);
      _MergeMap1.put(linkedHashSet1, hashMap0);
      hashMap0.put(integer0, (Integer) null);
      _MergeMap1.put(linkedHashSet0, hashMap0);
      _MergeMap1.keySet();
      _MergeMap<Integer, Integer> _MergeMap2 = new _MergeMap<Integer, Integer>();
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      _MergeMap2.get(linkedHashSet2);
      linkedHashSet2.add(integer1);
      _MergeMap2.entrySet();
      _MergeMap<LinkedHashSet<Integer>, Integer> _MergeMap3 = new _MergeMap<LinkedHashSet<Integer>, Integer>();
      Integer integer2 = new Integer((-2145531388));
      _MergeMap3.replace(linkedHashSet0, integer2);
      Integer integer3 = new Integer(0);
      _MergeMap3.put(linkedHashSet2, integer3);
      _MergeMap2.keySet();
      _MergeMap<HashMap<Integer, Integer>, Map<Integer, Integer>> _MergeMap4 = new _MergeMap<HashMap<Integer, Integer>, Map<Integer, Integer>>();
      LinkedHashSet<Integer> linkedHashSet3 = new LinkedHashSet<Integer>();
      _MergeMap4.containsKey(linkedHashSet3);
      _MergeMap<Map<Integer, Integer>, Integer> _MergeMap5 = new _MergeMap<Map<Integer, Integer>, Integer>();
      _MergeMap5.entrySet();
      _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> _MergeMap6 = new _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      Integer integer4 = new Integer(478);
      _MergeMap6.get(integer4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> _MergeMap1 = new _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      _MergeMap1.own = null;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        _MergeMap1.put(linkedHashSet0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      _MergeMap0.values();
      _MergeMap0.keySet();
      _MergeMap<Integer, Integer> _MergeMap1 = new _MergeMap<Integer, Integer>();
      _MergeMap1.putAll(_MergeMap0);
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap3 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap3.size();
      _MergeMap2.putAll(_MergeMap3);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1040));
      _MergeMap1.put(integer0, integer1);
      _MergeMap1.get(integer0);
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap3.putAll(_MergeMap2);
      Integer integer2 = new Integer(0);
      _MergeMap3.containsKey(integer0);
      _MergeMap0.keySet();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer0, integer1);
      _MergeMap0.putAll(hashMap0);
      Integer integer2 = new Integer(0);
      _MergeMap0.put(integer2, integer2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer((-2146834467));
      hashMap0.put(integer0, integer1);
      _MergeMap0.putAll(hashMap0);
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap1.size();
      _MergeMap1.putAll(_MergeMap2);
      Integer integer2 = new Integer(1);
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap1 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap2.putAll(_MergeMap1);
      Integer integer3 = new Integer((-2146299807));
      _MergeMap2.get(integer3);
      _MergeMap2.entrySet();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(2452);
      Integer integer2 = new Integer(2452);
      hashMap0.put(integer2, integer1);
      _MergeMap0.putAll(hashMap0);
      boolean boolean0 = _MergeMap0.containsKey(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      _MergeMap0.put(integer0, integer1);
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      _MergeMap1.keySet();
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap1 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap2.own = (Map<HashMap<Integer, Integer>, HashMap<Integer, Integer>>) hashMap1;
      BiFunction<HashMap<Integer, Integer>, HashMap<Integer, Integer>, HashMap<Integer, Integer>> biFunction0 = (BiFunction<HashMap<Integer, Integer>, HashMap<Integer, Integer>, HashMap<Integer, Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      _MergeMap2.merge(hashMap0, hashMap0, biFunction0);
      _MergeMap2.keySet();
      _MergeMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
      _MergeMap1.putAll(_MergeMap1);
      Integer integer2 = new Integer(0);
      _MergeMap1.remove((Object) integer2);
      int int0 = (-4958);
      Integer integer3 = new Integer(int0);
      _MergeMap0.put(integer3, integer3);
      Integer integer4 = new Integer(int0);
      _MergeMap1.containsKey(integer4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2146736695));
      Integer integer1 = new Integer((-2));
      hashMap0.put(integer0, integer0);
      Integer integer2 = hashMap0.put(integer0, integer1);
      _MergeMap0.putAll(hashMap0);
      Integer integer3 = _MergeMap0.get(integer2);
      assertEquals((-2), (int)integer3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      HashMap<HashMap<Integer, Integer>, Integer> hashMap0 = new HashMap<HashMap<Integer, Integer>, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-3916));
      Integer integer1 = new Integer(4914);
      hashMap1.put(integer1, integer1);
      hashMap0.put(hashMap1, integer0);
      hashMap0.put(hashMap1, integer0);
      _MergeMap0.putAll(hashMap0);
      _MergeMap<Integer, Integer> _MergeMap1 = new _MergeMap<Integer, Integer>();
      Integer integer2 = new Integer((-609));
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function1 = function0.compose((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Function<Integer, Integer> function2 = function1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Integer integer3 = _MergeMap1.computeIfAbsent(integer2, function2);
      Integer integer4 = new Integer((-3916));
      BiConsumer<Integer, Integer> biConsumer0 = (BiConsumer<Integer, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      _MergeMap1.forEach(biConsumer0);
      _MergeMap1.remove((Object) integer4);
      _MergeMap1.put((Integer) null, (Integer) null);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap3 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap2.putAll(_MergeMap3);
      _MergeMap2.getOrDefault(hashMap0, hashMap1);
      _MergeMap2.keySet();
      Integer integer5 = _MergeMap1.get(integer3);
      Integer integer6 = new Integer((-933));
      _MergeMap1.get(integer6);
      _MergeMap0.entrySet();
      _MergeMap2.put(integer5, hashMap1);
      _MergeMap1.containsKey(integer0);
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap4 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap2 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap4.putAll(hashMap2);
      assertTrue(hashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      _MergeMap0.get(integer0);
      _MergeMap0.size();
      _MergeMap0.keySet();
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap1 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap1.keySet();
      _MergeMap1.size();
      Integer integer1 = new Integer(422);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(422);
      hashMap0.put(integer2, integer2);
      _MergeMap1.put(integer1, hashMap0);
      _MergeMap<Integer, Integer> _MergeMap2 = new _MergeMap<Integer, Integer>();
      Integer integer3 = new Integer(422);
      Integer integer4 = _MergeMap2.put(integer1, integer3);
      assertNull(integer4);
      
      int int0 = _MergeMap2.size();
      assertEquals(1, int0);
      
      Integer integer5 = new Integer(422);
      Integer integer6 = _MergeMap2.put(integer5, integer3);
      assertNotNull(integer6);
      
      Object object0 = new Object();
      _MergeMap2.containsKey(object0);
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap3 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap4 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      BiConsumer<HashMap<Integer, Integer>, Integer> biConsumer0 = (BiConsumer<HashMap<Integer, Integer>, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      _MergeMap4.forEach(biConsumer0);
      _MergeMap3.putAll(_MergeMap4);
      boolean boolean0 = _MergeMap4.containsKey(integer6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-160));
      hashMap0.put(integer0, integer0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      _MergeMap0.putAll(hashMap1);
      _MergeMap0.get(hashMap0);
      _MergeMap<Integer, LinkedHashSet<Integer>> _MergeMap1 = new _MergeMap<Integer, LinkedHashSet<Integer>>();
      _MergeMap1.putAll((Map<? extends Integer, ? extends LinkedHashSet<Integer>>) null);
      // Undeclared exception!
      try { 
        _MergeMap1.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jpaquery.util._MergeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      HashMap<HashMap<Integer, Integer>, Integer> hashMap0 = new HashMap<HashMap<Integer, Integer>, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-3916));
      Integer integer1 = new Integer(4914);
      hashMap1.put(integer1, integer1);
      hashMap0.put(hashMap1, integer0);
      hashMap0.put(hashMap1, integer0);
      _MergeMap0.putAll(hashMap0);
      _MergeMap<Integer, Integer> _MergeMap1 = new _MergeMap<Integer, Integer>();
      Integer integer2 = new Integer((-609));
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function1 = function0.compose((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Function<Integer, Integer> function2 = function1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Integer integer3 = _MergeMap1.computeIfAbsent(integer2, function2);
      Integer integer4 = new Integer((-3916));
      _MergeMap1.remove((Object) integer4);
      _MergeMap1.put((Integer) null, (Integer) null);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap3 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap2.putAll(_MergeMap3);
      _MergeMap2.keySet();
      Integer integer5 = _MergeMap1.get(integer3);
      Integer integer6 = new Integer((-933));
      _MergeMap1.get(integer6);
      _MergeMap0.entrySet();
      _MergeMap2.put(integer5, hashMap1);
      _MergeMap1.containsKey(integer0);
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap4 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap2 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap4.putAll(hashMap2);
      assertEquals(0, hashMap2.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      _MergeMap0.putAll(hashMap0);
      Integer integer0 = new Integer(1280);
      Integer integer1 = _MergeMap0.put(integer0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      _MergeMap0.others = null;
      // Undeclared exception!
      try { 
        _MergeMap0.putAll((Map<? extends HashMap<Integer, Integer>, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jpaquery.util._MergeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap1.putAll((Map<? extends HashMap<Integer, Integer>, ? extends HashMap<Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        _MergeMap1.remove((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      BiConsumer<HashMap<Integer, Integer>, Integer> biConsumer0 = (BiConsumer<HashMap<Integer, Integer>, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      _MergeMap0.forEach(biConsumer0);
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap1.putAll(hashMap0);
      HashMap<Integer, Integer> hashMap1 = _MergeMap1.get(hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      _MergeMap0.putAll(hashMap0);
      Integer integer0 = _MergeMap0.get(hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      _MergeMap0.put(hashMap0, hashMap0);
      BiConsumer<HashMap<Integer, Integer>, HashMap<Integer, Integer>> biConsumer0 = (BiConsumer<HashMap<Integer, Integer>, HashMap<Integer, Integer>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      _MergeMap0.forEach(biConsumer0);
      _MergeMap<Integer, Integer> _MergeMap1 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-713));
      hashMap1.put(integer0, integer0);
      Integer integer1 = new Integer((-1829));
      _MergeMap1.containsKey(hashMap1);
      _MergeMap<Integer, LinkedHashSet<Integer>> _MergeMap2 = new _MergeMap<Integer, LinkedHashSet<Integer>>();
      _MergeMap2.keySet();
      _MergeMap<Integer, Map<Integer, Integer>> _MergeMap3 = new _MergeMap<Integer, Map<Integer, Integer>>();
      Set<Map.Entry<Integer, Map<Integer, Integer>>> set0 = (Set<Map.Entry<Integer, Map<Integer, Integer>>>)_MergeMap3.entrySet();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      BiConsumer<Integer, Integer> biConsumer0 = (BiConsumer<Integer, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap1.put((Integer) null, integer0);
      _MergeMap0.putIfAbsent(hashMap0, hashMap1);
      Integer integer1 = new Integer(0);
      _MergeMap0.containsValue(integer1);
      _MergeMap<Integer, Integer> _MergeMap1 = new _MergeMap<Integer, Integer>();
      _MergeMap0.entrySet();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>(_MergeMap1);
      Integer integer2 = new Integer(0);
      hashMap2.put(integer1, integer2);
      _MergeMap0.put(hashMap2, hashMap2);
      _MergeMap0.putAll((Map<? extends HashMap<Integer, Integer>, ? extends HashMap<Integer, Integer>>) null);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      Integer integer3 = new Integer(0);
      _MergeMap1.own = (Map<Integer, Integer>) hashMap0;
      _MergeMap2.replace(integer3, hashMap2);
      _MergeMap2.keySet();
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap3 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      _MergeMap3.containsKey(hashMap2);
      _MergeMap1.put(integer1, integer3);
      _MergeMap3.get(integer1);
      Integer integer4 = new Integer(0);
      Integer integer5 = _MergeMap1.put((Integer) null, integer4);
      assertNull(integer5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      _MergeMap<Integer, Integer> _MergeMap1 = new _MergeMap<Integer, Integer>();
      Integer integer0 = new Integer((-2146199265));
      _MergeMap1.put(integer0, integer0);
      _MergeMap0.putAll(_MergeMap1);
      _MergeMap1.containsKey((Object) null);
      assertTrue(_MergeMap1.equals((Object)_MergeMap0));
      
      _MergeMap0.remove((Object) null);
      assertTrue(_MergeMap0.equals((Object)_MergeMap1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      _MergeMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      _MergeMap1.containsKey(hashMap0);
      // Undeclared exception!
      try { 
        _MergeMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jpaquery.util._MergeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      _MergeMap0.size();
      Integer integer0 = new Integer((-817));
      _MergeMap0.put(integer0, integer0);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap1 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap1.get((Object) null);
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      BiFunction<HashMap<Integer, Integer>, HashMap<Integer, Integer>, HashMap<Integer, Integer>> biFunction0 = (BiFunction<HashMap<Integer, Integer>, HashMap<Integer, Integer>, HashMap<Integer, Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      _MergeMap2.computeIfPresent((HashMap<Integer, Integer>) null, biFunction0);
      _MergeMap2.clear();
      _MergeMap2.replace((HashMap<Integer, Integer>) null, (HashMap<Integer, Integer>) null);
      _MergeMap2.put((HashMap<Integer, Integer>) null, (HashMap<Integer, Integer>) null);
      _MergeMap1.keySet();
      Integer integer1 = new Integer((-817));
      Integer integer2 = _MergeMap0.put((Integer) null, integer1);
      assertNull(integer2);
      
      Integer integer3 = new Integer((-817));
      boolean boolean0 = _MergeMap0.containsKey(integer3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      _MergeMap0.putAll(hashMap0);
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      HashMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> hashMap1 = new HashMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      _MergeMap1.get(hashMap1);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap0.put((Integer) null, (Integer) null);
      _MergeMap<LinkedHashSet<Integer>, Integer> _MergeMap3 = new _MergeMap<LinkedHashSet<Integer>, Integer>();
      _MergeMap3.remove((Object) hashMap1);
      _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> _MergeMap4 = new _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      boolean boolean0 = _MergeMap0.containsKey((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      _MergeMap0.merge(integer0, integer1, biFunction0);
      Integer integer2 = new Integer(0);
      _MergeMap0.put(integer2, integer2);
      Integer integer3 = _MergeMap0.put(integer2, integer2);
      assertTrue(integer3.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> _MergeMap1 = new _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      _MergeMap1.putIfAbsent(linkedHashSet0, linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet2 = _MergeMap1.put(linkedHashSet1, linkedHashSet1);
      assertNotNull(linkedHashSet2);
      assertNotSame(linkedHashSet2, linkedHashSet1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      HashMap<HashMap<Integer, Integer>, Integer> hashMap0 = new HashMap<HashMap<Integer, Integer>, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-3916));
      Integer integer1 = new Integer(4914);
      hashMap1.put(integer1, integer1);
      hashMap0.put(hashMap1, integer0);
      Integer integer2 = hashMap0.put(hashMap1, integer0);
      _MergeMap0.putAll(hashMap0);
      _MergeMap<Integer, Integer> _MergeMap1 = new _MergeMap<Integer, Integer>();
      Integer integer3 = new Integer((-609));
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function1 = function0.compose((Function<? super Integer, ? extends Integer>) unaryOperator0);
      function1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Integer integer4 = new Integer((-3916));
      _MergeMap1.remove((Object) integer4);
      _MergeMap1.put((Integer) null, (Integer) null);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap2.keySet();
      _MergeMap1.get(integer3);
      Integer integer5 = new Integer((-3916));
      _MergeMap<Integer, Integer> _MergeMap3 = new _MergeMap<Integer, Integer>();
      _MergeMap3.get(integer2);
      _MergeMap0.entrySet();
      Integer integer6 = new Integer(36);
      _MergeMap2.put(integer6, hashMap1);
      _MergeMap3.containsKey((Object) null);
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap4 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      Integer integer7 = _MergeMap0.remove((Object) integer6);
      assertNull(integer7);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2145184412));
      Integer integer1 = new Integer((-2145184412));
      hashMap0.put(integer0, integer1);
      _MergeMap0.putAll(hashMap0);
      _MergeMap0.get(hashMap0);
      Integer integer2 = _MergeMap0.remove((Object) integer1);
      assertEquals((-2145184412), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      _MergeMap0.putAll(hashMap0);
      boolean boolean0 = _MergeMap0.containsKey(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      _MergeMap0.putAll(hashMap0);
      HashMap<Integer, Integer> hashMap1 = _MergeMap0.remove((Object) hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Integer integer0 = new Integer(1624);
      Integer integer1 = new Integer(1);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(1624);
      Integer integer3 = new Integer(0);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((Integer) null, integer3, biFunction0);
      _MergeMap0.putIfAbsent(integer2, (Integer) null);
      Integer integer4 = new Integer((-1));
      hashMap0.put(integer4, (Integer) null);
      Integer integer5 = new Integer(1624);
      Integer integer6 = new Integer((-1));
      hashMap0.put(integer5, integer6);
      hashMap0.put((Integer) null, integer4);
      Integer integer7 = new Integer(0);
      hashMap0.put(integer0, integer7);
      hashMap0.putIfAbsent(integer0, (Integer) null);
      _MergeMap0.putAll(hashMap0);
      _MergeMap0.remove((Object) integer0, (Object) integer1);
      _MergeMap0.keySet();
      _MergeMap0.entrySet();
      _MergeMap0.containsKey(integer1);
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      _MergeMap1.get(integer7);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap3 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap2.putAll(_MergeMap3);
      Integer integer8 = _MergeMap0.remove((Object) integer0);
      assertNull(integer8);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      _MergeMap<Integer, LinkedHashSet<Integer>> _MergeMap0 = new _MergeMap<Integer, LinkedHashSet<Integer>>();
      _MergeMap0.size();
      Set<Integer> set0 = _MergeMap0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      _MergeMap0.put(integer1, integer2);
      Integer integer3 = _MergeMap0.remove((Object) integer0);
      assertTrue(integer3.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(2187);
      hashMap1.remove((Object) integer0, (Object) integer0);
      Integer integer1 = new Integer(2187);
      hashMap1.putIfAbsent(integer0, integer1);
      _MergeMap0.putAll(hashMap1);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      _MergeMap0.remove((Object) hashMap2, (Object) hashMap1);
      _MergeMap0.keySet();
      _MergeMap0.entrySet();
      Integer integer2 = new Integer(2187);
      _MergeMap0.containsKey(integer2);
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap2 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      Integer integer3 = new Integer((-2));
      _MergeMap2.get(integer3);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap3 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap4 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap3.putAll(_MergeMap4);
      HashMap<Integer, Integer> hashMap3 = new HashMap<Integer, Integer>();
      Integer integer4 = _MergeMap0.remove((Object) hashMap3);
      assertNull(integer4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(2452);
      Integer integer2 = new Integer(2452);
      hashMap0.put(integer2, integer1);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-1));
      hashMap0.putIfAbsent(integer3, integer4);
      _MergeMap0.putAll(hashMap0);
      Integer integer5 = new Integer((-1));
      _MergeMap0.put(integer3, integer1);
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      Integer integer6 = new Integer((-1));
      _MergeMap1.put(hashMap0, integer6);
      assertEquals(2, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Map<Integer, Integer> map0 = _MergeMap0.own;
      _MergeMap0.putAll(map0);
      Set<Integer> set0 = _MergeMap0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap0 = _MergeMap1.remove((Object) _MergeMap0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Integer integer0 = new Integer(32);
      _MergeMap0.put(integer0, integer0);
      Integer integer1 = _MergeMap0.get(integer0);
      assertEquals(32, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)_MergeMap0.entrySet();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> _MergeMap0 = new _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      _MergeMap0.clear();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet1 = _MergeMap0.put(linkedHashSet0, linkedHashSet0);
      assertNull(linkedHashSet1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Integer integer0 = new Integer((-1428));
      _MergeMap0.put(integer0, integer0);
      _MergeMap0.putIfAbsent((Integer) null, integer0);
      _MergeMap0.values();
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap1 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      Integer integer1 = new Integer((-959));
      LinkedHashSet<Map<Integer, HashMap<Integer, Integer>>> linkedHashSet0 = new LinkedHashSet<Map<Integer, HashMap<Integer, Integer>>>();
      _MergeMap1.others = (Set<Map<Integer, HashMap<Integer, Integer>>>) linkedHashSet0;
      _MergeMap0.put(integer1, (Integer) null);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap1.containsKey((Object) null);
      Integer integer2 = new Integer(168);
      _MergeMap2.remove((Object) integer2);
      _MergeMap1.isEmpty();
      _MergeMap1.putAll(_MergeMap2);
      _MergeMap2.keySet();
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap3 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer((-1428));
      _MergeMap1.entrySet();
      _MergeMap3.put(hashMap0, integer3);
      _MergeMap3.keySet();
      _MergeMap1.putAll(_MergeMap2);
      _MergeMap0.get(integer1);
      _MergeMap3.containsKey((Object) null);
      _MergeMap0.keySet();
      Integer integer4 = _MergeMap0.remove((Object) integer3);
      assertFalse(integer4.equals((Object)integer2));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap0 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      HashMap<HashMap<Integer, Integer>, Integer> hashMap0 = new HashMap<HashMap<Integer, Integer>, Integer>();
      _MergeMap0.putAll(hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Integer integer0 = _MergeMap0.put((Integer) null, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(2452);
      Integer integer2 = new Integer(2452);
      hashMap0.put(integer2, integer1);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-1));
      Integer integer5 = hashMap0.putIfAbsent(integer3, integer4);
      _MergeMap0.putAll(hashMap0);
      Integer integer6 = new Integer((-1));
      _MergeMap0.remove((Object) integer3, (Object) integer6);
      _MergeMap0.keySet();
      _MergeMap0.entrySet();
      _MergeMap0.containsKey(integer5);
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      _MergeMap1.get(integer4);
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap2 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap<Integer, HashMap<Integer, Integer>> _MergeMap3 = new _MergeMap<Integer, HashMap<Integer, Integer>>();
      _MergeMap2.putAll(_MergeMap3);
      Integer integer7 = _MergeMap0.remove((Object) integer1);
      assertFalse(integer7.equals((Object)integer6));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      _MergeMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
      // Undeclared exception!
      try { 
        _MergeMap0.containsKey(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> _MergeMap0 = new _MergeMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      boolean boolean0 = _MergeMap0.containsKey(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = _MergeMap0.get(hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      _MergeMap<Integer, Integer> _MergeMap0 = new _MergeMap<Integer, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(2539);
      _MergeMap0.getOrDefault(object0, integer0);
      _MergeMap<HashMap<Integer, Integer>, Integer> _MergeMap1 = new _MergeMap<HashMap<Integer, Integer>, Integer>();
      _MergeMap1.own = null;
      // Undeclared exception!
      try { 
        _MergeMap1.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
