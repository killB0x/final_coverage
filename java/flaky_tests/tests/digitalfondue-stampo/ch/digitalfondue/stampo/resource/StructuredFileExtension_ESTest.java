/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 23:23:21 GMT 2022
 */

package ch.digitalfondue.stampo.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.digitalfondue.stampo.resource.StructuredFileExtension;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StructuredFileExtension_ESTest extends StructuredFileExtension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Optional<String> optional0 = Optional.ofNullable("");
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Optional<String> optional1 = optional0.filter(predicate0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, optional1, optional0, linkedHashSet0, linkedList0);
      assertEquals("", structuredFileExtension0.getRest());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Optional<String> optional0 = Optional.ofNullable("<D&");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedList0.addFirst("<D&");
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, optional0, optional0, linkedHashSet0, linkedList0);
      String string0 = structuredFileExtension0.getRest();
      assertEquals("<D&", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Optional<String> optional0 = Optional.ofNullable("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, optional0, optional0, linkedHashSet0, linkedList0);
      List<String> list0 = structuredFileExtension0.getProcessorRelatedExts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Optional<String> optional0 = Optional.ofNullable("<D&");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedList0.addFirst("<D&");
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, optional0, optional0, linkedHashSet0, linkedList0);
      List<String> list0 = structuredFileExtension0.getProcessorRelatedExts();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, (Optional<String>) null, (Optional<String>) null, linkedHashSet0, linkedList0);
      Optional<String> optional0 = structuredFileExtension0.getProcessorFileExtensionOverride();
      assertNull(optional0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, (Optional<String>) null, (Optional<String>) null, linkedHashSet0, linkedList0);
      Optional<String> optional0 = structuredFileExtension0.getMaybeFileExtension();
      assertNull(optional0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, (Optional<String>) null, (Optional<String>) null, (Set<String>) null, linkedList0);
      Set<String> set0 = structuredFileExtension0.getLocales();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Optional<String> optional0 = Optional.ofNullable("<D&");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, optional0, optional0, linkedHashSet0, linkedList0);
      linkedHashSet0.add("<D&");
      Set<String> set0 = structuredFileExtension0.getLocales();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, (Optional<String>) null, (Optional<String>) null, linkedHashSet0, linkedList0);
      // Undeclared exception!
      try { 
        structuredFileExtension0.getFinalFileExtension();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.digitalfondue.stampo.resource.StructuredFileExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optional<String> optional0 = Optional.empty();
      StructuredFileExtension structuredFileExtension0 = null;
      try {
        structuredFileExtension0 = new StructuredFileExtension((List<String>) null, optional0, optional0, (Set<String>) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.digitalfondue.stampo.resource.StructuredFileExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Optional<String> optional0 = Optional.ofNullable("<D&");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, optional0, optional0, linkedHashSet0, linkedList0);
      String string0 = structuredFileExtension0.getFinalFileExtension();
      assertEquals(".<D&", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Optional<String> optional0 = Optional.empty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("(Hxf@))WZ7.~");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension((List<String>) null, optional0, optional0, linkedHashSet0, linkedList0);
      String string0 = structuredFileExtension0.getFinalFileExtension();
      assertEquals(".(Hxf@))WZ7.~", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Optional<String> optional0 = Optional.ofNullable("<D&");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, optional0, optional0, linkedHashSet0, linkedList0);
      Optional<String> optional1 = structuredFileExtension0.getProcessorFileExtensionOverride();
      assertSame(optional0, optional1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Optional<String> optional0 = Optional.empty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension((List<String>) null, optional0, optional0, linkedHashSet0, linkedList0);
      Optional<String> optional1 = structuredFileExtension0.getMaybeFileExtension();
      assertSame(optional0, optional1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Optional<String> optional0 = Optional.ofNullable("<D&");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, optional0, optional0, linkedHashSet0, linkedList0);
      Set<String> set0 = structuredFileExtension0.getLocales();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Optional<String> optional0 = Optional.empty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension((List<String>) null, optional0, optional0, linkedHashSet0, linkedList0);
      String string0 = structuredFileExtension0.getRest();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Optional<String> optional0 = Optional.empty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension((List<String>) null, optional0, optional0, linkedHashSet0, linkedList0);
      List<String> list0 = structuredFileExtension0.getProcessorRelatedExts();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Optional<String> optional0 = Optional.empty();
      StructuredFileExtension structuredFileExtension0 = new StructuredFileExtension(linkedList0, optional0, optional0, linkedHashSet0, linkedList0);
      String string0 = structuredFileExtension0.getFinalFileExtension();
      assertEquals("", string0);
  }
}
