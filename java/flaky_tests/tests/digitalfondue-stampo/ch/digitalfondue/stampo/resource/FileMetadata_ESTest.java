/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 23:26:43 GMT 2022
 */

package ch.digitalfondue.stampo.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.digitalfondue.stampo.resource.FileMetadata;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileMetadata_ESTest extends FileMetadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      fileMetadata0.getRawMap();
      assertEquals("default", fileMetadata0.getDirective());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileMetadata fileMetadata0 = null;
      try {
        fileMetadata0 = new FileMetadata((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.digitalfondue.stampo.resource.FileMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("override-use-ugly-url", "override-use-ugly-url");
      FileMetadata fileMetadata0 = null;
      try {
        fileMetadata0 = new FileMetadata(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("only-for-locales", "only-for-locales");
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      assertEquals("default", fileMetadata0.getDirective());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockDate mockDate0 = new MockDate();
      hashMap0.put("only-for-locales", mockDate0);
      FileMetadata fileMetadata0 = null;
      try {
        fileMetadata0 = new FileMetadata(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong type for locales: Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("ch.digitalfondue.stampo.resource.FileMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      String string0 = fileMetadata0.getDirective();
      assertEquals("default", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      fileMetadata0.getOverrideLocale();
      assertEquals("default", fileMetadata0.getDirective());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      fileMetadata0.getRawMap();
      assertEquals("default", fileMetadata0.getDirective());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      fileMetadata0.getOverrideOutputToPath();
      assertEquals("default", fileMetadata0.getDirective());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      fileMetadata0.getDate();
      assertEquals("default", fileMetadata0.getDirective());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      fileMetadata0.getOverrideUseUglyUrl();
      assertEquals("default", fileMetadata0.getDirective());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      fileMetadata0.getOverrideLayout();
      assertEquals("default", fileMetadata0.getDirective());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileMetadata fileMetadata0 = new FileMetadata(hashMap0);
      fileMetadata0.getOnlyForLocales();
      assertEquals("default", fileMetadata0.getDirective());
  }
}
