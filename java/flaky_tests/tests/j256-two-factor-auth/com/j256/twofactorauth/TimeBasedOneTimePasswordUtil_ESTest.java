/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 21:50:52 GMT 2022
 */

package com.j256.twofactorauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.twofactorauth.TimeBasedOneTimePasswordUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeBasedOneTimePasswordUtil_ESTest extends TimeBasedOneTimePasswordUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Random.setNextRandom(187);
      TimeBasedOneTimePasswordUtil.generateBase32Secret(187);
      int int0 = 2147471803;
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateNumberHex("3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", 3L, 2147471803, 2147471803);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateNumber("x", 2242L, 149, 1073741824);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("AAAAAAAAAAAAAAAA");
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateBase32Secret(220648);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.generateBase32Secret();
      TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("AAAAAAAAAAAAAAAA");
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateNumberStringHex("AAAAAAAAAAAAAAAA", 220648, 220648, 220648);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.generateBase32Secret();
      TimeBasedOneTimePasswordUtil.generateNumberHex("AAAAAAAAAAAAAAAA", (long) 5366, (-1732));
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("AAAAAAAAAAAAAAAA", 405575);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.generateCurrentNumberString("c3t");
      TimeBasedOneTimePasswordUtil.qrImageUrl("535557", (String) null, 9);
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("535557", 1073741824);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.generateCurrentNumberString("bb");
      TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("686864", (-1590), (long) (-1590), (long) (-1590), (-1590));
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.validateCurrentNumber("bb", (-1590), 46413638L);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.generateBase32Secret();
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateCurrentNumber("AAAAAAAAAAAAAAAA", 2147483601);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("00000000000000000000000000000000", 1743, 2147483624L, 2147483624L, 1743);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.generateBase32Secret();
      TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("AAAAAAAAAAAAAAAA");
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateHexSecret(220648);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.validateCurrentNumber("Ico", 0, 3L, (long) 19, 15, 0);
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("-", (-3614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: -
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Random.setNextRandom((-2619));
      TimeBasedOneTimePasswordUtil.generateHexSecret();
      TimeBasedOneTimePasswordUtil.validateCurrentNumber("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", 1, 225144L, 225144L, 1, 1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.generateBase32Secret();
      int int0 = TimeBasedOneTimePasswordUtil.DEFAULT_TIME_STEP_SECONDS;
      TimeBasedOneTimePasswordUtil.zeroPrepend(0, 0);
      TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("AAAAAAAAAAAAAAAA", 0, (-1L), (long) 30, 698, (-1));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.validateCurrentNumber("Ico", 3, (long) (-1), 183L, 8, 1);
      TimeBasedOneTimePasswordUtil.zeroPrepend(569, 1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex((String) null, 32, (long) 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Random.setNextRandom(667);
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret(667);
      assertEquals("3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string0);
      assertNotNull(string0);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateNumberHex
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.validateCurrentNumber("AAAAAAAAAAAAAAAA", 2147483645, (-1L), (long) 2147483645, 2147483645, 2147483645);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber((String) null, (-4014), (long) (-4014));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("Ico", (-1), (long) 3, (long) 3, (-1), (-1));
      assertFalse(boolean0);
      
      String string0 = TimeBasedOneTimePasswordUtil.generateNumberString("Ico", 3, (-1), (-1370));
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = TimeBasedOneTimePasswordUtil.generateNumber("co", (long) 3, (-1), (-162));
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("co", (long) 0, (-2198));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: o
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Random.setNextRandom(122);
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("2222222222222222", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateBase32Secret(122);
      assertFalse(string1.equals((Object)string0));
      assertEquals("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("", (long) 122, 104, 122);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumber("AAAAAAAAAAAAAAAA", 831);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateCurrentNumberString("AAAAAAAAAAAAAAAA");
      assertFalse(string1.equals((Object)string0));
      assertEquals("880551", string1);
      assertNotNull(string1);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateCurrentNumber("AAAAAAAAAAAAAAAA", (-846));
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("880551", (-846));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: 8
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberHex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Random.setNextRandom(830);
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("6666666666666666", string0);
      assertNotNull(string0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      Random.setNextRandom(170);
      String string1 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertFalse(string1.equals((Object)string0));
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("aXRS9}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: X
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("AAAAAAAAAAAAAAAA", 4058, (long) (-1), (long) (-1), (-1), 1073741824);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateCurrentNumberString("UTSK6VT");
      assertEquals("460937", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("UTSK6VT", 28, (long) 28, (long) 28, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Random.setNextRandom(2139095040);
      String string0 = TimeBasedOneTimePasswordUtil.generateCurrentNumberString("4TR=;L");
      assertEquals("538717", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.zeroPrepend(666, 2139095040);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateBase32Secret(2145338309);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("00000000000000000000000000000000", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertNotNull(string1);
      
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("00000000000000000000000000000000", (-1549), (long) (-1549));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Random.setNextRandom(12);
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret(12);
      assertEquals("CCCCCCCCCCCC", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertFalse(string1.equals((Object)string0));
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Random.setNextRandom(12);
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("MMMMMMMMMMMMMMMM", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.qrImageUrl("", "1.L>twD]K", 32, 12);
      assertFalse(string1.equals((Object)string0));
      assertEquals("https://chart.googleapis.com/chart?chs=12x12&cht=qr&chl=12x12&chld=M|0&cht=qr&chl=otpauth://totp/%3Fsecret%3D1.L>twD]K%26digits%3D32", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("00000000000000000000000000000000", (-2838), 1335328482L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("AAAAAAAAAAAAAAAA", 1);
      assertEquals(8, int0);
      
      int int1 = TimeBasedOneTimePasswordUtil.generateCurrentNumber("AAAAAAAAAAAAAAAA", 1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("co", 46, (long) 3, (long) 3, 46);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("Df+k=;", 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: +
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("00000000000000000000000000000000", 1716);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("AAAAAAAAAAAAAAAA", 8, 1879L, (-1L), 52, (-886));
      assertFalse(boolean0);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateNumber("AAAAAAAAAAAAAAAA", 549L, 8, 48);
      assertEquals(1335328482, int0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("otpauth://totp/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: o
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber((String) null, (long) (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber((String) null, (-780), 1L, (long) (-780), (-780));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("00000000000000000000000000000000", 0, (long) 0, (long) 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("c3o", (-1), (long) (-1), (long) (-1), (-1), (-1));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberStringHex((String) null, 4106L, 771, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("Z]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: ]
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      TimeBasedOneTimePasswordUtil.generateHexSecret(2013265920);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberString((String) null, (-2811L), 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("", 3, 9L, 11L, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Random.setNextRandom((-630));
      byte[] byteArray0 = TimeBasedOneTimePasswordUtil.decodeHex("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("66666666666666666666666666666666", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateOtpAuthUrl("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("otpauth://totp/%3Fsecret%3D%26digits%3D6", string1);
      assertNotNull(string1);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("otpauth://totp/%3Fsecret%3D%26digits%3D6", (-630), 10L, (long) (-630), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: o
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("", 45, (long) 45, (long) 45, 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Random.setNextRandom(12);
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      System.setCurrentTimeMillis((-2409L));
      Random.setNextRandom(15);
      byte[] byteArray0 = TimeBasedOneTimePasswordUtil.decodeHex("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateOtpAuthUrl("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("otpauth://totp/FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF%3Fsecret%3D%26digits%3D6", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("", (-2569), (long) 15, (long) 15, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("AAAAAAAAAAAAAAAA");
      assertFalse(string1.equals((Object)string0));
      assertEquals("220648", string1);
      assertNotNull(string1);
      
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("220648", 200, 0L, (long) 200, 200);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex((String) null, 1L, (-769));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber("", 817L, (-802));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      int int0 = 11;
      int int1 = TimeBasedOneTimePasswordUtil.generateNumberHex("00000000000000000000000000000000", 141L, 11, 11);
      assertFalse(int1 == int0);
      assertEquals(1335328482, int1);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("00000000000000000000000000000000", 1335328482, (long) 11, (long) 1335328482, 61, 255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: 0
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("o", 52, 0L, (long) 3, 52, 3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("zAg[^1UnV+@xbxO<", 25, (long) 25, (long) 25, 25, 25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: [
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("00000000000000000000000000000000", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertNotNull(string1);
      
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("0", (-1), (-1302L), 1392L, (-1), (-1549));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret(5418);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString(string0, 5418);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("AAAAAAAAAAAAAAAA", 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1295220648", string1);
      assertNotNull(string1);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateNumber("AAAAAAAAAAAAAAAA", (long) 10, 1);
      assertEquals(328482, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("00000000000000000000000000000000", 5418, (long) 5418, (long) 5418, 5418, 5418);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("co", 52, 0L, (long) 3, 52, 3);
      assertFalse(boolean0);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateNumber("co", 3163L, 3, 3);
      assertEquals(746, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("", 677L, (-1286));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("00000000000000000000000000000000");
      assertFalse(string1.equals((Object)string0));
      assertEquals("880551", string1);
      assertNotNull(string1);
      
      String string2 = TimeBasedOneTimePasswordUtil.generateOtpAuthUrl("880551", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("otpauth://totp/880551%3Fsecret%3Dnull%26digits%3D6", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("", (-4634), 3L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = TimeBasedOneTimePasswordUtil.decodeBase32("AAAAAAAAAAAAAAAA");
      assertEquals(10, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateNumberHex("AAAAAAAAAAAAAAAA", 65143L, 120);
      assertEquals(405575, int0);
      
      int int1 = 3163;
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("AAAAAAAAAAAAAAAA", 3163, 108L);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberStringHex("AAAAAAAAAAAAAAAA", 120, 120, 3163);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("bt_b{E6K\"s;mz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: t
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex((String) null, (-1073741823), (long) (-1073741823), (long) (-1073741823), (-79));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("co");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: o
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateCurrentNumberString("VV3Eap");
      assertFalse(string1.equals((Object)string0));
      assertEquals("012934", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.qrImageUrl("]Bg)?Ev; BJ)HA`!", "'~K-sB ut^]a[>G=#", 3656);
      assertEquals("https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=200x200&chld=M|0&cht=qr&chl=otpauth://totp/]Bg)?Ev; BJ)HA`!%3Fsecret%3D'~K-sB ut^]a[>G=#%26digits%3D3656", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertFalse(string1.equals((Object)string0));
      assertEquals("00000000000000000000000000000000", string1);
      assertNotNull(string1);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("00000000000000000000000000000000");
      assertEquals(880551, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateBase32Secret(0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = TimeBasedOneTimePasswordUtil.qrImageUrl("", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=200x200&chld=M|0&cht=qr&chl=otpauth://totp/%3Fsecret%3D%26digits%3D6", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = TimeBasedOneTimePasswordUtil.decodeBase32("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = 3332;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("QOyx}+Q", 3332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: }
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateHexSecret((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-892);
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("FMA", (-1564), (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: M
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.decodeBase32((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("hD2c", 32, (long) 32, (long) 32, 32, 32);
      assertFalse(boolean0);
      
      boolean boolean1 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("hD2c", 20, (long) 1168, (long) 20, 1168);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("", 63, (-620L), (-1L), 2069, 1168);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateCurrentNumberString("AAAAAAAAAAAAAAAA", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 40;
      String string0 = "s";
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("s", 1, 0L);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.decodeHex("s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: s
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = TimeBasedOneTimePasswordUtil.generateCurrentNumber("o");
      assertEquals(632154, int0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("o", 632154, (-2184L), (-1000L), 0, 292);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex((String) null, (long) 1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.decodeHex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.zeroPrepend(667, 667);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 0, end 664, length 100
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("AAAAAAAAAAAAAAAA", 792, (long) 792, (long) 792, 792, 792);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("hD2c", 32, (long) 32, (long) 32, 32, 32);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("hD2c", 32, 2084597402L, 52L, 32, 1856);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberHex((String) null, 1781);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("n=U$C'A?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateBase32Secret((-362));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -362
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("5");
      assertEquals("415909", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret(218);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberStringHex("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 218, 218, 218);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("00000000000000000000000000000000", 0);
      assertEquals(0, int0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateOtpAuthUrl("00000000000000000000000000000000", "00000000000000000000000000000000", 90);
      assertFalse(string1.equals((Object)string0));
      assertEquals("otpauth://totp/00000000000000000000000000000000%3Fsecret%3D00000000000000000000000000000000%26digits%3D90", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberStringHex("/jQ-", 0, 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: 
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.zeroPrepend((-870), 1);
      assertEquals("-870", string0);
      assertNotNull(string0);
      
      TimeBasedOneTimePasswordUtil timeBasedOneTimePasswordUtil0 = new TimeBasedOneTimePasswordUtil();
      assertNotNull(timeBasedOneTimePasswordUtil0);
      assertEquals(200, TimeBasedOneTimePasswordUtil.DEFAULT_QR_DIMENTION);
      assertEquals(6, TimeBasedOneTimePasswordUtil.DEFAULT_OTP_LENGTH);
      assertEquals(30, TimeBasedOneTimePasswordUtil.DEFAULT_TIME_STEP_SECONDS);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberStringHex("_IhZl<ijy", 0L, 549, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: _
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("hD2c", 32, (long) 32, 255L, 32, 32);
      assertFalse(boolean0);
      
      String string0 = TimeBasedOneTimePasswordUtil.qrImageUrl("hD2c", "hD2c", 4941);
      assertEquals("https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=200x200&chld=M|0&cht=qr&chl=otpauth://totp/hD2c%3Fsecret%3DhD2c%26digits%3D4941", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = TimeBasedOneTimePasswordUtil.decodeBase32("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = TimeBasedOneTimePasswordUtil.generateOtpAuthUrl("", "");
      assertEquals("otpauth://totp/%3Fsecret%3D%26digits%3D6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret(24);
      assertEquals("000000000000000000000000", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.qrImageUrl("-xwUk4>3", "&cht=qr&chl=", 24);
      assertFalse(string1.equals((Object)string0));
      assertEquals("https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=200x200&chld=M|0&cht=qr&chl=otpauth://totp/-xwUk4>3%3Fsecret%3D&cht=qr&chl=%26digits%3D24", string1);
      assertNotNull(string1);
      
      int int0 = 3020;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("yPj`b*%\"S+v.?6l", 632L, 3020);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: y
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumber("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("00000000000000000000000000000000", 243);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberString("%26digits%3D", (-1024L), (-1196), (-1196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: %
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("", 680, 1L, 1L, 680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("", 1, (-57L), 0L, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber("0DStK,gz=s?Z", (long) 1856, 1856, 1856);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: 0
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("d~cj=Y<pho3d:VKi", 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: ~
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = TimeBasedOneTimePasswordUtil.decodeHex("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = 851;
      int int1 = 5;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("?vq@TN tw", 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: ?
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("", 986);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateCurrentNumberString("co");
      assertEquals("325340", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex(";AA", 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: ;
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("00000000000000000000000000000000", 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals("551", string1);
      assertNotNull(string1);
      
      String string2 = TimeBasedOneTimePasswordUtil.generateHexSecret(3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("000", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex((String) null, 3, (long) 3, (long) 3, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumber("tw[|^^Gp7z6}m+H9g{u", (-1257));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: [
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "yPj`b*%\"S+v.?6l";
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumber("yPj`b*%\"S+v.?6l", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: `
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumber((String) null, (-960));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberString("", 3163L, 29, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = TimeBasedOneTimePasswordUtil.decodeHex("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = TimeBasedOneTimePasswordUtil.decodeHex("");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = "KNZbQgZ&,I";
      int int0 = 2;
      String string1 = TimeBasedOneTimePasswordUtil.qrImageUrl("KNZbQgZ&,I", "", 2, 2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("https://chart.googleapis.com/chart?chs=2x2&cht=qr&chl=2x2&chld=M|0&cht=qr&chl=otpauth://totp/KNZbQgZ&,I%3Fsecret%3D%26digits%3D2", string1);
      assertNotNull(string1);
      
      TimeBasedOneTimePasswordUtil timeBasedOneTimePasswordUtil0 = new TimeBasedOneTimePasswordUtil();
      assertNotNull(timeBasedOneTimePasswordUtil0);
      assertEquals(30, TimeBasedOneTimePasswordUtil.DEFAULT_TIME_STEP_SECONDS);
      assertEquals(200, TimeBasedOneTimePasswordUtil.DEFAULT_QR_DIMENTION);
      assertEquals(6, TimeBasedOneTimePasswordUtil.DEFAULT_OTP_LENGTH);
      
      String string2 = TimeBasedOneTimePasswordUtil.qrImageUrl("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=200x200&chld=M|0&cht=qr&chl=otpauth://totp/%3Fsecret%3D%26digits%3D6", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberString("", 2998L, 870, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TimeBasedOneTimePasswordUtil timeBasedOneTimePasswordUtil0 = new TimeBasedOneTimePasswordUtil();
      assertNotNull(timeBasedOneTimePasswordUtil0);
      assertEquals(30, TimeBasedOneTimePasswordUtil.DEFAULT_TIME_STEP_SECONDS);
      assertEquals(6, TimeBasedOneTimePasswordUtil.DEFAULT_OTP_LENGTH);
      assertEquals(200, TimeBasedOneTimePasswordUtil.DEFAULT_QR_DIMENTION);
      
      System.setCurrentTimeMillis((-870));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("", 3366, (long) 3366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("=bfrp?~dWS*);");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("q4*qFH=gG~Ut/Z=a", 3416, (long) 3416);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: *
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("", 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.decodeBase32("00000000000000000000000000000000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: 0
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 1816;
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret(1816);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertFalse(string1.equals((Object)string0));
      assertEquals("00000000000000000000000000000000", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.decodeBase32("00000000000000000000000000000000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: 0
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("", (long) 6, 60, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber((String) null, (-1010L), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("(J", (long) 1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: (
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("t|f.>*F.;Z8M9l!Y7", (-1), (long) (-1), (long) (-1), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: |
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("?jz", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: ?
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "9y^lLi%a";
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("9y^lLi%a", 3043);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: y
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("U0X[Xo)j|H%", 70, (long) 70, (long) 70, 70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: 0
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("c3o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: o
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateCurrentNumberString("NGo");
      assertEquals("075700", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertFalse(string1.equals((Object)string0));
      assertEquals("AAAAAAAAAAAAAAAA", string1);
      assertNotNull(string1);
      
      String string2 = TimeBasedOneTimePasswordUtil.generateHexSecret(0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = TimeBasedOneTimePasswordUtil.qrImageUrl("AAAAAAAAAAAAAAAA", "", 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=200x200&chld=M|0&cht=qr&chl=otpauth://totp/AAAAAAAAAAAAAAAA%3Fsecret%3D%26digits%3D0", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("&cht=qr&chl=", (long) 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberString("AAAAAAAAAAAAAAAA", 181303L, 128, 128);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "]j";
      int int0 = 0;
      int int1 = 457;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberString("]j", 0L, 0, 457);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex((String) null, 716);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = null;
      int int0 = 1063;
      String string1 = TimeBasedOneTimePasswordUtil.generateOtpAuthUrl((String) null, (String) null, 1063);
      assertEquals("otpauth://totp/null%3Fsecret%3Dnull%26digits%3D1063", string1);
      assertNotNull(string1);
      
      String string2 = null;
      int int1 = (-307);
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex((String) null, (-307));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("", 292, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex((String) null, (long) (-4024), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TimeBasedOneTimePasswordUtil timeBasedOneTimePasswordUtil0 = new TimeBasedOneTimePasswordUtil();
      assertNotNull(timeBasedOneTimePasswordUtil0);
      assertEquals(200, TimeBasedOneTimePasswordUtil.DEFAULT_QR_DIMENTION);
      assertEquals(6, TimeBasedOneTimePasswordUtil.DEFAULT_OTP_LENGTH);
      assertEquals(30, TimeBasedOneTimePasswordUtil.DEFAULT_TIME_STEP_SECONDS);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("gqK!]rz/vI7d3CdOI8", (long) 200, 120);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: g
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex((String) null, 0L, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("UI\"b8K[Z-", (-17), (long) (-1), (long) (-17), (-1), (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: U
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 1621;
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret(1621);
      assertNotNull(string0);
      
      String string1 = "S";
      int int1 = 955;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("S", 1621, 0L, 0L, 955, 1621);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: S
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber("co", 3180L, 100, 100);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("00000000000000000000000000000000", 1432L, 643, 643);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "[F._khOa";
      int int0 = 0;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberHex("[F._khOa", (-1L), 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberStringHex("}NrHZY?s'e{i+RK<4u", 1168L, 549, 549);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: }
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret();
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
      
      int int0 = (-248);
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("", (-248), 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("c3o", 1741, (long) 1741);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: o
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "https://chart.googleapis.com/chart?chs=";
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumber("https://chart.googleapis.com/chart?chs=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: :
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("00000000000000000000000000000000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: 0
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      int int0 = TimeBasedOneTimePasswordUtil.generateCurrentNumberHex("00000000000000000000000000000000");
      assertEquals(880551, int0);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber("00000000000000000000000000000000", (long) 880551, 880551);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: 0
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "r$gJ}3bb5?t<nAOSa";
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber("r$gJ}3bb5?t<nAOSa", 0L, (-164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: $
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Random.setNextRandom(23);
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberStringHex("", 23, 23, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "";
      int int0 = 1;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumberStringHex("", 0L, (-3933), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("", 274);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = (-374);
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("", (-374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("", 667, (long) 667);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "";
      int int0 = 1863;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("", 1863, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateBase32Secret(1816);
      assertNotNull(string0);
      
      byte[] byteArray0 = TimeBasedOneTimePasswordUtil.decodeBase32(string0);
      assertEquals(1135, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateNumberStringHex(string0, 1816, 1816, (-2811));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = TimeBasedOneTimePasswordUtil.qrImageUrl(string0, "0", 1816);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = TimeBasedOneTimePasswordUtil.generateNumberStringHex("0", 0L, (-2811), 0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateBase32Secret((-2811));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2811
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber("", (long) 6, 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("H9c3t", 169, (long) 169, (long) 169, 169);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: H
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("00000000000000000000000000000000", 1741, (long) 1741);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("", 10, (long) 10, (long) 10, 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("", 3, (long) 3, (long) 3, 3, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumber("ZxQ#+Qee<B}f+fG~0 Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: #
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumber("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.qrImageUrl("", "", 2);
      assertEquals("https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=200x200&chld=M|0&cht=qr&chl=otpauth://totp/%3Fsecret%3D%26digits%3D2", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.qrImageUrl("3;I", "3;I", 0);
      assertEquals("https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=200x200&chld=M|0&cht=qr&chl=otpauth://totp/3;I%3Fsecret%3D3;I%26digits%3D0", string0);
      
      String string1 = TimeBasedOneTimePasswordUtil.generateHexSecret();
      assertEquals("00000000000000000000000000000000", string1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.qrImageUrl("!G)C}-!m", "!G)C}-!m");
      assertEquals("https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=200x200&chld=M|0&cht=qr&chl=otpauth://totp/!G)C}-!m%3Fsecret%3D!G)C}-!m%26digits%3D6", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.qrImageUrl(" IEl&>Or1?c&3h", "Invalid hex character: ", 1203, 1203);
      assertEquals("https://chart.googleapis.com/chart?chs=1203x1203&cht=qr&chl=1203x1203&chld=M|0&cht=qr&chl=otpauth://totp/ IEl&>Or1?c&3h%3Fsecret%3DInvalid hex character: %26digits%3D1203", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = TimeBasedOneTimePasswordUtil.generateOtpAuthUrl("tw[\"|^^Gp7}m+H9g{u", "tw[\"|^^Gp7}m+H9g{u");
      assertEquals("otpauth://totp/tw[\"|^^Gp7}m+H9g{u%3Fsecret%3Dtw[\"|^^Gp7}m+H9g{u%26digits%3D6", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "RlFCfiE[xFD;";
      TimeBasedOneTimePasswordUtil.generateOtpAuthUrl("RlFCfiE[xFD;", "RlFCfiE[xFD;");
      int int0 = 0;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumberHex("RlFCfiE[xFD;", 0, (long) 0, (long) 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: R
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TimeBasedOneTimePasswordUtil.zeroPrepend(3026, 70);
      TimeBasedOneTimePasswordUtil.decodeHex("0000000000000000000000000000000000000000000000000000000000000000003026");
      TimeBasedOneTimePasswordUtil.qrImageUrl("", "", 3026);
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber("2^ YV.t..58}RICp'", 3026, 0L, (long) 3026, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: ^
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("co", 2173);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: o
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("%3Fsecret%3D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: %
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "!ZBBm'N~";
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.decodeHex("!ZBBm'N~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: !
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.decodeHex("hD2c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hex character: h
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber((String) null, 17, (long) 17, (long) 17, 17, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = null;
      int int0 = 3149;
      int int1 = 3266;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.validateCurrentNumber((String) null, 3149, (long) 3149, 2616L, 3149, 3266);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = TimeBasedOneTimePasswordUtil.validateCurrentNumber("co", 3, (long) 3, (long) 3, 3, 3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber((String) null, 3174L, 29, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberString("UTCKJ7cDaXf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid base-32 character: 
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateCurrentNumberStringHex("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = null;
      int int0 = 200;
      // Undeclared exception!
      try { 
        TimeBasedOneTimePasswordUtil.generateNumber((String) null, 0L, 200, 200);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.twofactorauth.TimeBasedOneTimePasswordUtil", e);
      }
  }
}
