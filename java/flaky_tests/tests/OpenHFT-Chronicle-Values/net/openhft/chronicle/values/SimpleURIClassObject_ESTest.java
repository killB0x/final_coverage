/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:49:29 GMT 2022
 */

package net.openhft.chronicle.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.nio.CharBuffer;
import javax.tools.JavaFileObject;
import net.openhft.chronicle.values.SimpleURIClassObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleURIClassObject_ESTest extends SimpleURIClassObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject((URI) null, class0);
      URI uRI0 = simpleURIClassObject0.toUri();
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      Class<CharBuffer> class0 = CharBuffer.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      URI uRI1 = simpleURIClassObject0.toUri();
      assertNull(uRI1.getScheme());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      URI uRI0 = MockURI.aHttpURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      InputStream inputStream0 = simpleURIClassObject0.openInputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI1, class0);
      String string0 = simpleURIClassObject0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.URI("net.openhft.ccronicle.values.SimpleURIClassObject", "net.openhft.ccronicle.values.SimpleURIClassObject", "net.openhft.ccronicle.values.SimpleURIClassObject");
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      try { 
        simpleURIClassObject0.openInputStream();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: net.openhft.ccronicle.values.simpleuriclassobject
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      URI uRI0 = MockURI.create("");
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      // Undeclared exception!
      try { 
        simpleURIClassObject0.openInputStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      try { 
        simpleURIClassObject0.openInputStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject((URI) null, class0);
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.CLASS;
      // Undeclared exception!
      try { 
        simpleURIClassObject0.isNameCompatible("H3>T.class.class", javaFileObject_Kind0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject((URI) null, class0);
      // Undeclared exception!
      try { 
        simpleURIClassObject0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject((URI) null, class0);
      // Undeclared exception!
      try { 
        simpleURIClassObject0.openOutputStream();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.openhft.chronicle.values.SimpleURIClassObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      JavaFileObject.Kind javaFileObject_Kind0 = simpleURIClassObject0.getKind();
      assertEquals(JavaFileObject.Kind.CLASS, javaFileObject_Kind0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      URI uRI0 = MockURI.URI("net.openhft.chronicle.values.SimpleURIClassObject", "net.openhft.chronicle.values.SimpleURIClassObject", "To=Q#f=sm");
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      URI uRI1 = simpleURIClassObject0.toUri();
      assertTrue(uRI1.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Class<CharBuffer> class0 = CharBuffer.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      // Undeclared exception!
      try { 
        simpleURIClassObject0.getCharContent(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.openhft.chronicle.values.SimpleURIClassObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.CLASS;
      boolean boolean0 = simpleURIClassObject0.isNameCompatible("ZT0bhwP;q6b|", javaFileObject_Kind0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.HTML;
      boolean boolean0 = simpleURIClassObject0.isNameCompatible("]", javaFileObject_Kind0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      String string0 = simpleURIClassObject0.getName();
      assertEquals("file:///tmp/foo.bar", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Class<CharBuffer> class0 = CharBuffer.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      long long0 = simpleURIClassObject0.getLastModified();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      simpleURIClassObject0.getNestingKind();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      // Undeclared exception!
      try { 
        simpleURIClassObject0.openInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      boolean boolean0 = simpleURIClassObject0.delete();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      // Undeclared exception!
      try { 
        simpleURIClassObject0.openReader(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.openhft.chronicle.values.SimpleURIClassObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      // Undeclared exception!
      try { 
        simpleURIClassObject0.openWriter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.openhft.chronicle.values.SimpleURIClassObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      URI uRI0 = MockURI.URI("net.openhft.chronicle.values.SimpleURIClassObject", "net.openhft.chronicle.values.SimpleURIClassObject", "To=Q#f=sm");
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      String string0 = simpleURIClassObject0.toString();
      assertEquals("net.openhft.chronicle.values.SimpleURIClassObject[net.openhft.chronicle.values.SimpleURIClassObject:net.openhft.chronicle.values.SimpleURIClassObject#To=Q%23f=sm]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Class<CharBuffer> class0 = CharBuffer.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      simpleURIClassObject0.getAccessLevel();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URI uRI0 = MockURI.URI("net.openhft.chronIclh.values.SimpleURIClassObject.class", "net.openhft.chronIclh.values.SimpleURIClassObject.class", "net.openhft.chronIclh.values.SimpleURIClassObject.class");
      Class<Object> class0 = Object.class;
      SimpleURIClassObject simpleURIClassObject0 = new SimpleURIClassObject(uRI0, class0);
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.CLASS;
      boolean boolean0 = simpleURIClassObject0.isNameCompatible("", javaFileObject_Kind0);
      assertTrue(boolean0);
  }
}
