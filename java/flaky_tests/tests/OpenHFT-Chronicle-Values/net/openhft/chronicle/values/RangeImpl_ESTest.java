/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:51:32 GMT 2022
 */

package net.openhft.chronicle.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import net.openhft.chronicle.values.RangeImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RangeImpl_ESTest extends RangeImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_INT_RANGE;
      RangeImpl rangeImpl1 = new RangeImpl((-2147483648L), (-2147483648L));
      boolean boolean0 = rangeImpl1.equals(rangeImpl0);
      assertFalse(rangeImpl0.equals((Object)rangeImpl1));
      assertFalse(boolean0);
      assertEquals((-2147483648L), rangeImpl1.max());
      assertEquals((-2147483648L), rangeImpl1.min());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_SHORT_RANGE;
      RangeImpl rangeImpl1 = (RangeImpl)RangeImpl.DEFAULT_BYTE_RANGE;
      boolean boolean0 = rangeImpl0.equals(rangeImpl1);
      assertEquals((-128L), rangeImpl1.min());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_CHAR_RANGE;
      long long0 = rangeImpl0.min();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RangeImpl rangeImpl0 = new RangeImpl(65535L, (-3813L));
      long long0 = rangeImpl0.min();
      assertEquals(65535L, long0);
      assertEquals((-3813L), rangeImpl0.max());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RangeImpl rangeImpl0 = new RangeImpl(0L, 0L);
      long long0 = rangeImpl0.max();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RangeImpl rangeImpl0 = new RangeImpl(65535L, (-3813L));
      long long0 = rangeImpl0.max();
      assertEquals(65535L, rangeImpl0.min());
      assertEquals((-3813L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_INT_RANGE;
      long long0 = rangeImpl0.max();
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_INT_RANGE;
      long long0 = rangeImpl0.min();
      assertEquals((-2147483648L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_INT_RANGE;
      RangeImpl rangeImpl1 = new RangeImpl((-2147483648L), 0L);
      boolean boolean0 = rangeImpl0.equals(rangeImpl1);
      assertEquals((-2147483648L), rangeImpl1.min());
      assertFalse(boolean0);
      assertFalse(rangeImpl1.equals((Object)rangeImpl0));
      assertEquals(0L, rangeImpl1.max());
      assertEquals(2147483647L, rangeImpl0.max());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_SHORT_RANGE;
      RangeImpl rangeImpl1 = (RangeImpl)RangeImpl.DEFAULT_INT_RANGE;
      boolean boolean0 = rangeImpl0.equals(rangeImpl1);
      assertEquals((-2147483648L), rangeImpl1.min());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_SHORT_RANGE;
      Object object0 = new Object();
      boolean boolean0 = rangeImpl0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_INT_RANGE;
      // Undeclared exception!
      try { 
        rangeImpl0.hashCode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.openhft.chronicle.values.RangeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_INT_RANGE;
      Class<? extends Annotation> class0 = rangeImpl0.annotationType();
      assertTrue(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RangeImpl rangeImpl0 = (RangeImpl)RangeImpl.DEFAULT_INT_RANGE;
      boolean boolean0 = rangeImpl0.equals(rangeImpl0);
      assertTrue(boolean0);
  }
}
