/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:48:22 GMT 2022
 */

package net.openhft.chronicle.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import net.openhft.chronicle.values.CharSequences;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharSequences_ESTest extends CharSequences_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      boolean boolean0 = CharSequences.equals((CharSequence) charBuffer0, (CharSequence) charBuffer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(31);
      char[] charArray0 = new char[7];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      boolean boolean0 = CharSequences.equals((CharSequence) charBuffer1, (CharSequence) charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharSequences.hashCode((CharSequence) "net.openhft.chronicle.values.CharSequences");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharSequences[] charSequencesArray0 = CharSequences.values();
      assertEquals(0, charSequencesArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.flip();
      // Undeclared exception!
      try { 
        CharSequences.hashCode((CharSequence) charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(5038);
      CharSequences.equals((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      // Undeclared exception!
      CharSequences.equals((CharSequence) charBuffer0, (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSequences.equals((CharSequence) "tEA},?^aF", (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.get(charArray0);
      // Undeclared exception!
      try { 
        CharSequences.equals((CharSequence) charBuffer1, (CharSequence) charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      char[] charArray1 = new char[2];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray1);
      boolean boolean0 = CharSequences.equals((CharSequence) charBuffer1, (CharSequence) charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(31);
      char[] charArray0 = new char[7];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      boolean boolean0 = CharSequences.equals((CharSequence) charBuffer0, (CharSequence) charBuffer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = CharSequences.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = CharSequences.equals((CharSequence) null, (CharSequence) charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharSequences.hashCode((CharSequence) null);
  }
}
