/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 20:30:15 GMT 2022
 */

package net.corpwar.lib.corpnet.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.corpwar.lib.corpnet.util.SizedStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SizedStack_ESTest extends SizedStack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SizedStack<Integer> sizedStack0 = new SizedStack<Integer>(0);
      sizedStack0.push((Integer) null);
      assertEquals(0, sizedStack0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SizedStack<Integer> sizedStack0 = new SizedStack<Integer>(0);
      int int0 = sizedStack0.getMaxSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SizedStack<Object> sizedStack0 = new SizedStack<Object>((-1));
      int int0 = sizedStack0.getMaxSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SizedStack<Object> sizedStack0 = new SizedStack<Object>((-1));
      // Undeclared exception!
      try { 
        sizedStack0.push((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SizedStack<Object> sizedStack0 = new SizedStack<Object>(3143);
      SizedStack<Integer> sizedStack1 = new SizedStack<Integer>(3143);
      sizedStack0.push(sizedStack1);
      assertEquals(3143, sizedStack1.getMaxSize());
      assertEquals(3143, sizedStack0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SizedStack<Integer> sizedStack0 = new SizedStack<Integer>(3143);
      int int0 = sizedStack0.getMaxSize();
      assertEquals(3143, int0);
  }
}
