/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 20:36:15 GMT 2022
 */

package net.corpwar.lib.corpnet;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.UUID;
import net.corpwar.lib.corpnet.Message;
import net.corpwar.lib.corpnet.NetworkSendType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Message_ESTest extends Message_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Message message0 = new Message();
      message0.setSplitMessageId(2655);
      int int0 = message0.getSplitMessageId();
      assertEquals(2655, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Message message0 = new Message();
      message0.setSplitMessageId((-1));
      int int0 = message0.getSplitMessageId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Message message0 = new Message();
      message0.setSequenceId(355);
      int int0 = message0.getSequenceId();
      assertEquals(355, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Message message0 = new Message();
      message0.setSequenceId((-3399));
      int int0 = message0.getSequenceId();
      assertEquals((-3399), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Message message0 = new Message();
      NetworkSendType networkSendType0 = NetworkSendType.ACK;
      message0.setNetworkSendType(networkSendType0);
      NetworkSendType networkSendType1 = message0.getNetworkSendType();
      assertSame(networkSendType1, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Message message0 = new Message();
      NetworkSendType networkSendType0 = NetworkSendType.QUENUMBER;
      message0.setNetworkSendType(networkSendType0);
      NetworkSendType networkSendType1 = message0.getNetworkSendType();
      assertSame(networkSendType1, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Message message0 = new Message();
      NetworkSendType networkSendType0 = NetworkSendType.ERROR;
      message0.setNetworkSendType(networkSendType0);
      NetworkSendType networkSendType1 = message0.getNetworkSendType();
      assertEquals(NetworkSendType.ERROR, networkSendType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Message message0 = new Message();
      byte[] byteArray0 = new byte[5];
      message0.setData(byteArray0);
      byte[] byteArray1 = message0.getData();
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(1155);
      Message message0 = new Message();
      UUID uUID0 = MockUUID.fromString((String) null);
      message0.setConnectionID(uUID0);
      UUID uUID1 = message0.getConnectionID();
      assertEquals((-8861958164509884416L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Message message0 = new Message();
      NetworkSendType networkSendType0 = message0.getNetworkSendType();
      message0.setNetworkSendType(networkSendType0);
      assertEquals(0, message0.getSplitMessageId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Message message0 = new Message();
      UUID uUID0 = message0.getConnectionID();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Message message0 = new Message();
      byte[] byteArray0 = new byte[0];
      message0.setData(byteArray0);
      byte[] byteArray1 = message0.getData();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Message message0 = new Message();
      int int0 = message0.getSplitMessageId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Message message0 = new Message();
      UUID uUID0 = MockUUID.fromString("U2XvUc~zc{U$d");
      message0.setConnectionID(uUID0);
      UUID uUID1 = message0.getConnectionID();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Message message0 = new Message();
      int int0 = message0.getSequenceId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Message message0 = new Message();
      byte[] byteArray0 = message0.getData();
      assertNull(byteArray0);
  }
}
