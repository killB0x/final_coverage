/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 20:24:46 GMT 2022
 */

package net.corpwar.lib.corpnet;

import org.junit.Test;
import static org.junit.Assert.*;
import net.corpwar.lib.corpnet.NetworkSendType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NetworkSendType_ESTest extends NetworkSendType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkSendType[] networkSendTypeArray0 = NetworkSendType.values();
      assertEquals(11, networkSendTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.valueOf("ACK");
      assertEquals(NetworkSendType.ACK, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.valueOf("UNRELIABLE_SPLIT_GAME_DATA");
      assertEquals(NetworkSendType.UNRELIABLE_SPLIT_GAME_DATA, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.valueOf("ERROR");
      assertEquals(NetworkSendType.ERROR, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)74);
      int int0 = networkSendType0.getTypeCode();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)100);
      assertEquals(NetworkSendType.PING, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)32);
      assertEquals(NetworkSendType.PEER_SPLIT_DATA, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)31);
      assertEquals(NetworkSendType.UNRELIABLE_SPLIT_GAME_DATA, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)30);
      assertEquals(NetworkSendType.RELIABLE_SPLIT_GAME_DATA, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)22);
      assertEquals(NetworkSendType.PEER_DATA, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)21);
      assertEquals(NetworkSendType.UNRELIABLE_GAME_DATA, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)20);
      assertEquals(NetworkSendType.RELIABLE_GAME_DATA, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)2);
      assertEquals(NetworkSendType.INITSIGNAL, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)1);
      assertEquals(NetworkSendType.QUENUMBER, networkSendType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.fromByteValue((byte)0);
      int int0 = networkSendType0.getTypeCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkSendType networkSendType0 = NetworkSendType.UNRELIABLE_SPLIT_GAME_DATA;
      int int0 = networkSendType0.getTypeCode();
      assertEquals(31, int0);
  }
}
