/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 20:28:56 GMT 2022
 */

package net.corpwar.lib.corpnet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.corpwar.lib.corpnet.SplitMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SplitMessage_ESTest extends SplitMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SplitMessage splitMessage0 = new SplitMessage((-731), byteArray0);
      splitMessage0.hashCode();
      assertEquals((-731), (int)splitMessage0.getSequenceId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      SplitMessage splitMessage1 = new SplitMessage();
      byte[] byteArray0 = new byte[2];
      splitMessage1.setValues((byte)82, byteArray0);
      boolean boolean0 = splitMessage1.equals(splitMessage0);
      assertEquals(82, (int)splitMessage1.getSequenceId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage(0, (byte[]) null);
      byte[] byteArray0 = new byte[2];
      splitMessage0.setValues((byte)35, byteArray0);
      splitMessage0.getSequenceId();
      assertEquals(35, (int)splitMessage0.getSequenceId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      byte[] byteArray0 = new byte[2];
      splitMessage0.setValues((-882), byteArray0);
      Integer integer0 = splitMessage0.getSequenceId();
      assertEquals((-882), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      byte[] byteArray0 = new byte[2];
      splitMessage0.setValues(0, byteArray0);
      splitMessage0.getData();
      assertEquals(0, (int)splitMessage0.getSequenceId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      byte[] byteArray0 = new byte[0];
      splitMessage0.setValues((-7), byteArray0);
      splitMessage0.getData();
      assertEquals((-7), (int)splitMessage0.getSequenceId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-3209L));
      SplitMessage splitMessage0 = new SplitMessage();
      byte[] byteArray0 = new byte[2];
      splitMessage0.setValues((-882), byteArray0);
      long long0 = splitMessage0.getCreateTime();
      assertEquals((-3209L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      // Undeclared exception!
      try { 
        splitMessage0.compareTo((SplitMessage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.corpwar.lib.corpnet.SplitMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      SplitMessage splitMessage0 = new SplitMessage();
      SplitMessage splitMessage1 = new SplitMessage(0, byteArray0);
      boolean boolean0 = splitMessage1.equals(splitMessage0);
      assertEquals(0, (int)splitMessage1.getSequenceId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SplitMessage splitMessage0 = new SplitMessage((-2976), byteArray0);
      SplitMessage splitMessage1 = new SplitMessage((byte) (-114), byteArray0);
      splitMessage0.setValues((byte) (-114), byteArray0);
      boolean boolean0 = splitMessage0.equals(splitMessage1);
      assertEquals((-114), (int)splitMessage0.getSequenceId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage(0, (byte[]) null);
      Object object0 = new Object();
      boolean boolean0 = splitMessage0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, (int)splitMessage0.getSequenceId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      boolean boolean0 = splitMessage0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      boolean boolean0 = splitMessage0.equals(splitMessage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      byte[] byteArray0 = new byte[3];
      SplitMessage splitMessage1 = new SplitMessage((-731), byteArray0);
      boolean boolean0 = splitMessage1.equals(splitMessage0);
      assertEquals((-731), (int)splitMessage1.getSequenceId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      byte[] byteArray0 = new byte[3];
      SplitMessage splitMessage1 = new SplitMessage((byte)0, byteArray0);
      splitMessage1.setValues((-7), byteArray0);
      int int0 = splitMessage1.compareTo(splitMessage0);
      assertEquals((-7), (int)splitMessage1.getSequenceId());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      byte[] byteArray0 = new byte[3];
      SplitMessage splitMessage1 = new SplitMessage((byte)0, byteArray0);
      splitMessage1.setValues((-7), byteArray0);
      int int0 = splitMessage0.compareTo(splitMessage1);
      assertEquals((-7), (int)splitMessage1.getSequenceId());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      int int0 = splitMessage0.compareTo(splitMessage0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SplitMessage splitMessage0 = new SplitMessage((-731), byteArray0);
      long long0 = splitMessage0.getCreateTime();
      assertEquals(1392409281320L, long0);
      assertEquals((-731), (int)splitMessage0.getSequenceId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      long long0 = splitMessage0.getCreateTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      Integer integer0 = splitMessage0.getSequenceId();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SplitMessage splitMessage0 = new SplitMessage();
      byte[] byteArray0 = splitMessage0.getData();
      assertNull(byteArray0);
  }
}
