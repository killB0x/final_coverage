/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 20:19:48 GMT 2022
 */

package net.corpwar.lib.corpnet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.util.Map;
import net.corpwar.lib.corpnet.Connection;
import net.corpwar.lib.corpnet.NetworkPackage;
import net.corpwar.lib.corpnet.NetworkSendType;
import net.corpwar.lib.corpnet.util.SizedStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Connection_ESTest extends Connection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[5];
      NetworkSendType networkSendType0 = NetworkSendType.ACK;
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.setLastSentMessageTime(1392409281320L);
      boolean boolean0 = connection0.getNextSendQueData();
      assertEquals(1392409281320L, connection0.getLastSentMessageTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Connection connection0 = new Connection();
      Integer integer0 = new Integer(4);
      connection0.setReceivedPackageStack(integer0);
      connection0.isReceivedPackageStack(integer0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.setNextKeepAlive((-2301L));
      long long0 = connection0.getNextKeepAlive();
      assertEquals((-2301L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Connection connection0 = new Connection();
      NetworkSendType networkSendType0 = NetworkSendType.PING;
      NetworkPackage networkPackage0 = connection0.getNetworkPackage((byte[]) null, networkSendType0);
      assertEquals(1, networkPackage0.getSequenceNumber());
      
      Map<Integer, NetworkPackage> map0 = connection0.getNetworkPackageArrayMap();
      assertEquals(0L, connection0.getLastSentMessageTime());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Connection connection0 = new Connection();
      System.setCurrentTimeMillis(0L);
      byte[] byteArray0 = new byte[7];
      NetworkSendType networkSendType0 = NetworkSendType.PEER_DATA;
      NetworkPackage networkPackage0 = connection0.getNetworkPackage(byteArray0, networkSendType0);
      assertEquals(0L, connection0.getLastSentMessageTime());
      assertEquals(0, networkPackage0.getSplitSequenceNumber());
      assertEquals(1, networkPackage0.getSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Connection connection0 = new Connection();
      System.setCurrentTimeMillis((-878L));
      byte[] byteArray0 = new byte[6];
      NetworkSendType networkSendType0 = NetworkSendType.UNRELIABLE_SPLIT_GAME_DATA;
      NetworkPackage networkPackage0 = connection0.getNetworkPackage(byteArray0, networkSendType0);
      assertEquals(0L, connection0.getLastSentMessageTime());
      assertEquals(1, networkPackage0.getSequenceNumber());
      assertEquals(0, networkPackage0.getSplitSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.setLastSentMessageTime(771);
      long long0 = connection0.getLastSentMessageTime();
      assertEquals(771L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.setLastSentMessageTime((-947L));
      long long0 = connection0.getLastSentMessageTime();
      assertEquals((-947L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-1596L));
      Connection connection0 = new Connection();
      connection0.updateTime();
      long long0 = connection0.getLastRecived();
      assertEquals((-1596L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.setLastPingTime(31);
      long long0 = connection0.getLastPingTime();
      assertEquals(31L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.setLastPingTime((-1392409279367L));
      long long0 = connection0.getLastPingTime();
      assertEquals((-1392409279367L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom((-138));
      Connection connection0 = new Connection();
      connection0.getConnectionId();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Connection connection0 = new Connection();
      System.setCurrentTimeMillis(0L);
      NetworkPackage networkPackage0 = connection0.getAckPackage();
      assertEquals(0L, connection0.getLastSentMessageTime());
      assertEquals(0, networkPackage0.getSplitSequenceNumber());
      assertEquals(1, networkPackage0.getSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-1258L));
      Connection connection0 = new Connection();
      NetworkPackage networkPackage0 = connection0.getAckPackage();
      assertEquals(0, networkPackage0.getSplitSequenceNumber());
      assertEquals(1, networkPackage0.getSequenceNumber());
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Connection connection0 = new Connection();
      // Undeclared exception!
      try { 
        connection0.updateClient((InetAddress) null, (-2080374782));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = connection0.setSplitMessageData((-2831), (-2831), (byte[]) null);
      // Undeclared exception!
      try { 
        connection0.setSplitMessageData((-2831), (-2831), byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = connection0.setSplitMessageData((-212), (-212), byteArray0);
      // Undeclared exception!
      try { 
        connection0.setSplitMessageData((-212), (-212), byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Connection connection0 = null;
      try {
        connection0 = new Connection((InetAddress) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getSplitMessageData();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Connection connection0 = new Connection();
      Connection connection1 = new Connection();
      // Undeclared exception!
      try { 
        connection1.equals(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Connection connection0 = new Connection();
      Object object0 = new Object();
      boolean boolean0 = connection0.equals(object0);
      assertEquals(0L, connection0.getLastSentMessageTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Connection connection0 = new Connection();
      boolean boolean0 = connection0.equals(connection0);
      assertTrue(boolean0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Connection connection0 = new Connection();
      boolean boolean0 = connection0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[4];
      connection0.setSplitMessageData(220, (-1), byteArray0);
      connection0.removeSplitMessages();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.setSplitMessageData((-3), (-3), (byte[]) null);
      byte[] byteArray0 = connection0.setSplitMessageData((-3), (-3), (byte[]) null);
      assertEquals(0, byteArray0.length);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[0];
      connection0.setSplitMessageData(13, 13, byteArray0);
      byte[] byteArray1 = new byte[9];
      connection0.setSplitMessageData(13, 1951, byteArray1);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[0];
      connection0.setSplitMessageData((-4039), (-622), byteArray0);
      connection0.getSplitMessageData();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Connection connection0 = new Connection();
      int int0 = connection0.getGlobalSplitSequenceNumber();
      assertEquals(1, int0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[4];
      NetworkSendType networkSendType0 = NetworkSendType.ERROR;
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.setLastSentMessageTime(1392409311320L);
      boolean boolean0 = connection0.getNextSendQueData();
      assertEquals(1392409311320L, connection0.getLastSentMessageTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Connection connection0 = new Connection();
      boolean boolean0 = connection0.getNextSendQueData();
      assertFalse(boolean0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[0];
      NetworkSendType networkSendType0 = NetworkSendType.PEER_DATA;
      connection0.addToSendQue(byteArray0, networkSendType0);
      boolean boolean0 = connection0.getNextSendQueData();
      assertTrue(boolean0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[7];
      NetworkSendType networkSendType0 = NetworkSendType.UNRELIABLE_SPLIT_GAME_DATA;
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Connection connection0 = new Connection();
      NetworkSendType networkSendType0 = NetworkSendType.PEER_DATA;
      byte[] byteArray0 = new byte[5];
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      NetworkSendType networkSendType1 = NetworkSendType.UNRELIABLE_GAME_DATA;
      connection0.addToSendQue(byteArray0, networkSendType1);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[0];
      NetworkSendType networkSendType0 = NetworkSendType.PEER_DATA;
      connection0.addToSendQue(byteArray0, networkSendType0);
      byte[] byteArray1 = new byte[2];
      connection0.addToSendQue(byteArray1, networkSendType0);
      connection0.addToSendQue(byteArray1, networkSendType0);
      NetworkSendType networkSendType1 = NetworkSendType.PEER_SPLIT_DATA;
      connection0.addToSendQue(byteArray1, networkSendType1);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Connection connection0 = new Connection();
      NetworkSendType networkSendType0 = NetworkSendType.PEER_DATA;
      byte[] byteArray0 = new byte[5];
      connection0.addToSendQue(byteArray0, networkSendType0);
      NetworkSendType networkSendType1 = NetworkSendType.QUENUMBER;
      connection0.addToSendQue(byteArray0, networkSendType1);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType1);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Connection connection0 = new Connection();
      NetworkSendType networkSendType0 = NetworkSendType.ERROR;
      byte[] byteArray0 = new byte[4];
      connection0.addToSendQue(byteArray0, networkSendType0);
      NetworkSendType networkSendType1 = NetworkSendType.RELIABLE_SPLIT_GAME_DATA;
      connection0.addToSendQue(byteArray0, networkSendType1);
      connection0.addToSendQue(byteArray0, networkSendType1);
      connection0.addToSendQue(byteArray0, networkSendType1);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[0];
      NetworkSendType networkSendType0 = NetworkSendType.PEER_DATA;
      connection0.addToSendQue(byteArray0, networkSendType0);
      byte[] byteArray1 = new byte[2];
      connection0.addToSendQue(byteArray1, networkSendType0);
      connection0.addToSendQue(byteArray1, networkSendType0);
      NetworkSendType networkSendType1 = NetworkSendType.RELIABLE_GAME_DATA;
      connection0.addToSendQue(byteArray1, networkSendType1);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Connection connection0 = new Connection();
      NetworkSendType networkSendType0 = NetworkSendType.PEER_DATA;
      byte[] byteArray0 = new byte[5];
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      connection0.addToSendQue(byteArray0, networkSendType0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Connection connection0 = new Connection();
      long long0 = connection0.getSmoothRoundTripTime();
      assertEquals(0L, long0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Connection connection0 = new Connection();
      NetworkSendType networkSendType0 = NetworkSendType.RELIABLE_SPLIT_GAME_DATA;
      NetworkPackage networkPackage0 = connection0.getNetworkPackage((byte[]) null, networkSendType0);
      assertEquals(0L, connection0.getLastSentMessageTime());
      assertEquals(1, networkPackage0.getSequenceNumber());
      assertEquals(1, networkPackage0.getSplitSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Connection connection0 = new Connection();
      byte[] byteArray0 = new byte[8];
      NetworkSendType networkSendType0 = NetworkSendType.RELIABLE_GAME_DATA;
      NetworkPackage networkPackage0 = connection0.getNetworkPackage(byteArray0, networkSendType0);
      assertEquals(1, networkPackage0.getSequenceNumber());
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Connection connection0 = new Connection();
      long long0 = connection0.getLastSentMessageTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getConnectionId();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getNextKeepAlive();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getLastPingTime();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Connection connection0 = new Connection();
      SizedStack<Long> sizedStack0 = connection0.getRoundTripTimes();
      assertEquals(40, sizedStack0.getMaxSize());
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.updateTime();
      long long0 = connection0.getLastRecived();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Connection connection0 = new Connection();
      Integer integer0 = new Integer(500);
      connection0.isReceivedPackageStack(integer0);
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Connection connection0 = new Connection();
      // Undeclared exception!
      try { 
        connection0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Connection connection0 = new Connection();
      Connection connection1 = null;
      try {
        connection1 = new Connection(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getNetworkPackagePool();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Connection connection0 = new Connection();
      int int0 = connection0.getPort();
      assertEquals(0L, connection0.getLastSentMessageTime());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getSendDataQuePool();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getSendDataQueList();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Connection connection0 = new Connection();
      NetworkPackage networkPackage0 = connection0.getAckPackage();
      assertEquals(0L, connection0.getLastSentMessageTime());
      assertEquals(0, networkPackage0.getSplitSequenceNumber());
      assertEquals(1, networkPackage0.getSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getAddress();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getLastRecived();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.setNextKeepAlive(595L);
      long long0 = connection0.getNextKeepAlive();
      assertEquals(595L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Connection connection0 = new Connection();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        connection0.updateClient(inetAddress0, 0);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // 'java.util.UUID org.evosuite.runtime.mock.java.util.MockUUID.nameUUIDFromBytes(byte[])'
         //
         verifyException("net.corpwar.lib.corpnet.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Connection connection0 = new Connection();
      connection0.getNetworkPackageArrayMap();
      assertEquals(0L, connection0.getLastSentMessageTime());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Connection connection0 = null;
      try {
        connection0 = new Connection(inetAddress0, (-3));
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // 'java.util.UUID org.evosuite.runtime.mock.java.util.MockUUID.nameUUIDFromBytes(byte[])'
         //
         verifyException("net.corpwar.lib.corpnet.Connection", e);
      }
  }
}
