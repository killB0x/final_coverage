/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 20:34:15 GMT 2022
 */

package net.corpwar.lib.corpnet;

import org.junit.Test;
import static org.junit.Assert.*;
import net.corpwar.lib.corpnet.NetworkPackage;
import net.corpwar.lib.corpnet.NetworkSendType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NetworkPackage_ESTest extends NetworkPackage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      networkPackage0.resendData((-1412));
      boolean boolean0 = networkPackage0.isResentPackage();
      assertEquals((-1412), networkPackage0.getSequenceNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      byte[] byteArray0 = new byte[8];
      NetworkSendType networkSendType0 = NetworkSendType.QUENUMBER;
      networkPackage0.setValues(8, byteArray0, networkSendType0, 1731);
      int int0 = networkPackage0.getSplitSequenceNumber();
      assertEquals(1731, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      byte[] byteArray0 = new byte[6];
      NetworkSendType networkSendType0 = NetworkSendType.UNRELIABLE_SPLIT_GAME_DATA;
      networkPackage0.setValues((-889), byteArray0, networkSendType0, (int) (byte) (-53));
      int int0 = networkPackage0.getSplitSequenceNumber();
      assertEquals((-53), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      networkPackage0.resendData(1);
      int int0 = networkPackage0.getSequenceNumber();
      assertEquals(1, networkPackage0.getResent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      networkPackage0.setSequenceNumber((-814));
      int int0 = networkPackage0.getSequenceNumber();
      assertEquals((-814), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      networkPackage0.resendData((-1412));
      long long0 = networkPackage0.getSentTime();
      assertEquals((-1412), networkPackage0.getSequenceNumber());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1285L));
      NetworkPackage networkPackage0 = new NetworkPackage();
      byte[] byteArray0 = new byte[0];
      NetworkSendType networkSendType0 = NetworkSendType.INITSIGNAL;
      networkPackage0.setValues(1021, byteArray0, networkSendType0);
      long long0 = networkPackage0.getSentTime();
      assertEquals((-1285L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      networkPackage0.resendData((-1412));
      int int0 = networkPackage0.getResent();
      assertEquals((-1412), networkPackage0.getSequenceNumber());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      NetworkSendType networkSendType0 = NetworkSendType.ACK;
      networkPackage0.setValues(0, networkSendType0);
      networkPackage0.getNetworkSendType();
      assertFalse(networkPackage0.isResentPackage());
      assertEquals(0, networkPackage0.getSequenceNumber());
      assertEquals(0, networkPackage0.getResent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      byte[] byteArray0 = new byte[8];
      NetworkSendType networkSendType0 = NetworkSendType.RELIABLE_SPLIT_GAME_DATA;
      networkPackage0.setValues(0, byteArray0, networkSendType0);
      networkPackage0.getNetworkSendType();
      assertEquals(0, networkPackage0.getResent());
      assertFalse(networkPackage0.isResentPackage());
      assertEquals(0, networkPackage0.getSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      NetworkSendType networkSendType0 = NetworkSendType.ERROR;
      networkPackage0.setValues(321, (byte[]) null, networkSendType0);
      networkPackage0.getNetworkSendType();
      assertEquals(321, networkPackage0.getSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      byte[] byteArray0 = new byte[5];
      NetworkSendType networkSendType0 = NetworkSendType.INITSIGNAL;
      networkPackage0.setValues(0, byteArray0, networkSendType0);
      networkPackage0.getDataSent();
      assertFalse(networkPackage0.isResentPackage());
      assertEquals(0, networkPackage0.getSequenceNumber());
      assertEquals(0, networkPackage0.getResent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      byte[] byteArray0 = new byte[0];
      NetworkSendType networkSendType0 = NetworkSendType.QUENUMBER;
      networkPackage0.setValues(0, byteArray0, networkSendType0);
      networkPackage0.getDataSent();
      assertEquals(0, networkPackage0.getResent());
      assertFalse(networkPackage0.isResentPackage());
      assertEquals(0, networkPackage0.getSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      networkPackage0.resetValues();
      assertFalse(networkPackage0.isResentPackage());
      assertEquals(0, networkPackage0.getResent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      networkPackage0.getDataSent();
      assertEquals(0, networkPackage0.getResent());
      assertFalse(networkPackage0.isResentPackage());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      networkPackage0.getNetworkSendType();
      assertEquals(0, networkPackage0.getResent());
      assertFalse(networkPackage0.isResentPackage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      int int0 = networkPackage0.getSplitSequenceNumber();
      assertEquals(0, networkPackage0.getResent());
      assertFalse(networkPackage0.isResentPackage());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      int int0 = networkPackage0.getResent();
      assertFalse(networkPackage0.isResentPackage());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      networkPackage0.getSentTime();
      assertFalse(networkPackage0.isResentPackage());
      assertEquals(0, networkPackage0.getResent());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      boolean boolean0 = networkPackage0.isResentPackage();
      assertEquals(0, networkPackage0.getResent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkPackage networkPackage0 = new NetworkPackage();
      int int0 = networkPackage0.getSequenceNumber();
      assertEquals(0, networkPackage0.getResent());
      assertFalse(networkPackage0.isResentPackage());
      assertEquals(0, int0);
  }
}
