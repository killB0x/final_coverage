/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 03:19:21 GMT 2022
 */

package org.codelibs.jhighlight.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Pattern;
import org.codelibs.jhighlight.tools.FileUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = FileUtils.getExtension(".yo4n=0B");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = FileUtils.getExtension("fileName can't be null.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = FileUtils.getExtension("&yacute;");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.getExtension((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fileName can't be null.
         //
         verifyException("org.codelibs.jhighlight.tools.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = FileUtils.getExtension(" z8//w'V\"qHGa}.5.q");
      assertNotNull(string0);
      assertEquals("q", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{");
      Pattern[] patternArray0 = new Pattern[1];
      ArrayList arrayList0 = FileUtils.getFileList(mockFile0, patternArray0, patternArray0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile.createTempFile("o>SXuDnrQ4", "o>SXuDnrQ4");
      MockFile.createTempFile("Load fa;tor must be greater than 0 and smaller than or equal to 1", (String) null);
      ArrayList arrayList0 = FileUtils.getFileList(mockFile0, (Pattern[]) null, (Pattern[]) null);
      assertEquals(6, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile.createTempFile("Load fa;tor must be greater than 0 and smaller than or equal to 1", (String) null);
      Pattern[] patternArray0 = new Pattern[0];
      ArrayList arrayList0 = FileUtils.getFileList(mockFile0, patternArray0, (Pattern[]) null);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      File file0 = MockFile.createTempFile("&hot;", "&hot;");
      ArrayList arrayList0 = FileUtils.getFileList(file0, (Pattern[]) null, (Pattern[]) null);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ArrayList arrayList0 = FileUtils.getFileList((File) null, (Pattern[]) null, (Pattern[]) null);
      assertTrue(arrayList0.isEmpty());
  }
}
