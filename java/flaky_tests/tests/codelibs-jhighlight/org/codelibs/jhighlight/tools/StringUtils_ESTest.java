/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 03:12:59 GMT 2022
 */

package org.codelibs.jhighlight.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.regex.Pattern;
import org.codelibs.jhighlight.tools.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringUtils.convertTabsToSpaces("X\t", 946);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringUtils.replace("&equiv;", "q", "\".RY`-N}mzT");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringUtils.split("org.codelibs.jhighlight.fastutil.chars.AbstractChar2ObjectFunction", "&upsih;", false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("pJ");
      Pattern pattern1 = Pattern.compile("\".RYa`-N}mzT", 5);
      StringUtils.filter("\".RYa`-N}mzT", pattern1, pattern0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("\".RYa`-N}mzT");
      StringUtils.filter("", (Pattern) null, pattern0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringUtils.replace((String) null, (String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringUtils.replace("KX", "KX", "");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringUtils.repeat("&Ecirc;", (-3171));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringUtils.encodeHtml("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      StringUtils.split("", "", true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      StringUtils.split("<\"&aU8'", "");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      StringUtils.replace("", "", "", true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      StringUtils.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      StringUtils.repeat("&lambda;", 792864871);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      StringUtils.convertTabsToSpaces("X\t", 155863);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.convertTabsToSpaces((String) null, 8242);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.tools.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.convertTabsToSpaces("X\t", 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.codelibs.jhighlight.tools.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = StringUtils.repeat("$9'4ZW~_Kl!", 2175);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtils.replace("", "s;s~Gi{t^.@GmD", (String) null, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList arrayList0 = StringUtils.split("org\u0000codelibs\u0000jhighlight\u0000fastutil\u0000chars\u0000AbstractChar2ObjectFunction", "org\u0000codelibs\u0000jhighlight\u0000fastutil\u0000chars\u0000AbstractChar2ObjectFunction", false);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList arrayList0 = StringUtils.split("W{[KNeHv", (String) null, true);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList arrayList0 = StringUtils.split((String) null, (String) null, false);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = StringUtils.filter("=>", (Pattern[]) null, (Pattern[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StringUtils.convertTabsToSpaces("org.codelibs.jhighlight.fastutil.Hash", 0);
      assertEquals("org.codelibs.jhighlight.fastutil.Hash", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (-1436));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringUtils.convertTabsToSpaces("\t", (-1994));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtils.replace("&aacute;", (String) null, "", true);
      assertNotNull(string0);
      assertEquals("&aacute;", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, ")", "\t", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = StringUtils.replace("Vp&f", "Vp&f", "(this map)", false);
      assertNotNull(string0);
      assertEquals("(this map)", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList arrayList0 = StringUtils.split("&dr;", (String) null);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("pJ");
      Pattern pattern1 = Pattern.compile("\".RYa`-N}mzT", 5);
      Pattern[] patternArray0 = new Pattern[5];
      patternArray0[0] = pattern0;
      patternArray0[4] = pattern1;
      boolean boolean0 = StringUtils.filter("\".RYa`-N}mzT", patternArray0, patternArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Pattern[] patternArray0 = new Pattern[1];
      boolean boolean0 = StringUtils.filter("\".RYa`-N}mzT", (Pattern[]) null, patternArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Pattern[] patternArray0 = new Pattern[3];
      Pattern pattern0 = Pattern.compile("HPj$.!\":.I+~;,b", 0);
      patternArray0[0] = pattern0;
      boolean boolean0 = StringUtils.filter("HPj$.!\":.I+~;,b", patternArray0, patternArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = StringUtils.filter((String) null, (Pattern[]) null, (Pattern[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("org.codelibs.jhighlight.fastutil.HashCommon");
      boolean boolean0 = StringUtils.filter("org.codelibs.jhighlight.fastutil.HashCommon", pattern0, pattern0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = StringUtils.filter("=>", (Pattern) null, (Pattern) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = StringUtils.encodeHtml("CxRF");
      assertEquals("CxRF", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = StringUtils.encodeHtml("}<\"&aXU8'");
      assertEquals("}&lt;&quot;&amp;aXU8'", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = StringUtils.encodeHtml("KFd9)]@tigk`l\"*&");
      assertEquals("KFd9)]@tigk`l&quot;*&amp;", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = StringUtils.encodeHtml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList arrayList0 = StringUtils.split((String) null, (String) null);
      assertEquals(0, arrayList0.size());
  }
}
