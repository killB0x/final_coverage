/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 02:48:58 GMT 2022
 */

package org.codelibs.jhighlight.fastutil.booleans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.Random;
import org.codelibs.jhighlight.fastutil.booleans.BooleanArrays;
import org.codelibs.jhighlight.fastutil.booleans.BooleanComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BooleanArrays_ESTest extends BooleanArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        BooleanArrays.reverse(booleanArray0, 2264, 13009);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7637 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      MockRandom mockRandom0 = new MockRandom((-1426));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        BooleanArrays.shuffle(booleanArray0, (-1426), 1, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1425 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BooleanComparator booleanComparator0 = mock(BooleanComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(booleanComparator0).compare(anyBoolean() , anyBoolean());
      BooleanArrays.mergeSort(booleanArray0, booleanComparator0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      // Undeclared exception!
      try { 
        BooleanArrays.mergeSort(booleanArray0, (-2906), 2152, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2905 out of bounds for length 6
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      BooleanArrays.mergeSort(booleanArray0);
      assertEquals(13, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      BooleanComparator booleanComparator0 = mock(BooleanComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(booleanComparator0).compare(anyBoolean() , anyBoolean());
      BooleanArrays.quickSort(booleanArray0, booleanComparator0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = BooleanArrays.equals(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = BooleanArrays.trim(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = BooleanArrays.setLength(booleanArray0, 1676);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(1676, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = BooleanArrays.grow(booleanArray1, 1676);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(1676, booleanArray1.length);
      assertEquals(1676, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BooleanArrays.ensureOffsetLength(booleanArray0, 1, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BooleanArrays.ensureFromTo(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      // Undeclared exception!
      try { 
        BooleanArrays.reverse(booleanArray0, 8, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 12
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean[] booleanArray0 = BooleanArrays.EMPTY_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = BooleanArrays.setLength(booleanArray0, 1021);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1021, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      BooleanComparator booleanComparator0 = mock(BooleanComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(booleanComparator0).compare(anyBoolean() , anyBoolean());
      BooleanArrays.quickSort(booleanArray1, booleanComparator0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1021, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = BooleanArrays.grow(booleanArray0, 967, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(967, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray1 = BooleanArrays.shuffle(booleanArray0, 331, 331, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = BooleanArrays.reverse(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = BooleanArrays.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = BooleanArrays.grow(booleanArray0, 0, 95);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = BooleanArrays.grow(booleanArray0, (-484));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = BooleanArrays.ensureCapacity(booleanArray0, (-2618), (-2618));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean[] booleanArray0 = BooleanArrays.EMPTY_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = BooleanArrays.ensureCapacity(booleanArray0, (-91));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = BooleanArrays.copy(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.trim((boolean[]) null, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      // Undeclared exception!
      try { 
        BooleanArrays.trim(booleanArray0, (-944));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -944
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.shuffle((boolean[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        BooleanArrays.shuffle((boolean[]) null, 2932, 0, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.setLength((boolean[]) null, 2078);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try { 
        BooleanArrays.setLength(booleanArray0, (-4470));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4470
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.reverse((boolean[]) null, 2277, (-297));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.reverse((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try { 
        BooleanArrays.quickSort(booleanArray0, (BooleanComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.quickSort((boolean[]) null, 8, 385);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.quickSort((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      // Undeclared exception!
      try { 
        BooleanArrays.mergeSort(booleanArray0, 1021, 1280, (BooleanComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1022 out of bounds for length 6
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.mergeSort((boolean[]) null, 128526943, 1861);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.mergeSort((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.grow((boolean[]) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.grow((boolean[]) null, 300);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      // Undeclared exception!
      try { 
        BooleanArrays.fill(booleanArray0, 7, (-1696), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (7) is greater than end index (-1696)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        BooleanArrays.fill(booleanArray0, 7, 7, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (7) is greater than array length (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      // Undeclared exception!
      try { 
        BooleanArrays.equals(booleanArray0, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      // Undeclared exception!
      try { 
        BooleanArrays.ensureOffsetLength(booleanArray0, 981, (-3632));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length (-3632) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      // Undeclared exception!
      try { 
        BooleanArrays.ensureOffsetLength(booleanArray0, 981, 981);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (1962) is greater than array length (8)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try { 
        BooleanArrays.ensureFromTo(booleanArray0, 524, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (524) is greater than end index (8)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.ensureCapacity((boolean[]) null, 3116, (-3456));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try { 
        BooleanArrays.ensureCapacity(booleanArray0, 248, 248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.copy((boolean[]) null, (-920), 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      // Undeclared exception!
      try { 
        BooleanArrays.copy(booleanArray0, 5, (-2357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length (-2357) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      // Undeclared exception!
      try { 
        BooleanArrays.copy(booleanArray0, (-1083), (-1083));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Offset (-1083) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.copy((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      BooleanArrays.mergeSort(booleanArray0, 1408, 887, (BooleanComparator) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try { 
        BooleanArrays.mergeSort(booleanArray0, (-1866), 877, (BooleanComparator) null, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1865 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      BooleanArrays.mergeSort(booleanArray0, 1434, 3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try { 
        BooleanArrays.quickSort(booleanArray0, 247, 272);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 247 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      BooleanArrays.quickSort(booleanArray0, 247, 247);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = BooleanArrays.trim(booleanArray0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = BooleanArrays.ensureCapacity(booleanArray0, 8);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.ensureOffsetLength((boolean[]) null, 163, (-496));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BooleanArrays.mergeSort(booleanArray0, 0, (-1754));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      // Undeclared exception!
      try { 
        BooleanArrays.ensureFromTo(booleanArray0, 248, 851);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (851) is greater than array length (12)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = BooleanArrays.reverse(booleanArray0, 9, 9);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = BooleanArrays.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray1 = BooleanArrays.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray1 = BooleanArrays.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = BooleanArrays.shuffle(booleanArray1, 1, 1, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      BooleanComparator booleanComparator0 = mock(BooleanComparator.class, new ViolatedAssumptionAnswer());
      doReturn(248, 1, 248, 1, 1).when(booleanComparator0).compare(anyBoolean() , anyBoolean());
      BooleanArrays.mergeSort(booleanArray0, booleanComparator0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      BooleanArrays.mergeSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BooleanArrays.mergeSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BooleanArrays.quickSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BooleanArrays.quickSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[4] = true;
      booleanArray0[7] = true;
      BooleanArrays.quickSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[7] = true;
      BooleanArrays.quickSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      BooleanArrays.quickSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BooleanComparator booleanComparator0 = mock(BooleanComparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2859), (-2859), (-2859), (-2859), 2195).when(booleanComparator0).compare(anyBoolean() , anyBoolean());
      BooleanArrays.quickSort(booleanArray0, booleanComparator0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      // Undeclared exception!
      try { 
        BooleanArrays.quickSort(booleanArray0, 1, 453, (BooleanComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 57 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BooleanComparator booleanComparator0 = mock(BooleanComparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-2299), (-2299), 8, (-1096)).when(booleanComparator0).compare(anyBoolean() , anyBoolean());
      BooleanArrays.quickSort(booleanArray0, booleanComparator0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      BooleanArrays.mergeSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[4] = true;
      BooleanArrays.quickSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      BooleanComparator booleanComparator0 = mock(BooleanComparator.class, new ViolatedAssumptionAnswer());
      doReturn(241, 1021, (-465), (-498), (-498)).when(booleanComparator0).compare(anyBoolean() , anyBoolean());
      BooleanArrays.mergeSort(booleanArray0, booleanComparator0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      BooleanComparator booleanComparator0 = mock(BooleanComparator.class, new ViolatedAssumptionAnswer());
      BooleanArrays.mergeSort(booleanArray0, 1, 1, booleanComparator0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      BooleanArrays.quickSort(booleanArray0, 2206, 7, (BooleanComparator) null);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      BooleanComparator booleanComparator0 = mock(BooleanComparator.class, new ViolatedAssumptionAnswer());
      doReturn(322, 322, 322, 2733, 0).when(booleanComparator0).compare(anyBoolean() , anyBoolean());
      BooleanArrays.quickSort(booleanArray0, booleanComparator0);
      assertEquals(12, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[4] = true;
      BooleanArrays.quickSort(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = BooleanArrays.equals(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      BooleanArrays.fill(booleanArray0, 0, 2, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      BooleanArrays.fill(booleanArray0, 6, 7, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      BooleanArrays.fill(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = BooleanArrays.trim(booleanArray0, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = BooleanArrays.trim(booleanArray0, 261);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = BooleanArrays.setLength(booleanArray0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      // Undeclared exception!
      try { 
        BooleanArrays.grow(booleanArray0, 254, 2289);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = BooleanArrays.grow(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = BooleanArrays.grow(booleanArray0, 2206);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(2206, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = BooleanArrays.equals(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(2206, booleanArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = BooleanArrays.ensureCapacity(booleanArray0, 191, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(191, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = BooleanArrays.copy(booleanArray0, 1, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      // Undeclared exception!
      try { 
        BooleanArrays.mergeSort(booleanArray0, (BooleanComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = BooleanArrays.copy(booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanArrays.fill((boolean[]) null, 0, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.booleans.BooleanArrays", e);
      }
  }
}
