/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 03:07:44 GMT 2022
 */

package org.codelibs.jhighlight.fastutil.objects;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.UnaryOperator;
import org.codelibs.jhighlight.fastutil.objects.AbstractObjectList;
import org.codelibs.jhighlight.fastutil.objects.ObjectArrayList;
import org.codelibs.jhighlight.fastutil.objects.ObjectCollection;
import org.codelibs.jhighlight.fastutil.objects.ObjectIterator;
import org.codelibs.jhighlight.fastutil.objects.ObjectIterators;
import org.codelibs.jhighlight.fastutil.objects.ObjectList;
import org.codelibs.jhighlight.fastutil.objects.ObjectListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectArrayList_ESTest extends ObjectArrayList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(6, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(6, integerArray0.length);
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>();
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertTrue(objectArrayList1.isEmpty());
      assertEquals(0, objectArrayList1.size());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      int int0 = objectArrayList0.compareTo(objectArrayList1);
      assertFalse(objectArrayList0.equals((Object)objectArrayList1));
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(6, objectArrayList0.size());
      assertTrue(objectArrayList1.isEmpty());
      assertEquals(0, objectArrayList1.size());
      assertNotSame(objectArrayList0, objectArrayList1);
      assertNotSame(objectArrayList1, objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, int0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      Object[] objectArray0 = new Object[21];
      ObjectArrayList<Object> objectArrayList1 = ObjectArrayList.wrap(objectArray0, (-1847));
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertEquals((-1847), objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertNotSame(objectArrayList1, objectArrayList0);
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(21, objectArray0.length);
      assertFalse(objectArrayList1.contains((-1847)));
      
      int int0 = objectArrayList1.compareTo(objectArrayList0);
      assertFalse(objectArrayList0.equals((Object)objectArrayList1));
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals((-1847), objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertNotSame(objectArrayList0, objectArrayList1);
      assertNotSame(objectArrayList1, objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, int0);
      assertEquals(21, objectArray0.length);
      assertFalse(objectArrayList0.contains((-1847)));
      assertFalse(objectArrayList1.contains((-1847)));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectIterators.EmptyIterator<Integer> objectIterators_EmptyIterator0 = new ObjectIterators.EmptyIterator<Integer>();
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertNotNull(objectIterators_EmptyIterator0);
      
      ObjectIterators.UnmodifiableBidirectionalIterator<Integer> objectIterators_UnmodifiableBidirectionalIterator0 = new ObjectIterators.UnmodifiableBidirectionalIterator<Integer>(objectIterators_EmptyIterator0);
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertNotNull(objectIterators_UnmodifiableBidirectionalIterator0);
      
      ObjectIterators.UnmodifiableIterator<Integer> objectIterators_UnmodifiableIterator0 = new ObjectIterators.UnmodifiableIterator<Integer>(objectIterators_UnmodifiableBidirectionalIterator0);
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertNotNull(objectIterators_UnmodifiableIterator0);
      
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>((Iterator<? extends Integer>) objectIterators_UnmodifiableIterator0);
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      Integer[] integerArray0 = new Integer[7];
      ObjectArrayList<Integer> objectArrayList1 = ObjectArrayList.wrap(integerArray0);
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(7, objectArrayList1.size());
      assertNotSame(objectArrayList1, objectArrayList0);
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(7, integerArray0.length);
      
      boolean boolean0 = objectArrayList1.equals(objectArrayList0);
      assertFalse(objectArrayList0.equals((Object)objectArrayList1));
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(7, objectArrayList1.size());
      assertNotSame(objectArrayList0, objectArrayList1);
      assertNotSame(objectArrayList1, objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0, false);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(7, objectArray0.length);
      assertFalse(objectArrayList0.contains(false));
      
      objectArrayList0.push((Object) null);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(7, objectArray0.length);
      assertFalse(objectArrayList0.contains(false));
      
      objectArrayList0.addElements(1, objectArray0, 1, 1);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(2, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(7, objectArray0.length);
      assertFalse(objectArrayList0.contains(1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer[] integerArray0 = new Integer[14];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertEquals(14, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(14, integerArray0.length);
      
      objectArrayList0.removeElements(0, 5);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(9, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(14, integerArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      
      objectArrayList0.removeElements(1, 1);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      assertFalse(objectArrayList0.contains(1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer[] integerArray0 = new Integer[14];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0, (-370));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals((-370), objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(14, integerArray0.length);
      assertFalse(objectArrayList0.contains((-370)));
      
      boolean boolean0 = objectArrayList0.isEmpty();
      assertFalse(objectArrayList0.isEmpty());
      assertEquals((-370), objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(boolean0);
      assertEquals(14, integerArray0.length);
      assertFalse(objectArrayList0.contains((-370)));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      
      objectArrayList0.size(0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      ObjectListIterator<Integer> objectListIterator0 = objectArrayList0.listIterator();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectListIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>((ObjectIterator<?>) objectListIterator0);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertTrue(objectArrayList1.isEmpty());
      assertEquals(0, objectArrayList1.size());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList1.set(0, objectListIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(16);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(16));
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) objectArrayList0.DEFAULT_INITIAL_CAPACITY;
      ObjectArrayList<Integer> objectArrayList1 = ObjectArrayList.wrap(integerArray0);
      assertEquals(9, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(9, integerArray0.length);
      assertTrue(objectArrayList1.contains(16));
      
      boolean boolean0 = objectArrayList1.remove((Object) integerArray0[3]);
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(8, objectArrayList1.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean0);
      assertEquals(9, integerArray0.length);
      assertTrue(objectArrayList1.contains(16));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0, false);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(false));
      
      // Undeclared exception!
      try { 
        objectArrayList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(1318);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(1318));
      
      // Undeclared exception!
      try { 
        objectArrayList0.peek((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer[] integerArray0 = new Integer[19];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(19, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(19, integerArray0.length);
      
      ObjectListIterator<Object> objectListIterator0 = objectArrayList0.iterator();
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(19, objectArrayList0.size());
      assertNotNull(objectListIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(19, integerArray0.length);
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>((ObjectIterator<?>) objectListIterator0);
      assertTrue(objectArrayList1.equals((Object)objectArrayList0));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(19, objectArrayList0.size());
      assertEquals(19, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(19, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      objectArrayList0.ensureCapacity(16);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(16));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      Object[] objectArray0 = new Object[0];
      objectArrayList0.getElements(0, objectArray0, 0, 0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object[] objectArray0 = new Object[19];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0, 1, 0);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(19, objectArray0.length);
      assertFalse(objectArrayList0.contains(1));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      objectArrayList0.size(1294);
      assertEquals(1294, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(1294));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0, false);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(false));
      
      objectArrayList0.addElements(0, objectArray0, 0, 0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0, 1);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(9, integerArray0.length);
      assertFalse(objectArrayList0.contains(1));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0, 0);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, integerArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0, false);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(false));
      
      int int0 = objectArrayList0.size();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, int0);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(false));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertEquals(2, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, integerArray0.length);
      
      int int0 = objectArrayList0.size();
      assertEquals(2, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, int0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0, (-1916));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals((-1916), objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(6, integerArray0.length);
      assertFalse(objectArrayList0.contains((-1916)));
      
      int int0 = objectArrayList0.size();
      assertFalse(objectArrayList0.isEmpty());
      assertEquals((-1916), objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals((-1916), int0);
      assertEquals(6, integerArray0.length);
      assertFalse(objectArrayList0.contains((-1916)));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = objectArrayList0.set(0, object0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNull(object1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      assertTrue(objectArrayList0.contains(object0));
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(5, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(5, objectArray0.length);
      assertTrue(objectArrayList0.contains(object0));
      
      Object object1 = objectArrayList0.set(0, object0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(5, objectArrayList0.size());
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(5, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
      assertTrue(objectArrayList0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertEquals(3, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(3, objectArray0.length);
      
      Object object0 = objectArrayList0.remove(0);
      assertEquals(2, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNull(object0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(3, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      boolean boolean0 = objectArrayList0.isEmpty();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertEquals(4, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(4, integerArray0.length);
      
      boolean boolean0 = objectArrayList0.isEmpty();
      assertEquals(4, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 16;
      integerArray0[3] = (Integer) 16;
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0);
      assertEquals(7, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(7, integerArray0.length);
      assertTrue(objectArrayList0.contains(16));
      
      int int0 = objectArrayList0.indexOf(integerArray0[3]);
      assertEquals(7, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, int0);
      assertEquals(7, integerArray0.length);
      assertTrue(objectArrayList0.contains(16));
      assertFalse(objectArrayList0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(1318);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(1318));
      
      int int0 = objectArrayList0.indexOf((Object) null);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals((-1), int0);
      assertFalse(objectArrayList0.contains(1318));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>(integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      
      Integer integer0 = objectArrayList0.get(0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNull(integer0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      
      ObjectIterators.EmptyIterator<Integer> objectIterators_EmptyIterator0 = new ObjectIterators.EmptyIterator<Integer>();
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertNotNull(objectIterators_EmptyIterator0);
      
      objectArrayList0.add(0, (Object) objectIterators_EmptyIterator0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
      
      ObjectIterators.EmptyIterator objectIterators_EmptyIterator1 = (ObjectIterators.EmptyIterator)objectArrayList0.get(0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertEquals(0, objectIterators_EmptyIterator1.nextIndex());
      assertEquals((-1), objectIterators_EmptyIterator1.previousIndex());
      assertFalse(objectIterators_EmptyIterator1.hasPrevious());
      assertFalse(objectIterators_EmptyIterator1.hasNext());
      assertNotNull(objectIterators_EmptyIterator1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>((Integer[]) null, false);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      Integer[] integerArray0 = objectArrayList0.elements();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNull(integerArray0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      
      Integer integer0 = objectArrayList0.pop();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNull(integer0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>((ObjectList<?>) objectArrayList0);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList1.size());
      assertTrue(objectArrayList1.isEmpty());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      
      Object[] objectArray0 = objectArrayList1.elements();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList1.size());
      assertTrue(objectArrayList1.isEmpty());
      assertNotNull(objectArray0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      ObjectArrayList<Object> objectArrayList1 = objectArrayList0.clone();
      assertTrue(objectArrayList1.equals((Object)objectArrayList0));
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertTrue(objectArrayList1.isEmpty());
      assertEquals(0, objectArrayList1.size());
      assertNotSame(objectArrayList0, objectArrayList1);
      assertNotSame(objectArrayList1, objectArrayList0);
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer[] integerArray0 = new Integer[14];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(14, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(14, integerArray0.length);
      
      ObjectArrayList<Object> objectArrayList1 = objectArrayList0.clone();
      assertTrue(objectArrayList1.equals((Object)objectArrayList0));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(14, objectArrayList0.size());
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(14, objectArrayList1.size());
      assertNotSame(objectArrayList0, objectArrayList1);
      assertNotSame(objectArrayList1, objectArrayList0);
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(14, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectArrayList.wrap((Integer[]) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectArrayList.wrap((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>((Object[]) null, true);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(true));
      
      // Undeclared exception!
      try { 
        objectArrayList0.trim();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>((Integer[]) null, false);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.size(1033);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(7, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(7, objectArray0.length);
      
      // Undeclared exception!
      try { 
        objectArrayList0.set((-1), (Object) objectArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.removeElements(16, (-961));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (16) is greater than end index (-961)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      
      objectArrayList0.size = 14;
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(14, objectArrayList0.size());
      
      // Undeclared exception!
      try { 
        objectArrayList0.removeElements(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.removeElements(16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (16) is greater than array length (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      
      objectArrayList0.size = 2196;
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(2196, objectArrayList0.size());
      
      // Undeclared exception!
      try { 
        objectArrayList0.remove(objectArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.listIterator(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0, (-1963));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals((-1963), objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArrayList0.contains((-1963)));
      
      // Undeclared exception!
      try { 
        objectArrayList0.lastIndexOf(objectArrayList0.DEFAULT_INITIAL_CAPACITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1964 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.getElements(0, integerArray0, 664, (-2364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length (-2364) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertEquals(6, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(6, integerArray0.length);
      
      // Undeclared exception!
      try { 
        objectArrayList0.getElements(16, integerArray0, 16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (32) is greater than array length (6)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>((Integer[]) null, false);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.get((-846));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.get((-3048));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3048 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.equals((ObjectArrayList<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.compareTo((ObjectArrayList<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = objectArrayList0.add(object0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean0);
      assertTrue(objectArrayList0.contains(object0));
      assertFalse(objectArrayList0.contains(0));
      
      // Undeclared exception!
      try { 
        objectArrayList0.compareTo(objectArrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Comparable (java.lang.Object and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>((Integer[]) null, false);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      objectArrayList0.size = 1796;
      assertEquals(1796, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        objectArrayList0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>((Integer[]) null, false);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer[] integerArray0 = new Integer[14];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0, (-370));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals((-370), objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(14, integerArray0.length);
      assertFalse(objectArrayList0.contains((-370)));
      
      // Undeclared exception!
      try { 
        objectArrayList0.clear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (0) is greater than end index (-370)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        objectArrayList0.addElements(1, (Object[]) null, 1, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(5, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(5, integerArray0.length);
      
      // Undeclared exception!
      try { 
        objectArrayList0.addElements(5, (Object[]) integerArray0, 5, (-4179));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length (-4179) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(2, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, integerArray0.length);
      
      // Undeclared exception!
      try { 
        objectArrayList0.addElements(2, (Object[]) integerArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (4) is greater than array length (2)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      
      ObjectArrayList<Integer> objectArrayList1 = new ObjectArrayList<Integer>((Integer[]) null, false);
      assertEquals(0, objectArrayList1.size());
      assertTrue(objectArrayList1.isEmpty());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList1.add((Integer) objectArrayList0.DEFAULT_INITIAL_CAPACITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(8, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        objectArrayList0.add(object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>(integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(2, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, integerArray0.length);
      
      objectArrayList0.size = 418;
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(418, objectArrayList0.size());
      
      // Undeclared exception!
      try { 
        objectArrayList0.add((Integer) 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.add(16, (Object) 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      objectArrayList0.size = 2029;
      assertEquals(2029, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        objectArrayList0.add(0, (Object) objectArrayList0.DEFAULT_INITIAL_CAPACITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Object>((Object[]) null, 176, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayList<Object> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Object>(integerArray0, (-2712), (-2712));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity (-2712) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      ObjectArrayList<Object> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Object>(integerArray0, 16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Integer>((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Object>((ObjectList<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer[] integerArray0 = new Integer[22];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(22, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(22, integerArray0.length);
      
      objectArrayList0.size = 994;
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(994, objectArrayList0.size());
      
      ObjectArrayList<Object> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Object>((ObjectList<?>) objectArrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Object>((ObjectIterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      
      AbstractObjectList.ObjectSubList<Object> abstractObjectList_ObjectSubList0 = new AbstractObjectList.ObjectSubList<Object>(objectArrayList0, 16, 3496);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertEquals(3480, abstractObjectList_ObjectSubList0.size());
      assertNotNull(abstractObjectList_ObjectSubList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertFalse(objectArrayList0.contains(3496));
      
      ObjectListIterator<Object> objectListIterator0 = abstractObjectList_ObjectSubList0.listIterator(1065);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertEquals(3480, abstractObjectList_ObjectSubList0.size());
      assertNotNull(objectListIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertFalse(objectArrayList0.contains(3496));
      
      ObjectArrayList<Object> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Object>((ObjectIterator<?>) objectListIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (1081) is greater than or equal to list size (1)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      AbstractObjectList.ObjectSubList<Integer> abstractObjectList_ObjectSubList0 = new AbstractObjectList.ObjectSubList<Integer>(objectArrayList0, (-451), 0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(451, abstractObjectList_ObjectSubList0.size());
      assertNotNull(abstractObjectList_ObjectSubList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(linkedList0.contains(0));
      assertFalse(objectArrayList0.contains(0));
      
      ObjectListIterator<Integer> objectListIterator0 = abstractObjectList_ObjectSubList0.listIterator(16);
      assertEquals(0, linkedList0.size());
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(451, abstractObjectList_ObjectSubList0.size());
      assertNotNull(objectListIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(linkedList0.contains(0));
      assertFalse(objectArrayList0.contains(0));
      
      ObjectArrayList<Object> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Object>((ObjectIterator<?>) objectListIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -435 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Object>((ObjectCollection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      AbstractObjectList.ObjectSubList<Integer> abstractObjectList_ObjectSubList0 = new AbstractObjectList.ObjectSubList<Integer>(objectArrayList0, 16, 1529);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(1513, abstractObjectList_ObjectSubList0.size());
      assertNotNull(abstractObjectList_ObjectSubList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(16));
      
      ObjectArrayList<Integer> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Integer>((ObjectCollection<? extends Integer>) abstractObjectList_ObjectSubList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0, (-2141));
      assertEquals((-2141), objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, integerArray0.length);
      assertFalse(objectArrayList0.contains((-2141)));
      
      ObjectArrayList<Integer> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Integer>((ObjectCollection<? extends Integer>) objectArrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity (-2141) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Object>((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0);
      assertEquals(2, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, objectArray0.length);
      
      AbstractObjectList.ObjectSubList<Object> abstractObjectList_ObjectSubList0 = new AbstractObjectList.ObjectSubList<Object>(objectArrayList0, 16, 187);
      assertEquals(2, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(171, abstractObjectList_ObjectSubList0.size());
      assertNotNull(abstractObjectList_ObjectSubList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArrayList0.contains(187));
      
      ObjectListIterator<Object> objectListIterator0 = abstractObjectList_ObjectSubList0.listIterator(1);
      assertEquals(2, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(171, abstractObjectList_ObjectSubList0.size());
      assertNotNull(objectListIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArrayList0.contains(1));
      
      ObjectArrayList<Object> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Object>((Iterator<?>) objectListIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (17) is greater than or equal to list size (2)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(integerArray0);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      
      AbstractObjectList.ObjectSubList<Object> abstractObjectList_ObjectSubList0 = new AbstractObjectList.ObjectSubList<Object>(objectArrayList0, (-3033), 2416);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(5449, abstractObjectList_ObjectSubList0.size());
      assertNotNull(abstractObjectList_ObjectSubList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertFalse(objectArrayList0.contains(2416));
      
      ObjectListIterator<Object> objectListIterator0 = abstractObjectList_ObjectSubList0.listIterator(16);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(5449, abstractObjectList_ObjectSubList0.size());
      assertNotNull(objectListIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertFalse(objectArrayList0.contains(16));
      
      ObjectArrayList<Object> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Object>((Iterator<?>) objectListIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3017 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0, (-2572));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals((-2572), objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, integerArray0.length);
      assertFalse(objectArrayList0.contains((-2572)));
      
      ObjectArrayList<Object> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Object>((Collection<?>) objectArrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity (-2572) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      objectArrayList0.size = 1173;
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1173, objectArrayList0.size());
      
      ObjectArrayList<Object> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Object>((Collection<?>) objectArrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 16 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = null;
      try {
        objectArrayList0 = new ObjectArrayList<Object>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity (-1) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      
      ObjectIterators.EmptyIterator<Integer> objectIterators_EmptyIterator0 = new ObjectIterators.EmptyIterator<Integer>();
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertNotNull(objectIterators_EmptyIterator0);
      
      objectArrayList0.add(0, (Object) objectIterators_EmptyIterator0);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
      
      objectArrayList0.trim(0);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0, true);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(6, objectArray0.length);
      assertFalse(objectArrayList0.contains(true));
      
      objectArrayList0.trim(0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(6, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(0);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(0));
      
      objectArrayList0.trim(19);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(19));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectIterators.EmptyIterator<Integer> objectIterators_EmptyIterator0 = new ObjectIterators.EmptyIterator<Integer>();
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertNotNull(objectIterators_EmptyIterator0);
      
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>((ObjectIterator<?>) objectIterators_EmptyIterator0);
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 16;
      ObjectArrayList<Integer> objectArrayList1 = new ObjectArrayList<Integer>(integerArray0);
      assertEquals(2, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, integerArray0.length);
      assertTrue(objectArrayList1.contains(16));
      
      boolean boolean0 = objectArrayList1.rem(objectArrayList0.DEFAULT_INITIAL_CAPACITY);
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      assertFalse(objectArrayList0.contains(16));
      assertFalse(objectArrayList1.contains(16));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0, (-2096));
      assertEquals((-2096), objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(6, objectArray0.length);
      assertFalse(objectArrayList0.contains((-2096)));
      
      boolean boolean0 = objectArrayList0.rem(objectArray0[0]);
      assertEquals((-2096), objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(boolean0);
      assertEquals(6, objectArray0.length);
      assertFalse(objectArrayList0.contains((-2096)));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      
      ObjectIterators.EmptyIterator<Integer> objectIterators_EmptyIterator0 = new ObjectIterators.EmptyIterator<Integer>();
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertNotNull(objectIterators_EmptyIterator0);
      
      objectArrayList0.add(0, (Object) objectIterators_EmptyIterator0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(2, objectArrayList0.size());
      assertFalse(objectIterators_EmptyIterator0.hasNext());
      assertEquals(0, objectIterators_EmptyIterator0.nextIndex());
      assertFalse(objectIterators_EmptyIterator0.hasPrevious());
      assertEquals((-1), objectIterators_EmptyIterator0.previousIndex());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
      
      ObjectIterators.EmptyIterator objectIterators_EmptyIterator1 = (ObjectIterators.EmptyIterator)objectArrayList0.remove(0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertEquals((-1), objectIterators_EmptyIterator1.previousIndex());
      assertEquals(0, objectIterators_EmptyIterator1.nextIndex());
      assertFalse(objectIterators_EmptyIterator1.hasNext());
      assertFalse(objectIterators_EmptyIterator1.hasPrevious());
      assertNotNull(objectIterators_EmptyIterator1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      assertFalse(objectArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.remove((-272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -272 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(463);
      assertNotNull(integer0);
      assertEquals(463, (int)integer0);
      
      integerArray0[0] = integer0;
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(6, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(6, integerArray0.length);
      assertTrue(objectArrayList0.contains(integer0));
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>((ObjectList<?>) objectArrayList0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(6, objectArrayList0.size());
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(6, objectArrayList1.size());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(6, integerArray0.length);
      assertTrue(objectArrayList0.contains(integer0));
      assertTrue(objectArrayList1.contains(463));
      
      boolean boolean0 = objectArrayList1.retainAll(objectArrayList0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(6, objectArrayList0.size());
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(6, objectArrayList1.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      assertTrue(objectArrayList0.contains(integer0));
      assertTrue(objectArrayList1.contains(463));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = objectArrayList0.contains(16);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      assertFalse(objectArrayList0.contains(16));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(41);
      assertNotNull(integer0);
      assertEquals(41, (int)integer0);
      
      integerArray0[0] = integer0;
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      assertTrue(objectArrayList0.contains(integer0));
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>((Collection<?>) objectArrayList0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, objectArrayList0.size());
      assertEquals(16, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      assertTrue(objectArrayList0.contains(integer0));
      assertTrue(objectArrayList1.contains(41));
      
      int int0 = objectArrayList1.indexOf((Object) null);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, objectArrayList0.size());
      assertEquals(16, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, int0);
      assertEquals(16, integerArray0.length);
      assertFalse(objectArrayList0.contains(int0));
      assertTrue(objectArrayList0.contains(integer0));
      assertTrue(objectArrayList1.contains(41));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.get(3507);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (3507) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      objectArrayList0.ensureCapacity(2990);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(2990));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>((Integer[]) null, false);
      assertEquals(0, objectArrayList0.size());
      assertTrue(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectArrayList0.ensureCapacity((-236));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(7, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(7, integerArray0.length);
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>(integerArray0, true);
      assertTrue(objectArrayList1.isEmpty());
      assertEquals(0, objectArrayList1.size());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(7, integerArray0.length);
      assertFalse(objectArrayList1.contains(true));
      
      int int0 = objectArrayList1.compareTo(objectArrayList0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(7, objectArrayList0.size());
      assertTrue(objectArrayList1.isEmpty());
      assertEquals(0, objectArrayList1.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals((-1), int0);
      assertEquals(7, integerArray0.length);
      assertFalse(objectArrayList0.contains(int0));
      assertFalse(objectArrayList1.contains(true));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      objectArrayList0.add(0, (Object) 16);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(objectArrayList0.contains(16));
      assertFalse(objectArrayList0.contains(0));
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>(16);
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertTrue(objectArrayList1.isEmpty());
      assertEquals(0, objectArrayList1.size());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList1.contains(16));
      
      Integer integer0 = new Integer(364);
      assertNotNull(integer0);
      assertEquals(364, (int)integer0);
      
      boolean boolean0 = objectArrayList1.add((Object) integer0);
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(1, objectArrayList1.size());
      assertNotSame(objectArrayList1, objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean0);
      assertTrue(objectArrayList1.contains(364));
      assertFalse(objectArrayList1.contains(16));
      
      int int0 = objectArrayList0.compareTo(objectArrayList1);
      assertFalse(objectArrayList0.equals((Object)objectArrayList1));
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList1.isEmpty());
      assertEquals(1, objectArrayList1.size());
      assertNotSame(objectArrayList0, objectArrayList1);
      assertNotSame(objectArrayList1, objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals((-1), int0);
      assertTrue(objectArrayList0.contains(16));
      assertFalse(objectArrayList0.contains(0));
      assertTrue(objectArrayList1.contains(364));
      assertFalse(objectArrayList1.contains(16));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(9, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(9, objectArray0.length);
      
      ObjectArrayList<Object> objectArrayList1 = ObjectArrayList.wrap(objectArray0, (-1788));
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertFalse(objectArrayList1.isEmpty());
      assertEquals((-1788), objectArrayList1.size());
      assertNotSame(objectArrayList1, objectArrayList0);
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(9, objectArray0.length);
      assertFalse(objectArrayList1.contains((-1788)));
      
      int int0 = objectArrayList0.compareTo(objectArrayList1);
      assertFalse(objectArrayList0.equals((Object)objectArrayList1));
      assertFalse(objectArrayList1.equals((Object)objectArrayList0));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(9, objectArrayList0.size());
      assertFalse(objectArrayList1.isEmpty());
      assertEquals((-1788), objectArrayList1.size());
      assertNotSame(objectArrayList0, objectArrayList1);
      assertNotSame(objectArrayList1, objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, int0);
      assertEquals(9, objectArray0.length);
      assertFalse(objectArrayList0.contains((-1788)));
      assertFalse(objectArrayList1.contains((-1788)));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(0));
      
      objectArrayList0.add(0, (Object) 16);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.contains(0));
      assertTrue(objectArrayList0.contains(16));
      
      int int0 = objectArrayList0.compareTo(objectArrayList0);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, int0);
      assertFalse(objectArrayList0.contains(0));
      assertTrue(objectArrayList0.contains(16));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertTrue(objectArrayList0.contains(integer0));
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>((ObjectCollection<?>) objectArrayList0);
      assertEquals(1, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(1, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertTrue(objectArrayList0.contains(integer0));
      assertTrue(objectArrayList1.contains(0));
      
      ObjectArrayList<Object> objectArrayList2 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertTrue(objectArrayList2.equals((Object)objectArrayList1));
      assertFalse(objectArrayList2.isEmpty());
      assertEquals(1, objectArrayList2.size());
      assertNotSame(objectArrayList2, objectArrayList1);
      assertNotNull(objectArrayList2);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertTrue(objectArrayList2.contains(0));
      
      objectArrayList0.clear();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, integerArray0.length);
      assertFalse(objectArrayList0.contains(integer0));
      
      boolean boolean0 = objectArrayList1.equals(objectArrayList2);
      assertFalse(objectArrayList1.equals((Object)objectArrayList2));
      assertFalse(objectArrayList2.equals((Object)objectArrayList1));
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertEquals(1, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertFalse(objectArrayList2.isEmpty());
      assertEquals(1, objectArrayList2.size());
      assertNotSame(objectArrayList1, objectArrayList2);
      assertNotSame(objectArrayList2, objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      assertFalse(objectArrayList0.contains(integer0));
      assertTrue(objectArrayList1.contains(0));
      assertFalse(objectArrayList2.contains(0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>();
      assertEquals(0, objectArrayList1.size());
      assertTrue(objectArrayList1.isEmpty());
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      ObjectArrayList<Object> objectArrayList2 = new ObjectArrayList<Object>((Collection<?>) objectArrayList0);
      assertFalse(objectArrayList2.equals((Object)objectArrayList1));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, objectArrayList0.size());
      assertFalse(objectArrayList2.isEmpty());
      assertEquals(16, objectArrayList2.size());
      assertNotNull(objectArrayList2);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      
      boolean boolean0 = objectArrayList1.equals(objectArrayList2);
      assertFalse(objectArrayList1.equals((Object)objectArrayList2));
      assertFalse(objectArrayList2.equals((Object)objectArrayList1));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, objectArrayList0.size());
      assertEquals(0, objectArrayList1.size());
      assertTrue(objectArrayList1.isEmpty());
      assertFalse(objectArrayList2.isEmpty());
      assertEquals(16, objectArrayList2.size());
      assertNotSame(objectArrayList1, objectArrayList2);
      assertNotSame(objectArrayList2, objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(boolean0);
      assertEquals(16, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertEquals(8, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, integerArray0.length);
      
      boolean boolean0 = objectArrayList0.equals(objectArrayList0);
      assertEquals(8, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      
      ObjectArrayList<Object> objectArrayList1 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertTrue(objectArrayList1.equals((Object)objectArrayList0));
      assertEquals(16, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertNotSame(objectArrayList1, objectArrayList0);
      assertNotNull(objectArrayList1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      
      boolean boolean0 = objectArrayList1.equals(objectArrayList0);
      assertTrue(objectArrayList0.equals((Object)objectArrayList1));
      assertTrue(objectArrayList1.equals((Object)objectArrayList0));
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(16, objectArrayList0.size());
      assertEquals(16, objectArrayList1.size());
      assertFalse(objectArrayList1.isEmpty());
      assertNotSame(objectArrayList0, objectArrayList1);
      assertNotSame(objectArrayList1, objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean0);
      assertEquals(16, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>(integerArray0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(3, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(3, integerArray0.length);
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      objectArrayList0.replaceAll(unaryOperator0);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(3, objectArrayList0.size());
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      assertEquals(16, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      
      ObjectListIterator<Object> objectListIterator0 = objectArrayList0.listIterator(16);
      assertEquals(16, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectListIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      assertFalse(objectArrayList0.contains(16));
      
      ObjectIterators.UnmodifiableBidirectionalIterator<Object> objectIterators_UnmodifiableBidirectionalIterator0 = new ObjectIterators.UnmodifiableBidirectionalIterator<Object>(objectListIterator0);
      assertEquals(16, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNotNull(objectIterators_UnmodifiableBidirectionalIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      assertFalse(objectArrayList0.contains(16));
      
      Object object0 = objectIterators_UnmodifiableBidirectionalIterator0.previous();
      assertEquals(16, objectArrayList0.size());
      assertFalse(objectArrayList0.isEmpty());
      assertNull(object0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(16, integerArray0.length);
      assertFalse(objectArrayList0.contains(16));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectArrayList0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      ObjectListIterator<Object> objectListIterator0 = objectArrayList0.iterator();
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectListIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      ObjectIterators.UnmodifiableBidirectionalIterator<Object> objectIterators_UnmodifiableBidirectionalIterator0 = new ObjectIterators.UnmodifiableBidirectionalIterator<Object>(objectListIterator0);
      assertTrue(objectArrayList0.isEmpty());
      assertEquals(0, objectArrayList0.size());
      assertNotNull(objectIterators_UnmodifiableBidirectionalIterator0);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
      
      // Undeclared exception!
      try { 
        objectIterators_UnmodifiableBidirectionalIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      ObjectListIterator<Object> objectListIterator0 = objectArrayList0.iterator();
      ObjectIterators.UnmodifiableListIterator<Object> objectIterators_UnmodifiableListIterator0 = new ObjectIterators.UnmodifiableListIterator<Object>(objectListIterator0);
      ObjectIterators.UnmodifiableBidirectionalIterator<Object> objectIterators_UnmodifiableBidirectionalIterator0 = new ObjectIterators.UnmodifiableBidirectionalIterator<Object>(objectIterators_UnmodifiableListIterator0);
      // Undeclared exception!
      try { 
        objectIterators_UnmodifiableBidirectionalIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      objectArrayList0.size = 286;
      // Undeclared exception!
      try { 
        objectArrayList0.trim();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0);
      objectArrayList0.trim();
      assertEquals(0, objectArrayList0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      // Undeclared exception!
      try { 
        objectArrayList0.size((-1088));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index (-1088) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>();
      // Undeclared exception!
      try { 
        objectArrayList0.set(16, (Integer) 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      ObjectArrayList<Integer> objectArrayList1 = new ObjectArrayList<Integer>();
      // Undeclared exception!
      try { 
        objectArrayList0.set(1, objectArrayList1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.codelibs.jhighlight.fastutil.objects.ObjectArrayList
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      // Undeclared exception!
      try { 
        objectArrayList0.remove(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(integerArray0);
      int int0 = objectArrayList0.lastIndexOf(objectArrayList0.DEFAULT_INITIAL_CAPACITY);
      assertEquals(3, objectArrayList0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      int int0 = objectArrayList0.lastIndexOf((Object) null);
      assertEquals(3, objectArrayList0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      objectArrayList0.add(0, (Object) 16);
      int int0 = objectArrayList0.lastIndexOf((Object) null);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(objectArray0);
      boolean boolean0 = objectArrayList0.remove((Object) objectArrayList0.DEFAULT_INITIAL_CAPACITY);
      assertEquals(5, objectArrayList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>();
      boolean boolean0 = objectArrayList0.retainAll(objectArrayList1);
      assertEquals(0, objectArrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      AbstractObjectList.ObjectSubList<Object> abstractObjectList_ObjectSubList0 = new AbstractObjectList.ObjectSubList<Object>(objectArrayList0, (-4696), 680);
      ObjectArrayList<Object> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Object>((ObjectCollection<?>) abstractObjectList_ObjectSubList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -4696 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer[] integerArray0 = new Integer[18];
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>(integerArray0);
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>((ObjectList<?>) objectArrayList0);
      objectArrayList1.add(16, (Object) objectArrayList0);
      assertEquals(18, objectArrayList0.size());
      assertEquals(19, objectArrayList1.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>(0);
      objectArrayList0.add(0, (Object) 16);
      int int0 = objectArrayList0.lastIndexOf(objectArrayList0.DEFAULT_INITIAL_CAPACITY);
      assertFalse(objectArrayList0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        objectArrayList0.add(16, object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      objectArrayList0.ensureCapacity(1);
      assertEquals(16, ObjectArrayList.DEFAULT_INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap((Object[]) integerArray0);
      // Undeclared exception!
      objectArrayList0.size(1885761133);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      // Undeclared exception!
      objectArrayList0.size(12613);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        ObjectArrayList.wrap(integerArray0, 566);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The specified length (566) is greater than the array size (6)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      ObjectListIterator<Object> objectListIterator0 = objectArrayList0.iterator();
      ObjectIterators.UnmodifiableListIterator<Object> objectIterators_UnmodifiableListIterator0 = new ObjectIterators.UnmodifiableListIterator<Object>(objectListIterator0);
      int int0 = objectIterators_UnmodifiableListIterator0.nextIndex();
      assertEquals(0, int0);
      assertEquals(0, objectArrayList0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayList<Object> objectArrayList0 = ObjectArrayList.wrap(objectArray0);
      Object[] objectArray1 = objectArrayList0.elements();
      assertNotNull(objectArray1);
      assertEquals(1, objectArrayList0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0);
      ObjectArrayList<Object> objectArrayList1 = new ObjectArrayList<Object>((ObjectCollection<?>) objectArrayList0);
      // Undeclared exception!
      try { 
        objectArrayList1.addElements(16, (Object[]) integerArray0, 16, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than list size (1)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0);
      AbstractObjectList.ObjectSubList<Integer> abstractObjectList_ObjectSubList0 = new AbstractObjectList.ObjectSubList<Integer>(objectArrayList0, 16, (-922));
      ObjectArrayList<Object> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Object>((ObjectList<?>) abstractObjectList_ObjectSubList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity (-938) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectArrayList<Integer> objectArrayList0 = new ObjectArrayList<Integer>();
      AbstractObjectList.ObjectSubList<Integer> abstractObjectList_ObjectSubList0 = new AbstractObjectList.ObjectSubList<Integer>(objectArrayList0, 16, 1235);
      ObjectArrayList<Integer> objectArrayList1 = null;
      try {
        objectArrayList1 = new ObjectArrayList<Integer>((Collection<? extends Integer>) abstractObjectList_ObjectSubList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      ObjectArrayList<Integer> objectArrayList0 = ObjectArrayList.wrap(integerArray0, (-969));
      // Undeclared exception!
      try { 
        objectArrayList0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity (-969) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectArrayList<Object> objectArrayList0 = new ObjectArrayList<Object>();
      // Undeclared exception!
      try { 
        objectArrayList0.getElements((-508), (Object[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }
}
