/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 03:05:58 GMT 2022
 */

package org.codelibs.jhighlight.fastutil.chars;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.codelibs.jhighlight.fastutil.Hash;
import org.codelibs.jhighlight.fastutil.chars.Char2ObjectMap;
import org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap;
import org.codelibs.jhighlight.fastutil.chars.CharSet;
import org.codelibs.jhighlight.fastutil.objects.ObjectCollection;
import org.codelibs.jhighlight.fastutil.objects.ObjectSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Char2ObjectOpenHashMap_ESTest extends Char2ObjectOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue(char2ObjectOpenHashMap1);
      assertFalse(boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = '-';
      charArray0[2] = '.';
      charArray0[3] = '';
      charArray0[4] = 'A';
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 5);
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap1;
      char2ObjectOpenHashMapArray0[1] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[2] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[3] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[4] = char2ObjectOpenHashMap1;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(charArray0, char2ObjectOpenHashMapArray0);
      assertNotNull(char2ObjectOpenHashMap2);
      assertEquals(5, charArray0.length);
      assertEquals(5, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {'j', '-', '.', '', 'A'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(5, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap2.remove('.');
      assertNotNull(char2ObjectOpenHashMap3);
      assertEquals(5, charArray0.length);
      assertEquals(5, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {'j', '-', '.', '', 'A'}, charArray0);
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(4, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '~';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '~', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '~', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      char2ObjectOpenHashMap1.rehash(709741);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '~', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      // Undeclared exception!
      char2ObjectOpenHashMap1.trim();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim(3291);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(3291);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Character character0 = Character.valueOf('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap1.putIfAbsent(character0, char2ObjectOpenHashMap0);
      assertNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      Character character1 = Character.valueOf('k');
      assertNotNull(character1);
      assertEquals('k', (char)character1);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      
      Character character2 = Character.valueOf('4');
      assertNotNull(character2);
      assertEquals('4', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      Character character3 = char2ObjectOpenHashMap3.put('N', character2);
      assertNull(character3);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap4 = char2ObjectOpenHashMap1.put(character1, char2ObjectOpenHashMap3);
      assertNotNull(char2ObjectOpenHashMap4);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(character1.equals((Object)character2));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap3));
      assertSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap3);
      assertSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertTrue(char2ObjectOpenHashMap4.rehash());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.size = (-710);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals((-710), char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals((-710), char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '\u001C';
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '7';
      characterArray0[1] = (Character) '7';
      characterArray0[2] = (Character) '7';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'7', '7', '\u001C'}, charArray0);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap1.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.shiftKeys((int) characterArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 55 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('u');
      assertNotNull(character0);
      assertEquals('u', (char)character0);
      
      Character character1 = Character.valueOf('V');
      assertNotNull(character1);
      assertEquals('V', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap0.put(character1, character1);
      assertNull(character2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(character1.equals((Object)character0));
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      char2ObjectOpenHashMap0.used = booleanArray0;
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      int int0 = 218;
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys(218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 218 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      char2ObjectOpenHashMap0.n = (-5963);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.containsValue(character0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -5964 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = Character.valueOf('T');
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      char2ObjectOpenHashMap0.putAll(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap1);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      
      char2ObjectOpenHashMap2.size = (int) 'T';
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(84, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap2.put('<', character1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('s');
      assertNotNull(character0);
      assertEquals('s', (char)character0);
      
      Character character1 = Character.valueOf('s');
      assertNotNull(character1);
      assertEquals('s', (char)character1);
      
      Character character2 = char2ObjectOpenHashMap0.put(character1, (Character) null);
      assertNull(character2);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      char2ObjectOpenHashMap1.used = booleanArray0;
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsKey('z');
      assertFalse(boolean0);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      float float0 = 1.0F;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = null;
      try {
        char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap1, 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('s');
      assertNotNull(character0);
      assertEquals('s', (char)character0);
      
      Character character1 = Character.valueOf('s');
      assertNotNull(character1);
      assertEquals('s', (char)character1);
      
      Character character2 = char2ObjectOpenHashMap0.put(character1, (Character) null);
      assertNull(character2);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsKey('z');
      assertFalse(boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap1, 1.0F);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      boolean boolean1 = char2ObjectOpenHashMap2.equals(char2ObjectOpenHashMap0);
      assertTrue(boolean1);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put('0', character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim(0);
      assertTrue(boolean0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character2 = Character.valueOf('^');
      assertNotNull(character2);
      assertEquals('^', (char)character2);
      assertFalse(character2.equals((Object)character0));
      
      // Undeclared exception!
      char2ObjectOpenHashMap0.put(character2, character2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('E');
      assertNotNull(character0);
      assertEquals('E', (char)character0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = '~';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      charArray0[7] = 'E';
      charArray0[8] = '~';
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) '~';
      characterArray0[1] = character0;
      characterArray0[2] = (Character) '~';
      characterArray0[3] = (Character) 'E';
      characterArray0[4] = (Character) 'E';
      characterArray0[5] = (Character) '~';
      Character character1 = Character.valueOf('F');
      assertNotNull(character1);
      assertEquals('F', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[6] = character1;
      characterArray0[7] = character0;
      characterArray0[8] = (Character) 'E';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'~', '~', 'E', 'E', '~', 'E', 'E', 'E', '~'}, charArray0);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(2, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      Character character2 = Character.valueOf('}');
      assertNotNull(character2);
      assertEquals('}', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = char2ObjectOpenHashMap1.remove((Object) character2);
      assertNull(character3);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'~', '~', 'E', 'E', '~', 'E', 'E', 'E', '~'}, charArray0);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(2, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.n = (-345);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('E');
      assertNotNull(character0);
      assertEquals('E', (char)character0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'E';
      charArray0[2] = ']';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      charArray0[7] = 'E';
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 8);
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[1] = char2ObjectOpenHashMap0;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0, 0.75F);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      char2ObjectOpenHashMapArray0[2] = char2ObjectOpenHashMap1;
      char2ObjectOpenHashMapArray0[3] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[4] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[5] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[6] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[7] = char2ObjectOpenHashMap0;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(charArray0, char2ObjectOpenHashMapArray0);
      assertNotNull(char2ObjectOpenHashMap2);
      assertEquals(8, charArray0.length);
      assertEquals(8, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {'Z', 'E', ']', 'E', 'E', 'E', 'E', 'E'}, charArray0);
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap2.trim();
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      assertEquals(8, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {'Z', 'E', ']', 'E', 'E', 'E', 'E', 'E'}, charArray0);
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap2.get((Character) 'E');
      assertNotNull(char2ObjectOpenHashMap3);
      assertEquals(8, charArray0.length);
      assertEquals(8, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {'Z', 'E', ']', 'E', 'E', 'E', 'E', 'E'}, charArray0);
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'Y';
      charArray0[2] = 'W';
      charArray0[3] = 'N';
      char2ObjectOpenHashMap0.key = charArray0;
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char2ObjectOpenHashMap0.used = null;
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.get('x');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'k';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      char2ObjectOpenHashMap0.used = booleanArray0;
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = char2ObjectOpenHashMap0.remove((Object) '\u0000');
      assertNull(character0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.rehash(9);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      char2ObjectOpenHashMap0.shiftKeys(19);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 1;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(1);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.size = (-887);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-887), char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      char2ObjectOpenHashMap0.defRetValue = character0;
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-887), char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-887), char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals((-887), char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      char2ObjectOpenHashMap1.clear();
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-887), char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Character character1 = Character.valueOf('9');
      assertNotNull(character1);
      assertEquals('9', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap1.getOrDefault(character1, character1);
      assertNotNull(character2);
      assertEquals('9', (char)character2);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-887), char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = null;
      try {
        char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0, (float) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The expected number of elements must be nonnegative
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      Character character1 = Character.valueOf('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap0.put('B', character1);
      assertNull(character2);
      assertFalse(character1.equals((Object)character0));
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '0';
      charArray0[2] = '/';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 6);
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[1] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[2] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[3] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[4] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[5] = char2ObjectOpenHashMap0;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(charArray0, char2ObjectOpenHashMapArray0, 1.0F);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(6, charArray0.length);
      assertEquals(6, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {':', '0', '/', '0', '0', '0'}, charArray0);
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(3, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Map<? extends Character, ? extends Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap1, 0.25F);
      assertNotNull(char2ObjectOpenHashMap2);
      assertEquals(6, charArray0.length);
      assertEquals(6, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {':', '0', '/', '0', '0', '0'}, charArray0);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(3, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap2.get('0');
      assertNotNull(char2ObjectOpenHashMap3);
      assertEquals(6, charArray0.length);
      assertEquals(6, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {':', '0', '/', '0', '0', '0'}, charArray0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(3, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap2.shiftKeys(2489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2489 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim(0);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      char2ObjectOpenHashMap0.used = booleanArray0;
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      // Undeclared exception!
      char2ObjectOpenHashMap0.put('^', character0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.size = 107;
      assertEquals(107, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(1);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.equals(char2ObjectOpenHashMap1);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, objectSet0.size());
      assertTrue(objectSet0.isEmpty());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap1.equals(char2ObjectOpenHashMap2);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      Char2ObjectMap.FastEntrySet<Character> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap0.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectMap_FastEntrySet0.contains('T'));
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectMap_FastEntrySet0.size());
      assertFalse(char2ObjectMap_FastEntrySet0.isEmpty());
      
      char2ObjectOpenHashMap1.entries = char2ObjectMap_FastEntrySet0;
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectMap_FastEntrySet0.size());
      assertFalse(char2ObjectMap_FastEntrySet0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.entries.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.entries.size());
      
      char2ObjectOpenHashMap0.putAll(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.remove((Object) char2ObjectOpenHashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap cannot be cast to class java.lang.Character (org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1a702575; java.lang.Character is in module java.base of loader 'bootstrap')
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      char char0 = 'T';
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      char2ObjectOpenHashMap1.size = (int) 'T';
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(84, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.putAll(char2ObjectOpenHashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap$MapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'k';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = char2ObjectOpenHashMap0.get('k');
      assertNull(character0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectMap.FastEntrySet<Character> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap0.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertFalse(char2ObjectMap_FastEntrySet0.contains('k'));
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectMap_FastEntrySet0.size());
      assertFalse(char2ObjectMap_FastEntrySet0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys((-133));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -133 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue((Object) null);
      assertFalse(boolean0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'M';
      charArray0[2] = 'E';
      charArray0[3] = 'v';
      charArray0[4] = ' ';
      charArray0[5] = ']';
      charArray0[6] = 'z';
      charArray0[7] = 'g';
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 8);
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[1] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[2] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[3] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[4] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[5] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[6] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[7] = char2ObjectOpenHashMap0;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(charArray0, char2ObjectOpenHashMapArray0, 0.75F);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(8, charArray0.length);
      assertEquals(8, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {'k', 'M', 'E', 'v', ' ', ']', 'z', 'g'}, charArray0);
      assertEquals(8, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Char2ObjectMap<Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap1);
      assertNotNull(char2ObjectOpenHashMap2);
      assertEquals(8, charArray0.length);
      assertEquals(8, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {'k', 'M', 'E', 'v', ' ', ']', 'z', 'g'}, charArray0);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertEquals(8, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(8, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Map<? extends Character, ? extends Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap2, 0.75F);
      assertNotNull(char2ObjectOpenHashMap3);
      assertEquals(8, charArray0.length);
      assertEquals(8, char2ObjectOpenHashMapArray0.length);
      assertArrayEquals(new char[] {'k', 'M', 'E', 'v', ' ', ']', 'z', 'g'}, charArray0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertEquals(8, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(8, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(8, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap3.shiftKeys(1244);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1244 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'g';
      charArray0[2] = 'K';
      charArray0[3] = 'J';
      charArray0[4] = 'Z';
      charArray0[5] = '_';
      charArray0[6] = 'F';
      charArray0[7] = 'd';
      charArray0[8] = '\\';
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) 'K';
      characterArray0[2] = (Character) '_';
      characterArray0[3] = (Character) 'K';
      characterArray0[4] = (Character) 'd';
      characterArray0[5] = (Character) '_';
      characterArray0[6] = (Character) 'K';
      characterArray0[7] = (Character) 'Z';
      characterArray0[8] = (Character) 'g';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'l', 'g', 'K', 'J', 'Z', '_', 'F', 'd', '\\'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(9, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      char2ObjectOpenHashMap0.rehash(2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.n = (-1217);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.containsValue(char2ObjectOpenHashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1218 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim((-2881));
      assertTrue(boolean0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('d');
      assertNotNull(character0);
      assertEquals('d', (char)character0);
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.get(character0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1272670312 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(121090);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      // Undeclared exception!
      char2ObjectOpenHashMap1.containsValue(char2ObjectOpenHashMap0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[0];
      char2ObjectOpenHashMap0.used = booleanArray0;
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.get('J');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectMap.FastEntrySet<Character> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap0.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectMap_FastEntrySet0.size());
      assertTrue(char2ObjectMap_FastEntrySet0.isEmpty());
      
      Character character0 = Character.valueOf('W');
      assertNotNull(character0);
      assertEquals('W', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put('2', character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim(0);
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      // Undeclared exception!
      char2ObjectOpenHashMap0.containsKey('(');
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.putIfAbsent(character0, character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim(0);
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      Character character2 = Character.valueOf('m');
      assertNotNull(character2);
      assertEquals('m', (char)character2);
      assertFalse(character2.equals((Object)character0));
      
      // Undeclared exception!
      char2ObjectOpenHashMap0.get(character2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      char2ObjectOpenHashMap0.size = 2021;
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(2021, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.put(character0, character0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 32 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '~';
      charArray0[2] = '8';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '~', '8', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('&');
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.get(character0);
      assertNull(character1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '~', '8', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = '3';
      charArray0[2] = 'a';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      char2ObjectOpenHashMap0.defaultReturnValue(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      charArray0[3] = 'Q';
      charArray0[4] = 'x';
      charArray0[5] = 'h';
      charArray0[6] = 'd';
      char2ObjectOpenHashMap0.key = charArray0;
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap0.remove((Object) character0);
      assertNotNull(char2ObjectOpenHashMap2);
      assertSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '8';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '{';
      characterArray0[1] = (Character) '{';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) '{';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '{', '8', ':'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '{', '8', ':'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Character character0 = char2ObjectOpenHashMap0.get('.');
      assertNull(character0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '{', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      
      char2ObjectOpenHashMap1.clear();
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap2);
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      
      boolean boolean1 = char2ObjectOpenHashMap1.rehash();
      assertTrue(boolean1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Character character1 = Character.valueOf('{');
      assertNotNull(character1);
      assertEquals('{', (char)character1);
      
      Character character2 = Character.valueOf('v');
      assertNotNull(character2);
      assertEquals('v', (char)character2);
      assertFalse(character2.equals((Object)character1));
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.shiftKeys(1223);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1223 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.mask = (-185);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.remove(' ');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -732846332 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      BiFunction<Character, Character, Character> biFunction0 = (BiFunction<Character, Character, Character>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyChar() , anyChar());
      char2ObjectOpenHashMap0.replaceAll(biFunction0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      int int0 = Hash.DEFAULT_INITIAL_SIZE;
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'o';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      characterArray0[3] = (Character) 'o';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'o', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      BiFunction<Character, Character, Character> biFunction0 = (BiFunction<Character, Character, Character>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction0).apply(anyChar() , anyChar());
      char2ObjectOpenHashMap0.replaceAll(biFunction0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'o', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((-1725), (float) characterArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim((-21));
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.containsKey('e');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1288848111 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char char0 = 'T';
      char2ObjectOpenHashMap0.rehash(721);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      // Undeclared exception!
      char2ObjectOpenHashMap0.remove('T');
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = Character.valueOf('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.hashCode();
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character2 = char2ObjectOpenHashMap0.put('1', (Character) null);
      assertNull(character2);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character3 = char2ObjectOpenHashMap0.get(character0);
      assertNotNull(character3);
      assertEquals('f', (char)character3);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.rehash(338);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = '{';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '{'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      boolean boolean0 = char2ObjectOpenHashMap0.replace(character0, character0, character0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '{'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character1 = char2ObjectOpenHashMap0.remove((Object) '{');
      assertNull(character1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '{'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character2 = char2ObjectOpenHashMap0.get('1');
      assertNull(character2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '{'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      char2ObjectOpenHashMap0.value = characterArray0;
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.trim();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char2ObjectOpenHashMap0.used = booleanArray0;
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim(0);
      assertTrue(boolean0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = char2ObjectOpenHashMap0.shiftKeys(0);
      assertEquals(0, int0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character2 = Character.valueOf('#');
      assertNotNull(character2);
      assertEquals('#', (char)character2);
      assertFalse(character2.equals((Object)character0));
      
      Character character3 = char2ObjectOpenHashMap0.put(character2, character2);
      assertNull(character3);
      assertFalse(character2.equals((Object)character0));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      int int1 = char2ObjectOpenHashMap0.growthFactor();
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character4 = char2ObjectOpenHashMap0.remove((Object) character0);
      assertNotNull(character4);
      assertEquals('r', (char)character4);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character4.equals((Object)character2));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = '\u0000';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'o', '8', '\u0000'}, charArray0);
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = char2ObjectOpenHashMap0.remove((Object) '\u0000');
      assertNull(character0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'o', '8', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.trim((-2145863841));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2147483648
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Map<? extends Character, ? extends Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      boolean boolean0 = char2ObjectOpenHashMap1.trim((-3519));
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      boolean boolean1 = char2ObjectOpenHashMap1.trim();
      assertTrue(boolean1);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'e';
      charArray0[2] = '<';
      charArray0[3] = '*';
      charArray0[4] = 'g';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = null;
      try {
        char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>(charArray0, (Character[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'k';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      char2ObjectOpenHashMap0.rehash(785);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      char2ObjectOpenHashMap0.remove((Object) '\u0000');
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim((-4257));
      assertTrue(boolean0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('E');
      assertNotNull(character0);
      assertEquals('E', (char)character0);
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.put(character0, character0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 910248734 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      char2ObjectOpenHashMap0.key = charArray0;
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.remove((Object) '\u0000');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      HashMap<Character, Char2ObjectOpenHashMap<Character>> hashMap0 = new HashMap<Character, Char2ObjectOpenHashMap<Character>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.size = (-430);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals((-430), char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      CharSet charSet0 = char2ObjectOpenHashMap0.keys;
      assertNull(charSet0);
      
      int int0 = 6;
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.trim(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 32 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char char0 = 'T';
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.size = (-2688);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-2688), char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character2 = Character.valueOf('T');
      assertNotNull(character2);
      assertEquals('T', (char)character2);
      
      Character character3 = char2ObjectOpenHashMap0.put(character2, character2);
      assertNotNull(character3);
      assertEquals('T', (char)character3);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-2688), char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character4 = Character.valueOf('T');
      assertNotNull(character4);
      assertEquals('T', (char)character4);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      char2ObjectOpenHashMap0.putAll(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-2688), char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      int int0 = char2ObjectOpenHashMap0.shiftKeys(19);
      assertEquals(19, int0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-2688), char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character5 = char2ObjectOpenHashMap0.put(character4, character2);
      assertNotNull(character5);
      assertEquals('T', (char)character5);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals((-2688), char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 32 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '\u0000', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      BiConsumer<Character, Character> biConsumer0 = (BiConsumer<Character, Character>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Character character0 = Character.valueOf('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.get(character0);
      assertNull(character1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '\u0000', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character2 = char2ObjectOpenHashMap0.remove('{');
      assertNull(character2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '\u0000', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      
      BiConsumer<Character, Character> biConsumer0 = (BiConsumer<Character, Character>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      char2ObjectOpenHashMap0.forEach(biConsumer0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      Character character1 = Character.valueOf('=');
      assertNotNull(character1);
      assertEquals('=', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap0.get(character1);
      assertNull(character2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(character1.equals((Object)character0));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'k';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      
      Character character0 = char2ObjectOpenHashMap0.get((Character) 'k');
      assertNull(character0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      ObjectCollection<Character> objectCollection0 = char2ObjectOpenHashMap0.values();
      assertNotNull(objectCollection0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      int int0 = char2ObjectOpenHashMap0.growthFactor();
      assertEquals(16, int0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      BiFunction<Character, Character, Character> biFunction0 = (BiFunction<Character, Character, Character>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Character character1 = char2ObjectOpenHashMap0.merge(character0, character0, biFunction0);
      assertNotNull(character1);
      assertEquals('L', (char)character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character2 = char2ObjectOpenHashMap0.get('L');
      assertNotNull(character2);
      assertEquals('L', (char)character2);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      ObjectCollection<Character> objectCollection1 = char2ObjectOpenHashMap0.values();
      assertNotNull(objectCollection1);
      assertSame(objectCollection1, objectCollection0);
      assertTrue(objectCollection1.contains('L'));
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      ObjectCollection<Character> objectCollection0 = char2ObjectOpenHashMap0.values();
      assertNotNull(objectCollection0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      ObjectCollection<Character> objectCollection1 = char2ObjectOpenHashMap0.values();
      assertNotNull(objectCollection1);
      assertSame(objectCollection1, objectCollection0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      boolean boolean1 = char2ObjectOpenHashMap1.equals(char2ObjectOpenHashMap0);
      assertTrue(boolean1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Character character0 = Character.valueOf('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char char0 = 'g';
      Character character2 = Character.valueOf('g');
      assertNotNull(character2);
      assertEquals('g', (char)character2);
      assertFalse(character2.equals((Object)character0));
      
      char2ObjectOpenHashMap0.rehash(2458);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char char1 = 'k';
      Character character3 = Character.valueOf('k');
      assertNotNull(character3);
      assertEquals('k', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys(2458);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2458 out of bounds for length 2458
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      BiConsumer<Character, Character> biConsumer0 = (BiConsumer<Character, Character>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      char2ObjectOpenHashMap0.forEach(biConsumer0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.remove((Object) character0);
      assertNull(character1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim(0);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.used = null;
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectMap.FastEntrySet<Character> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap0.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectMap_FastEntrySet0.size());
      assertTrue(char2ObjectMap_FastEntrySet0.isEmpty());
      
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.put('K', character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character2 = char2ObjectOpenHashMap0.remove('k');
      assertNotNull(character2);
      assertEquals('k', (char)character2);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = char2ObjectOpenHashMap0.remove('A');
      assertNull(character0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char char0 = 'T';
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      char2ObjectOpenHashMap1.size = (-1299);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals((-1299), char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.putAll(char2ObjectOpenHashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap$MapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'k';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = '8';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'o';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) 'o';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap1.size());
      
      CharSet charSet0 = char2ObjectOpenHashMap0.keySet();
      assertNotNull(charSet0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(charSet0.isEmpty());
      assertEquals(3, charSet0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap1);
      assertNotNull(char2ObjectOpenHashMap2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap1.size());
      assertEquals(3, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      String string0 = char2ObjectOpenHashMap2.toString();
      assertNotNull(string0);
      assertEquals("{8=>o, o=>null, {=>o}", string0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap1.size());
      assertEquals(3, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      Character character1 = Character.valueOf((char) characterArray0[2]);
      assertNotNull(character1);
      assertEquals('{', (char)character1);
      assertEquals(4, characterArray0.length);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('R');
      assertNotNull(character2);
      assertEquals('R', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = char2ObjectOpenHashMap2.put(character0, character2);
      assertNull(character3);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap1.size());
      assertEquals(4, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap3);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertEquals(3, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      
      Character character4 = char2ObjectOpenHashMap3.put('n', (Character) null);
      assertNull(character4);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      
      char2ObjectOpenHashMap3.hashCode();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = char2ObjectOpenHashMap0.remove('e');
      assertNull(character0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character1 = Character.valueOf('b');
      assertNotNull(character1);
      assertEquals('b', (char)character1);
      
      Character character2 = char2ObjectOpenHashMap0.put('n', character1);
      assertNull(character2);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Character character3 = Character.valueOf('n');
      assertNotNull(character3);
      assertEquals('n', (char)character3);
      assertFalse(character3.equals((Object)character1));
      
      Character character4 = hashMap0.put((Character) null, character3);
      assertNull(character4);
      assertFalse(character3.equals((Object)character1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      
      Character character5 = Character.valueOf(')');
      assertNotNull(character5);
      assertEquals(')', (char)character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      
      Character character6 = char2ObjectOpenHashMap2.put('V', character3);
      assertNull(character6);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(character3.equals((Object)character5));
      assertFalse(character3.equals((Object)character1));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap2.size());
      
      boolean boolean0 = char2ObjectOpenHashMap2.containsKey('e');
      assertFalse(boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap2.size());
      
      char2ObjectOpenHashMap0.rehash(14);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character7 = Character.valueOf('n');
      assertNotNull(character7);
      assertEquals('n', (char)character7);
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      
      Character character8 = Character.valueOf('e');
      assertNotNull(character8);
      assertEquals('e', (char)character8);
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character7));
      
      Character character9 = Character.valueOf('e');
      assertNotNull(character9);
      assertEquals('e', (char)character9);
      assertFalse(character9.equals((Object)character7));
      assertFalse(character9.equals((Object)character5));
      assertFalse(character9.equals((Object)character3));
      assertFalse(character9.equals((Object)character1));
      
      Character character10 = char2ObjectOpenHashMap0.put(character9, character9);
      assertNull(character10);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(character9.equals((Object)character7));
      assertFalse(character9.equals((Object)character5));
      assertFalse(character9.equals((Object)character3));
      assertFalse(character9.equals((Object)character1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap2.hashCode();
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap2.size());
      
      int int0 = char2ObjectOpenHashMap1.growthFactor();
      assertEquals(16, int0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap2.clone();
      assertNotNull(char2ObjectOpenHashMap3);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap3);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap2.size());
      
      Character character11 = Character.valueOf('b');
      assertNotNull(character11);
      assertEquals('b', (char)character11);
      assertFalse(character11.equals((Object)character8));
      assertFalse(character11.equals((Object)character3));
      assertFalse(character11.equals((Object)character7));
      assertFalse(character11.equals((Object)character9));
      assertFalse(character11.equals((Object)character5));
      
      Character character12 = char2ObjectOpenHashMap2.remove((Object) character11);
      assertNull(character12);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(character11.equals((Object)character8));
      assertFalse(character11.equals((Object)character3));
      assertFalse(character11.equals((Object)character7));
      assertFalse(character11.equals((Object)character9));
      assertFalse(character11.equals((Object)character5));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap3);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap2.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[1];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('u');
      assertNotNull(character0);
      assertEquals('u', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.putIfAbsent(character0, character0);
      assertNull(character1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      Character character2 = char2ObjectOpenHashMap0.remove((Object) '\u0000');
      assertNull(character2);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = char2ObjectOpenHashMap0.remove((Object) '\u0000');
      assertNull(character0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue(char2ObjectOpenHashMap1);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('A');
      assertNotNull(character0);
      assertEquals('A', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys(2185);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2185 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put('K', character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.rehash(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1977866253 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 217;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(217);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap2.entrySet();
      assertNotNull(objectSet0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      char2ObjectOpenHashMap0.putAll(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Character character0 = char2ObjectOpenHashMap0.remove(')');
      assertNull(character0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      CharSet charSet0 = char2ObjectOpenHashMap0.keySet();
      assertNotNull(charSet0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, charSet0.size());
      assertTrue(charSet0.isEmpty());
      
      Character character1 = Character.valueOf('%');
      assertNotNull(character1);
      assertEquals('%', (char)character1);
      
      Character character2 = char2ObjectOpenHashMap1.put(')', character1);
      assertNull(character2);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      boolean boolean0 = char2ObjectOpenHashMap1.isEmpty();
      assertFalse(boolean0);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      CharSet charSet1 = char2ObjectOpenHashMap0.keySet();
      assertNotNull(charSet1);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertSame(charSet1, charSet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, charSet1.size());
      assertTrue(charSet1.isEmpty());
      
      ObjectCollection<Character> objectCollection0 = char2ObjectOpenHashMap1.values();
      assertNotNull(objectCollection0);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertFalse(objectCollection0.contains(')'));
      assertTrue(objectCollection0.contains(character1));
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      int int1 = char2ObjectOpenHashMap1.growthFactor();
      assertEquals(16, int1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(int1 == int0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      int int2 = char2ObjectOpenHashMap1.growthFactor();
      assertEquals(16, int2);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      Character character3 = Character.valueOf(')');
      assertNotNull(character3);
      assertEquals(')', (char)character3);
      assertFalse(character3.equals((Object)character1));
      
      boolean boolean1 = char2ObjectOpenHashMap0.containsValue(character3);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(character3.equals((Object)character1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 8);
      int int3 = 212;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = null;
      try {
        char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Character>(212, 428.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      CharSet charSet0 = char2ObjectOpenHashMap0.keySet();
      assertNotNull(charSet0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(charSet0.isEmpty());
      assertEquals(0, charSet0.size());
      
      CharSet charSet1 = char2ObjectOpenHashMap0.keySet();
      assertNotNull(charSet1);
      assertSame(charSet1, charSet0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(charSet1.isEmpty());
      assertEquals(0, charSet1.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = char2ObjectOpenHashMap0.remove('e');
      assertNull(character0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character1 = Character.valueOf('b');
      assertNotNull(character1);
      assertEquals('b', (char)character1);
      
      Character character2 = char2ObjectOpenHashMap0.put('n', character1);
      assertNull(character2);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Character character3 = Character.valueOf('-');
      assertNotNull(character3);
      assertEquals('-', (char)character3);
      assertFalse(character3.equals((Object)character1));
      
      Character character4 = hashMap0.put((Character) null, character3);
      assertNull(character4);
      assertFalse(character3.equals((Object)character1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      
      CharSet charSet0 = char2ObjectOpenHashMap3.keySet();
      assertNotNull(charSet0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertEquals(1, charSet0.size());
      assertFalse(charSet0.isEmpty());
      
      Character character5 = Character.valueOf('N');
      assertNotNull(character5);
      assertEquals('N', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap4 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap3);
      assertNotNull(char2ObjectOpenHashMap4);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertFalse(char2ObjectOpenHashMap4.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertEquals(1, char2ObjectOpenHashMap4.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap5 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap5);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap4);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap5.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap5.size());
      assertEquals(16, char2ObjectOpenHashMap5.growthFactor());
      assertTrue(char2ObjectOpenHashMap5.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap2.trim(18);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap5));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap5));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap4));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap5);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BiConsumer<Character, Char2ObjectOpenHashMap<Character>> biConsumer0 = (BiConsumer<Character, Char2ObjectOpenHashMap<Character>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Character character0 = Character.valueOf('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '%';
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'%', '%', '%'}, charArray0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      BiConsumer<Character, Character> biConsumer1 = (BiConsumer<Character, Character>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      char2ObjectOpenHashMap0.forEach(biConsumer1);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'%', '%', '%'}, charArray0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim((int) characterArray0[0]);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'%', '%', '%'}, charArray0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.equals(char2ObjectOpenHashMap1);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = char2ObjectOpenHashMap0.remove('e');
      assertNull(character0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character1 = Character.valueOf('b');
      assertNotNull(character1);
      assertEquals('b', (char)character1);
      
      Character character2 = char2ObjectOpenHashMap0.put('n', character1);
      assertNull(character2);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Character character3 = Character.valueOf('-');
      assertNotNull(character3);
      assertEquals('-', (char)character3);
      assertFalse(character3.equals((Object)character1));
      
      Character character4 = hashMap0.put((Character) null, character3);
      assertNull(character4);
      assertFalse(character3.equals((Object)character1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      
      CharSet charSet0 = char2ObjectOpenHashMap3.keySet();
      assertNotNull(charSet0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(1, charSet0.size());
      assertFalse(charSet0.isEmpty());
      
      Character character5 = Character.valueOf('N');
      assertNotNull(character5);
      assertEquals('N', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      
      Character character6 = char2ObjectOpenHashMap1.put(character5, character5);
      assertNull(character6);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Character character7 = char2ObjectOpenHashMap1.put('n', character3);
      assertNotNull(character7);
      assertEquals('b', (char)character7);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(character3.equals((Object)character5));
      assertFalse(character3.equals((Object)character1));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character3));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(2, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.used = null;
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.remove('\u0017');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '5';
      charArray0[2] = '8';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '5';
      characterArray0[1] = (Character) '{';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) '5';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '5', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '5', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      boolean boolean1 = char2ObjectOpenHashMap0.rehash();
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '5', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      Character character1 = Character.valueOf('v');
      assertNotNull(character1);
      assertEquals('v', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap0.put(' ', character1);
      assertNull(character2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '5', '8', ':'}, charArray0);
      assertFalse(character1.equals((Object)character0));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(5, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys(1223);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1223 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2480);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.size = (-3);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals((-3), char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsKey('n');
      assertFalse(boolean0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals((-3), char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.size = (-3);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals((-3), char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      Character character1 = Character.valueOf('');
      assertNotNull(character1);
      assertEquals('', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap0.put(':', character1);
      assertNull(character2);
      assertFalse(character1.equals((Object)character0));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals((-2), char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      String string0 = char2ObjectOpenHashMap1.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Character character0 = Character.valueOf(']');
      assertNotNull(character0);
      assertEquals(']', (char)character0);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>(0, 1.0F);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap1.put('%', char2ObjectOpenHashMap0);
      assertNull(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      Object object0 = char2ObjectOpenHashMap2.get(character0);
      assertNull(object0);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue((Object) null);
      assertFalse(boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap4 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(256);
      assertNotNull(char2ObjectOpenHashMap4);
      assertFalse(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      
      boolean boolean1 = char2ObjectOpenHashMap1.isEmpty();
      assertFalse(boolean1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(boolean1 == boolean0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap4);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap5 = char2ObjectOpenHashMap4.clone();
      assertNotNull(char2ObjectOpenHashMap5);
      assertFalse(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      assertEquals(0, char2ObjectOpenHashMap5.size());
      assertTrue(char2ObjectOpenHashMap5.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap5.growthFactor());
      assertTrue(char2ObjectOpenHashMap5.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap6 = null;
      try {
        char2ObjectOpenHashMap6 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Char2ObjectMap<Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap5, (float) (-2492));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'o';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) 'o';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      Character character1 = Character.valueOf((char) characterArray0[3]);
      assertNotNull(character1);
      assertEquals('o', (char)character1);
      assertEquals(4, characterArray0.length);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap0.put('M', character1);
      assertNull(character2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(character1.equals((Object)character0));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(5, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean1 = char2ObjectOpenHashMap0.containsKey('o');
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(5, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      ObjectCollection<Character> objectCollection0 = char2ObjectOpenHashMap0.values();
      assertNotNull(objectCollection0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(objectCollection0.contains('\\'));
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      CharSet charSet0 = char2ObjectOpenHashMap0.keySet();
      assertNotNull(charSet0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertTrue(charSet0.isEmpty());
      assertEquals(0, charSet0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 9);
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[1] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[2] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[3] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[4] = char2ObjectOpenHashMap0;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Char2ObjectMap.FastEntrySet<Char2ObjectOpenHashMap<Character>> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap1.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertFalse(char2ObjectMap_FastEntrySet0.contains(char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(0, char2ObjectMap_FastEntrySet0.size());
      assertTrue(char2ObjectMap_FastEntrySet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '5';
      charArray0[2] = '8';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      charArray0[1] = '5';
      characterArray0[1] = (Character) '{';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) '5';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '5', '8', ':'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '5', '8', ':'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      char2ObjectOpenHashMap1.clear();
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      CharSet charSet0 = char2ObjectOpenHashMap1.keySet();
      assertNotNull(charSet0);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(charSet0.isEmpty());
      assertEquals(0, charSet0.size());
      
      char2ObjectOpenHashMap1.defaultReturnValue(characterArray0[0]);
      assertEquals(4, characterArray0.length);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Character character0 = Character.valueOf('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap1.put(character0, character0);
      assertNull(character1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      char2ObjectOpenHashMap0.hashCode();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '5', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      int int0 = char2ObjectOpenHashMap0.growthFactor();
      assertEquals(16, int0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', '5', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim(0);
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put('K', character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = '8';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'o';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) 'o';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      Character character1 = Character.valueOf((char) characterArray0[3]);
      assertNotNull(character1);
      assertEquals('o', (char)character1);
      assertEquals(4, characterArray0.length);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap0.put('M', character1);
      assertNull(character2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(character1.equals((Object)character0));
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean1 = char2ObjectOpenHashMap0.containsKey('#');
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      ObjectCollection<Character> objectCollection0 = char2ObjectOpenHashMap0.values();
      assertNotNull(objectCollection0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(objectCollection0.contains('o'));
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      CharSet charSet0 = char2ObjectOpenHashMap0.keySet();
      assertNotNull(charSet0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(charSet0.isEmpty());
      assertEquals(0, charSet0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 9);
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\\';
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(charArray1, char2ObjectOpenHashMapArray0, (float) characterArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim((-10));
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('D');
      assertNotNull(character0);
      assertEquals('D', (char)character0);
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.put('D', character0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1298575173 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'o';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) 'o';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      Character character1 = Character.valueOf((char) characterArray0[3]);
      assertNotNull(character1);
      assertEquals('o', (char)character1);
      assertEquals(4, characterArray0.length);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap0.put('M', character1);
      assertNull(character2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(character1.equals((Object)character0));
      assertEquals(5, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean1 = char2ObjectOpenHashMap0.containsKey('#');
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      ObjectCollection<Character> objectCollection0 = char2ObjectOpenHashMap0.values();
      assertNotNull(objectCollection0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(objectCollection0.contains('\\'));
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      CharSet charSet0 = char2ObjectOpenHashMap0.keySet();
      assertNotNull(charSet0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertEquals(0, charSet0.size());
      assertTrue(charSet0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 9);
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[1] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[2] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[3] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[4] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[5] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[6] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[7] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[8] = char2ObjectOpenHashMap0;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(charArray0, char2ObjectOpenHashMapArray0, (float) characterArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'q';
      charArray0[2] = '8';
      charArray0[3] = '\u0000';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'q', '8', '\u0000'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Function<Character, Character> function0 = Function.identity();
      assertNotNull(function0);
      
      Character character0 = char2ObjectOpenHashMap0.computeIfAbsent((Character) 'q', function0);
      assertNotNull(character0);
      assertEquals('q', (char)character0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'q', '8', '\u0000'}, charArray0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character1 = Character.valueOf('q');
      assertNotNull(character1);
      assertEquals('q', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'o';
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'o', '\u0000', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = char2ObjectOpenHashMap0.remove((Object) '\u0000');
      assertNull(character0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'o', '\u0000', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '{';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) '{';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) 'o';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '{', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '{', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      char2ObjectOpenHashMap1.clear();
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      boolean boolean1 = char2ObjectOpenHashMap1.rehash();
      assertTrue(boolean1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Character character0 = Character.valueOf('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      int int0 = 19;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(19);
      assertNotNull(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      
      boolean boolean2 = char2ObjectOpenHashMap2.isEmpty();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap3));
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap4 = null;
      try {
        char2ObjectOpenHashMap4 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((-963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The expected number of elements must be nonnegative
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(1);
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = Character.valueOf('u');
      assertNotNull(character0);
      assertEquals('u', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character2 = Character.valueOf('f');
      assertNotNull(character2);
      assertEquals('f', (char)character2);
      assertFalse(character2.equals((Object)character0));
      
      Character character3 = char2ObjectOpenHashMap0.put(character2, character2);
      assertNull(character3);
      assertFalse(character2.equals((Object)character0));
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      int int0 = char2ObjectOpenHashMap0.shiftKeys(1);
      assertEquals(1, int0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(2, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      CharSet charSet0 = char2ObjectOpenHashMap0.keys;
      assertNull(charSet0);
      
      char2ObjectOpenHashMap0.keys = null;
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character2 = Character.valueOf('T');
      assertNotNull(character2);
      assertEquals('T', (char)character2);
      
      Character character3 = char2ObjectOpenHashMap0.put(character2, character0);
      assertNotNull(character3);
      assertEquals('T', (char)character3);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.hashCode();
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      int int0 = char2ObjectOpenHashMap0.growthFactor();
      assertEquals(16, int0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      int int0 = 1;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) null, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = char2ObjectOpenHashMap0.remove('e');
      assertNull(character0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character1 = Character.valueOf('b');
      assertNotNull(character1);
      assertEquals('b', (char)character1);
      
      Character character2 = char2ObjectOpenHashMap0.get(character1);
      assertNull(character2);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character3 = Character.valueOf('b');
      assertNotNull(character3);
      assertEquals('b', (char)character3);
      
      Character character4 = Character.valueOf('@');
      assertNotNull(character4);
      assertEquals('@', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      
      Character character5 = char2ObjectOpenHashMap0.get(character4);
      assertNull(character5);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(1);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      Character character6 = Character.valueOf('b');
      assertNotNull(character6);
      assertEquals('b', (char)character6);
      assertFalse(character6.equals((Object)character4));
      
      Character character7 = char2ObjectOpenHashMap1.put('@', character6);
      assertNull(character7);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(character6.equals((Object)character4));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character3;
      characterArray0[1] = null;
      characterArray0[2] = null;
      char2ObjectOpenHashMap1.value = characterArray0;
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      boolean boolean0 = char2ObjectOpenHashMap1.containsKey('}');
      assertFalse(boolean0);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      char2ObjectOpenHashMap1.clear();
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      ObjectCollection<Character> objectCollection0 = char2ObjectOpenHashMap1.values();
      assertNotNull(objectCollection0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertFalse(objectCollection0.contains(character4));
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      char2ObjectOpenHashMap0.clear();
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      CharSet charSet0 = char2ObjectOpenHashMap1.keySet();
      assertNotNull(charSet0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(charSet0.isEmpty());
      assertEquals(0, charSet0.size());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character2 = char2ObjectOpenHashMap0.get(character0);
      assertNotNull(character2);
      assertEquals('r', (char)character2);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsKey('|');
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue((Object) null);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character2 = char2ObjectOpenHashMap0.get(character0);
      assertNotNull(character2);
      assertEquals('f', (char)character2);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) '{';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) 'o';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      char2ObjectOpenHashMap1.clear();
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap2);
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      boolean boolean1 = char2ObjectOpenHashMap1.rehash();
      assertTrue(boolean1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Character character0 = Character.valueOf('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = Character.valueOf('v');
      assertNotNull(character1);
      assertEquals('v', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap1.put(' ', character1);
      assertNull(character2);
      assertFalse(character1.equals((Object)character0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      int int0 = char2ObjectOpenHashMap0.maxFill;
      assertEquals(6, int0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      
      Character character3 = Character.valueOf(':');
      assertNotNull(character3);
      assertEquals(':', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      
      Character character4 = Character.valueOf('n');
      assertNotNull(character4);
      assertEquals('n', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      
      Character character5 = char2ObjectOpenHashMap0.put((Character) 'o', character4);
      assertNotNull(character5);
      assertEquals('{', (char)character5);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Character character0 = Character.valueOf('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.replace(character0, character0, (Character) null);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 1);
      int int0 = 18;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(18);
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap0;
      float float0 = (-2716.22F);
      boolean boolean0 = char2ObjectOpenHashMap0.trim(18);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((char[]) null, char2ObjectOpenHashMapArray0, (-2716.22F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Object object0 = char2ObjectOpenHashMap0.get('f');
      assertNull(object0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = hashMap0.remove((Object) null);
      assertNull(character0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Char2ObjectMap.FastEntrySet<Char2ObjectOpenHashMap<Character>> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap0.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectMap_FastEntrySet0.size());
      assertTrue(char2ObjectMap_FastEntrySet0.isEmpty());
      
      Character character1 = Character.valueOf('Z');
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      Character character2 = Character.valueOf('Z');
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(hashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      CharSet charSet0 = char2ObjectOpenHashMap1.keySet();
      assertNotNull(charSet0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(0, charSet0.size());
      assertTrue(charSet0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      char2ObjectOpenHashMap2.defaultReturnValue(character2);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      Character character3 = char2ObjectOpenHashMap2.put(character2, character1);
      assertNotNull(character3);
      assertEquals('Z', (char)character3);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap3);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      
      Character character4 = Character.valueOf('f');
      assertNotNull(character4);
      assertEquals('f', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      
      Character character5 = char2ObjectOpenHashMap3.remove((Object) character4);
      assertNull(character5);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap4 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Char2ObjectMap<Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap0, 0.5F);
      assertNotNull(char2ObjectOpenHashMap4);
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap5 = char2ObjectOpenHashMap4.get(',');
      assertNull(char2ObjectOpenHashMap5);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      
      char2ObjectOpenHashMap0.growthFactor(95);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      int int0 = char2ObjectOpenHashMap0.growthFactor();
      assertEquals(16, int0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap6 = char2ObjectOpenHashMap2.clone();
      assertNotNull(char2ObjectOpenHashMap6);
      assertTrue(char2ObjectOpenHashMap6.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap6.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap6.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap6, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap6, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap6, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap6);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap6);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(char2ObjectOpenHashMap6.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap6.size());
      assertEquals(16, char2ObjectOpenHashMap6.growthFactor());
      assertTrue(char2ObjectOpenHashMap6.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      String string0 = char2ObjectOpenHashMap1.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      boolean boolean1 = char2ObjectOpenHashMap0.rehash();
      assertTrue(boolean1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf(']');
      assertNotNull(character0);
      assertEquals(']', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(',', character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character2 = Character.valueOf(']');
      assertNotNull(character2);
      assertEquals(']', (char)character2);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap1.remove((Object) character2);
      assertNull(char2ObjectOpenHashMap2);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys((-1968));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1968 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('<');
      assertNotNull(character0);
      assertEquals('<', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      char2ObjectOpenHashMap0.hashCode();
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.hashCode();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.size = 33;
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(33, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 32 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(4195);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Object object0 = char2ObjectOpenHashMap0.get('f');
      assertNull(object0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = hashMap0.remove((Object) null);
      assertNull(character0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Char2ObjectMap.FastEntrySet<Char2ObjectOpenHashMap<Character>> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap0.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectMap_FastEntrySet0.size());
      assertTrue(char2ObjectMap_FastEntrySet0.isEmpty());
      
      Character character1 = Character.valueOf('R');
      assertNotNull(character1);
      assertEquals('R', (char)character1);
      
      Character character2 = hashMap0.put(character1, (Character) null);
      assertNull(character2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(hashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      char2ObjectOpenHashMap1.rehash(2998);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      ObjectCollection<Character> objectCollection0 = char2ObjectOpenHashMap1.values();
      assertNotNull(objectCollection0);
      assertFalse(objectCollection0.contains('f'));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Character character3 = Character.valueOf('?');
      assertNotNull(character3);
      assertEquals('?', (char)character3);
      assertFalse(character3.equals((Object)character1));
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap0.replace(character3, char2ObjectOpenHashMap1);
      assertNull(char2ObjectOpenHashMap2);
      assertFalse(character3.equals((Object)character1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      CharSet charSet0 = char2ObjectOpenHashMap1.keys;
      assertNull(charSet0);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap1);
      assertNotNull(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      
      Character character4 = Character.valueOf('C');
      assertNotNull(character4);
      assertEquals('C', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.rehash((-109));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -109
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character2 = Character.valueOf('T');
      assertNotNull(character2);
      assertEquals('T', (char)character2);
      
      char2ObjectOpenHashMap0.rehash(4373);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      char2ObjectOpenHashMap0.putAll(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      int int0 = char2ObjectOpenHashMap0.shiftKeys(19);
      assertEquals(19, int0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character3 = char2ObjectOpenHashMap0.put(character2, character0);
      assertNotNull(character3);
      assertEquals('T', (char)character3);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      int int1 = char2ObjectOpenHashMap0.growthFactor();
      assertEquals(16, int1);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(int1 == int0);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      // Undeclared exception!
      char2ObjectOpenHashMap0.remove((Object) character0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys((-821));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -821 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.putIfAbsent(character0, character0);
      assertNull(character1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys(33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 33 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      char char0 = ':';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) '{';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) 'o';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', ':'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(4, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      char2ObjectOpenHashMap1.clear();
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      boolean boolean1 = char2ObjectOpenHashMap1.rehash();
      assertTrue(boolean1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Character character0 = Character.valueOf('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      assertFalse(character0.equals((Object)char0));
      
      Character character1 = Character.valueOf('v');
      assertNotNull(character1);
      assertEquals('v', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      
      Character character2 = char2ObjectOpenHashMap1.put(' ', character1);
      assertNull(character2);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.shiftKeys(1223);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1223 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Character, Char2ObjectOpenHashMap<Character>> hashMap0 = new HashMap<Character, Char2ObjectOpenHashMap<Character>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(hashMap0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      boolean boolean1 = char2ObjectOpenHashMap0.rehash();
      assertTrue(boolean1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      
      Character character1 = Character.valueOf('h');
      assertNotNull(character1);
      assertEquals('h', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = char2ObjectOpenHashMap2.put(character0, character1);
      assertNull(character2);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(character1.equals((Object)character0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      
      int int0 = char2ObjectOpenHashMap2.size();
      assertEquals(1, int0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458);
      assertNotNull(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertEquals(0, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap4 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap4);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      
      char2ObjectOpenHashMap4.putAll(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap5 = null;
      try {
        char2ObjectOpenHashMap5 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Char2ObjectMap<Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap3, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 2458;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char char0 = ']';
      Character character0 = Character.valueOf(']');
      assertNotNull(character0);
      assertEquals(']', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(']', character0);
      assertNull(character1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char char1 = '#';
      char char2 = 't';
      Character character2 = Character.valueOf('t');
      assertNotNull(character2);
      assertEquals('t', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)char1));
      assertFalse(character2.equals((Object)character0));
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue(character0);
      assertTrue(boolean0);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)char1));
      assertFalse(character0.equals((Object)char2));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      int int1 = 96739;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      boolean boolean1 = char2ObjectOpenHashMap1.isEmpty();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap3 = null;
      try {
        char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Char2ObjectMap<Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap2, 1588.7594F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      Character character1 = Character.valueOf('Z');
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(hashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      CharSet charSet0 = char2ObjectOpenHashMap1.keySet();
      assertNotNull(charSet0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(charSet0.isEmpty());
      assertEquals(0, charSet0.size());
      
      char2ObjectOpenHashMap1.defaultReturnValue(character1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Character character2 = char2ObjectOpenHashMap1.put(character1, character0);
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      char2ObjectOpenHashMap1.hashCode();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      
      int int0 = char2ObjectOpenHashMap1.growthFactor();
      assertEquals(16, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      int int0 = char2ObjectOpenHashMap0.growthFactor();
      assertEquals(16, int0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char2ObjectOpenHashMap0.hashCode();
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[3];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = char2ObjectOpenHashMap0.remove((Object) '\u0000');
      assertNull(character0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(4195);
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Object object0 = char2ObjectOpenHashMap0.get('f');
      assertNull(object0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = hashMap0.remove((Object) null);
      assertNull(character0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Char2ObjectMap.FastEntrySet<Char2ObjectOpenHashMap<Character>> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap0.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectMap_FastEntrySet0.size());
      assertTrue(char2ObjectMap_FastEntrySet0.isEmpty());
      
      Character character1 = Character.valueOf('Z');
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      Character character2 = Character.valueOf('Z');
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(hashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      CharSet charSet0 = char2ObjectOpenHashMap1.keySet();
      assertNotNull(charSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(0, charSet0.size());
      assertTrue(charSet0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      
      char2ObjectOpenHashMap2.defaultReturnValue(character2);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      
      Character character3 = char2ObjectOpenHashMap2.put(character2, character1);
      assertNotNull(character3);
      assertEquals('Z', (char)character3);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Character>(hashMap0);
      assertNotNull(char2ObjectOpenHashMap3);
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      
      Character character4 = Character.valueOf('f');
      assertNotNull(character4);
      assertEquals('f', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      
      Character character5 = char2ObjectOpenHashMap3.remove((Object) character4);
      assertNull(character5);
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      
      char2ObjectOpenHashMap1.hashCode();
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      int int0 = char2ObjectOpenHashMap1.growthFactor();
      assertEquals(16, int0);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      boolean boolean1 = char2ObjectOpenHashMap0.rehash();
      assertTrue(boolean1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf(']');
      assertNotNull(character0);
      assertEquals(']', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(',', character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys((-1968));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1968 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.rehash();
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Char2ObjectMap<Char2ObjectOpenHashMap<Character>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Map<? extends Character, ? extends Char2ObjectOpenHashMap<Character>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      BiConsumer<Character, Char2ObjectOpenHashMap<Character>> biConsumer0 = (BiConsumer<Character, Char2ObjectOpenHashMap<Character>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      char2ObjectOpenHashMap1.forEach(biConsumer0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = null;
      try {
        char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Map<? extends Character, ? extends Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap1, 724.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>(char2ObjectOpenHashMap0);
      assertNotNull(hashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.putAll(hashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      HashMap<Character, Character> hashMap1 = new HashMap<Character, Character>();
      assertNotNull(hashMap1);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(hashMap1, 0.12916833F);
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap1);
      assertNotNull(char2ObjectOpenHashMap2);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap2);
      assertNotNull(char2ObjectOpenHashMap3);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.shiftKeys(30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 30 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character2 = Character.valueOf('T');
      assertNotNull(character2);
      assertEquals('T', (char)character2);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      char2ObjectOpenHashMap0.putAll(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      int int0 = char2ObjectOpenHashMap0.shiftKeys(19);
      assertEquals(19, int0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character3 = char2ObjectOpenHashMap0.put(character2, character0);
      assertNotNull(character3);
      assertEquals('T', (char)character3);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      int int1 = char2ObjectOpenHashMap0.hashCode();
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(int1 == int0);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      int int2 = char2ObjectOpenHashMap0.growthFactor();
      assertEquals(16, int2);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(int2 == int0);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character4 = char2ObjectOpenHashMap0.get(character2);
      assertNotNull(character4);
      assertEquals('T', (char)character4);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.shiftKeys((-2725));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2725 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      String string0 = char2ObjectOpenHashMap1.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.rehash();
      assertTrue(boolean0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf(']');
      assertNotNull(character0);
      assertEquals(']', (char)character0);
      
      boolean boolean1 = char2ObjectOpenHashMap1.isEmpty();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      
      char2ObjectOpenHashMap2.growthFactor(2458);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim(38);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Map<? extends Character, ? extends Char2ObjectOpenHashMap<Character>>) null, 166.03116F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsKey('n');
      assertFalse(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(460);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Char2ObjectMap<Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap1);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      int int0 = 3411;
      int int1 = char2ObjectOpenHashMap1.size();
      assertEquals(0, int1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(int1 == int0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      Char2ObjectMap.FastEntrySet<Char2ObjectOpenHashMap<Character>> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap1.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertFalse(char2ObjectMap_FastEntrySet0.contains(char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectMap_FastEntrySet0.isEmpty());
      assertEquals(0, char2ObjectMap_FastEntrySet0.size());
      
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      ObjectCollection<Char2ObjectOpenHashMap<Character>> objectCollection0 = char2ObjectOpenHashMap2.values();
      assertNotNull(objectCollection0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertFalse(objectCollection0.contains(char2ObjectOpenHashMap0));
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      Character character1 = char2ObjectOpenHashMap0.get(character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character2 = Character.valueOf('?');
      assertNotNull(character2);
      assertEquals('?', (char)character2);
      assertFalse(character2.equals((Object)character0));
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = null;
      try {
        char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = null;
      try {
        char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, (Character[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2176);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(2185);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      String string0 = char2ObjectOpenHashMap0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap1);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap0.put(')', char2ObjectOpenHashMap2);
      assertNull(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap4 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap4);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap1);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      
      boolean boolean0 = char2ObjectOpenHashMap2.trim((-2578));
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap4);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0, 2078.7485F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.isEmpty();
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 2458;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      boolean boolean1 = char2ObjectOpenHashMap1.isEmpty();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap1.clone();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      
      char2ObjectOpenHashMap2.defRetValue = char2ObjectOpenHashMap0;
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertTrue(char2ObjectOpenHashMap2.defRetValue.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.defRetValue.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.defRetValue.rehash());
      assertEquals(0, char2ObjectOpenHashMap2.defRetValue.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap3 = null;
      try {
        char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((Char2ObjectMap<Char2ObjectOpenHashMap<Character>>) char2ObjectOpenHashMap2, (float) 2458);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) 'f';
      characterArray0[1] = (Character) 'f';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      Character character0 = char2ObjectOpenHashMap0.get('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      Character character1 = char2ObjectOpenHashMap0.get((Character) 'f');
      assertNotNull(character1);
      assertEquals('f', (char)character1);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      Character character2 = char2ObjectOpenHashMap0.put('f', character0);
      assertNotNull(character2);
      assertEquals('f', (char)character2);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      Character character3 = Character.valueOf('H');
      assertNotNull(character3);
      assertEquals('H', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      
      int int0 = 1368;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(1368, (float) character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = char2ObjectOpenHashMap0.get('S');
      assertNull(character0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character character1 = hashMap0.put(character0, character0);
      assertNull(character1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Character character2 = hashMap0.put(character0, character0);
      assertNotNull(character2);
      assertEquals('9', (char)character2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      int int0 = 4195;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(4195);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Object object0 = char2ObjectOpenHashMap0.get('f');
      assertNull(object0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.remove((Object) null, (Object) character2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractChar2ObjectFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.trim((-835));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2114883783 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2185);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(2175);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      String string0 = char2ObjectOpenHashMap0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap1);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap4 = char2ObjectOpenHashMap3.put('k', char2ObjectOpenHashMap2);
      assertNull(char2ObjectOpenHashMap4);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap5 = char2ObjectOpenHashMap2.clone();
      assertNotNull(char2ObjectOpenHashMap5);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap1);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap5.size());
      assertTrue(char2ObjectOpenHashMap5.rehash());
      assertEquals(16, char2ObjectOpenHashMap5.growthFactor());
      assertTrue(char2ObjectOpenHashMap5.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap2.trim(79806248);
      assertTrue(boolean0);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap5));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap5));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap5);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(4195);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Object object0 = char2ObjectOpenHashMap0.get('f');
      assertNull(object0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = hashMap0.remove((Object) null);
      assertNull(character0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Char2ObjectMap.FastEntrySet<Char2ObjectOpenHashMap<Character>> char2ObjectMap_FastEntrySet0 = char2ObjectOpenHashMap0.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectMap_FastEntrySet0.isEmpty());
      assertEquals(0, char2ObjectMap_FastEntrySet0.size());
      
      Character character1 = Character.valueOf('Z');
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      Character character2 = hashMap0.put(character1, (Character) null);
      assertNull(character2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(hashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      char2ObjectOpenHashMap1.rehash(2998);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      ObjectCollection<Character> objectCollection0 = char2ObjectOpenHashMap1.values();
      assertNotNull(objectCollection0);
      assertFalse(objectCollection0.contains('f'));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      Character character3 = Character.valueOf('?');
      assertNotNull(character3);
      assertEquals('?', (char)character3);
      assertFalse(character3.equals((Object)character1));
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = char2ObjectOpenHashMap0.replace(character3, char2ObjectOpenHashMap1);
      assertNull(char2ObjectOpenHashMap2);
      assertFalse(character3.equals((Object)character1));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      CharSet charSet0 = char2ObjectOpenHashMap1.keys;
      assertNull(charSet0);
      
      char2ObjectOpenHashMap1.keys = null;
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      char2ObjectOpenHashMap1.growthFactor((-874));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      
      Char2ObjectMap.FastEntrySet<Character> char2ObjectMap_FastEntrySet1 = char2ObjectOpenHashMap1.char2ObjectEntrySet();
      assertNotNull(char2ObjectMap_FastEntrySet1);
      assertFalse(char2ObjectMap_FastEntrySet1.contains('?'));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertFalse(char2ObjectMap_FastEntrySet1.isEmpty());
      assertEquals(1, char2ObjectMap_FastEntrySet1.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = char2ObjectOpenHashMap0.get('Z');
      assertNull(char2ObjectOpenHashMap3);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      CharSet charSet1 = char2ObjectOpenHashMap0.keySet();
      assertNotNull(charSet1);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(charSet1.isEmpty());
      assertEquals(0, charSet1.size());
      
      int int0 = char2ObjectOpenHashMap0.shiftKeys(4195);
      assertEquals(4195, int0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      char char0 = 'T';
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      CharSet charSet0 = char2ObjectOpenHashMap0.keys;
      assertNull(charSet0);
      
      char2ObjectOpenHashMap0.keys = null;
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      int int0 = (-2362);
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.trim((-2362));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1861125917 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2278);
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      char char0 = '<';
      charArray0[1] = '<';
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 5);
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[1] = char2ObjectOpenHashMap0;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0, 1.0F);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      char2ObjectOpenHashMapArray0[2] = char2ObjectOpenHashMap1;
      char2ObjectOpenHashMapArray0[3] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[4] = char2ObjectOpenHashMap0;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = null;
      try {
        char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(charArray0, char2ObjectOpenHashMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key array and the value array have different lengths (2 and 5)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.put((Character) null, (Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2185);
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      
      char char0 = ')';
      int int0 = (-2578);
      char2ObjectOpenHashMap1.size = (-2578);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals((-2578), char2ObjectOpenHashMap1.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>(2185);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      ObjectSet<Map.Entry<Character, Character>> objectSet0 = (ObjectSet<Map.Entry<Character, Character>>)char2ObjectOpenHashMap0.entrySet();
      assertNotNull(objectSet0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(objectSet0.isEmpty());
      assertEquals(0, objectSet0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      
      char2ObjectOpenHashMap0.mask = 523;
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.get((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '0';
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 9);
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '0';
      charArray1[3] = '[';
      charArray1[4] = '0';
      charArray1[5] = '[';
      charArray1[6] = '[';
      charArray1[7] = '0';
      Character[] characterArray0 = null;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = null;
      try {
        char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray1, (Character[]) null, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue((Object) null);
      assertFalse(boolean0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character0 = char2ObjectOpenHashMap0.remove('e');
      assertNull(character0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character1 = char2ObjectOpenHashMap0.put('n', (Character) null);
      assertNull(character1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      Character character2 = Character.valueOf('n');
      assertNotNull(character2);
      assertEquals('n', (char)character2);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Object object0 = char2ObjectOpenHashMap1.get(character2);
      assertNull(object0);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue((Object) null);
      assertTrue(boolean0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = null;
      try {
        char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>((-2492));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The expected number of elements must be nonnegative
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = Character.valueOf('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue(character0);
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char2ObjectOpenHashMap0.clear();
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      
      Character character0 = Character.valueOf('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character2 = Character.valueOf('X');
      assertNotNull(character2);
      assertEquals('X', (char)character2);
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      boolean boolean1 = char2ObjectOpenHashMap2.containsValue((Object) null);
      assertFalse(boolean1);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      Character character3 = char2ObjectOpenHashMap2.get(character0);
      assertNotNull(character3);
      assertEquals('X', (char)character3);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap2.size());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertFalse(char2ObjectOpenHashMap2.isEmpty());
      
      Character character4 = char2ObjectOpenHashMap0.remove('X');
      assertNotNull(character4);
      assertEquals('X', (char)character4);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      
      Character character0 = Character.valueOf('|');
      assertNotNull(character0);
      assertEquals('|', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.get(character0);
      assertNull(character1);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue(char2ObjectOpenHashMap0);
      assertFalse(boolean0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'o';
      charArray0[2] = '8';
      charArray0[3] = '8';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'o';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) 'o';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap0.trim();
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      char2ObjectOpenHashMap1.clear();
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      
      boolean boolean1 = char2ObjectOpenHashMap0.rehash();
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      Character character1 = Character.valueOf('b');
      assertNotNull(character1);
      assertEquals('b', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap3);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertEquals(3, char2ObjectOpenHashMap3.size());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      boolean boolean2 = char2ObjectOpenHashMap1.containsValue(characterArray0[2]);
      assertFalse(boolean2);
      assertEquals(4, characterArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Character character2 = char2ObjectOpenHashMap0.get(character1);
      assertNull(character2);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(character1.equals((Object)character0));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character3 = char2ObjectOpenHashMap0.remove('w');
      assertNull(character3);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'{', 'o', '8', '8'}, charArray0);
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(3, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      Character character4 = char2ObjectOpenHashMap1.put('-', (Character) null);
      assertNull(character4);
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertFalse(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character0 = char2ObjectOpenHashMap0.remove('v');
      assertNull(character0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = char2ObjectOpenHashMap0.remove('e');
      assertNull(character0);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character1 = Character.valueOf('b');
      assertNotNull(character1);
      assertEquals('b', (char)character1);
      
      Character character2 = char2ObjectOpenHashMap0.get(character1);
      assertNull(character2);
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character3 = char2ObjectOpenHashMap0.put('n', character1);
      assertNull(character3);
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      Character character4 = Character.valueOf('#');
      assertNotNull(character4);
      assertEquals('#', (char)character4);
      assertFalse(character4.equals((Object)character1));
      
      boolean boolean0 = char2ObjectOpenHashMap0.containsValue(character4);
      assertFalse(boolean0);
      assertFalse(character4.equals((Object)character1));
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      char2ObjectOpenHashMap0.keys = null;
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      
      charArray0[3] = 'n';
      charArray0[4] = 'b';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      charArray0[7] = '#';
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 2);
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap0;
      char2ObjectOpenHashMapArray0[0].maxFill = (-2579);
      char2ObjectOpenHashMapArray0[1] = char2ObjectOpenHashMap0;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(charArray0, char2ObjectOpenHashMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key array and the value array have different lengths (8 and 2)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
      assertNotNull(char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      Character character0 = char2ObjectOpenHashMap0.remove('e');
      assertNull(character0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      Character character1 = Character.valueOf('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      
      Character character2 = Character.valueOf('n');
      assertNotNull(character2);
      assertEquals('n', (char)character2);
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = Character.valueOf('D');
      assertNotNull(character3);
      assertEquals('D', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Character character4 = Character.valueOf('t');
      assertNotNull(character4);
      assertEquals('t', (char)character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      
      Character character5 = Character.valueOf('e');
      assertNotNull(character5);
      assertEquals('e', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      
      Character character6 = hashMap0.put(character5, character5);
      assertNull(character6);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap1);
      assertNotNull(char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Character>(hashMap0);
      assertNotNull(char2ObjectOpenHashMap3);
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(1, char2ObjectOpenHashMap3.size());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap4 = char2ObjectOpenHashMap0.clone();
      assertNotNull(char2ObjectOpenHashMap4);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      
      CharSet charSet0 = char2ObjectOpenHashMap4.keySet();
      assertNotNull(charSet0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      assertEquals(0, charSet0.size());
      assertTrue(charSet0.isEmpty());
      
      String string0 = char2ObjectOpenHashMap4.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
      
      Character character7 = Character.valueOf('e');
      assertNotNull(character7);
      assertEquals('e', (char)character7);
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character2));
      
      Character character8 = char2ObjectOpenHashMap3.put(character2, (Character) null);
      assertNull(character8);
      assertFalse(character2.equals((Object)character4));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character7));
      assertFalse(character2.equals((Object)character5));
      assertFalse(character2.equals((Object)character3));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(2, char2ObjectOpenHashMap3.size());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap5 = char2ObjectOpenHashMap2.clone();
      assertNotNull(char2ObjectOpenHashMap5);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap4);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectOpenHashMap5.size());
      assertTrue(char2ObjectOpenHashMap5.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap5.growthFactor());
      assertTrue(char2ObjectOpenHashMap5.rehash());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      
      Character character9 = char2ObjectOpenHashMap5.put('b', character4);
      assertNull(character9);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap5));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap5.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap5));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character5));
      assertFalse(character4.equals((Object)character7));
      assertFalse(character4.equals((Object)character3));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap5));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap2.equals((Object)char2ObjectOpenHashMap1));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap5, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap2, char2ObjectOpenHashMap4);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(1, char2ObjectOpenHashMap5.size());
      assertEquals(16, char2ObjectOpenHashMap5.growthFactor());
      assertTrue(char2ObjectOpenHashMap5.rehash());
      assertFalse(char2ObjectOpenHashMap5.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      assertEquals(0, char2ObjectOpenHashMap2.size());
      assertEquals(16, char2ObjectOpenHashMap2.growthFactor());
      assertTrue(char2ObjectOpenHashMap2.rehash());
      assertTrue(char2ObjectOpenHashMap2.isEmpty());
      
      char2ObjectOpenHashMap1.hashCode();
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap5));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap4));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap5));
      assertFalse(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap1.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap1, char2ObjectOpenHashMap4);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertEquals(0, char2ObjectOpenHashMap1.size());
      assertEquals(16, char2ObjectOpenHashMap1.growthFactor());
      assertTrue(char2ObjectOpenHashMap1.rehash());
      assertTrue(char2ObjectOpenHashMap1.isEmpty());
      
      boolean boolean0 = char2ObjectOpenHashMap3.containsValue(char2ObjectOpenHashMap4);
      assertFalse(boolean0);
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap5));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap0.equals((Object)char2ObjectOpenHashMap3));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap0));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap5));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap1));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap4));
      assertFalse(char2ObjectOpenHashMap3.equals((Object)char2ObjectOpenHashMap2));
      assertFalse(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap5));
      assertFalse(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap3));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap2));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap1));
      assertTrue(char2ObjectOpenHashMap4.equals((Object)char2ObjectOpenHashMap0));
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap0, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap4);
      assertNotSame(char2ObjectOpenHashMap3, char2ObjectOpenHashMap2);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap5);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap3);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap1);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap0);
      assertNotSame(char2ObjectOpenHashMap4, char2ObjectOpenHashMap2);
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(char2ObjectOpenHashMap3.rehash());
      assertEquals(2, char2ObjectOpenHashMap3.size());
      assertFalse(char2ObjectOpenHashMap3.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap3.growthFactor());
      assertEquals(16, char2ObjectOpenHashMap4.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap4.size());
      assertTrue(char2ObjectOpenHashMap4.rehash());
      assertTrue(char2ObjectOpenHashMap4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.remove((Object) char2ObjectOpenHashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap cannot be cast to class java.lang.Character (org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1a702575; java.lang.Character is in module java.base of loader 'bootstrap')
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      assertNotNull(char2ObjectOpenHashMap0);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(0, char2ObjectOpenHashMap0.size());
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
      
      Character character0 = Character.valueOf('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = char2ObjectOpenHashMap0.put(character0, character0);
      assertNull(character1);
      assertEquals(16, char2ObjectOpenHashMap0.growthFactor());
      assertTrue(char2ObjectOpenHashMap0.rehash());
      assertEquals(1, char2ObjectOpenHashMap0.size());
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      Character character0 = Character.valueOf('T');
      char2ObjectOpenHashMap0.keySet();
      char2ObjectOpenHashMap1.put(character0, (Character) null);
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.remove((Object) char2ObjectOpenHashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap cannot be cast to class java.lang.Character (org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1a702575; java.lang.Character is in module java.base of loader 'bootstrap')
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 1686;
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(1686);
      char2ObjectOpenHashMap0.containsKey('u');
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((-99));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The expected number of elements must be nonnegative
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = null;
      try {
        char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>((-1519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The expected number of elements must be nonnegative
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      boolean boolean0 = char2ObjectOpenHashMap0.containsKey('U');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 2458;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(2458);
      char2ObjectOpenHashMap0.containsKey('n');
      char2ObjectOpenHashMap0.clear();
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(2458, 2545.442F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(hashMap0, 0.25F);
      assertTrue(char2ObjectOpenHashMap0.rehash());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap0.get((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(4195);
      char2ObjectOpenHashMap0.get('f');
      hashMap0.remove((Object) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) 'f';
      characterArray0[1] = (Character) 'f';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      Character character0 = char2ObjectOpenHashMap1.get((Character) 'f');
      char2ObjectOpenHashMap1.put('f', character0);
      Character.valueOf('H');
      int int0 = 1368;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = null;
      try {
        char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>(1368, (float) character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      boolean boolean0 = char2ObjectOpenHashMap0.equals(char2ObjectOpenHashMap1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '5';
      charArray0[2] = '8';
      charArray0[3] = ':';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '5';
      characterArray0[1] = (Character) '{';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) '5';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
      char2ObjectOpenHashMap0.trim();
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>();
      char2ObjectOpenHashMap1.clear();
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      char2ObjectOpenHashMap1.rehash();
      Character.valueOf('5');
      Character character0 = Character.valueOf('v');
      char2ObjectOpenHashMap1.put(' ', character0);
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.shiftKeys(1223);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1223 out of bounds for length 32
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = char2ObjectOpenHashMap0.clone();
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Char2ObjectMap<Character>) char2ObjectOpenHashMap1);
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap3 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap2);
      char char0 = '6';
      Character character0 = Character.valueOf('6');
      char2ObjectOpenHashMap3.put('6', character0);
      // Undeclared exception!
      try { 
        char2ObjectOpenHashMap1.get((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      Character[] characterArray0 = new Character[0];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((char[]) null, characterArray0, (-1175.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0, (-225.23337F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(18, 0.25F);
      Character.valueOf(';');
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>(hashMap0);
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = null;
      try {
        char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap1, (float) 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[4];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = null;
      try {
        char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0, 2075.414F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = '8';
      charArray0[2] = 'x';
      charArray0[3] = 'b';
      charArray0[4] = '{';
      charArray0[5] = ',';
      charArray0[6] = '8';
      charArray0[7] = 'A';
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'A';
      characterArray0[1] = (Character) ',';
      Character character0 = Character.valueOf('<');
      characterArray0[2] = character0;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = null;
      try {
        char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key array and the value array have different lengths (8 and 3)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      char2ObjectOpenHashMap0.remove('e');
      Character character0 = Character.valueOf('r');
      char2ObjectOpenHashMap0.get(character0);
      char2ObjectOpenHashMap0.put('n', character0);
      char2ObjectOpenHashMap0.containsKey('(');
      assertFalse(char2ObjectOpenHashMap0.isEmpty());
      
      char2ObjectOpenHashMap0.clear();
      char2ObjectOpenHashMap0.values();
      char2ObjectOpenHashMap0.clear();
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(1);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      char2ObjectOpenHashMap0.used = booleanArray0;
      char2ObjectOpenHashMap0.maxFill = 1;
      char2ObjectOpenHashMap0.values();
      char2ObjectOpenHashMap0.clear();
      assertTrue(char2ObjectOpenHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = null;
      try {
        char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>((-5), (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = null;
      try {
        char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>();
      Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>> char2ObjectOpenHashMap1 = null;
      try {
        char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Char2ObjectOpenHashMap<Character>>(17029, 17029);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '$';
      charArray0[2] = '^';
      charArray0[3] = 'g';
      charArray0[4] = '{';
      charArray0[5] = 'Z';
      charArray0[6] = 'd';
      Char2ObjectOpenHashMap<Character>[] char2ObjectOpenHashMapArray0 = (Char2ObjectOpenHashMap<Character>[]) Array.newInstance(Char2ObjectOpenHashMap.class, 5);
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>();
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap1 = new Char2ObjectOpenHashMap<Character>((Map<? extends Character, ? extends Character>) char2ObjectOpenHashMap0);
      char2ObjectOpenHashMapArray0[0] = char2ObjectOpenHashMap1;
      int int0 = 0;
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap2 = null;
      try {
        char2ObjectOpenHashMap2 = new Char2ObjectOpenHashMap<Character>(0, (-2588.7388F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0 and smaller than or equal to 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'b';
      charArray0[2] = '|';
      charArray0[3] = 'n';
      charArray0[4] = 'H';
      charArray0[5] = '$';
      charArray0[6] = '8';
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'H';
      Character character0 = Character.valueOf('b');
      characterArray0[1] = character0;
      characterArray0[2] = (Character) 'H';
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = null;
      try {
        char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key array and the value array have different lengths (7 and 3)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = new Character[1];
      Char2ObjectOpenHashMap<Character> char2ObjectOpenHashMap0 = null;
      try {
        char2ObjectOpenHashMap0 = new Char2ObjectOpenHashMap<Character>(charArray0, characterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key array and the value array have different lengths (4 and 1)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.Char2ObjectOpenHashMap", e);
      }
  }
}
