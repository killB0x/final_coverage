/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 03:25:27 GMT 2022
 */

package org.codelibs.jhighlight.fastutil;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.codelibs.jhighlight.fastutil.HashCommon;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HashCommon_ESTest extends HashCommon_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = HashCommon.arraySize(1908874353, 2);
      assertEquals(1073741824, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = HashCommon.maxFill((-3086), (float) (-3086));
      assertEquals((-3087), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = HashCommon.double2int((-553648128));
      assertEquals((-1044348928), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = HashCommon.murmurHash3((-595));
      assertEquals((-1194866792), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = HashCommon.nextPowerOfTwo((-532148L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = HashCommon.nextPowerOfTwo(9223372036854775807L);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = HashCommon.nextPowerOfTwo((-1028477387));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = HashCommon.nextPowerOfTwo(1610612736);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = HashCommon.murmurHash3((long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = HashCommon.murmurHash3(2L);
      assertEquals(4233148493373801447L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = HashCommon.murmurHash3(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = HashCommon.murmurHash3(1796);
      assertEquals(404629826, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = HashCommon.maxFill(1725L, (float) 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = HashCommon.maxFill(2L, (float) 2);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HashCommon.maxFill(1, (float) 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = HashCommon.maxFill(821347078, (float) 1L);
      assertEquals(821347072, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = HashCommon.long2int(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = HashCommon.long2int((-59L));
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = HashCommon.float2int(0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = HashCommon.float2int(1.0F);
      assertEquals(1065353216, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = HashCommon.double2int(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = HashCommon.double2int(1.0);
      assertEquals(1072693248, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = HashCommon.bigArraySize((-1194866792), 2245.364F);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = HashCommon.bigArraySize(371, 0.0F);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = HashCommon.nextPowerOfTwo(0L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCommon.arraySize(2146385190, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (2146385190 expected elements with load factor 1.0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.HashCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = HashCommon.arraySize(0, 0.0F);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = HashCommon.nextPowerOfTwo(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = HashCommon.long2int((-9223372036854775808L));
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashCommon hashCommon0 = new HashCommon();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = HashCommon.bigArraySize(1981L, 1981L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = HashCommon.double2int(3292.790204821);
      assertEquals((-720349384), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = HashCommon.maxFill(2097152L, (float) (-5667277858871681017L));
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = HashCommon.murmurHash3((-404L));
      assertEquals((-5667277858871681017L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = HashCommon.float2int((-10L));
      assertEquals((-1054867456), int0);
  }
}
