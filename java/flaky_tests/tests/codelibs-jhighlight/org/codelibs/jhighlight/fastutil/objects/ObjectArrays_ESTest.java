/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 02:52:23 GMT 2022
 */

package org.codelibs.jhighlight.fastutil.objects;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.codelibs.jhighlight.fastutil.objects.ObjectArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectArrays_ESTest extends ObjectArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      ObjectArrays.fill(integerArray0, integer0);
      assertEquals(4, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.copy(integerArray0, 2, 2);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(2, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(1900);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1900, (int)integer1);
      
      Integer integer2 = new Integer(1900);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1900, (int)integer2);
      
      Integer integer3 = new Integer(2);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      Integer integer4 = new Integer(215);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(215, (int)integer4);
      
      integerArray1[1] = integer4;
      integerArray1[2] = integer3;
      integerArray1[3] = integer0;
      integerArray1[4] = integer1;
      integerArray1[5] = integer0;
      integerArray1[6] = integer3;
      integerArray1[7] = integer2;
      integerArray1[8] = integer0;
      ObjectArrays.mergeSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      
      Random.setNextRandom(4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 1109);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(1109, integerArray1.length);
      
      Integer integer0 = new Integer(1115);
      assertNotNull(integer0);
      assertEquals(1115, (int)integer0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.fill((Integer[]) null, (-1784), (-38), integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrays.quickSort(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 8);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      int int0 = 2147483639;
      // Undeclared exception!
      ObjectArrays.setLength(integerArray0, 2147483639);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer[] integerArray0 = null;
      int int0 = 0;
      int int1 = 0;
      Integer[] integerArray1 = ObjectArrays.reverse((Integer[]) null, 0, 0);
      assertNull(integerArray1);
      
      // Undeclared exception!
      try { 
        ObjectArrays.grow((Integer[]) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer0 = new Integer(1885);
      assertNotNull(integer0);
      assertEquals(1885, (int)integer0);
      
      Integer[] integerArray2 = ObjectArrays.setLength(integerArray0, 1885);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1885, integerArray2.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer[] integerArray3 = ObjectArrays.shuffle(integerArray1, 14732413, 14732413, (java.util.Random) mockRandom0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray3);
      assertNotSame(integerArray3, integerArray2);
      assertSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray3.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 931;
      Integer integer0 = new Integer(931);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(931, (int)integer0);
      
      int int1 = 3531;
      Integer integer1 = new Integer(3531);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(3531, (int)integer1);
      
      // Undeclared exception!
      try { 
        ObjectArrays.setLength((Integer[]) null, 931);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.setLength(integerArray1, 1115);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1115, integerArray2.length);
      
      Integer integer0 = new Integer(1885);
      assertNotNull(integer0);
      assertEquals(1885, (int)integer0);
      
      ObjectArrays.fill(integerArray2, 1115, 1115, integer0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1115, integerArray2.length);
      
      Integer[] integerArray3 = ObjectArrays.grow(integerArray2, 1115, 1885);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertSame(integerArray3, integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1115, integerArray2.length);
      assertEquals(1115, integerArray3.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Integer[] integerArray1 = new Integer[2];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[1] = integer1;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray1, comparator1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray1.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray1, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray1.length);
      assertTrue(boolean0);
      
      Integer[] integerArray2 = new Integer[7];
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      integerArray2[0] = integer0;
      integerArray2[1] = integer0;
      integerArray2[2] = integer0;
      integerArray2[3] = integer1;
      integerArray2[4] = integer1;
      integerArray2[5] = integer1;
      integerArray2[6] = integer0;
      Integer[] integerArray3 = ObjectArrays.copy(integerArray2, 0, 0);
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray3);
      assertEquals(0, integerArray3.length);
      assertEquals(7, integerArray2.length);
      
      Integer[] integerArray4 = ObjectArrays.ensureCapacity(integerArray2, 1556);
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertNotNull(integerArray4);
      assertNotSame(integerArray4, integerArray1);
      assertNotSame(integerArray4, integerArray0);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray4);
      assertEquals(1556, integerArray4.length);
      assertEquals(7, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer((-3114));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3114), (int)integer1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, (-1753), (int) integerArray0[3], comparator0);
      assertEquals(8, integerArray0.length);
      
      ObjectArrays.mergeSort(integerArray0);
      assertEquals(8, integerArray0.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer((-3114));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3114), (int)integer1);
      
      Integer[] integerArray1 = new Integer[8];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer1;
      integerArray1[2] = integer0;
      integerArray1[3] = integer0;
      integerArray1[4] = integer0;
      integerArray1[5] = integer0;
      integerArray1[6] = integer1;
      integerArray1[7] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray1, (-1753), (int) integerArray1[3], comparator0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 8, 50);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      int int0 = new Integer((int) integerArray1[7]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(8, integerArray1.length);
      assertEquals((-3114), int0);
      
      ObjectArrays.mergeSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.trim(integerArray0, (int) integerArray1[1]);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3114
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer((-3114));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-3114), (int)integer2);
      
      Integer[] integerArray1 = new Integer[8];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      integerArray1[1] = integer2;
      integerArray1[3] = integer0;
      integerArray1[4] = integer1;
      integerArray1[5] = integer0;
      integerArray1[6] = integer2;
      integerArray1[7] = integer2;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray1, (-1753), (int) integerArray1[3], comparator0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray1.length);
      
      Integer integer3 = new Integer((-653));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-653), (int)integer3);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = Integer.valueOf(50);
      assertNotNull(integer0);
      assertEquals(50, (int)integer0);
      
      ObjectArrays.mergeSort(integerArray0, 50, 50, comparator0);
      assertEquals(9, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.quickSort(integerArray0, 50, (-1361), comparator1);
      assertEquals(9, integerArray0.length);
      
      Integer integer1 = new Integer(50);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(50, (int)integer1);
      
      Integer[] integerArray1 = new Integer[8];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      integerArray1[1] = integer1;
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      integerArray1[2] = integer2;
      integerArray1[3] = integer1;
      integerArray1[4] = integer0;
      integerArray1[5] = integer0;
      integerArray1[6] = integer1;
      integerArray1[7] = integer0;
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer((-3114));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-3114), (int)integer2);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(255, (-653), (-653), (-3114), 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(9, integerArray0.length);
      
      Integer[] integerArray1 = new Integer[8];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      integerArray1[1] = integer2;
      integerArray1[2] = integer0;
      integerArray1[3] = integer0;
      integerArray1[4] = integer1;
      integerArray1[5] = integer0;
      integerArray1[6] = integer2;
      integerArray1[7] = integer2;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray1, (-1753), (int) integerArray1[3], comparator1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 8, 8);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray2.length);
      assertEquals(8, integerArray1.length);
      
      int int0 = ObjectArrays.binarySearch(integerArray2, integerArray1[2]);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray2.length);
      assertEquals(8, integerArray1.length);
      assertEquals(3, int0);
      
      ObjectArrays.mergeSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.trim(integerArray0, (int) integerArray1[1]);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3114
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer((-3114));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-3114), (int)integer2);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(255, (-653), (-653), (-3114), 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(9, integerArray0.length);
      
      Integer[] integerArray1 = new Integer[8];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      integerArray1[1] = integer2;
      integerArray1[2] = integer0;
      integerArray1[3] = integer0;
      integerArray1[4] = integer1;
      integerArray1[5] = integer0;
      integerArray1[6] = integer2;
      integerArray1[7] = integer2;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray1, (-1753), (int) integerArray1[3], comparator1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 8, 50);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertEquals(8, integerArray2.length);
      assertEquals(8, integerArray1.length);
      
      int int0 = ObjectArrays.binarySearch(integerArray2, integerArray1[2]);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertEquals(8, integerArray2.length);
      assertEquals(8, integerArray1.length);
      assertEquals(3, int0);
      
      ObjectArrays.mergeSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertEquals(8, integerArray1.length);
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray1, comparator2);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray3 = new Integer[4];
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      
      integerArray3[0] = integer0;
      integerArray3[1] = integer2;
      integerArray3[2] = integer0;
      integerArray3[3] = integerArray1[4];
      boolean boolean0 = ObjectArrays.equals(integerArray1, integerArray3);
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertEquals(4, integerArray3.length);
      assertEquals(8, integerArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, 0, 0, comparator0, integerArray0);
      assertEquals(9, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(0);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      MockRandom mockRandom0 = new MockRandom((-953L));
      assertNotNull(mockRandom0);
      
      Integer[] integerArray1 = new Integer[6];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer1;
      integerArray1[2] = integer1;
      integerArray1[3] = integer1;
      integerArray1[4] = integer1;
      integerArray1[5] = integer3;
      Integer[] integerArray2 = ObjectArrays.grow(integerArray1, 705, int0);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(705, integerArray2.length);
      assertEquals(6, integerArray1.length);
      
      ObjectArrays.ensureFromTo(integerArray2, int0, 705);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(705, integerArray2.length);
      assertEquals(6, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 50;
      Integer integer0 = new Integer(50);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(50, (int)integer0);
      
      int int1 = 1112;
      Integer integer1 = new Integer(1112);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(1112, (int)integer1);
      
      Integer integer2 = new Integer(1112);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1112, (int)integer2);
      
      int int2 = 388;
      Integer integer3 = new Integer((-3194));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-3194), (int)integer3);
      
      Integer integer4 = new Integer((-3194));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int2));
      assertNotNull(integer4);
      assertEquals((-3194), (int)integer4);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, 193381, (-1909), comparator0);
      assertEquals(8, integerArray0.length);
      
      // Undeclared exception!
      ObjectArrays.ensureCapacity(integerArray0, 759249643, 43);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.valueOf(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, 8, 8, comparator0);
      assertEquals(7, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, 2, 23, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 12 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.valueOf(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = 1556;
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray0, 0, 1556, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(257);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(257, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(257, (int)integer2);
      
      Integer integer3 = new Integer(8);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(8, (int)integer3);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (int) integerArray0[1]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(257, integerArray1.length);
      
      ObjectArrays.mergeSort(integerArray0, (int) integerArray0[1], 50, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(257, integerArray1.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray1, comparator0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(257, integerArray1.length);
      
      Integer[] integerArray2 = new Integer[9];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      integerArray2[0] = integer0;
      integerArray2[1] = integer3;
      integerArray2[2] = integer1;
      integerArray2[3] = integer1;
      Integer integer4 = new Integer(13009);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(13009, (int)integer4);
      
      integerArray2[4] = integer4;
      Integer integer5 = new Integer(8);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(8, (int)integer5);
      
      integerArray2[5] = integer5;
      integerArray2[6] = integer1;
      Integer integer6 = new Integer((int) integerArray2[2]);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integer6);
      assertEquals(9, integerArray2.length);
      assertEquals(257, (int)integer6);
      
      integerArray2[7] = integer6;
      integerArray2[8] = integer3;
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray2);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(9, integerArray2.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-723));
      assertNotNull(integer0);
      assertEquals((-723), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(11);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      
      Integer integer2 = new Integer((-498));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-498), (int)integer2);
      
      Integer integer3 = new Integer(11);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(11, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(29, integerArray0[0], (-723), 11, 11).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(11, (-907), 908, 29, 8).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(8, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (int) integerArray0[0], 908);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.trim(integerArray0, 8);
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray2.length);
      
      Integer[] integerArray3 = ObjectArrays.reverse(integerArray2, (int) integerArray0[0], (-723));
      assertNotNull(integerArray3);
      assertSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray3);
      assertSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray3);
      assertSame(integerArray3, integerArray1);
      assertSame(integerArray3, integerArray2);
      assertSame(integerArray3, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray2.length);
      assertEquals(8, integerArray3.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, 0, 0, comparator0, integerArray0);
      assertEquals(9, integerArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      ObjectArrays.fill(integerArray0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(9, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int1 = ObjectArrays.binarySearch(integerArray0, (-1), (-1), integer0, comparator1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      
      Integer integer1 = new Integer((-33));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-33), (int)integer1);
      
      Integer integer2 = new Integer(504);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(504, (int)integer2);
      
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = new Integer(2755);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(2755, (int)integer4);
      
      Integer integer5 = new Integer((-1710));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-1710), (int)integer5);
      
      int int2 = ObjectArrays.binarySearch(integerArray0, (-83), (-1710), integer2);
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(integerArray0, integerArray1);
      assertEquals(9, integerArray0.length);
      assertEquals(82, int2);
      
      Integer[] integerArray2 = new Integer[1];
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      integerArray2[0] = integer3;
      Integer[] integerArray3 = ObjectArrays.setLength(integerArray2, 504);
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(504, integerArray3.length);
      assertEquals(1, integerArray2.length);
      
      int int3 = 394;
      Integer integer6 = new Integer(394);
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)int3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(394, (int)integer6);
      
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray3, (-33), 2718, integer6, (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1342 out of bounds for length 504
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(255);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(255, (int)integer1);
      
      Integer integer2 = new Integer((-1868));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1868), (int)integer2);
      
      Integer integer3 = new Integer((-1516));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1516), (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      
      Integer integer4 = new Integer(676);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(676, (int)integer4);
      
      Integer integer5 = new Integer(243);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(243, (int)integer5);
      
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer3;
      integerArray1[2] = integer1;
      integerArray1[3] = integer3;
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, int0);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray2.length);
      assertEquals(4, integerArray1.length);
      
      Integer[] integerArray3 = new Integer[7];
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      
      integerArray3[0] = integer0;
      integerArray3[1] = integer2;
      integerArray3[2] = integerArray1[2];
      integerArray3[3] = integer5;
      Integer integer6 = new Integer(2547);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(2547, (int)integer6);
      
      integerArray3[4] = integer6;
      integerArray3[5] = integer2;
      integerArray3[6] = integer2;
      ObjectArrays.quickSort(integerArray3);
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertEquals(7, integerArray3.length);
      
      Random.setNextRandom(39);
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray0, int0, (int) integerArray3[4]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 123 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(61);
      assertNotNull(integer0);
      assertEquals(61, (int)integer0);
      
      Integer integer1 = new Integer(1900);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1900, (int)integer1);
      
      Integer integer2 = new Integer(1900);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1900, (int)integer2);
      
      Integer integer3 = new Integer((-1621));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1621), (int)integer3);
      
      Integer[] integerArray1 = new Integer[7];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer3;
      integerArray1[1] = integer1;
      integerArray1[2] = integer1;
      integerArray1[3] = integer0;
      integerArray1[4] = integer3;
      integerArray1[5] = integer3;
      integerArray1[6] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray1, comparator0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray1.length);
      
      Integer integer4 = new Integer(1);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(7, integerArray0.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity(integerArray1, (int) integerArray1[6], (-1635));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(255);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(255, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer2);
      
      Integer integer3 = new Integer(8);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(8, (int)integer3);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (int) integerArray0[1]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(255, integerArray1.length);
      
      ObjectArrays.mergeSort(integerArray0, (int) integerArray0[1], 50, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(255, integerArray1.length);
      
      Integer integer4 = new Integer(int0);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(2, (int)integer4);
      
      Integer integer5 = new Integer(7);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(7, (int)integer5);
      
      Integer integer6 = new Integer(50);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(50, (int)integer6);
      
      ObjectArrays.fill(integerArray1, 1, (int) integerArray0[1], integer4);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer4.equals((Object)integer6));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(255, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(255, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray0, 50, 1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(50, integerArray2.length);
      
      Integer[] integerArray3 = ObjectArrays.ensureCapacity(integerArray0, 7);
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertEquals(7, integerArray3.length);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1431;
      Integer integer0 = new Integer(1431);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1431, (int)integer0);
      
      int int1 = 24196;
      Integer integer1 = new Integer(24196);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(24196, (int)integer1);
      
      Integer integer2 = new Integer((-3279));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals((-3279), (int)integer2);
      
      Integer[] integerArray1 = null;
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity((Integer[]) null, 1431);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.setLength(integerArray0, 0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.quickSort((Integer[]) null, 2, 2, comparator0);
      // Undeclared exception!
      try { 
        ObjectArrays.trim((Integer[]) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      int int0 = 3736;
      Integer integer3 = new Integer((-3221));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-3221), (int)integer3);
      
      Integer integer4 = new Integer(50);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(50, (int)integer4);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, 3736);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3736, integerArray1.length);
      
      ObjectArrays.mergeSort(integerArray0, 4943, 2520, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray0.length);
      
      Integer integer5 = new Integer(2520);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(2520, (int)integer5);
      
      Integer[] integerArray2 = new Integer[8];
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      integerArray2[0] = integer0;
      Integer integer6 = new Integer(4943);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(4943, (int)integer6);
      
      integerArray2[1] = integer6;
      integerArray2[2] = integer1;
      integerArray2[3] = integer5;
      integerArray2[4] = integer5;
      integerArray2[5] = integer0;
      Integer integer7 = new Integer(2669);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      assertEquals(2669, (int)integer7);
      
      integerArray2[6] = integer7;
      Integer integer8 = new Integer((-411));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertNotNull(integer8);
      assertEquals((-411), (int)integer8);
      
      ObjectArrays.fill(integerArray1, 50, 3736, integer5);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer5.equals((Object)integer7));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer8));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3736, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureOffsetLength(integerArray0, 2520, 4943);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (7463) is greater than array length (3)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 881539);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(881539, integerArray1.length);
      
      Integer integer0 = new Integer(881539);
      assertNotNull(integer0);
      assertEquals(881539, (int)integer0);
      
      Integer integer1 = new Integer(881539);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(881539, (int)integer1);
      
      // Undeclared exception!
      ObjectArrays.fill(integerArray1, 1885, 881539, integer1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1753));
      assertNotNull(integer0);
      assertEquals((-1753), (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = new Integer(255);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(255, (int)integer2);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(112, 2, 2, (-1753), 2).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Integer integer3 = new Integer(2);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      
      Integer[] integerArray1 = new Integer[8];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      integerArray1[1] = integer1;
      integerArray1[2] = integer1;
      integerArray1[3] = integer2;
      integerArray1[4] = integer3;
      integerArray1[5] = integer2;
      integerArray1[6] = integer0;
      integerArray1[7] = integer2;
      boolean boolean0 = ObjectArrays.equals(integerArray1, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer[] integerArray0 = null;
      int int0 = 273;
      int int1 = (-3236);
      // Undeclared exception!
      try { 
        ObjectArrays.grow((Integer[]) null, 273, (-3236));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 8;
      Integer integer0 = Integer.valueOf(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 8);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureOffsetLength(integerArray1, 193382, (-99));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length (-99) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-3083));
      assertNotNull(integer0);
      assertEquals((-3083), (int)integer0);
      
      Integer integer1 = new Integer((-686));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-686), (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer((-3083));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-3083), (int)integer3);
      
      Integer integer4 = new Integer((-3083));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-3083), (int)integer4);
      
      Integer integer5 = new Integer(3737);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(3737, (int)integer5);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 1267);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(1267, integerArray1.length);
      
      Integer[] integerArray2 = new Integer[1];
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      Integer integer6 = new Integer((-723));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals((-723), (int)integer6);
      
      integerArray2[0] = integer6;
      Integer[] integerArray3 = ObjectArrays.grow(integerArray2, (-3083));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertNotNull(integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray3);
      assertSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertEquals(1, integerArray2.length);
      assertEquals(1, integerArray3.length);
      
      Random.setNextRandom((int) integerArray2[0]);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray3);
      assertEquals(1, integerArray2.length);
      
      Integer[] integerArray4 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertNotNull(integerArray4);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray4);
      assertNotSame(integerArray4, integerArray0);
      assertNotSame(integerArray4, integerArray1);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray3);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray4.length);
      
      Integer integer7 = new Integer(1868);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      assertEquals(1868, (int)integer7);
      
      Integer integer8 = new Integer((-686));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer1));
      assertNotNull(integer8);
      assertEquals((-686), (int)integer8);
      
      int int0 = ObjectArrays.binarySearch(integerArray4, 318, (-68), integer8);
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray4));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer1));
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray4);
      assertNotSame(integerArray4, integerArray0);
      assertNotSame(integerArray4, integerArray1);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray3);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray4.length);
      assertEquals((-319), int0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int1 = ObjectArrays.binarySearch(integerArray3, (-344), (-2650), integer3, comparator0);
      assertFalse(int1 == int0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer5));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer8));
      assertFalse(integer3.equals((Object)integer7));
      assertTrue(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray4));
      assertFalse(integerArray3.equals((Object)integerArray4));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray4);
      assertSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray4);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertEquals(1, integerArray2.length);
      assertEquals(1, integerArray3.length);
      assertEquals(343, int1);
      
      // Undeclared exception!
      try { 
        ObjectArrays.fill(integerArray1, 1113, (int) integerArray2[0], integerArray2[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (1113) is greater than end index (-723)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, 0, 0, comparator0, integerArray0);
      assertEquals(9, integerArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      ObjectArrays.fill(integerArray0, integer0);
      assertEquals(9, integerArray0.length);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.getInteger("}_Uh@i");
      assertNull(integer2);
      
      Integer integer3 = new Integer((-4117));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-4117), (int)integer3);
      
      Integer integer4 = new Integer((-2497));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-2497), (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer((-2497));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals((-2497), (int)integer6);
      
      ObjectArrays.quickSort(integerArray0);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1097);
      assertNotNull(integer0);
      assertEquals(1097, (int)integer0);
      
      Integer integer1 = new Integer((-3083));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3083), (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(1097);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1097, (int)integer3);
      
      Integer integer4 = new Integer(1868);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1868, (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer(0);
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      Integer integer7 = new Integer((-723));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals((-723), (int)integer7);
      
      int int0 = ObjectArrays.binarySearch(integerArray0, 1097, 2, integer1);
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer6));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer7));
      assertEquals(9, integerArray0.length);
      assertEquals((-1098), int0);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray0, 0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray2.length);
      
      Random.setNextRandom(0);
      Integer[] integerArray3 = new Integer[9];
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      
      integerArray3[0] = integer2;
      integerArray3[1] = integer4;
      integerArray3[2] = integer5;
      integerArray3[3] = integer7;
      integerArray3[4] = integer5;
      integerArray3[5] = integer7;
      integerArray3[6] = integer4;
      integerArray3[7] = integer0;
      integerArray3[8] = integer7;
      int int1 = ObjectArrays.binarySearch(integerArray3, 210, 8, integer6);
      assertFalse(int1 == int0);
      assertFalse(integer6.equals((Object)integer7));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(9, integerArray3.length);
      assertEquals((-211), int1);
      
      Integer integer8 = new Integer(0);
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer6));
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      
      int int2 = ObjectArrays.binarySearch(integerArray2, 3318, (int) integerArray3[6], integer8);
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray2.length);
      assertEquals(9, integerArray3.length);
      assertEquals((-3319), int2);
      
      Integer[] integerArray4 = ObjectArrays.copy(integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray4);
      assertNotSame(integerArray0, integerArray4);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray1);
      assertNotSame(integerArray4, integerArray0);
      assertNotSame(integerArray4, integerArray3);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray4);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray4.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer((-3221));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-3221), (int)integer2);
      
      Integer integer3 = new Integer(43);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(43, (int)integer3);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, 3736);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3736, integerArray1.length);
      
      ObjectArrays.mergeSort(integerArray0, 4943, 2520, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray0.length);
      
      Integer integer4 = new Integer(2520);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(2520, (int)integer4);
      
      Integer[] integerArray2 = new Integer[8];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      integerArray2[0] = integer0;
      Integer integer5 = new Integer(4943);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(4943, (int)integer5);
      
      integerArray2[1] = integer5;
      integerArray2[3] = integer4;
      integerArray2[4] = integer4;
      integerArray2[5] = integer0;
      Integer integer6 = new Integer(2669);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(2669, (int)integer6);
      
      integerArray2[6] = integer6;
      integerArray2[7] = integer1;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer((-3221));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-3221), (int)integer3);
      
      Integer integer4 = new Integer(50);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(50, (int)integer4);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, 3736);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3736, integerArray1.length);
      
      ObjectArrays.mergeSort(integerArray0, 4943, 2520, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray0.length);
      
      Integer integer5 = new Integer(2520);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(2520, (int)integer5);
      
      Integer[] integerArray2 = new Integer[8];
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      integerArray2[0] = integer0;
      Integer integer6 = new Integer(4943);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(4943, (int)integer6);
      
      integerArray2[1] = integer6;
      integerArray2[2] = integer1;
      integerArray2[3] = integer5;
      integerArray2[4] = integer5;
      integerArray2[5] = integer0;
      Integer integer7 = new Integer(2669);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      assertEquals(2669, (int)integer7);
      
      integerArray2[6] = integer7;
      integerArray2[7] = integer1;
      ObjectArrays.quickSort(integerArray2);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(8, integerArray2.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.fill(integerArray0, (-1050), (-1050), integer5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index (-1050) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-741));
      assertNotNull(integer0);
      assertEquals((-741), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(747);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(747, (int)integer1);
      
      Integer integer2 = new Integer(157);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(157, (int)integer2);
      
      Integer integer3 = new Integer((-741));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-741), (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(775, 1162, integerArray0[0], 2665, 1162).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(9, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(775, 1655935399, 157, (-741), 747).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(9, integerArray0.length);
      
      Integer integer4 = new Integer(747);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(747, (int)integer4);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 7);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(7, integerArray1.length);
      
      // Undeclared exception!
      ObjectArrays.grow(integerArray1, 1655935399);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer0 = new Integer(1846);
      assertNotNull(integer0);
      assertEquals(1846, (int)integer0);
      
      Integer[] integerArray2 = ObjectArrays.reverse(integerArray1, 1846, 1846);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2520);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2520, (int)integer1);
      
      Integer integer2 = new Integer(3736);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(3736, (int)integer2);
      
      Integer integer3 = new Integer(3736);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(3736, (int)integer3);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 8);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      Integer integer4 = new Integer(2520);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(2520, (int)integer4);
      
      Integer integer5 = new Integer(2925);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(2925, (int)integer5);
      
      Integer integer6 = new Integer(41);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(41, (int)integer6);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = ObjectArrays.binarySearch(integerArray1, integer6, comparator0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals((-1), int0);
      
      Integer[] integerArray3 = ObjectArrays.grow(integerArray2, 6, 41);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray3);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray3);
      assertSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertSame(integerArray3, integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      assertEquals(8, integerArray3.length);
      
      Integer[] integerArray4 = ObjectArrays.grow(integerArray0, (-699), (-2013));
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertNotNull(integerArray4);
      assertNotSame(integerArray0, integerArray3);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray4);
      assertNotSame(integerArray4, integerArray3);
      assertSame(integerArray4, integerArray1);
      assertNotSame(integerArray4, integerArray2);
      assertSame(integerArray4, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray4.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(477);
      assertNotNull(integer0);
      assertEquals(477, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-896));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-896), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer3);
      
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer((int) integerArray0[2]);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals(8, integerArray0.length);
      assertEquals((-896), (int)integer6);
      
      Integer integer7 = new Integer(int0);
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      Integer integer8 = new Integer((-896));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer0));
      assertNotNull(integer8);
      assertEquals((-896), (int)integer8);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer4;
      integerArray1[2] = integer1;
      integerArray1[3] = integer3;
      integerArray1[4] = integer2;
      integerArray1[5] = integer3;
      integerArray1[6] = integer5;
      integerArray1[7] = integer8;
      integerArray1[8] = integer4;
      int int1 = ObjectArrays.binarySearch(integerArray1, int0, 5, integerArray1[8]);
      assertFalse(int1 == int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      assertEquals(3, int1);
      
      Integer[] integerArray2 = ObjectArrays.setLength(integerArray0, (int) integerArray1[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertEquals(8, integerArray0.length);
      assertEquals(477, integerArray2.length);
      assertEquals(9, integerArray1.length);
      
      Integer[] integerArray3 = ObjectArrays.grow(integerArray1, (-416));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray2);
      assertEquals(9, integerArray3.length);
      assertEquals(9, integerArray1.length);
      
      Random.setNextRandom(3);
      Integer[] integerArray4 = new Integer[3];
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray1));
      
      integerArray4[0] = integer6;
      integerArray4[1] = integer4;
      integerArray4[2] = integer7;
      MockRandom mockRandom0 = new MockRandom(1710L);
      assertNotNull(mockRandom0);
      
      Integer[] integerArray5 = ObjectArrays.shuffle(integerArray4, (java.util.Random) mockRandom0);
      assertFalse(integerArray5.equals((Object)integerArray0));
      assertFalse(integerArray5.equals((Object)integerArray3));
      assertFalse(integerArray5.equals((Object)integerArray1));
      assertFalse(integerArray5.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertNotNull(integerArray5);
      assertNotSame(integerArray5, integerArray0);
      assertSame(integerArray5, integerArray4);
      assertNotSame(integerArray5, integerArray3);
      assertNotSame(integerArray5, integerArray1);
      assertNotSame(integerArray5, integerArray2);
      assertSame(integerArray4, integerArray5);
      assertNotSame(integerArray4, integerArray0);
      assertNotSame(integerArray4, integerArray3);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray1);
      assertEquals(3, integerArray5.length);
      assertEquals(3, integerArray4.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2520);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2520, (int)integer1);
      
      Integer integer2 = new Integer(3736);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(3736, (int)integer2);
      
      Integer integer3 = new Integer(3736);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(3736, (int)integer3);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 8);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      ObjectArrays.mergeSort(integerArray2, 1411, 8, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      Integer integer4 = new Integer(8);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(8, (int)integer4);
      
      ObjectArrays.quickSort(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      ObjectArrays.fill(integerArray2, 0, 0, (Integer) null);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      Integer[] integerArray3 = ObjectArrays.ensureCapacity(integerArray1, 0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray3);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertSame(integerArray3, integerArray0);
      assertSame(integerArray3, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray3.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(0);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, 2520);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2520, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray1, 2397, 2520, integerArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1955);
      assertNotNull(integer0);
      assertEquals(1955, (int)integer0);
      
      Integer integer1 = new Integer((-3083));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3083), (int)integer1);
      
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      Integer integer3 = new Integer(59);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(59, (int)integer3);
      
      Integer integer4 = new Integer(1091);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(1091, (int)integer4);
      
      Integer integer5 = new Integer(2);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 1955);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1955, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray0, 355009);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(355009, integerArray2.length);
      
      Random.setNextRandom(241);
      Integer[] integerArray3 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray3.length);
      
      Integer integer6 = new Integer((-2028));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals((-2028), (int)integer6);
      
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray2, 2, 3777, integer2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(477);
      assertNotNull(integer0);
      assertEquals(477, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-896));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-896), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer3);
      
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer4);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(8, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, int0, 308);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertEquals(8, integerArray2.length);
      assertEquals(8, integerArray0.length);
      
      Integer[] integerArray3 = ObjectArrays.ensureCapacity(integerArray0, 8, 477);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertSame(integerArray3, integerArray0);
      assertSame(integerArray3, integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray3.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray2, 477, 0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(507);
      assertNotNull(integer0);
      assertEquals(507, (int)integer0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.fill(integerArray0, 507, (-1701), integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (507) is greater than end index (-1701)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      MockRandom mockRandom1 = new MockRandom((-1276L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      IntStream intStream0 = mockRandom0.ints();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(intStream0);
      assertNotSame(mockRandom0, mockRandom1);
      
      Integer[] integerArray0 = ObjectArrays.shuffle((Integer[]) null, 0, 0, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNull(integerArray0);
      assertNotSame(mockRandom0, mockRandom1);
      
      // Undeclared exception!
      try { 
        ObjectArrays.reverse((Integer[]) null, 0, 1649);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(255);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(255, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(255);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(255, (int)integer3);
      
      integerArray0[3] = integer3;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0[3], integerArray0[3], integerArray0[1]).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer4);
      
      int int1 = ObjectArrays.binarySearch(integerArray0, 2, 0, integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(int1 == int0);
      assertEquals(4, integerArray0.length);
      assertEquals((-3), int1);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer0;
      integerArray1[2] = integer2;
      integerArray1[3] = integer1;
      Integer integer5 = new Integer(int0);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2031, integerArray0[1], 255, integerArray1[0], 71).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray1, comparator1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(9, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.trim(integerArray0, 2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(2, integerArray2.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 272;
      Integer integer0 = new Integer(272);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(272, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-77));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-77), (int)integer1);
      
      integerArray0[1] = integer1;
      int int1 = 229;
      Integer integer2 = new Integer(229);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals(229, (int)integer2);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, 229, 272);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 229 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("", (-994));
      assertNotNull(integer0);
      assertEquals((-994), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer((-994));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-994), (int)integer3);
      
      Integer integer4 = new Integer(2735);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(2735, (int)integer4);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer3;
      integerArray1[2] = integer0;
      integerArray1[3] = integer2;
      integerArray1[4] = integer0;
      integerArray1[5] = integer2;
      integerArray1[6] = integer1;
      integerArray1[7] = integer3;
      Integer integer5 = new Integer(90);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(90, (int)integer5);
      
      integerArray1[8] = integer5;
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.setLength(integerArray0, int0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(0, integerArray2.length);
      
      MockRandom mockRandom0 = new MockRandom(1645L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray2, (int) integerArray1[3], int0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray0, (-723), 1, (Integer) null, (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147483286 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2520);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2520, (int)integer1);
      
      Integer integer2 = new Integer(3736);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3736, (int)integer2);
      
      Integer integer3 = new Integer(3736);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(3736, (int)integer3);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 8);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      ObjectArrays.mergeSort(integerArray2, 1411, 8, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      Integer integer4 = new Integer(8);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(8, (int)integer4);
      
      Integer integer5 = new Integer(2520);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(2520, (int)integer5);
      
      Integer integer6 = new Integer(1411);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(1411, (int)integer6);
      
      MockRandom mockRandom0 = new MockRandom(4202L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      Integer[] integerArray3 = ObjectArrays.shuffle(integerArray1, (java.util.Random) mockRandom0);
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertSame(integerArray3, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray3);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray3);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertEquals(0, integerArray3.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer integer1 = new Integer(7);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(7, (int)integer1);
      
      int int0 = 189812341;
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, 189812341);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(189812341, integerArray1.length);
      
      int int1 = 77713;
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray1, 77713, 189812341, integer1, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      
      int int0 = (-77);
      Integer integer1 = new Integer((-77));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-77), (int)integer1);
      
      Integer integer2 = new Integer((-741));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-741), (int)integer2);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (-1), (-1584));
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.copy(integerArray1);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      Integer[] integerArray3 = new Integer[7];
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      
      Integer integer3 = new Integer(822);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(822, (int)integer3);
      
      integerArray3[1] = integer3;
      integerArray3[2] = integer1;
      integerArray3[3] = integer0;
      integerArray3[4] = integer0;
      integerArray3[5] = integer1;
      integerArray3[6] = integer2;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray3, 296, int0, comparator0, integerArray2);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray1, integerArray3);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray2.length);
      assertEquals(7, integerArray3.length);
      
      ObjectArrays.mergeSort(integerArray3, (-1), (-499));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertEquals(7, integerArray3.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(477);
      assertNotNull(integer0);
      assertEquals(477, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-896));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-896), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer3);
      
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer((int) integerArray0[2]);
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals(8, integerArray0.length);
      assertEquals((-896), (int)integer6);
      
      Integer integer7 = new Integer(int0);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)int0));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      Integer integer8 = new Integer((-497));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer5));
      assertNotNull(integer8);
      assertEquals((-497), (int)integer8);
      
      int int1 = ObjectArrays.binarySearch(integerArray0, int0, 2, integer8);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(int1 == int0);
      assertEquals(8, integerArray0.length);
      assertEquals((-1), int1);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 477);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(477, integerArray1.length);
      assertEquals(8, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int2 = mockRandom0.nextInt();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      Integer[] integerArray2 = ObjectArrays.shuffle(integerArray1, 0, 12, (java.util.Random) mockRandom0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(477, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertEquals(477, integerArray2.length);
      
      Integer[] integerArray3 = ObjectArrays.grow(integerArray1, 12);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertSame(integerArray3, integerArray1);
      assertSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(477, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertEquals(477, integerArray3.length);
      
      Integer[] integerArray4 = ObjectArrays.ensureCapacity(integerArray0, int0, 36591211);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertNotNull(integerArray4);
      assertSame(integerArray0, integerArray4);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray1);
      assertNotSame(integerArray4, integerArray3);
      assertSame(integerArray4, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray4.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray1, (-2442), 2147482799, comparator0, integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2441 out of bounds for length 477
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(477);
      assertNotNull(integer0);
      assertEquals(477, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = new Integer((-896));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-896), (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer2);
      
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer3);
      
      integerArray0[4] = integer3;
      int int1 = 0;
      Integer integer4 = new Integer(0);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      Integer integer5 = new Integer((int) integerArray0[2]);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(8, integerArray0.length);
      assertEquals((-896), (int)integer5);
      
      Integer integer6 = new Integer((int) integerArray0[1]);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int1));
      assertTrue(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer6);
      
      Integer integer7 = new Integer((-497));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals((-497), (int)integer7);
      
      int int2 = ObjectArrays.binarySearch(integerArray0, (int) integerArray0[1], 2, integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, integerArray0.length);
      assertEquals((-478), int2);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 477);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(477, integerArray1.length);
      assertEquals(8, integerArray0.length);
      
      // Undeclared exception!
      ObjectArrays.grow(integerArray0, 2147482799, 94);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("", (-994));
      assertNotNull(integer0);
      assertEquals((-994), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer((-994));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-994), (int)integer3);
      
      Integer integer4 = new Integer(2735);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(2735, (int)integer4);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer3;
      integerArray1[2] = integer0;
      integerArray1[3] = integer2;
      integerArray1[4] = integer0;
      integerArray1[5] = integer2;
      integerArray1[6] = integer1;
      integerArray1[7] = integer3;
      Integer integer5 = new Integer((-994));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-994), (int)integer5);
      
      integerArray1[8] = integer5;
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray1, (-2183), (int) integerArray1[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1588 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("", (-994));
      assertNotNull(integer0);
      assertEquals((-994), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer((-994));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-994), (int)integer3);
      
      Integer integer4 = new Integer(2735);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(2735, (int)integer4);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer3;
      integerArray1[2] = integer0;
      integerArray1[3] = integer2;
      integerArray1[4] = integer0;
      integerArray1[5] = integer2;
      integerArray1[6] = integer1;
      integerArray1[7] = integer3;
      Integer integer5 = new Integer((-994));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals((-994), (int)integer5);
      
      integerArray1[8] = integer5;
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      
      Random.setNextRandom(0);
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray1, (-2183), (int) integerArray1[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1588 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-482);
      // Undeclared exception!
      try { 
        ObjectArrays.trim(integerArray0, (-482));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -482
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      Integer integer1 = new Integer((-1374));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1374), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(765);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(765, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      Integer integer4 = new Integer(365);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(365, (int)integer4);
      
      Integer integer5 = new Integer(570);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(570, (int)integer5);
      
      Integer integer6 = new Integer(41);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(41, (int)integer6);
      
      Integer integer7 = new Integer(0);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, (-529), 0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray1, 7, 0);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertEquals(10, integerArray2.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.trim(integerArray2, (-35038612));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -35038612
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2520);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2520, (int)integer1);
      
      Integer integer2 = new Integer(3736);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3736, (int)integer2);
      
      Integer integer3 = new Integer(3736);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(3736, (int)integer3);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 8);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      ObjectArrays.mergeSort(integerArray2, 1411, 8, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      Integer integer4 = new Integer(8);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(8, (int)integer4);
      
      ObjectArrays.quickSort(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      ObjectArrays.fill(integerArray2, 0, 0, (Integer) null);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      Integer[] integerArray3 = ObjectArrays.trim(integerArray1, 8);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray3);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray3);
      assertSame(integerArray3, integerArray1);
      assertSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray3.length);
      
      int int0 = 4200;
      int int1 = (-790);
      try { 
        Integer.valueOf(",=jW#tL[yVQyyv", 3342);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 3342 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(18);
      assertNotNull(integer0);
      assertEquals(18, (int)integer0);
      
      ObjectArrays.fill(integerArray0, integer0);
      assertEquals(7, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.trim(integerArray0, 1095);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(310);
      assertNotNull(integer0);
      assertEquals(310, (int)integer0);
      
      Integer integer1 = new Integer((-8));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-8), (int)integer1);
      
      Integer integer2 = new Integer(310);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(310, (int)integer2);
      
      // Undeclared exception!
      try { 
        ObjectArrays.copy(integerArray0, 310, (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length (-8) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer[] integerArray0 = null;
      int int0 = 166;
      // Undeclared exception!
      try { 
        ObjectArrays.copy((Integer[]) null, 166, 166);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(477);
      assertNotNull(integer0);
      assertEquals(477, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-896));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-896), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1705));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals((-1705), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      Integer integer8 = new Integer((-497));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertNotNull(integer8);
      assertEquals((-497), (int)integer8);
      
      int int1 = ObjectArrays.binarySearch(integerArray0, int0, 2, integer8);
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(int1 == int0);
      assertEquals(8, integerArray0.length);
      assertEquals((-1), int1);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 477);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(477, integerArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer[] integerArray2 = ObjectArrays.shuffle(integerArray1, 0, 12, (java.util.Random) mockRandom0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(477, integerArray1.length);
      assertEquals(477, integerArray2.length);
      
      Integer[] integerArray3 = ObjectArrays.grow(integerArray1, 12);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray3);
      assertSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertSame(integerArray3, integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(477, integerArray1.length);
      assertEquals(477, integerArray3.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2520);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2520, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.quickSort(integerArray1, comparator1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(boolean0);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, (-907), (-1391));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
      
      Integer[] integerArray3 = ObjectArrays.grow(integerArray1, 2520);
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray3);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray3);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(2520, integerArray3.length);
      
      Integer[] integerArray4 = ObjectArrays.grow(integerArray2, 0);
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertNotNull(integerArray4);
      assertSame(integerArray0, integerArray4);
      assertNotSame(integerArray0, integerArray3);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray3);
      assertSame(integerArray1, integerArray4);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray3);
      assertSame(integerArray2, integerArray4);
      assertSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray4, integerArray3);
      assertSame(integerArray4, integerArray1);
      assertSame(integerArray4, integerArray0);
      assertSame(integerArray4, integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
      assertEquals(0, integerArray4.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 272;
      Integer integer0 = new Integer(272);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(272, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = (-2992);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray0, (-2992), (int) integerArray0[0], integerArray0[0], comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147482287 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-741));
      assertNotNull(integer0);
      assertEquals((-741), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(770);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(770, (int)integer1);
      
      Integer integer2 = new Integer((-1204));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1204), (int)integer2);
      
      Integer integer3 = new Integer((-2518));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-2518), (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-741), 163, (-1204), (-2599), (-79)).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(9, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1771, (-2518), 8, (-741), (-2599)).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(9, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(9, integerArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (-1), (-2518));
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.copy(integerArray1);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertEquals(9, integerArray2.length);
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray3 = new Integer[6];
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      
      integerArray3[0] = integer1;
      integerArray3[1] = integer1;
      integerArray3[2] = integer2;
      integerArray3[3] = integer2;
      integerArray3[4] = integer1;
      integerArray3[5] = integer2;
      ObjectArrays.mergeSort(integerArray2, 822, 822, comparator2, integerArray3);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray1, integerArray3);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertEquals(9, integerArray2.length);
      assertEquals(6, integerArray3.length);
      
      int int0 = ObjectArrays.binarySearch(integerArray1, (-498), (-2518), integer0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray1, integerArray3);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertEquals(497, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(320);
      assertNotNull(integer0);
      assertEquals(320, (int)integer0);
      
      integerArray0[0] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0[0], 320, 8, 320, (-1424)).when(comparator0).compare(anyInt() , anyInt());
      Integer integer1 = new Integer((-68));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-68), (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(7, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(7, integerArray0.length);
      
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(7, integerArray0.length);
      assertEquals(320, (int)integer3);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      Integer integer4 = new Integer(8);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(8, (int)integer4);
      
      integerArray1[1] = integer4;
      integerArray1[2] = integer3;
      integerArray1[3] = integer3;
      integerArray1[4] = integer0;
      integerArray1[5] = integer3;
      Integer integer5 = new Integer(11551);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(11551, (int)integer5);
      
      integerArray1[6] = integer5;
      integerArray1[7] = integer1;
      integerArray1[8] = integer3;
      boolean boolean0 = ObjectArrays.equals(integerArray1, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity(integerArray1, 1601, 949);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-741));
      assertNotNull(integer0);
      assertEquals((-741), (int)integer0);
      
      Integer integer1 = new Integer(653);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(653, (int)integer1);
      
      int int0 = (-1175);
      Integer integer2 = new Integer((-741));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-741), (int)integer2);
      
      Integer integer3 = new Integer((-1493));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-1493), (int)integer3);
      
      Integer integer4 = new Integer((-741));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-741), (int)integer4);
      
      Integer integer5 = new Integer(653);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(653, (int)integer5);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, 3575);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3575, integerArray1.length);
      
      Integer integer6 = new Integer(616);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(616, (int)integer6);
      
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray1, 95, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 3575
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureOffsetLength(integerArray0, 88663, 88663);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (177326) is greater than array length (2)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-4498));
      assertNotNull(integer0);
      assertEquals((-4498), (int)integer0);
      
      Integer integer1 = new Integer((-4498));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4498), (int)integer1);
      
      MockRandom mockRandom0 = new MockRandom((-4498));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      Integer[] integerArray1 = ObjectArrays.shuffle(integerArray0, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertNotSame(mockRandom1, mockRandom0);
      assertSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureOffsetLength((Integer[]) null, 776, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer[] integerArray0 = null;
      int int0 = 1329;
      int int1 = (-1796);
      // Undeclared exception!
      try { 
        ObjectArrays.ensureOffsetLength((Integer[]) null, 1329, (-1796));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(1900);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1900, (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      Integer integer3 = new Integer(215);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(215, (int)integer3);
      
      integerArray1[1] = integer3;
      integerArray1[2] = integer2;
      integerArray1[3] = integer0;
      integerArray1[4] = integer0;
      integerArray1[5] = integer0;
      integerArray1[6] = integer2;
      integerArray1[7] = integer1;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(182, int0, (-4431), (-4301), 1516).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray1, comparator1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-723));
      assertNotNull(integer0);
      assertEquals((-723), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(11);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      
      Integer integer2 = new Integer((-498));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-498), (int)integer2);
      
      Integer integer3 = new Integer(11);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(11, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(29, integerArray0[0], (-723), 11, 11).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(759, 121, 11, 11, 4883).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(8, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-723));
      assertNotNull(integer0);
      assertEquals((-723), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(11);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      
      Integer integer2 = new Integer((-498));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-498), (int)integer2);
      
      Integer integer3 = new Integer(11);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(11, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(29, integerArray0[0], (-723), 11, 11).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-723), 4044, integerArray0[0], 11, 2469).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(8, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-723));
      assertNotNull(integer0);
      assertEquals((-723), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(11);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      
      Integer integer2 = new Integer((-498));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-498), (int)integer2);
      
      Integer integer3 = new Integer(11);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(11, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(29, integerArray0[0], (-723), 11, 11).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(8, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) int0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      ObjectArrays.fill(integerArray0, (int) integer1, 5, integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrays.quickSort(integerArray0);
      assertEquals(1, integerArray0.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, 0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
      
      ObjectArrays.fill(integerArray1, 0, 0, integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      Integer integer1 = new Integer((-1374));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1374), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(765);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(765, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      Integer integer4 = new Integer(365);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(365, (int)integer4);
      
      Integer integer5 = new Integer(570);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(570, (int)integer5);
      
      Integer integer6 = new Integer(41);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(41, (int)integer6);
      
      Integer integer7 = new Integer(0);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1374), 0).when(comparator0).compare(anyInt() , anyInt());
      int int0 = ObjectArrays.binarySearch(integerArray0, integer7, comparator0);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals(5, integerArray0.length);
      assertEquals(3, int0);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, (-529), 0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray1, 7, 0);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertEquals(10, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("", (-994));
      assertNotNull(integer0);
      assertEquals((-994), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(boolean0);
      
      int int0 = ObjectArrays.binarySearch(integerArray0, integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(1, int0);
      
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0[1], 0).when(comparator0).compare(anyInt() , anyInt());
      int int1 = ObjectArrays.binarySearch(integerArray0, integer3, comparator0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(int1 == int0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(2, int1);
      
      Integer[] integerArray2 = ObjectArrays.copy(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-741));
      assertNotNull(integer0);
      assertEquals((-741), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-741));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-741), (int)integer1);
      
      Integer integer2 = new Integer((-765));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-765), (int)integer2);
      
      Integer integer3 = new Integer(2503);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2503, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(8, integerArray0.length);
      
      Integer[] integerArray1 = new Integer[6];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      integerArray1[1] = integer1;
      integerArray1[2] = integer1;
      Integer integer4 = new Integer((-741));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-741), (int)integer4);
      
      integerArray1[3] = integer4;
      integerArray1[4] = integer1;
      integerArray1[5] = integer2;
      boolean boolean0 = ObjectArrays.equals(integerArray1, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray1.length);
      assertTrue(boolean0);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, (-498), 1601);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertEquals(6, integerArray2.length);
      assertEquals(6, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray0, 747, (int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = 2520;
      Integer integer1 = new Integer(2520);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2520, (int)integer1);
      
      Integer integer2 = new Integer(3736);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(3736, (int)integer2);
      
      Integer integer3 = new Integer((-1048));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1048), (int)integer3);
      
      int int1 = ObjectArrays.binarySearch(integerArray1, integer0);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(int1 == int0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals((-1), int1);
      
      ObjectArrays.mergeSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray1, 0, 3736, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer(298411);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(298411, (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 2806);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(2806, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.setLength(integerArray1, 2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(2806, integerArray1.length);
      assertEquals(2, integerArray2.length);
      
      Integer[] integerArray3 = ObjectArrays.ensureCapacity(integerArray2, 2806);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(2806, integerArray1.length);
      assertEquals(2, integerArray2.length);
      assertEquals(2806, integerArray3.length);
      
      Integer integer3 = new Integer(2806);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2806, (int)integer3);
      
      ObjectArrays.fill(integerArray3, integer3);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(2806, integerArray1.length);
      assertEquals(2, integerArray2.length);
      assertEquals(2806, integerArray3.length);
      
      int int0 = 3121;
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray1, 431, 298411, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 149420 out of bounds for length 2806
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(477);
      assertNotNull(integer0);
      assertEquals(477, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-896));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-896), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1705));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals((-1705), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      Integer integer8 = new Integer((-1810));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertNotNull(integer8);
      assertEquals((-1810), (int)integer8);
      
      Integer integer9 = new Integer((-497));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer3));
      assertNotNull(integer9);
      assertEquals((-497), (int)integer9);
      
      int int1 = new Integer((-896));
      assertFalse(int1 == int0);
      assertEquals((-896), int1);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 477);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(477, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray0, 3229, 2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(3229, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-741));
      assertNotNull(integer0);
      assertEquals((-741), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 95;
      Integer integer1 = new Integer(95);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(95, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(8, integerArray0.length);
      assertEquals((-741), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertEquals((-741), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1614);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(1614, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-741));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-741), (int)integer5);
      
      integerArray0[5] = integer5;
      int int1 = (-2484);
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, (-2484));
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = new Integer[6];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      Integer integer6 = new Integer(int0);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(int0 == int1);
      assertNotNull(integer6);
      assertEquals(95, (int)integer6);
      
      integerArray2[1] = integer6;
      Integer integer7 = new Integer(320);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals(320, (int)integer7);
      
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray1, integer7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-741));
      assertNotNull(integer0);
      assertEquals((-741), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2503);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2503, (int)integer1);
      
      Integer integer2 = new Integer((-498));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-498), (int)integer2);
      
      Integer integer3 = new Integer(2503);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2503, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(8, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity(integerArray0, 2503, (-473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer[] integerArray1 = ObjectArrays.shuffle(integerArray0, (java.util.Random) mockRandom0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity(integerArray0, 25, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-741));
      assertNotNull(integer0);
      assertEquals((-741), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2503);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2503, (int)integer1);
      
      Integer integer2 = new Integer((-498));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-498), (int)integer2);
      
      Integer integer3 = new Integer(2503);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2503, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-741), (-1641), (-2062), (-741), 766).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(50, (-741), integerArray0[0], 1258, 8).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(8, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity(integerArray0, 2503, (-473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-723));
      assertNotNull(integer0);
      assertEquals((-723), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(11);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      
      Integer integer2 = new Integer((-498));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-498), (int)integer2);
      
      Integer integer3 = new Integer(11);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(11, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(29, integerArray0[0], (-723), 11, 11).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(11, (-907), 908, 29, 8).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(8, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity(integerArray0, 11, (-473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(255);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(255, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(255);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(255, (int)integer3);
      
      integerArray0[3] = integer3;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0[3], integerArray0[3], integerArray0[1]).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer4);
      
      int int1 = ObjectArrays.binarySearch(integerArray0, 2, 0, integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals(4, integerArray0.length);
      assertEquals((-3), int1);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer0;
      integerArray1[2] = integer2;
      integerArray1[3] = integer1;
      Integer integer5 = new Integer(int0);
      assertFalse(int0 == int1);
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray1, comparator1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer[] integerArray1 = ObjectArrays.shuffle(integerArray0, (java.util.Random) mockRandom0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.fill((Integer[]) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("", (-994));
      assertNotNull(integer0);
      assertEquals((-994), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer((-994));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-994), (int)integer3);
      
      Integer integer4 = new Integer(2735);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(2735, (int)integer4);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer3;
      integerArray1[2] = integer0;
      integerArray1[3] = integer2;
      integerArray1[4] = integer0;
      integerArray1[5] = integer2;
      integerArray1[6] = integer1;
      integerArray1[7] = integer3;
      Integer integer5 = new Integer(90);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(90, (int)integer5);
      
      integerArray1[8] = integer5;
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray1, 0, 323);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      int int0 = 217;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort((Integer[]) null, 217, 1231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(255);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(255, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(255);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(255, (int)integer3);
      
      integerArray0[3] = integer3;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0[2], (-4642), integerArray0[2], 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer4);
      
      int int0 = ObjectArrays.binarySearch(integerArray0, 2, 0, integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertEquals(4, integerArray0.length);
      assertEquals((-3), int0);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer0;
      integerArray1[2] = integer2;
      integerArray1[3] = integer1;
      Integer integer5 = new Integer(313);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(313, (int)integer5);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray0, (int) integerArray0[1], (-1486), (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1487 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(255);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(255, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(255);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(255, (int)integer3);
      
      integerArray0[1] = integer3;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0[2], (-4642), integerArray0[2], 21).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      
      Integer integer4 = new Integer((-4642));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-4642), (int)integer4);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1374));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1374), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(765);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(765, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(5, integerArray0.length);
      assertEquals(365, (int)integer4);
      
      integerArray0[4] = integer4;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, (int) integerArray0[2], (-1753), comparator0);
      assertEquals(5, integerArray0.length);
      
      int int0 = (-5445);
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (-5445), (int) integerArray0[4]);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      int int1 = ObjectArrays.binarySearch(integerArray0, integerArray0[2]);
      assertFalse(int1 == int0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(2, int1);
      
      ObjectArrays.mergeSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      Integer[] integerArray2 = new Integer[1];
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      integerArray2[0] = integer3;
      boolean boolean0 = ObjectArrays.equals(integerArray2, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(1, integerArray2.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray0, (-5445), 0, (Integer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147480925 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      Integer integer1 = new Integer(9147661);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(9147661, (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(365);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(365, (int)integer2);
      
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      Integer integer4 = new Integer(41);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(41, (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(570, 0).when(comparator0).compare(anyInt() , anyInt());
      int int0 = ObjectArrays.binarySearch(integerArray0, integer5, comparator0);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(5, integerArray0.length);
      assertEquals(0, int0);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, (-529), 0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, 23, 1613, (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 23 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 2;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort((Integer[]) null, (-922), (-580), (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1374));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1374), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(765);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(765, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(5, integerArray0.length);
      assertEquals(365, (int)integer4);
      
      integerArray0[4] = integer4;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, (int) integerArray0[2], (-1753), comparator0);
      assertEquals(5, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, 23, 365, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 23 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer[] integerArray0 = new Integer[10];
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer[] integerArray1 = ObjectArrays.shuffle(integerArray0, (java.util.Random) mockRandom0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      Integer integer0 = new Integer((-1064));
      assertNotNull(integer0);
      assertEquals((-1064), (int)integer0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = ObjectArrays.binarySearch(integerArray1, 2396, 656, integer0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertEquals((-2397), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(272);
      assertNotNull(integer0);
      assertEquals(272, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-77));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-77), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(272);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(272, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(4, integerArray0.length);
      assertEquals(272, (int)integer3);
      
      integerArray0[3] = integer3;
      MockRandom mockRandom0 = new MockRandom(1922L);
      assertNotNull(mockRandom0);
      
      Integer[] integerArray1 = ObjectArrays.shuffle(integerArray0, (java.util.Random) mockRandom0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 2;
      int int1 = 30;
      Integer integer0 = new Integer(30);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(30, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, 30);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(30, integerArray1.length);
      
      int int2 = ObjectArrays.binarySearch(integerArray0, 30, 30, (Integer) null, (Comparator<Integer>) null);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals((-31), int2);
      
      Integer[] integerArray2 = ObjectArrays.reverse(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray2.length);
      
      Integer integer2 = new Integer((-31));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int2));
      assertNotNull(integer2);
      assertEquals((-31), (int)integer2);
      
      Integer integer3 = new Integer((-2026));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertNotNull(integer3);
      assertEquals((-2026), (int)integer3);
      
      Integer integer4 = new Integer(30);
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int2));
      assertNotNull(integer4);
      assertEquals(30, (int)integer4);
      
      Integer integer5 = new Integer(2);
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      
      Integer integer6 = new Integer(7);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int1));
      assertNotNull(integer6);
      assertEquals(7, (int)integer6);
      
      Integer[] integerArray3 = new Integer[8];
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      
      integerArray3[0] = integer6;
      integerArray3[1] = integer2;
      integerArray3[2] = integer2;
      integerArray3[3] = integer4;
      integerArray3[4] = integer0;
      integerArray3[5] = integer5;
      integerArray3[6] = integer0;
      integerArray3[7] = integer1;
      int int3 = ObjectArrays.binarySearch(integerArray3, 236, 2, (Integer) int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(8, integerArray3.length);
      assertEquals((-237), int3);
      
      Integer[] integerArray4 = ObjectArrays.setLength(integerArray2, 2);
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertNotNull(integerArray4);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray4);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray3);
      assertNotSame(integerArray4, integerArray0);
      assertNotSame(integerArray4, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray4);
      assertNotSame(integerArray2, integerArray3);
      assertEquals(4, integerArray0.length);
      assertEquals(2, integerArray4.length);
      assertEquals(4, integerArray2.length);
      
      Integer[] integerArray5 = ObjectArrays.setLength(integerArray4, int0);
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray4));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray4));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertFalse(integerArray5.equals((Object)integerArray0));
      assertFalse(integerArray5.equals((Object)integerArray2));
      assertFalse(integerArray5.equals((Object)integerArray1));
      assertFalse(integerArray5.equals((Object)integerArray3));
      assertNotNull(integerArray5);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray4);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray5);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray3);
      assertSame(integerArray4, integerArray5);
      assertNotSame(integerArray4, integerArray0);
      assertNotSame(integerArray4, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray4);
      assertNotSame(integerArray2, integerArray5);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray5, integerArray0);
      assertSame(integerArray5, integerArray4);
      assertNotSame(integerArray5, integerArray2);
      assertNotSame(integerArray5, integerArray1);
      assertNotSame(integerArray5, integerArray3);
      assertEquals(4, integerArray0.length);
      assertEquals(2, integerArray4.length);
      assertEquals(4, integerArray2.length);
      assertEquals(2, integerArray5.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray3, (-645), int0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -645 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      // Undeclared exception!
      try { 
        ObjectArrays.setLength(integerArray0, (-1467));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1467
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Random.setNextRandom(2056);
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-455);
      Integer integer0 = new Integer((-455));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-455), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2056);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2056, (int)integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        ObjectArrays.setLength(integerArray0, (-455));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -455
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectArrays.reverse((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 155);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(155, integerArray1.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray1, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(155, integerArray1.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray1, 4133, 5123, integerArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4134 out of bounds for length 155
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1374));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1374), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(765);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(765, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(5, integerArray0.length);
      assertEquals(365, (int)integer4);
      
      integerArray0[4] = integer4;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, (int) integerArray0[2], (-1753), comparator0);
      assertEquals(5, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (-5445), (int) integerArray0[4]);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      int int0 = ObjectArrays.binarySearch(integerArray0, integerArray0[2]);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(2, int0);
      
      ObjectArrays.mergeSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      
      Integer[] integerArray2 = new Integer[8];
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      Integer integer5 = new Integer(93);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(93, (int)integer5);
      
      integerArray2[0] = integer5;
      integerArray2[1] = integer1;
      integerArray2[2] = integer3;
      integerArray2[3] = integer0;
      integerArray2[4] = integer4;
      integerArray2[5] = integer0;
      integerArray2[6] = integer2;
      integerArray2[7] = integer1;
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray0, (-1199), 765, integerArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1198 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 320;
      Integer integer0 = new Integer(320);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(320, (int)integer0);
      
      integerArray0[0] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(7, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, 320);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(320, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray0, 0, 1200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 600 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.setLength(integerArray1, 1115);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1115, integerArray2.length);
      
      Integer integer0 = new Integer(1851);
      assertNotNull(integer0);
      assertEquals(1851, (int)integer0);
      
      boolean boolean0 = ObjectArrays.equals(integerArray1, integerArray2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1115, integerArray2.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity(integerArray1, 1851, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("", (-994));
      assertNotNull(integer0);
      assertEquals((-994), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(boolean0);
      
      Integer integer3 = new Integer(50);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(50, (int)integer3);
      
      int int0 = ObjectArrays.binarySearch(integerArray0, integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(1, int0);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray0, (-819));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray2.length);
      
      Integer integer4 = new Integer((int) integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer4);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      int int1 = ObjectArrays.binarySearch(integerArray0, integer4, comparator0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(int1 == int0);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertEquals(3, integerArray0.length);
      assertEquals(1, int1);
      
      Integer[] integerArray3 = ObjectArrays.copy(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray3.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer((-3114));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3114), (int)integer1);
      
      int int0 = (-1753);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray0, (-3114), (-1753), (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3113 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, 4);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.setLength(integerArray0, 4);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(4, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2475));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2475), (int)integer1);
      
      MockRandom mockRandom1 = new MockRandom((-1276L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      Integer[] integerArray0 = ObjectArrays.shuffle((Integer[]) null, 0, 0, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNull(integerArray0);
      assertNotSame(mockRandom0, mockRandom1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(255);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(255, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(255);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(255, (int)integer3);
      
      integerArray0[3] = integer3;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(347, 0, 255).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer4);
      
      int int0 = ObjectArrays.binarySearch(integerArray0, 2, 0, integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertEquals(4, integerArray0.length);
      assertEquals((-3), int0);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer0;
      integerArray1[2] = integer2;
      integerArray1[3] = integer1;
      Integer integer5 = new Integer(313);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(313, (int)integer5);
      
      integerArray1[4] = integer5;
      Integer integer6 = new Integer(313);
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals(313, (int)integer6);
      
      integerArray1[5] = integer6;
      integerArray1[6] = integer2;
      integerArray1[7] = integer3;
      integerArray1[8] = integer3;
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 0, 0);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray2.length);
      assertEquals(9, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2520);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2520, (int)integer1);
      
      Integer integer2 = new Integer(3736);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3736, (int)integer2);
      
      Integer integer3 = new Integer((-1048));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1048), (int)integer3);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 8);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      ObjectArrays.mergeSort(integerArray2, 1421, 8, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray0, 3736, 4776223, integer2, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2389979 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      
      Integer integer0 = new Integer(4654);
      assertNotNull(integer0);
      assertEquals(4654, (int)integer0);
      
      Integer integer1 = new Integer((-606));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-606), (int)integer1);
      
      Integer integer2 = Integer.valueOf(1126);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1126, (int)integer2);
      
      Integer integer3 = new Integer((-3512));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-3512), (int)integer3);
      
      int int0 = 3369;
      Integer[] integerArray1 = new Integer[8];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer3;
      integerArray1[1] = integer1;
      integerArray1[2] = integer2;
      integerArray1[3] = integer0;
      integerArray1[4] = integer1;
      integerArray1[5] = integer0;
      integerArray1[6] = integer1;
      Integer integer4 = new Integer((-3248));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals((-3248), (int)integer4);
      
      integerArray1[7] = integer4;
      int int1 = 101;
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray1, 101, 3975);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 102 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 8);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray1, 8, (-1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      // Undeclared exception!
      try { 
        ObjectArrays.grow(integerArray0, 931, 931);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      Integer integer1 = new Integer((-1374));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1374), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(765);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(765, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      Integer integer4 = new Integer(365);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(365, (int)integer4);
      
      Integer integer5 = new Integer(570);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(570, (int)integer5);
      
      Integer integer6 = new Integer(41);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(41, (int)integer6);
      
      Integer integer7 = new Integer(0);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      int int0 = ObjectArrays.binarySearch(integerArray0, integer7, comparator0);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals(5, integerArray0.length);
      assertEquals(2, int0);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, (-529), 0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray1, 7, 0);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertEquals(10, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(101, (int)integer2);
      
      integerArray0[2] = integer2;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(int0, (-1235), (-1235)).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(3, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1235), (-1235), int0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(3, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      
      int int0 = 0;
      int int1 = 60091;
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray0, 0, 60091, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(255);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(255, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Integer integer3 = new Integer((-967));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-967), (int)integer3);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer(126);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(126, (int)integer1);
      
      ObjectArrays.fill(integerArray0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(9, integerArray0.length);
      
      Integer integer2 = new Integer(1397);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1397, (int)integer2);
      
      ObjectArrays.quickSort(integerArray0);
      assertEquals(9, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, 1397);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(1397, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray0, (-305));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray2.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray1, (-1753), 1397, integer2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147483469 out of bounds for length 1397
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ObjectArrays.quickSort(integerArray0, 220, (-1592));
      assertEquals(7, integerArray0.length);
      
      Integer integer0 = new Integer(1678);
      assertNotNull(integer0);
      assertEquals(1678, (int)integer0);
      
      Integer[] integerArray1 = new Integer[3];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      Integer integer1 = new Integer(447);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(447, (int)integer1);
      
      integerArray1[1] = integer1;
      integerArray1[2] = integer0;
      ObjectArrays.quickSort(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(62);
      assertNotNull(integer0);
      assertEquals(62, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-593));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-593), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1983));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1983), (int)integer2);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = ObjectArrays.binarySearch(integerArray0, 0, (-3846), integer2, comparator0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2, integerArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray0, (-1616), 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -784 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 7;
      Integer integer0 = new Integer(7);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(7, (int)integer1);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) int0;
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray1.length);
      
      int int1 = ObjectArrays.binarySearch(integerArray1, int0, int0, (Integer) int0, (Comparator<Integer>) null);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(int1 == int0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertEquals((-8), int1);
      
      Integer[] integerArray2 = ObjectArrays.reverse(integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int0 == int1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray2.length);
      
      Integer integer2 = new Integer(7);
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(7, (int)integer2);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("", (-994));
      assertNotNull(integer0);
      assertEquals((-994), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(boolean0);
      
      Integer integer3 = new Integer(50);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(50, (int)integer3);
      
      int int0 = ObjectArrays.binarySearch(integerArray0, integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(1, int0);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray0, (-819));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray2.length);
      
      Integer integer4 = new Integer((int) integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer4);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(50, 0).when(comparator0).compare(anyInt() , anyInt());
      int int1 = ObjectArrays.binarySearch(integerArray0, integer4, comparator0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(int1 == int0);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertEquals(3, integerArray0.length);
      assertEquals(0, int1);
      
      Integer[] integerArray3 = ObjectArrays.copy(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertNotNull(integerArray3);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray3.length);
      
      Integer[] integerArray4 = ObjectArrays.setLength(integerArray1, 41);
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray4);
      assertNotSame(integerArray4, integerArray3);
      assertNotSame(integerArray4, integerArray1);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray0);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray4);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(41, integerArray4.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer[] integerArray0 = null;
      int int0 = 611382451;
      int int1 = 2;
      ObjectArrays.quickSort((Integer[]) null, 611382451, 2);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort((Integer[]) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer[] integerArray0 = null;
      int int0 = 187;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort((Integer[]) null, 0, 187, comparator0, (Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.valueOf(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = new Integer(8);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(8, (int)integer1);
      
      // Undeclared exception!
      try { 
        ObjectArrays.equals((Integer[]) null, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer[] integerArray0 = null;
      int int0 = (-2046);
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity((Integer[]) null, 3722, (-2046));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-723));
      assertNotNull(integer0);
      assertEquals((-723), (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(4, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (-1186));
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-508));
      assertNotNull(integer0);
      assertEquals((-508), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-508));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-508), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-508));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-508), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-816));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-816), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1315);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(1315, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("Rr3\"qy#", 1315);
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(1315, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (int) integerArray0[3]);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ObjectArrays.fill(integerArray0, (Integer) null);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, (-655), (-655), comparator0, integerArray0);
      assertEquals(1, integerArray0.length);
      
      int int1 = ObjectArrays.binarySearch(integerArray0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, int1);
      
      ObjectArrays.fill(integerArray0, (Integer) int0);
      assertTrue(int0 == int1);
      assertEquals(1, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, comparator1);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, (-655));
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      int int2 = 1200;
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray1, 0, 1200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 600 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(101, (int)integer2);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, 101);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(101, integerArray1.length);
      
      int int1 = (-1748);
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray0, (-1748), 1517);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -115 out of bounds for length 3
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-4498));
      assertNotNull(integer0);
      assertEquals((-4498), (int)integer0);
      
      Integer integer1 = new Integer((-4498));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4498), (int)integer1);
      
      MockRandom mockRandom0 = new MockRandom((-4498));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      Integer[] integerArray1 = ObjectArrays.shuffle(integerArray0, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertNotSame(mockRandom1, mockRandom0);
      assertSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray0, (-4498));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.valueOf((-1300));
      assertNotNull(integer0);
      assertEquals((-1300), (int)integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1300)).when(comparator0).compare(anyInt() , anyInt());
      int int0 = ObjectArrays.binarySearch(integerArray0, integer0, comparator0);
      assertEquals(7, integerArray0.length);
      assertEquals(3, int0);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, (-2623), (-1300), comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2623 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(272);
      assertNotNull(integer0);
      assertEquals(272, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = (-77);
      Integer integer1 = new Integer((-77));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-77), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(272);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(272, (int)integer2);
      
      Integer integer3 = new Integer((-77));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-77), (int)integer3);
      
      Integer integer4 = new Integer((-77));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-77), (int)integer4);
      
      Integer integer5 = new Integer((-77));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals((-77), (int)integer5);
      
      Integer integer6 = new Integer((-77));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals((-77), (int)integer6);
      
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray0, integer6, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("", (-994));
      assertNotNull(integer0);
      assertEquals((-994), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-994), (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      int int1 = ObjectArrays.binarySearch(integerArray0, integer3, comparator0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(int1 == int0);
      assertEquals(3, integerArray0.length);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 4);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(4654);
      assertNotNull(integer0);
      assertEquals(4654, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, 50);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(50, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 7;
      Integer integer0 = new Integer(7);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(7, (int)integer1);
      
      integerArray0[1] = integer0;
      Integer integer2 = new Integer(7);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(7, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray1.length);
      
      int int1 = new Integer(int0);
      assertTrue(int1 == int0);
      assertEquals(7, int1);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray1, int0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertTrue(int0 == int1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray2.length);
      
      Integer integer3 = new Integer(4);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertNotNull(integer3);
      assertEquals(4, (int)integer3);
      
      Integer[] integerArray3 = ObjectArrays.reverse(integerArray0, int0, 7);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertTrue(int0 == int1);
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertNotNull(integerArray3);
      assertSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertSame(integerArray3, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray3.length);
      
      Integer[] integerArray4 = ObjectArrays.copy(integerArray3);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertTrue(int0 == int1);
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertNotNull(integerArray4);
      assertSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray4);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray4);
      assertNotSame(integerArray4, integerArray2);
      assertNotSame(integerArray4, integerArray1);
      assertNotSame(integerArray4, integerArray3);
      assertNotSame(integerArray4, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray3.length);
      assertEquals(3, integerArray4.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int2 = mockRandom0.nextInt(24);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray3, 1561, (-192), (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -193 out of bounds for length 3
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 8);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray1, 5553, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2780 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(319);
      assertNotNull(integer0);
      assertEquals(319, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 237;
      Integer integer1 = new Integer(237);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(237, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1163));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1163), (int)integer2);
      
      integerArray0[2] = integer2;
      int int1 = 0;
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)int1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        ObjectArrays.reverse(integerArray0, 237, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 118 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(50);
      assertNotNull(integer0);
      assertEquals(50, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, 50, 50, comparator0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(7, integerArray0.length);
      
      Integer integer0 = new Integer(590);
      assertNotNull(integer0);
      assertEquals(590, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.shuffle(integerArray1, 607, 607, (java.util.Random) null);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
      
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      
      ObjectArrays.mergeSort(integerArray0, 0, (-3248), integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureFromTo(integerArray0, 0, (-2859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (0) is greater than end index (-2859)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(321);
      assertNotNull(integer0);
      assertEquals(321, (int)integer0);
      
      Integer integer1 = new Integer(1868);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1868, (int)integer1);
      
      Integer integer2 = new Integer(321);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(321, (int)integer2);
      
      Integer integer3 = new Integer(1868);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1868, (int)integer3);
      
      Integer integer4 = new Integer(1403);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(1403, (int)integer4);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 8);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray0, 2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray2.length);
      
      Random.setNextRandom((-2923));
      Integer[] integerArray3 = ObjectArrays.copy(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray3.length);
      
      Integer integer5 = new Integer((-539));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-539), (int)integer5);
      
      Integer integer6 = new Integer((-1540));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals((-1540), (int)integer6);
      
      int int0 = ObjectArrays.binarySearch(integerArray1, 41669479, 2, integer6);
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray3);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertEquals((-41669480), int0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray2, (-41669480), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -41669479 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 7;
      Integer integer0 = new Integer(7);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(7, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("n/w'C43:<E}", int0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(7, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray1.length);
      
      int int1 = ObjectArrays.binarySearch(integerArray1, int0, int0, (Integer) int0, (Comparator<Integer>) null);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(int1 == int0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertEquals((-8), int1);
      
      Integer[] integerArray2 = ObjectArrays.reverse(integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int0 == int1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray2.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.grow(integerArray1, 3821, 7129);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2520);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2520, (int)integer1);
      
      Integer integer2 = new Integer(3736);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(3736, (int)integer2);
      
      Integer integer3 = new Integer(699);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(699, (int)integer3);
      
      Integer[] integerArray2 = new Integer[4];
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      integerArray2[0] = integer1;
      integerArray2[1] = integer0;
      integerArray2[2] = integer3;
      integerArray2[3] = integer0;
      Integer[] integerArray3 = ObjectArrays.ensureCapacity(integerArray2, int0);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertSame(integerArray3, integerArray2);
      assertEquals(4, integerArray2.length);
      assertEquals(4, integerArray3.length);
      
      ObjectArrays.mergeSort(integerArray3, (int) integerArray2[0], (int) integerArray2[0], integerArray3);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertSame(integerArray3, integerArray2);
      assertEquals(4, integerArray2.length);
      assertEquals(4, integerArray3.length);
      
      Integer integer4 = new Integer(3736);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(3736, (int)integer4);
      
      ObjectArrays.quickSort(integerArray3);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertSame(integerArray3, integerArray2);
      assertEquals(4, integerArray2.length);
      assertEquals(4, integerArray3.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.fill(integerArray1, (int) integerArray2[3], 3736, (Integer) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (3736) is greater than array length (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.reverse(integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ObjectArrays.reverse(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.quickSort(integerArray1, comparator0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = new Integer[4];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      Integer integer0 = new Integer((-3512));
      assertNotNull(integer0);
      assertEquals((-3512), (int)integer0);
      
      integerArray2[0] = integer0;
      int int0 = (-606);
      Integer integer1 = new Integer((-606));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-606), (int)integer1);
      
      integerArray2[1] = integer1;
      Integer integer2 = Integer.valueOf(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray2[2] = integer2;
      Integer integer3 = new Integer((int) integerArray2[0]);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(4, integerArray2.length);
      assertEquals((-3512), (int)integer3);
      
      integerArray2[3] = integer3;
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray2, (int) integerArray2[1], 3369);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -605 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 248;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, 217, 248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 217 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-741));
      assertNotNull(integer0);
      assertEquals((-741), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(95);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(95, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1175));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1175), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertEquals((-1175), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1614);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(1614, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-741));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals((-741), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1614);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      assertEquals(1614, (int)integer7);
      
      integerArray0[7] = integer7;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, 0, (int) integerArray0[4]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 201 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 248;
      int int1 = 8388451;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0, 248, 8388451);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 248 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectArrays.copy((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(101, (int)integer2);
      
      integerArray0[2] = integer2;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(3, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator1);
      assertEquals(3, integerArray0.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(68);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(68, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1003);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      assertEquals(1003, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-4659));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertNotNull(integer8);
      assertEquals((-4659), (int)integer8);
      
      integerArray0[8] = integer8;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.quickSort(integerArray0, 74, 2, comparator0);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ObjectArrays.quickSort(integerArray0, (Comparator<Integer>) null);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Integer[] integerArray0 = new Integer[13];
      Integer integer0 = new Integer((-2859));
      assertNotNull(integer0);
      assertEquals((-2859), (int)integer0);
      
      Integer integer1 = new Integer((-2859));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2859), (int)integer1);
      
      int int0 = 570;
      Integer integer2 = new Integer(3825);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3825, (int)integer2);
      
      Integer integer3 = Integer.valueOf(570);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(570, (int)integer3);
      
      Integer integer4 = new Integer(229);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(229, (int)integer4);
      
      Integer integer5 = new Integer(204);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(204, (int)integer5);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Integer[] integerArray1 = ObjectArrays.grow(integerArray0, 320, 2);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(13, integerArray0.length);
      assertEquals(320, integerArray1.length);
      
      int int1 = 234;
      // Undeclared exception!
      try { 
        ObjectArrays.ensureFromTo((Integer[]) null, 234, 241);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer[] integerArray0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        ObjectArrays.ensureFromTo((Integer[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 8);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(8);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray0, 8, 1478, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1477 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(94);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(94, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2599));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-2599), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(58);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(58, (int)integer5);
      
      integerArray0[5] = integer5;
      MockRandom mockRandom0 = new MockRandom(94);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray0, (-418), (int) integerArray0[4], (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2600 out of bounds for length 6
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(320);
      assertNotNull(integer0);
      assertEquals(320, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(7, integerArray0.length);
      assertEquals(320, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      integerArray0[2] = integerArray0[1];
      Integer integer3 = new Integer(3312);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(3312, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(7, integerArray0.length);
      assertEquals(320, (int)integer4);
      
      Integer integer5 = new Integer((int) integerArray0[3]);
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(7, integerArray0.length);
      assertEquals(3312, (int)integer5);
      
      integerArray0[5] = integer5;
      integerArray0[6] = integer3;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(320);
      assertNotNull(integer0);
      assertEquals(320, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(7, integerArray0.length);
      assertEquals(320, (int)integer1);
      
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      Integer integer3 = new Integer(320);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(320, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(7, integerArray0.length);
      assertEquals(320, (int)integer4);
      
      integerArray0[5] = integerArray0[3];
      integerArray0[6] = integer3;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(320);
      assertNotNull(integer0);
      assertEquals(320, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(7, integerArray0.length);
      assertEquals(320, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = new Integer(3312);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(3312, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(7, integerArray0.length);
      assertEquals(320, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(7, integerArray0.length);
      assertEquals(3312, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(90);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(90, (int)integer6);
      
      integerArray0[6] = integer6;
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      // Undeclared exception!
      try { 
        ObjectArrays.quickSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.fill(integerArray0, 1647, 6328, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (6328) is greater than array length (7)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2239));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2239), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf((int) integerArray0[1]);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      assertEquals((-2239), (int)integer2);
      
      integerArray0[2] = integer2;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, (-1520), (-3024), comparator0);
      assertEquals(3, integerArray0.length);
      
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(3, integerArray0.length);
      assertEquals((-2239), (int)integer3);
      
      // Undeclared exception!
      try { 
        ObjectArrays.fill(integerArray0, int0, 2297, integer3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (2297) is greater than array length (3)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      // Undeclared exception!
      try { 
        ObjectArrays.ensureFromTo(integerArray0, 8, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (8) is greater than array length (7)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(132);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(132, (int)integer3);
      
      integerArray0[3] = integer3;
      int int1 = (-1);
      Integer integer4 = new Integer((-1));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1898));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals((-1898), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertFalse(int0 == int1);
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int1));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(int0 == int1);
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = Integer.valueOf(int0);
      assertFalse(int0 == int1);
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      
      integerArray0[8] = integer8;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray0, (int) integerArray0[5], int1, comparator0, integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1897 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      Integer[] integerArray1 = ObjectArrays.shuffle(integerArray0, (java.util.Random) mockRandom0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray1, (-3452), (-1361), (Comparator<Integer>) null, integerArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3451 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(70079959);
      assertNotNull(integer0);
      assertEquals(70079959, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(70079959);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(70079959, (int)integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        ObjectArrays.copy(integerArray0, (int) integerArray0[0], (int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (140159918) is greater than array length (2)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        ObjectArrays.copy(integerArray0, 11890, 11890);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (23780) is greater than array length (2)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(2444);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2444, (int)integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.quickSort(integerArray0, comparator0);
      assertEquals(5, integerArray0.length);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (-1411), (int) integerArray0[0]);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      ObjectArrays.mergeSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Integer integer0 = new Integer((-3114));
      assertNotNull(integer0);
      assertEquals((-3114), (int)integer0);
      
      Integer integer1 = new Integer((-3114));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3114), (int)integer1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      ObjectArrays.mergeSort(integerArray0, (int) integerArray0[1], (int) integerArray0[0], (Comparator<Integer>) null);
      assertEquals(8, integerArray0.length);
      
      Integer integer2 = new Integer((int) integerArray0[5]);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(8, integerArray0.length);
      assertEquals((-3114), (int)integer2);
      
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1374));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1374), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(765);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(765, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(5, integerArray0.length);
      assertEquals(365, (int)integer4);
      
      integerArray0[4] = integer4;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, (int) integerArray0[2], (-1753), comparator0);
      assertEquals(5, integerArray0.length);
      
      Integer integer5 = new Integer(365);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(365, (int)integer5);
      
      Integer integer6 = new Integer(313);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(313, (int)integer6);
      
      // Undeclared exception!
      try { 
        ObjectArrays.ensureCapacity(integerArray0, 2152, (-2147482160));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(477);
      assertNotNull(integer0);
      assertEquals(477, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-896));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-896), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("org.codelibs.jhighlight.fastutil.objects.ObjectArrays$ArrayHashStrategy", 3036);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(3036, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1705));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals((-1705), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      integerArray0[7] = integer7;
      MockRandom mockRandom0 = new MockRandom((long) integerArray0[3]);
      assertNotNull(mockRandom0);
      assertEquals(8, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.shuffle(integerArray0, (-896), (-896), (java.util.Random) mockRandom0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1374));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1374), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(765);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(765, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(5, integerArray0.length);
      assertEquals(365, (int)integer4);
      
      integerArray0[4] = integer4;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, (int) integerArray0[2], (-1753), comparator0);
      assertEquals(5, integerArray0.length);
      
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      ObjectArrays.mergeSort(integerArray1, 365, (int) integerArray0[1], integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      ObjectArrays.quickSort(integerArray0, 1339, 365);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      
      int int0 = ObjectArrays.binarySearch(integerArray0, integer1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer3));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(477);
      assertNotNull(integer0);
      assertEquals(477, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-896));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-896), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertEquals(477, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1705));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals((-1705), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      Integer integer8 = new Integer((-1810));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertNotNull(integer8);
      assertEquals((-1810), (int)integer8);
      
      Integer integer9 = new Integer((-497));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer5));
      assertNotNull(integer9);
      assertEquals((-497), (int)integer9);
      
      int int1 = ObjectArrays.binarySearch(integerArray0, int0, 2, integer9);
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(int1 == int0);
      assertEquals(8, integerArray0.length);
      assertEquals((-1), int1);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 34213);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(34213, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(257);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(257, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(257, (int)integer2);
      
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      Integer integer4 = new Integer(2);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(2, (int)integer4);
      
      Comparator<Integer> comparator0 = null;
      ObjectArrays.mergeSort(integerArray0, 257, 90, (Comparator<Integer>) null);
      assertEquals(4, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (-1), 1);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      int int0 = ObjectArrays.binarySearch(integerArray1, integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(255);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(255, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(255);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(255, (int)integer3);
      
      integerArray0[3] = integer3;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      ObjectArrays.mergeSort(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(4, integerArray0.length);
      assertEquals(255, (int)integer4);
      
      int int0 = ObjectArrays.binarySearch(integerArray0, 2, 0, integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertEquals((-3), int0);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer0;
      integerArray1[2] = integer2;
      integerArray1[3] = integer1;
      Integer integer5 = new Integer(313);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(313, (int)integer5);
      
      integerArray1[4] = integer5;
      Integer integer6 = new Integer(313);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(313, (int)integer6);
      
      integerArray1[5] = integer6;
      integerArray1[6] = integer2;
      integerArray1[7] = integer3;
      integerArray1[8] = integer3;
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 0, 0);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray2.length);
      assertEquals(9, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrays.mergeSort(integerArray0);
      assertEquals(1, integerArray0.length);
      
      ObjectArrays.quickSort(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = Integer.getInteger("", (-994));
      assertNotNull(integer0);
      assertEquals((-994), (int)integer0);
      
      int int0 = 3428;
      Integer integer1 = new Integer(3428);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3428, (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      boolean boolean0 = ObjectArrays.equals(integerArray0, integerArray0);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean0);
      
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray0, integer3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.ensureCapacity(integerArray1, 0, 0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
      
      boolean boolean0 = ObjectArrays.equals(integerArray1, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle((Integer[]) null, 0, (-103), (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 8;
      Integer integer0 = new Integer((-2423));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2423), (int)integer0);
      
      Integer integer1 = new Integer((-2423));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-2423), (int)integer1);
      
      Integer[] integerArray1 = ObjectArrays.setLength(integerArray0, 8);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ObjectArrays.grow(integerArray1, (-723));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray2.length);
      
      Random.setNextRandom(8);
      Integer[] integerArray3 = ObjectArrays.copy(integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray3.length);
      
      Integer integer2 = new Integer(22);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(22, (int)integer2);
      
      Integer integer3 = new Integer((-723));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-723), (int)integer3);
      
      // Undeclared exception!
      try { 
        ObjectArrays.binarySearch(integerArray3, 22, 147, integer3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 84 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Integer[] integerArray0 = new Integer[12];
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2318));
      assertNotNull(integer0);
      assertEquals((-2318), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = (-1374);
      Integer integer1 = new Integer((-1374));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1374), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(765);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(765, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(365);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(365, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(5, integerArray0.length);
      assertEquals(365, (int)integer4);
      
      integerArray0[4] = integer4;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrays.mergeSort(integerArray0, (int) integerArray0[2], (-1753), comparator0);
      assertEquals(5, integerArray0.length);
      
      Integer[] integerArray1 = ObjectArrays.ensureCapacity(integerArray0, (-5445), (int) integerArray0[4]);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      int int1 = ObjectArrays.binarySearch(integerArray0, integerArray0[2]);
      assertFalse(int1 == int0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(2, int1);
      
      ObjectArrays.mergeSort(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ObjectArrays.shuffle(integerArray0, 76, 0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 272;
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Integer[] integerArray0 = null;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ObjectArrays.mergeSort((Integer[]) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.objects.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrays.mergeSort(integerArray0, (Comparator<Integer>) null);
      Integer integer0 = new Integer(590);
      ObjectArrays.quickSort(integerArray0, 590, 590, (Comparator<Integer>) null);
      assertEquals(1, integerArray0.length);
  }
}
