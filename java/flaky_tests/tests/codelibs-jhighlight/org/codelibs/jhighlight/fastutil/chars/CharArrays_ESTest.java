/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 02:45:44 GMT 2022
 */

package org.codelibs.jhighlight.fastutil.chars;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.codelibs.jhighlight.fastutil.chars.CharArrays;
import org.codelibs.jhighlight.fastutil.chars.CharComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharArrays_ESTest extends CharArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = 'S';
      charArray0[2] = 'C';
      charArray0[3] = 'z';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'z';
      charArray1[1] = 'C';
      charArray1[2] = 'z';
      charArray1[3] = '=';
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect((int[]) null, charArray0, charArray1, 3310, 23, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\\';
      charArray0[0] = '~';
      charArray0[3] = 'P';
      charArray0[4] = '3';
      charArray0[5] = 'V';
      charArray0[6] = ';';
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '3', ';', 'P', 'V', '\\', '~'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharArrays.mergeSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '3', ';', 'P', 'V', '\\', '~'}, charArray0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = CharArrays.reverse(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'~', '\\', 'V', 'P', ';', '3', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'~', '\\', 'V', 'P', ';', '3', '\u0000'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.grow(charArray1, 129, 874);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, '*', charComparator0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int1 = CharArrays.binarySearch(charArray0, '8', charComparator1);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[][] charArray1 = new char[5][1];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      charArray1[2] = charArray0;
      charArray1[3] = charArray0;
      CharArrays.fill(charArray0, 'P');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator2 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int2 = CharArrays.binarySearch(charArray0, (-1), (-432), '6', charComparator2);
      assertEquals(0, int2);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, charArray0.length);
      
      CharArrays.fill(charArray0, '*');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Random.setNextRandom(1665);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.EMPTY_ARRAY;
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray0);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(8, 0).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, 1, 8, 'Z', charComparator0);
      assertEquals(2, int0);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray3 = CharArrays.ensureCapacity(charArray0, (-383), 786);
      assertNotNull(charArray3);
      assertSame(charArray0, charArray3);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray3.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = CharArrays.copy(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char char0 = 'K';
      CharArrays.fill(charArray1, 'K');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int0 = 156;
      int int1 = (-1);
      CharArrays.quickSort(charArray1, 156, (-1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = CharArrays.ensureCapacity(charArray0, 156);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(156, charArray2.length);
      
      char[] charArray3 = CharArrays.grow(charArray0, 416);
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertEquals(0, charArray0.length);
      assertEquals(416, charArray3.length);
      
      int int2 = (-1730);
      // Undeclared exception!
      try { 
        CharArrays.fill(charArray2, (-1730), 318, 'K');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index (-1730) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[27];
      // Undeclared exception!
      try { 
        CharArrays.copy((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, '*', charComparator0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int1 = CharArrays.binarySearch(charArray0, '8', charComparator1);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharArrays.mergeSort(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = CharArrays.reverse(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = CharArrays.grow(charArray0, (-1), (-1));
      assertNotNull(charArray2);
      assertSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      
      boolean boolean0 = CharArrays.equals(charArray0, charArray1);
      assertTrue(boolean0);
      assertSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[18];
      char[] charArray1 = CharArrays.copy(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, charArray0.length);
      assertEquals(18, charArray1.length);
      
      char[] charArray2 = null;
      // Undeclared exception!
      try { 
        CharArrays.quickSort((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '8'}, charArray0);
      assertEquals(9, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '8'}, charArray0);
      assertEquals(9, charArray0.length);
      
      CharArrays.fill(charArray0, '8');
      assertArrayEquals(new char[] {'8', '8', '8', '8', '8', '8', '8', '8', '8'}, charArray0);
      assertEquals(9, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, 8, 8, '=', charComparator1);
      assertEquals((-9), int0);
      assertArrayEquals(new char[] {'8', '8', '8', '8', '8', '8', '8', '8', '8'}, charArray0);
      assertEquals(9, charArray0.length);
      
      CharArrays.fill(charArray0, '6');
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', '6', '6', '6', '6'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 7;
      intArray0[2] = (int) '6';
      intArray0[3] = (int) '=';
      intArray0[4] = 7;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, charArray0, 7, 1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -6
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[][] charArray1 = new char[2][3];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      CharArrays.radixSort(charArray1);
      assertEquals(2, charArray1.length);
      
      char[] charArray2 = CharArrays.ensureCapacity(charArray0, 90);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(90, charArray2.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(958L, 0.0, (double) 4);
      assertNotNull(doubleStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        CharArrays.shuffle(charArray0, (-872), 4, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -871 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'Z';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn((-187), 256).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, '[', charComparator0);
      assertEquals((-4), int0);
      assertArrayEquals(new char[] {'\u0000', 'Z', 'n', 'n', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[][] charArray1 = new char[6][8];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      charArray1[2] = charArray0;
      charArray1[3] = charArray0;
      charArray1[4] = charArray0;
      charArray1[5] = charArray0;
      int int1 = CharArrays.binarySearch(charArray0, (-4), (-187), 'n');
      assertEquals(3, int1);
      assertArrayEquals(new char[] {'\u0000', 'Z', 'n', 'n', '\u0000'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      
      int int2 = 217;
      // Undeclared exception!
      try { 
        CharArrays.trim(charArray0, (-435));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -435
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 873;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        CharArrays.ensureOffsetLength((char[]) null, (-802), 1876);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[][] charArray1 = new char[2][3];
      charArray1[0] = charArray0;
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator1).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.fill(charArray0, 'F');
      assertArrayEquals(new char[] {'F', 'F', 'F', 'F', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '_';
      charArray2[1] = 'T';
      charArray2[2] = 'F';
      charArray2[3] = 'h';
      charArray2[4] = '}';
      charArray2[5] = 'K';
      charArray2[6] = '}';
      charArray2[7] = '=';
      charArray2[8] = '}';
      CharArrays.mergeSort(charArray2);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'=', 'F', 'K', 'T', '_', 'h', '}', '}', '}'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(9, charArray2.length);
      
      char[] charArray3 = CharArrays.reverse(charArray0);
      assertNotNull(charArray3);
      assertSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray3, charArray2);
      assertSame(charArray3, charArray0);
      assertArrayEquals(new char[] {'F', 'F', 'F', 'F', 'F'}, charArray0);
      assertArrayEquals(new char[] {'F', 'F', 'F', 'F', 'F'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray2));
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray3.length);
      
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, (-1), 216);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '`';
      charArray0[3] = '`';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'4', '4', '`', '`'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.mergeSort(charArray0, (CharComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[0];
      char char0 = '*';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, '*', charComparator0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char char1 = '8';
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int1 = CharArrays.binarySearch(charArray0, '8', charComparator1);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      
      char[][] charArray1 = new char[5][1];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      charArray1[2] = charArray0;
      charArray1[3] = charArray0;
      charArray1[4] = charArray0;
      CharArrays.radixSort(charArray1);
      assertEquals(5, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray1, 259, 1665);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1664 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = (-187);
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charComparator0).compare(anyChar() , anyChar());
      int int1 = CharArrays.binarySearch(charArray0, 'Z', charComparator0);
      assertEquals(2, int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      
      char[][] charArray1 = new char[1][9];
      charArray1[0] = charArray0;
      CharArrays.radixSort(charArray1);
      assertEquals(1, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray1, (-510), 1269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1268 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, 0, 0, '*', charComparator0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator2 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int1 = CharArrays.binarySearch(charArray0, 0, (-689), '*');
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.mergeSort(charArray0, (-689), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -688 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '8'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '8';
      intArray0[1] = (int) '8';
      intArray0[2] = (-446);
      CharArrays.radixSortIndirect(intArray0, charArray0, 56, 56, true);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new int[] {56, 56, (-446)}, intArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(3, intArray0.length);
      
      char[] charArray3 = CharArrays.copy(charArray0);
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray3.length);
      
      // Undeclared exception!
      try { 
        CharArrays.shuffle(charArray2, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.quickSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char char0 = 'i';
      CharArrays.fill(charArray0, 'i');
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CharArrays.binarySearch(charArray0, (-432), 667, 'i', charComparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 117 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'w';
      charArray0[2] = '`';
      charArray0[3] = 'W';
      charArray0[4] = 'q';
      charArray0[5] = ']';
      charArray0[6] = 'y';
      charArray0[7] = 'v';
      charArray0[8] = '=';
      CharArrays.mergeSort(charArray0);
      assertArrayEquals(new char[] {'=', 'W', ']', '`', 'n', 'q', 'v', 'w', 'y'}, charArray0);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = CharArrays.grow(charArray0, (-2329), (-104));
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'=', 'W', ']', '`', 'n', 'q', 'v', 'w', 'y'}, charArray0);
      assertArrayEquals(new char[] {'=', 'W', ']', '`', 'n', 'q', 'v', 'w', 'y'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.binarySearch(charArray0, (-2329), (-1012), '?');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147481977 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, 1665, 0, '*', charComparator0);
      assertEquals((-1666), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator1).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      CharComparator charComparator2 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator2).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      CharArrays.fill(charArray0, '}');
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}', '}', '}'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(8, charArray0.length);
      
      char[] charArray2 = new char[7];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '}';
      charArray2[1] = '}';
      charArray2[2] = '*';
      charArray2[3] = '}';
      charArray2[4] = '*';
      charArray2[5] = '*';
      charArray2[6] = '_';
      CharArrays.mergeSort(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'*', '*', '*', '_', '}', '}', '}'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(7, charArray2.length);
      
      char[] charArray3 = CharArrays.reverse(charArray1);
      assertNotNull(charArray3);
      assertNotSame(charArray3, charArray0);
      assertSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '*'}, charArray3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '*'}, charArray1);
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray3.length);
      assertEquals(3, charArray1.length);
      
      CharArrays.quickSort(charArray0, 216, (-1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}', '}', '}'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray3));
      assertEquals(8, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray4 = CharArrays.setLength(charArray3, 0);
      assertNotNull(charArray4);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray4);
      assertSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray4, charArray2);
      assertNotSame(charArray4, charArray3);
      assertNotSame(charArray4, charArray1);
      assertNotSame(charArray4, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray4);
      assertSame(charArray1, charArray3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '*'}, charArray3);
      assertArrayEquals(new char[] {}, charArray4);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '*'}, charArray1);
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray3.length);
      assertEquals(0, charArray4.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[1];
      char char0 = '8';
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        CharArrays.setLength((char[]) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[3];
      int[] intArray0 = new int[9];
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      CharArrays.fill(charArray0, 'H');
      assertArrayEquals(new char[] {'H', 'H', 'H'}, charArray0);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.binarySearch((char[]) null, 17, 27, 'H', (CharComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\\';
      charArray0[0] = '~';
      charArray0[3] = 'P';
      charArray0[4] = '3';
      charArray0[5] = 'V';
      charArray0[6] = ';';
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '3', ';', 'P', 'V', '\\', '~'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(679, 17, (-4266), (-2669), (-1177)).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'V', '\\', '3', ';', 'P', '~', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharArrays.fill(charArray0, 'i');
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, (-432), (-432), 'i', charComparator1);
      assertEquals(431, int0);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharArrays.fill(charArray0, ';');
      assertArrayEquals(new char[] {';', ';', ';', ';', ';', ';', ';'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) ';';
      intArray0[2] = 431;
      intArray0[3] = (int) ';';
      intArray0[4] = 7;
      intArray0[5] = (int) ';';
      intArray0[6] = (int) ';';
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\\';
      charArray0[0] = '~';
      charArray0[3] = 'P';
      charArray0[4] = '3';
      charArray0[5] = 'V';
      charArray0[6] = ';';
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '3', ';', 'P', 'V', '\\', '~'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(228, 228, (-298), 5, (-298)).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'P', '\\', 'V', ';', '~', '3', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharArrays.fill(charArray0, 'i');
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = CharArrays.ensureCapacity(charArray0, 344);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(344, charArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      char[] charArray2 = CharArrays.EMPTY_ARRAY;
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(0, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'V';
      char[] charArray1 = new char[28];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'A';
      charArray1[1] = '=';
      charArray1[2] = 'O';
      charArray1[3] = 'O';
      charArray1[4] = 'V';
      int int0 = 0;
      int int1 = 1;
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 1, (-1280), 1).when(charComparator0).compare(anyChar() , anyChar());
      // Undeclared exception!
      CharArrays.quickSort(charArray1, charComparator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'V';
      // Undeclared exception!
      try { 
        CharArrays.radixSort((char[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '(';
      charArray0[0] = '(';
      char char1 = 'Z';
      charArray0[1] = 'Z';
      int int0 = 1841293;
      char char2 = 'k';
      // Undeclared exception!
      try { 
        CharArrays.fill((char[]) null, 1841293, 1841293, 'k');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          char[] charArray0 = new char[5];
          charArray0[0] = '=';
          charArray0[1] = '[';
          char[] charArray1 = new char[28];
          assertFalse(charArray1.equals((Object)charArray0));
          
          charArray1[0] = 'A';
          charArray1[1] = '=';
          charArray1[2] = 'O';
          charArray1[3] = 'O';
          charArray1[4] = '[';
          int int0 = (-3117);
          int int1 = (-2365);
          CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
          doReturn(287, 287, 287, (-3117), (-2365)).when(charComparator0).compare(anyChar() , anyChar());
          // Undeclared exception!
          CharArrays.quickSort(charArray1, charComparator0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\\';
      charArray0[0] = '~';
      charArray0[3] = 'P';
      charArray0[4] = '3';
      charArray0[5] = 'V';
      charArray0[6] = ';';
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '3', ';', 'P', 'V', '\\', '~'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(17, 17, 91, 17, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'3', ';', 'P', '\u0000', '~', 'V', '\\'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharArrays.fill(charArray0, 'i');
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, (-432), (-432), 'i', charComparator1);
      assertEquals(431, int0);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharArrays.fill(charArray0, ';');
      assertArrayEquals(new char[] {';', ';', ';', ';', ';', ';', ';'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) ';';
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, (-3945), 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3945 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'V';
      char[] charArray1 = new char[28];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'A';
      charArray1[1] = '=';
      charArray1[2] = 'O';
      charArray1[3] = 'O';
      charArray1[4] = 'V';
      int int0 = 3;
      int int1 = 256;
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(235, 235, 235, 3, 256).when(charComparator0).compare(anyChar() , anyChar());
      // Undeclared exception!
      CharArrays.quickSort(charArray1, charComparator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'V';
      char[] charArray1 = new char[28];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'A';
      charArray1[1] = '=';
      charArray1[2] = 'O';
      charArray1[3] = 'O';
      charArray1[4] = 'V';
      charArray1[5] = 'p';
      charArray1[6] = 'A';
      charArray1[7] = 'V';
      charArray1[8] = 'A';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(105, 105, 17, 17, 193).when(charComparator0).compare(anyChar() , anyChar());
      // Undeclared exception!
      CharArrays.quickSort(charArray1, charComparator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = 3187;
      CharArrays.quickSort(charArray0, 3187, (int) '1');
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals(1, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort((char[][]) null, 10, (-3138));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        CharArrays.equals(charArray0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '8'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      
      int int0 = 255;
      int int1 = 3032;
      // Undeclared exception!
      try { 
        CharArrays.copy(charArray0, 8, 3032);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (3040) is greater than array length (9)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = CharArrays.EMPTY_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[][] charArray1 = new char[1][6];
      charArray1[0] = charArray0;
      CharArrays.radixSort(charArray1, (-3081), (-3081));
      assertEquals(1, charArray1.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, 't', charComparator0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharArrays.quickSort(charArray0, 18, (-484));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray2 = CharArrays.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, 0, 0, '*', charComparator0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator2 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray1 = CharArrays.shuffle(charArray0, 0, 0, (java.util.Random) mockRandom0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      charArray0[2] = 'n';
      charArray0[3] = 'v';
      charArray0[4] = 'Z';
      CharArrays.ensureOffsetLength(charArray0, 0, 0);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.mergeSort(charArray0, 0, 0, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = 'Z';
      int int0 = CharArrays.binarySearch(charArray1, '(');
      assertEquals(0, int0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'(', 'Z'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      
      CharArrays.quickSort(charArray0, 3839, (int) 'Z');
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', 'Z'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(5, charArray0.length);
      
      char[] charArray2 = CharArrays.ensureCapacity(charArray0, 1954, 0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', 'Z'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(5, charArray0.length);
      assertEquals(1954, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[][] charArray1 = new char[2][3];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      CharArrays.radixSort(charArray1);
      assertEquals(2, charArray1.length);
      
      int int0 = 90;
      char[] charArray2 = CharArrays.ensureCapacity(charArray0, 90);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(90, charArray2.length);
      
      CharArrays.radixSort(charArray1);
      assertEquals(2, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray1, 90, (-872));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -962
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '=';
      charArray0[0] = '=';
      char char1 = 'V';
      charArray0[1] = 'V';
      char char2 = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'D';
      char char3 = 'r';
      charArray0[4] = 'r';
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'=', 'V', 'O', 'D', 'r'}, charArray0);
      assertArrayEquals(new char[] {'=', 'V', 'O', 'D', 'r', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.fill(charArray1, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'=', 'V', 'O', 'D', 'r'}, charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'=', 'V', 'O', 'D', 'r'}, charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(8, charArray1.length);
      
      char[] charArray2 = CharArrays.reverse(charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'=', 'V', 'O', 'D', 'r'}, charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray1);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray2.length);
      
      // Undeclared exception!
      try { 
        CharArrays.copy(charArray1, 255, 3032);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (3287) is greater than array length (8)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = 's';
      charArray0[2] = 'V';
      charArray0[3] = '{';
      charArray0[4] = ',';
      charArray0[5] = 'R';
      CharArrays.radixSort(charArray0, charArray0, 2, 2);
      assertArrayEquals(new char[] {'(', 's', 'V', '{', ',', 'R'}, charArray0);
      assertEquals(6, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.mergeSort(charArray0, (-1693), (-1693), charComparator0, charArray0);
      assertArrayEquals(new char[] {'(', 's', 'V', '{', ',', 'R'}, charArray0);
      assertEquals(6, charArray0.length);
      
      CharArrays.fill(charArray0, 'V');
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', 'V'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = CharArrays.ensureCapacity(charArray0, 2, 2);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', 'V'}, charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', 'V'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.fill(charArray1, 2846, (-1693), 'Y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (2846) is greater than end index (-1693)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      int int0 = (-3548);
      char[] charArray1 = CharArrays.ensureCapacity(charArray0, (-3548));
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      int int1 = CharArrays.binarySearch(charArray1, '(');
      assertEquals((-6), int1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.trim(charArray0, (-3548));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3548
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[21];
      char[] charArray1 = CharArrays.ensureCapacity(charArray0, 5023);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(21, charArray0.length);
      assertEquals(5023, charArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 5023;
      intArray0[1] = (int) 'x';
      intArray0[2] = (int) 'x';
      intArray0[3] = 5023;
      intArray0[4] = (int) 'x';
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'x';
      charArray2[1] = 'x';
      charArray2[2] = 'x';
      charArray2[3] = '5';
      char[] charArray3 = new char[6];
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      
      charArray3[0] = 'x';
      charArray3[1] = '5';
      charArray3[2] = '5';
      charArray3[3] = 'x';
      charArray3[4] = '5';
      charArray3[5] = '5';
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray2, charArray3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array size mismatch.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      charArray0[2] = 'n';
      charArray0[3] = 'v';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, '[', charComparator0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[][] charArray1 = new char[6][8];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      charArray1[2] = charArray0;
      charArray1[3] = charArray0;
      charArray1[4] = charArray0;
      charArray1[5] = charArray0;
      CharArrays.radixSort(charArray1);
      assertEquals(6, charArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '(';
      intArray0[1] = 460081;
      intArray0[2] = (int) 'v';
      intArray0[3] = (-1);
      intArray0[4] = (int) 'n';
      intArray0[5] = (int) '[';
      char[] charArray2 = new char[8];
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '(';
      charArray2[1] = 'v';
      charArray2[2] = 'Z';
      charArray2[3] = '[';
      charArray2[4] = '[';
      charArray2[5] = 'M';
      charArray2[6] = '(';
      charArray2[7] = 'v';
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray2, charArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array size mismatch.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(119).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, '\\', charComparator0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\\';
      CharArrays.radixSortIndirect(intArray0, charArray0, charArray0, false);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new int[] {92}, intArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, intArray0.length);
      
      char[] charArray1 = CharArrays.grow(charArray0, (-1), 3839);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new char[] {'\\'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      char[] charArray2 = new char[5];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '\\';
      charArray2[1] = '\\';
      charArray2[2] = '\\';
      charArray2[3] = '\\';
      charArray2[4] = 'W';
      boolean boolean0 = CharArrays.equals(charArray2, charArray0);
      assertFalse(boolean0);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new char[] {'\\', '\\', '\\', '\\', 'W'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(5, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '#';
      MockRandom mockRandom0 = new MockRandom((-304));
      assertNotNull(mockRandom0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, charArray0, 8, 1377);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1376 out of bounds for length 3
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = 11;
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, charArray0, 254, 1631);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1630 out of bounds for length 3
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '4';
      int int0 = 345;
      // Undeclared exception!
      try { 
        CharArrays.fill(charArray0, 345, (int) '4', '\u0000');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (345) is greater than end index (52)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[18];
      char[] charArray1 = CharArrays.copy(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, charArray0.length);
      assertEquals(18, charArray1.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, 12, (-264), charComparator1);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(18, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect((int[]) null, charArray0, charArray1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, 1, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, 0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, (-1033), (-3867), '(', charComparator0);
      assertEquals(1032, int0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator1).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharComparator charComparator2 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator2).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator2);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      int int1 = CharArrays.binarySearch(charArray0, 'q');
      assertEquals((-6), int1);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = CharArrays.trim(charArray0, 2418);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, 2418, 338);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2080
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = CharArrays.copy(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      char[][] charArray2 = new char[1][6];
      charArray2[0] = charArray1;
      int int0 = (-3081);
      char[] charArray3 = new char[9];
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      
      charArray3[0] = '~';
      charArray3[1] = '\"';
      charArray3[2] = '(';
      charArray3[3] = '\"';
      charArray3[4] = '~';
      charArray3[5] = '\"';
      charArray3[6] = '\"';
      charArray3[7] = '\"';
      charArray3[8] = '\"';
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray3, charArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array size mismatch.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, 1665, 0, '*', charComparator0);
      assertEquals((-1666), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator2 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      int[] intArray0 = new int[2];
      intArray0[0] = 1665;
      intArray0[1] = 39;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, charArray1, 7, (-2813), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array size mismatch.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[3];
      int[] intArray0 = new int[9];
      char[] charArray1 = CharArrays.trim(charArray0, 1801);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      char[] charArray2 = CharArrays.grow(charArray1, 1801);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(1801, charArray2.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1801;
      intArray1[1] = 1801;
      intArray1[2] = 1801;
      intArray1[3] = 1801;
      intArray1[4] = 1801;
      intArray1[5] = 1801;
      intArray1[6] = 1801;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray1, charArray1, charArray2, 40, 1801, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array size mismatch.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray0);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      
      char[] charArray3 = CharArrays.ensureCapacity(charArray1, (-383), (-383));
      assertNotNull(charArray3);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray1, charArray3);
      assertSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray3.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'n';
      charArray1[1] = '+';
      charArray1[2] = '+';
      charArray1[3] = '+';
      charArray1[4] = 'l';
      int int0 = 920;
      int int1 = (-926);
      // Undeclared exception!
      try { 
        CharArrays.reverse(charArray1, 920, (-926));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\\';
      charArray0[0] = '~';
      charArray0[3] = 'P';
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect((int[]) null, charArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '(';
      charArray0[2] = '5';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[6] = 'n';
      charArray0[6] = '5';
      CharArrays.ensureOffsetLength(charArray0, 0, 0);
      assertArrayEquals(new char[] {'Z', '(', '5', 'Z', 'Z', '\u0000', '5'}, charArray0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'n';
      charArray1[1] = 'Z';
      charArray1[2] = '(';
      charArray1[3] = 'Z';
      charArray1[4] = 'Z';
      charArray1[5] = 'Y';
      // Undeclared exception!
      try { 
        CharArrays.ensureFromTo(charArray1, 0, (-2007));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index (0) is greater than end index (-2007)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      CharArrays.fill(charArray0, '?');
      assertArrayEquals(new char[] {'?', '?', '?', '?'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[][] charArray1 = new char[4][8];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      charArray1[2] = charArray0;
      charArray1[3] = charArray0;
      CharArrays.radixSort(charArray1);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[18];
      char[] charArray1 = CharArrays.copy(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, charArray0.length);
      assertEquals(18, charArray1.length);
      
      int int0 = 1170923713;
      // Undeclared exception!
      try { 
        CharArrays.ensureOffsetLength(charArray0, 1170923713, (-2288));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length (-2288) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      charArray0[2] = 'n';
      charArray0[3] = 'v';
      charArray0[4] = '5';
      CharArrays.ensureOffsetLength(charArray0, 0, 0);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.mergeSort(charArray0, 0, 0, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = 'Z';
      int int0 = CharArrays.binarySearch(charArray1, '(');
      assertEquals(0, int0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'(', 'Z'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      
      CharArrays.quickSort(charArray0, 348, 0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', '5'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray1, 0, 287, (CharComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 35 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator1).compare(anyChar() , anyChar());
      CharArrays.mergeSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = CharArrays.grow(charArray0, (-1619));
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = 8;
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator1).compare(anyChar() , anyChar());
      CharArrays.mergeSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort((char[][]) null, 178, 1935);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = 'A';
      charArray0[3] = '8';
      charArray0[4] = '/';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'8', '8', 'A', '8', '/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator1).compare(anyChar() , anyChar());
      CharArrays.mergeSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {'8', '8', 'A', '8', '/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '8';
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, (CharComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'p';
      charArray0[2] = 'A';
      charArray0[3] = '9';
      char[] charArray1 = CharArrays.reverse(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      char[] charArray2 = CharArrays.trim(charArray0, 290);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray2.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray2, charComparator0);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray2.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator1).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator1);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int0 = CharArrays.binarySearch(charArray2, 726, 290, 'q');
      assertEquals((-727), int0);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray2.length);
      
      char[] charArray3 = new char[9];
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      
      charArray3[0] = 'q';
      charArray3[2] = 'A';
      charArray3[3] = '8';
      charArray3[4] = '8';
      charArray3[5] = 'q';
      charArray3[6] = 'p';
      charArray3[7] = 'p';
      charArray3[8] = 'e';
      int int1 = CharArrays.binarySearch(charArray3, 'p');
      assertEquals(6, int1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertArrayEquals(new char[] {'q', '\u0000', 'A', '8', '8', 'q', 'p', 'p', 'e'}, charArray3);
      assertFalse(int1 == int0);
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(9, charArray3.length);
      
      char[] charArray4 = CharArrays.trim(charArray3, 6);
      assertNotNull(charArray4);
      assertNotSame(charArray4, charArray1);
      assertNotSame(charArray4, charArray2);
      assertNotSame(charArray4, charArray3);
      assertNotSame(charArray4, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray4);
      assertArrayEquals(new char[] {'q', '\u0000', 'A', '8', '8', 'q'}, charArray4);
      assertArrayEquals(new char[] {'q', '\u0000', 'A', '8', '8', 'q', 'p', 'p', 'e'}, charArray3);
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(6, charArray4.length);
      assertEquals(9, charArray3.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray4, 912, 19);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -893
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 'm';
      charArray0[2] = '&';
      charArray0[3] = 'b';
      charArray0[4] = 'w';
      charArray0[5] = 'i';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, 'O', charComparator0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'t', 'm', '&', 'b', 'w', 'i'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'t', 'm', '&', 'b', 'w', 'i'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = CharArrays.setLength(charArray0, 2);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'t', 'm', '&', 'b', 'w', 'i'}, charArray0);
      assertArrayEquals(new char[] {'t', 'm'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(2, charArray1.length);
      
      char[] charArray2 = CharArrays.grow(charArray1, 2442, 2);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'t', 'm', '&', 'b', 'w', 'i'}, charArray0);
      assertArrayEquals(new char[] {'t', 'm'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(6, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2442, charArray2.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray3 = CharArrays.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertNotNull(charArray3);
      assertSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertSame(charArray3, charArray0);
      assertArrayEquals(new char[] {'m', '&', 'b', 'w', 'i', 't'}, charArray0);
      assertArrayEquals(new char[] {'m', '&', 'b', 'w', 'i', 't'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray3.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'H';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, 766, 25, charComparator0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(876).when(charComparator1).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'L';
      charArray1[1] = 'e';
      charArray1[2] = 'e';
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, charArray1, 1777, 937);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array size mismatch.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'H';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, 766, 25, charComparator0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(876).when(charComparator1).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, 'L', charComparator1);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[1] = 'H';
      charArray1[2] = 'L';
      charArray1[3] = 'L';
      charArray1[4] = 'e';
      charArray1[5] = 'c';
      charArray1[6] = 'H';
      charArray1[7] = 'e';
      boolean boolean0 = CharArrays.equals(charArray1, charArray0);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertArrayEquals(new char[] {'e', 'H', 'L', 'L', 'e', 'c', 'H', 'e'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(8, charArray1.length);
      
      char[] charArray2 = CharArrays.setLength(charArray0, 4);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertArrayEquals(new char[] {'e', 'H', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray2.length);
      
      char[] charArray3 = CharArrays.grow(charArray0, (-1), (-1));
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray3);
      assertSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray3.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray4 = CharArrays.shuffle(charArray2, (java.util.Random) mockRandom0);
      assertNotNull(charArray4);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray4);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertSame(charArray2, charArray4);
      assertNotSame(charArray4, charArray3);
      assertSame(charArray4, charArray2);
      assertNotSame(charArray4, charArray0);
      assertNotSame(charArray4, charArray1);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', 'e'}, charArray2);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', 'e'}, charArray4);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray4.equals((Object)charArray1));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray2.length);
      assertEquals(4, charArray4.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'b';
      char[] charArray1 = CharArrays.setLength(charArray0, 140);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'=', 'b', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(140, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '=', 'b'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(5, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '=', 'b'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(140, charArray1.length);
      assertEquals(140, charArray2.length);
      
      // Undeclared exception!
      try { 
        CharArrays.grow(charArray0, 140, 3210);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray0);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      
      char[] charArray3 = CharArrays.grow(charArray0, 8, 3210);
      assertNotNull(charArray3);
      assertSame(charArray0, charArray3);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertSame(charArray3, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray3.length);
      
      char[] charArray4 = CharArrays.trim(charArray3, 3210);
      assertNotNull(charArray4);
      assertSame(charArray0, charArray3);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray4);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertSame(charArray3, charArray4);
      assertSame(charArray3, charArray0);
      assertSame(charArray4, charArray0);
      assertSame(charArray4, charArray3);
      assertNotSame(charArray4, charArray1);
      assertSame(charArray4, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray4);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray3.length);
      assertEquals(9, charArray4.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, 42, 3210);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3209 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, 1665, 0, '*', charComparator0);
      assertEquals((-1666), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator2 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      int int1 = CharArrays.binarySearch(charArray1, 1665, (-1), '8');
      assertEquals((-1666), int1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(int1 == int0);
      assertEquals(4, charArray1.length);
      
      int int2 = CharArrays.binarySearch(charArray0, 'q');
      assertEquals((-1), int2);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, charArray0.length);
      
      char[] charArray2 = CharArrays.trim(charArray0, 480);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, (-2443), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.mergeSort(charArray0, 2143, 2143, charComparator0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharArrays.radixSort(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = CharArrays.grow(charArray0, 2143);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(2143, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.fill(charArray0, 2143, 2143, 'o');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (2143) is greater than array length (1)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '4';
      charArray0[4] = '`';
      charArray0[5] = '4';
      charArray0[6] = '`';
      CharArrays.radixSortIndirect((int[]) null, charArray0, charArray0, (int) '4', (int) '4', false);
      assertArrayEquals(new char[] {'`', '`', '`', '4', '`', '4', '`'}, charArray0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = CharArrays.copy(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'`', '`', '`', '4', '`', '4', '`'}, charArray0);
      assertArrayEquals(new char[] {'`', '`', '`', '4', '`', '4', '`'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.ensureCapacity(charArray0, (int) '4', (int) '4');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = CharArrays.reverse(charArray0, 120, 120);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[][] charArray1 = new char[2][3];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      CharArrays.radixSort(charArray1);
      assertEquals(2, charArray1.length);
      
      char[] charArray2 = CharArrays.ensureCapacity(charArray0, 90);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(90, charArray2.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CharArrays.shuffle(charArray0, (-872), 4, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -872 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'v';
      charArray0[4] = '5';
      CharArrays.ensureOffsetLength(charArray0, 0, 0);
      assertArrayEquals(new char[] {'(', 'Z', 'Z', 'v', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.mergeSort(charArray0, 0, 0, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', 'Z', 'v', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = 'Z';
      int int0 = CharArrays.binarySearch(charArray1, '(');
      assertEquals(0, int0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'(', 'Z'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      
      CharArrays.quickSort(charArray0, 348, 0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'(', 'Z', 'Z', 'v', '5'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 256;
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      CharArrays.radixSortIndirect(intArray0, charArray1, true);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new int[] {256}, intArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.mergeSort(charArray1, (-47), 2, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -46 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '8'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      CharArrays.quickSort(charArray1, (-3792), (-4711));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '8'}, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray2 = CharArrays.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '8', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '8', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 0;
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Y';
      charArray1[1] = '(';
      charArray1[2] = '5';
      charArray1[3] = 'Z';
      charArray1[4] = 'Z';
      charArray1[5] = 'n';
      charArray1[6] = '5';
      CharArrays.ensureOffsetLength(charArray1, 0, 0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Y', '(', '5', 'Z', 'Z', 'n', '5'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray1.length);
      
      int int1 = 2436;
      char[] charArray2 = new char[6];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '5';
      charArray2[1] = '5';
      charArray2[2] = '(';
      charArray2[3] = 'Z';
      charArray2[4] = 'Z';
      charArray2[5] = 'Y';
      // Undeclared exception!
      try { 
        CharArrays.mergeSort(charArray0, 0, 2436, charArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3523)).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, '\\', charComparator0);
      assertEquals((-2), int0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\\';
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharComparator charComparator2 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.mergeSort(charArray0, charComparator2);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[3];
      int[] intArray0 = new int[9];
      CharArrays.radixSortIndirect(intArray0, charArray0, true);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, charArray0.length);
      assertEquals(9, intArray0.length);
      
      char[] charArray1 = CharArrays.trim(charArray0, 1801);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      char[] charArray2 = CharArrays.grow(charArray1, 1801);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(1801, charArray2.length);
      
      CharArrays.mergeSort(charArray1, 1801, 1801, charArray0);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray2));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      int int0 = CharArrays.binarySearch(charArray1, 3, (-1406), 'g');
      assertEquals((-4), int0);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray2));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      char char0 = 'H';
      charArray0[1] = 'H';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, 766, 25, charComparator0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(77).when(charComparator1).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, 'M', charComparator1);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.ensureCapacity(charArray0, 25, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 'm';
      charArray0[2] = '&';
      charArray0[3] = 'b';
      charArray0[4] = 'w';
      charArray0[5] = 'i';
      int int0 = 47;
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3472), (-3472), (-3472), 11, 47).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'b', 'm', '&', 't', 'w', 'i'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[][] charArray1 = new char[8][8];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      charArray1[2] = charArray0;
      char[] charArray2 = new char[2];
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 't';
      charArray2[1] = 'm';
      charArray1[3] = charArray2;
      charArray1[4] = charArray0;
      charArray1[5] = charArray0;
      charArray1[6] = charArray0;
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, charArray0, 937, (-3472));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4409
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn((-60), (-2119), (-60)).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int0 = 254;
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, charArray0, 254, 1631);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1630 out of bounds for length 3
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'k';
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, charArray0, 1764, 311, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1453
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[0];
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'Q';
      charArray0[2] = '';
      charArray0[3] = 'P';
      charArray0[4] = '*';
      charArray0[5] = 'k';
      charArray0[6] = '`';
      charArray0[7] = 'o';
      charArray0[8] = 'u';
      CharArrays.radixSortIndirect(intArray0, charArray0, false);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'U', 'Q', '', 'P', '*', 'k', '`', 'o', 'u'}, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[7];
      int[] intArray0 = new int[3];
      intArray0[0] = 179;
      intArray0[1] = 40;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 40 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 198;
      intArray0[3] = 420;
      intArray0[4] = 523;
      intArray0[5] = (-1943);
      intArray0[6] = 0;
      intArray0[7] = (-1111);
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = 'C';
      charArray0[2] = ')';
      charArray0[3] = '&';
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 198 out of bounds for length 4
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(1953).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, '\\', charComparator0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\\';
      CharArrays.radixSortIndirect(intArray0, charArray0, true);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new int[] {92}, intArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, intArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\\';
      charArray1[1] = '\\';
      charArray1[2] = 'S';
      char[] charArray2 = CharArrays.ensureCapacity(charArray1, (-728), 94906249);
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\\', '\\', 'S', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\\', '\\', 'S', '\u0000'}, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      
      char[] charArray3 = new char[3];
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      
      charArray3[0] = '\\';
      charArray3[1] = '\\';
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray3, (-1), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 3
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      // Undeclared exception!
      try { 
        CharArrays.ensureCapacity(charArray0, 44, 1621);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'e';
      charArray0[0] = 'e';
      charArray0[1] = 'H';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, 766, 25, charComparator0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char char1 = 'M';
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charComparator1).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, 'M', charComparator1);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.ensureCapacity(charArray0, 25, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      CharArrays.quickSort(charArray0, 0, 0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharArrays.radixSort(charArray0, 0, 0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.mergeSort(charArray0, 1304, 0, charComparator0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '/';
      charArray1[1] = '/';
      charArray1[2] = '/';
      charArray1[3] = '/';
      // Undeclared exception!
      try { 
        CharArrays.ensureOffsetLength(charArray1, 576, 576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (1152) is greater than array length (4)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 256;
      intArray0[0] = 256;
      char[] charArray0 = new char[4];
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = null;
      int int1 = 0;
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, (char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '\'';
      charArray0[0] = '\'';
      charArray0[1] = '\\';
      char[] charArray1 = CharArrays.setLength(charArray0, 229);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\'', '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(229, charArray1.length);
      
      CharArrays.quickSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\'', '\\'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(7, charArray0.length);
      
      CharComparator charComparator0 = null;
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, (CharComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[2] = '~';
      charArray0[3] = 'P';
      charArray0[4] = '3';
      charArray0[6] = ';';
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\'', '3', ';', 'P', '~'}, charArray0);
      assertEquals(7, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CharArrays.shuffle((char[]) null, 1443, (-7), (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '~';
      charArray0[3] = 'P';
      charArray0[4] = '3';
      charArray0[5] = 'V';
      charArray0[6] = ';';
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {'\'', '\'', '3', ';', 'P', 'V', '~'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int int0 = (-1542);
      // Undeclared exception!
      try { 
        CharArrays.radixSort((char[]) null, charArray0, (-1542), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '7';
      charArray0[2] = 'v';
      charArray0[3] = '^';
      charArray0[4] = 'u';
      charArray0[5] = 'c';
      charArray0[6] = 'j';
      charArray0[7] = '&';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CharArrays.shuffle(charArray0, (-1370), 0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 8
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[][] charArray0 = new char[9][4];
      char[] charArray1 = new char[6];
      charArray1[0] = 'z';
      charArray1[1] = 'T';
      charArray1[2] = 'n';
      charArray1[3] = '2';
      charArray1[4] = 'U';
      charArray1[5] = '>';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'z';
      charArray2[1] = 'T';
      charArray2[2] = 'n';
      charArray2[3] = '2';
      charArray2[4] = 'T';
      charArray2[5] = 'z';
      charArray2[6] = 'z';
      charArray2[7] = '2';
      charArray2[8] = 'T';
      charArray0[1] = charArray2;
      char[] charArray3 = new char[9];
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      
      charArray3[0] = 'U';
      charArray3[1] = '>';
      charArray3[2] = 'z';
      charArray3[3] = '>';
      charArray3[4] = '>';
      charArray3[5] = '2';
      charArray3[6] = 'U';
      charArray3[7] = 'U';
      charArray3[8] = 'U';
      charArray0[2] = charArray3;
      char[] charArray4 = new char[8];
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray3));
      
      charArray4[0] = '>';
      charArray4[1] = '2';
      charArray4[2] = 'U';
      charArray4[3] = 'z';
      charArray4[4] = '>';
      charArray4[5] = 'z';
      charArray4[6] = 'n';
      charArray4[7] = 'U';
      charArray0[3] = charArray4;
      char[] charArray5 = new char[1];
      assertFalse(charArray5.equals((Object)charArray4));
      assertFalse(charArray5.equals((Object)charArray2));
      assertFalse(charArray5.equals((Object)charArray3));
      assertFalse(charArray5.equals((Object)charArray1));
      
      charArray5[0] = 'z';
      charArray0[4] = charArray5;
      char[] charArray6 = new char[3];
      assertFalse(charArray6.equals((Object)charArray3));
      assertFalse(charArray6.equals((Object)charArray5));
      assertFalse(charArray6.equals((Object)charArray4));
      assertFalse(charArray6.equals((Object)charArray2));
      assertFalse(charArray6.equals((Object)charArray1));
      
      charArray6[0] = 'z';
      charArray6[1] = 'U';
      charArray6[2] = 'U';
      charArray0[5] = charArray6;
      char[] charArray7 = new char[4];
      assertFalse(charArray7.equals((Object)charArray1));
      assertFalse(charArray7.equals((Object)charArray4));
      assertFalse(charArray7.equals((Object)charArray6));
      assertFalse(charArray7.equals((Object)charArray2));
      assertFalse(charArray7.equals((Object)charArray3));
      assertFalse(charArray7.equals((Object)charArray5));
      
      charArray7[0] = '>';
      charArray7[1] = 'z';
      charArray7[2] = 'n';
      charArray7[3] = 'z';
      charArray0[6] = charArray7;
      char[] charArray8 = new char[8];
      assertFalse(charArray8.equals((Object)charArray3));
      assertFalse(charArray8.equals((Object)charArray5));
      assertFalse(charArray8.equals((Object)charArray7));
      assertFalse(charArray8.equals((Object)charArray1));
      assertFalse(charArray8.equals((Object)charArray6));
      assertFalse(charArray8.equals((Object)charArray4));
      assertFalse(charArray8.equals((Object)charArray2));
      
      charArray8[0] = 'n';
      charArray8[1] = 'n';
      charArray8[2] = '2';
      charArray8[3] = 'n';
      charArray8[4] = '>';
      charArray8[5] = 'U';
      charArray8[6] = 'U';
      charArray8[7] = 'n';
      charArray0[7] = charArray8;
      char[] charArray9 = new char[4];
      assertFalse(charArray9.equals((Object)charArray1));
      assertFalse(charArray9.equals((Object)charArray5));
      assertFalse(charArray9.equals((Object)charArray3));
      assertFalse(charArray9.equals((Object)charArray2));
      assertFalse(charArray9.equals((Object)charArray7));
      assertFalse(charArray9.equals((Object)charArray4));
      assertFalse(charArray9.equals((Object)charArray8));
      assertFalse(charArray9.equals((Object)charArray6));
      
      charArray9[0] = '2';
      charArray9[1] = 'T';
      charArray9[2] = '>';
      charArray9[3] = 'T';
      charArray0[8] = charArray9;
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of index 8 has not the same length of the array of index 0.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      CharArrays.ensureFromTo(charArray0, 0, 0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.mergeSort(charArray0, 1883, (-3472), charComparator0, charArray0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = null;
      int int0 = 4905;
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CharArrays.mergeSort((char[]) null, 362, 4905, charComparator0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = 3;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect((int[]) null, charArray0, 3, (-429), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -432
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 57529;
      intArray0[1] = (-879);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = '^';
      charArray0[2] = '7';
      charArray0[3] = 'g';
      charArray0[4] = 'O';
      charArray0[5] = '`';
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, 256, (-879), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1135
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[][] charArray1 = new char[2][3];
      charArray1[1] = charArray0;
      int int0 = 90;
      char[] charArray2 = CharArrays.ensureCapacity(charArray0, 90);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(90, charArray2.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray1, 383, 383);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of index 1 has not the same length of the array of index 0.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[][] charArray1 = new char[2][1];
      charArray1[0] = charArray0;
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of index 1 has not the same length of the array of index 0.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 2143;
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.mergeSort(charArray0, 2143, 2143, charComparator0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharArrays.radixSort(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = CharArrays.grow(charArray0, 2143);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(2143, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.fill(charArray0, 2143, 2143, 'W');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (2143) is greater than array length (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.setLength(charArray0, 3);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(3, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      
      char[] charArray3 = CharArrays.grow(charArray0, 3, 3);
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray3);
      assertSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray3.length);
      
      boolean boolean0 = CharArrays.equals(charArray1, charArray0);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray3);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray3));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'D';
      charArray1[1] = 'g';
      charArray1[2] = 'K';
      charArray1[3] = '\'';
      charArray1[4] = '[';
      charArray1[5] = 'n';
      boolean boolean0 = CharArrays.equals(charArray0, charArray1);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'D', 'g', 'K', '\'', '[', 'n'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(6, charArray1.length);
      
      int int0 = 3;
      CharArrays.quickSort(charArray1, 3, 3);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'D', 'g', 'K', '\'', '[', 'n'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.grow(charArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 'C';
      char[] charArray1 = CharArrays.ensureCapacity(charArray0, (-2082));
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {' ', 'C'}, charArray0);
      assertArrayEquals(new char[] {' ', 'C'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '#';
      charArray0[0] = '#';
      int int0 = 0;
      CharArrays.quickSort(charArray0, 0, 0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[][] charArray1 = new char[1][5];
      charArray1[0] = charArray0;
      int int1 = 3293;
      CharArrays.radixSort(charArray1, 3293, 3293);
      assertEquals(1, charArray1.length);
      
      char[] charArray2 = CharArrays.trim(charArray0, 0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray2.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, charArray2, 0, 3293);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array size mismatch.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      int int0 = 0;
      CharArrays.quickSort(charArray0, 0, 0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = CharArrays.trim(charArray0, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int1 = 1377;
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, charArray0, 1377, (-22));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1399
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '8';
      charArray0[0] = '8';
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '8'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray1, charArray0, (-1286), (-1286));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array size mismatch.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 0;
      // Undeclared exception!
      try { 
        CharArrays.ensureOffsetLength(charArray0, (-206), (-206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Offset (-206) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = '{';
      char[] charArray1 = CharArrays.grow(charArray0, (-1161));
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'W', '{'}, charArray0);
      assertArrayEquals(new char[] {'W', '{'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CharArrays.binarySearch(charArray0, (-1161), 156, '/', charComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147483145 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[][] charArray1 = new char[2][3];
      charArray1[0] = charArray0;
      // Undeclared exception!
      try { 
        CharArrays.binarySearch(charArray0, 17, 120, '[');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 68 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'B';
      charArray0[0] = 'B';
      char char1 = 'M';
      charArray0[1] = 'M';
      // Undeclared exception!
      try { 
        CharArrays.binarySearch(charArray0, (-149), 8, 'B');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147483577 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[][] charArray2 = new char[0][8];
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray2, (-785), (-785));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      charArray0[2] = 'n';
      charArray0[3] = 'v';
      charArray0[4] = 'Z';
      CharArrays.ensureOffsetLength(charArray0, 0, 0);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.mergeSort(charArray0, 0, 0, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.fill(charArray0, 0, 0, 'Z');
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'(', 'Z', 'n', 'v', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.radixSort(charArray0);
      assertArrayEquals(new char[] {'(', 'Z', 'Z', 'n', 'v'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[3];
      int[] intArray0 = new int[9];
      CharArrays.radixSortIndirect(intArray0, charArray0, true);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, charArray0.length);
      assertEquals(9, intArray0.length);
      
      char[] charArray1 = CharArrays.trim(charArray0, 1801);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      char[] charArray2 = CharArrays.grow(charArray1, 1801);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(1801, charArray2.length);
      
      CharArrays.radixSort(charArray0, 1801, 1801);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray2));
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[][] charArray1 = new char[2][3];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      CharArrays.radixSort(charArray1);
      assertEquals(2, charArray1.length);
      
      CharArrays.ensureOffsetLength(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.mergeSort(charArray0, 0, 0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.fill(charArray0, 0, 0, 'v');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.radixSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'F';
      charArray0[2] = ']';
      charArray0[3] = '=';
      charArray0[4] = 'n';
      charArray0[5] = 'i';
      charArray0[6] = '?';
      charArray0[7] = '_';
      charArray0[8] = '?';
      CharArrays.radixSort(charArray0);
      assertArrayEquals(new char[] {'=', '?', '?', 'F', ']', '_', 'd', 'i', 'n'}, charArray0);
      assertEquals(9, charArray0.length);
      
      char[][] charArray1 = new char[0][2];
      int int0 = (-1319);
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray1, 0, (-1319));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'Z';
      MockRandom mockRandom0 = new MockRandom((-829L));
      assertNotNull(mockRandom0);
      
      char[] charArray1 = CharArrays.shuffle(charArray0, 2, 2, (java.util.Random) mockRandom0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'o', 'Z'}, charArray0);
      assertArrayEquals(new char[] {'o', 'Z'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 3786;
      MockRandom mockRandom0 = new MockRandom(3786);
      assertNotNull(mockRandom0);
      
      int int1 = 288;
      IntStream intStream0 = mockRandom0.ints(288, 3786);
      assertNotNull(intStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        CharArrays.shuffle(charArray0, 3786, 0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '#';
      MockRandom mockRandom0 = new MockRandom((-304));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CharArrays.shuffle(charArray0, 5355, (-304), (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -305 out of bounds for length 3
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[0];
      char[] charArray0 = new char[1];
      char char0 = 't';
      charArray0[0] = 't';
      int int0 = 1587;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, charArray0, 1102, 1587, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1586 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = '4';
      charArray0[4] = 'z';
      charArray0[5] = '4';
      charArray0[6] = '`';
      CharArrays.radixSortIndirect((int[]) null, charArray0, charArray0, 3, 3, false);
      assertArrayEquals(new char[] {'z', 'z', 'z', '4', 'z', '4', '`'}, charArray0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = CharArrays.copy(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'z', '4', 'z', '4', '`'}, charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'z', '4', 'z', '4', '`'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.EMPTY_ARRAY;
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray0);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, 1, 8, 'Z', charComparator0);
      assertEquals(4, int0);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray3 = CharArrays.ensureCapacity(charArray0, (-383), 786);
      assertNotNull(charArray3);
      assertSame(charArray0, charArray3);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray3, charArray1);
      assertSame(charArray3, charArray2);
      assertSame(charArray3, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray3.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(119).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, '\\', charComparator0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\\';
      CharArrays.radixSortIndirect(intArray0, charArray0, charArray0, false);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new int[] {92}, intArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.grow(charArray0, 92, 119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'l';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, 'F', charComparator0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'k', 'k', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = CharArrays.grow(charArray0, 0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'l'}, charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'l'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int1 = CharArrays.binarySearch(charArray0, 2607, 1973, 'P', charComparator1);
      assertEquals((-2608), int1);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'k', 'k', 'l'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrays.radixSort(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = CharArrays.EMPTY_ARRAY;
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.fill(charArray1, 7, 8032639, '=');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index (8032639) is greater than array length (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 1171;
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.mergeSort(charArray0, 1171, 1171, charComparator0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char char0 = 'y';
      // Undeclared exception!
      try { 
        CharArrays.fill(charArray0, (-213), 124, 'y');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index (-213) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = null;
      int int0 = 8;
      // Undeclared exception!
      try { 
        CharArrays.mergeSort((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = null;
      char[] charArray0 = null;
      int int0 = (-926);
      CharArrays.radixSortIndirect((int[]) null, (char[]) null, (-926), (-926), false);
      // Undeclared exception!
      try { 
        CharArrays.mergeSort((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrays.radixSort(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = (-5994);
      char[] charArray1 = CharArrays.reverse(charArray0, 0, (-1));
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CharArrays.mergeSort(charArray0, (-5994), 127, charComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -5993 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'e';
      charArray0[0] = 'e';
      char char1 = 'p';
      charArray0[1] = 'p';
      char char2 = 'A';
      charArray0[2] = 'A';
      charArray0[3] = '9';
      char[] charArray1 = CharArrays.reverse(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      int int0 = 290;
      char[] charArray2 = CharArrays.trim(charArray0, 290);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray0);
      assertArrayEquals(new char[] {'9', 'A', 'p', 'e'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray2.length);
      
      // Undeclared exception!
      try { 
        CharArrays.ensureOffsetLength(charArray1, 290, 290);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (580) is greater than array length (4)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = CharArrays.reverse(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      char[][] charArray2 = new char[0][9];
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charComparator0).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, '\\', charComparator0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\\';
      CharArrays.radixSortIndirect(intArray0, charArray0, true);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new int[] {92}, intArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, intArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CharArrays.binarySearch(charArray0, (-728), 0, 'S', charComparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147483283 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = CharArrays.reverse(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 766;
      intArray0[2] = 7129;
      int int0 = 2423;
      intArray0[3] = 2423;
      CharArrays.radixSortIndirect(intArray0, charArray1, 0, 0, false);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new int[] {0, 766, 7129, 2423}, intArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(4, intArray0.length);
      
      char[][] charArray2 = new char[8][5];
      charArray2[0] = charArray0;
      charArray2[1] = charArray1;
      charArray2[2] = charArray1;
      charArray2[3] = charArray0;
      charArray2[4] = charArray1;
      charArray2[5] = charArray1;
      charArray2[6] = charArray1;
      charArray2[7] = charArray1;
      CharArrays.radixSort(charArray2);
      assertEquals(8, charArray2.length);
      
      CharArrays.radixSort(charArray0, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharArrays.quickSort(charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CharArrays.mergeSort(charArray0, 766, 88663, charComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 767 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, (-379), 2388163);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -379 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = ';';
      charArray0[2] = 'A';
      char char0 = 'O';
      charArray0[3] = 'O';
      char char1 = '/';
      charArray0[4] = '/';
      charArray0[5] = '|';
      char char2 = ')';
      charArray0[6] = ')';
      char char3 = 'x';
      charArray0[7] = 'x';
      char char4 = 'D';
      charArray0[8] = 'D';
      int int0 = 8;
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, (-944), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -944 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '1';
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray0.length);
      
      CharArrays.quickSort(charArray0, 3187, 18);
      assertArrayEquals(new char[] {'1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CharArrays.copy(charArray0, 3187, (-2588));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length (-2588) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.quickSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      CharArrays.fill(charArray1, 'd');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd', 'd', 'd', 'd'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd', 'd', 'd', 'd'}, charArray1);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd', 'd', 'd', 'd'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray2.length);
      
      CharArrays.quickSort(charArray2, 3, (-2618));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd', 'd', 'd', 'd'}, charArray1);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd', 'd', 'd', 'd'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray2.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray3 = CharArrays.setLength(charArray1, 1462);
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray1, charArray3);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd', 'd', 'd', 'd'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(1462, charArray3.length);
      
      int int0 = CharArrays.binarySearch(charArray3, 8032639, 8032639, 'd');
      assertEquals((-8032640), int0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray1, charArray3);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd', 'd', 'd', 'd'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray1.equals((Object)charArray3));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(1462, charArray3.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      CharArrays.quickSort(charArray0);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = (-690);
      CharArrays.mergeSort(charArray0, 122, (-690));
      assertArrayEquals(new char[] {']'}, charArray0);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.copy(charArray0, 0, (-690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length (-690) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      charArray0[2] = '`';
      charArray0[3] = 'v';
      charArray0[4] = 'Z';
      CharArrays.ensureOffsetLength(charArray0, 0, 0);
      assertArrayEquals(new char[] {'(', 'Z', '`', 'v', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.mergeSort(charArray0, 0, 0, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', '`', 'v', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      int int0 = CharArrays.binarySearch(charArray1, '(');
      assertEquals(0, int0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'(', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      
      char[] charArray2 = CharArrays.reverse(charArray1, 0, 0);
      assertNotNull(charArray2);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'(', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'(', '\u0000'}, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[][] charArray0 = new char[1][3];
      char[] charArray1 = new char[3];
      charArray1[0] = 'l';
      charArray1[1] = '#';
      charArray1[2] = ';';
      charArray0[0] = charArray1;
      CharArrays.radixSort(charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = CharArrays.binarySearch(charArray1, 'p');
      assertEquals((-4), int0);
      assertArrayEquals(new char[] {'#', ';', 'l'}, charArray1);
      assertEquals(3, charArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray2 = CharArrays.shuffle(charArray1, (-4), (-4), (java.util.Random) mockRandom0);
      assertNotNull(charArray2);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'#', ';', 'l'}, charArray1);
      assertArrayEquals(new char[] {'#', ';', 'l'}, charArray2);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      
      int int1 = CharArrays.binarySearch(charArray1, 'B');
      assertEquals((-3), int1);
      assertSame(charArray1, charArray2);
      assertArrayEquals(new char[] {'#', ';', 'l'}, charArray1);
      assertFalse(int1 == int0);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.quickSort(charArray0, 3187, 1541);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray1 = CharArrays.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrays.fill(charArray0, 'k');
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = 29;
      // Undeclared exception!
      try { 
        CharArrays.copy(charArray0, 29, 1638);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Last index (1667) is greater than array length (1)
         //
         verifyException("org.codelibs.jhighlight.fastutil.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '#';
      charArray0[2] = ';';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, (-2084), 1801, charComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2084 out of bounds for length 3
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '$';
      charArray0[2] = '[';
      charArray0[3] = '9';
      charArray0[4] = '|';
      charArray0[5] = 'Z';
      charArray0[6] = '+';
      charArray0[7] = '*';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, 293, 293, charComparator0);
      assertArrayEquals(new char[] {'w', '$', '[', '9', '|', 'Z', '+', '*'}, charArray0);
      assertEquals(8, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(293);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints(293, (-1204));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = '6';
      charArray0[2] = 'g';
      charArray0[3] = 'i';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'b', '6', 'g', 'i'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'H';
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, 766, 25, charComparator0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn((-841), 0).when(charComparator1).compare(anyChar() , anyChar());
      int int0 = CharArrays.binarySearch(charArray0, 'M', charComparator1);
      assertEquals((-3), int0);
      assertArrayEquals(new char[] {'e', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, (CharComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(charComparator0).compare(anyChar() , anyChar());
      CharArrays.quickSort(charArray0, charComparator0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'v';
      charArray0[4] = '5';
      CharArrays.ensureOffsetLength(charArray0, 0, 0);
      assertArrayEquals(new char[] {'(', 'Z', 'Z', 'v', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharArrays.mergeSort(charArray0, 0, 0, charArray0);
      assertArrayEquals(new char[] {'(', 'Z', 'Z', 'v', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = 'Z';
      int int0 = CharArrays.binarySearch(charArray1, '(');
      assertEquals(0, int0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'(', 'Z'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.mergeSort(charArray1, 390, 451, (CharComparator) null, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 391 out of bounds for length 2
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '#';
      MockRandom mockRandom0 = new MockRandom((-304));
      assertNotNull(mockRandom0);
      
      int int0 = CharArrays.binarySearch(charArray0, 2, 2, 'l', (CharComparator) null);
      assertEquals((-3), int0);
      assertArrayEquals(new char[] {'l', '#', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharComparator charComparator0 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      int int0 = CharArrays.binarySearch(charArray0, 1665, 0, '*', charComparator0);
      assertEquals((-1666), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator1 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharComparator charComparator2 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      CharArrays.quickSort(charArray0, charComparator2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      charArray1[1] = '*';
      charArray1[2] = '*';
      charArray1[3] = '*';
      CharComparator charComparator3 = mock(CharComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(charComparator3).compare(anyChar() , anyChar());
      CharArrays.mergeSort(charArray1, charComparator3);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'*', '*', '*', '*'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      boolean boolean0 = CharArrays.equals(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect((int[]) null, charArray0, 1597, 947, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 873;
      char[] charArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, (char[]) null, 256, 873, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 872 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[][] charArray0 = new char[3][0];
      char[] charArray1 = new char[2];
      charArray1[0] = 'U';
      charArray1[1] = '5';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[0];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray0[1] = charArray2;
      char[] charArray3 = new char[6];
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      
      charArray3[0] = '5';
      charArray3[1] = '5';
      charArray3[2] = '5';
      charArray3[3] = 'U';
      charArray3[4] = '5';
      charArray3[5] = 'U';
      charArray0[2] = charArray3;
      int int0 = 1736;
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, 1736, 1736);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of index 2 has not the same length of the array of index 0.
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = CharArrays.copy(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.binarySearch(charArray0, 'y', (CharComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[][] charArray0 = new char[10][8];
      CharArrays.radixSort(charArray0);
      assertEquals(10, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[0];
      char[] charArray0 = new char[0];
      CharArrays.radixSortIndirect(intArray0, charArray0, false);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '5';
      charArray0[0] = '5';
      char[] charArray1 = CharArrays.copy(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'5'}, charArray0);
      assertArrayEquals(new char[] {'5'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      char[][] charArray2 = new char[1][6];
      charArray2[0] = charArray1;
      CharArrays.radixSort(charArray2, (-3081), (-3081));
      assertEquals(1, charArray2.length);
      
      int[] intArray0 = null;
      int int0 = 136861;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect((int[]) null, charArray1, (-3081), 136861, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = null;
      char char0 = 'f';
      // Undeclared exception!
      try { 
        CharArrays.binarySearch((char[]) null, 'f');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[][] charArray1 = new char[2][3];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      CharArrays.radixSort(charArray1);
      assertEquals(2, charArray1.length);
      
      char[] charArray2 = CharArrays.ensureCapacity(charArray0, 90);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(90, charArray2.length);
      
      int int0 = CharArrays.binarySearch(charArray0, 'b');
      assertEquals((-6), int0);
      assertNotSame(charArray0, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray2));
      assertEquals(5, charArray0.length);
      
      char[] charArray3 = CharArrays.trim(charArray2, 90);
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray0);
      assertSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(90, charArray2.length);
      assertEquals(90, charArray3.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray2, 90, (-872));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -962
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = '5';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      CharArrays.fill(charArray0, 'W');
      assertArrayEquals(new char[] {'W', 'W', 'W', 'W', 'W', 'W', 'W'}, charArray0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = CharArrays.reverse(charArray0, 314, 314);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'W', 'W', 'W', 'W', 'W', 'W', 'W'}, charArray0);
      assertArrayEquals(new char[] {'W', 'W', 'W', 'W', 'W', 'W', 'W'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      
      char[] charArray2 = CharArrays.ensureCapacity(charArray0, 89);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'W', 'W', 'W', 'W', 'W', 'W', 'W'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(89, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '\"';
      charArray0[2] = '~';
      CharArrays.radixSort(charArray0, charArray0);
      assertArrayEquals(new char[] {'x', '\"', '~'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int0 = (-5999);
      int int1 = 66;
      // Undeclared exception!
      try { 
        CharArrays.reverse(charArray0, (-5999), 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2966 out of bounds for length 3
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '4';
      charArray0[4] = '`';
      charArray0[5] = '4';
      charArray0[6] = '`';
      int int0 = CharArrays.binarySearch(charArray0, 'm');
      assertEquals((-8), int0);
      assertArrayEquals(new char[] {'`', '`', '`', '4', '`', '4', '`'}, charArray0);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharArrays.reverse(charArray0, (-699), (-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -353 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrays.mergeSort(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = CharArrays.reverse(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray1, 8, (-2665));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2673
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '`';
      charArray0[2] = '|';
      charArray0[3] = '5';
      charArray0[4] = '1';
      charArray0[5] = 'J';
      charArray0[6] = '[';
      charArray0[7] = '|';
      charArray0[8] = ':';
      // Undeclared exception!
      try { 
        CharArrays.radixSort(charArray0, 1353, 760);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -593
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'X';
      charArray0[2] = '|';
      CharArrays.mergeSort(charArray0, 3285, 104);
      assertArrayEquals(new char[] {'C', 'X', '|'}, charArray0);
      assertEquals(3, charArray0.length);
      
      CharArrays.radixSort(charArray0, charArray0);
      assertArrayEquals(new char[] {'C', 'X', '|'}, charArray0);
      assertEquals(3, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      char[] charArray1 = CharArrays.shuffle(charArray0, 0, 0, (java.util.Random) mockRandom0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'C', 'X', '|'}, charArray0);
      assertArrayEquals(new char[] {'C', 'X', '|'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = 'A';
      charArray0[2] = 'H';
      charArray0[3] = 'V';
      charArray0[4] = 'b';
      charArray0[6] = 'b';
      charArray0[7] = 'b';
      charArray0[8] = '~';
      char[] charArray1 = CharArrays.grow(charArray0, 0, 1590);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      CharArrays.radixSort(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      char[] charArray2 = CharArrays.grow(charArray1, 3);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray1);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray2.length);
      
      char[] charArray3 = CharArrays.grow(charArray2, 1801, 0);
      assertNotNull(charArray3);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray3);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray1);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'b', 'b', '~'}, charArray2);
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray2.length);
      assertEquals(1801, charArray3.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) 'V';
      intArray0[2] = (int) '~';
      intArray0[3] = 1801;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, charArray1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 86 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = 'A';
      charArray0[2] = 'H';
      charArray0[3] = 'V';
      charArray0[4] = 'b';
      charArray0[6] = 'v';
      charArray0[7] = 'v';
      charArray0[8] = '~';
      char[] charArray1 = CharArrays.grow(charArray0, 0, 1590);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      CharArrays.radixSort(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      char[] charArray2 = CharArrays.grow(charArray1, 3);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray1);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray2.length);
      
      char[] charArray3 = CharArrays.grow(charArray2, 1801, 0);
      assertNotNull(charArray3);
      assertSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray3);
      assertSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray1);
      assertArrayEquals(new char[] {'\'', 'A', 'H', 'V', 'b', '\u0000', 'v', 'v', '~'}, charArray2);
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray2.length);
      assertEquals(1801, charArray3.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) 'V';
      intArray0[2] = (int) '~';
      intArray0[3] = 1801;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, charArray1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 86 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      
      char[] charArray2 = CharArrays.reverse(charArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      
      char[] charArray3 = CharArrays.grow(charArray0, 8, 8);
      assertNotNull(charArray3);
      assertSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray3, charArray1);
      assertSame(charArray3, charArray0);
      assertSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray3.length);
      
      boolean boolean0 = CharArrays.equals(charArray2, charArray0);
      assertTrue(boolean0);
      assertSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrays.mergeSort(charArray0, (-1033), (-2861), charArray0);
      Random.setNextRandom((-2861));
      // Undeclared exception!
      try { 
        CharArrays.grow(charArray0, 59, (-594));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      CharArrays.equals(charArray0, charArray0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, charArray0, 0, 3187, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3186 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[][] charArray1 = new char[2][3];
      charArray1[0] = charArray0;
      charArray1[1] = charArray0;
      CharArrays.radixSort(charArray1);
      char[] charArray2 = CharArrays.grow(charArray0, (-1561));
      assertSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = CharArrays.ensureCapacity(charArray0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray1, charArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrays.radixSort(charArray0, charArray0);
      CharArrays.equals(charArray0, charArray0);
      // Undeclared exception!
      try { 
        CharArrays.quickSort(charArray0, (-5999), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -5999 out of bounds for length 7
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '\'';
      charArray0[0] = '\'';
      char char1 = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'H';
      char char2 = 'V';
      charArray0[3] = 'V';
      char char3 = 'b';
      charArray0[4] = 'b';
      char char4 = 'w';
      charArray0[5] = 'w';
      char char5 = 'v';
      charArray0[6] = 'v';
      char char6 = '_';
      charArray0[7] = '_';
      char char7 = '~';
      charArray0[8] = '~';
      char[] charArray1 = CharArrays.grow(charArray0, 0, 1590);
      CharArrays.radixSort(charArray1, charArray0);
      char[] charArray2 = CharArrays.grow(charArray1, 3);
      CharArrays.grow(charArray2, 1801, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) 'V';
      intArray0[2] = (int) '~';
      intArray0[3] = 1801;
      // Undeclared exception!
      try { 
        CharArrays.radixSortIndirect(intArray0, charArray0, charArray1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 86 out of bounds for length 9
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'z';
      charArray0[2] = '4';
      CharArrays.fill(charArray0, 'z');
      assertArrayEquals(new char[] {'z', 'z', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      CharArrays.equals(charArray0, charArray0);
      // Undeclared exception!
      try { 
        CharArrays.setLength(charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = '5';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      charArray0[4] = 'p';
      charArray0[5] = 'g';
      charArray0[6] = 'x';
      // Undeclared exception!
      try { 
        CharArrays.setLength(charArray0, (-1141));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1141
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = CharArrays.setLength(charArray0, 8);
      assertEquals(8, charArray1.length);
      
      CharArrays.mergeSort(charArray0);
      char[] charArray2 = CharArrays.reverse(charArray0);
      boolean boolean0 = CharArrays.equals(charArray2, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
  }
}
