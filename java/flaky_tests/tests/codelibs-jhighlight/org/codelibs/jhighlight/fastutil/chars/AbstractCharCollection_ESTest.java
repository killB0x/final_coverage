/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 03:14:19 GMT 2022
 */

package org.codelibs.jhighlight.fastutil.chars;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import org.codelibs.jhighlight.fastutil.chars.AbstractCharList;
import org.codelibs.jhighlight.fastutil.chars.CharArrayList;
import org.codelibs.jhighlight.fastutil.chars.CharCollection;
import org.codelibs.jhighlight.fastutil.chars.CharIterator;
import org.codelibs.jhighlight.fastutil.chars.CharIterators;
import org.codelibs.jhighlight.fastutil.chars.CharList;
import org.codelibs.jhighlight.fastutil.chars.CharListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCharCollection_ESTest extends AbstractCharCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayList charArrayList0 = CharArrayList.wrap(charArray0);
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 0, (-2128));
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.top();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (-2129) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      Character[] characterArray0 = new Character[8];
      Character[] characterArray1 = charArrayList0.toArray(characterArray0);
      assertEquals(8, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, 16);
      AbstractCharList.CharSubList abstractCharList_CharSubList1 = new AbstractCharList.CharSubList(abstractCharList_CharSubList0, (-1), 0);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList1.toArray(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (-1) is negative
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, 16);
      char[] charArray0 = abstractCharList_CharSubList0.toArray((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      String string0 = charArrayList0.toString();
      assertEquals("[\u0000]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList();
      char[] charArray1 = charArrayList0.toCharArray(charArray0);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      char[] charArray0 = new char[0];
      char[] charArray1 = charArrayList0.toCharArray(charArray0);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      char[] charArray1 = charArrayList0.toCharArray();
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      char[] charArray1 = charArrayList0.toArray(charArray0);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = CharArrayList.wrap(charArray0);
      Object[] objectArray0 = charArrayList0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      Object[] objectArray0 = charArrayList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.removeAll((CharCollection) charArrayList0);
      assertTrue(charArrayList0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      boolean boolean0 = charArrayList0.removeAll((Collection<?>) charArrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      Character character0 = Character.valueOf('}');
      boolean boolean0 = charArrayList0.remove(character0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      CharArrayList charArrayList0 = CharArrayList.wrap(charArray0);
      boolean boolean0 = charArrayList0.rem('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.rem(':');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayList charArrayList0 = new CharArrayList(charArray0, false);
      CharIterator charIterator0 = charArrayList0.iterator();
      assertNotNull(charIterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayList charArrayList0 = new CharArrayList(charArray0, false);
      boolean boolean0 = charArrayList0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = CharArrayList.wrap(charArray0);
      boolean boolean0 = charArrayList0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      charArrayList0.add('j');
      char[] charArray0 = new char[8];
      charArray0[1] = 'j';
      boolean boolean0 = charArrayList0.contains((Object) charArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      Character character0 = Character.valueOf('H');
      boolean boolean0 = charArrayList0.contains((Object) character0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.add('<');
      boolean boolean1 = charArrayList0.contains('<');
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.contains('G');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayList charArrayList0 = CharArrayList.wrap(charArray0);
      boolean boolean0 = charArrayList0.addAll((CharCollection) charArrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList((CharList) null, 0, 2388);
      CharListIterator charListIterator0 = abstractCharList_CharSubList0.listIterator(2388);
      CharIterators.UnmodifiableIterator charIterators_UnmodifiableIterator0 = new CharIterators.UnmodifiableIterator(charListIterator0);
      CharArrayList charArrayList0 = new CharArrayList((CharIterator) charIterators_UnmodifiableIterator0);
      boolean boolean0 = charArrayList0.addAll((CharCollection) charArrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.addAll((Collection<? extends Character>) charArrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      boolean boolean0 = charArrayList0.addAll((Collection<? extends Character>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      boolean boolean0 = charArrayList0.add((Character) 'q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      boolean boolean0 = charArrayList0.add('E');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList((char[]) null, true);
      // Undeclared exception!
      try { 
        charArrayList0.toCharArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      charArrayList0.size((-2129));
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        charArrayList0.toCharArray(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList((char[]) null, true);
      // Undeclared exception!
      try { 
        charArrayList0.toCharArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 1758, 16);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.toCharArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1742
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, (-1338), 16);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.toCharArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1338 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.toArray((Character[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      // Undeclared exception!
      try { 
        charArrayList0.retainAll((CharCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, 4378);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.retainAll((CharCollection) charArrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      charArrayList0.size = 1520;
      // Undeclared exception!
      try { 
        charArrayList0.retainAll((CharCollection) charArrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 16 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayList charArrayList0 = CharArrayList.wrap(charArray0);
      // Undeclared exception!
      try { 
        charArrayList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      charArrayList0.size = (-320);
      // Undeclared exception!
      try { 
        charArrayList0.retainAll((Collection<?>) charArrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than list size (-320)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, (-1), 16);
      // Undeclared exception!
      try { 
        charArrayList0.retainAll((Collection<?>) abstractCharList_CharSubList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[13];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      // Undeclared exception!
      try { 
        charArrayList0.removeAll((CharCollection) charArrayList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.removeAll((CharCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, 0);
      // Undeclared exception!
      try { 
        charArrayList0.removeAll((CharCollection) abstractCharList_CharSubList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than list size (-16)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[15];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, (-305), 16);
      // Undeclared exception!
      try { 
        charArrayList0.removeAll((CharCollection) abstractCharList_CharSubList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -305 out of bounds for length 15
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      char[] charArray0 = new char[5];
      CharArrayList charArrayList1 = CharArrayList.wrap(charArray0);
      charArrayList0.addAll((CharCollection) charArrayList1);
      // Undeclared exception!
      try { 
        charArrayList0.removeAll((Collection<?>) charArrayList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 1507, 16);
      // Undeclared exception!
      try { 
        charArrayList0.removeAll((Collection<?>) abstractCharList_CharSubList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than list size (-1491)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, (-1338), 16);
      // Undeclared exception!
      try { 
        charArrayList0.removeAll((Collection<?>) abstractCharList_CharSubList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1338 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        charArrayList0.remove(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Character (java.lang.Object and java.lang.Character are in module java.base of loader 'bootstrap')
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.rem((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        charArrayList0.rem(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Character (java.lang.Object and java.lang.Character are in module java.base of loader 'bootstrap')
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, (-1242), 16);
      Character character0 = Character.valueOf('Y');
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.rem((Object) character0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1242 out of bounds for length 1
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 15, (-3961));
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.iterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than list size (-3976)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      charArrayList0.size(2690);
      boolean boolean0 = charArrayList0.containsAll((Collection<?>) charArrayList0);
      assertTrue(boolean0);
      
      boolean boolean1 = charArrayList0.containsAll((CharCollection) charArrayList0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.containsAll((CharCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        charArrayList0.containsAll((CharCollection) abstractCharList_CharSubList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, (-2298), 16);
      // Undeclared exception!
      try { 
        charArrayList0.containsAll((CharCollection) abstractCharList_CharSubList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2298 out of bounds for length 0
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, 2400);
      // Undeclared exception!
      try { 
        charArrayList0.containsAll((Collection<?>) abstractCharList_CharSubList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      charArrayList0.size = 1207;
      // Undeclared exception!
      try { 
        charArrayList0.containsAll((Collection<?>) charArrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        charArrayList0.contains(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Character (java.lang.Object and java.lang.Character are in module java.base of loader 'bootstrap')
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      charArrayList0.size = 4502;
      // Undeclared exception!
      try { 
        charArrayList0.contains('-');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 16 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      charArrayList0.size((-16));
      // Undeclared exception!
      try { 
        charArrayList0.charIterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than list size (-16)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.addAll((CharCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, 0);
      // Undeclared exception!
      try { 
        charArrayList0.addAll((CharCollection) abstractCharList_CharSubList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than list size (-16)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.addAll((Collection<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, 1);
      // Undeclared exception!
      try { 
        charArrayList0.addAll((Collection<? extends Character>) abstractCharList_CharSubList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than list size (-15)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, (-1389), 1);
      // Undeclared exception!
      try { 
        charArrayList0.addAll((Collection<? extends Character>) abstractCharList_CharSubList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1389 out of bounds for length 16
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.add((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayList charArrayList0 = new CharArrayList(charArray0, false);
      charArrayList0.size = (-1914);
      // Undeclared exception!
      try { 
        charArrayList0.add((Character) 'H');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1914 out of bounds for length 5
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 551, 551);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.add('W');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (551) is greater than list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      // Undeclared exception!
      try { 
        charArrayList0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, 16);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.top();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList((CharList) null, 0, 2388);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.top();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList$CharSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = CharArrayList.wrap(charArray0);
      boolean boolean0 = charArrayList0.removeAll((Collection<?>) charArrayList0);
      assertTrue(charArrayList0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList();
      CharArrayList charArrayList1 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.removeAll(charArrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      CharIterators.EmptyIterator charIterators_EmptyIterator0 = new CharIterators.EmptyIterator();
      CharArrayList charArrayList1 = new CharArrayList((CharIterator) charIterators_EmptyIterator0);
      charArrayList1.push('b');
      boolean boolean0 = charArrayList1.retainAll((Collection<?>) charArrayList0);
      assertEquals(0, charArrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      charArrayList0.push('b');
      boolean boolean0 = charArrayList0.retainAll((Collection<?>) charArrayList0);
      assertFalse(charArrayList0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      CharArrayList charArrayList1 = new CharArrayList((Collection<? extends Character>) charArrayList0);
      charArrayList1.add('g');
      boolean boolean0 = charArrayList0.containsAll((Collection<?>) charArrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      charArrayList0.add('H');
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = charArrayList0.toArray(characterArray0);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = charArrayList0.toArray(characterArray0);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      char[] charArray0 = new char[7];
      CharArrayList charArrayList1 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.removeAll((CharCollection) charArrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      CharIterators.EmptyIterator charIterators_EmptyIterator0 = new CharIterators.EmptyIterator();
      CharArrayList charArrayList1 = new CharArrayList((CharIterator) charIterators_EmptyIterator0);
      charArrayList1.push('b');
      boolean boolean0 = charArrayList1.retainAll((CharCollection) charArrayList0);
      assertTrue(charArrayList1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.retainAll((CharCollection) charArrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList();
      CharArrayList charArrayList1 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.containsAll((CharCollection) charArrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      boolean boolean0 = charArrayList0.containsAll((CharCollection) charArrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      char[] charArray0 = new char[2];
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, 154);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.toCharArray(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (16) is greater than or equal to list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.CharArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      char[] charArray0 = new char[1];
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 154, 16);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.toCharArray(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (0) is greater than list size (-138)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 16, (-661));
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.toCharArray((char[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -677
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      CharIterator charIterator0 = charArrayList0.charIterator();
      assertNotNull(charIterator0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      Character character0 = Character.valueOf('Y');
      boolean boolean0 = charArrayList0.rem((Object) character0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayList charArrayList0 = new CharArrayList(charArray0);
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 522, 16);
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -506
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      char[] charArray0 = charArrayList0.toCharArray();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      char[] charArray0 = new char[0];
      char[] charArray1 = charArrayList0.toArray(charArray0);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CharArrayList charArrayList0 = new CharArrayList();
      AbstractCharList.CharSubList abstractCharList_CharSubList0 = new AbstractCharList.CharSubList(charArrayList0, 1015, 449);
      Character character0 = Character.valueOf('');
      // Undeclared exception!
      try { 
        abstractCharList_CharSubList0.add(character0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index (449) is greater than list size (0)
         //
         verifyException("org.codelibs.jhighlight.fastutil.chars.AbstractCharList", e);
      }
  }
}
