/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 01:34:43 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.net.SocketException;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.SocketChannel;
import java.security.MessageDigest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.ChunkedBody;
import org.netpreserve.jwarc.DigestingMessageBody;
import org.netpreserve.jwarc.HttpResponse;
import org.netpreserve.jwarc.LengthedBody;
import org.netpreserve.jwarc.MediaType;
import org.netpreserve.jwarc.Message;
import org.netpreserve.jwarc.MessageBody;
import org.netpreserve.jwarc.MessageHeaders;
import org.netpreserve.jwarc.MessageVersion;
import org.netpreserve.jwarc.WarcPayload;
import org.netpreserve.jwarc.WarcResponse;
import org.netpreserve.jwarc.WarcRevisit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WarcResponse_ESTest extends WarcResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = WarcRevisit.SERVER_NOT_MODIFIED_1_0;
      WarcResponse.Builder warcResponse_Builder0 = new WarcResponse.Builder(uRI0);
      MediaType mediaType0 = MediaType.JSON;
      byte[] byteArray0 = new byte[2];
      warcResponse_Builder0.body(mediaType0, byteArray0);
      WarcResponse warcResponse0 = warcResponse_Builder0.build();
      try { 
        warcResponse0.payloadType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid HTTP message at byte position 0: <-- HERE -->\\x00\\x00
         //
         verifyException("org.netpreserve.jwarc.HttpParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WarcResponse.Builder warcResponse_Builder0 = new WarcResponse.Builder("Z*_");
      try { 
        DatagramChannel.open();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_0;
      WarcResponse warcResponse0 = new WarcResponse(messageVersion0, (MessageHeaders) null, (MessageBody) null);
      // Undeclared exception!
      try { 
        warcResponse0.payloadType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.WarcResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WarcResponse.Builder warcResponse_Builder0 = new WarcResponse.Builder("Z*_");
      MessageVersion messageVersion0 = MessageVersion.HTTP_1_1;
      Map<String, List<String>> map0 = warcResponse_Builder0.headerMap;
      MessageHeaders messageHeaders0 = new MessageHeaders(map0);
      MessageBody messageBody0 = warcResponse_Builder0.makeBody();
      HttpResponse httpResponse0 = new HttpResponse(31, "Z*_", messageVersion0, messageHeaders0, messageBody0);
      WarcResponse.Builder warcResponse_Builder1 = warcResponse_Builder0.body(httpResponse0);
      WarcResponse warcResponse0 = warcResponse_Builder1.build();
      try { 
        warcResponse0.payload();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid HTTP message at byte position 11: HTTP/1.1 31<-- HERE --> Z*_\\r\\nContent-Length: 0\\r\\nWARC-Record-ID:...
         //
         verifyException("org.netpreserve.jwarc.HttpParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.HTTP_1_1;
      WarcResponse warcResponse0 = new WarcResponse(messageVersion0, (MessageHeaders) null, (MessageBody) null);
      // Undeclared exception!
      try { 
        warcResponse0.payload();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WarcResponse.Builder warcResponse_Builder0 = new WarcResponse.Builder("\"");
      WarcResponse warcResponse0 = warcResponse_Builder0.build();
      MediaType mediaType0 = warcResponse0.contentType();
      warcResponse_Builder0.body(mediaType0, (Message) warcResponse0);
      WarcResponse warcResponse1 = warcResponse_Builder0.build();
      try { 
        warcResponse1.http();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid HTTP message at byte position 0: <-- HERE -->WARC/1.0\\r\\nContent-Length: 0\\r\\nWARC-Date: ...
         //
         verifyException("org.netpreserve.jwarc.HttpParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = WarcRevisit.SERVER_NOT_MODIFIED_1_0;
      WarcResponse.Builder warcResponse_Builder0 = new WarcResponse.Builder(uRI0);
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      SocketChannel socketChannel0 = SocketChannel.open();
      warcResponse_Builder0.body(mediaType0, (ReadableByteChannel) socketChannel0, 1L);
      WarcResponse warcResponse0 = warcResponse_Builder0.build();
      // Undeclared exception!
      try { 
        warcResponse0.http();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = WarcRevisit.SERVER_NOT_MODIFIED_1_1;
      WarcResponse.Builder warcResponse_Builder0 = new WarcResponse.Builder(uRI0);
      File file0 = MockFile.createTempFile("org.netpreserve.jwarc.WarcResponse", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      warcResponse_Builder0.body((MediaType) null, (ReadableByteChannel) fileChannel0, 1L);
      WarcResponse warcResponse0 = warcResponse_Builder0.build();
      // Undeclared exception!
      try { 
        warcResponse0.http();
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.HTTP_1_1;
      WarcResponse warcResponse0 = new WarcResponse(messageVersion0, (MessageHeaders) null, (MessageBody) null);
      // Undeclared exception!
      try { 
        warcResponse0.http();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.WarcResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MessageVersion messageVersion0 = new MessageVersion("", 0, 0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      MessageHeaders messageHeaders0 = new MessageHeaders(hashMap0);
      MessageBody messageBody0 = MessageBody.empty();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ChunkedBody chunkedBody0 = new ChunkedBody(messageBody0, byteBuffer0);
      WarcResponse warcResponse0 = new WarcResponse(messageVersion0, messageHeaders0, chunkedBody0);
      try { 
        warcResponse0.http();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // EOF reached before end of chunked encoding
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WarcResponse.Builder warcResponse_Builder0 = new WarcResponse.Builder("");
      WarcResponse warcResponse0 = warcResponse_Builder0.build();
      Optional<WarcPayload> optional0 = warcResponse0.payload();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.HTTP_1_1;
      MessageBody messageBody0 = MessageBody.empty();
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(messageBody0, (MessageDigest) null);
      MessageHeaders messageHeaders0 = MessageHeaders.parse(digestingMessageBody0);
      WarcResponse warcResponse0 = new WarcResponse(messageVersion0, messageHeaders0, digestingMessageBody0);
      HttpResponse httpResponse0 = warcResponse0.http();
      HttpResponse httpResponse1 = warcResponse0.http();
      assertSame(httpResponse1, httpResponse0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MessageVersion messageVersion0 = new MessageVersion("", (-1504), 1834);
      MessageBody messageBody0 = MessageBody.empty();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      LengthedBody lengthedBody0 = LengthedBody.create(messageBody0, byteBuffer0, 1L);
      MessageHeaders messageHeaders0 = MessageHeaders.parse(lengthedBody0);
      WarcResponse warcResponse0 = new WarcResponse(messageVersion0, messageHeaders0, lengthedBody0);
      // Undeclared exception!
      try { 
        warcResponse0.payloadType();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // http() cannot be called after reading from body
         //
         verifyException("org.netpreserve.jwarc.WarcResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WarcResponse.Builder warcResponse_Builder0 = new WarcResponse.Builder(uRI0);
      WarcResponse warcResponse0 = warcResponse_Builder0.build();
      HttpResponse httpResponse0 = warcResponse0.http();
      warcResponse_Builder0.body(httpResponse0);
      Optional<WarcPayload> optional0 = warcResponse0.payload();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WarcResponse.Builder warcResponse_Builder0 = new WarcResponse.Builder(uRI0);
      WarcResponse warcResponse0 = warcResponse_Builder0.build();
      MediaType mediaType0 = warcResponse0.payloadType();
      assertEquals("octet-stream", mediaType0.subtype());
  }
}
