/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Nov 16 00:57:53 GMT 2022
 */

package org.netpreserve.jwarc.tools;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

@EvoSuiteClassExclude
public class SavebackTool_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  protected static ExecutorService executor; 

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.netpreserve.jwarc.tools.SavebackTool"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    executor.shutdownNow(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/home/user"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SavebackTool_ESTest_scaffolding.class.getClassLoader() ,
      "org.netpreserve.jwarc.Warcinfo$Builder",
      "org.netpreserve.jwarc.WarcRecord$AbstractBuilder",
      "org.netpreserve.jwarc.MessageBody",
      "org.netpreserve.jwarc.Message$AbstractBuilder",
      "org.netpreserve.jwarc.MediaType",
      "org.netpreserve.jwarc.tools.Utils",
      "org.netpreserve.jwarc.WarcResponse",
      "org.netpreserve.jwarc.Message",
      "org.netpreserve.jwarc.LengthedBody$Seekable",
      "org.netpreserve.jwarc.tools.WarcTool",
      "org.netpreserve.jwarc.GzipChannel",
      "org.netpreserve.jwarc.WarcTargetRecord",
      "org.netpreserve.jwarc.MessageVersion",
      "org.netpreserve.jwarc.ParsingException",
      "org.netpreserve.jwarc.LengthedBody",
      "org.netpreserve.jwarc.WarcWriter",
      "org.netpreserve.jwarc.WarcRecord$Constructor",
      "org.netpreserve.jwarc.Warcinfo",
      "org.netpreserve.jwarc.WarcCaptureRecord",
      "org.netpreserve.jwarc.MessageHeaders",
      "org.netpreserve.jwarc.MessageParser",
      "org.netpreserve.jwarc.WarcCompression",
      "org.netpreserve.jwarc.tools.SavebackTool",
      "org.netpreserve.jwarc.WarcRecord",
      "org.netpreserve.jwarc.WarcRequest"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SavebackTool_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.netpreserve.jwarc.tools.SavebackTool",
      "org.netpreserve.jwarc.WarcCompression",
      "org.netpreserve.jwarc.WarcWriter",
      "org.netpreserve.jwarc.tools.Utils",
      "org.netpreserve.jwarc.Message$AbstractBuilder",
      "org.netpreserve.jwarc.WarcRecord$AbstractBuilder",
      "org.netpreserve.jwarc.Warcinfo$Builder",
      "org.netpreserve.jwarc.MessageVersion",
      "org.netpreserve.jwarc.Message",
      "org.netpreserve.jwarc.WarcRecord",
      "org.netpreserve.jwarc.MessageParser",
      "org.netpreserve.jwarc.MediaType",
      "org.netpreserve.jwarc.MessageHeaders",
      "org.netpreserve.jwarc.MessageBody",
      "org.netpreserve.jwarc.LengthedBody",
      "org.netpreserve.jwarc.Warcinfo",
      "org.netpreserve.jwarc.GzipChannel"
    );
  }
}
