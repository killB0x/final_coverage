/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 01:21:22 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.ChunkedBody;
import org.netpreserve.jwarc.HttpRequest;
import org.netpreserve.jwarc.LengthedBody;
import org.netpreserve.jwarc.MessageBody;
import org.netpreserve.jwarc.MessageHeaders;
import org.netpreserve.jwarc.MessageVersion;
import org.netpreserve.jwarc.WarcCompression;
import org.netpreserve.jwarc.WarcConversion;
import org.netpreserve.jwarc.WarcRecord;
import org.netpreserve.jwarc.WarcRequest;
import org.netpreserve.jwarc.WarcRevisit;
import org.netpreserve.jwarc.WarcWriter;
import org.netpreserve.jwarc.Warcinfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WarcWriter_ESTest extends WarcWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
          WarcWriter warcWriter0 = new WarcWriter(pipedOutputStream0);
          URI uRI0 = MockURI.aFTPURI;
          HttpRequest.Builder httpRequest_Builder0 = new HttpRequest.Builder("", "");
          HttpRequest httpRequest0 = httpRequest_Builder0.build();
          // Undeclared exception!
          try { 
            warcWriter0.fetch(uRI0, httpRequest0, (OutputStream) pipedOutputStream0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          WarcCompression warcCompression0 = WarcCompression.NONE;
          WarcWriter warcWriter0 = new WarcWriter((WritableByteChannel) null, warcCompression0);
          URI uRI0 = WarcRevisit.SERVER_NOT_MODIFIED_1_1;
          // Undeclared exception!
          try { 
            warcWriter0.fetch(uRI0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      MessageVersion messageVersion0 = MessageVersion.HTTP_1_0;
      MessageHeaders messageHeaders0 = MessageHeaders.parse(messageBody0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^mzsi\"", true);
      WarcWriter warcWriter0 = new WarcWriter(mockFileOutputStream0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(54);
      ChunkedBody chunkedBody0 = new ChunkedBody(messageBody0, byteBuffer0);
      ChunkedBody chunkedBody1 = chunkedBody0.strict();
      Warcinfo warcinfo0 = new Warcinfo(messageVersion0, messageHeaders0, chunkedBody1);
      try { 
        warcWriter0.write(warcinfo0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // chunked encoding at position 0: <-- HERE -->\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      WarcWriter warcWriter0 = new WarcWriter(socketChannel0);
      WarcRequest.Builder warcRequest_Builder0 = new WarcRequest.Builder("!#$%&'*+-.^_`|~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890");
      WarcRequest warcRequest0 = warcRequest_Builder0.build();
      // Undeclared exception!
      try { 
        warcWriter0.write(warcRequest0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      MessageVersion messageVersion0 = MessageVersion.HTTP_1_0;
      MessageHeaders messageHeaders0 = MessageHeaders.parse(messageBody0);
      Warcinfo warcinfo0 = new Warcinfo(messageVersion0, messageHeaders0, messageBody0);
      File file0 = MockFile.createTempFile("$`,k\"!~ta_:4'UY (w", "$`,k\"!~ta_:4'UY (w", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      WarcWriter warcWriter0 = new WarcWriter(fileChannel0);
      // Undeclared exception!
      try { 
        warcWriter0.write(warcinfo0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      WarcWriter warcWriter0 = new WarcWriter(socketChannel0);
      warcWriter0.close();
      WarcRequest.Builder warcRequest_Builder0 = new WarcRequest.Builder("!#$%&'*+-.^_`|~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890");
      WarcRequest warcRequest0 = warcRequest_Builder0.build();
      try { 
        warcWriter0.write(warcRequest0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      WarcWriter warcWriter0 = new WarcWriter(socketChannel0);
      // Undeclared exception!
      try { 
        warcWriter0.write((WarcRecord) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.WarcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      MessageHeaders messageHeaders0 = MessageHeaders.parse(messageBody0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'I>&ciPXl|");
      WarcWriter warcWriter0 = new WarcWriter(mockFileOutputStream0);
      Warcinfo warcinfo0 = new Warcinfo(messageVersion0, messageHeaders0, messageBody0);
      try { 
        warcWriter0.write(warcinfo0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      MessageHeaders messageHeaders0 = MessageHeaders.parse(messageBody0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".\"ZU$");
      WarcWriter warcWriter0 = new WarcWriter(mockFileOutputStream0);
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      ChunkedBody chunkedBody0 = new ChunkedBody(messageBody0, byteBuffer0);
      WarcRecord warcRecord0 = new WarcRecord(messageVersion0, messageHeaders0, chunkedBody0);
      try { 
        warcWriter0.write(warcRecord0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // EOF reached before end of chunked encoding
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WarcWriter warcWriter0 = new WarcWriter((WritableByteChannel) null);
      // Undeclared exception!
      try { 
        warcWriter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.WarcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("j\"mj71SGMC{8RvI S", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WarcWriter warcWriter0 = new WarcWriter(mockFileOutputStream0);
      try { 
        warcWriter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      WarcWriter warcWriter0 = null;
      try {
        warcWriter0 = new WarcWriter(fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WarcWriter warcWriter0 = null;
      try {
        warcWriter0 = new WarcWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      MessageHeaders messageHeaders0 = MessageHeaders.parse(messageBody0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G;@kA'az:VLNv!");
      WarcWriter warcWriter0 = new WarcWriter(mockFileOutputStream0);
      MessageVersion messageVersion0 = MessageVersion.HTTP_1_0;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(154);
      LengthedBody lengthedBody0 = LengthedBody.create(messageBody0, byteBuffer0, 154);
      WarcConversion warcConversion0 = new WarcConversion(messageVersion0, messageHeaders0, lengthedBody0);
      warcWriter0.write(warcConversion0);
      assertEquals(170L, warcWriter0.position());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MessageVersion messageVersion0 = new MessageVersion("close", (-5397), 332);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      MessageHeaders messageHeaders0 = new MessageHeaders(hashMap0);
      MessageBody messageBody0 = MessageBody.empty();
      Warcinfo warcinfo0 = new Warcinfo(messageVersion0, messageHeaders0, messageBody0);
      MockFile mockFile0 = new MockFile("JP<IV6\"GqE5#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      WarcWriter warcWriter0 = new WarcWriter(mockFileOutputStream0);
      warcWriter0.write(warcinfo0);
      long long0 = warcWriter0.position();
      assertEquals(23L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WarcCompression warcCompression0 = WarcCompression.GZIP;
      WarcWriter warcWriter0 = null;
      try {
        warcWriter0 = new WarcWriter((WritableByteChannel) null, warcCompression0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("org.netpreserve.jwarc.GzipChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WarcCompression warcCompression0 = WarcCompression.NONE;
      WarcWriter warcWriter0 = new WarcWriter((WritableByteChannel) null, warcCompression0);
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        warcWriter0.fetch(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      WarcWriter warcWriter0 = new WarcWriter(pipedOutputStream0);
      long long0 = warcWriter0.position();
      assertEquals(0L, long0);
  }
}
