/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 01:43:43 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import java.security.MessageDigest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.ChunkedBody;
import org.netpreserve.jwarc.DigestingMessageBody;
import org.netpreserve.jwarc.LengthedBody;
import org.netpreserve.jwarc.MessageBody;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DigestingMessageBody_ESTest extends DigestingMessageBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      lengthedBody0.position = (-878L);
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(lengthedBody0, (MessageDigest) null);
      ByteBuffer byteBuffer0 = lengthedBody0.buffer;
      int int0 = digestingMessageBody0.read(byteBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      lengthedBody0.position = 1L;
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(lengthedBody0, (MessageDigest) null);
      long long0 = digestingMessageBody0.position();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      lengthedBody0.position = (-5388L);
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(lengthedBody0, (MessageDigest) null);
      long long0 = digestingMessageBody0.position();
      assertEquals((-5388L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1769);
      ChunkedBody chunkedBody0 = new ChunkedBody(messageBody0, byteBuffer0);
      chunkedBody0.close();
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(messageBody0, (MessageDigest) null);
      boolean boolean0 = digestingMessageBody0.isOpen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(339);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      ChunkedBody chunkedBody1 = chunkedBody0.strict();
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(chunkedBody1, (MessageDigest) null);
      try { 
        digestingMessageBody0.read(byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // chunked encoding at position 0: <-- HERE -->\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(chunkedBody0, (MessageDigest) null);
      // Undeclared exception!
      try { 
        digestingMessageBody0.read(byteBuffer0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(chunkedBody0, (MessageDigest) null);
      ByteBuffer byteBuffer1 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        digestingMessageBody0.read(byteBuffer1);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(360);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      LengthedBody lengthedBody0 = LengthedBody.create(chunkedBody0, byteBuffer0, 360);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(lengthedBody0, (MessageDigest) null);
      // Undeclared exception!
      try { 
        digestingMessageBody0.read(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(chunkedBody0, (MessageDigest) null);
      // Undeclared exception!
      try { 
        digestingMessageBody0.read(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The source buffer is this buffer
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(789);
      LengthedBody lengthedBody0 = LengthedBody.create(messageBody0, byteBuffer0, 401L);
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(lengthedBody0, (MessageDigest) null);
      // Undeclared exception!
      try { 
        digestingMessageBody0.read(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The source buffer is this buffer
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      ByteBuffer byteBuffer0 = lengthedBody0.buffer;
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(chunkedBody0, (MessageDigest) null);
      try { 
        digestingMessageBody0.read(byteBuffer0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // EOF reached before end of chunked encoding
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody((MessageBody) null, (MessageDigest) null);
      // Undeclared exception!
      try { 
        digestingMessageBody0.position();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.DigestingMessageBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody((MessageBody) null, (MessageDigest) null);
      // Undeclared exception!
      try { 
        digestingMessageBody0.isOpen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.DigestingMessageBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody((MessageBody) null, (MessageDigest) null);
      // Undeclared exception!
      try { 
        digestingMessageBody0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.DigestingMessageBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(chunkedBody0, (MessageDigest) null);
      ByteBuffer byteBuffer1 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        digestingMessageBody0.read(byteBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.DigestingMessageBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(lengthedBody0, (MessageDigest) null);
      ByteBuffer byteBuffer0 = lengthedBody0.buffer;
      int int0 = digestingMessageBody0.read(byteBuffer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(messageBody0, (MessageDigest) null);
      boolean boolean0 = digestingMessageBody0.isOpen();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(messageBody0, (MessageDigest) null);
      long long0 = digestingMessageBody0.position();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(messageBody0, (MessageDigest) null);
      MessageDigest messageDigest0 = digestingMessageBody0.getDigest();
      assertNull(messageDigest0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(messageBody0, (MessageDigest) null);
      digestingMessageBody0.close();
      try { 
        digestingMessageBody0.read((ByteBuffer) null);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.LengthedBody", e);
      }
  }
}
