/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 01:20:10 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.WarcFilterException;
import org.netpreserve.jwarc.WarcFilterLexer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WarcFilterLexer_ESTest extends WarcFilterLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("\"\"$;Ul[g;,qzPg.E");
      String string0 = warcFilterLexer0.string();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("<gXHI|I.>`7U}o");
      String string0 = warcFilterLexer0.peekOperator();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("");
      boolean boolean0 = warcFilterLexer0.atEnd();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("\"obT\"ZLqI^pP;X]");
      boolean boolean0 = warcFilterLexer0.atEnd();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("=V$WSU$L!@F=M[.");
      // Undeclared exception!
      try { 
        warcFilterLexer0.peekOperator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("\"Ppj\"[");
      // Undeclared exception!
      try { 
        warcFilterLexer0.advance();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = null;
      try {
        warcFilterLexer0 = new WarcFilterLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("2./b>II^Xk cvlZk");
      warcFilterLexer0.stringOrNumber();
      // Undeclared exception!
      try { 
        warcFilterLexer0.token();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("\n");
      // Undeclared exception!
      try { 
        warcFilterLexer0.operator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unexpected end of input
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("X%5<9:\"LG$hBxz`7");
      // Undeclared exception!
      try { 
        warcFilterLexer0.operator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected operator
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("([a-zA-Z0-9:_-]+)|(&&|[|][|]|!=|==|!~|=~|[<>]=?|!?[(]|[)])|\"([^\"]*)\"|(s+)");
      String string0 = warcFilterLexer0.operator();
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("<");
      // Undeclared exception!
      try { 
        warcFilterLexer0.token();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected field name
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("expected operator");
      warcFilterLexer0.token();
      WarcFilterException warcFilterException0 = warcFilterLexer0.error("expected operator");
      assertEquals("expected operator", warcFilterException0.input());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("\"Ppj\"[");
      String string0 = warcFilterLexer0.string();
      assertEquals("Ppj", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("og.nktpreserve.jwarc.Wa%cFilterExceltion");
      // Undeclared exception!
      try { 
        warcFilterLexer0.stringOrNumber();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected string or integer
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("(<m-ujhk");
      // Undeclared exception!
      try { 
        warcFilterLexer0.stringOrNumber();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected string or integer
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("expected operator");
      warcFilterLexer0.peekOperator();
      warcFilterLexer0.advance();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("\"obT\"ZLqI^pP;X]");
      warcFilterLexer0.stringOrNumber();
      // Undeclared exception!
      try { 
        warcFilterLexer0.string();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected string
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WarcFilterLexer warcFilterLexer0 = new WarcFilterLexer("\"obT\"ZLqI^pP;X]");
      WarcFilterException warcFilterException0 = warcFilterLexer0.error("\"obT\"ZLqI^pP;X]");
      assertEquals("\"obT\"ZLqI^pP;X]", warcFilterException0.input());
  }
}
