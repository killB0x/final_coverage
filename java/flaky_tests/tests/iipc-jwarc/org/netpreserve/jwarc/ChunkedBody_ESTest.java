/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 00:55:38 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.ChunkedBody;
import org.netpreserve.jwarc.LengthedBody;
import org.netpreserve.jwarc.MessageBody;
import org.netpreserve.jwarc.MessageHeaders;
import org.netpreserve.jwarc.MessageVersion;
import org.netpreserve.jwarc.WarcRecord;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChunkedBody_ESTest extends ChunkedBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      assertEquals(0L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertNotNull(lengthedBody0);
      
      ByteBuffer byteBuffer0 = lengthedBody0.buffer;
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      assertEquals(0L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertNotNull(chunkedBody0);
      
      try { 
        chunkedBody0.consume();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // EOF reached before end of chunked encoding
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(5, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(5, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals(5, byteBuffer1.limit());
      assertFalse(byteBuffer1.isReadOnly());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(5, byteBuffer1.remaining());
      assertEquals(5, byteBuffer1.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteBuffer1);
      
      ChunkedBody chunkedBody0 = new ChunkedBody((ReadableByteChannel) null, byteBuffer1);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals(5, byteBuffer1.limit());
      assertFalse(byteBuffer1.isReadOnly());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(5, byteBuffer1.remaining());
      assertEquals(5, byteBuffer1.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.position());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      int int0 = chunkedBody0.read(byteBuffer0);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertTrue(byteBuffer0.equals((Object)byteBuffer1));
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(5, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(5, byteBuffer0.position());
      assertEquals(5, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(5, byteBuffer1.position());
      assertEquals(5, byteBuffer1.limit());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer1.toString());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(5, byteBuffer1.capacity());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(5L, chunkedBody0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, int0);
      
      ChunkedBody chunkedBody1 = chunkedBody0.strict();
      assertNotSame(byteBuffer1, byteBuffer0);
      assertSame(chunkedBody0, chunkedBody1);
      assertSame(chunkedBody1, chunkedBody0);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(5, byteBuffer1.position());
      assertEquals(5, byteBuffer1.limit());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer1.toString());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(5, byteBuffer1.capacity());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(5L, chunkedBody0.position());
      assertEquals(5L, chunkedBody1.position());
      assertEquals((-1L), chunkedBody1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(chunkedBody1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      LengthedBody lengthedBody0 = LengthedBody.create((ReadableByteChannel) null, byteBuffer0, 0L);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(lengthedBody0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      chunkedBody0.consume();
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.position());
      assertEquals(5, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertEquals(5L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int0 = chunkedBody0.read(byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.position());
      assertEquals(5, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertEquals(5L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(5, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(5, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(0, byteBuffer1.position());
      assertTrue(byteBuffer1.hasArray());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(5, byteBuffer1.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer1.toString());
      assertEquals(5, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(5, byteBuffer1.limit());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteBuffer1);
      
      ChunkedBody chunkedBody0 = new ChunkedBody((ReadableByteChannel) null, byteBuffer1);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(0, byteBuffer1.position());
      assertTrue(byteBuffer1.hasArray());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(5, byteBuffer1.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer1.toString());
      assertEquals(5, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(5, byteBuffer1.limit());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      int int0 = chunkedBody0.read(byteBuffer0);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertTrue(byteBuffer0.equals((Object)byteBuffer1));
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(5, byteBuffer1.position());
      assertFalse(byteBuffer1.hasRemaining());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(5, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(5, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer1.toString());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(5L, chunkedBody0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, int0);
      
      long long0 = chunkedBody0.position();
      assertNotSame(byteBuffer1, byteBuffer0);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(5, byteBuffer1.position());
      assertFalse(byteBuffer1.hasRemaining());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(5, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(5, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer1.toString());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(5L, chunkedBody0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(fileChannel0, byteBuffer0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      boolean boolean0 = chunkedBody0.isOpen();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      assertEquals(0L, messageBody0.position());
      assertEquals(0L, messageBody0.size());
      assertNotNull(messageBody0);
      
      MessageVersion messageVersion0 = MessageVersion.ARC_1_1;
      assertEquals("ARC", messageVersion0.getProtocol());
      assertEquals(1, messageVersion0.getMajor());
      assertEquals(1, messageVersion0.getMinor());
      assertNotNull(messageVersion0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MessageHeaders messageHeaders0 = new MessageHeaders(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(messageHeaders0);
      
      WarcRecord warcRecord0 = new WarcRecord(messageVersion0, messageHeaders0, messageBody0);
      assertEquals(0L, messageBody0.position());
      assertEquals(0L, messageBody0.size());
      assertEquals("ARC", messageVersion0.getProtocol());
      assertEquals(1, messageVersion0.getMajor());
      assertEquals(1, messageVersion0.getMinor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(warcRecord0);
      
      Charset charset0 = warcRecord0.headerCharset();
      assertEquals(0L, messageBody0.position());
      assertEquals(0L, messageBody0.size());
      assertEquals("ARC", messageVersion0.getProtocol());
      assertEquals(1, messageVersion0.getMajor());
      assertEquals(1, messageVersion0.getMinor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertEquals(0L, messageBody0.position());
      assertEquals(0L, messageBody0.size());
      assertEquals("ARC", messageVersion0.getProtocol());
      assertEquals(1, messageVersion0.getMajor());
      assertEquals(1, messageVersion0.getMinor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(byteBuffer0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(messageBody0, byteBuffer0);
      assertEquals(0L, messageBody0.position());
      assertEquals(0L, messageBody0.size());
      assertEquals("ARC", messageVersion0.getProtocol());
      assertEquals(1, messageVersion0.getMajor());
      assertEquals(1, messageVersion0.getMinor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(chunkedBody0);
      
      chunkedBody0.close();
      assertEquals(0L, messageBody0.position());
      assertEquals(0L, messageBody0.size());
      assertEquals("ARC", messageVersion0.getProtocol());
      assertEquals(1, messageVersion0.getMajor());
      assertEquals(1, messageVersion0.getMinor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = chunkedBody0.isOpen();
      assertEquals(0L, messageBody0.position());
      assertEquals(0L, messageBody0.size());
      assertEquals("ARC", messageVersion0.getProtocol());
      assertEquals(1, messageVersion0.getMajor());
      assertEquals(1, messageVersion0.getMinor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      assertTrue(datagramChannel0.isOpen());
      assertFalse(datagramChannel0.isRegistered());
      assertEquals(5, datagramChannel0.validOps());
      assertFalse(datagramChannel0.isConnected());
      assertTrue(datagramChannel0.isBlocking());
      assertNotNull(datagramChannel0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(datagramChannel0, byteBuffer0);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(datagramChannel0.isOpen());
      assertFalse(datagramChannel0.isRegistered());
      assertEquals(5, datagramChannel0.validOps());
      assertFalse(datagramChannel0.isConnected());
      assertTrue(datagramChannel0.isBlocking());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      // Undeclared exception!
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertNotNull(socketChannel0);
      
      LengthedBody lengthedBody0 = LengthedBody.create(socketChannel0, byteBuffer0, 1182L);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(1182L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(lengthedBody0);
      
      ReadableByteChannel readableByteChannel0 = lengthedBody0.discardPushbackOnRead();
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(1182L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(readableByteChannel0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(readableByteChannel0, byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(1182L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      // Undeclared exception!
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@m");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(fileChannel0, byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      // Undeclared exception!
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChunkedBody chunkedBody0 = new ChunkedBody((ReadableByteChannel) null, (ByteBuffer) null);
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertNotNull(chunkedBody0);
      
      // Undeclared exception!
      try { 
        chunkedBody0.read((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      LengthedBody lengthedBody0 = LengthedBody.create((ReadableByteChannel) null, byteBuffer0, 870L);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0L, lengthedBody0.position());
      assertEquals(870L, lengthedBody0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(lengthedBody0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0L, lengthedBody0.position());
      assertEquals(870L, lengthedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      // Undeclared exception!
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.LengthedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChunkedBody chunkedBody0 = new ChunkedBody((ReadableByteChannel) null, (ByteBuffer) null);
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertNotNull(chunkedBody0);
      
      // Undeclared exception!
      try { 
        chunkedBody0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)50;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertArrayEquals(new byte[] {(byte)0, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      byte byte0 = byteBuffer0.get();
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.position());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertArrayEquals(new byte[] {(byte)0, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)0, byte0);
      
      LengthedBody lengthedBody0 = LengthedBody.create((ReadableByteChannel) null, byteBuffer0, 0L);
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.position());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0L, lengthedBody0.position());
      assertEquals(0L, lengthedBody0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(lengthedBody0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.position());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0L, lengthedBody0.position());
      assertEquals(0L, lengthedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      try { 
        chunkedBody0.consume();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // EOF reached before end of chunked encoding
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(117);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=117 cap=117]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(117, byteBuffer0.remaining());
      assertEquals(117, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(117, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody((ReadableByteChannel) null, byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=117 cap=117]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(117, byteBuffer0.remaining());
      assertEquals(117, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(117, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertNotNull(chunkedBody0);
      
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(0, byteBuffer1.position());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(4, byteBuffer1.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(4, byteBuffer1.limit());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(4, byteBuffer1.capacity());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteBuffer1);
      
      int int0 = chunkedBody0.read(byteBuffer1);
      assertFalse(byteBuffer0.equals((Object)byteBuffer1));
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals(4, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=4 lim=117 cap=117]", byteBuffer0.toString());
      assertEquals(117, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(117, byteBuffer0.limit());
      assertEquals(113, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(4L, chunkedBody0.position());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(4, byteBuffer1.limit());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.remaining());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(4, byteBuffer1.capacity());
      assertEquals(4, byteBuffer1.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The source buffer is this buffer
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.limit());
      assertArrayEquals(new byte[] {(byte)118, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody((ReadableByteChannel) null, byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.limit());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertArrayEquals(new byte[] {(byte)118, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      // Undeclared exception!
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The source buffer is this buffer
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E  'KZEsL^oQ");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("E  'KZEsL^oQ");
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(12, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(12, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(fileChannel0, byteBuffer0);
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(12, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(12, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertNotNull(chunkedBody0);
      
      // Undeclared exception!
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The source buffer is this buffer
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody((ReadableByteChannel) null, byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(1, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(1, byteBuffer1.limit());
      assertFalse(byteBuffer1.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(1, byteBuffer1.capacity());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteBuffer1);
      
      ByteBuffer byteBuffer2 = ByteBuffer.wrap(byteArray0);
      assertNotSame(byteBuffer2, byteBuffer1);
      assertNotSame(byteBuffer2, byteBuffer0);
      assertTrue(byteBuffer2.equals((Object)byteBuffer1));
      assertTrue(byteBuffer2.equals((Object)byteBuffer0));
      assertEquals(1, byteBuffer2.limit());
      assertFalse(byteBuffer2.isDirect());
      assertEquals(0, byteBuffer2.position());
      assertEquals(1, byteBuffer2.capacity());
      assertFalse(byteBuffer2.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer2.toString());
      assertTrue(byteBuffer2.hasArray());
      assertTrue(byteBuffer2.hasRemaining());
      assertEquals(1, byteBuffer2.remaining());
      assertEquals(0, byteBuffer2.arrayOffset());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteBuffer2);
      
      ChunkedBody chunkedBody1 = new ChunkedBody(chunkedBody0, byteBuffer1);
      assertTrue(byteBuffer0.equals((Object)byteBuffer1));
      assertTrue(byteBuffer0.equals((Object)byteBuffer2));
      assertTrue(byteBuffer1.equals((Object)byteBuffer2));
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(chunkedBody1.equals((Object)chunkedBody0));
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(0L, chunkedBody0.position());
      assertEquals((-1L), chunkedBody0.size());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(1, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(1, byteBuffer1.limit());
      assertFalse(byteBuffer1.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(1, byteBuffer1.capacity());
      assertEquals(0L, chunkedBody1.position());
      assertEquals((-1L), chunkedBody1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(chunkedBody1);
      
      ByteBuffer byteBuffer3 = byteBuffer2.put(byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(byteBuffer1, byteBuffer3);
      assertNotSame(byteBuffer1, byteBuffer2);
      assertSame(byteBuffer2, byteBuffer3);
      assertNotSame(byteBuffer2, byteBuffer1);
      assertNotSame(byteBuffer2, byteBuffer0);
      assertNotSame(byteBuffer3, byteBuffer1);
      assertNotSame(byteBuffer3, byteBuffer0);
      assertSame(byteBuffer3, byteBuffer2);
      assertTrue(byteBuffer1.equals((Object)byteBuffer2));
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertTrue(byteBuffer2.equals((Object)byteBuffer1));
      assertFalse(byteBuffer2.equals((Object)byteBuffer0));
      assertTrue(byteBuffer3.equals((Object)byteBuffer1));
      assertFalse(byteBuffer3.equals((Object)byteBuffer0));
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(1, byteBuffer1.limit());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(1, byteBuffer1.position());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(1, byteBuffer1.capacity());
      assertFalse(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer2.hasRemaining());
      assertEquals(1, byteBuffer2.position());
      assertEquals(1, byteBuffer2.limit());
      assertFalse(byteBuffer2.isDirect());
      assertEquals(1, byteBuffer2.capacity());
      assertFalse(byteBuffer2.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer2.toString());
      assertTrue(byteBuffer2.hasArray());
      assertEquals(0, byteBuffer2.arrayOffset());
      assertEquals(0, byteBuffer2.remaining());
      assertFalse(byteBuffer3.hasRemaining());
      assertEquals(1, byteBuffer3.position());
      assertEquals(1, byteBuffer3.limit());
      assertFalse(byteBuffer3.isDirect());
      assertEquals(0, byteBuffer3.arrayOffset());
      assertEquals(0, byteBuffer3.remaining());
      assertEquals(1, byteBuffer3.capacity());
      assertFalse(byteBuffer3.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer3.toString());
      assertTrue(byteBuffer3.hasArray());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteBuffer3);
      
      int int0 = chunkedBody1.read(byteBuffer3);
      assertNotSame(byteBuffer0, byteBuffer2);
      assertNotSame(byteBuffer0, byteBuffer3);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertNotSame(chunkedBody0, chunkedBody1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(byteBuffer1, byteBuffer3);
      assertNotSame(byteBuffer1, byteBuffer2);
      assertSame(byteBuffer2, byteBuffer3);
      assertNotSame(byteBuffer2, byteBuffer1);
      assertNotSame(byteBuffer2, byteBuffer0);
      assertNotSame(chunkedBody1, chunkedBody0);
      assertNotSame(byteBuffer3, byteBuffer1);
      assertNotSame(byteBuffer3, byteBuffer0);
      assertSame(byteBuffer3, byteBuffer2);
      assertTrue(byteBuffer0.equals((Object)byteBuffer3));
      assertFalse(byteBuffer0.equals((Object)byteBuffer1));
      assertTrue(byteBuffer0.equals((Object)byteBuffer2));
      assertFalse(chunkedBody0.equals((Object)chunkedBody1));
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(byteBuffer1.equals((Object)byteBuffer3));
      assertFalse(byteBuffer1.equals((Object)byteBuffer2));
      assertTrue(byteBuffer2.equals((Object)byteBuffer0));
      assertFalse(byteBuffer2.equals((Object)byteBuffer1));
      assertFalse(chunkedBody1.equals((Object)chunkedBody0));
      assertFalse(byteBuffer3.equals((Object)byteBuffer1));
      assertTrue(byteBuffer3.equals((Object)byteBuffer0));
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.position());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(1L, chunkedBody0.position());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(1, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(1, byteBuffer1.limit());
      assertFalse(byteBuffer1.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(1, byteBuffer1.capacity());
      assertFalse(byteBuffer2.hasRemaining());
      assertEquals(1, byteBuffer2.position());
      assertEquals(1, byteBuffer2.limit());
      assertFalse(byteBuffer2.isDirect());
      assertEquals(1, byteBuffer2.capacity());
      assertFalse(byteBuffer2.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer2.toString());
      assertTrue(byteBuffer2.hasArray());
      assertEquals(0, byteBuffer2.arrayOffset());
      assertEquals(0, byteBuffer2.remaining());
      assertEquals(0L, chunkedBody1.position());
      assertEquals((-1L), chunkedBody1.size());
      assertFalse(byteBuffer3.hasRemaining());
      assertEquals(1, byteBuffer3.position());
      assertEquals(1, byteBuffer3.limit());
      assertFalse(byteBuffer3.isDirect());
      assertEquals(0, byteBuffer3.arrayOffset());
      assertEquals(0, byteBuffer3.remaining());
      assertEquals(1, byteBuffer3.capacity());
      assertFalse(byteBuffer3.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer3.toString());
      assertTrue(byteBuffer3.hasArray());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      assertEquals(0L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertNotNull(lengthedBody0);
      
      ByteBuffer byteBuffer0 = lengthedBody0.buffer;
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      assertEquals(0L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertNotNull(chunkedBody0);
      
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // EOF reached before end of chunked encoding
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      ChunkedBody chunkedBody0 = new ChunkedBody(fileChannel0, byteBuffer0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(chunkedBody0);
      
      int int0 = chunkedBody0.read(byteBuffer0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals((-1L), chunkedBody0.size());
      assertEquals(0L, chunkedBody0.position());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ChunkedBody chunkedBody0 = new ChunkedBody(fileChannel0, byteBuffer0);
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      ChunkedBody chunkedBody1 = new ChunkedBody(chunkedBody0, byteBuffer1);
      // Undeclared exception!
      try { 
        chunkedBody1.consume();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(117);
      ChunkedBody chunkedBody0 = new ChunkedBody((ReadableByteChannel) null, byteBuffer0);
      long long0 = chunkedBody0.position();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ChunkedBody chunkedBody0 = new ChunkedBody((ReadableByteChannel) null, byteBuffer0);
      chunkedBody0.strict();
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // chunked encoding at position 0: <-- HERE -->\\x00
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      ByteBuffer byteBuffer0 = lengthedBody0.buffer;
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      chunkedBody0.close();
      try { 
        chunkedBody0.read(byteBuffer0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.LengthedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      LengthedBody lengthedBody0 = LengthedBody.create((ReadableByteChannel) null, byteBuffer0, 0L);
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      // Undeclared exception!
      try { 
        chunkedBody0.isOpen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.LengthedBody", e);
      }
  }
}
