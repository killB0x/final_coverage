/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 01:25:56 GMT 2022
 */

package org.netpreserve.jwarc.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URISyntaxException;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.HttpRequest;
import org.netpreserve.jwarc.WarcWriter;
import org.netpreserve.jwarc.net.HttpHandler;
import org.netpreserve.jwarc.net.WarcRecorder;
import org.netpreserve.jwarc.net.WarcServer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpServer_ESTest extends HttpServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.netpreserve.jwarc.net.HttpServer$1", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      WarcWriter warcWriter0 = new WarcWriter(filterOutputStream0);
      WarcRecorder warcRecorder0 = new WarcRecorder(mockServerSocket0, warcWriter0);
      HttpHandler httpHandler0 = mock(HttpHandler.class, new ViolatedAssumptionAnswer());
      warcRecorder0.on("&AoG(ak", "", httpHandler0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      WarcRecorder warcRecorder0 = new WarcRecorder(mockServerSocket0, (WarcWriter) null);
      // Undeclared exception!
      try { 
        warcRecorder0.on((String) null, "\u0001E7<iWh:2(", (HttpHandler) null);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 10
         // \u0001E7<iWh:2(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      WarcRecorder warcRecorder0 = new WarcRecorder(mockServerSocket0, (WarcWriter) null);
      // Undeclared exception!
      try { 
        warcRecorder0.on("", (String) null, (HttpHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      WarcServer warcServer0 = new WarcServer((ServerSocket) null, linkedList0);
      // Undeclared exception!
      try { 
        warcServer0.listen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.net.HttpServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      WarcRecorder warcRecorder0 = new WarcRecorder(mockServerSocket0, (WarcWriter) null);
      try { 
        warcRecorder0.handle((Socket) null, "@4,uv@@~Y[[V2J!", (HttpRequest) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 9: @4,uv@@~Y[[V2J!
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      WarcServer warcServer0 = new WarcServer(mockServerSocket0, linkedList0);
      try { 
        warcServer0.handle((Socket) null, "boJZ%f", (HttpRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.net.HttpServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      mockServerSocket0.close();
      WarcRecorder warcRecorder0 = new WarcRecorder(mockServerSocket0, (WarcWriter) null);
      warcRecorder0.listen();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket(15, 15);
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      WarcServer warcServer0 = new WarcServer(mockServerSocket0, linkedList0);
      warcServer0.listen();
  }
}
