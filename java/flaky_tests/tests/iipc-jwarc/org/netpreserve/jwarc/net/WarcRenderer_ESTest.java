/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 01:33:45 GMT 2022
 */

package org.netpreserve.jwarc.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.nio.file.Path;
import java.time.Instant;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.WarcWriter;
import org.netpreserve.jwarc.net.CaptureIndex;
import org.netpreserve.jwarc.net.WarcRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WarcRenderer_ESTest extends WarcRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          LinkedList<Path> linkedList0 = new LinkedList<Path>();
          CaptureIndex captureIndex0 = new CaptureIndex(linkedList0);
          WarcRenderer warcRenderer0 = new WarcRenderer(captureIndex0, "");
          URI uRI0 = MockURI.URI("");
          Instant instant0 = MockInstant.ofEpochMilli(0L);
          // Undeclared exception!
          try { 
            warcRenderer0.screenshot(uRI0, instant0, (WarcWriter) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      CaptureIndex captureIndex0 = new CaptureIndex(linkedList0);
      WarcRenderer warcRenderer0 = new WarcRenderer(captureIndex0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      CaptureIndex captureIndex0 = new CaptureIndex(linkedList0);
      WarcRenderer warcRenderer0 = new WarcRenderer(captureIndex0, "");
      warcRenderer0.close();
  }
}
