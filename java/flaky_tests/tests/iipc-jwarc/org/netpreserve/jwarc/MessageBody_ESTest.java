/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 01:42:56 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.ChunkedBody;
import org.netpreserve.jwarc.LengthedBody;
import org.netpreserve.jwarc.MessageBody;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MessageBody_ESTest extends MessageBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      long long0 = messageBody0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      LengthedBody lengthedBody0 = LengthedBody.create((ReadableByteChannel) null, byteBuffer0, 1080L);
      long long0 = lengthedBody0.size();
      assertEquals(1080L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(129);
      LengthedBody lengthedBody0 = LengthedBody.create(socketChannel0, byteBuffer0, 129);
      long long0 = lengthedBody0.position();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(129);
      LengthedBody lengthedBody0 = LengthedBody.create(socketChannel0, byteBuffer0, 129);
      lengthedBody0.position = (long) 129;
      long long0 = lengthedBody0.position();
      assertEquals(129L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      lengthedBody0.position = (-3270L);
      lengthedBody0.position();
      assertEquals(0L, lengthedBody0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(140);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      ChunkedBody chunkedBody1 = chunkedBody0.strict();
      try { 
        chunkedBody1.consume();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // chunked encoding at position 0: <-- HERE -->\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      lengthedBody0.position = (-3341L);
      // Undeclared exception!
      lengthedBody0.consume();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(7);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      // Undeclared exception!
      try { 
        chunkedBody0.consume();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      // Undeclared exception!
      try { 
        chunkedBody0.consume();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("MG;RtCvb S.L_II");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ChunkedBody chunkedBody0 = new ChunkedBody(fileChannel0, byteBuffer0);
      // Undeclared exception!
      try { 
        chunkedBody0.consume();
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      chunkedBody0.close();
      try { 
        chunkedBody0.consume();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, (ByteBuffer) null);
      // Undeclared exception!
      try { 
        chunkedBody0.consume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1717);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ChunkedBody chunkedBody0 = new ChunkedBody(fileChannel0, byteBuffer0);
      try { 
        chunkedBody0.consume();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      ByteBuffer byteBuffer0 = lengthedBody0.buffer;
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      try { 
        chunkedBody0.consume();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // EOF reached before end of chunked encoding
         //
         verifyException("org.netpreserve.jwarc.ChunkedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      LengthedBody lengthedBody0 = LengthedBody.create(socketChannel0, byteBuffer0, 0L);
      ChunkedBody chunkedBody0 = new ChunkedBody(lengthedBody0, byteBuffer0);
      chunkedBody0.consume();
      assertEquals(1L, chunkedBody0.position());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, byteBuffer0);
      long long0 = chunkedBody0.size();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ChunkedBody chunkedBody0 = new ChunkedBody(socketChannel0, (ByteBuffer) null);
      InputStream inputStream0 = chunkedBody0.stream();
      assertNotNull(inputStream0);
  }
}
