/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 00:45:55 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.security.MessageDigest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.DigestingMessageBody;
import org.netpreserve.jwarc.LengthedBody;
import org.netpreserve.jwarc.MessageBody;
import org.netpreserve.jwarc.MessageHeaders;
import org.netpreserve.jwarc.MessageVersion;
import org.netpreserve.jwarc.WarcParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WarcParser_ESTest extends WarcParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WarcParser warcParser0 = new WarcParser();
      assertFalse(warcParser0.isError());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertNotNull(warcParser0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("org.netpreserve.jwarc.MediaType");
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(31, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(31, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=31 cap=31]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(31, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      warcParser0.parse(byteBuffer0);
      assertEquals(3L, warcParser0.position());
      assertTrue(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3, byteBuffer0.position());
      assertEquals(31, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=31 cap=31]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(28, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(31, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertFalse(warcParser0.isError());
      assertNotNull(warcParser0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals(3, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      assertEquals(3, byteArray0.length);
      
      warcParser0.parse(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte)0}, byteArray0);
      assertEquals(1L, warcParser0.position());
      assertTrue(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals(3, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3, byteArray0.length);
      
      long long0 = warcParser0.position();
      assertEquals(1L, warcParser0.position());
      assertTrue(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WarcParser warcParser0 = new WarcParser();
      assertFalse(warcParser0.isError());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertNotNull(warcParser0);
      
      boolean boolean0 = warcParser0.isFinished();
      assertFalse(warcParser0.isError());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WarcParser warcParser0 = new WarcParser();
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertNotNull(warcParser0);
      
      MessageHeaders messageHeaders0 = warcParser0.headers();
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertNotNull(messageHeaders0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      assertEquals(0, byteArray0.length);
      
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      assertFalse(datagramChannel0.isConnected());
      assertEquals(5, datagramChannel0.validOps());
      assertTrue(datagramChannel0.isOpen());
      assertTrue(datagramChannel0.isBlocking());
      assertFalse(datagramChannel0.isRegistered());
      assertNotNull(datagramChannel0);
      
      WarcParser warcParser0 = new WarcParser();
      assertFalse(warcParser0.isError());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertNotNull(warcParser0);
      
      // Undeclared exception!
      try { 
        warcParser0.parse((ReadableByteChannel) datagramChannel0, byteBuffer0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertFalse(warcParser0.isError());
      assertNotNull(warcParser0);
      
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      assertEquals(0L, lengthedBody0.position());
      assertEquals(0L, lengthedBody0.size());
      assertNotNull(lengthedBody0);
      
      lengthedBody0.close();
      assertEquals(0L, lengthedBody0.position());
      assertEquals(0L, lengthedBody0.size());
      
      ByteBuffer byteBuffer0 = lengthedBody0.buffer;
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      try { 
        warcParser0.parse((ReadableByteChannel) lengthedBody0, byteBuffer0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.LengthedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertFalse(warcParser0.isError());
      assertNotNull(warcParser0);
      
      // Undeclared exception!
      try { 
        warcParser0.parse((ReadableByteChannel) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.WarcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertNotNull(warcParser0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      LengthedBody lengthedBody0 = LengthedBody.create((ReadableByteChannel) null, byteBuffer0, 14L);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(14L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertNotNull(lengthedBody0);
      
      // Undeclared exception!
      try { 
        warcParser0.parse((ReadableByteChannel) lengthedBody0, byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.LengthedBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertNotNull(warcParser0);
      
      MessageBody messageBody0 = MessageBody.empty();
      assertEquals(0L, messageBody0.size());
      assertEquals(0L, messageBody0.position());
      assertNotNull(messageBody0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      assertEquals(1, byteArray0.length);
      
      LengthedBody lengthedBody0 = LengthedBody.create(messageBody0, byteBuffer0, (byte)46);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertFalse(lengthedBody0.equals((Object)messageBody0));
      assertEquals(0L, messageBody0.size());
      assertEquals(0L, messageBody0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(46L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertNotNull(lengthedBody0);
      assertNotSame(messageBody0, lengthedBody0);
      assertNotSame(lengthedBody0, messageBody0);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        warcParser0.parse((ReadableByteChannel) lengthedBody0, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The source buffer is this buffer
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertFalse(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertNotNull(warcParser0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("org.nepreserve.jwarc.LengthedBody$Seekable");
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(42, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(42, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(42, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=42 cap=42]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      LengthedBody lengthedBody0 = LengthedBody.create((ReadableByteChannel) null, byteBuffer0, 4L);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(42, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(42, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(42, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=42 cap=42]", byteBuffer0.toString());
      assertEquals(4L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertNotNull(lengthedBody0);
      
      DigestingMessageBody digestingMessageBody0 = new DigestingMessageBody(lengthedBody0, (MessageDigest) null);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(42, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(42, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(42, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=42 cap=42]", byteBuffer0.toString());
      assertEquals(4L, lengthedBody0.size());
      assertEquals(0L, lengthedBody0.position());
      assertEquals((-1L), digestingMessageBody0.size());
      assertNotNull(digestingMessageBody0);
      
      // Undeclared exception!
      try { 
        warcParser0.parse((ReadableByteChannel) digestingMessageBody0, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The source buffer is this buffer
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertNotNull(warcParser0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("CX:");
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(3, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertNotNull(byteBuffer0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      try { 
        warcParser0.parse((ReadableByteChannel) fileChannel0, byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertNotNull(warcParser0);
      
      // Undeclared exception!
      try { 
        warcParser0.parse((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.WarcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertNotNull(warcParser0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("9:");
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(2, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      warcParser0.parse(byteBuffer0);
      assertEquals(2L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WarcParser warcParser0 = new WarcParser();
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertNotNull(warcParser0);
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      assertEquals(0, byteArray0.length);
      
      warcParser0.parse(byteBuffer0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertNotNull(warcParser0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(320);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(320, byteBuffer0.capacity());
      assertEquals(320, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=320 cap=320]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(320, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      warcParser0.parse(byteBuffer0);
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertTrue(warcParser0.isError());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(320, byteBuffer0.capacity());
      assertEquals(320, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=320 cap=320]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(320, byteBuffer0.remaining());
      
      boolean boolean0 = warcParser0.isError();
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertTrue(warcParser0.isError());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertFalse(warcParser0.isError());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertNotNull(warcParser0);
      
      boolean boolean0 = warcParser0.isError();
      assertFalse(warcParser0.isError());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertNotNull(warcParser0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      MessageBody messageBody0 = MessageBody.empty();
      assertEquals(0L, messageBody0.position());
      assertEquals(0L, messageBody0.size());
      assertNotNull(messageBody0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(304);
      assertEquals(0, charBuffer0.position());
      assertEquals(304, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(304, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(304, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(304, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(304, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(304, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(304, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(304, byteBuffer0.capacity());
      assertEquals(304, byteBuffer0.remaining());
      assertEquals(304, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=304 cap=304]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      LengthedBody lengthedBody0 = LengthedBody.create(messageBody0, byteBuffer0, 304);
      assertFalse(lengthedBody0.equals((Object)messageBody0));
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0L, messageBody0.position());
      assertEquals(0L, messageBody0.size());
      assertEquals(304, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(304, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(304, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(304, byteBuffer0.capacity());
      assertEquals(304, byteBuffer0.remaining());
      assertEquals(304, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=304 cap=304]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0L, lengthedBody0.position());
      assertEquals(304L, lengthedBody0.size());
      assertNotNull(lengthedBody0);
      assertNotSame(messageBody0, lengthedBody0);
      assertNotSame(lengthedBody0, messageBody0);
      
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(304, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(304, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(304, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.limit());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertNotNull(byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      
      // Undeclared exception!
      warcParser0.parse((ReadableByteChannel) lengthedBody0, byteBuffer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
      assertNotNull(warcParser0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("C9:");
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("C9:");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      // Undeclared exception!
      try { 
        warcParser0.parse((ReadableByteChannel) fileChannel0, byteBuffer0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertFalse(warcParser0.isError());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isFinished());
      assertNotNull(warcParser0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(320);
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(320, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(320, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(320, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=320 cap=320]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      warcParser0.parse(byteBuffer0);
      assertEquals(0L, warcParser0.position());
      assertTrue(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(320, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(320, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(320, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=320 cap=320]", byteBuffer0.toString());
      
      warcParser0.parse(byteBuffer0);
      assertEquals(0L, warcParser0.position());
      assertTrue(warcParser0.isError());
      assertFalse(warcParser0.isFinished());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(320, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(320, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(320, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=320 cap=320]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LengthedBody lengthedBody0 = (LengthedBody)MessageBody.empty();
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      assertFalse(warcParser0.isError());
      
      ByteBuffer byteBuffer0 = lengthedBody0.buffer;
      boolean boolean0 = warcParser0.parse((ReadableByteChannel) lengthedBody0, byteBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      MessageBody messageBody0 = MessageBody.empty();
      try { 
        warcParser0.parse((ReadableByteChannel) messageBody0, byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid WARC record at position 0: <-- HERE -->\\x00\\x00\\x00
         //
         verifyException("org.netpreserve.jwarc.WarcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)104;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      MessageBody messageBody0 = MessageBody.empty();
      try { 
        warcParser0.parse((ReadableByteChannel) messageBody0, byteBuffer0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.WarcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("\r\n");
      SocketChannel socketChannel0 = SocketChannel.open();
      warcParser0.parse((ReadableByteChannel) socketChannel0, byteBuffer0);
      warcParser0.isFinished();
      assertEquals(2L, warcParser0.position());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MessageBody messageBody0 = MessageBody.empty();
      MessageHeaders messageHeaders0 = MessageHeaders.parse(messageBody0);
      assertNotNull(messageHeaders0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      long long0 = warcParser0.position();
      assertFalse(warcParser0.isError());
      assertEquals(0L, long0);
      assertFalse(warcParser0.isFinished());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WarcParser warcParser0 = WarcParser.newWarcFieldsParser();
      MessageVersion messageVersion0 = warcParser0.version();
      assertEquals(0L, warcParser0.position());
      assertEquals(0, messageVersion0.getMajor());
      assertEquals("WARC", messageVersion0.getProtocol());
      assertEquals(0, messageVersion0.getMinor());
      assertFalse(warcParser0.isFinished());
      assertFalse(warcParser0.isError());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WarcParser warcParser0 = new WarcParser();
      warcParser0.reset();
      assertFalse(warcParser0.isFinished());
      assertEquals(0L, warcParser0.position());
      assertFalse(warcParser0.isError());
  }
}
