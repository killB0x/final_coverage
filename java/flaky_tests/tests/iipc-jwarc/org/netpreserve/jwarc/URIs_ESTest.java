/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 00:53:02 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.URIs;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class URIs_ESTest extends URIs_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = URIs.normalizePercentEncoding("%02x");
      assertEquals("%02x", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = URIs.normalizePercentEncoding("*h/5BamQ%20!uf:");
      assertEquals("*h/5BamQ%20!uf:", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = URIs.normalizePercentEncoding("n.?P;U%/");
      assertEquals("n.?P;U%25/", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = URIs.normalizePercentEncoding("jy5=%11");
      assertEquals("jy5=%11", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = URIs.normalizePathSegments("ow12>Of%Obc/b6H>[");
      assertEquals("/ow12>Of%Obc/b6H>[", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = URIs.percentEncodeIllegals("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = URIs.normalizePercentEncoding("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIs.toNormalizedSurt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIs.percentEncodeIllegals((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.URIs", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIs.parseLeniently((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIs.normalizePercentEncoding((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.URIs", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIs.normalizePathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.URIs", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = URIs.percentEncodeIllegals("invalid URL: ");
      assertEquals("invalid%20URL:%20", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = URIs.normalizePercentEncoding("jy5=%A1");
      assertEquals("jy5=%25a1", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = URIs.normalizePercentEncoding("jx=%1l");
      assertEquals("jx=%251l", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = URIs.normalizePercentEncoding("~p>vFT7'%Kb");
      assertEquals("~p>vFT7'%25Kb", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = URIs.percentEncodeIllegals(":akZ&N[~=r#ll<g");
      assertEquals(":akZ&N[~=r%23ll<g", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = URIs.percentEncodeIllegals("?.{-Uq%");
      assertEquals("?.%7f{-Uq%25", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = URIs.normalizePercentEncoding("invalid%20URL:%20");
      assertEquals("invalid%20URL:%20", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = URIs.normalizePathSegments("..");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = URIs.normalizePathSegments(".");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = URIs.normalizePathSegments("");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIs.toNormalizedSurt("jx=%1l");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // invalid URL: jx=%1l
         //
         verifyException("org.netpreserve.jwarc.URIs", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIs.toNormalizedSurt("AZ");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIs.parseLeniently("invalid%20URL:%20");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.netpreserve.jwarc.URIs", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIs.parseLeniently("AZ");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URIs uRIs0 = new URIs();
  }
}
