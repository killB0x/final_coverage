/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 01:28:51 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.MessageVersion;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MessageVersion_ESTest extends MessageVersion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_0;
      MessageVersion messageVersion1 = MessageVersion.ARC_1_1;
      boolean boolean0 = messageVersion0.equals(messageVersion1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MessageVersion messageVersion0 = new MessageVersion((String) null, 0, 0);
      MessageVersion messageVersion1 = MessageVersion.WARC_1_1;
      boolean boolean0 = messageVersion0.equals(messageVersion1);
      assertEquals(0, messageVersion0.getMajor());
      assertEquals(0, messageVersion0.getMinor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MessageVersion messageVersion0 = new MessageVersion((String) null, (-2082), (-2082));
      messageVersion0.getProtocol();
      assertEquals((-2082), messageVersion0.getMinor());
      assertEquals((-2082), messageVersion0.getMajor());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MessageVersion messageVersion0 = new MessageVersion("", 2414, (-386));
      messageVersion0.getProtocol();
      assertEquals(2414, messageVersion0.getMajor());
      assertEquals((-386), messageVersion0.getMinor());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_0;
      int int0 = messageVersion0.getMinor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MessageVersion messageVersion0 = new MessageVersion("", 2414, (-386));
      int int0 = messageVersion0.getMinor();
      assertEquals((-386), int0);
      assertEquals(2414, messageVersion0.getMajor());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MessageVersion messageVersion0 = new MessageVersion("68V.bq[9V$o<\"vG0OCg", 0, 0);
      int int0 = messageVersion0.getMajor();
      assertEquals(0, messageVersion0.getMinor());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MessageVersion messageVersion0 = new MessageVersion((String) null, (-2082), (-2082));
      int int0 = messageVersion0.getMajor();
      assertEquals((-2082), int0);
      assertEquals((-2082), messageVersion0.getMinor());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_0;
      MessageVersion messageVersion1 = MessageVersion.WARC_1_1;
      boolean boolean0 = messageVersion0.HTTP_1_1.equals(messageVersion1);
      assertFalse(messageVersion1.equals((Object)messageVersion0));
      assertFalse(boolean0);
      assertFalse(messageVersion0.equals((Object)messageVersion1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_0;
      MessageVersion messageVersion1 = MessageVersion.WARC_1_1;
      boolean boolean0 = messageVersion1.equals(messageVersion0);
      assertFalse(messageVersion0.equals((Object)messageVersion1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_0;
      MessageVersion messageVersion1 = new MessageVersion((String) null, (-1), 0);
      boolean boolean0 = messageVersion0.equals(messageVersion1);
      assertEquals(0, messageVersion1.getMinor());
      assertFalse(boolean0);
      assertEquals((-1), messageVersion1.getMajor());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      boolean boolean0 = messageVersion0.equals("WARC/1.1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      boolean boolean0 = messageVersion0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      boolean boolean0 = messageVersion0.equals(messageVersion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      MessageVersion messageVersion1 = new MessageVersion("WARC", 1, 1);
      boolean boolean0 = messageVersion0.equals(messageVersion1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      String string0 = messageVersion0.toString();
      assertEquals("WARC/1.1", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      int int0 = messageVersion0.getMinor();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      int int0 = messageVersion0.getMajor();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      messageVersion0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MessageVersion messageVersion0 = MessageVersion.WARC_1_1;
      String string0 = messageVersion0.getProtocol();
      assertEquals("WARC", string0);
  }
}
