/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 00:35:48 GMT 2022
 */

package org.netpreserve.jwarc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.netpreserve.jwarc.WarcFilterCompiler;
import org.netpreserve.jwarc.WarcRecord;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WarcFilterCompiler_ESTest extends WarcFilterCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("Ur<=9[");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = null;
      try {
        warcFilterCompiler0 = new WarcFilterCompiler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("http:");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unexpected end of input
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler(":status");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unexpected end of input
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("T8K==1]l6R%Dg");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("-(u+408J;IO|-");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // operator not allowed here: (
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("HUfYE8=~+k");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("Og>=G&Tv_TnRpth-Igi");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("r8L!~F.SKhOqq");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected string
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("(g>8)W?07@,4O!S");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected operator
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("<q.8#6Sf");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // operator not allowed here: <
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("!(");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unexpected end of input
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("(4<57");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unexpected end of input
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("e>8(7J,ESV");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // operator not allowed here: (
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("Fm<5 e]k1tPcWk");
      // Undeclared exception!
      try { 
        warcFilterCompiler0.predicate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected operator
         //
         verifyException("org.netpreserve.jwarc.WarcFilterLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("ke>8)7J,ESV");
      Predicate<WarcRecord> predicate0 = warcFilterCompiler0.predicate();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WarcFilterCompiler warcFilterCompiler0 = new WarcFilterCompiler("rm!=4");
      Predicate<WarcRecord> predicate0 = warcFilterCompiler0.predicate();
      assertNotNull(predicate0);
  }
}
