/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:43:16 GMT 2022
 */

package de.flapdoodle.embedmongo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.flapdoodle.embedmongo.Paths;
import de.flapdoodle.embedmongo.distribution.ArchiveType;
import de.flapdoodle.embedmongo.distribution.BitSize;
import de.flapdoodle.embedmongo.distribution.Distribution;
import de.flapdoodle.embedmongo.distribution.Platform;
import de.flapdoodle.embedmongo.distribution.Version;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Paths_ESTest extends Paths_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Paths.getVersionPart((Version) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.flapdoodle.embedmongo.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Paths.getPath((Distribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.flapdoodle.embedmongo.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Paths.getMongodExecutablePattern((Distribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.flapdoodle.embedmongo.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Paths.getMongodExecutable((Distribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.flapdoodle.embedmongo.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Paths.getArchiveType((Distribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.flapdoodle.embedmongo.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Version version0 = Version.V1_8_2;
      Distribution distribution0 = Distribution.detectFor(version0);
      ArchiveType archiveType0 = Paths.getArchiveType(distribution0);
      assertEquals(ArchiveType.TGZ, archiveType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Version version0 = Version.V1_6;
      BitSize bitSize0 = BitSize.B64;
      Platform platform0 = Platform.Windows;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      ArchiveType archiveType0 = Paths.getArchiveType(distribution0);
      assertEquals(ArchiveType.ZIP, archiveType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Version version0 = Version.V1_8_2;
      Platform platform0 = Platform.OS_X;
      BitSize bitSize0 = BitSize.B32;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      ArchiveType archiveType0 = Paths.getArchiveType(distribution0);
      assertEquals(ArchiveType.TGZ, archiveType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Version version0 = Version.V1_8_2;
      Platform platform0 = Platform.OS_X;
      BitSize bitSize0 = BitSize.B32;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      String string0 = Paths.getMongodExecutable(distribution0);
      assertEquals("mongod", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Version version0 = Version.V1_8_2_rc0;
      Platform platform0 = Platform.Windows;
      BitSize bitSize0 = BitSize.B32;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      String string0 = Paths.getMongodExecutable(distribution0);
      assertEquals("mongod.exe", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Version version0 = Version.V1_6;
      Platform platform0 = Platform.Linux;
      BitSize bitSize0 = BitSize.B32;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      String string0 = Paths.getMongodExecutable(distribution0);
      assertEquals("mongod", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Version version0 = Version.V2_1_0;
      String string0 = Paths.getVersionPart(version0);
      assertEquals("2.1.0", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Version version0 = Version.V2_1;
      Distribution distribution0 = Distribution.detectFor(version0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("linux/mongodb-linux-x86_64-2.1.0.tgz", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Version version0 = Version.V2_0_4;
      String string0 = Paths.getVersionPart(version0);
      assertEquals("2.0.4", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Version version0 = Version.V2_0;
      Platform platform0 = Platform.Linux;
      BitSize bitSize0 = BitSize.B32;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("linux/mongodb-linux-i686-2.0.4.tgz", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Version version0 = Version.V2_0_1;
      String string0 = Paths.getVersionPart(version0);
      assertEquals("2.0.1", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Version version0 = Version.V1_9_0;
      Platform platform0 = Platform.Linux;
      BitSize bitSize0 = BitSize.B64;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("linux/mongodb-linux-x86_64-1.9.0.tgz", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Version version0 = Version.V1_8_5;
      String string0 = Paths.getVersionPart(version0);
      assertEquals("1.8.5", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Version version0 = Version.V1_8_4;
      String string0 = Paths.getVersionPart(version0);
      assertEquals("1.8.4", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Version version0 = Version.V1_8_2_rc0;
      String string0 = Paths.getVersionPart(version0);
      assertEquals("1.8.2-rc0", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Version version0 = Version.V1_8_1;
      Distribution distribution0 = Distribution.detectFor(version0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("linux/mongodb-linux-x86_64-1.8.1.tgz", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Version version0 = Version.V1_8_0;
      Distribution distribution0 = Distribution.detectFor(version0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("linux/mongodb-linux-x86_64-1.8.0.tgz", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Version version0 = Version.V1_8_0_rc0;
      String string0 = Paths.getVersionPart(version0);
      assertEquals("1.8.0-rc0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Version version0 = Version.V1_7_6;
      Distribution distribution0 = Distribution.detectFor(version0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("linux/mongodb-linux-x86_64-1.7.6.tgz", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Version version0 = Version.V1_6;
      Platform platform0 = Platform.Linux;
      BitSize bitSize0 = BitSize.B32;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("linux/mongodb-linux-i686-1.6.5.tgz", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Version version0 = Version.V1_8_2;
      Platform platform0 = Platform.OS_X;
      BitSize bitSize0 = BitSize.B32;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("osx/mongodb-osx-i386-1.8.2.tgz", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Version version0 = Version.V1_6_5;
      Platform platform0 = Platform.Windows;
      BitSize bitSize0 = BitSize.B32;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("win32/mongodb-win32-i386-1.6.5.zip", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Version version0 = Version.V1_8;
      Distribution distribution0 = Distribution.detectFor(version0);
      String string0 = Paths.getPath(distribution0);
      assertEquals("linux/mongodb-linux-x86_64-1.8.5.tgz", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Version version0 = Version.V1_6;
      BitSize bitSize0 = BitSize.B64;
      Platform platform0 = Platform.Windows;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      Pattern pattern0 = Paths.getMongodExecutablePattern(distribution0);
      assertEquals(".*mongod.exe", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Paths paths0 = new Paths();
  }
}
