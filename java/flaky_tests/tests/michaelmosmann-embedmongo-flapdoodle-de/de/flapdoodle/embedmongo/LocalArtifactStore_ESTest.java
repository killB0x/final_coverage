/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:49:56 GMT 2022
 */

package de.flapdoodle.embedmongo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.flapdoodle.embedmongo.LocalArtifactStore;
import de.flapdoodle.embedmongo.config.RuntimeConfig;
import de.flapdoodle.embedmongo.distribution.BitSize;
import de.flapdoodle.embedmongo.distribution.Distribution;
import de.flapdoodle.embedmongo.distribution.Platform;
import de.flapdoodle.embedmongo.distribution.Version;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocalArtifactStore_ESTest extends LocalArtifactStore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      Version version0 = Version.V2_1;
      Distribution distribution0 = Distribution.detectFor(version0);
      File file0 = MockFile.createTempFile("R{]Wo0Wx=$h0g!C7s", "R{]Wo0Wx=$h0g!C7s");
      boolean boolean0 = LocalArtifactStore.store(runtimeConfig0, distribution0, file0);
      assertTrue(boolean0);
      
      File file1 = LocalArtifactStore.getArtifact(runtimeConfig0, distribution0);
      LocalArtifactStore.store(runtimeConfig0, distribution0, file1);
      assertEquals("/home/user/.embedmongo/linux", file1.getParent());
      assertEquals("/home/user/.embedmongo/linux/mongodb-linux-x86_64-2.1.0.tgz", file1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      Version version0 = Version.V2_1;
      Distribution distribution0 = Distribution.detectFor(version0);
      File file0 = MockFile.createTempFile("R{]Wo0Wx=$h0g!C7s", "R{]Wo0Wx=$h0g!C7s");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/R{]Wo0Wx=$h0g!C7s0R{]Wo0Wx=$h0g!C7s");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "~");
      boolean boolean0 = LocalArtifactStore.store(runtimeConfig0, distribution0, file0);
      assertTrue(boolean0);
      
      File file1 = LocalArtifactStore.getArtifact(runtimeConfig0, distribution0);
      assertEquals("/home/user/.embedmongo/linux", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      // Undeclared exception!
      try { 
        LocalArtifactStore.store(runtimeConfig0, (Distribution) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.flapdoodle.embedmongo.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      // Undeclared exception!
      try { 
        LocalArtifactStore.getArtifact(runtimeConfig0, (Distribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.flapdoodle.embedmongo.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      // Undeclared exception!
      try { 
        LocalArtifactStore.checkArtifact(runtimeConfig0, (Distribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.flapdoodle.embedmongo.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      Version version0 = Version.V1_6_5;
      Platform platform0 = Platform.OS_X;
      BitSize bitSize0 = BitSize.B64;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      File file0 = LocalArtifactStore.getArtifact(runtimeConfig0, distribution0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".embedmongo/linux/mongodb-linux-x86_64-2.1.0.tgz");
      FileSystemHandling.createFolder(evoSuiteFile0);
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      Version version0 = Version.V2_1;
      Distribution distribution0 = Distribution.detectFor(version0);
      File file0 = LocalArtifactStore.getArtifact(runtimeConfig0, distribution0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".embedmongo");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      // Undeclared exception!
      try { 
        LocalArtifactStore.checkArtifact(runtimeConfig0, (Distribution) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/user/.embedmongo is not a Directory
         //
         verifyException("de.flapdoodle.embedmongo.LocalArtifactStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      MockFile mockFile0 = new MockFile("");
      mockFile0.setReadable(false);
      Version version0 = Version.V1_6;
      Distribution distribution0 = Distribution.detectFor(version0);
      // Undeclared exception!
      try { 
        LocalArtifactStore.getArtifact(runtimeConfig0, distribution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could NOT create Directory /home/user/.embedmongo
         //
         verifyException("de.flapdoodle.embedmongo.LocalArtifactStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      Version version0 = Version.V1_6;
      Distribution distribution0 = Distribution.detectFor(version0);
      File file0 = MockFile.createTempFile("de.flapdoodle.embedmongo.LocalArtifactStore", "de.flapdoodle.embedmongo.LocalArtifactStore");
      LocalArtifactStore.store(runtimeConfig0, distribution0, file0);
      // Undeclared exception!
      try { 
        LocalArtifactStore.store(runtimeConfig0, distribution0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not move /tmp/de.flapdoodle.embedmongo.LocalArtifactStore0de.flapdoodle.embedmongo.LocalArtifactStore to /home/user/.embedmongo/linux/mongodb-linux-x86_64-1.6.5.tgz
         //
         verifyException("de.flapdoodle.embedmongo.LocalArtifactStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      Version version0 = Version.V2_1;
      Distribution distribution0 = Distribution.detectFor(version0);
      File file0 = MockFile.createTempFile("R`o0Wxh=$hg0l!C7s", "R`o0Wxh=$hg0l!C7s");
      boolean boolean0 = LocalArtifactStore.store(runtimeConfig0, distribution0, file0);
      boolean boolean1 = LocalArtifactStore.checkArtifact(runtimeConfig0, distribution0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      Version version0 = Version.V1_7_6;
      Distribution distribution0 = Distribution.detectFor(version0);
      boolean boolean0 = LocalArtifactStore.checkArtifact(runtimeConfig0, distribution0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RuntimeConfig runtimeConfig0 = new RuntimeConfig();
      Version version0 = Version.V1_6_5;
      Platform platform0 = Platform.OS_X;
      BitSize bitSize0 = BitSize.B64;
      Distribution distribution0 = new Distribution(version0, platform0, bitSize0);
      File file0 = MockFile.createTempFile("isa!\"[m;.V4goC-,Z{M", "isa!\"[m;.V4goC-,Z{M");
      boolean boolean0 = LocalArtifactStore.store(runtimeConfig0, distribution0, file0);
      assertTrue(boolean0);
      
      File file1 = LocalArtifactStore.getArtifact(runtimeConfig0, distribution0);
      assertNotNull(file1);
      
      file1.setExecutable(false, false);
      File file2 = LocalArtifactStore.getArtifact(runtimeConfig0, distribution0);
      assertEquals("/home/user/.embedmongo/osx/mongodb-osx-x86_64-1.6.5.tgz", file2.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalArtifactStore localArtifactStore0 = new LocalArtifactStore();
  }
}
