/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 04:09:21 GMT 2022
 */

package burlap.debugtools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.debugtools.RandomFactory;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomFactory_ESTest extends RandomFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      randomFactory0.stringMapped = null;
      // Undeclared exception!
      try { 
        randomFactory0.inseedMapped("", 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.debugtools.RandomFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      randomFactory0.intMapped = null;
      // Undeclared exception!
      try { 
        randomFactory0.inseedMapped(0, (long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.debugtools.RandomFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      randomFactory0.stringMapped = null;
      // Undeclared exception!
      try { 
        randomFactory0.ingetOrSeedMapped("", 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.debugtools.RandomFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      randomFactory0.intMapped = null;
      // Undeclared exception!
      try { 
        randomFactory0.ingetOrSeedMapped(0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.debugtools.RandomFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      randomFactory0.stringMapped = null;
      // Undeclared exception!
      try { 
        randomFactory0.ingetMapped("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.debugtools.RandomFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      randomFactory0.intMapped = null;
      // Undeclared exception!
      try { 
        randomFactory0.ingetMapped((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.debugtools.RandomFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.ingetMapped("");
      assertNotNull(random0);
      
      Random random1 = randomFactory0.ingetOrSeedMapped("", (-1L));
      assertNotNull(random1);
      assertSame(random1, random0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.ingetMapped(1);
      assertNotNull(random0);
      
      Random random1 = randomFactory0.ingetOrSeedMapped(1, 943L);
      assertNotNull(random1);
      assertSame(random1, random0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.ingetOrSeedMapped((-492), (long) (-492));
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.ingetMapped((-1));
      assertNotNull(random0);
      
      Random random1 = randomFactory0.ingetMapped((-1));
      assertSame(random1, random0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random random0 = RandomFactory.seedMapped(1, (long) 1);
      RandomFactory randomFactory0 = new RandomFactory();
      randomFactory0.defaultRandom_ = random0;
      Random random1 = randomFactory0.ingetDefault();
      assertSame(random1, random0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.inseedMapped((-2433), (long) (-2433));
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random random0 = RandomFactory.getMapped(1704);
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.inseedMapped("", 1L);
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.ingetOrSeedMapped("a`0S=]", 943L);
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Random random0 = RandomFactory.getOrSeedMapped((-1127), (-2479L));
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.ingetOrSeedDefault(1691L);
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.ingetDefault();
      assertNotNull(random0);
      
      Random random1 = randomFactory0.ingetOrSeedDefault(3097L);
      assertSame(random1, random0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random random0 = RandomFactory.seedMapped("", 0L);
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Random random0 = RandomFactory.getOrSeedDefault((-523L));
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Random random0 = RandomFactory.getDefault();
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Random random0 = RandomFactory.getOrSeedMapped("a`0S=]", 943L);
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Random random0 = RandomFactory.seedDefault((-1249L));
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Random random0 = RandomFactory.getMapped("-AF_??qH!%z]");
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomFactory randomFactory0 = new RandomFactory();
      Random random0 = randomFactory0.inseedDefault(1691L);
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomFactory.main((String[]) null);
  }
}
