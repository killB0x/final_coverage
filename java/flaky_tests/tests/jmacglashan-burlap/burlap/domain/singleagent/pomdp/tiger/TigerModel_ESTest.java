/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:43:01 GMT 2022
 */

package burlap.domain.singleagent.pomdp.tiger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.domain.singleagent.pomdp.tiger.TigerModel;
import burlap.domain.singleagent.pomdp.tiger.TigerState;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.singleagent.environment.EnvironmentOutcome;
import burlap.mdp.singleagent.model.TransitionProb;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TigerModel_ESTest extends TigerModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TigerModel tigerModel0 = new TigerModel(0.0, (-3914.7208), 477.504747324553, (-3459.99426875599));
      BlockDudeCell blockDudeCell0 = new BlockDudeCell((-2148), (-4225), "listen", "cxE61UZ:~Di&-C'5");
      SimpleAction simpleAction0 = new SimpleAction("listen");
      EnvironmentOutcome environmentOutcome0 = tigerModel0.sample(blockDudeCell0, simpleAction0);
      assertEquals(0.0, tigerModel0.correctDoor, 0.01);
      assertEquals(477.504747324553, environmentOutcome0.r, 0.01);
      assertFalse(environmentOutcome0.terminated);
      assertEquals((-3914.7208), tigerModel0.wrongDoor, 0.01);
      assertEquals((-3459.99426875599), tigerModel0.nothing, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      tigerState0.door = "openRight";
      SimpleAction simpleAction0 = new SimpleAction("openRight");
      TigerModel tigerModel0 = new TigerModel(1626.773345479664, 1626.773345479664, 307.1803, (-1.0));
      EnvironmentOutcome environmentOutcome0 = tigerModel0.sample(tigerState0, simpleAction0);
      assertEquals(1626.773345479664, environmentOutcome0.r, 0.01);
      assertEquals(1626.773345479664, tigerModel0.correctDoor, 0.01);
      assertFalse(environmentOutcome0.terminated);
      assertEquals(307.1803, tigerModel0.listen, 0.01);
      assertEquals((-1.0), tigerModel0.nothing, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openRight");
      TigerModel tigerModel0 = new TigerModel((-904.85566), (-904.85566), (-904.85566), (-904.85566));
      assertEquals((-904.85566), tigerModel0.correctDoor, 0.01);
      
      TigerState tigerState0 = new TigerState();
      tigerState0.door = "openRight";
      tigerModel0.correctDoor = 630.92907204;
      tigerModel0.sample(tigerState0, simpleAction0);
      assertEquals((-904.85566), tigerModel0.wrongDoor, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openRight");
      TigerState tigerState0 = new TigerState();
      TigerModel tigerModel0 = new TigerModel((-660.792598765831), (-3981.8), 1.0, 0.0);
      EnvironmentOutcome environmentOutcome0 = tigerModel0.sample(tigerState0, simpleAction0);
      assertEquals(1.0, tigerModel0.listen, 0.01);
      assertEquals((-660.792598765831), environmentOutcome0.r, 0.01);
      assertEquals((-3981.8), tigerModel0.wrongDoor, 0.01);
      assertFalse(environmentOutcome0.terminated);
      assertEquals(0.0, tigerModel0.nothing, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openLeft");
      TigerState tigerState0 = new TigerState();
      tigerState0.door = "~#<yi-+n>y,7\"";
      TigerModel tigerModel0 = new TigerModel(1265.7825903657897, 0.0, (-1.0), 0.0);
      EnvironmentOutcome environmentOutcome0 = tigerModel0.sample(tigerState0, simpleAction0);
      assertEquals(1265.7825903657897, environmentOutcome0.r, 0.01);
      assertFalse(environmentOutcome0.terminated);
      assertEquals((-1.0), tigerModel0.listen, 0.01);
      assertEquals(0.0, tigerModel0.nothing, 0.01);
      assertEquals(0.0, tigerModel0.wrongDoor, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openLeft");
      TigerState tigerState0 = new TigerState();
      TigerModel tigerModel0 = new TigerModel(0.0, (-105.963), 0.0, (-105.963));
      EnvironmentOutcome environmentOutcome0 = tigerModel0.sample(tigerState0, simpleAction0);
      assertEquals((-105.963), environmentOutcome0.r, 0.01);
      assertEquals(0.0, tigerModel0.correctDoor, 0.01);
      assertFalse(environmentOutcome0.terminated);
      assertEquals((-105.963), tigerModel0.nothing, 0.01);
      assertEquals(0.0, tigerModel0.listen, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TigerModel tigerModel0 = new TigerModel((-904.85566), (-904.85566), (-904.85566), (-904.85566));
      assertEquals((-904.85566), tigerModel0.wrongDoor, 0.01);
      
      tigerModel0.wrongDoor = (-382.5);
      TigerState tigerState0 = new TigerState();
      tigerState0.door = "openRight";
      SimpleAction simpleAction0 = new SimpleAction("openRight");
      tigerModel0.transitions(tigerState0, simpleAction0);
      assertEquals((-904.85566), tigerModel0.listen, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openRight");
      TigerState tigerState0 = new TigerState();
      TigerModel tigerModel0 = new TigerModel((-660.792598765831), (-3981.8), 1.0, 0.0);
      List<TransitionProb> list0 = tigerModel0.transitions(tigerState0, simpleAction0);
      assertEquals((-660.792598765831), tigerModel0.correctDoor, 0.01);
      assertEquals((-3981.8), tigerModel0.wrongDoor, 0.01);
      assertEquals(1.0, tigerModel0.listen, 0.01);
      assertEquals(2, list0.size());
      assertEquals(0.0, tigerModel0.nothing, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openLeft");
      TigerState tigerState0 = new TigerState();
      tigerState0.door = "openRight";
      TigerModel tigerModel0 = new TigerModel(2765.896123407, 0.0, 95.0, 0.0);
      List<TransitionProb> list0 = tigerModel0.transitions(tigerState0, simpleAction0);
      assertEquals(0.0, tigerModel0.nothing, 0.01);
      assertEquals(2, list0.size());
      assertEquals(0.0, tigerModel0.wrongDoor, 0.01);
      assertEquals(95.0, tigerModel0.listen, 0.01);
      assertEquals(2765.896123407, tigerModel0.correctDoor, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openLeft");
      TigerState tigerState0 = new TigerState();
      TigerModel tigerModel0 = new TigerModel(0.0, 10.0, 0.0, 10.0);
      List<TransitionProb> list0 = tigerModel0.transitions(tigerState0, simpleAction0);
      assertEquals(0.0, tigerModel0.listen, 0.01);
      assertEquals(10.0, tigerModel0.nothing, 0.01);
      assertEquals(2, list0.size());
      assertEquals(10.0, tigerModel0.wrongDoor, 0.01);
      assertEquals(0.0, tigerModel0.correctDoor, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      TigerModel tigerModel0 = new TigerModel(0, 0, 0, 0);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        tigerModel0.transitions(blockDudeCell0, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      TigerModel tigerModel0 = new TigerModel(0, 0, 0, 0);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        tigerModel0.sample(blockDudeCell0, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openRight");
      BlockDudeCell blockDudeCell0 = new BlockDudeCell("openRight", "openRight");
      TigerModel tigerModel0 = new TigerModel(0, 0, 0, 0);
      // Undeclared exception!
      try { 
        tigerModel0.sample(blockDudeCell0, simpleAction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.domain.singleagent.blockdude.state.BlockDudeCell cannot be cast to class burlap.domain.singleagent.pomdp.tiger.TigerState (burlap.domain.singleagent.blockdude.state.BlockDudeCell and burlap.domain.singleagent.pomdp.tiger.TigerState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @2683f5f7)
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TigerModel tigerModel0 = new TigerModel(1634.827587, 1634.827587, 1634.827587, 1634.827587);
      TigerState tigerState0 = new TigerState();
      SimpleAction simpleAction0 = new SimpleAction("behindLeft");
      // Undeclared exception!
      try { 
        tigerModel0.sample(tigerState0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown action burlap.mdp.core.action.SimpleAction@0000000004
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("doNothing");
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      TigerModel tigerModel0 = new TigerModel(0, 0, 0, 0);
      EnvironmentOutcome environmentOutcome0 = tigerModel0.sample(blockDudeCell0, simpleAction0);
      assertEquals(0.0, tigerModel0.listen, 0.01);
      assertEquals(0.0, tigerModel0.correctDoor, 0.01);
      assertEquals(0.0, tigerModel0.wrongDoor, 0.01);
      assertEquals(0.0, environmentOutcome0.r, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openLeft");
      TigerState tigerState0 = new TigerState();
      TigerModel tigerModel0 = new TigerModel((-229.6116143), (-229.6116143), 0.0, 0.0);
      EnvironmentOutcome environmentOutcome0 = tigerModel0.sample(tigerState0, simpleAction0);
      assertEquals(0.0, tigerModel0.listen, 0.01);
      assertEquals((-229.6116143), tigerModel0.correctDoor, 0.01);
      assertEquals(0.0, tigerModel0.nothing, 0.01);
      assertFalse(environmentOutcome0.terminated);
      assertEquals((-229.6116143), environmentOutcome0.r, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TigerModel tigerModel0 = new TigerModel((-904.85566), (-904.85566), (-904.85566), (-904.85566));
      TigerState tigerState0 = new TigerState();
      SimpleAction simpleAction0 = new SimpleAction("behindLeft");
      // Undeclared exception!
      try { 
        tigerModel0.transitions(tigerState0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown action burlap.mdp.core.action.SimpleAction@0000000004
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("listen");
      TigerModel tigerModel0 = new TigerModel((-1.0), (-1.0), (-1.0), (-1.0));
      TigerState tigerState0 = new TigerState();
      List<TransitionProb> list0 = tigerModel0.transitions(tigerState0, simpleAction0);
      assertEquals((-1.0), tigerModel0.correctDoor, 0.01);
      assertEquals((-1.0), tigerModel0.nothing, 0.01);
      assertEquals(1, list0.size());
      assertEquals((-1.0), tigerModel0.wrongDoor, 0.01);
      assertEquals((-1.0), tigerModel0.listen, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("doNothing");
      TigerModel tigerModel0 = new TigerModel((-886.1656363784422), (-886.1656363784422), (-886.1656363784422), (-886.1656363784422));
      TigerState tigerState0 = new TigerState();
      List<TransitionProb> list0 = tigerModel0.transitions(tigerState0, simpleAction0);
      assertEquals((-886.1656363784422), tigerModel0.correctDoor, 0.01);
      assertEquals((-886.1656363784422), tigerModel0.nothing, 0.01);
      assertEquals(1, list0.size());
      assertEquals((-886.1656363784422), tigerModel0.wrongDoor, 0.01);
      assertEquals((-886.1656363784422), tigerModel0.listen, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openLeft");
      TigerState tigerState0 = new TigerState();
      TigerModel tigerModel0 = new TigerModel((-229.6116143), (-229.6116143), 0.0, 0.0);
      List<TransitionProb> list0 = tigerModel0.transitions(tigerState0, simpleAction0);
      assertEquals(0.0, tigerModel0.listen, 0.01);
      assertEquals((-229.6116143), tigerModel0.wrongDoor, 0.01);
      assertEquals(2, list0.size());
      assertEquals((-229.6116143), tigerModel0.correctDoor, 0.01);
      assertEquals(0.0, tigerModel0.nothing, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction("openRight");
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      TigerModel tigerModel0 = new TigerModel(0, 0, 0, 0);
      // Undeclared exception!
      try { 
        tigerModel0.transitions(blockDudeCell0, simpleAction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.domain.singleagent.blockdude.state.BlockDudeCell cannot be cast to class burlap.domain.singleagent.pomdp.tiger.TigerState (burlap.domain.singleagent.blockdude.state.BlockDudeCell and burlap.domain.singleagent.pomdp.tiger.TigerState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @2683f5f7)
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      TigerModel tigerModel0 = new TigerModel((-229.6116143), (-229.6116143), 0.0, 0.0);
      boolean boolean0 = tigerModel0.terminal(tigerState0);
      assertFalse(boolean0);
      assertEquals((-229.6116143), tigerModel0.correctDoor, 0.01);
      assertEquals((-229.6116143), tigerModel0.wrongDoor, 0.01);
      assertEquals(0.0, tigerModel0.listen, 0.01);
      assertEquals(0.0, tigerModel0.nothing, 0.01);
  }
}
