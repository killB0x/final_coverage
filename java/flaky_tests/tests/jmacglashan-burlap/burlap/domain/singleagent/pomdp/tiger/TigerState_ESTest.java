/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:58:36 GMT 2022
 */

package burlap.domain.singleagent.pomdp.tiger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.domain.singleagent.pomdp.tiger.TigerState;
import burlap.mdp.core.state.MutableState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TigerState_ESTest extends TigerState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      TigerState tigerState1 = tigerState0.copy();
      tigerState1.door = ";y@4M>O90]";
      tigerState1.door = null;
      String string0 = tigerState1.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      tigerState0.door = "";
      String string0 = tigerState0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      tigerState0.door = null;
      Object object0 = tigerState0.get((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      tigerState0.door = null;
      // Undeclared exception!
      try { 
        tigerState0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      TigerState tigerState1 = tigerState0.copy();
      tigerState1.door = "behindLeft";
      tigerState1.door = null;
      // Undeclared exception!
      try { 
        tigerState1.equals(tigerState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      tigerState0.door = "q[z4z:";
      // Undeclared exception!
      try { 
        tigerState0.copy();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be either behindLeft or behindRight
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      tigerState0.door = null;
      // Undeclared exception!
      try { 
        tigerState0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TigerState tigerState0 = null;
      try {
        tigerState0 = new TigerState((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TigerState tigerState0 = new TigerState("behindLeft");
      assertEquals("behindLeft", tigerState0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      boolean boolean0 = tigerState0.equals(tigerState0);
      assertEquals("behindLeft", tigerState0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      boolean boolean0 = tigerState0.equals((Object) null);
      assertEquals("behindLeft", tigerState0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      // Undeclared exception!
      try { 
        tigerState0.set(tigerState0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be either behindLeft or behindRight
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      MutableState mutableState0 = tigerState0.set("behindLeft", "behindLeft");
      assertSame(mutableState0, tigerState0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      // Undeclared exception!
      try { 
        tigerState0.set(tigerState0, tigerState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be a String
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      tigerState0.set("behindRight", "behindRight");
      assertEquals("behindRight", tigerState0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TigerState tigerState0 = null;
      try {
        tigerState0 = new TigerState("Value must be a String");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be either behindLeft or behindRight
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TigerState tigerState0 = new TigerState("behindRight");
      assertEquals("behindRight", tigerState0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      String string0 = tigerState0.toString();
      assertEquals("behindLeft", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      tigerState0.variableKeys();
      assertEquals("behindLeft", tigerState0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      Object object0 = tigerState0.get(tigerState0);
      assertEquals("behindLeft", object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TigerState tigerState0 = new TigerState();
      tigerState0.hashCode();
      assertEquals("behindLeft", tigerState0.toString());
  }
}
