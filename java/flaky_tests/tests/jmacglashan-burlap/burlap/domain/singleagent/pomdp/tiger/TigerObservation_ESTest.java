/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:09:29 GMT 2022
 */

package burlap.domain.singleagent.pomdp.tiger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.domain.singleagent.pomdp.tiger.TigerObservation;
import burlap.mdp.core.state.MutableState;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TigerObservation_ESTest extends TigerObservation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation();
      tigerObservation0.hear = null;
      String string0 = tigerObservation0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation();
      tigerObservation0.hear = "";
      String string0 = tigerObservation0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation();
      tigerObservation0.hear = null;
      Object object0 = tigerObservation0.get((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation();
      tigerObservation0.hear = null;
      // Undeclared exception!
      try { 
        tigerObservation0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TigerObservation tigerObservation0 = null;
      try {
        tigerObservation0 = new TigerObservation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation("hearNothing");
      assertEquals("hearNothing", tigerObservation0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TigerObservation tigerObservation0 = null;
      try {
        tigerObservation0 = new TigerObservation("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be either hearLeft, hearRight, hearNothing, or reset
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerObservation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation();
      // Undeclared exception!
      try { 
        tigerObservation0.set("|VN5Lp", "|VN5Lp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be either hearLeft, hearRight, hearNothing, or reset
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerObservation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation();
      MutableState mutableState0 = tigerObservation0.set("hearNothing", "hearNothing");
      assertSame(tigerObservation0, mutableState0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      TigerObservation tigerObservation0 = new TigerObservation("reset");
      // Undeclared exception!
      try { 
        tigerObservation0.set(object0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be a String
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerObservation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      TigerObservation tigerObservation0 = new TigerObservation("reset");
      MutableState mutableState0 = tigerObservation0.set(object0, "reset");
      assertSame(tigerObservation0, mutableState0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation();
      tigerObservation0.hear = "obervtio";
      // Undeclared exception!
      try { 
        tigerObservation0.copy();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be either hearLeft, hearRight, hearNothing, or reset
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerObservation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation();
      TigerObservation tigerObservation1 = tigerObservation0.copy();
      assertNotSame(tigerObservation1, tigerObservation0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation("hearRight");
      MutableState mutableState0 = tigerObservation0.set("hearRight", "hearRight");
      assertSame(tigerObservation0, mutableState0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation("hearLeft");
      TigerObservation tigerObservation1 = (TigerObservation)tigerObservation0.set("hearLeft", "hearLeft");
      assertEquals("hearLeft", tigerObservation1.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      TigerObservation tigerObservation0 = new TigerObservation("reset");
      Object object1 = tigerObservation0.get(object0);
      assertEquals("reset", object1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation("reset");
      List<Object> list0 = tigerObservation0.variableKeys();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TigerObservation tigerObservation0 = new TigerObservation();
      String string0 = tigerObservation0.toString();
      assertEquals("hearNothing", string0);
  }
}
