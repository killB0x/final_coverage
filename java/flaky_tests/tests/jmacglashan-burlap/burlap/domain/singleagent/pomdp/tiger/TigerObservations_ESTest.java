/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:41:24 GMT 2022
 */

package burlap.domain.singleagent.pomdp.tiger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.domain.singleagent.pomdp.tiger.TigerObservation;
import burlap.domain.singleagent.pomdp.tiger.TigerObservations;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.state.NullState;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.pomdp.observations.ObservationProbability;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TigerObservations_ESTest extends TigerObservations_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(0.1, true);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("listen");
      List<ObservationProbability> list0 = tigerObservations0.probabilities(state0, simpleAction0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-434.8221319094737), true);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("listen");
      TigerObservations tigerObservations1 = new TigerObservations(0.0, false);
      TigerObservation tigerObservation0 = (TigerObservation)tigerObservations1.sample(state0, simpleAction0);
      assertEquals("hearLeft", tigerObservation0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(1667.18821, true);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("listen");
      State state1 = tigerObservations0.sample(state0, simpleAction0);
      TigerObservations tigerObservations1 = new TigerObservations((-206.39162553499347), true);
      double double0 = tigerObservations1.probability(state1, state0, simpleAction0);
      assertEquals((-206.39162553499347), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-545.790523564289), false);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("doNothing");
      List<ObservationProbability> list0 = tigerObservations0.probabilities(state0, simpleAction0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-103.978495), true);
      State state0 = tigerObservations0.observationReset();
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        tigerObservations0.sample(state0, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-1376.428), true);
      State state0 = tigerObservations0.observationReset();
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        tigerObservations0.probabilities(state0, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(0.0, true);
      State state0 = tigerObservations0.observationReset();
      SimpleAction simpleAction0 = new SimpleAction("doNothing");
      State state1 = tigerObservations0.observationNothing();
      double double0 = tigerObservations0.probability(state1, state0, simpleAction0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(0.0, true);
      NullState nullState0 = NullState.instance;
      State state0 = tigerObservations0.observationReset();
      SimpleAction simpleAction0 = new SimpleAction("doNothing");
      double double0 = tigerObservations0.probability(state0, nullState0, simpleAction0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(0.0, false);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("listen");
      double double0 = tigerObservations0.probability(state0, state0, simpleAction0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(0.0, true);
      SimpleAction simpleAction0 = new SimpleAction("listen");
      State state0 = tigerObservations0.observationReset();
      double double0 = tigerObservations0.probability(state0, state0, simpleAction0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullState nullState0 = NullState.instance;
      TigerObservations tigerObservations0 = new TigerObservations((-119.0), true);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("openLeft");
      double double0 = tigerObservations0.probability(state0, nullState0, simpleAction0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(0.0, true);
      State state0 = tigerObservations0.observationReset();
      SimpleAction simpleAction0 = new SimpleAction("openLeft");
      double double0 = tigerObservations0.probability(state0, state0, simpleAction0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(1667.18821, false);
      NullState nullState0 = NullState.instance;
      SimpleAction simpleAction0 = new SimpleAction("openRight");
      State state0 = tigerObservations0.sample(nullState0, simpleAction0);
      // Undeclared exception!
      try { 
        tigerObservations0.probability(nullState0, state0, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-2286.9754), false);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("hearLeft");
      // Undeclared exception!
      try { 
        tigerObservations0.probability(state0, state0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown action hearLeft; cannot return observation probability.
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerObservations", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(1.0, true);
      List<State> list0 = tigerObservations0.allObservations();
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-3290.72242575357), false);
      List<State> list0 = tigerObservations0.allObservations();
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-2286.9754), true);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("hearLeft");
      // Undeclared exception!
      try { 
        tigerObservations0.probabilities(state0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown action hearLeft; cannot return observation probability.
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerObservations", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-617.3501), true);
      SimpleAction simpleAction0 = new SimpleAction("openRight");
      State state0 = tigerObservations0.observationRight();
      List<ObservationProbability> list0 = tigerObservations0.probabilities(state0, simpleAction0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-2286.9754), true);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("hearLeft");
      // Undeclared exception!
      try { 
        tigerObservations0.sample(state0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown action hearLeft; cannot return observation sample.
         //
         verifyException("burlap.domain.singleagent.pomdp.tiger.TigerObservations", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations((-1889.8117440756), false);
      State state0 = tigerObservations0.observationLeft();
      SimpleAction simpleAction0 = new SimpleAction("listen");
      TigerObservation tigerObservation0 = (TigerObservation)tigerObservations0.sample(state0, simpleAction0);
      assertEquals("hearLeft", tigerObservation0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(0.0, true);
      State state0 = tigerObservations0.observationReset();
      SimpleAction simpleAction0 = new SimpleAction("doNothing");
      TigerObservation tigerObservation0 = (TigerObservation)tigerObservations0.sample(state0, simpleAction0);
      assertEquals("hearNothing", tigerObservation0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TigerObservations tigerObservations0 = new TigerObservations(0.0, true);
      State state0 = tigerObservations0.observationReset();
      SimpleAction simpleAction0 = new SimpleAction("openLeft");
      State state1 = tigerObservations0.sample(state0, simpleAction0);
      assertNotSame(state1, state0);
  }
}
