/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:28:44 GMT 2022
 */

package burlap.domain.singleagent.blocksworld;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.domain.singleagent.blocksworld.BlocksWorldBlock;
import burlap.domain.singleagent.blocksworld.BlocksWorldState;
import burlap.mdp.core.oo.state.MutableOOState;
import burlap.mdp.core.oo.state.ObjectInstance;
import burlap.mdp.core.state.MutableState;
import burlap.mdp.core.state.State;
import java.awt.Color;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlocksWorldState_ESTest extends BlocksWorldState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      List<Object> list0 = blocksWorldState0.variableKeys();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      Color color0 = Color.magenta;
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("bg;", true, color0, "!");
      blocksWorldState0.addObject(blocksWorldBlock0);
      List<Object> list0 = blocksWorldState0.variableKeys();
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      MutableOOState mutableOOState0 = blocksWorldState0.removeObject("");
      assertSame(mutableOOState0, blocksWorldState0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, BlocksWorldBlock> hashMap0 = new HashMap<String, BlocksWorldBlock>();
      BlocksWorldState blocksWorldState0 = new BlocksWorldState(hashMap0);
      Color color0 = Color.BLACK;
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("Twp0p03on*s-%)", true, color0, "Twp0p03on*s-%)");
      blocksWorldState0.addObject(blocksWorldBlock0);
      blocksWorldState0.removeObject("1vL2 @J\"J");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("");
      blocksWorldState0.addObject(blocksWorldBlock0);
      List<ObjectInstance> list0 = blocksWorldState0.objectsOfClass("block");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      List<ObjectInstance> list0 = blocksWorldState0.objects();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, BlocksWorldBlock> hashMap0 = new HashMap<String, BlocksWorldBlock>();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("block");
      hashMap0.put("\"Ok[^@H#4Lj?v", blocksWorldBlock0);
      BlocksWorldState blocksWorldState0 = new BlocksWorldState(hashMap0);
      List<ObjectInstance> list0 = blocksWorldState0.objects();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      ObjectInstance objectInstance0 = blocksWorldState0.object("");
      assertNull(objectInstance0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("J|WDo9j");
      blocksWorldState0.addObject(blocksWorldBlock0);
      ObjectInstance objectInstance0 = blocksWorldState0.object("J|WDo9j");
      assertEquals("block", objectInstance0.className());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      int int0 = blocksWorldState0.numObjects();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, BlocksWorldBlock> hashMap0 = new HashMap<String, BlocksWorldBlock>();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("color");
      hashMap0.put("", blocksWorldBlock0);
      BlocksWorldState blocksWorldState0 = new BlocksWorldState(hashMap0);
      int int0 = blocksWorldState0.numObjects();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState((Map<String, BlocksWorldBlock>) null);
      // Undeclared exception!
      try { 
        blocksWorldState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      // Undeclared exception!
      try { 
        blocksWorldState0.set(blocksWorldState0, blocksWorldState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An OOState variable Key must either be a OOVariableKey or String that can be parsed into an OOVariableKey, but key was of type burlap.domain.singleagent.blocksworld.BlocksWorldState
         //
         verifyException("burlap.mdp.core.oo.state.OOStateUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      // Undeclared exception!
      try { 
        blocksWorldState0.set((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.OOStateUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState((Map<String, BlocksWorldBlock>) null);
      // Undeclared exception!
      try { 
        blocksWorldState0.renameObject((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      // Undeclared exception!
      try { 
        blocksWorldState0.objectsOfClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState((Map<String, BlocksWorldBlock>) null);
      // Undeclared exception!
      try { 
        blocksWorldState0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState((Map<String, BlocksWorldBlock>) null);
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      // Undeclared exception!
      try { 
        blocksWorldState0.addObject(blocksWorldBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState((Map<String, BlocksWorldBlock>) null);
      // Undeclared exception!
      try { 
        blocksWorldState0.objects();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      // Undeclared exception!
      try { 
        blocksWorldState0.get(": \"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      Color color0 = Color.cyan;
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("", false, color0, "");
      blocksWorldState0.addObject(blocksWorldBlock0);
      // Undeclared exception!
      try { 
        blocksWorldState0.get(":DG^~\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown key DG^~\"
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("");
      blocksWorldState0.addObject(blocksWorldBlock0);
      BlocksWorldState blocksWorldState1 = (BlocksWorldState)blocksWorldState0.set(":DG^~\"", ":DG^~\"");
      assertEquals(1, blocksWorldState1.numObjects());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      MutableState mutableState0 = blocksWorldState0.set(": {", "{\n}");
      assertSame(mutableState0, blocksWorldState0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      // Undeclared exception!
      try { 
        blocksWorldState0.objectsOfClass("ler");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported object class ler
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      List<ObjectInstance> list0 = blocksWorldState0.objectsOfClass("block");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      MutableOOState mutableOOState0 = blocksWorldState0.renameObject("#-m<3|mvl", "#-m<3|mvl");
      assertSame(mutableOOState0, blocksWorldState0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      // Undeclared exception!
      try { 
        blocksWorldState0.addObject((ObjectInstance) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can only add BlocksWorldBlock ObjectInstances
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("");
      blocksWorldState0.addObject(blocksWorldBlock0);
      blocksWorldState0.renameObject("", (String) null);
      assertEquals(1, blocksWorldState0.numObjects());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState((Map<String, BlocksWorldBlock>) null);
      // Undeclared exception!
      try { 
        blocksWorldState0.removeObject("!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState((Map<String, BlocksWorldBlock>) null);
      // Undeclared exception!
      try { 
        blocksWorldState0.variableKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      String string0 = blocksWorldState0.toString();
      assertEquals("{\n}", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState((Map<String, BlocksWorldBlock>) null);
      // Undeclared exception!
      try { 
        blocksWorldState0.numObjects();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState((Map<String, BlocksWorldBlock>) null);
      // Undeclared exception!
      try { 
        blocksWorldState0.object((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BlocksWorldState", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlocksWorldState blocksWorldState0 = new BlocksWorldState();
      State state0 = blocksWorldState0.copy();
      assertFalse(state0.equals((Object)blocksWorldState0));
  }
}
