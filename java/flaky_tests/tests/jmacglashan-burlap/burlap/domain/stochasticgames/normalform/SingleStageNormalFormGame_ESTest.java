/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 00:43:05 GMT 2022
 */

package burlap.domain.stochasticgames.normalform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.stochasticgames.agents.RandomSGAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame;
import burlap.mdp.core.Domain;
import burlap.mdp.core.action.ActionType;
import burlap.mdp.stochasticgames.JointAction;
import burlap.mdp.stochasticgames.SGDomain;
import burlap.mdp.stochasticgames.agent.SGAgent;
import burlap.mdp.stochasticgames.agent.SGAgentBase;
import burlap.mdp.stochasticgames.agent.SGAgentType;
import burlap.mdp.stochasticgames.model.JointModel;
import burlap.mdp.stochasticgames.model.JointRewardFunction;
import burlap.mdp.stochasticgames.world.World;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SingleStageNormalFormGame_ESTest extends SingleStageNormalFormGame_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction("01U'Gm]=7EbEtf^", 7369430);
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction1 = new SingleStageNormalFormGame.MatrixAction("heads", (-1));
      boolean boolean0 = singleStageNormalFormGame_MatrixAction0.equals(singleStageNormalFormGame_MatrixAction1);
      assertEquals((-1), singleStageNormalFormGame_MatrixAction1.actionId);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[3];
      double[][] doubleArray2 = new double[4][8];
      doubleArray2[0] = doubleArray1;
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame(doubleArray0, doubleArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Payoff matrices for the row and column player are not the same dimensionality.
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[][] doubleArray1 = new double[5][5];
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Payoff matrices for the row and column player are not the same dimensionality.
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getChicken();
      int[] intArray0 = new int[2];
      singleStageNormalFormGame0.setPayout(0, (-1.0), intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      SingleStageNormalFormGame singleStageNormalFormGame0 = new SingleStageNormalFormGame(doubleArray0, doubleArray0);
      assertEquals(2, singleStageNormalFormGame0.getNumPlayers());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction("heads", 478);
      String string0 = singleStageNormalFormGame_MatrixAction0.actionName();
      assertNotNull(string0);
      assertEquals(478, singleStageNormalFormGame_MatrixAction0.actionId);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getPrisonersDilemma();
      singleStageNormalFormGame0.setPayout(0, (double) 0, stringArray0);
      double double0 = singleStageNormalFormGame0.getPayout(0, stringArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getBattleOfTheSexes1();
      int[] intArray0 = new int[2];
      double double0 = singleStageNormalFormGame0.getPayout(0, intArray0);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getHawkDove();
      int[] intArray0 = new int[2];
      double double0 = singleStageNormalFormGame0.getPayout(0, intArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<List<String>> arrayList0 = new ArrayList<List<String>>();
      SingleStageNormalFormGame singleStageNormalFormGame0 = new SingleStageNormalFormGame(arrayList0);
      int int0 = singleStageNormalFormGame0.getNumPlayers();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getChicken();
      singleStageNormalFormGame0.nPlayers = (-390);
      int int0 = singleStageNormalFormGame0.getNumPlayers();
      assertEquals((-390), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getMatchingPennies();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.setPayout((-1807), (double) (-1807), (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getBattleOfTheSexes1();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.setPayout((-2488), (double) (-2488), stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2488 out of bounds for length 2
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getHawkDove();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.setPayout((-147), (double) (-147), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -147 out of bounds for length 2
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SingleStageNormalFormGame.ActionNameMap[] singleStageNormalFormGame_ActionNameMapArray0 = new SingleStageNormalFormGame.ActionNameMap[1];
      SingleStageNormalFormGame.ActionNameMap singleStageNormalFormGame_ActionNameMap0 = new SingleStageNormalFormGame.ActionNameMap();
      singleStageNormalFormGame_ActionNameMapArray0[0] = singleStageNormalFormGame_ActionNameMap0;
      // Undeclared exception!
      try { 
        SingleStageNormalFormGame.getStrategyProfile(singleStageNormalFormGame_ActionNameMapArray0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No action named null for this player
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame$ActionNameMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SingleStageNormalFormGame.ActionNameMap[] singleStageNormalFormGame_ActionNameMapArray0 = new SingleStageNormalFormGame.ActionNameMap[0];
      // Undeclared exception!
      try { 
        SingleStageNormalFormGame.getStrategyProfile(singleStageNormalFormGame_ActionNameMapArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getBattleOfTheSexes2();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.getPayout(18, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getStagHunt();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.getPayout(2193, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2193 out of bounds for length 2
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getChicken();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.getPayout(891, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getHawkDove();
      SGAgent[] sGAgentArray0 = new SGAgent[2];
      RandomSGAgent randomSGAgent0 = new RandomSGAgent();
      sGAgentArray0[0] = (SGAgent) randomSGAgent0;
      Vector<ActionType> vector0 = new Vector<ActionType>(3);
      SGAgentType sGAgentType0 = new SGAgentType("action", vector0);
      SGAgentBase sGAgentBase0 = randomSGAgent0.setAgentDetails("If the reward function depends on a 1 step transition (e.g., from a source state to a target state) then to project the value the Domain is needed evaluate the transition dynamics. Use the RewardValueProjection(RewardFunction, RewardProjectionType, Domain) constructor instead to specify.", sGAgentType0);
      sGAgentArray0[1] = (SGAgent) sGAgentBase0;
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.createRepeatedGameWorld(sGAgentArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Agent with provided name has already joined.
         //
         verifyException("burlap.mdp.stochasticgames.world.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getHawkDove();
      SGDomain sGDomain0 = new SGDomain();
      SGAgent[] sGAgentArray0 = new SGAgent[3];
      RandomSGAgent randomSGAgent0 = new RandomSGAgent();
      SGAgentBase sGAgentBase0 = randomSGAgent0.setAgentDetails("action", (SGAgentType) null);
      sGAgentArray0[0] = (SGAgent) sGAgentBase0;
      sGAgentArray0[1] = (SGAgent) randomSGAgent0;
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.createRepeatedGameWorld(sGDomain0, sGAgentArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Agent with provided name has already joined.
         //
         verifyException("burlap.mdp.stochasticgames.world.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getStagHunt();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.actionName((-1629), (-1629));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getChicken();
      Vector<List<String>> vector0 = new Vector<List<String>>();
      singleStageNormalFormGame0.actionSets = (List<List<String>>) vector0;
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.actionName(302, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 302
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getChicken();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.actionIndex(0, "heads");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No action named heads for this player
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame$ActionNameMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getHawkDove();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.actionIndex((-1700), "north");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1700 out of bounds for length 2
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame((String[][]) null, (double[][][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame((String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[][] stringArray0 = new String[2][7];
      String[] stringArray1 = new String[0];
      stringArray0[1] = stringArray1;
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame((List<List<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SingleStageNormalFormGame.ActionNameMap[] singleStageNormalFormGame_ActionNameMapArray0 = new SingleStageNormalFormGame.ActionNameMap[0];
      SingleStageNormalFormGame.ActionNameMap[] singleStageNormalFormGame_ActionNameMapArray1 = SingleStageNormalFormGame.ActionNameMap.deepCopyActionNameMapArray(singleStageNormalFormGame_ActionNameMapArray0);
      assertNotSame(singleStageNormalFormGame_ActionNameMapArray1, singleStageNormalFormGame_ActionNameMapArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SingleStageNormalFormGame.ActionNameMap[] singleStageNormalFormGame_ActionNameMapArray0 = new SingleStageNormalFormGame.ActionNameMap[9];
      // Undeclared exception!
      try { 
        SingleStageNormalFormGame.ActionNameMap.deepCopyActionNameMapArray(singleStageNormalFormGame_ActionNameMapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame$ActionNameMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SingleStageNormalFormGame.ActionNameMap singleStageNormalFormGame_ActionNameMap0 = new SingleStageNormalFormGame.ActionNameMap();
      singleStageNormalFormGame_ActionNameMap0.put("action", (-1894));
      SingleStageNormalFormGame.ActionNameMap singleStageNormalFormGame_ActionNameMap1 = singleStageNormalFormGame_ActionNameMap0.copy();
      assertNotSame(singleStageNormalFormGame_ActionNameMap1, singleStageNormalFormGame_ActionNameMap0);
      assertEquals(1, singleStageNormalFormGame_ActionNameMap1.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SingleStageNormalFormGame.ActionNameMap singleStageNormalFormGame_ActionNameMap0 = new SingleStageNormalFormGame.ActionNameMap();
      singleStageNormalFormGame_ActionNameMap0.put("action", (-1894));
      Integer integer0 = singleStageNormalFormGame_ActionNameMap0.get("action");
      assertEquals((-1894), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SingleStageNormalFormGame.ActionNameMap singleStageNormalFormGame_ActionNameMap0 = new SingleStageNormalFormGame.ActionNameMap();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame_ActionNameMap0.get("action");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No action named action for this player
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame$ActionNameMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleStageNormalFormGame.ActionNameMap[] singleStageNormalFormGame_ActionNameMapArray0 = new SingleStageNormalFormGame.ActionNameMap[2];
      SingleStageNormalFormGame.StrategyProfile singleStageNormalFormGame_StrategyProfile0 = SingleStageNormalFormGame.getStrategyProfile(singleStageNormalFormGame_ActionNameMapArray0, stringArray0);
      String string0 = singleStageNormalFormGame_StrategyProfile0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[8];
      SingleStageNormalFormGame.StrategyProfile singleStageNormalFormGame_StrategyProfile0 = new SingleStageNormalFormGame.StrategyProfile(intArray0);
      String string0 = singleStageNormalFormGame_StrategyProfile0.toString();
      assertEquals("0 0 0 0 0 0 0 0", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SingleStageNormalFormGame.AgentPayoutFunction singleStageNormalFormGame_AgentPayoutFunction0 = new SingleStageNormalFormGame.AgentPayoutFunction();
      SingleStageNormalFormGame.AgentPayoutFunction[] singleStageNormalFormGame_AgentPayoutFunctionArray0 = new SingleStageNormalFormGame.AgentPayoutFunction[6];
      singleStageNormalFormGame_AgentPayoutFunctionArray0[0] = singleStageNormalFormGame_AgentPayoutFunction0;
      singleStageNormalFormGame_AgentPayoutFunctionArray0[1] = singleStageNormalFormGame_AgentPayoutFunction0;
      singleStageNormalFormGame_AgentPayoutFunctionArray0[2] = singleStageNormalFormGame_AgentPayoutFunction0;
      singleStageNormalFormGame_AgentPayoutFunctionArray0[3] = singleStageNormalFormGame_AgentPayoutFunction0;
      singleStageNormalFormGame_AgentPayoutFunctionArray0[4] = singleStageNormalFormGame_AgentPayoutFunction0;
      singleStageNormalFormGame_AgentPayoutFunctionArray0[5] = singleStageNormalFormGame_AgentPayoutFunction0;
      SingleStageNormalFormGame.AgentPayoutFunction[] singleStageNormalFormGame_AgentPayoutFunctionArray1 = SingleStageNormalFormGame.AgentPayoutFunction.getDeepCopyOfPayoutArray(singleStageNormalFormGame_AgentPayoutFunctionArray0);
      assertNotSame(singleStageNormalFormGame_AgentPayoutFunctionArray1, singleStageNormalFormGame_AgentPayoutFunctionArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[2];
      SingleStageNormalFormGame.StrategyProfile singleStageNormalFormGame_StrategyProfile0 = new SingleStageNormalFormGame.StrategyProfile(intArray0);
      SingleStageNormalFormGame.AgentPayoutFunction singleStageNormalFormGame_AgentPayoutFunction0 = new SingleStageNormalFormGame.AgentPayoutFunction();
      singleStageNormalFormGame_AgentPayoutFunction0.set(singleStageNormalFormGame_StrategyProfile0, (-873.01));
      double double0 = singleStageNormalFormGame_AgentPayoutFunction0.getPayout(singleStageNormalFormGame_StrategyProfile0);
      assertEquals((-873.01), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SingleStageNormalFormGame.AgentPayoutFunction singleStageNormalFormGame_AgentPayoutFunction0 = new SingleStageNormalFormGame.AgentPayoutFunction();
      int[] intArray0 = new int[4];
      SingleStageNormalFormGame.StrategyProfile singleStageNormalFormGame_StrategyProfile0 = new SingleStageNormalFormGame.StrategyProfile(intArray0);
      // Undeclared exception!
      try { 
        singleStageNormalFormGame_AgentPayoutFunction0.getPayout(singleStageNormalFormGame_StrategyProfile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Payout Function is not defined for this strategy profile: 0 0 0 0
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame$AgentPayoutFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getPrisonersDilemma();
      SGDomain sGDomain0 = new SGDomain();
      SGAgent[] sGAgentArray0 = new SGAgent[0];
      World world0 = singleStageNormalFormGame0.createRepeatedGameWorld(sGDomain0, sGAgentArray0);
      assertEquals(284673923, world0.getDebugId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getHawkDove();
      Domain domain0 = singleStageNormalFormGame0.generateDomain();
      assertNotNull(domain0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[][] stringArray0 = new String[4][2];
      double[][][] doubleArray0 = new double[9][2][2];
      SingleStageNormalFormGame singleStageNormalFormGame0 = new SingleStageNormalFormGame(stringArray0, doubleArray0);
      assertEquals(4, singleStageNormalFormGame0.getNumPlayers());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[][] stringArray0 = new String[6][7];
      double[][][] doubleArray0 = new double[0][7][4];
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame(stringArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getChicken();
      JointRewardFunction jointRewardFunction0 = singleStageNormalFormGame0.getJointRewardFunction();
      assertNotNull(jointRewardFunction0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SingleStageNormalFormGame.AgentPayoutFunction singleStageNormalFormGame_AgentPayoutFunction0 = new SingleStageNormalFormGame.AgentPayoutFunction();
      int[] intArray0 = new int[2];
      SingleStageNormalFormGame.StrategyProfile singleStageNormalFormGame_StrategyProfile0 = new SingleStageNormalFormGame.StrategyProfile(intArray0);
      singleStageNormalFormGame_AgentPayoutFunction0.set(singleStageNormalFormGame_StrategyProfile0, (-930.7800813524316));
      SingleStageNormalFormGame.AgentPayoutFunction singleStageNormalFormGame_AgentPayoutFunction1 = singleStageNormalFormGame_AgentPayoutFunction0.copy();
      assertNotSame(singleStageNormalFormGame_AgentPayoutFunction1, singleStageNormalFormGame_AgentPayoutFunction0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getBattleOfTheSexes2();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.setPayout(88934789, 1320.32233998, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[4];
      SingleStageNormalFormGame.StrategyProfile singleStageNormalFormGame_StrategyProfile0 = new SingleStageNormalFormGame.StrategyProfile(intArray0);
      SingleStageNormalFormGame.StrategyProfile singleStageNormalFormGame_StrategyProfile1 = singleStageNormalFormGame_StrategyProfile0.copy();
      assertNotSame(singleStageNormalFormGame_StrategyProfile1, singleStageNormalFormGame_StrategyProfile0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SingleStageNormalFormGame.ActionNameMap singleStageNormalFormGame_ActionNameMap0 = new SingleStageNormalFormGame.ActionNameMap();
      singleStageNormalFormGame_ActionNameMap0.put("action", 1);
      boolean boolean0 = singleStageNormalFormGame_ActionNameMap0.containsKey("action");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SingleStageNormalFormGame.ActionNameMap singleStageNormalFormGame_ActionNameMap0 = new SingleStageNormalFormGame.ActionNameMap();
      boolean boolean0 = singleStageNormalFormGame_ActionNameMap0.containsKey("action");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getStagHunt();
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.getPayout(0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Payout Function is not defined for this strategy profile: 0 0 0 0 0
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame$AgentPayoutFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getChicken();
      int[] intArray0 = new int[2];
      double double0 = singleStageNormalFormGame0.getPayout(0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[1];
      SingleStageNormalFormGame.StrategyProfile singleStageNormalFormGame_StrategyProfile0 = new SingleStageNormalFormGame.StrategyProfile(intArray0);
      Object object0 = new Object();
      boolean boolean0 = singleStageNormalFormGame_StrategyProfile0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction((String) null, 4590);
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction1 = new SingleStageNormalFormGame.MatrixAction((String) null, 4590);
      singleStageNormalFormGame_MatrixAction1.name = "action";
      boolean boolean0 = singleStageNormalFormGame_MatrixAction0.equals(singleStageNormalFormGame_MatrixAction1);
      //  // Unstable assertion: assertTrue(singleStageNormalFormGame_MatrixAction1.equals((Object)singleStageNormalFormGame_MatrixAction0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(4590, singleStageNormalFormGame_MatrixAction1.actionId);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction("action", 3180);
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction1 = new SingleStageNormalFormGame.MatrixAction("action", (-2628));
      boolean boolean0 = singleStageNormalFormGame_MatrixAction1.equals(singleStageNormalFormGame_MatrixAction0);
      assertFalse(boolean0);
      assertFalse(singleStageNormalFormGame_MatrixAction0.equals((Object)singleStageNormalFormGame_MatrixAction1));
      assertEquals((-2628), singleStageNormalFormGame_MatrixAction1.actionId);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction("9'.hJTs", 5489);
      boolean boolean0 = singleStageNormalFormGame_MatrixAction0.equals("9'.hJTs");
      assertEquals(5489, singleStageNormalFormGame_MatrixAction0.actionId);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction("action", (-2488));
      boolean boolean0 = singleStageNormalFormGame_MatrixAction0.equals((Object) null);
      assertEquals((-2488), singleStageNormalFormGame_MatrixAction0.actionId);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction((String) null, 4590);
      boolean boolean0 = singleStageNormalFormGame_MatrixAction0.equals(singleStageNormalFormGame_MatrixAction0);
      assertEquals(4590, singleStageNormalFormGame_MatrixAction0.actionId);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction((String) null, 4590);
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction1 = new SingleStageNormalFormGame.MatrixAction((String) null, 4590);
      boolean boolean0 = singleStageNormalFormGame_MatrixAction0.equals(singleStageNormalFormGame_MatrixAction1);
      assertTrue(boolean0);
      assertEquals(4590, singleStageNormalFormGame_MatrixAction1.actionId);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SingleStageNormalFormGame.AgentPayoutFunction[] singleStageNormalFormGame_AgentPayoutFunctionArray0 = new SingleStageNormalFormGame.AgentPayoutFunction[0];
      SingleStageNormalFormGame.SingleStageNormalFormJointRewardFunction singleStageNormalFormGame_SingleStageNormalFormJointRewardFunction0 = new SingleStageNormalFormGame.SingleStageNormalFormJointRewardFunction(26, (SingleStageNormalFormGame.ActionNameMap[]) null, singleStageNormalFormGame_AgentPayoutFunctionArray0);
      JointAction jointAction0 = new JointAction();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame_SingleStageNormalFormJointRewardFunction0.reward(blockDudeAgent0, jointAction0, blockDudeAgent0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SingleStageNormalFormGame.ActionNameMap[] singleStageNormalFormGame_ActionNameMapArray0 = new SingleStageNormalFormGame.ActionNameMap[4];
      SingleStageNormalFormGame.AgentPayoutFunction[] singleStageNormalFormGame_AgentPayoutFunctionArray0 = new SingleStageNormalFormGame.AgentPayoutFunction[19];
      SingleStageNormalFormGame.SingleStageNormalFormJointRewardFunction singleStageNormalFormGame_SingleStageNormalFormJointRewardFunction0 = new SingleStageNormalFormGame.SingleStageNormalFormJointRewardFunction(0, singleStageNormalFormGame_ActionNameMapArray0, singleStageNormalFormGame_AgentPayoutFunctionArray0);
      JointAction jointAction0 = new JointAction();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      double[] doubleArray0 = singleStageNormalFormGame_SingleStageNormalFormJointRewardFunction0.reward(blockDudeAgent0, jointAction0, blockDudeAgent0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SingleStageNormalFormGame.ActionNameMap[] singleStageNormalFormGame_ActionNameMapArray0 = new SingleStageNormalFormGame.ActionNameMap[1];
      // Undeclared exception!
      try { 
        SingleStageNormalFormGame.getStrategyProfile(singleStageNormalFormGame_ActionNameMapArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getChicken();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.getPayout((-3118), stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No action named null for this player
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame$ActionNameMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getBattleOfTheSexes1();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.setPayout((-2524), (double) (-2524), stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No action named null for this player
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame$ActionNameMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ArrayList<List<String>> arrayList0 = new ArrayList<List<String>>();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("f#1aGdQ");
      arrayList0.add((List<String>) vector0);
      SingleStageNormalFormGame singleStageNormalFormGame0 = new SingleStageNormalFormGame(arrayList0);
      assertEquals(1, singleStageNormalFormGame0.getNumPlayers());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[][] doubleArray1 = new double[4][8];
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Payoff matrices for the row and column player are not the same dimensionality.
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[][] doubleArray1 = new double[3][5];
      SingleStageNormalFormGame singleStageNormalFormGame0 = null;
      try {
        singleStageNormalFormGame0 = new SingleStageNormalFormGame(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Payoff matrices for the row and column player are not the same dimensionality.
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JointModel jointModel0 = SingleStageNormalFormGame.getRepatedGameActionModel();
      assertNotNull(jointModel0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getBattleOfTheSexes1();
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.generateAgentType((-283));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -283 out of bounds for length 2
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getBattleOfTheSexes2();
      SGAgentType sGAgentType0 = singleStageNormalFormGame0.generateAgentType(1);
      assertNotNull(sGAgentType0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getStagHunt();
      String string0 = singleStageNormalFormGame0.actionName(1, 1);
      assertEquals("hare", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getHawkDove();
      SGAgent[] sGAgentArray0 = new SGAgent[0];
      World world0 = singleStageNormalFormGame0.createRepeatedGameWorld(sGAgentArray0);
      assertFalse(world0.gameIsRunning());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getStagHunt();
      singleStageNormalFormGame0.setPayout(1, (double) 1, stringArray0);
      double double0 = singleStageNormalFormGame0.getPayout(1, stringArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        SingleStageNormalFormGame.main((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // joptsimple/OptionParser
         //
         verifyException("burlap.shell.command.reserved.AliasCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String[][] stringArray0 = new String[33][7];
      SingleStageNormalFormGame singleStageNormalFormGame0 = new SingleStageNormalFormGame(stringArray0);
      int int0 = singleStageNormalFormGame0.actionIndex(23, (String) null);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getChicken();
      int int0 = singleStageNormalFormGame0.getNumPlayers();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getMatchingPennies();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.getPayout(21, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 21 out of bounds for length 2
         //
         verifyException("burlap.domain.stochasticgames.normalform.SingleStageNormalFormGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SingleStageNormalFormGame singleStageNormalFormGame0 = SingleStageNormalFormGame.getPrisonersDilemma();
      SGDomain sGDomain0 = new SGDomain();
      SGAgent[] sGAgentArray0 = new SGAgent[1];
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.createRepeatedGameWorld(sGDomain0, sGAgentArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.stochasticgames.world.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction("b_{sUY", 101);
      String string0 = singleStageNormalFormGame_MatrixAction0.toString();
      assertEquals(101, singleStageNormalFormGame_MatrixAction0.actionId);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction0 = new SingleStageNormalFormGame.MatrixAction("action", (-265));
      SingleStageNormalFormGame.MatrixAction singleStageNormalFormGame_MatrixAction1 = (SingleStageNormalFormGame.MatrixAction)singleStageNormalFormGame_MatrixAction0.copy();
      boolean boolean0 = singleStageNormalFormGame_MatrixAction0.equals(singleStageNormalFormGame_MatrixAction1);
      assertTrue(boolean0);
      assertEquals((-265), singleStageNormalFormGame_MatrixAction1.actionId);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SingleStageNormalFormGame.ActionNameMap singleStageNormalFormGame_ActionNameMap0 = new SingleStageNormalFormGame.ActionNameMap();
      int int0 = singleStageNormalFormGame_ActionNameMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      SingleStageNormalFormGame singleStageNormalFormGame0 = new SingleStageNormalFormGame(doubleArray0);
      SGAgent[] sGAgentArray0 = new SGAgent[2];
      // Undeclared exception!
      try { 
        singleStageNormalFormGame0.createRepeatedGameWorld(sGAgentArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.stochasticgames.world.World", e);
      }
  }
}
