/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:25:55 GMT 2022
 */

package burlap.domain.stochasticgames.gridgame.state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.domain.stochasticgames.gridgame.state.GGWall;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GGWall_ESTest extends GGWall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GGWall.GGVerticalWall gGWall_GGVerticalWall0 = new GGWall.GGVerticalWall(0, 132, (-1548), 2376, "*1#`Ee-^fAsC>LeO3?7");
      GGWall.GGVerticalWall gGWall_GGVerticalWall1 = gGWall_GGVerticalWall0.copy();
      assertEquals(132, gGWall_GGVerticalWall0.e2);
      assertEquals(132, gGWall_GGVerticalWall1.e2);
      assertEquals(2376, gGWall_GGVerticalWall1.type);
      assertEquals(2376, gGWall_GGVerticalWall0.type);
      assertEquals((-1548), gGWall_GGVerticalWall0.pos);
      assertEquals((-1548), gGWall_GGVerticalWall1.pos);
      assertEquals(0, gGWall_GGVerticalWall1.e1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GGWall.GGVerticalWall gGWall_GGVerticalWall0 = new GGWall.GGVerticalWall(0, 132, (-1548), 2376, "*1#`Ee-^fAsC>LeO3?7");
      GGWall.GGVerticalWall gGWall_GGVerticalWall1 = gGWall_GGVerticalWall0.copyWithName("*1#`Ee-^fAsC>LeO3?7");
      assertEquals(2376, gGWall_GGVerticalWall0.type);
      assertEquals((-1548), gGWall_GGVerticalWall1.pos);
      assertEquals(132, gGWall_GGVerticalWall0.e2);
      assertEquals(0, gGWall_GGVerticalWall1.e1);
      assertEquals(2376, gGWall_GGVerticalWall1.type);
      assertEquals(132, gGWall_GGVerticalWall1.e2);
      assertEquals((-1548), gGWall_GGVerticalWall0.pos);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall(4, 4, 0, 0, "(AONVPk1");
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall1 = gGWall_GGHorizontalWall0.copy();
      assertEquals(4, gGWall_GGHorizontalWall0.e1);
      assertEquals(4, gGWall_GGHorizontalWall0.e2);
      assertEquals(0, gGWall_GGHorizontalWall1.type);
      assertEquals(4, gGWall_GGHorizontalWall1.e2);
      assertEquals(4, gGWall_GGHorizontalWall1.e1);
      assertEquals(0, gGWall_GGHorizontalWall1.pos);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall(2013, 0, (-17), 53, "V4A/73`Hu");
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall1 = gGWall_GGHorizontalWall0.copyWithName("c]7[ri,fk/)5");
      assertEquals((-17), gGWall_GGHorizontalWall1.pos);
      assertEquals(2013, gGWall_GGHorizontalWall0.e1);
      assertEquals((-17), gGWall_GGHorizontalWall0.pos);
      assertEquals(0, gGWall_GGHorizontalWall1.e2);
      assertEquals(53, gGWall_GGHorizontalWall1.type);
      assertEquals(53, gGWall_GGHorizontalWall0.type);
      assertEquals(2013, gGWall_GGHorizontalWall1.e1);
      assertEquals("c]7[ri,fk/)5", gGWall_GGHorizontalWall1.name());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall(0, (-2847), (-2847), 0, "Q=h");
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall1 = gGWall_GGHorizontalWall0.copy();
      assertEquals(0, gGWall_GGHorizontalWall1.type);
      assertEquals((-2847), gGWall_GGHorizontalWall1.pos);
      assertEquals((-2847), gGWall_GGHorizontalWall0.e2);
      assertEquals((-2847), gGWall_GGHorizontalWall1.e2);
      assertEquals(0, gGWall_GGHorizontalWall1.e1);
      assertEquals((-2847), gGWall_GGHorizontalWall0.pos);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall();
      String string0 = gGWall_GGHorizontalWall0.name();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GGWall.GGVerticalWall gGWall_GGVerticalWall0 = new GGWall.GGVerticalWall(313, 313, 313, 313, "4WWp");
      String string0 = gGWall_GGVerticalWall0.name();
      assertEquals(313, gGWall_GGVerticalWall0.pos);
      assertEquals(313, gGWall_GGVerticalWall0.type);
      assertEquals(313, gGWall_GGVerticalWall0.e2);
      assertEquals(313, gGWall_GGVerticalWall0.e1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GGWall.GGVerticalWall gGWall_GGVerticalWall0 = new GGWall.GGVerticalWall(1836, 0, 1836, (-1751), "burlap.mdp.core.state.UnknownKeyException");
      gGWall_GGVerticalWall0.name = "";
      gGWall_GGVerticalWall0.getName();
      assertEquals((-1751), gGWall_GGVerticalWall0.type);
      assertEquals(1836, gGWall_GGVerticalWall0.e1);
      assertEquals(1836, gGWall_GGVerticalWall0.pos);
      assertEquals(0, gGWall_GGVerticalWall0.e2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall();
      // Undeclared exception!
      try { 
        gGWall_GGHorizontalWall0.set(gGWall_GGHorizontalWall0, gGWall_GGHorizontalWall0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value is neither a Number nor a String.
         //
         verifyException("burlap.mdp.core.state.StateUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        gGWall_GGHorizontalWall0.set(object0, "");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall();
      // Undeclared exception!
      try { 
        gGWall_GGHorizontalWall0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.stochasticgames.gridgame.state.GGWall", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall();
      // Undeclared exception!
      try { 
        gGWall_GGHorizontalWall0.get(gGWall_GGHorizontalWall0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown state variable key burlap.domain.stochasticgames.gridgame.state.GGWall$GGHorizontalWall@1
         //
         verifyException("burlap.domain.stochasticgames.gridgame.state.GGWall", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GGWall.GGVerticalWall gGWall_GGVerticalWall0 = new GGWall.GGVerticalWall(313, 313, 313, 313, "4WWp");
      String string0 = gGWall_GGVerticalWall0.className();
      assertEquals(313, gGWall_GGVerticalWall0.e2);
      assertEquals(313, gGWall_GGVerticalWall0.type);
      assertEquals(313, gGWall_GGVerticalWall0.e1);
      assertEquals(313, gGWall_GGVerticalWall0.pos);
      assertEquals("dimensionlessVerticalWall", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GGWall.GGVerticalWall gGWall_GGVerticalWall0 = new GGWall.GGVerticalWall();
      GGWall.GGVerticalWall gGWall_GGVerticalWall1 = gGWall_GGVerticalWall0.copyWithName("5U+oCiQGR'mL");
      assertEquals(0, gGWall_GGVerticalWall1.e2);
      assertEquals(0, gGWall_GGVerticalWall1.e1);
      assertEquals(0, gGWall_GGVerticalWall1.pos);
      assertEquals(0, gGWall_GGVerticalWall1.type);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall();
      String string0 = gGWall_GGHorizontalWall0.className();
      assertEquals("dimensionlessHorizontalWall", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GGWall.GGVerticalWall gGWall_GGVerticalWall0 = new GGWall.GGVerticalWall();
      gGWall_GGVerticalWall0.setName("5U+oCiQGR'mL");
      String string0 = gGWall_GGVerticalWall0.getName();
      assertEquals("5U+oCiQGR'mL", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GGWall.GGVerticalWall gGWall_GGVerticalWall0 = new GGWall.GGVerticalWall();
      String string0 = gGWall_GGVerticalWall0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GGWall.GGVerticalWall gGWall_GGVerticalWall0 = new GGWall.GGVerticalWall(1600, 1433, 0, 171, "");
      String string0 = gGWall_GGVerticalWall0.name();
      assertNotNull(string0);
      assertEquals(1433, gGWall_GGVerticalWall0.e2);
      assertEquals(0, gGWall_GGVerticalWall0.pos);
      assertEquals(171, gGWall_GGVerticalWall0.type);
      assertEquals(1600, gGWall_GGVerticalWall0.e1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GGWall.GGHorizontalWall gGWall_GGHorizontalWall0 = new GGWall.GGHorizontalWall();
      List<Object> list0 = gGWall_GGHorizontalWall0.variableKeys();
      assertFalse(list0.isEmpty());
  }
}
