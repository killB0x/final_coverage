/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:04:38 GMT 2022
 */

package burlap.statehashing.masked;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.mdp.core.state.NullState;
import burlap.mdp.core.state.State;
import burlap.statehashing.HashableState;
import burlap.statehashing.masked.MaskedConfig;
import burlap.statehashing.masked.MaskedHashableStateFactory;
import burlap.statehashing.maskeddiscretized.DiscMaskedConfig;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MaskedHashableStateFactory_ESTest extends MaskedHashableStateFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory(false);
      maskedHashableStateFactory0.setConfig((MaskedConfig) null);
      MaskedConfig maskedConfig0 = maskedHashableStateFactory0.getConfig();
      assertNull(maskedConfig0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      // Undeclared exception!
      try { 
        maskedHashableStateFactory0.removeObjectClassMasks((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.statehashing.masked.MaskedHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      // Undeclared exception!
      try { 
        maskedHashableStateFactory0.removeAttributeMasks((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.statehashing.masked.MaskedHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullState nullState0 = NullState.instance;
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      HashableState hashableState0 = maskedHashableStateFactory0.hashState(nullState0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) hashableState0;
      // Undeclared exception!
      try { 
        maskedHashableStateFactory0.removeAttributeMasks(objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IISimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      maskedHashableStateFactory0.setConfig((MaskedConfig) null);
      // Undeclared exception!
      try { 
        maskedHashableStateFactory0.clearAllObjectClassMasks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.statehashing.masked.MaskedHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      maskedHashableStateFactory0.config = null;
      // Undeclared exception!
      try { 
        maskedHashableStateFactory0.clearAllAttributeMasks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.statehashing.masked.MaskedHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Set<Object> set0 = hashMap0.keySet();
      MaskedConfig maskedConfig0 = maskedHashableStateFactory0.getConfig();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Object, Double> hashMap2 = new HashMap<Object, Double>(hashMap1);
      DiscMaskedConfig discMaskedConfig0 = new DiscMaskedConfig(set0, maskedConfig0.maskedObjectClasses, hashMap2, 0.0);
      maskedHashableStateFactory0.config = (MaskedConfig) discMaskedConfig0;
      // Undeclared exception!
      try { 
        maskedHashableStateFactory0.addVariableMasks(stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      // Undeclared exception!
      try { 
        maskedHashableStateFactory0.addVariableMasks((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.statehashing.masked.MaskedHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      NullState nullState0 = NullState.instance;
      HashableState hashableState0 = maskedHashableStateFactory0.hashState(nullState0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) hashableState0;
      // Undeclared exception!
      try { 
        maskedHashableStateFactory0.addVariableMasks(objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IISimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      // Undeclared exception!
      try { 
        maskedHashableStateFactory0.addObjectClassMasks((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.statehashing.masked.MaskedHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = null;
      try {
        maskedHashableStateFactory0 = new MaskedHashableStateFactory(true, true, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.statehashing.masked.MaskedHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory(true, false, stringArray0);
      NullState nullState0 = NullState.instance;
      HashableState hashableState0 = maskedHashableStateFactory0.hashState(nullState0);
      assertNotNull(hashableState0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory(true, false, stringArray0);
      maskedHashableStateFactory0.removeObjectClassMasks(stringArray0);
      assertTrue(maskedHashableStateFactory0.objectIdentifierIndependent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory(true, false, stringArray0);
      maskedHashableStateFactory0.removeAttributeMasks(stringArray0);
      assertTrue(maskedHashableStateFactory0.objectIdentifierIndependent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory(true, false, stringArray0);
      maskedHashableStateFactory0.addObjectClassMasks(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      Object[] objectArray0 = new Object[5];
      maskedHashableStateFactory0.addVariableMasks(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[9];
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory(true, true, stringArray0);
      maskedHashableStateFactory0.clearAllAttributeMasks();
      assertTrue(maskedHashableStateFactory0.objectIdentifierIndependent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory(false);
      HashableState hashableState0 = maskedHashableStateFactory0.hashState((State) null);
      assertNotNull(hashableState0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MaskedHashableStateFactory maskedHashableStateFactory0 = new MaskedHashableStateFactory();
      maskedHashableStateFactory0.clearAllObjectClassMasks();
      assertTrue(maskedHashableStateFactory0.objectIdentifierIndependent());
  }
}
