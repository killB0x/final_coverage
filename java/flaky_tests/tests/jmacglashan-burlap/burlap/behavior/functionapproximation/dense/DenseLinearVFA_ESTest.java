/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 00:35:21 GMT 2022
 */

package burlap.behavior.functionapproximation.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.functionapproximation.FunctionGradient;
import burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures;
import burlap.behavior.functionapproximation.dense.DenseLinearVFA;
import burlap.behavior.functionapproximation.dense.DenseStateFeatures;
import burlap.behavior.functionapproximation.dense.NormalizedVariableFeatures;
import burlap.behavior.functionapproximation.dense.NumericVariableFeatures;
import burlap.behavior.functionapproximation.dense.SparseToDenseFeatures;
import burlap.behavior.functionapproximation.sparse.tilecoding.TileCodingFeatures;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.domain.singleagent.blocksworld.BlocksWorldBlock;
import burlap.domain.singleagent.mountaincar.MCState;
import burlap.domain.singleagent.mountaincar.MountainCar;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.core.oo.state.generic.GenericOOState;
import burlap.mdp.core.state.State;
import burlap.mdp.core.state.vardomain.VariableDomain;
import burlap.mdp.stochasticgames.JointAction;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DenseLinearVFA_ESTest extends DenseLinearVFA_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      DenseLinearVFA denseLinearVFA1 = denseLinearVFA0.copy();
      assertFalse(denseLinearVFA1.equals((Object)denseLinearVFA0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0.0, denseLinearVFA1.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA1.numParameters());
      assertNotNull(denseLinearVFA1);
      assertNotSame(denseLinearVFA0, denseLinearVFA1);
      assertNotSame(denseLinearVFA1, denseLinearVFA0);
      
      Map<Action, Integer> map0 = denseLinearVFA0.getActionOffset();
      assertFalse(denseLinearVFA0.equals((Object)denseLinearVFA1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertNotSame(denseLinearVFA0, denseLinearVFA1);
      
      denseLinearVFA1.setActionOffset(map0);
      assertFalse(denseLinearVFA0.equals((Object)denseLinearVFA1));
      assertFalse(denseLinearVFA1.equals((Object)denseLinearVFA0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0.0, denseLinearVFA1.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA1.numParameters());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(denseLinearVFA0, denseLinearVFA1);
      assertNotSame(denseLinearVFA1, denseLinearVFA0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 5);
      assertEquals(5.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      denseLinearVFA0.initializeStateActionWeightVector(5, 5);
      assertEquals(5, denseLinearVFA0.numParameters());
      assertEquals(5.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      
      denseLinearVFA0.expandStateActionWeights(5);
      assertEquals(10, denseLinearVFA0.numParameters());
      assertEquals(5.0, denseLinearVFA0.getDefaultWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(objectArray0);
      assertNotNull(numericVariableFeatures0);
      assertEquals(0, objectArray0.length);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 52);
      assertEquals(52.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      assertEquals(0, objectArray0.length);
      
      denseLinearVFA0.initializeStateActionWeightVector(15, 15);
      assertEquals(52.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(15, denseLinearVFA0.numParameters());
      assertEquals(0, objectArray0.length);
      
      denseLinearVFA0.resetParameters();
      assertEquals(52.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(15, denseLinearVFA0.numParameters());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 8);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(8.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      denseLinearVFA0.initializeStateWeightVector(8, 8);
      assertEquals(8, denseLinearVFA0.numParameters());
      assertEquals(8.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      
      denseLinearVFA0.resetParameters();
      assertEquals(8, denseLinearVFA0.numParameters());
      assertEquals(8.0, denseLinearVFA0.getDefaultWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      SimpleAction simpleAction0 = new SimpleAction();
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.getName());
      assertNotNull(simpleAction0);
      
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      assertFalse(blockDudeAgent0.holding);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, blockDudeAgent0.y);
      assertEquals(0, blockDudeAgent0.x);
      assertEquals("agent", blockDudeAgent0.name());
      assertEquals("agent", blockDudeAgent0.className());
      assertNotNull(blockDudeAgent0);
      
      double double0 = denseLinearVFA0.evaluate((State) blockDudeAgent0, (Action) simpleAction0);
      assertFalse(blockDudeAgent0.holding);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, blockDudeAgent0.y);
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.getName());
      assertEquals("agent", blockDudeAgent0.name());
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.setParameter(22, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be set.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      VariableDomain variableDomain0 = new VariableDomain();
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertNotNull(variableDomain0);
      
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(object0, variableDomain0);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertNotNull(normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures1, 0.0);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      GenericOOState genericOOState0 = new GenericOOState();
      assertEquals(0, genericOOState0.numObjects());
      assertNotNull(genericOOState0);
      
      double double0 = denseLinearVFA0.evaluate((State) genericOOState0);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(1, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, genericOOState0.numObjects());
      assertEquals(0.0, double0, 0.01);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA1 = denseLinearVFA0.copy();
      assertFalse(denseLinearVFA1.equals((Object)denseLinearVFA0));
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(1, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(1, denseLinearVFA1.numParameters());
      assertEquals(0.0, denseLinearVFA1.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA1);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
      assertNotSame(denseLinearVFA0, denseLinearVFA1);
      assertNotSame(denseLinearVFA1, denseLinearVFA0);
      
      denseLinearVFA1.setParameter(0, 1897.69);
      assertFalse(denseLinearVFA0.equals((Object)denseLinearVFA1));
      assertFalse(denseLinearVFA1.equals((Object)denseLinearVFA0));
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(1, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(1, denseLinearVFA1.numParameters());
      assertEquals(0.0, denseLinearVFA1.getDefaultWeight(), 0.01);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
      assertNotSame(denseLinearVFA0, denseLinearVFA1);
      assertNotSame(denseLinearVFA1, denseLinearVFA0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock(" because it does not implement MutableState");
      assertTrue(blocksWorldBlock0.clear);
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.getName());
      assertEquals("block", blocksWorldBlock0.className());
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.name());
      assertTrue(blocksWorldBlock0.onTable());
      assertNotNull(blocksWorldBlock0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 7388.2586);
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      double double0 = denseLinearVFA0.evaluate((State) blocksWorldBlock0);
      assertTrue(blocksWorldBlock0.clear);
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.getName());
      assertEquals("block", blocksWorldBlock0.className());
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.name());
      assertTrue(blocksWorldBlock0.onTable());
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.setParameter(3491, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be set.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 2084.7121);
      assertEquals(2084.7121, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      double[] doubleArray0 = new double[6];
      denseLinearVFA0.stateActionWeights = doubleArray0;
      assertEquals(2084.7121, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(6, denseLinearVFA0.numParameters());
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.getParameter(17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be returned.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock(" because it does not implement MutableState");
      assertTrue(blocksWorldBlock0.clear);
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.getName());
      assertTrue(blocksWorldBlock0.onTable());
      assertEquals("block", blocksWorldBlock0.className());
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.name());
      assertNotNull(blocksWorldBlock0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 7388.2586);
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      double double0 = denseLinearVFA0.evaluate((State) blocksWorldBlock0);
      assertTrue(blocksWorldBlock0.clear);
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.getName());
      assertTrue(blocksWorldBlock0.onTable());
      assertEquals("block", blocksWorldBlock0.className());
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.name());
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.getParameter((-2597));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2597 out of bounds for length 0
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock(" because it does not implement MutableState");
      assertTrue(blocksWorldBlock0.clear);
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.getName());
      assertTrue(blocksWorldBlock0.onTable());
      assertEquals("block", blocksWorldBlock0.className());
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.name());
      assertNotNull(blocksWorldBlock0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 7388.2586);
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      double double0 = denseLinearVFA0.evaluate((State) blocksWorldBlock0);
      assertTrue(blocksWorldBlock0.clear);
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.getName());
      assertTrue(blocksWorldBlock0.onTable());
      assertEquals("block", blocksWorldBlock0.className());
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.name());
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.getParameter(3515);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be returned.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      VariableDomain variableDomain0 = new VariableDomain();
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertNotNull(variableDomain0);
      
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(object0, variableDomain0);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertNotNull(normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures1, 0.0);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      SimpleAction simpleAction0 = new SimpleAction();
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.getName());
      assertNotNull(simpleAction0);
      
      UniversalActionType universalActionType0 = new UniversalActionType("a", simpleAction0);
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.getName());
      assertEquals("a", universalActionType0.typeName());
      assertNotNull(universalActionType0);
      
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, blockDudeAgent0.y);
      assertFalse(blockDudeAgent0.holding);
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals("agent", blockDudeAgent0.name());
      assertNotNull(blockDudeAgent0);
      
      GenericOOState genericOOState0 = new GenericOOState();
      assertEquals(0, genericOOState0.numObjects());
      assertNotNull(genericOOState0);
      
      double double0 = denseLinearVFA0.evaluate((State) genericOOState0);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(1, denseLinearVFA0.numParameters());
      assertEquals(0, genericOOState0.numObjects());
      assertEquals(0.0, double0, 0.01);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
      
      FunctionGradient functionGradient0 = denseLinearVFA0.gradient((State) blockDudeAgent0, universalActionType0.action);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, blockDudeAgent0.y);
      assertFalse(blockDudeAgent0.holding);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(1, denseLinearVFA0.numParameters());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.getName());
      assertEquals("a", universalActionType0.typeName());
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals("agent", blockDudeAgent0.name());
      assertEquals(0, functionGradient0.numNonZeroPDs());
      assertNotNull(functionGradient0);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(objectArray0);
      assertNotNull(numericVariableFeatures0);
      assertEquals(0, objectArray0.length);
      
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      VariableDomain variableDomain0 = new VariableDomain();
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertNotNull(variableDomain0);
      
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(numericVariableFeatures0, variableDomain0);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertNotNull(normalizedVariableFeatures1);
      assertEquals(0, objectArray0.length);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
      
      SimpleAction simpleAction0 = new SimpleAction("&1O$)pnz?{.jmNE");
      assertEquals("&1O$)pnz?{.jmNE", simpleAction0.toString());
      assertEquals("&1O$)pnz?{.jmNE", simpleAction0.getName());
      assertEquals("&1O$)pnz?{.jmNE", simpleAction0.actionName());
      assertNotNull(simpleAction0);
      
      NormalizedVariableFeatures normalizedVariableFeatures2 = normalizedVariableFeatures0.variableDomain(simpleAction0, variableDomain0);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals("&1O$)pnz?{.jmNE", simpleAction0.toString());
      assertEquals("&1O$)pnz?{.jmNE", simpleAction0.getName());
      assertEquals("&1O$)pnz?{.jmNE", simpleAction0.actionName());
      assertNotNull(normalizedVariableFeatures2);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures2);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures2, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures2, normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      SimpleAction simpleAction1 = new SimpleAction();
      assertFalse(simpleAction1.equals((Object)simpleAction0));
      assertNull(simpleAction1.getName());
      assertNull(simpleAction1.toString());
      assertNull(simpleAction1.actionName());
      assertNotNull(simpleAction1);
      
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, blockDudeAgent0.y);
      assertFalse(blockDudeAgent0.holding);
      assertEquals("agent", blockDudeAgent0.name());
      assertEquals("agent", blockDudeAgent0.className());
      assertNotNull(blockDudeAgent0);
      
      double double0 = denseLinearVFA0.evaluate((State) blockDudeAgent0, (Action) simpleAction1);
      assertFalse(simpleAction1.equals((Object)simpleAction0));
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, blockDudeAgent0.y);
      assertFalse(blockDudeAgent0.holding);
      assertEquals(2, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNull(simpleAction1.getName());
      assertNull(simpleAction1.toString());
      assertNull(simpleAction1.actionName());
      assertEquals("agent", blockDudeAgent0.name());
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals(0.0, double0, 0.01);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures2);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertNotSame(simpleAction1, simpleAction0);
      
      FunctionGradient functionGradient0 = denseLinearVFA0.gradient((State) blockDudeAgent0, (Action) simpleAction0);
      assertFalse(simpleAction0.equals((Object)simpleAction1));
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, blockDudeAgent0.y);
      assertFalse(blockDudeAgent0.holding);
      assertEquals("&1O$)pnz?{.jmNE", simpleAction0.toString());
      assertEquals("&1O$)pnz?{.jmNE", simpleAction0.getName());
      assertEquals("&1O$)pnz?{.jmNE", simpleAction0.actionName());
      assertEquals(4, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals("agent", blockDudeAgent0.name());
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals(0, functionGradient0.numNonZeroPDs());
      assertNotNull(functionGradient0);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures2);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertNotSame(simpleAction0, simpleAction1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      VariableDomain variableDomain0 = new VariableDomain(0.0, 0.0);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertNotNull(variableDomain0);
      
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(object0, variableDomain0);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertNotNull(normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures1, 0.0);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      SimpleAction simpleAction0 = new SimpleAction();
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.getName());
      assertNull(simpleAction0.actionName());
      assertNotNull(simpleAction0);
      
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.y);
      assertFalse(blockDudeAgent0.holding);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals("agent", blockDudeAgent0.name());
      assertNotNull(blockDudeAgent0);
      
      double double0 = denseLinearVFA0.evaluate((State) blockDudeAgent0, (Action) simpleAction0);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.y);
      assertFalse(blockDudeAgent0.holding);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(1, denseLinearVFA0.numParameters());
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.getName());
      assertNull(simpleAction0.actionName());
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals("agent", blockDudeAgent0.name());
      assertEquals(0.0, double0, 0.01);
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
      
      denseLinearVFA0.setParameter(0, 516.84189061003);
      assertEquals(0.0, variableDomain0.upper, 0.01);
      assertEquals(0.0, variableDomain0.lower, 0.01);
      assertEquals(0.0, variableDomain0.span(), 0.01);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(1, denseLinearVFA0.numParameters());
      assertSame(normalizedVariableFeatures0, normalizedVariableFeatures1);
      assertSame(normalizedVariableFeatures1, normalizedVariableFeatures0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 1628.00233612);
      assertEquals(1628.00233612, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      BlockDudeCell blockDudeCell0 = BlockDudeCell.block(")", 1615, 1615);
      assertEquals(1615, blockDudeCell0.x);
      assertEquals(1615, blockDudeCell0.y);
      assertEquals(")", blockDudeCell0.name());
      assertEquals(")", blockDudeCell0.getName());
      assertEquals("block", blockDudeCell0.className());
      assertEquals("block", blockDudeCell0.getClassName());
      assertNotNull(blockDudeCell0);
      
      FunctionGradient functionGradient0 = denseLinearVFA0.gradient((State) blockDudeCell0);
      assertEquals(1615, blockDudeCell0.x);
      assertEquals(1615, blockDudeCell0.y);
      assertEquals(1628.00233612, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(")", blockDudeCell0.name());
      assertEquals(")", blockDudeCell0.getName());
      assertEquals("block", blockDudeCell0.className());
      assertEquals("block", blockDudeCell0.getClassName());
      assertEquals(2, functionGradient0.numNonZeroPDs());
      assertNotNull(functionGradient0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 7388.2586);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      DenseStateFeatures denseStateFeatures0 = denseLinearVFA0.getStateFeatures();
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseStateFeatures0);
      assertSame(normalizedVariableFeatures0, denseStateFeatures0);
      assertSame(denseStateFeatures0, normalizedVariableFeatures0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(objectArray0);
      assertNotNull(numericVariableFeatures0);
      assertEquals(0, objectArray0.length);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 52);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(52.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      assertEquals(0, objectArray0.length);
      
      denseLinearVFA0.initializeStateActionWeightVector(15, 15);
      assertEquals(15, denseLinearVFA0.numParameters());
      assertEquals(52.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, objectArray0.length);
      
      double double0 = denseLinearVFA0.getParameter(1);
      assertEquals(15, denseLinearVFA0.numParameters());
      assertEquals(52.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(15.0, double0, 0.01);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(objectArray0);
      assertNotNull(numericVariableFeatures0);
      assertEquals(10, objectArray0.length);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 1.0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(1.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      assertEquals(10, objectArray0.length);
      
      denseLinearVFA0.initializeStateActionWeightVector(15, (-1.0));
      assertEquals(1.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(15, denseLinearVFA0.numParameters());
      assertEquals(10, objectArray0.length);
      
      double double0 = denseLinearVFA0.getParameter(1);
      assertEquals(1.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(15, denseLinearVFA0.numParameters());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 50.0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(50.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      double double0 = denseLinearVFA0.getDefaultWeight();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(50.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(50.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(objectArray0);
      assertNotNull(numericVariableFeatures0);
      assertEquals(7, objectArray0.length);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, (-2304.0369718));
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals((-2304.0369718), denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      assertEquals(7, objectArray0.length);
      
      double double0 = denseLinearVFA0.getDefaultWeight();
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals((-2304.0369718), denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals((-2304.0369718), double0, 0.01);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      SimpleAction simpleAction0 = new SimpleAction();
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.getName());
      assertNotNull(simpleAction0);
      
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      assertFalse(blockDudeAgent0.holding);
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.y);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals("agent", blockDudeAgent0.name());
      assertNotNull(blockDudeAgent0);
      
      double double0 = denseLinearVFA0.evaluate((State) blockDudeAgent0, (Action) simpleAction0);
      assertFalse(blockDudeAgent0.holding);
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.y);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.getName());
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals("agent", blockDudeAgent0.name());
      assertEquals(0.0, double0, 0.01);
      
      Map<Action, Integer> map0 = denseLinearVFA0.getActionOffset();
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 5);
      assertEquals(5.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      SimpleAction simpleAction0 = new SimpleAction();
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.getName());
      assertNotNull(simpleAction0);
      
      BlockDudeCell blockDudeCell0 = BlockDudeCell.exit(5, 5);
      assertEquals(5, blockDudeCell0.x);
      assertEquals(5, blockDudeCell0.y);
      assertEquals("exit", blockDudeCell0.getClassName());
      assertEquals("exit", blockDudeCell0.name());
      assertEquals("exit", blockDudeCell0.getName());
      assertEquals("exit", blockDudeCell0.className());
      assertNotNull(blockDudeCell0);
      
      double double0 = denseLinearVFA0.evaluate((State) blockDudeCell0, (Action) simpleAction0);
      assertEquals(5, blockDudeCell0.x);
      assertEquals(5, blockDudeCell0.y);
      assertEquals(5.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(2, denseLinearVFA0.numParameters());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.getName());
      assertEquals("exit", blockDudeCell0.getClassName());
      assertEquals("exit", blockDudeCell0.name());
      assertEquals("exit", blockDudeCell0.getName());
      assertEquals("exit", blockDudeCell0.className());
      assertEquals(50.0, double0, 0.01);
      
      FunctionGradient functionGradient0 = denseLinearVFA0.gradient((State) blockDudeCell0, (Action) simpleAction0);
      assertEquals(5, blockDudeCell0.x);
      assertEquals(5, blockDudeCell0.y);
      assertEquals(5.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(2, denseLinearVFA0.numParameters());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.getName());
      assertEquals("exit", blockDudeCell0.getClassName());
      assertEquals("exit", blockDudeCell0.name());
      assertEquals("exit", blockDudeCell0.getName());
      assertEquals("exit", blockDudeCell0.className());
      assertEquals(2, functionGradient0.numNonZeroPDs());
      assertNotNull(functionGradient0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 1628.00233612);
      assertEquals(1628.00233612, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      BlockDudeCell blockDudeCell0 = new BlockDudeCell(1615, (-1789), "", ")");
      assertEquals((-1789), blockDudeCell0.y);
      assertEquals(1615, blockDudeCell0.x);
      assertEquals("", blockDudeCell0.className());
      assertEquals(")", blockDudeCell0.getName());
      assertEquals(")", blockDudeCell0.name());
      assertEquals("", blockDudeCell0.getClassName());
      assertNotNull(blockDudeCell0);
      
      SimpleAction simpleAction0 = new SimpleAction();
      assertNull(simpleAction0.getName());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertNotNull(simpleAction0);
      
      double double0 = denseLinearVFA0.evaluate((State) blockDudeCell0, (Action) simpleAction0);
      assertEquals((-1789), blockDudeCell0.y);
      assertEquals(1615, blockDudeCell0.x);
      assertEquals(1628.00233612, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(2, denseLinearVFA0.numParameters());
      assertEquals("", blockDudeCell0.className());
      assertEquals(")", blockDudeCell0.getName());
      assertEquals(")", blockDudeCell0.name());
      assertEquals("", blockDudeCell0.getClassName());
      assertNull(simpleAction0.getName());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertEquals((-283272.4064848805), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockDudeCell blockDudeCell0 = BlockDudeCell.block("y", 806, 806);
      assertEquals(806, blockDudeCell0.y);
      assertEquals(806, blockDudeCell0.x);
      assertEquals("block", blockDudeCell0.getClassName());
      assertEquals("y", blockDudeCell0.getName());
      assertEquals("block", blockDudeCell0.className());
      assertEquals("y", blockDudeCell0.name());
      assertNotNull(blockDudeCell0);
      
      List<Object> list0 = blockDudeCell0.variableKeys();
      assertEquals(806, blockDudeCell0.y);
      assertEquals(806, blockDudeCell0.x);
      assertEquals("block", blockDudeCell0.getClassName());
      assertEquals("y", blockDudeCell0.getName());
      assertEquals("block", blockDudeCell0.className());
      assertEquals("y", blockDudeCell0.name());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertTrue(list0.contains("y"));
      assertFalse(list0.contains(806));
      
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(list0);
      assertEquals(806, blockDudeCell0.y);
      assertEquals(806, blockDudeCell0.x);
      assertEquals("block", blockDudeCell0.getClassName());
      assertEquals("y", blockDudeCell0.getName());
      assertEquals("block", blockDudeCell0.className());
      assertEquals("y", blockDudeCell0.name());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(numericVariableFeatures0);
      assertTrue(list0.contains("y"));
      assertFalse(list0.contains(806));
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 806);
      assertEquals(806, blockDudeCell0.y);
      assertEquals(806, blockDudeCell0.x);
      assertEquals("block", blockDudeCell0.getClassName());
      assertEquals("y", blockDudeCell0.getName());
      assertEquals("block", blockDudeCell0.className());
      assertEquals("y", blockDudeCell0.name());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(806.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      assertTrue(list0.contains("y"));
      assertFalse(list0.contains(806));
      
      double double0 = denseLinearVFA0.evaluate((State) blockDudeCell0);
      assertEquals(806, blockDudeCell0.y);
      assertEquals(806, blockDudeCell0.x);
      assertEquals("block", blockDudeCell0.getClassName());
      assertEquals("y", blockDudeCell0.getName());
      assertEquals("block", blockDudeCell0.className());
      assertEquals("y", blockDudeCell0.name());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(806.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(2, denseLinearVFA0.numParameters());
      assertEquals(1299272.0, double0, 0.01);
      assertTrue(list0.contains("y"));
      assertFalse(list0.contains(806));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 5);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(5.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      MountainCar.MCPhysicsParams mountainCar_MCPhysicsParams0 = new MountainCar.MCPhysicsParams();
      assertEquals((-1.2), mountainCar_MCPhysicsParams0.xmin, 0.01);
      assertEquals(1.0, mountainCar_MCPhysicsParams0.timeDelta, 0.01);
      assertEquals((-0.07), mountainCar_MCPhysicsParams0.vmin, 0.01);
      assertEquals(0.5, mountainCar_MCPhysicsParams0.xmax, 0.01);
      assertEquals(0.07, mountainCar_MCPhysicsParams0.vmax, 0.01);
      assertEquals(0.001, mountainCar_MCPhysicsParams0.acceleration, 0.01);
      assertEquals(3.0, mountainCar_MCPhysicsParams0.cosScale, 0.01);
      assertEquals(0.0025, mountainCar_MCPhysicsParams0.gravity, 0.01);
      assertEquals((-0.5235987755982988), mountainCar_MCPhysicsParams0.valleyPos(), 0.01);
      assertNotNull(mountainCar_MCPhysicsParams0);
      
      MCState mCState0 = mountainCar_MCPhysicsParams0.valleyState();
      assertEquals((-1.2), mountainCar_MCPhysicsParams0.xmin, 0.01);
      assertEquals(1.0, mountainCar_MCPhysicsParams0.timeDelta, 0.01);
      assertEquals((-0.07), mountainCar_MCPhysicsParams0.vmin, 0.01);
      assertEquals(0.5, mountainCar_MCPhysicsParams0.xmax, 0.01);
      assertEquals(0.07, mountainCar_MCPhysicsParams0.vmax, 0.01);
      assertEquals(0.001, mountainCar_MCPhysicsParams0.acceleration, 0.01);
      assertEquals(3.0, mountainCar_MCPhysicsParams0.cosScale, 0.01);
      assertEquals(0.0025, mountainCar_MCPhysicsParams0.gravity, 0.01);
      assertEquals(0.0, mCState0.v, 0.01);
      assertEquals((-0.5235987755982988), mCState0.x, 0.01);
      assertEquals((-0.5235987755982988), mountainCar_MCPhysicsParams0.valleyPos(), 0.01);
      assertNotNull(mCState0);
      
      double double0 = denseLinearVFA0.evaluate((State) mCState0);
      assertEquals((-1.2), mountainCar_MCPhysicsParams0.xmin, 0.01);
      assertEquals(1.0, mountainCar_MCPhysicsParams0.timeDelta, 0.01);
      assertEquals((-0.07), mountainCar_MCPhysicsParams0.vmin, 0.01);
      assertEquals(0.5, mountainCar_MCPhysicsParams0.xmax, 0.01);
      assertEquals(0.07, mountainCar_MCPhysicsParams0.vmax, 0.01);
      assertEquals(0.001, mountainCar_MCPhysicsParams0.acceleration, 0.01);
      assertEquals(3.0, mountainCar_MCPhysicsParams0.cosScale, 0.01);
      assertEquals(0.0025, mountainCar_MCPhysicsParams0.gravity, 0.01);
      assertEquals(0.0, mCState0.v, 0.01);
      assertEquals((-0.5235987755982988), mCState0.x, 0.01);
      assertEquals(5.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(2, denseLinearVFA0.numParameters());
      assertEquals((-0.5235987755982988), mountainCar_MCPhysicsParams0.valleyPos(), 0.01);
      assertEquals((-2.617993877991494), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 7388.2586);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      DenseLinearVFA denseLinearVFA1 = denseLinearVFA0.copy();
      assertFalse(denseLinearVFA1.equals((Object)denseLinearVFA0));
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA1.numParameters());
      assertEquals(7388.2586, denseLinearVFA1.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA1);
      assertNotSame(denseLinearVFA0, denseLinearVFA1);
      assertNotSame(denseLinearVFA1, denseLinearVFA0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      JointAction jointAction0 = new JointAction();
      assertEquals(0, jointAction0.size());
      assertNotNull(jointAction0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.setActionOffset((Action) jointAction0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.mdp.stochasticgames.JointAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0.0);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      denseLinearVFA0.initializeStateActionWeightVector(4538, 4538);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(4538, denseLinearVFA0.numParameters());
      
      denseLinearVFA0.expandStateActionWeights(4538);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(9076, denseLinearVFA0.numParameters());
      
      denseLinearVFA0.resetParameters();
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(9076, denseLinearVFA0.numParameters());
      
      // Undeclared exception!
      denseLinearVFA0.resetParameters();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA((DenseStateFeatures) null, (-5364.461));
      assertEquals((-5364.461), denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      // Undeclared exception!
      denseLinearVFA0.initializeStateWeightVector(11489, 0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, (-25));
      assertEquals((-25.0), denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.initializeStateWeightVector((-25), (-25));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -25
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(numericVariableFeatures0);
      assertEquals(0, tileCodingFeatures0.numFeatures());
      assertNotNull(tileCodingFeatures0);
      
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      assertEquals(0, tileCodingFeatures0.numFeatures());
      assertNotNull(sparseToDenseFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(sparseToDenseFeatures0, 0.32);
      assertEquals(0, tileCodingFeatures0.numFeatures());
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.32, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      denseLinearVFA0.initializeStateActionWeightVector(6360, 6360);
      assertEquals(0, tileCodingFeatures0.numFeatures());
      assertEquals(0.32, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(6360, denseLinearVFA0.numParameters());
      
      // Undeclared exception!
      denseLinearVFA0.initializeStateActionWeightVector(6360, 0.32);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, (-11));
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals((-11.0), denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.initializeStateActionWeightVector((-11), (-11));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -11
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      assertEquals(0, blockDudeCell0.y);
      assertEquals(0, blockDudeCell0.x);
      assertNull(blockDudeCell0.getClassName());
      assertNull(blockDudeCell0.className());
      assertNull(blockDudeCell0.name());
      assertNull(blockDudeCell0.getName());
      assertNotNull(blockDudeCell0);
      
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      assertNotNull(concatenatedObjectFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(concatenatedObjectFeatures0, 0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      JointAction jointAction0 = new JointAction();
      assertEquals(0, jointAction0.size());
      assertNotNull(jointAction0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.gradient((State) blockDudeCell0, (Action) jointAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ConcatenatedObjectFeatureVectorGenerator is only defined for OOState instances.
         //
         verifyException("burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      SimpleAction simpleAction0 = new SimpleAction();
      assertNull(simpleAction0.getName());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertNotNull(simpleAction0);
      
      UniversalActionType universalActionType0 = new UniversalActionType("a", simpleAction0);
      assertNull(simpleAction0.getName());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertEquals("a", universalActionType0.typeName());
      assertNotNull(universalActionType0);
      
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, blockDudeAgent0.x);
      assertFalse(blockDudeAgent0.holding);
      assertEquals(0, blockDudeAgent0.y);
      assertEquals("agent", blockDudeAgent0.className());
      assertEquals("agent", blockDudeAgent0.name());
      assertNotNull(blockDudeAgent0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.gradient((State) blockDudeAgent0, universalActionType0.action);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      assertNotNull(normalizedVariableFeatures0);
      
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock(" because it does not implement MutableState");
      assertTrue(blocksWorldBlock0.clear);
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.getName());
      assertEquals("block", blocksWorldBlock0.className());
      assertEquals(" because it does not implement MutableState", blocksWorldBlock0.name());
      assertTrue(blocksWorldBlock0.onTable());
      assertNotNull(blocksWorldBlock0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 7388.2586);
      assertEquals(7388.2586, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      JointAction jointAction0 = new JointAction();
      assertEquals(0, jointAction0.size());
      assertNotNull(jointAction0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.gradient((State) blocksWorldBlock0, (Action) jointAction0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.mdp.stochasticgames.JointAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      SimpleAction simpleAction0 = new SimpleAction();
      assertNull(simpleAction0.getName());
      assertNull(simpleAction0.actionName());
      assertNull(simpleAction0.toString());
      assertNotNull(simpleAction0);
      
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      assertEquals(0, blockDudeAgent0.x);
      assertEquals(0, blockDudeAgent0.dir);
      assertEquals(0, blockDudeAgent0.y);
      assertFalse(blockDudeAgent0.holding);
      assertEquals("agent", blockDudeAgent0.name());
      assertEquals("agent", blockDudeAgent0.className());
      assertNotNull(blockDudeAgent0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.gradient((State) blockDudeAgent0, (Action) simpleAction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Boolean cannot be cast to class java.lang.Number (java.lang.Boolean and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0.0);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      BlockDudeState blockDudeState0 = new BlockDudeState(178, 2653, 2653);
      assertEquals(2656, blockDudeState0.numObjects());
      assertNotNull(blockDudeState0);
      
      // Undeclared exception!
      denseLinearVFA0.gradient((State) blockDudeState0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      assertEquals(0, blockDudeCell0.x);
      assertEquals(0, blockDudeCell0.y);
      assertNull(blockDudeCell0.className());
      assertNull(blockDudeCell0.name());
      assertNull(blockDudeCell0.getClassName());
      assertNull(blockDudeCell0.getName());
      assertNotNull(blockDudeCell0);
      
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      assertNotNull(concatenatedObjectFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(concatenatedObjectFeatures0, 0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.gradient((State) blockDudeCell0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ConcatenatedObjectFeatureVectorGenerator is only defined for OOState instances.
         //
         verifyException("burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      assertEquals(0, blockDudeCell0.x);
      assertEquals(0, blockDudeCell0.y);
      assertNull(blockDudeCell0.name());
      assertNull(blockDudeCell0.getClassName());
      assertNull(blockDudeCell0.getName());
      assertNull(blockDudeCell0.className());
      assertNotNull(blockDudeCell0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA((DenseStateFeatures) null, 0);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.gradient((State) blockDudeCell0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertNotNull(denseLinearVFA0);
      
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      assertTrue(blocksWorldBlock0.clear);
      assertEquals("block", blocksWorldBlock0.getName());
      assertEquals("block", blocksWorldBlock0.name());
      assertTrue(blocksWorldBlock0.onTable());
      assertEquals("block", blocksWorldBlock0.className());
      assertNotNull(blocksWorldBlock0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.gradient((State) blocksWorldBlock0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      SimpleAction simpleAction0 = new SimpleAction();
      assertNull(simpleAction0.toString());
      assertNull(simpleAction0.getName());
      assertNull(simpleAction0.actionName());
      assertNotNull(simpleAction0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.getActionOffset((Action) simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      assertNotNull(numericVariableFeatures0);
      
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertNotNull(denseLinearVFA0);
      
      JointAction jointAction0 = new JointAction();
      assertEquals(0, jointAction0.size());
      assertNotNull(jointAction0);
      
      // Undeclared exception!
      try { 
        denseLinearVFA0.getActionOffset((Action) jointAction0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.mdp.stochasticgames.JointAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      denseLinearVFA0.initializeStateActionWeightVector(5026, 0);
      denseLinearVFA0.evaluate((State) blockDudeCell0);
      SimpleAction simpleAction0 = new SimpleAction();
      denseLinearVFA0.gradient((State) blockDudeCell0, (Action) simpleAction0);
      // Undeclared exception!
      denseLinearVFA0.expandStateActionWeights(0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, (-14));
      // Undeclared exception!
      try { 
        denseLinearVFA0.expandStateActionWeights((-14));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -14
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      BlockDudeState blockDudeState0 = new BlockDudeState(0, 0, 3215);
      SimpleAction simpleAction0 = new SimpleAction("e<yE.n*AK_FwQ");
      // Undeclared exception!
      denseLinearVFA0.evaluate((State) blockDudeState0, (Action) simpleAction0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      numericVariableFeatures0.addToWhiteList(blockDudeCell0);
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        denseLinearVFA0.evaluate((State) blockDudeCell0, (Action) simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown key null (null): {
         // java.lang.String@0000000005: {java.lang.Integer@0000000006}
         // java.lang.String@0000000007: {java.lang.Integer@0000000006}
         // }
         //
         verifyException("burlap.domain.singleagent.blockdude.state.BlockDudeCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 5);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        denseLinearVFA0.evaluate((State) null, (Action) simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock(" because it does not implement MutableState");
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 7388.2586);
      JointAction jointAction0 = new JointAction();
      // Undeclared exception!
      try { 
        denseLinearVFA0.evaluate((State) blocksWorldBlock0, (Action) jointAction0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.mdp.stochasticgames.JointAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 5);
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      // Undeclared exception!
      try { 
        denseLinearVFA0.evaluate((State) blocksWorldBlock0, (Action) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      SimpleAction simpleAction0 = new SimpleAction();
      denseLinearVFA0.setActionOffset((Action) simpleAction0, 0);
      // Undeclared exception!
      try { 
        denseLinearVFA0.evaluate((State) blockDudeCell0, (Action) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      BlockDudeState blockDudeState0 = new BlockDudeState(0, 1786, 100);
      // Undeclared exception!
      denseLinearVFA0.evaluate((State) blockDudeState0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      numericVariableFeatures0.addToWhiteList(blockDudeCell0);
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      // Undeclared exception!
      try { 
        denseLinearVFA0.evaluate((State) blockDudeCell0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown key null (null): {
         // java.lang.String@0000000004: {java.lang.Integer@0000000005}
         // java.lang.String@0000000006: {java.lang.Integer@0000000005}
         // }
         //
         verifyException("burlap.domain.singleagent.blockdude.state.BlockDudeCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA((DenseStateFeatures) null, 0.0);
      // Undeclared exception!
      try { 
        denseLinearVFA0.evaluate((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 2887.1764238907285);
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      // Undeclared exception!
      try { 
        denseLinearVFA0.evaluate((State) blocksWorldBlock0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(objectArray0);
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, (-3535.283522556));
      denseLinearVFA0.expandStateActionWeights(3515);
      DenseLinearVFA denseLinearVFA1 = denseLinearVFA0.copy();
      denseLinearVFA1.copy();
      // Undeclared exception!
      denseLinearVFA1.copy();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 5);
      denseLinearVFA0.actionOffset = null;
      // Undeclared exception!
      try { 
        denseLinearVFA0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 32);
      denseLinearVFA0.expandStateActionWeights(32);
      // Undeclared exception!
      try { 
        denseLinearVFA0.expandStateActionWeights((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      denseLinearVFA0.evaluate((State) blockDudeCell0, (Action) null);
      denseLinearVFA0.getActionOffset((Action) null);
      assertEquals(2, denseLinearVFA0.numParameters());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      denseLinearVFA0.initializeStateWeightVector(22, 22);
      denseLinearVFA0.copy();
      assertEquals(22, denseLinearVFA0.numParameters());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      denseLinearVFA0.resetParameters();
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(objectArray0);
      BlockDudeState blockDudeState0 = new BlockDudeState();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 52);
      SimpleAction simpleAction0 = new SimpleAction();
      denseLinearVFA0.evaluate((State) blockDudeState0, (Action) simpleAction0);
      // Undeclared exception!
      try { 
        denseLinearVFA0.setParameter((-2173), 622.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2173 out of bounds for length 0
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      denseLinearVFA0.expandStateActionWeights(0);
      // Undeclared exception!
      try { 
        denseLinearVFA0.setParameter(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be set.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      denseLinearVFA0.evaluate((State) blockDudeAgent0);
      // Undeclared exception!
      try { 
        denseLinearVFA0.setParameter(0, 360.624056508);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be set.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      // Undeclared exception!
      try { 
        denseLinearVFA0.setParameter(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be set.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 5);
      denseLinearVFA0.initializeStateActionWeightVector(5, 5);
      // Undeclared exception!
      try { 
        denseLinearVFA0.getParameter(5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be returned.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      denseLinearVFA0.initializeStateWeightVector(22, 22);
      // Undeclared exception!
      try { 
        denseLinearVFA0.getParameter(22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be returned.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      double double0 = denseLinearVFA0.evaluate((State) blockDudeCell0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = denseLinearVFA0.getParameter(0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 32);
      // Undeclared exception!
      try { 
        denseLinearVFA0.getParameter((-1635));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter index out of bounds; parameter cannot be returned.
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(numericVariableFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(sparseToDenseFeatures0, 0.32);
      denseLinearVFA0.initializeStateActionWeightVector(6360, 6360);
      int int0 = denseLinearVFA0.numParameters();
      assertEquals(6360, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      denseLinearVFA0.evaluate((State) blockDudeCell0);
      int int0 = denseLinearVFA0.numParameters();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(numericVariableFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(sparseToDenseFeatures0, 0.32);
      int int0 = denseLinearVFA0.numParameters();
      assertEquals(0.32, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      denseLinearVFA0.gradient((State) blockDudeCell0);
      SimpleAction simpleAction0 = new SimpleAction();
      denseLinearVFA0.gradient((State) blockDudeCell0, (Action) simpleAction0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      BlockDudeState blockDudeState0 = new BlockDudeState(1848, 0, 1848);
      // Undeclared exception!
      denseLinearVFA0.gradient((State) blockDudeState0, (Action) null);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      SimpleAction simpleAction0 = new SimpleAction();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      double double0 = denseLinearVFA0.evaluate((State) blockDudeAgent0, (Action) simpleAction0);
      assertEquals(0.0, double0, 0.01);
      
      FunctionGradient functionGradient0 = denseLinearVFA0.gradient((State) blockDudeAgent0, (Action) simpleAction0);
      assertNotNull(functionGradient0);
      
      FunctionGradient functionGradient1 = denseLinearVFA0.gradient((State) blockDudeAgent0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
      assertSame(functionGradient1, functionGradient0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      SimpleAction simpleAction0 = new SimpleAction();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      double double0 = denseLinearVFA0.evaluate((State) blockDudeAgent0, (Action) simpleAction0);
      assertEquals(0.0, double0, 0.01);
      
      FunctionGradient functionGradient0 = denseLinearVFA0.gradient((State) blockDudeAgent0);
      assertNotNull(functionGradient0);
      assertEquals(0, denseLinearVFA0.numParameters());
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      denseLinearVFA0.initializeStateWeightVector(0, 0);
      // Undeclared exception!
      try { 
        denseLinearVFA0.evaluate((State) blockDudeCell0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(numericVariableFeatures0, 0);
      SimpleAction simpleAction0 = new SimpleAction();
      denseLinearVFA0.evaluate((State) blockDudeCell0, (Action) simpleAction0);
      denseLinearVFA0.getActionOffset((Action) null);
      assertEquals(4, denseLinearVFA0.numParameters());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA((DenseStateFeatures) null, 0.0);
      denseLinearVFA0.getStateFeatures();
      assertEquals(0.0, denseLinearVFA0.getDefaultWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseLinearVFA denseLinearVFA0 = new DenseLinearVFA(normalizedVariableFeatures0, 0.0);
      double double0 = denseLinearVFA0.getDefaultWeight();
      assertEquals(0.0, double0, 0.01);
  }
}
