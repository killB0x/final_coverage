/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:52:53 GMT 2022
 */

package burlap.behavior.functionapproximation.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.functionapproximation.FunctionGradient;
import burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures;
import burlap.behavior.functionapproximation.dense.DenseCrossProductFeatures;
import burlap.behavior.functionapproximation.dense.DenseStateActionFeatures;
import burlap.behavior.functionapproximation.dense.DenseStateActionLinearVFA;
import burlap.behavior.functionapproximation.dense.NormalizedVariableFeatures;
import burlap.behavior.functionapproximation.dense.NumericVariableFeatures;
import burlap.behavior.functionapproximation.dense.PFFeatures;
import burlap.behavior.functionapproximation.dense.SparseToDenseFeatures;
import burlap.behavior.functionapproximation.sparse.tilecoding.TileCodingFeatures;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.domain.singleagent.blockdude.state.BlockDudeMap;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.domain.singleagent.blocksworld.BlocksWorldBlock;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.core.state.NullState;
import burlap.mdp.core.state.State;
import burlap.mdp.core.state.vardomain.VariableDomain;
import burlap.mdp.stochasticgames.JointAction;
import burlap.mdp.stochasticgames.oo.OOSGDomain;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DenseStateActionLinearVFA_ESTest extends DenseStateActionLinearVFA_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockDudeMap blockDudeMap0 = new BlockDudeMap(0, 2861);
      List<Object> list0 = blockDudeMap0.variableKeys();
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(list0);
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(numericVariableFeatures0, 130);
      double[] doubleArray0 = new double[7];
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, doubleArray0, 130);
      denseStateActionLinearVFA0.setParameter(0, 1693.6640991);
      assertArrayEquals(new double[] {1693.6640991, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, (-28));
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, (-1.0));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-28);
      denseStateActionLinearVFA0.currentFeatures = doubleArray0;
      SimpleAction simpleAction0 = new SimpleAction("=07JSqiyD$Dm");
      FunctionGradient functionGradient0 = denseStateActionLinearVFA0.gradient((State) null, simpleAction0);
      assertEquals(1, functionGradient0.numNonZeroPDs());
      assertNotNull(functionGradient0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      PFFeatures pFFeatures0 = new PFFeatures(oOSGDomain0);
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(pFFeatures0, 0);
      double[] doubleArray0 = new double[4];
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, doubleArray0, 0.0);
      double double0 = denseStateActionLinearVFA0.getParameter(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(objectArray0);
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(numericVariableFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(sparseToDenseFeatures0, 1351);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1351;
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, doubleArray0, 823.2794);
      double double0 = denseStateActionLinearVFA0.getParameter(0);
      assertEquals(1351.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      PFFeatures pFFeatures0 = new PFFeatures(oOSGDomain0);
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(pFFeatures0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1183.71514239);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, doubleArray0, 0.0);
      assertEquals(4, denseStateActionLinearVFA0.numParameters());
      
      double double0 = denseStateActionLinearVFA0.getParameter(0);
      assertEquals((-1183.71514239), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 853);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, (-635.6976777));
      DeepOOState deepOOState0 = new DeepOOState();
      SimpleAction simpleAction0 = new SimpleAction("bBm@]*'=[77\"cDusZ");
      denseStateActionLinearVFA0.evaluate(deepOOState0, simpleAction0);
      DenseStateActionLinearVFA denseStateActionLinearVFA1 = denseStateActionLinearVFA0.copy();
      assertFalse(denseStateActionLinearVFA1.equals((Object)denseStateActionLinearVFA0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 0);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 0.0);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.setParameter(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseStateActionLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      HashMap<Action, Integer> hashMap0 = new HashMap<Action, Integer>();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 1912, hashMap0);
      double[] doubleArray0 = new double[4];
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, doubleArray0, 1912.0);
      DenseStateActionLinearVFA denseStateActionLinearVFA1 = denseStateActionLinearVFA0.copy();
      BlockDudeState blockDudeState0 = new BlockDudeState(1381, 1381, 1949);
      SimpleAction simpleAction0 = new SimpleAction("-cd'>i~qPph}&99H");
      denseStateActionLinearVFA1.evaluate(blockDudeState0, simpleAction0);
      // Undeclared exception!
      denseStateActionLinearVFA0.gradient(blockDudeState0, simpleAction0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      SimpleAction simpleAction0 = new SimpleAction();
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(concatenatedObjectFeatures0, 1698);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 1698);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.gradient(blocksWorldBlock0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ConcatenatedObjectFeatureVectorGenerator is only defined for OOState instances.
         //
         verifyException("burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 811);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 811);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.gradient((State) null, (Action) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseStateActionLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 1912);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 1912);
      NullState nullState0 = NullState.instance;
      JointAction jointAction0 = new JointAction();
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.gradient(nullState0, jointAction0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.mdp.stochasticgames.JointAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, (-63));
      VariableDomain variableDomain0 = new VariableDomain();
      normalizedVariableFeatures0.variableDomain(denseCrossProductFeatures0, variableDomain0);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, (-63));
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.gradient(blockDudeCell0, simpleAction0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -63
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseCrossProductFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      SimpleAction simpleAction0 = new SimpleAction();
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(numericVariableFeatures0, (-1));
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, (-1));
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.gradient(blocksWorldBlock0, simpleAction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      HashMap<Action, Integer> hashMap0 = new HashMap<Action, Integer>();
      VariableDomain variableDomain0 = new VariableDomain();
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(hashMap0, variableDomain0);
      BlockDudeCell blockDudeCell0 = BlockDudeCell.exit((-459), (-459));
      SimpleAction simpleAction0 = new SimpleAction("bBm@]*'=[77\"cDusZ");
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures1, 0);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 1549.883);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.gradient(blockDudeCell0, simpleAction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseCrossProductFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 10);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 10);
      SimpleAction simpleAction0 = new SimpleAction();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock((String) null);
      denseStateActionLinearVFA0.evaluate(blocksWorldBlock0, simpleAction0);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.getParameter(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 10 out of bounds for length 0
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseStateActionLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      SimpleAction simpleAction0 = new SimpleAction();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 160);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 2093.9890728185496);
      BlockDudeState blockDudeState0 = new BlockDudeState(160, 1370, 4687);
      // Undeclared exception!
      denseStateActionLinearVFA0.evaluate(blockDudeState0, simpleAction0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(concatenatedObjectFeatures0, 787);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 70.0);
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.evaluate(blockDudeCell0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ConcatenatedObjectFeatureVectorGenerator is only defined for OOState instances.
         //
         verifyException("burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 284673923);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 284673923);
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      SimpleAction simpleAction0 = new SimpleAction();
      VariableDomain variableDomain0 = new VariableDomain(0.0, 0);
      normalizedVariableFeatures0.variableDomain(blockDudeCell0, variableDomain0);
      // Undeclared exception!
      denseStateActionLinearVFA0.evaluate(blockDudeCell0, simpleAction0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      SimpleAction simpleAction0 = new SimpleAction();
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA((DenseStateActionFeatures) null, 22);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.evaluate(blocksWorldBlock0, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseStateActionLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, (-52));
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, (-52));
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      JointAction jointAction0 = new JointAction();
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.evaluate(blocksWorldBlock0, jointAction0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.mdp.stochasticgames.JointAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, (-63));
      VariableDomain variableDomain0 = new VariableDomain();
      normalizedVariableFeatures0.variableDomain(denseCrossProductFeatures0, variableDomain0);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, (-63));
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.evaluate(blockDudeCell0, simpleAction0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -63
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseCrossProductFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      SimpleAction simpleAction0 = new SimpleAction("__table__");
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      HashMap<Action, Integer> hashMap0 = new HashMap<Action, Integer>();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(numericVariableFeatures0, 1, hashMap0);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 1);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.evaluate(blocksWorldBlock0, simpleAction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockDudeCell blockDudeCell0 = new BlockDudeCell(31, 31, "<5\"qbxmH}yfP}m", "<5\"qbxmH}yfP}m");
      List<Object> list0 = blockDudeCell0.variableKeys();
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(list0);
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(numericVariableFeatures0, 31);
      SimpleAction simpleAction0 = new SimpleAction("bBm@]*'=[77\"cDusZ");
      double[] doubleArray0 = new double[3];
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.evaluate(blockDudeCell0, simpleAction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseStateActionLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockDudeCell blockDudeCell0 = BlockDudeCell.exit(959, 959);
      List<Object> list0 = blockDudeCell0.variableKeys();
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(list0);
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(numericVariableFeatures0, 959);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 1.0);
      denseStateActionLinearVFA0.evaluate(blockDudeCell0, (Action) null);
      int int0 = denseStateActionLinearVFA0.numParameters();
      assertEquals(1918, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 0);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 1549.883);
      int int0 = denseStateActionLinearVFA0.numParameters();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      HashMap<Action, Integer> hashMap0 = new HashMap<Action, Integer>();
      VariableDomain variableDomain0 = new VariableDomain();
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(hashMap0, variableDomain0);
      SimpleAction simpleAction0 = new SimpleAction("");
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures1, 1);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 0.0);
      FunctionGradient functionGradient0 = denseStateActionLinearVFA0.gradient(blocksWorldBlock0, simpleAction0);
      assertEquals(0, functionGradient0.numNonZeroPDs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      SimpleAction simpleAction0 = new SimpleAction("");
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 1);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 0.0);
      FunctionGradient functionGradient0 = denseStateActionLinearVFA0.gradient(blocksWorldBlock0, simpleAction0);
      FunctionGradient functionGradient1 = denseStateActionLinearVFA0.gradient(blocksWorldBlock0, simpleAction0);
      assertSame(functionGradient1, functionGradient0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 1);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 0.0);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseStateActionLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 853);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 853);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.getParameter(1703);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseStateActionLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(normalizedVariableFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      HashMap<Action, Integer> hashMap1 = new HashMap<Action, Integer>();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(sparseToDenseFeatures0, 4041, hashMap1);
      double[] doubleArray0 = new double[4];
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        denseStateActionLinearVFA0.setParameter((-295), 50.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -295 out of bounds for length 4
         //
         verifyException("burlap.behavior.functionapproximation.dense.DenseStateActionLinearVFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      DenseCrossProductFeatures denseCrossProductFeatures0 = new DenseCrossProductFeatures(normalizedVariableFeatures0, 1);
      DenseStateActionLinearVFA denseStateActionLinearVFA0 = new DenseStateActionLinearVFA(denseCrossProductFeatures0, 0.0);
      denseStateActionLinearVFA0.resetParameters();
      assertEquals(0, denseStateActionLinearVFA0.numParameters());
  }
}
