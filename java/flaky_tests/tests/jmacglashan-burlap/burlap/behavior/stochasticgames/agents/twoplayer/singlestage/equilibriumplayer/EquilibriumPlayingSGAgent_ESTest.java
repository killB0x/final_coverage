/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:21:49 GMT 2022
 */

package burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent;
import burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.equilibriumsolvers.MaxMax;
import burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.equilibriumsolvers.Utilitarian;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.ActionType;
import burlap.mdp.core.state.NullState;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.mdp.stochasticgames.JointAction;
import burlap.mdp.stochasticgames.SGDomain;
import burlap.mdp.stochasticgames.agent.SGAgentType;
import burlap.mdp.stochasticgames.common.NullJointRewardFunction;
import burlap.mdp.stochasticgames.oo.OOSGDomain;
import burlap.mdp.stochasticgames.world.World;
import java.util.LinkedList;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EquilibriumPlayingSGAgent_ESTest extends EquilibriumPlayingSGAgent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      EquilibriumPlayingSGAgent.BimatrixTuple equilibriumPlayingSGAgent_BimatrixTuple0 = equilibriumPlayingSGAgent0.new BimatrixTuple(2, 2);
      int int0 = equilibriumPlayingSGAgent_BimatrixTuple0.nCols();
      assertEquals(2, int0);
      assertEquals(2, equilibriumPlayingSGAgent_BimatrixTuple0.nRows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilitarian utilitarian0 = new Utilitarian();
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent(utilitarian0);
      double[][] doubleArray2 = new double[2][1];
      doubleArray2[0] = doubleArray1;
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray0[0];
      EquilibriumPlayingSGAgent.BimatrixTuple equilibriumPlayingSGAgent_BimatrixTuple0 = equilibriumPlayingSGAgent0.new BimatrixTuple(doubleArray2, doubleArray3);
      assertEquals(2, equilibriumPlayingSGAgent_BimatrixTuple0.nRows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      double[][] doubleArray0 = new double[7][4];
      double[][] doubleArray1 = new double[3][2];
      EquilibriumPlayingSGAgent.BimatrixTuple equilibriumPlayingSGAgent_BimatrixTuple0 = null;
      try {
        equilibriumPlayingSGAgent_BimatrixTuple0 = equilibriumPlayingSGAgent0.new BimatrixTuple(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Payoff matrices are not of equal dimension.
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent$BimatrixTuple", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      EquilibriumPlayingSGAgent.BimatrixTuple equilibriumPlayingSGAgent_BimatrixTuple0 = equilibriumPlayingSGAgent0.new BimatrixTuple(0, 735);
      int int0 = equilibriumPlayingSGAgent_BimatrixTuple0.nRows();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      EquilibriumPlayingSGAgent.BimatrixTuple equilibriumPlayingSGAgent_BimatrixTuple0 = equilibriumPlayingSGAgent0.new BimatrixTuple(961, 961);
      equilibriumPlayingSGAgent_BimatrixTuple0.setPayoff(0, 1, 0, 0.1);
      assertEquals(961, equilibriumPlayingSGAgent_BimatrixTuple0.nRows());
      assertEquals(961, equilibriumPlayingSGAgent_BimatrixTuple0.nCols());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MaxMax maxMax0 = new MaxMax();
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent(maxMax0);
      SGDomain sGDomain0 = new SGDomain();
      LinkedList<ActionType> linkedList0 = new LinkedList<ActionType>();
      SGAgentType sGAgentType0 = new SGAgentType(";TURY.rBgS_v(9Ua", linkedList0);
      equilibriumPlayingSGAgent0.init(sGDomain0, ";TURY.rBgS_v(9Ua", sGAgentType0);
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.action((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilitarian utilitarian0 = new Utilitarian();
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent(utilitarian0);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-8;
      equilibriumPlayingSGAgent0.sampleStrategy(doubleArray0);
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.sampleStrategy(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Strategy probability distribution does not sum to 1; it sums to: 1.0E-8
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.sampleStrategy((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.opponentNum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullJointRewardFunction nullJointRewardFunction0 = new NullJointRewardFunction();
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      NullTermination nullTermination0 = new NullTermination();
      World world0 = new World(oOSGDomain0, nullJointRewardFunction0, nullTermination0, tabularBeliefState0);
      equilibriumPlayingSGAgent0.gameStarting(world0, 0);
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.getOpponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EquilibriumPlayingAgent is only defined for two player games and there are 0 players in the world.
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.getOpponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      Vector<Action> vector0 = new Vector<Action>();
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.constructBimatrix(tabularBeliefState0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      double[][] doubleArray0 = new double[2][2];
      double[][] doubleArray1 = new double[2][5];
      EquilibriumPlayingSGAgent.BimatrixTuple equilibriumPlayingSGAgent_BimatrixTuple0 = null;
      try {
        equilibriumPlayingSGAgent_BimatrixTuple0 = equilibriumPlayingSGAgent0.new BimatrixTuple(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Payoff matrices are not of equal dimension.
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent$BimatrixTuple", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      double[][] doubleArray0 = new double[1][6];
      double[][] doubleArray1 = new double[6][0];
      EquilibriumPlayingSGAgent.BimatrixTuple equilibriumPlayingSGAgent_BimatrixTuple0 = null;
      try {
        equilibriumPlayingSGAgent_BimatrixTuple0 = equilibriumPlayingSGAgent0.new BimatrixTuple(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Payoff matrices are not of equal dimension.
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent$BimatrixTuple", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      NullTermination nullTermination0 = new NullTermination();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      NullJointRewardFunction nullJointRewardFunction0 = new NullJointRewardFunction();
      World world0 = new World(oOSGDomain0, nullJointRewardFunction0, nullTermination0, blockDudeAgent0);
      equilibriumPlayingSGAgent0.gameStarting(world0, 0);
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.opponentNum();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EquilibriumPlayingAgent is only defined for two player games and there are 0 players in the world.
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1222.70218927535;
      int int0 = equilibriumPlayingSGAgent0.sampleStrategy(doubleArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      NullJointRewardFunction nullJointRewardFunction0 = new NullJointRewardFunction();
      equilibriumPlayingSGAgent0.setInternalRewardFunction(nullJointRewardFunction0);
      SGDomain sGDomain0 = new SGDomain();
      NullTermination nullTermination0 = new NullTermination();
      BlockDudeCell blockDudeCell0 = BlockDudeCell.exit((-5), (-5));
      World world0 = new World(sGDomain0, nullJointRewardFunction0, nullTermination0, blockDudeCell0);
      equilibriumPlayingSGAgent0.gameStarting(world0, 2147453156);
      Vector<Action> vector0 = new Vector<Action>();
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.constructBimatrix(blockDudeCell0, vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EquilibriumPlayingAgent is only defined for two player games and there are 0 players in the world.
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullJointRewardFunction nullJointRewardFunction0 = new NullJointRewardFunction();
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      NullTermination nullTermination0 = new NullTermination();
      World world0 = new World(oOSGDomain0, nullJointRewardFunction0, nullTermination0, tabularBeliefState0);
      equilibriumPlayingSGAgent0.gameStarting(world0, 2096);
      LinkedList<Action> linkedList0 = new LinkedList<Action>();
      // Undeclared exception!
      try { 
        equilibriumPlayingSGAgent0.constructBimatrix(tabularBeliefState0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EquilibriumPlayingAgent is only defined for two player games and there are 0 players in the world.
         //
         verifyException("burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.EquilibriumPlayingSGAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      equilibriumPlayingSGAgent0.gameTerminated();
      assertNull(equilibriumPlayingSGAgent0.agentName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EquilibriumPlayingSGAgent equilibriumPlayingSGAgent0 = new EquilibriumPlayingSGAgent();
      NullState nullState0 = NullState.instance;
      LinkedList<Action> linkedList0 = new LinkedList<Action>();
      JointAction jointAction0 = new JointAction(linkedList0);
      double[] doubleArray0 = new double[7];
      equilibriumPlayingSGAgent0.observeOutcome(nullState0, jointAction0, doubleArray0, nullState0, false);
      assertEquals(7, doubleArray0.length);
  }
}
