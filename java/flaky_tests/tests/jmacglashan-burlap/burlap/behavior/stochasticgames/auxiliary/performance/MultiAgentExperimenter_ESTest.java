/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:54:45 GMT 2022
 */

package burlap.behavior.stochasticgames.auxiliary.performance;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.auxiliary.performance.PerformanceMetric;
import burlap.behavior.singleagent.auxiliary.performance.TrialMode;
import burlap.behavior.stochasticgames.auxiliary.performance.AgentFactoryAndType;
import burlap.behavior.stochasticgames.auxiliary.performance.MultiAgentExperimenter;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.domain.singleagent.blockdude.state.BlockDudeMap;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.domain.singleagent.mountaincar.MCState;
import burlap.domain.singleagent.mountaincar.MountainCar;
import burlap.mdp.auxiliary.StateGenerator;
import burlap.mdp.auxiliary.StateMapping;
import burlap.mdp.auxiliary.common.ConstantStateGenerator;
import burlap.mdp.auxiliary.common.IdentityStateMapping;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.auxiliary.common.SinglePFTF;
import burlap.mdp.core.TerminalFunction;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.state.NullState;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.mdp.stochasticgames.SGDomain;
import burlap.mdp.stochasticgames.common.NullJointRewardFunction;
import burlap.mdp.stochasticgames.model.JointRewardFunction;
import burlap.mdp.stochasticgames.oo.OOSGDomain;
import burlap.mdp.stochasticgames.tournament.common.ConstantWorldGenerator;
import burlap.mdp.stochasticgames.world.World;
import burlap.mdp.stochasticgames.world.WorldGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiAgentExperimenter_ESTest extends MultiAgentExperimenter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[4];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, nullTermination0, 661, 2233, agentFactoryAndTypeArray0);
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      BlockDudeMap blockDudeMap0 = new BlockDudeMap();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      BlockDudeCell[] blockDudeCellArray0 = new BlockDudeCell[8];
      BlockDudeState blockDudeState0 = new BlockDudeState(blockDudeAgent0, blockDudeMap0, blockDudeCell0, blockDudeCellArray0);
      ConstantStateGenerator constantStateGenerator0 = new ConstantStateGenerator(blockDudeState0);
      World world0 = new World(oOSGDomain0, (JointRewardFunction) null, nullTermination0, constantStateGenerator0);
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.runStepwiseTrial(world0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.stochasticgames.world.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[1];
      NullState nullState0 = NullState.instance;
      SGDomain sGDomain0 = new SGDomain();
      World world0 = new World(sGDomain0, (JointRewardFunction) null, (TerminalFunction) null, nullState0);
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 0, 0, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.runStepwiseTrial(world0);
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[1];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, (-212), (-212), agentFactoryAndTypeArray0);
      multiAgentExperimenter0.runEpisodewiseTrial((World) null);
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[1];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 1, (-229), agentFactoryAndTypeArray0);
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.startExperiment();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jfree/data/xy/XYDataset
         //
         verifyException("burlap.behavior.stochasticgames.auxiliary.performance.MultiAgentExperimenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[4];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, (-3422), (-3422), agentFactoryAndTypeArray0);
      multiAgentExperimenter0.toggleTrialLengthInterpretation(false);
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[3];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2277, 2277, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.toggleVisualPlots(true);
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[3];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2241, 2241, agentFactoryAndTypeArray0);
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      NullJointRewardFunction nullJointRewardFunction0 = new NullJointRewardFunction();
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null, false);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ConstantStateGenerator constantStateGenerator0 = new ConstantStateGenerator(tabularBeliefState0);
      IdentityStateMapping identityStateMapping0 = new IdentityStateMapping();
      World world0 = new World(oOSGDomain0, nullJointRewardFunction0, singlePFTF0, constantStateGenerator0, identityStateMapping0);
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.runEpisodewiseTrial(world0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1760a2dc)
         //
         verifyException("burlap.mdp.auxiliary.common.SinglePFTF", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiAgentExperimenter multiAgentExperimenter0 = null;
      try {
        multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 10, 10, (AgentFactoryAndType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.auxiliary.performance.MultiAgentExperimenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[4];
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null);
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, singlePFTF0, 2241, 2241, agentFactoryAndTypeArray0);
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      World world0 = new World(oOSGDomain0, (JointRewardFunction) null, singlePFTF0, blockDudeAgent0);
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.runStepwiseTrial(world0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.domain.singleagent.blockdude.state.BlockDudeAgent cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.domain.singleagent.blockdude.state.BlockDudeAgent and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1760a2dc)
         //
         verifyException("burlap.mdp.auxiliary.common.SinglePFTF", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SGDomain sGDomain0 = new SGDomain();
      NullTermination nullTermination0 = new NullTermination();
      IdentityStateMapping identityStateMapping0 = new IdentityStateMapping();
      ConstantWorldGenerator constantWorldGenerator0 = new ConstantWorldGenerator(sGDomain0, (JointRewardFunction) null, nullTermination0, (StateGenerator) null, identityStateMapping0);
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[9];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter(constantWorldGenerator0, nullTermination0, 2909, (-3987), agentFactoryAndTypeArray0);
      NullState nullState0 = NullState.instance;
      World world0 = new World(sGDomain0, (JointRewardFunction) null, nullTermination0, nullState0);
      multiAgentExperimenter0.runStepwiseTrial(world0);
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[3];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2962, 896, agentFactoryAndTypeArray0);
      SGDomain sGDomain0 = new SGDomain();
      MountainCar.MCPhysicsParams mountainCar_MCPhysicsParams0 = new MountainCar.MCPhysicsParams();
      MCState mCState0 = mountainCar_MCPhysicsParams0.valleyState();
      World world0 = new World(sGDomain0, (JointRewardFunction) null, (TerminalFunction) null, mCState0);
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.runEpisodewiseTrial(world0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[3];
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null, true);
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, singlePFTF0, (-2546), 0, agentFactoryAndTypeArray0);
      SGDomain sGDomain0 = new SGDomain();
      MountainCar.MCPhysicsParams mountainCar_MCPhysicsParams0 = new MountainCar.MCPhysicsParams();
      MCState mCState0 = mountainCar_MCPhysicsParams0.valleyState();
      World world0 = new World(sGDomain0, (JointRewardFunction) null, singlePFTF0, mCState0);
      multiAgentExperimenter0.runEpisodewiseTrial(world0);
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[1];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2216, 2216, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.writeEpisodeDataToCSV("");
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[3];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2216, 2216, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.completedExperiment = true;
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.writeEpisodeDataToCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.auxiliary.performance.MultiAgentExperimenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SGDomain sGDomain0 = new SGDomain();
      NullTermination nullTermination0 = new NullTermination();
      IdentityStateMapping identityStateMapping0 = new IdentityStateMapping();
      ConstantWorldGenerator constantWorldGenerator0 = new ConstantWorldGenerator(sGDomain0, (JointRewardFunction) null, nullTermination0, (StateGenerator) null, identityStateMapping0);
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[9];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter(constantWorldGenerator0, nullTermination0, 2909, (-3987), agentFactoryAndTypeArray0);
      multiAgentExperimenter0.writeStepDataToCSV("CuoV'lTI9JZ");
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[1];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2216, 2216, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.completedExperiment = true;
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.writeStepDataToCSV("T+/(0 -ma{eJ_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.auxiliary.performance.MultiAgentExperimenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[3];
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null, true);
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, singlePFTF0, (-2546), 0, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.writeStepAndEpisodeDataToCSV("/");
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[3];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2216, 2216, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.completedExperiment = true;
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.writeStepAndEpisodeDataToCSV("agent");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.auxiliary.performance.MultiAgentExperimenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[1];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2216, 2216, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.completedExperiment = true;
      multiAgentExperimenter0.startExperiment();
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SGDomain sGDomain0 = new SGDomain();
      NullTermination nullTermination0 = new NullTermination();
      IdentityStateMapping identityStateMapping0 = new IdentityStateMapping();
      ConstantWorldGenerator constantWorldGenerator0 = new ConstantWorldGenerator(sGDomain0, (JointRewardFunction) null, nullTermination0, (StateGenerator) null, identityStateMapping0);
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[9];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter(constantWorldGenerator0, nullTermination0, (-358), (-358), agentFactoryAndTypeArray0);
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.startExperiment();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jfree/data/xy/XYDataset
         //
         verifyException("burlap.behavior.stochasticgames.auxiliary.performance.MultiAgentExperimenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SGDomain sGDomain0 = new SGDomain();
      NullTermination nullTermination0 = new NullTermination();
      IdentityStateMapping identityStateMapping0 = new IdentityStateMapping();
      ConstantWorldGenerator constantWorldGenerator0 = new ConstantWorldGenerator(sGDomain0, (JointRewardFunction) null, nullTermination0, (StateGenerator) null, identityStateMapping0);
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[9];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter(constantWorldGenerator0, nullTermination0, (-358), (-358), agentFactoryAndTypeArray0);
      multiAgentExperimenter0.setPlotCISignificance((-358));
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[1];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2216, 2216, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.setPlotRefreshDelay(2986);
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[0];
      MultiAgentExperimenter multiAgentExperimenter0 = null;
      try {
        multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 2, 2, agentFactoryAndTypeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Zero agent factories provided. At least one must be given for an experiment
         //
         verifyException("burlap.behavior.stochasticgames.auxiliary.performance.MultiAgentExperimenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[7];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter((WorldGenerator) null, (TerminalFunction) null, 41, 7369430, agentFactoryAndTypeArray0);
      TrialMode trialMode0 = TrialMode.TRIAL_AVERAGES_ONLY;
      PerformanceMetric[] performanceMetricArray0 = new PerformanceMetric[5];
      // Undeclared exception!
      try { 
        multiAgentExperimenter0.setUpPlottingConfiguration(500, 1261, 500, 41, trialMode0, performanceMetricArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jfree/data/xy/XYDataset
         //
         verifyException("burlap.behavior.stochasticgames.auxiliary.performance.MultiAgentExperimenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[4];
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent(63624014, (-279), 63624014, false);
      ConstantStateGenerator constantStateGenerator0 = new ConstantStateGenerator(blockDudeAgent0);
      ConstantWorldGenerator constantWorldGenerator0 = new ConstantWorldGenerator(oOSGDomain0, (JointRewardFunction) null, (TerminalFunction) null, constantStateGenerator0, (StateMapping) null);
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter(constantWorldGenerator0, (TerminalFunction) null, 3, (-3422), agentFactoryAndTypeArray0);
      multiAgentExperimenter0.toggleVisualPlots(false);
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SGDomain sGDomain0 = new SGDomain();
      NullTermination nullTermination0 = new NullTermination();
      IdentityStateMapping identityStateMapping0 = new IdentityStateMapping();
      ConstantWorldGenerator constantWorldGenerator0 = new ConstantWorldGenerator(sGDomain0, (JointRewardFunction) null, nullTermination0, (StateGenerator) null, identityStateMapping0);
      AgentFactoryAndType[] agentFactoryAndTypeArray0 = new AgentFactoryAndType[3];
      MultiAgentExperimenter multiAgentExperimenter0 = new MultiAgentExperimenter(constantWorldGenerator0, nullTermination0, 1245, 1245, agentFactoryAndTypeArray0);
      multiAgentExperimenter0.toggleTrialLengthInterpretation(true);
      assertEquals(63624014, multiAgentExperimenter0.debugCode);
  }
}
