/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:13:05 GMT 2022
 */

package burlap.behavior.stochasticgames.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeneralBimatrixSolverTools_ESTest extends GeneralBimatrixSolverTools_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = (-1992.320566841);
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray2 = GeneralBimatrixSolverTools.getPositiveMatrix(doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][4];
      double[][] doubleArray2 = GeneralBimatrixSolverTools.transposeMatrix(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = GeneralBimatrixSolverTools.expectedPayoffs(doubleArray1, doubleArray2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.constantDoubleArray((-888.0439327577295), 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[][] doubleArray2 = GeneralBimatrixSolverTools.transposeMatrix(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = GeneralBimatrixSolverTools.marginalizeColPlayerStrategy(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      double[] doubleArray1 = GeneralBimatrixSolverTools.marginalizeRowPlayerStrategy(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = GeneralBimatrixSolverTools.zero1Array(0, 0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = GeneralBimatrixSolverTools.getNegatedArray(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      double[][] doubleArray4 = GeneralBimatrixSolverTools.jointActionProbabilities(doubleArray2, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray4);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-200.22021937568198);
      double double0 = GeneralBimatrixSolverTools.dot(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-200.22021937568198), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(40088.13624684622, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-200.22021937568198);
      double[] doubleArray1 = GeneralBimatrixSolverTools.getNegatedArray(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-200.22021937568198), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {200.22021937568198, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = GeneralBimatrixSolverTools.dot(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-200.22021937568198), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {200.22021937568198, -0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals((-40088.13624684622), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.zero1Array(5109, 5109);
      assertNotNull(doubleArray0);
      assertEquals(5109, doubleArray0.length);
      
      // Undeclared exception!
      GeneralBimatrixSolverTools.zero1Array(5109, 5109);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.zero1Array((-1994), (-1994));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1994
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.constantDoubleArray(6990, 6990);
      assertNotNull(doubleArray0);
      assertEquals(6990, doubleArray0.length);
      
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
      GeneralBimatrixSolverTools.transposeMatrix(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.transposeMatrix((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.transposeMatrix(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.constantDoubleArray(6990, 6990);
      assertNotNull(doubleArray0);
      assertEquals(6990, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
      GeneralBimatrixSolverTools.marginalizeRowPlayerStrategy(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.marginalizeRowPlayerStrategy((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.constantDoubleArray(6963, 6963);
      assertNotNull(doubleArray0);
      assertEquals(6963, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      // Undeclared exception!
      GeneralBimatrixSolverTools.marginalizeColPlayerStrategy(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.marginalizeColPlayerStrategy((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.marginalizeColPlayerStrategy(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.zero1Array(2745, 2745);
      assertNotNull(doubleArray0);
      assertEquals(2745, doubleArray0.length);
      
      // Undeclared exception!
      GeneralBimatrixSolverTools.jointActionProbabilities(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.jointActionProbabilities((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.constantDoubleArray(6990, 6990);
      assertNotNull(doubleArray0);
      assertEquals(6990, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
      GeneralBimatrixSolverTools.getPositiveMatrix(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.getPositiveMatrix((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.getPositiveMatrix(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.zero1Array(905, 4359);
      assertNotNull(doubleArray0);
      assertEquals(4359, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      // Undeclared exception!
      GeneralBimatrixSolverTools.getNegatedMatrix(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.getNegatedMatrix((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.getNegatedMatrix(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.getNegatedArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.zero1Array(2170, 4791);
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      // Undeclared exception!
      GeneralBimatrixSolverTools.expectedPayoffs(doubleArray1, doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.expectedPayoffs((double[][]) null, (double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[][] doubleArray1 = GeneralBimatrixSolverTools.transposeMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.expectedPayoffs(doubleArray0, doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = GeneralBimatrixSolverTools.constantDoubleArray(264, 264);
      double[][] doubleArray1 = new double[0][8];
      // Undeclared exception!
      GeneralBimatrixSolverTools.expectedPayoffs(doubleArray1, doubleArray1, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[][] doubleArray0 = new double[16][1];
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.expectedPayoffs(doubleArray0, doubleArray0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.expectedPayoffs(doubleArray0, doubleArray0, doubleArray0[0], doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.dot((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.dot(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GeneralBimatrixSolverTools.constantDoubleArray(6990, 6990);
      // Undeclared exception!
      GeneralBimatrixSolverTools.constantDoubleArray(6990, 6990);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralBimatrixSolverTools.constantDoubleArray((-1826), (-1826));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1826
         //
         verifyException("burlap.behavior.stochasticgames.solvers.GeneralBimatrixSolverTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = GeneralBimatrixSolverTools.jointActionProbabilities(doubleArray0, doubleArray0);
      double[] doubleArray2 = GeneralBimatrixSolverTools.expectedPayoffs(doubleArray1, doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = GeneralBimatrixSolverTools.dot(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2357;
      doubleArray0[1] = (double) 2357;
      double[][] doubleArray1 = GeneralBimatrixSolverTools.jointActionProbabilities(doubleArray0, doubleArray0);
      double[][] doubleArray2 = GeneralBimatrixSolverTools.getPositiveMatrix(doubleArray1);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = GeneralBimatrixSolverTools.jointActionProbabilities(doubleArray0, doubleArray0);
      double[][] doubleArray2 = GeneralBimatrixSolverTools.getPositiveMatrix(doubleArray1);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = GeneralBimatrixSolverTools.jointActionProbabilities(doubleArray0, doubleArray0);
      double[][] doubleArray2 = GeneralBimatrixSolverTools.getNegatedMatrix(doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = GeneralBimatrixSolverTools.jointActionProbabilities(doubleArray0, doubleArray0);
      double[] doubleArray2 = GeneralBimatrixSolverTools.marginalizeColPlayerStrategy(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = GeneralBimatrixSolverTools.jointActionProbabilities(doubleArray0, doubleArray0);
      double[] doubleArray2 = GeneralBimatrixSolverTools.marginalizeRowPlayerStrategy(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
  }
}
