/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:12:54 GMT 2022
 */

package burlap.behavior.policy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.policy.GreedyDeterministicQPolicy;
import burlap.behavior.policy.GreedyQPolicy;
import burlap.behavior.policy.support.ActionProb;
import burlap.behavior.singleagent.MDPSolverInterface;
import burlap.behavior.singleagent.auxiliary.StateEnumerator;
import burlap.behavior.singleagent.learnfromdemo.RewardValueProjection;
import burlap.behavior.singleagent.learning.tdmethods.QLearning;
import burlap.behavior.singleagent.learning.tdmethods.SarsaLam;
import burlap.behavior.singleagent.planning.stochastic.DynamicProgramming;
import burlap.behavior.valuefunction.QProvider;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.mdp.auxiliary.common.GoalConditionTF;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.auxiliary.stateconditiontest.TFGoalCondition;
import burlap.mdp.core.Domain;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.oo.state.generic.GenericOOState;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.GoalBasedRF;
import burlap.mdp.singleagent.common.NullRewardFunction;
import burlap.mdp.singleagent.common.SingleGoalPFRF;
import burlap.mdp.singleagent.common.UniformCostRF;
import burlap.mdp.singleagent.model.RewardFunction;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.mdp.stochasticgames.JointAction;
import burlap.statehashing.ReflectiveHashableStateFactory;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.management.RuntimeErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GreedyQPolicy_ESTest extends GreedyQPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(tFGoalCondition0);
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.STATEACTION;
      PODomain pODomain0 = new PODomain();
      SimpleAction simpleAction0 = new SimpleAction();
      UniversalActionType universalActionType0 = new UniversalActionType("", simpleAction0);
      SADomain sADomain0 = pODomain0.addActionType(universalActionType0);
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(goalBasedRF0, rewardValueProjection_RewardProjectionType0, sADomain0);
      greedyQPolicy0.qplanner = (QProvider) rewardValueProjection0;
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      double double0 = greedyQPolicy0.actionProb(blockDudeAgent0, simpleAction0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      Action action0 = greedyQPolicy0.action(blockDudeAgent0);
      assertNull(action0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      GreedyDeterministicQPolicy greedyDeterministicQPolicy0 = new GreedyDeterministicQPolicy();
      SarsaLam sarsaLam0 = new SarsaLam(oOSADomain0, (-4368.2210295542), reflectiveHashableStateFactory0, (-4368.2210295542), (-4368.2210295542), greedyDeterministicQPolicy0, 1, (-4368.2210295542));
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(sarsaLam0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        greedyQPolicy0.policyDistribution(tabularBeliefState0);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.tdmethods.QLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(tFGoalCondition0);
      tFGoalCondition0.setTf(goalConditionTF0);
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(tFGoalCondition0, 0.0);
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(goalBasedRF0);
      greedyQPolicy0.qplanner = (QProvider) rewardValueProjection0;
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      // Undeclared exception!
      try { 
        greedyQPolicy0.policyDistribution(blockDudeAgent0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SarsaLam sarsaLam0 = new SarsaLam((SADomain) null, 0, reflectiveHashableStateFactory0, 0, 0, 0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(sarsaLam0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.policyDistribution(blockDudeAgent0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      // Undeclared exception!
      try { 
        greedyQPolicy0.policyDistribution(blockDudeAgent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.policy.GreedyQPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.DESTINATIONSTATE;
      OOSADomain oOSADomain0 = new OOSADomain();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection((RewardFunction) null, rewardValueProjection_RewardProjectionType0, oOSADomain0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.policyDistribution(blockDudeAgent0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(singleGoalPFRF0);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.policyDistribution(blockDudeAgent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.domain.singleagent.blockdude.state.BlockDudeAgent cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.domain.singleagent.blockdude.state.BlockDudeAgent and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12948f76)
         //
         verifyException("burlap.mdp.singleagent.common.SingleGoalPFRF", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullRewardFunction nullRewardFunction0 = new NullRewardFunction();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.STATEACTION;
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(nullRewardFunction0, rewardValueProjection_RewardProjectionType0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      BlockDudeState blockDudeState0 = new BlockDudeState();
      ArrayList<Action> arrayList0 = new ArrayList<Action>();
      JointAction jointAction0 = new JointAction(arrayList0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.actionProb(blockDudeState0, jointAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // RewardValueProjection cannot generate all state-action Q-values because it was notprovided the Domain to enumerate the actions. Use the RewardValueProjection(RewardFunction, RewardProjectionType, Domain) constructor to specify it.
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.RewardValueProjection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.SOURCESTATE;
      PODomain pODomain0 = new PODomain();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0, rewardValueProjection_RewardProjectionType0, pODomain0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      JointAction jointAction0 = new JointAction();
      // Undeclared exception!
      try { 
        greedyQPolicy0.actionProb((State) null, jointAction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(singleGoalPFRF0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      SimpleAction simpleAction0 = new SimpleAction("q>bJcU7");
      // Undeclared exception!
      try { 
        greedyQPolicy0.actionProb(tabularBeliefState0, simpleAction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12948f76)
         //
         verifyException("burlap.mdp.singleagent.common.SingleGoalPFRF", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      QLearning qLearning0 = new QLearning(oOSADomain0, (-220.251368408), reflectiveHashableStateFactory0, 0, 1.5707963267948966);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(qLearning0);
      StateEnumerator stateEnumerator0 = new StateEnumerator((Domain) null, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState((PODomain) null, stateEnumerator0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.action(tabularBeliefState0);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.tdmethods.QLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(tFGoalCondition0);
      tFGoalCondition0.setTf(goalConditionTF0);
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(tFGoalCondition0, 0.15707963267948966);
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(goalBasedRF0);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.action(blockDudeAgent0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.STATEACTION;
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0, rewardValueProjection_RewardProjectionType0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.action(blockDudeAgent0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // RewardValueProjection cannot generate all state-action Q-values because it was notprovided the Domain to enumerate the actions. Use the RewardValueProjection(RewardFunction, RewardProjectionType, Domain) constructor to specify it.
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.RewardValueProjection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      GenericOOState genericOOState0 = new GenericOOState();
      // Undeclared exception!
      try { 
        greedyQPolicy0.action(genericOOState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.policy.GreedyQPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.SOURCESTATE;
      PODomain pODomain0 = new PODomain();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0, rewardValueProjection_RewardProjectionType0, pODomain0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.action(blockDudeAgent0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(singleGoalPFRF0);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.action(blockDudeAgent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.domain.singleagent.blockdude.state.BlockDudeAgent cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.domain.singleagent.blockdude.state.BlockDudeAgent and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12948f76)
         //
         verifyException("burlap.mdp.singleagent.common.SingleGoalPFRF", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      List<ActionProb> list0 = greedyQPolicy0.policyDistribution(blockDudeAgent0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(tFGoalCondition0);
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.STATEACTION;
      PODomain pODomain0 = new PODomain();
      SimpleAction simpleAction0 = new SimpleAction();
      UniversalActionType universalActionType0 = new UniversalActionType("", simpleAction0);
      SADomain sADomain0 = pODomain0.addActionType(universalActionType0);
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(goalBasedRF0, rewardValueProjection_RewardProjectionType0, sADomain0);
      greedyQPolicy0.qplanner = (QProvider) rewardValueProjection0;
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      LinkedList<Action> linkedList0 = new LinkedList<Action>();
      JointAction jointAction0 = new JointAction(linkedList0);
      double double0 = greedyQPolicy0.actionProb(blockDudeAgent0, jointAction0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(tFGoalCondition0);
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.STATEACTION;
      PODomain pODomain0 = new PODomain();
      SimpleAction simpleAction0 = new SimpleAction();
      UniversalActionType universalActionType0 = new UniversalActionType("", simpleAction0);
      SADomain sADomain0 = pODomain0.addActionType(universalActionType0);
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(goalBasedRF0, rewardValueProjection_RewardProjectionType0, sADomain0);
      greedyQPolicy0.qplanner = (QProvider) rewardValueProjection0;
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      SimpleAction simpleAction1 = (SimpleAction)greedyQPolicy0.action(blockDudeAgent0);
      assertNull(simpleAction1.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      // Undeclared exception!
      try { 
        greedyQPolicy0.setSolver((MDPSolverInterface) null);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.policy.GreedyQPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      DynamicProgramming dynamicProgramming0 = new DynamicProgramming();
      greedyQPolicy0.setSolver(dynamicProgramming0);
      assertEquals(0, dynamicProgramming0.getDebugCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      boolean boolean0 = greedyQPolicy0.definedFor(blockDudeAgent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      LinkedList<Action> linkedList0 = new LinkedList<Action>();
      JointAction jointAction0 = new JointAction(linkedList0);
      // Undeclared exception!
      try { 
        greedyQPolicy0.actionProb(blockDudeAgent0, jointAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.policy.GreedyQPolicy", e);
      }
  }
}
