/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:50:26 GMT 2022
 */

package burlap.behavior.singleagent.auxiliary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.policy.BoltzmannQPolicy;
import burlap.behavior.policy.CachedPolicy;
import burlap.behavior.policy.EnumerablePolicy;
import burlap.behavior.policy.EpsilonGreedy;
import burlap.behavior.policy.GreedyQPolicy;
import burlap.behavior.policy.RandomPolicy;
import burlap.behavior.singleagent.auxiliary.StateReachability;
import burlap.behavior.singleagent.learnfromdemo.RewardValueProjection;
import burlap.behavior.singleagent.learning.tdmethods.QLearning;
import burlap.domain.singleagent.blocksworld.BWModel;
import burlap.domain.singleagent.blocksworld.BlocksWorldBlock;
import burlap.domain.singleagent.frostbite.FrostbiteModel;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.SingleGoalPFRF;
import burlap.mdp.singleagent.common.UniformCostRF;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.statehashing.HashableState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import java.util.List;
import java.util.Set;
import javax.management.RuntimeErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StateReachability_ESTest extends StateReachability_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        StateReachability.getReachableStates((State) null, (SADomain) null, (HashableStateFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.auxiliary.StateReachability", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      UniversalActionType universalActionType0 = new UniversalActionType("Planning requires a model, but none is provided.");
      pODomain0.addActionType(universalActionType0);
      FactoredModel factoredModel0 = new FactoredModel();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel(961);
      factoredModel0.setStateModel(frostbiteModel0);
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      // Undeclared exception!
      try { 
        StateReachability.getReachableStates(tabularBeliefState0, pODomain0, reflectiveHashableStateFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.domain.singleagent.frostbite.state.FrostbiteState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.domain.singleagent.frostbite.state.FrostbiteState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @67b0e534)
         //
         verifyException("burlap.domain.singleagent.frostbite.FrostbiteModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        StateReachability.getReachableHashedStates(tabularBeliefState0, (SADomain) null, reflectiveHashableStateFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.auxiliary.StateReachability", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      BWModel bWModel0 = new BWModel();
      factoredModel0.setStateModel(bWModel0);
      UniversalActionType universalActionType0 = new UniversalActionType("");
      SADomain sADomain0 = pODomain0.addActionType(universalActionType0);
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      // Undeclared exception!
      try { 
        StateReachability.getReachableHashedStates(tabularBeliefState0, sADomain0, reflectiveHashableStateFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.domain.singleagent.blocksworld.BlocksWorldState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.domain.singleagent.blocksworld.BlocksWorldState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @67b0e534)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BWModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      RandomPolicy randomPolicy0 = new RandomPolicy(pODomain0);
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableStates(pODomain0, randomPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.policy.RandomPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      QLearning qLearning0 = new QLearning(pODomain0, 13.0, reflectiveHashableStateFactory0, 13.0, 13.0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(qLearning0);
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableStates(pODomain0, greedyQPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.tdmethods.QLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableStates((SADomain) null, (EnumerablePolicy) null, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.auxiliary.StateReachability", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      UniversalActionType universalActionType0 = new UniversalActionType("State reachablity requires a domain with a FullModel, but one is not provided");
      pODomain0.addActionType(universalActionType0);
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null, (-3558.1182), (-3558.1182));
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.ONESTEP;
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(singleGoalPFRF0, rewardValueProjection_RewardProjectionType0, pODomain0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(rewardValueProjection0, (-3558.1182));
      CachedPolicy cachedPolicy0 = new CachedPolicy(reflectiveHashableStateFactory0, boltzmannQPolicy0, 853);
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableStates(pODomain0, cachedPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IISimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      BWModel bWModel0 = new BWModel();
      factoredModel0.setStateModel(bWModel0);
      pODomain0.setModel(factoredModel0);
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(rewardValueProjection0, 1.0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableStates(pODomain0, boltzmannQPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.domain.singleagent.blocksworld.BlocksWorldState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.domain.singleagent.blocksworld.BlocksWorldState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @67b0e534)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BWModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      QLearning qLearning0 = new QLearning(pODomain0, 3456.683, reflectiveHashableStateFactory0, (-484.0), (-484.0));
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(qLearning0);
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableHashedStates(pODomain0, greedyQPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.tdmethods.QLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EpsilonGreedy epsilonGreedy0 = new EpsilonGreedy(1000.0);
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableHashedStates((SADomain) null, epsilonGreedy0, blocksWorldBlock0, reflectiveHashableStateFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.auxiliary.StateReachability", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(singleGoalPFRF0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableHashedStates(pODomain0, greedyQPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @67b0e534)
         //
         verifyException("burlap.mdp.singleagent.common.SingleGoalPFRF", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FactoredModel factoredModel0 = new FactoredModel();
      sADomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.SOURCESTATE;
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0, rewardValueProjection_RewardProjectionType0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(rewardValueProjection0, 105.491385046);
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableHashedStates(sADomain0, boltzmannQPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factored Model cannot enumerate transition distribution, because the state model does not implement FullStateModel
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.SOURCESTATE;
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0, rewardValueProjection_RewardProjectionType0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(rewardValueProjection0, 0.0);
      Set<HashableState> set0 = StateReachability.getPolicyReachableHashedStates(pODomain0, boltzmannQPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      RandomPolicy randomPolicy0 = new RandomPolicy(pODomain0);
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableHashedStates(pODomain0, randomPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.policy.RandomPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      UniversalActionType universalActionType0 = new UniversalActionType("");
      pODomain0.addActionType(universalActionType0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        StateReachability.getReachableHashedStates(tabularBeliefState0, pODomain0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factored Model cannot enumerate transition distribution, because the state model does not implement FullStateModel
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      Set<HashableState> set0 = StateReachability.getReachableHashedStates(tabularBeliefState0, pODomain0, reflectiveHashableStateFactory0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableStates(pODomain0, greedyQPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factored Model cannot enumerate transition distribution, because the state model does not implement FullStateModel
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        StateReachability.getPolicyReachableHashedStates(sADomain0, (EnumerablePolicy) null, tabularBeliefState0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // State reachablity requires a domain with a FullModel, but one is not provided
         //
         verifyException("burlap.behavior.singleagent.auxiliary.StateReachability", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(rewardValueProjection0, 0.0);
      List<State> list0 = StateReachability.getPolicyReachableStates(pODomain0, boltzmannQPolicy0, tabularBeliefState0, reflectiveHashableStateFactory0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      UniversalActionType universalActionType0 = new UniversalActionType("Planning requires a model, but none is provided.");
      pODomain0.addActionType(universalActionType0);
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      // Undeclared exception!
      try { 
        StateReachability.getReachableStates(tabularBeliefState0, pODomain0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factored Model cannot enumerate transition distribution, because the state model does not implement FullStateModel
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      // Undeclared exception!
      try { 
        StateReachability.getReachableHashedStates((State) null, pODomain0, reflectiveHashableStateFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // State reachablity requires a domain with a FullModel, but one is not provided
         //
         verifyException("burlap.behavior.singleagent.auxiliary.StateReachability", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      List<State> list0 = StateReachability.getReachableStates(tabularBeliefState0, pODomain0, reflectiveHashableStateFactory0);
      assertFalse(list0.isEmpty());
  }
}
