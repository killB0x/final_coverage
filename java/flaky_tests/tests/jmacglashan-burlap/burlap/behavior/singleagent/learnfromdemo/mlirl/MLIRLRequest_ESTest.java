/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:49:41 GMT 2022
 */

package burlap.behavior.singleagent.learnfromdemo.mlirl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures;
import burlap.behavior.functionapproximation.dense.DenseStateFeatures;
import burlap.behavior.functionapproximation.dense.NumericVariableFeatures;
import burlap.behavior.functionapproximation.dense.PFFeatures;
import burlap.behavior.singleagent.Episode;
import burlap.behavior.singleagent.auxiliary.StateEnumerator;
import burlap.behavior.singleagent.learnfromdemo.mlirl.MLIRLRequest;
import burlap.behavior.singleagent.learnfromdemo.mlirl.commonrfs.LinearStateDifferentiableRF;
import burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.DifferentiableSparseSampling;
import burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.DifferentiableVI;
import burlap.behavior.singleagent.learnfromdemo.mlirl.support.DifferentiableRF;
import burlap.behavior.singleagent.planning.Planner;
import burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyIteration;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.mdp.stochasticgames.oo.OOSGDomain;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MLIRLRequest_ESTest extends MLIRLRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PFFeatures pFFeatures0 = new PFFeatures(oOSADomain0);
      LinearStateDifferentiableRF linearStateDifferentiableRF0 = new LinearStateDifferentiableRF(pFFeatures0, 0);
      ArrayList<Episode> arrayList0 = new ArrayList<Episode>();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, arrayList0, linearStateDifferentiableRF0, reflectiveHashableStateFactory0);
      mLIRLRequest0.setRf((DifferentiableRF) null);
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      Stack<Episode> stack0 = new Stack<Episode>();
      PODomain pODomain0 = new PODomain();
      StateEnumerator stateEnumerator0 = new StateEnumerator(oOSADomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      Episode episode0 = new Episode(tabularBeliefState0);
      stack0.add(episode0);
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, stack0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      double[] doubleArray0 = new double[5];
      mLIRLRequest0.setEpisodeWeights(doubleArray0);
      boolean boolean0 = mLIRLRequest0.isValid();
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      ArrayList<Episode> arrayList0 = new ArrayList<Episode>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<String, DenseStateFeatures> hashMap0 = new HashMap<String, DenseStateFeatures>();
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures(linkedList0, hashMap0);
      LinearStateDifferentiableRF linearStateDifferentiableRF0 = new LinearStateDifferentiableRF(concatenatedObjectFeatures0, 0, true);
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, arrayList0, linearStateDifferentiableRF0, reflectiveHashableStateFactory0);
      DifferentiableRF differentiableRF0 = mLIRLRequest0.getRf();
      assertNotNull(differentiableRF0);
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      DeepOOState deepOOState0 = new DeepOOState();
      List<Object> list0 = deepOOState0.variableKeys();
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(list0);
      LinearStateDifferentiableRF linearStateDifferentiableRF0 = new LinearStateDifferentiableRF(numericVariableFeatures0, 1);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      DifferentiableSparseSampling differentiableSparseSampling0 = new DifferentiableSparseSampling(oOSADomain0, linearStateDifferentiableRF0, 1, reflectiveHashableStateFactory0, 1, 1, 11.886455239);
      Vector<Episode> vector0 = new Vector<Episode>();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, differentiableSparseSampling0, vector0, linearStateDifferentiableRF0);
      DifferentiableRF differentiableRF0 = mLIRLRequest0.getRf();
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
      assertNotNull(differentiableRF0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ArrayList<Episode> arrayList0 = new ArrayList<Episode>();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, arrayList0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
      
      mLIRLRequest0.boltzmannBeta = 0.0;
      double double0 = mLIRLRequest0.getBoltzmannBeta();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      MLIRLRequest mLIRLRequest0 = null;
      try {
        mLIRLRequest0 = new MLIRLRequest(oOSADomain0, (List<Episode>) null, (DifferentiableRF) null, reflectiveHashableStateFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      MLIRLRequest mLIRLRequest0 = null;
      try {
        mLIRLRequest0 = new MLIRLRequest(oOSADomain0, (Planner) null, (List<Episode>) null, (DifferentiableRF) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PODomain pODomain0 = new PODomain();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      Episode episode0 = new Episode(tabularBeliefState0);
      Stack<Episode> stack0 = new Stack<Episode>();
      stack0.add(episode0);
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, stack0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      double[] doubleArray0 = mLIRLRequest0.getEpisodeWeights();
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      Stack<Episode> stack0 = new Stack<Episode>();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, stack0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      double[] doubleArray0 = mLIRLRequest0.getEpisodeWeights();
      assertNotNull(doubleArray0);
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      Stack<Episode> stack0 = new Stack<Episode>();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, stack0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      double[] doubleArray0 = new double[5];
      mLIRLRequest0.setEpisodeWeights(doubleArray0);
      double[] doubleArray1 = mLIRLRequest0.getEpisodeWeights();
      assertEquals(5, doubleArray1.length);
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ArrayList<Episode> arrayList0 = new ArrayList<Episode>();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, arrayList0, (DifferentiableRF) null, (HashableStateFactory) null);
      // Undeclared exception!
      try { 
        mLIRLRequest0.setPlanner((Planner) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: MLIRLRequest requires the valueFunction to be an instance of QGradientPlanner
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.MLIRLRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ArrayList<Episode> arrayList0 = new ArrayList<Episode>();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, arrayList0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      DifferentiableVI differentiableVI0 = new DifferentiableVI(oOSADomain0, (DifferentiableRF) null, 1.5707963267948966, 380.0, reflectiveHashableStateFactory0, 1.5707963267948966, 8);
      mLIRLRequest0.setPlanner(differentiableVI0);
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PODomain pODomain0 = new PODomain();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      Episode episode0 = new Episode(tabularBeliefState0);
      Stack<Episode> stack0 = new Stack<Episode>();
      stack0.add(episode0);
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      List<PropositionalFunction> list0 = oOSGDomain0.propFunctions();
      PFFeatures pFFeatures0 = new PFFeatures(list0);
      LinearStateDifferentiableRF linearStateDifferentiableRF0 = new LinearStateDifferentiableRF(pFFeatures0, 2099, true);
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(pODomain0, stack0, linearStateDifferentiableRF0, reflectiveHashableStateFactory0);
      boolean boolean0 = mLIRLRequest0.isValid();
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PODomain pODomain0 = new PODomain();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      Episode episode0 = new Episode(tabularBeliefState0);
      Stack<Episode> stack0 = new Stack<Episode>();
      stack0.add(episode0);
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      List<PropositionalFunction> list0 = oOSGDomain0.propFunctions();
      PFFeatures pFFeatures0 = new PFFeatures(list0);
      LinearStateDifferentiableRF linearStateDifferentiableRF0 = new LinearStateDifferentiableRF(pFFeatures0, 2099, true);
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(pODomain0, stack0, linearStateDifferentiableRF0, reflectiveHashableStateFactory0);
      assertTrue(mLIRLRequest0.isValid());
      
      double[] doubleArray0 = new double[0];
      mLIRLRequest0.setEpisodeWeights(doubleArray0);
      boolean boolean0 = mLIRLRequest0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PODomain pODomain0 = new PODomain();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      Episode episode0 = new Episode(tabularBeliefState0);
      Stack<Episode> stack0 = new Stack<Episode>();
      stack0.add(episode0);
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, stack0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      double[] doubleArray0 = new double[1];
      mLIRLRequest0.setEpisodeWeights(doubleArray0);
      boolean boolean0 = mLIRLRequest0.isValid();
      assertFalse(boolean0);
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      Stack<Episode> stack0 = new Stack<Episode>();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, stack0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      boolean boolean0 = mLIRLRequest0.isValid();
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(oOSADomain0, (-0.2677010598293256), reflectiveHashableStateFactory0, (-0.2677010598293256), 2099, 2099);
      PODomain pODomain0 = new PODomain();
      Stack<Episode> stack0 = new Stack<Episode>();
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      List<PropositionalFunction> list0 = oOSGDomain0.propFunctions();
      PFFeatures pFFeatures0 = new PFFeatures(list0);
      LinearStateDifferentiableRF linearStateDifferentiableRF0 = new LinearStateDifferentiableRF(pFFeatures0, 2099, true);
      MLIRLRequest mLIRLRequest0 = null;
      try {
        mLIRLRequest0 = new MLIRLRequest(pODomain0, policyIteration0, stack0, linearStateDifferentiableRF0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: MLIRLRequest requires the valueFunction to be an instance of QGradientPlanner
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.MLIRLRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ArrayList<Episode> arrayList0 = new ArrayList<Episode>();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, (Planner) null, arrayList0, (DifferentiableRF) null);
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      Stack<Episode> stack0 = new Stack<Episode>();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, stack0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      mLIRLRequest0.setBoltzmannBeta((-4142.61));
      double double0 = mLIRLRequest0.getBoltzmannBeta();
      assertEquals((-4142.61), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      Stack<Episode> stack0 = new Stack<Episode>();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, stack0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      double double0 = mLIRLRequest0.getBoltzmannBeta();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ArrayList<Episode> arrayList0 = new ArrayList<Episode>();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      MLIRLRequest mLIRLRequest0 = new MLIRLRequest(oOSADomain0, arrayList0, (DifferentiableRF) null, reflectiveHashableStateFactory0);
      mLIRLRequest0.getRf();
      assertEquals(0.5, mLIRLRequest0.getBoltzmannBeta(), 0.01);
  }
}
