/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:47:14 GMT 2022
 */

package burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.functionapproximation.FunctionGradient;
import burlap.behavior.functionapproximation.ParametricFunction;
import burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures;
import burlap.behavior.functionapproximation.dense.DenseStateFeatures;
import burlap.behavior.functionapproximation.dense.NormalizedVariableFeatures;
import burlap.behavior.functionapproximation.dense.NumericVariableFeatures;
import burlap.behavior.functionapproximation.dense.PFFeatures;
import burlap.behavior.functionapproximation.dense.SparseToDenseFeatures;
import burlap.behavior.functionapproximation.sparse.tilecoding.TileCodingFeatures;
import burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.domain.singleagent.blockdude.state.BlockDudeMap;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.domain.singleagent.mountaincar.MCState;
import burlap.domain.singleagent.mountaincar.MountainCar;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.core.state.State;
import burlap.mdp.core.state.vardomain.VariableDomain;
import burlap.mdp.stochasticgames.JointAction;
import burlap.mdp.stochasticgames.oo.OOSGDomain;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinearDiffRFVInit_ESTest extends LinearDiffRFVInit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      DenseStateFeatures denseStateFeatures0 = normalizedVariableFeatures0.copy();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(denseStateFeatures0, normalizedVariableFeatures0, 241, 241);
      LinearDiffRFVInit linearDiffRFVInit1 = (LinearDiffRFVInit)linearDiffRFVInit0.copy();
      assertTrue(linearDiffRFVInit1.isRfFeaturesAreForNextState());
      assertEquals(241, linearDiffRFVInit1.getRfDim());
      assertEquals(482, linearDiffRFVInit1.numParameters());
      assertEquals(482, linearDiffRFVInit0.numParameters());
      assertEquals(241, linearDiffRFVInit1.getVinitDim());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 1483, 1646, false);
      int int0 = linearDiffRFVInit0.numParameters();
      assertEquals(1483, linearDiffRFVInit0.getRfDim());
      assertEquals(1646, linearDiffRFVInit0.getVinitDim());
      assertEquals(3129, int0);
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      Object object0 = new Object();
      VariableDomain variableDomain0 = new VariableDomain();
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(object0, variableDomain0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures1, normalizedVariableFeatures0, 1483, 1646, false);
      BlockDudeCell blockDudeCell0 = BlockDudeCell.block("agent (agent): {\njava.lang.String@0000000006: {java.lang.Integer@0000000007}\njava.lang.String@0000000008: {java.lang.Integer@0000000007}\njava.lang.String@0000000009: {java.lang.Integer@0000000007}\njava.lang.String@0000000010: {java.lang.Boolean@0000000011}\n}", 1462, 1184);
      double double0 = linearDiffRFVInit0.value(blockDudeCell0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3129, linearDiffRFVInit0.numParameters());
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(1483, linearDiffRFVInit0.getRfDim());
      assertEquals(1646, linearDiffRFVInit0.getVinitDim());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      Object object0 = new Object();
      VariableDomain variableDomain0 = new VariableDomain();
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(object0, variableDomain0);
      DeepOOState deepOOState0 = new DeepOOState();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures1, normalizedVariableFeatures1, 29, 29);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 29;
      linearDiffRFVInit0.parameters = doubleArray0;
      double double0 = linearDiffRFVInit0.reward(deepOOState0, (Action) null, deepOOState0);
      assertEquals(29, linearDiffRFVInit0.getRfDim());
      assertEquals(58, linearDiffRFVInit0.numParameters());
      assertEquals(0.0, double0, 0.01);
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(29, linearDiffRFVInit0.getVinitDim());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<PropositionalFunction> linkedList0 = new LinkedList<PropositionalFunction>();
      PFFeatures pFFeatures0 = new PFFeatures(linkedList0);
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(pFFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(sparseToDenseFeatures0, numericVariableFeatures0, 152, 0, false);
      DeepOOState deepOOState0 = new DeepOOState();
      SimpleAction simpleAction0 = new SimpleAction("");
      double double0 = linearDiffRFVInit0.reward(deepOOState0, simpleAction0, deepOOState0);
      assertEquals(152, linearDiffRFVInit0.numParameters());
      assertEquals(0, linearDiffRFVInit0.getVinitDim());
      assertEquals(152, linearDiffRFVInit0.getRfDim());
      assertEquals(0.0, double0, 0.01);
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<PropositionalFunction> linkedList0 = new LinkedList<PropositionalFunction>();
      PFFeatures pFFeatures0 = new PFFeatures(linkedList0);
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(numericVariableFeatures0, pFFeatures0, 2725, 2725);
      DeepOOState deepOOState0 = new DeepOOState();
      SimpleAction simpleAction0 = new SimpleAction("");
      BlockDudeCell blockDudeCell0 = BlockDudeCell.block("OvC'KAgT0i$a&OK", 0, 2725);
      double double0 = linearDiffRFVInit0.reward(deepOOState0, simpleAction0, blockDudeCell0);
      assertEquals(2725, linearDiffRFVInit0.getRfDim());
      assertEquals(2725, linearDiffRFVInit0.getVinitDim());
      assertEquals(0.0, double0, 0.01);
      assertEquals(5450, linearDiffRFVInit0.numParameters());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 15, 1485, false);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      BlockDudeAgent blockDudeAgent1 = blockDudeAgent0.copy();
      SimpleAction simpleAction0 = new SimpleAction("xPeS:);");
      linearDiffRFVInit0.gradient(blockDudeAgent0, simpleAction0, blockDudeAgent1);
      assertEquals(15, linearDiffRFVInit0.getRfDim());
      assertEquals(1500, linearDiffRFVInit0.numParameters());
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(1485, linearDiffRFVInit0.getVinitDim());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      List<PropositionalFunction> list0 = oOSGDomain0.propFunctions();
      PFFeatures pFFeatures0 = new PFFeatures(list0);
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(pFFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(pFFeatures0, sparseToDenseFeatures0, 152, 0, false);
      BlockDudeState blockDudeState0 = new BlockDudeState(303, 152, 31);
      JointAction jointAction0 = new JointAction();
      linearDiffRFVInit0.gradient(blockDudeState0, jointAction0, blockDudeState0);
      assertEquals(152, linearDiffRFVInit0.numParameters());
      assertEquals(0, linearDiffRFVInit0.getVinitDim());
      assertEquals(152, linearDiffRFVInit0.getRfDim());
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<PropositionalFunction> linkedList0 = new LinkedList<PropositionalFunction>();
      PFFeatures pFFeatures0 = new PFFeatures(linkedList0);
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(pFFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(sparseToDenseFeatures0, numericVariableFeatures0, 152, 0, true);
      BlockDudeState blockDudeState0 = new BlockDudeState(31, 31, 31);
      JointAction jointAction0 = new JointAction();
      linearDiffRFVInit0.gradient(blockDudeState0, jointAction0, blockDudeState0);
      assertEquals(152, linearDiffRFVInit0.getRfDim());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(0, linearDiffRFVInit0.getVinitDim());
      assertEquals(152, linearDiffRFVInit0.numParameters());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures((Map<Object, VariableDomain>) null);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 8, 8);
      linearDiffRFVInit0.setVinitDim(130);
      assertEquals(130, linearDiffRFVInit0.getVinitDim());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, normalizedVariableFeatures0, 8, (-1));
      linearDiffRFVInit0.setVinitDim((-1));
      assertEquals(8, linearDiffRFVInit0.getRfDim());
      assertEquals(7, linearDiffRFVInit0.numParameters());
      assertEquals((-1), linearDiffRFVInit0.getVinitDim());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 10, 10);
      linearDiffRFVInit0.setRfDim(1);
      assertEquals(1, linearDiffRFVInit0.getRfDim());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures((DenseStateFeatures) null);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit((DenseStateFeatures) null, sparseToDenseFeatures0, 0, 59, true);
      linearDiffRFVInit0.setRfFvGen(sparseToDenseFeatures0);
      assertEquals(59, linearDiffRFVInit0.getVinitDim());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(59, linearDiffRFVInit0.numParameters());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<PropositionalFunction> linkedList0 = new LinkedList<PropositionalFunction>();
      PFFeatures pFFeatures0 = new PFFeatures(linkedList0);
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(pFFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures1 = sparseToDenseFeatures0.copy();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(sparseToDenseFeatures1, sparseToDenseFeatures0, 59, 1100, true);
      linearDiffRFVInit0.setRfFvGen(sparseToDenseFeatures1);
      assertEquals(59, linearDiffRFVInit0.getRfDim());
      assertEquals(1100, linearDiffRFVInit0.getVinitDim());
      assertEquals(1159, linearDiffRFVInit0.numParameters());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, concatenatedObjectFeatures0, 1, 1);
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      
      linearDiffRFVInit0.setRfFeaturesAreForNextState(false);
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures(objectArray0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(numericVariableFeatures0, numericVariableFeatures0, 9, 0, false);
      linearDiffRFVInit0.setParameter(0, 9);
      assertEquals(0, linearDiffRFVInit0.getVinitDim());
      assertEquals(9, linearDiffRFVInit0.getRfDim());
      assertEquals(9, linearDiffRFVInit0.numParameters());
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(numericVariableFeatures0, numericVariableFeatures0, 3, (-1), false);
      MountainCar.MCPhysicsParams mountainCar_MCPhysicsParams0 = new MountainCar.MCPhysicsParams();
      MCState mCState0 = mountainCar_MCPhysicsParams0.valleyState();
      FunctionGradient functionGradient0 = linearDiffRFVInit0.valueGradient(mCState0);
      assertEquals(2, linearDiffRFVInit0.numParameters());
      assertEquals(1, functionGradient0.numNonZeroPDs());
      assertEquals((-1), linearDiffRFVInit0.getVinitDim());
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(3, linearDiffRFVInit0.getRfDim());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 0, 0, false);
      int int0 = linearDiffRFVInit0.numParameters();
      assertEquals(0, int0);
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 241, 241);
      boolean boolean0 = linearDiffRFVInit0.isRfFeaturesAreForNextState();
      assertEquals(241, linearDiffRFVInit0.getVinitDim());
      assertEquals(482, linearDiffRFVInit0.numParameters());
      assertEquals(241, linearDiffRFVInit0.getRfDim());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit((DenseStateFeatures) null, concatenatedObjectFeatures0, 8, 22, true);
      linearDiffRFVInit0.vinitFvGen = null;
      linearDiffRFVInit0.getVinitFvGen();
      assertEquals(22, linearDiffRFVInit0.getVinitDim());
      assertEquals(30, linearDiffRFVInit0.numParameters());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(8, linearDiffRFVInit0.getRfDim());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, concatenatedObjectFeatures0, 0, 0, false);
      int int0 = linearDiffRFVInit0.getVinitDim();
      assertEquals(0, linearDiffRFVInit0.numParameters());
      assertEquals(0, int0);
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures((Map<Object, VariableDomain>) null);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 8, 8);
      int int0 = linearDiffRFVInit0.getVinitDim();
      assertEquals(16, linearDiffRFVInit0.numParameters());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(8, linearDiffRFVInit0.getRfDim());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<PropositionalFunction> linkedList0 = new LinkedList<PropositionalFunction>();
      PFFeatures pFFeatures0 = new PFFeatures(linkedList0);
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(pFFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(sparseToDenseFeatures0, numericVariableFeatures0, 152, 0, true);
      linearDiffRFVInit0.getRfFvGen();
      assertEquals(152, linearDiffRFVInit0.getRfDim());
      assertEquals(0, linearDiffRFVInit0.getVinitDim());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(152, linearDiffRFVInit0.numParameters());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, concatenatedObjectFeatures0, 0, 0);
      int int0 = linearDiffRFVInit0.getRfDim();
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(0, linearDiffRFVInit0.numParameters());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 10, 10);
      int int0 = linearDiffRFVInit0.getRfDim();
      assertEquals(10, linearDiffRFVInit0.getVinitDim());
      assertEquals(20, linearDiffRFVInit0.numParameters());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 931, 40, false);
      linearDiffRFVInit0.getParameter(40);
      assertEquals(931, linearDiffRFVInit0.getRfDim());
      assertEquals(971, linearDiffRFVInit0.numParameters());
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(40, linearDiffRFVInit0.getVinitDim());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 1, 22, false);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1826;
      linearDiffRFVInit0.parameters = doubleArray0;
      double double0 = linearDiffRFVInit0.getParameter(1);
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(22, linearDiffRFVInit0.getVinitDim());
      assertEquals(1, linearDiffRFVInit0.getRfDim());
      assertEquals(1826.0, double0, 0.01);
      assertEquals(23, linearDiffRFVInit0.numParameters());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, concatenatedObjectFeatures0, 0, 0, true);
      ParametricFunction parametricFunction0 = linearDiffRFVInit0.copy();
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(0, parametricFunction0.numParameters());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, concatenatedObjectFeatures0, 0, 0);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.valueGradient(blockDudeAgent0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ConcatenatedObjectFeatureVectorGenerator is only defined for OOState instances.
         //
         verifyException("burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit((DenseStateFeatures) null, (DenseStateFeatures) null, 0, 0, false);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.valueGradient(blockDudeAgent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, numericVariableFeatures0, 0, 0, false);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.valueGradient(blockDudeAgent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Boolean cannot be cast to class java.lang.Number (java.lang.Boolean and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 432, 432);
      BlockDudeState blockDudeState0 = new BlockDudeState(432, 432, 3929);
      // Undeclared exception!
      linearDiffRFVInit0.value(blockDudeState0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 0, 0);
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      linearDiffRFVInit0.setVinitFvGen(concatenatedObjectFeatures0);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.value(blockDudeAgent0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ConcatenatedObjectFeatureVectorGenerator is only defined for OOState instances.
         //
         verifyException("burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit((DenseStateFeatures) null, (DenseStateFeatures) null, 1945, 1945);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.value(deepOOState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(numericVariableFeatures0, numericVariableFeatures0, 0, 0, false);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.value(blockDudeAgent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Boolean cannot be cast to class java.lang.Number (java.lang.Boolean and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      Object object0 = new Object();
      VariableDomain variableDomain0 = new VariableDomain();
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(object0, variableDomain0);
      DeepOOState deepOOState0 = new DeepOOState();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures1, normalizedVariableFeatures1, 29, 29);
      double[] doubleArray0 = new double[9];
      linearDiffRFVInit0.parameters = doubleArray0;
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.value(deepOOState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 29 out of bounds for length 9
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 5455, 9);
      BlockDudeState blockDudeState0 = new BlockDudeState(5455, 9, 5455);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      linearDiffRFVInit0.reward(blockDudeState0, simpleAction0, blockDudeState0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, concatenatedObjectFeatures0, 32, 32, true);
      BlockDudeCell blockDudeCell0 = BlockDudeCell.block("", 32, 32);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.reward(blockDudeCell0, (Action) null, blockDudeCell0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ConcatenatedObjectFeatureVectorGenerator is only defined for OOState instances.
         //
         verifyException("burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 0, 0, false);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.reward((State) null, simpleAction0, (State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.functionapproximation.dense.NormalizedVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(numericVariableFeatures0, numericVariableFeatures0, 3, (-1), false);
      MountainCar.MCPhysicsParams mountainCar_MCPhysicsParams0 = new MountainCar.MCPhysicsParams();
      MCState mCState0 = mountainCar_MCPhysicsParams0.valleyState();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      BlockDudeMap blockDudeMap0 = new BlockDudeMap();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell("bD72|;OB", "bD72|;OB");
      BlockDudeCell[] blockDudeCellArray0 = new BlockDudeCell[0];
      BlockDudeState blockDudeState0 = new BlockDudeState(blockDudeAgent0, blockDudeMap0, blockDudeCell0, blockDudeCellArray0);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.reward(blockDudeState0, simpleAction0, mCState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Boolean cannot be cast to class java.lang.Number (java.lang.Boolean and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain((Object) null, (VariableDomain) null);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures1, normalizedVariableFeatures1, 0, 0);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.reward(blockDudeAgent0, simpleAction0, blockDudeAgent0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 7257, 7257);
      // Undeclared exception!
      linearDiffRFVInit0.resetParameters();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit((DenseStateFeatures) null, (DenseStateFeatures) null, 3738, 3738);
      linearDiffRFVInit0.parameters = null;
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.resetParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 0, 0);
      BlockDudeState blockDudeState0 = new BlockDudeState(0, 0, 9996);
      // Undeclared exception!
      linearDiffRFVInit0.gradient(blockDudeAgent0, (Action) null, blockDudeState0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, concatenatedObjectFeatures0, 3, 3);
      JointAction jointAction0 = new JointAction();
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.gradient((State) null, jointAction0, (State) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ConcatenatedObjectFeatureVectorGenerator is only defined for OOState instances.
         //
         verifyException("burlap.behavior.functionapproximation.dense.ConcatenatedObjectFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit((DenseStateFeatures) null, (DenseStateFeatures) null, 69, 69);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.gradient((State) null, (Action) null, (State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      NumericVariableFeatures numericVariableFeatures0 = new NumericVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(numericVariableFeatures0, numericVariableFeatures0, 0, 8);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.gradient(blockDudeAgent0, simpleAction0, blockDudeAgent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Boolean cannot be cast to class java.lang.Number (java.lang.Boolean and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("burlap.behavior.functionapproximation.dense.NumericVariableFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 0, 0);
      linearDiffRFVInit0.vinitDim = (-1);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.copy();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = null;
      try {
        linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, concatenatedObjectFeatures0, (-2), (-2), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinearDiffRFVInit linearDiffRFVInit0 = null;
      try {
        linearDiffRFVInit0 = new LinearDiffRFVInit((DenseStateFeatures) null, (DenseStateFeatures) null, (-137), (-137));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -274
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 931, 931, false);
      linearDiffRFVInit0.resetParameters();
      assertEquals(1862, linearDiffRFVInit0.numParameters());
      assertEquals(931, linearDiffRFVInit0.getRfDim());
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(931, linearDiffRFVInit0.getVinitDim());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      Object object0 = new Object();
      VariableDomain variableDomain0 = new VariableDomain();
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(object0, variableDomain0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures1, normalizedVariableFeatures0, 1483, 1646, false);
      BlockDudeCell blockDudeCell0 = BlockDudeCell.block("agent (agent): {\njava.lang.String@0000000006: {java.lang.Integer@0000000007}\njava.lang.String@0000000008: {java.lang.Integer@0000000007}\njava.lang.String@0000000009: {java.lang.Integer@0000000007}\njava.lang.String@0000000010: {java.lang.Boolean@0000000011}\n}", 1462, 1184);
      linearDiffRFVInit0.valueGradient(blockDudeCell0);
      assertEquals(1483, linearDiffRFVInit0.getRfDim());
      assertEquals(3129, linearDiffRFVInit0.numParameters());
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(1646, linearDiffRFVInit0.getVinitDim());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      Object object0 = new Object();
      VariableDomain variableDomain0 = new VariableDomain();
      NormalizedVariableFeatures normalizedVariableFeatures1 = normalizedVariableFeatures0.variableDomain(object0, variableDomain0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures1, normalizedVariableFeatures0, 1483, 1646, false);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      SimpleAction simpleAction0 = new SimpleAction("/^LpM");
      linearDiffRFVInit0.gradient(blockDudeAgent0, simpleAction0, blockDudeAgent0);
      assertEquals(1483, linearDiffRFVInit0.getRfDim());
      assertEquals(3129, linearDiffRFVInit0.numParameters());
      assertEquals(1646, linearDiffRFVInit0.getVinitDim());
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, normalizedVariableFeatures0, 8, (-1));
      DenseStateFeatures denseStateFeatures0 = linearDiffRFVInit0.getVinitFvGen();
      assertEquals((-1), linearDiffRFVInit0.getVinitDim());
      assertEquals(7, linearDiffRFVInit0.numParameters());
      assertNotNull(denseStateFeatures0);
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(8, linearDiffRFVInit0.getRfDim());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures();
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(normalizedVariableFeatures0, normalizedVariableFeatures0, 931, 931, false);
      boolean boolean0 = linearDiffRFVInit0.isRfFeaturesAreForNextState();
      assertFalse(boolean0);
      assertEquals(1862, linearDiffRFVInit0.numParameters());
      assertEquals(931, linearDiffRFVInit0.getRfDim());
      assertEquals(931, linearDiffRFVInit0.getVinitDim());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit((DenseStateFeatures) null, (DenseStateFeatures) null, 0, 0);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.getParameter(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<PropositionalFunction> linkedList0 = new LinkedList<PropositionalFunction>();
      PFFeatures pFFeatures0 = new PFFeatures(linkedList0);
      TileCodingFeatures tileCodingFeatures0 = new TileCodingFeatures(pFFeatures0);
      SparseToDenseFeatures sparseToDenseFeatures0 = new SparseToDenseFeatures(tileCodingFeatures0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(sparseToDenseFeatures0, sparseToDenseFeatures0, 59, 1100, true);
      // Undeclared exception!
      try { 
        linearDiffRFVInit0.setParameter((-1), 1100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1159
         //
         verifyException("burlap.behavior.singleagent.learnfromdemo.mlirl.differentiableplanners.diffvinit.LinearDiffRFVInit", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<String, DenseStateFeatures> hashMap0 = new HashMap<String, DenseStateFeatures>();
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures(linkedList0, hashMap0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, concatenatedObjectFeatures0, (-1502), 4869, false);
      int int0 = linearDiffRFVInit0.getRfDim();
      assertFalse(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(3367, linearDiffRFVInit0.numParameters());
      assertEquals(4869, linearDiffRFVInit0.getVinitDim());
      assertEquals((-1502), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit((DenseStateFeatures) null, (DenseStateFeatures) null, 2725, 2725);
      linearDiffRFVInit0.getRfFvGen();
      assertEquals(5450, linearDiffRFVInit0.numParameters());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals(2725, linearDiffRFVInit0.getVinitDim());
      assertEquals(2725, linearDiffRFVInit0.getRfDim());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConcatenatedObjectFeatures concatenatedObjectFeatures0 = new ConcatenatedObjectFeatures();
      HashMap<Object, VariableDomain> hashMap0 = new HashMap<Object, VariableDomain>();
      NormalizedVariableFeatures normalizedVariableFeatures0 = new NormalizedVariableFeatures(hashMap0);
      LinearDiffRFVInit linearDiffRFVInit0 = new LinearDiffRFVInit(concatenatedObjectFeatures0, normalizedVariableFeatures0, 8, (-1));
      int int0 = linearDiffRFVInit0.getVinitDim();
      assertEquals(8, linearDiffRFVInit0.getRfDim());
      assertEquals(7, linearDiffRFVInit0.numParameters());
      assertTrue(linearDiffRFVInit0.isRfFeaturesAreForNextState());
      assertEquals((-1), int0);
  }
}
