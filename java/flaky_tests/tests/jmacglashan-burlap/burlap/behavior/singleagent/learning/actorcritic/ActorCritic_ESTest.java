/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 04:04:35 GMT 2022
 */

package burlap.behavior.singleagent.learning.actorcritic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.policy.Policy;
import burlap.behavior.singleagent.Episode;
import burlap.behavior.singleagent.learning.actorcritic.Actor;
import burlap.behavior.singleagent.learning.actorcritic.ActorCritic;
import burlap.behavior.singleagent.learning.actorcritic.Critic;
import burlap.behavior.singleagent.learning.actorcritic.actor.BoltzmannActor;
import burlap.behavior.singleagent.learning.actorcritic.critics.TDLambda;
import burlap.behavior.singleagent.learning.actorcritic.critics.TimeIndexedTDLambda;
import burlap.behavior.valuefunction.ConstantValueFunction;
import burlap.domain.singleagent.blockdude.BlockDudeModel;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.mdp.auxiliary.common.ConstantStateGenerator;
import burlap.mdp.auxiliary.common.GoalConditionTF;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.auxiliary.common.SinglePFTF;
import burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.state.NullState;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.GoalBasedRF;
import burlap.mdp.singleagent.environment.Environment;
import burlap.mdp.singleagent.environment.SimulatedEnvironment;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.mdp.singleagent.model.SampleModel;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.statehashing.ReflectiveHashableStateFactory;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ActorCritic_ESTest extends ActorCritic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, (-2506.6105907458855));
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda((-2506.6105907458855), reflectiveHashableStateFactory0, (-2506.6105907458855), (-2506.6105907458855), (-2506.6105907458855));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, (-1259));
      FactoredModel factoredModel0 = new FactoredModel();
      actorCritic0.initializeForPlanning((-1259));
      actorCritic0.setModel(factoredModel0);
      NullState nullState0 = NullState.instance;
      actorCritic0.planFromState(nullState0);
      assertEquals(0, actorCritic0.getDebugCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, (-2572.255543691));
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda((-2572.255543691), reflectiveHashableStateFactory0, (-2572.255543691), (-2572.255543691), (-2572.255543691));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 1315);
      BlockDudeCell blockDudeCell0 = BlockDudeCell.block("", 121, 3061);
      SimulatedEnvironment simulatedEnvironment0 = new SimulatedEnvironment((SampleModel) null, blockDudeCell0);
      Episode episode0 = actorCritic0.runLearningEpisode((Environment) simulatedEnvironment0, (-2681));
      assertEquals(0, episode0.numActions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Actor actor0 = mock(Actor.class, new ViolatedAssumptionAnswer());
      doReturn((Action) null).when(actor0).action(any(burlap.mdp.core.state.State.class));
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      ConstantStateGenerator constantStateGenerator0 = new ConstantStateGenerator(blockDudeCell0);
      SimulatedEnvironment simulatedEnvironment0 = new SimulatedEnvironment((SampleModel) null, constantStateGenerator0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TDLambda tDLambda0 = new TDLambda((-43.2659623188127), reflectiveHashableStateFactory0, 697.80407933, 1905, 697.80407933);
      ActorCritic actorCritic0 = new ActorCritic(actor0, tDLambda0, 1);
      // Undeclared exception!
      try { 
        actorCritic0.runLearningEpisode((Environment) simulatedEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.environment.SimulatedEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, (-2572.255543691));
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda((-2572.255543691), reflectiveHashableStateFactory0, (-2572.255543691), (-2572.255543691), (-2572.255543691));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 0);
      BlockDudeModel blockDudeModel0 = new BlockDudeModel(0, 0);
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 197.84906617684462);
      FactoredModel factoredModel0 = new FactoredModel(blockDudeModel0, goalBasedRF0, nullTermination0);
      actorCritic0.setModel(factoredModel0);
      NullState nullState0 = NullState.instance;
      actorCritic0.planFromState(nullState0);
      actorCritic0.resetSolver();
      assertEquals(0, actorCritic0.getDebugCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(oOSADomain0, reflectiveHashableStateFactory0, (-1476.358));
      ConstantValueFunction constantValueFunction0 = new ConstantValueFunction();
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda(0.0, reflectiveHashableStateFactory0, 0.0, constantValueFunction0, (-1476.358), 2893);
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 2688);
      Policy policy0 = actorCritic0.getPolicy();
      assertSame(boltzmannActor0, policy0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, (-2572.255543691));
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda((-2572.255543691), reflectiveHashableStateFactory0, (-2572.255543691), (-2572.255543691), (-2572.255543691));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 0);
      FactoredModel factoredModel0 = new FactoredModel();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      ConstantStateGenerator constantStateGenerator0 = new ConstantStateGenerator(blockDudeCell0);
      SimulatedEnvironment simulatedEnvironment0 = new SimulatedEnvironment(factoredModel0, constantStateGenerator0);
      actorCritic0.runLearningEpisode((Environment) simulatedEnvironment0, 0);
      Episode episode0 = actorCritic0.getLastLearningEpisode();
      assertEquals(1, episode0.numTimeSteps());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActorCritic actorCritic0 = new ActorCritic((Actor) null, (Critic) null);
      LinkedList<Episode> linkedList0 = actorCritic0.episodeHistory;
      Episode episode0 = new Episode();
      linkedList0.offerFirst(episode0);
      Episode episode1 = actorCritic0.getLastLearningEpisode();
      assertEquals(0, episode1.numTimeSteps());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActorCritic actorCritic0 = new ActorCritic((Actor) null, (Critic) null);
      // Undeclared exception!
      try { 
        actorCritic0.runLearningEpisode((Environment) null, 1540);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.actorcritic.ActorCritic", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActorCritic actorCritic0 = new ActorCritic((Actor) null, (Critic) null);
      FactoredModel factoredModel0 = new FactoredModel();
      actorCritic0.setModel(factoredModel0);
      NullState nullState0 = NullState.instance;
      // Undeclared exception!
      try { 
        actorCritic0.planFromState(nullState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.actorcritic.ActorCritic", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActorCritic actorCritic0 = new ActorCritic((Actor) null, (Critic) null);
      actorCritic0.episodeHistory = null;
      // Undeclared exception!
      try { 
        actorCritic0.getLastLearningEpisode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.actorcritic.ActorCritic", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FactoredModel factoredModel0 = new FactoredModel();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      ConstantStateGenerator constantStateGenerator0 = new ConstantStateGenerator(blockDudeCell0);
      SimulatedEnvironment simulatedEnvironment0 = new SimulatedEnvironment(factoredModel0, constantStateGenerator0);
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, 0.0);
      TDLambda tDLambda0 = new TDLambda((-566.18), reflectiveHashableStateFactory0, (-383.54167644), 0.0, (-383.54167644));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, tDLambda0, 0);
      // Undeclared exception!
      try { 
        actorCritic0.runLearningEpisode((Environment) simulatedEnvironment0, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, (-2572.255543691));
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda((-2572.255543691), reflectiveHashableStateFactory0, (-2572.255543691), (-2572.255543691), (-2572.255543691));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 0);
      FactoredModel factoredModel0 = new FactoredModel();
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      ConstantStateGenerator constantStateGenerator0 = new ConstantStateGenerator(blockDudeCell0);
      SimulatedEnvironment simulatedEnvironment0 = new SimulatedEnvironment(factoredModel0, constantStateGenerator0);
      actorCritic0.runLearningEpisode((Environment) simulatedEnvironment0, 0);
      Episode episode0 = actorCritic0.runLearningEpisode((Environment) simulatedEnvironment0, 0);
      assertEquals(0, episode0.numActions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActorCritic actorCritic0 = new ActorCritic((Actor) null, (Critic) null);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      // Undeclared exception!
      try { 
        actorCritic0.planFromState(blockDudeAgent0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Planning requires a model, but none is provided.
         //
         verifyException("burlap.behavior.singleagent.learning.actorcritic.ActorCritic", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, 0.0);
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda((-2572.9304845423035), reflectiveHashableStateFactory0, 0.0, 0.0, 0.0);
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 0);
      actorCritic0.numEpisodesToStore = 0;
      FactoredModel factoredModel0 = new FactoredModel();
      actorCritic0.setModel(factoredModel0);
      NullState nullState0 = NullState.instance;
      actorCritic0.planFromState(nullState0);
      actorCritic0.planFromState(nullState0);
      assertEquals("", nullState0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, (-2572.255543691));
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda((-2572.255543691), reflectiveHashableStateFactory0, (-2572.255543691), (-2572.255543691), (-2572.255543691));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 0);
      BlockDudeModel blockDudeModel0 = new BlockDudeModel(0, 0);
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 197.84906617684462);
      FactoredModel factoredModel0 = new FactoredModel(blockDudeModel0, goalBasedRF0, nullTermination0);
      actorCritic0.setModel(factoredModel0);
      NullState nullState0 = NullState.instance;
      actorCritic0.planFromState(nullState0);
      List<Episode> list0 = actorCritic0.getAllStoredLearningEpisodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda(0.0, reflectiveHashableStateFactory0, 0.0, 0.0, 0.0);
      FactoredModel factoredModel0 = new FactoredModel();
      NullState nullState0 = NullState.instance;
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(oOSADomain0, reflectiveHashableStateFactory0, 0.0);
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, (-3834));
      SimulatedEnvironment simulatedEnvironment0 = new SimulatedEnvironment(factoredModel0, nullState0);
      // Undeclared exception!
      try { 
        actorCritic0.runLearningEpisode((Environment) simulatedEnvironment0, 906);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActorCritic actorCritic0 = new ActorCritic((Actor) null, (Critic) null, Integer.MAX_VALUE);
      Policy policy0 = actorCritic0.getPolicy();
      assertNull(policy0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null, false);
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(singlePFTF0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(singlePFSCT0);
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, 0);
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda(goalBasedRF0, goalConditionTF0, 0, reflectiveHashableStateFactory0, 64.2795, 2121.284403546, 0, (-1224));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 0);
      // Undeclared exception!
      try { 
        actorCritic0.getLastLearningEpisode();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, (-2572.255543691));
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda((-2572.255543691), reflectiveHashableStateFactory0, (-2572.255543691), (-2572.255543691), (-2572.255543691));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 0);
      List<Episode> list0 = actorCritic0.getAllStoredLearningEpisodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(sADomain0, reflectiveHashableStateFactory0, (-2572.255543691));
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda((-2572.255543691), reflectiveHashableStateFactory0, (-2572.255543691), (-2572.255543691), (-2572.255543691));
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0, 0);
      // Undeclared exception!
      try { 
        actorCritic0.resetSolver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.actorcritic.critics.TDLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoltzmannActor boltzmannActor0 = new BoltzmannActor(oOSADomain0, reflectiveHashableStateFactory0, 5130.78208384);
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda(5130.78208384, reflectiveHashableStateFactory0, 5130.78208384, 5130.78208384, 5130.78208384);
      FactoredModel factoredModel0 = new FactoredModel();
      NullState nullState0 = NullState.instance;
      ActorCritic actorCritic0 = new ActorCritic(boltzmannActor0, timeIndexedTDLambda0);
      SimulatedEnvironment simulatedEnvironment0 = new SimulatedEnvironment(factoredModel0, nullState0);
      // Undeclared exception!
      try { 
        actorCritic0.runLearningEpisode((Environment) simulatedEnvironment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ActorCritic actorCritic0 = new ActorCritic((Actor) null, (Critic) null);
      actorCritic0.setNumEpisodesToStore((-3845));
      assertEquals(0.0, actorCritic0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActorCritic actorCritic0 = new ActorCritic((Actor) null, (Critic) null);
      actorCritic0.initializeForPlanning(22);
      assertEquals(0.0, actorCritic0.getGamma(), 0.01);
  }
}
