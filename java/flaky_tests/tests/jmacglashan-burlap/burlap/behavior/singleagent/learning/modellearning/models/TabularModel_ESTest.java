/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:37:52 GMT 2022
 */

package burlap.behavior.singleagent.learning.modellearning.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.learning.modellearning.models.TabularModel;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.environment.EnvironmentOutcome;
import burlap.statehashing.HashableState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import burlap.statehashing.maskeddiscretized.DiscMaskedConfig;
import burlap.statehashing.maskeddiscretized.IDDiscMaskedHashableState;
import burlap.statehashing.simple.IDSimpleHashableState;
import burlap.statehashing.simple.IISimpleHashableState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TabularModel_ESTest extends TabularModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      TabularModel tabularModel0 = new TabularModel(sADomain0, (HashableStateFactory) null, (-941));
      TabularModel.OutcomeState tabularModel_OutcomeState0 = tabularModel0.new OutcomeState((HashableState) null);
      IDDiscMaskedHashableState iDDiscMaskedHashableState0 = new IDDiscMaskedHashableState();
      TabularModel.OutcomeState tabularModel_OutcomeState1 = tabularModel0.new OutcomeState(iDDiscMaskedHashableState0);
      boolean boolean0 = tabularModel_OutcomeState1.equals(tabularModel_OutcomeState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel((SADomain) null, reflectiveHashableStateFactory0, 134);
      TabularModel.StateNode tabularModel_StateNode0 = tabularModel0.new StateNode((HashableState) null);
      SimpleAction simpleAction0 = new SimpleAction();
      TabularModel.StateActionNode tabularModel_StateActionNode0 = tabularModel_StateNode0.addActionNode(simpleAction0);
      assertNotNull(tabularModel_StateActionNode0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      SADomain sADomain0 = new SADomain();
      SimpleAction simpleAction0 = new SimpleAction();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, 0);
      EnvironmentOutcome environmentOutcome0 = new EnvironmentOutcome(blockDudeAgent0, simpleAction0, blockDudeAgent0, 0, false);
      // Undeclared exception!
      try { 
        tabularModel0.updateModel(environmentOutcome0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel((SADomain) null, reflectiveHashableStateFactory0, 961);
      // Undeclared exception!
      try { 
        tabularModel0.updateModel((EnvironmentOutcome) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.modellearning.models.TabularModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SimpleAction simpleAction0 = new SimpleAction();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, 0);
      // Undeclared exception!
      try { 
        tabularModel0.transitions(blockDudeAgent0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      SimpleAction simpleAction0 = new SimpleAction();
      TabularModel tabularModel0 = new TabularModel(sADomain0, (HashableStateFactory) null, 0);
      // Undeclared exception!
      try { 
        tabularModel0.transitions(blockDudeAgent0, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.modellearning.models.TabularModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, 0);
      // Undeclared exception!
      try { 
        tabularModel0.transitionIsModeled(blockDudeAgent0, (Action) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      TabularModel tabularModel0 = new TabularModel(sADomain0, (HashableStateFactory) null, 0);
      // Undeclared exception!
      try { 
        tabularModel0.transitionIsModeled(blockDudeAgent0, (Action) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.modellearning.models.TabularModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, 0);
      // Undeclared exception!
      try { 
        tabularModel0.terminal(blockDudeAgent0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      TabularModel tabularModel0 = new TabularModel(sADomain0, (HashableStateFactory) null, 0);
      // Undeclared exception!
      try { 
        tabularModel0.terminal(blockDudeAgent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.modellearning.models.TabularModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, 0);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        tabularModel0.sample(blockDudeAgent0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SimpleAction simpleAction0 = new SimpleAction();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, 6);
      BlockDudeState blockDudeState0 = new BlockDudeState();
      IISimpleHashableState iISimpleHashableState0 = new IISimpleHashableState(blockDudeState0);
      // Undeclared exception!
      try { 
        tabularModel0.getStateActionNode(iISimpleHashableState0, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blockdude.state.BlockDudeState", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel((SADomain) null, reflectiveHashableStateFactory0, (-966));
      IDSimpleHashableState iDSimpleHashableState0 = new IDSimpleHashableState();
      // Undeclared exception!
      try { 
        tabularModel0.getStateActionNode(iDSimpleHashableState0, (Action) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IDSimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel((SADomain) null, reflectiveHashableStateFactory0, 117);
      BlockDudeState blockDudeState0 = new BlockDudeState(0, 117, 0);
      IISimpleHashableState iISimpleHashableState0 = new IISimpleHashableState(blockDudeState0);
      SimpleAction simpleAction0 = new SimpleAction("burlap.domain.singleagent.blocksworld.BWModel");
      // Undeclared exception!
      try { 
        tabularModel0.getOrCreateActionNode(iISimpleHashableState0, simpleAction0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IISimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, (-3723));
      IDSimpleHashableState iDSimpleHashableState0 = new IDSimpleHashableState();
      TabularModel.OutcomeState tabularModel_OutcomeState0 = tabularModel0.new OutcomeState(iDSimpleHashableState0);
      boolean boolean0 = tabularModel_OutcomeState0.equals(reflectiveHashableStateFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, (-1015));
      SimpleAction simpleAction0 = new SimpleAction();
      TabularModel.StateActionNode tabularModel_StateActionNode0 = tabularModel0.getStateActionNode((HashableState) null, simpleAction0);
      assertNull(tabularModel_StateActionNode0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel((SADomain) null, reflectiveHashableStateFactory0, 1);
      TabularModel.StateNode tabularModel_StateNode0 = tabularModel0.new StateNode((HashableState) null);
      TabularModel.StateActionNode tabularModel_StateActionNode0 = tabularModel_StateNode0.addActionNode((Action) null);
      tabularModel_StateActionNode0.update(0.0, (HashableState) null);
      tabularModel_StateActionNode0.update(3165.97347869312, (HashableState) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, 0);
      DiscMaskedConfig discMaskedConfig0 = new DiscMaskedConfig();
      IDDiscMaskedHashableState iDDiscMaskedHashableState0 = new IDDiscMaskedHashableState(discMaskedConfig0);
      TabularModel.StateNode tabularModel_StateNode0 = tabularModel0.new StateNode(iDDiscMaskedHashableState0);
      SimpleAction simpleAction0 = new SimpleAction();
      TabularModel.StateActionNode tabularModel_StateActionNode0 = tabularModel_StateNode0.actionNode(simpleAction0);
      assertNull(tabularModel_StateActionNode0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel((SADomain) null, reflectiveHashableStateFactory0, 134);
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        tabularModel0.getOrCreateActionNode((HashableState) null, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.modellearning.models.TabularModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SADomain sADomain0 = new SADomain();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, (-572));
      TabularModel.StateActionNode tabularModel_StateActionNode0 = tabularModel0.new StateActionNode((Action) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularModel tabularModel0 = new TabularModel(sADomain0, reflectiveHashableStateFactory0, (-1041));
      SimpleAction simpleAction0 = new SimpleAction();
      TabularModel.StateActionNode tabularModel_StateActionNode0 = tabularModel0.new StateActionNode(simpleAction0, (-1041), (HashableState) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      TabularModel tabularModel0 = new TabularModel(sADomain0, (HashableStateFactory) null, 0);
      tabularModel0.resetModel();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      TabularModel tabularModel0 = new TabularModel(sADomain0, (HashableStateFactory) null, 0);
      // Undeclared exception!
      try { 
        tabularModel0.sample(blockDudeAgent0, (Action) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.modellearning.models.TabularModel", e);
      }
  }
}
