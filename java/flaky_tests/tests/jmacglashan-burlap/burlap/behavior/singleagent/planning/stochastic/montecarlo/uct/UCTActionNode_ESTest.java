/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:18:44 GMT 2022
 */

package burlap.behavior.singleagent.planning.stochastic.montecarlo.uct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.planning.stochastic.montecarlo.uct.UCTActionNode;
import burlap.behavior.singleagent.planning.stochastic.montecarlo.uct.UCTStateNode;
import burlap.mdp.core.action.ActionType;
import burlap.mdp.core.action.SimpleAction;
import burlap.statehashing.HashableState;
import burlap.statehashing.maskeddiscretized.IDDiscMaskedHashableState;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UCTActionNode_ESTest extends UCTActionNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UCTActionNode.UCTActionConstructor uCTActionNode_UCTActionConstructor0 = new UCTActionNode.UCTActionConstructor();
      SimpleAction simpleAction0 = new SimpleAction("");
      UCTActionNode uCTActionNode0 = uCTActionNode_UCTActionConstructor0.generate(simpleAction0);
      uCTActionNode0.n = (-1987);
      uCTActionNode0.update(1.0);
      double double0 = uCTActionNode0.averageReturn();
      assertEquals((-1986), uCTActionNode0.n);
      assertEquals((-5.035246727089627E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UCTActionNode.UCTActionConstructor uCTActionNode_UCTActionConstructor0 = new UCTActionNode.UCTActionConstructor();
      SimpleAction simpleAction0 = new SimpleAction("");
      UCTActionNode uCTActionNode0 = uCTActionNode_UCTActionConstructor0.generate(simpleAction0);
      uCTActionNode0.n = (-1987);
      double double0 = uCTActionNode0.averageReturn();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode uCTActionNode0 = new UCTActionNode(simpleAction0);
      uCTActionNode0.update(0.0);
      double double0 = uCTActionNode0.averageReturn();
      assertEquals(1, uCTActionNode0.n);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode uCTActionNode0 = new UCTActionNode(simpleAction0);
      uCTActionNode0.update(1860.95035);
      double double0 = uCTActionNode0.averageReturn();
      assertEquals(1860.95035, uCTActionNode0.sumReturn, 0.01);
      assertEquals(1860.95035, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode uCTActionNode0 = new UCTActionNode(simpleAction0);
      // Undeclared exception!
      try { 
        uCTActionNode0.referencesSuccessor((UCTStateNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.montecarlo.uct.UCTActionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode uCTActionNode0 = new UCTActionNode(simpleAction0);
      IDDiscMaskedHashableState iDDiscMaskedHashableState0 = new IDDiscMaskedHashableState();
      LinkedList<ActionType> linkedList0 = new LinkedList<ActionType>();
      UCTActionNode.UCTActionConstructor uCTActionNode_UCTActionConstructor0 = new UCTActionNode.UCTActionConstructor();
      UCTStateNode uCTStateNode0 = new UCTStateNode(iDDiscMaskedHashableState0, 0, linkedList0, uCTActionNode_UCTActionConstructor0);
      // Undeclared exception!
      try { 
        uCTActionNode0.referencesSuccessor(uCTStateNode0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IDSimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode.UCTActionConstructor uCTActionNode_UCTActionConstructor0 = new UCTActionNode.UCTActionConstructor();
      UCTActionNode uCTActionNode0 = uCTActionNode_UCTActionConstructor0.generate(simpleAction0);
      uCTActionNode0.successorStates = null;
      // Undeclared exception!
      try { 
        uCTActionNode0.getAllSuccessors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.montecarlo.uct.UCTActionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode uCTActionNode0 = new UCTActionNode(simpleAction0);
      // Undeclared exception!
      try { 
        uCTActionNode0.addSuccessor((UCTStateNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.montecarlo.uct.UCTActionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode uCTActionNode0 = new UCTActionNode(simpleAction0);
      IDDiscMaskedHashableState iDDiscMaskedHashableState0 = new IDDiscMaskedHashableState();
      LinkedList<ActionType> linkedList0 = new LinkedList<ActionType>();
      UCTActionNode.UCTActionConstructor uCTActionNode_UCTActionConstructor0 = new UCTActionNode.UCTActionConstructor();
      UCTStateNode uCTStateNode0 = new UCTStateNode(iDDiscMaskedHashableState0, 0, linkedList0, uCTActionNode_UCTActionConstructor0);
      // Undeclared exception!
      try { 
        uCTActionNode0.addSuccessor(uCTStateNode0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IDSimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode uCTActionNode0 = new UCTActionNode(simpleAction0);
      HashMap<HashableState, List<UCTStateNode>> hashMap0 = new HashMap<HashableState, List<UCTStateNode>>();
      uCTActionNode0.successorStates = (Map<HashableState, List<UCTStateNode>>) hashMap0;
      LinkedList<UCTStateNode> linkedList0 = new LinkedList<UCTStateNode>();
      linkedList0.push((UCTStateNode) null);
      hashMap0.put((HashableState) null, linkedList0);
      List<UCTStateNode> list0 = uCTActionNode0.getAllSuccessors();
      assertEquals(0.0, uCTActionNode0.sumReturn, 0.01);
      assertEquals(1, list0.size());
      assertEquals(0, uCTActionNode0.n);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode uCTActionNode0 = new UCTActionNode(simpleAction0);
      HashMap<HashableState, List<UCTStateNode>> hashMap0 = new HashMap<HashableState, List<UCTStateNode>>();
      uCTActionNode0.successorStates = (Map<HashableState, List<UCTStateNode>>) hashMap0;
      LinkedList<UCTStateNode> linkedList0 = new LinkedList<UCTStateNode>();
      hashMap0.put((HashableState) null, linkedList0);
      uCTActionNode0.getAllSuccessors();
      assertEquals(0.0, uCTActionNode0.sumReturn, 0.01);
      assertEquals(0, uCTActionNode0.n);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      UCTActionNode uCTActionNode0 = new UCTActionNode(simpleAction0);
      double double0 = uCTActionNode0.averageReturn();
      assertEquals(0.0, uCTActionNode0.sumReturn, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }
}
