/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:45:56 GMT 2022
 */

package burlap.behavior.singleagent.planning.deterministic.informed.astar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.planning.deterministic.SearchNode;
import burlap.behavior.singleagent.planning.deterministic.informed.NullHeuristic;
import burlap.behavior.singleagent.planning.deterministic.informed.PrioritizedSearchNode;
import burlap.behavior.singleagent.planning.deterministic.informed.astar.IDAStar;
import burlap.domain.singleagent.blockdude.BlockDudeModel;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.domain.singleagent.blockdude.state.BlockDudeMap;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.domain.singleagent.blocksworld.BlocksWorldBlock;
import burlap.mdp.auxiliary.common.GoalConditionTF;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT;
import burlap.mdp.auxiliary.stateconditiontest.StateConditionTest;
import burlap.mdp.auxiliary.stateconditiontest.TFGoalCondition;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.state.NullState;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.NullRewardFunction;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.statehashing.HashableState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import burlap.statehashing.discretized.IDDiscHashableState;
import burlap.statehashing.discretized.IIDiscHashableState;
import burlap.statehashing.masked.IDMaskedHashableState;
import burlap.statehashing.masked.MaskedConfig;
import burlap.statehashing.maskeddiscretized.DiscMaskedConfig;
import burlap.statehashing.maskeddiscretized.IIDiscMaskedHashableState;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IDAStar_ESTest extends IDAStar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      SearchNode searchNode0 = new SearchNode(iDDiscHashableState0);
      boolean boolean0 = iDAStar0.planEndNode(searchNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      // Undeclared exception!
      try { 
        iDAStar0.planFromState(blocksWorldBlock0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, (StateConditionTest) null, (HashableStateFactory) null, nullHeuristic0);
      // Undeclared exception!
      try { 
        iDAStar0.planFromState(blocksWorldBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.MDPSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(tFGoalCondition0);
      tFGoalCondition0.setTf(goalConditionTF0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      SearchNode searchNode0 = new SearchNode(iDDiscHashableState0);
      // Undeclared exception!
      try { 
        iDAStar0.planEndNode(searchNode0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      // Undeclared exception!
      try { 
        iDAStar0.planEndNode((SearchNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.informed.astar.IDAStar", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      IDAStar iDAStar0 = new IDAStar((SADomain) null, singlePFSCT0, reflectiveHashableStateFactory0, nullHeuristic0);
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      MaskedConfig maskedConfig0 = new MaskedConfig();
      IDMaskedHashableState iDMaskedHashableState0 = new IDMaskedHashableState(blocksWorldBlock0, maskedConfig0);
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDMaskedHashableState0, 2159.68948296971);
      // Undeclared exception!
      try { 
        iDAStar0.planEndNode(prioritizedSearchNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.domain.singleagent.blocksworld.BlocksWorldBlock cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.domain.singleagent.blocksworld.BlocksWorldBlock and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7f8a3840)
         //
         verifyException("burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      SearchNode searchNode0 = new SearchNode(iDDiscHashableState0);
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDDiscHashableState0, (Action) null, searchNode0, (-1273.0));
      // Undeclared exception!
      try { 
        iDAStar0.lastStateOnPathIsNew(prioritizedSearchNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.behavior.singleagent.planning.deterministic.SearchNode cannot be cast to class burlap.behavior.singleagent.planning.deterministic.informed.PrioritizedSearchNode (burlap.behavior.singleagent.planning.deterministic.SearchNode and burlap.behavior.singleagent.planning.deterministic.informed.PrioritizedSearchNode are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7f8a3840)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.informed.astar.IDAStar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(tFGoalCondition0);
      tFGoalCondition0.setTf(goalConditionTF0);
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDDiscHashableState0, 5.0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      // Undeclared exception!
      try { 
        iDAStar0.FLimtedDFS(prioritizedSearchNode0, 5.0, 5.0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDDiscHashableState0, 678.3254401949615);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SADomain sADomain0 = new SADomain();
      UniversalActionType universalActionType0 = new UniversalActionType("2];sv&&9~Rihja9");
      sADomain0.addActionType(universalActionType0);
      IDAStar iDAStar0 = new IDAStar(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      BlockDudeModel blockDudeModel0 = new BlockDudeModel(1241, 1241);
      NullRewardFunction nullRewardFunction0 = new NullRewardFunction();
      FactoredModel factoredModel0 = new FactoredModel(blockDudeModel0, nullRewardFunction0, nullTermination0);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent(1241, 51, (-1967), true);
      BlockDudeMap blockDudeMap0 = new BlockDudeMap();
      BlockDudeCell blockDudeCell0 = BlockDudeCell.exit(51, (-2146776403));
      LinkedList<BlockDudeCell> linkedList0 = new LinkedList<BlockDudeCell>();
      BlockDudeState blockDudeState0 = new BlockDudeState(blockDudeAgent0, blockDudeMap0, blockDudeCell0, linkedList0);
      iDDiscHashableState0.setS(blockDudeState0);
      iDAStar0.setModel(factoredModel0);
      // Undeclared exception!
      try { 
        iDAStar0.FLimtedDFS(prioritizedSearchNode0, 678.3254401949615, 678.3254401949615);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown action 2];sv&&9~Rihja9
         //
         verifyException("burlap.domain.singleagent.blockdude.BlockDudeModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      NullState nullState0 = NullState.instance;
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      IDAStar iDAStar0 = new IDAStar((SADomain) null, singlePFSCT0, reflectiveHashableStateFactory0, nullHeuristic0);
      DiscMaskedConfig discMaskedConfig0 = new DiscMaskedConfig();
      IIDiscMaskedHashableState iIDiscMaskedHashableState0 = new IIDiscMaskedHashableState(nullState0, discMaskedConfig0);
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iIDiscMaskedHashableState0, 0.0);
      // Undeclared exception!
      try { 
        iDAStar0.FLimtedDFS(prioritizedSearchNode0, (-2044.0), (-133.38758558));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.core.state.NullState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.core.state.NullState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7f8a3840)
         //
         verifyException("burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDDiscHashableState0, 1.0);
      PrioritizedSearchNode prioritizedSearchNode1 = new PrioritizedSearchNode((HashableState) null, (Action) null, prioritizedSearchNode0, 1.0);
      PrioritizedSearchNode prioritizedSearchNode2 = new PrioritizedSearchNode(iDDiscHashableState0, (Action) null, prioritizedSearchNode1, 1.0);
      boolean boolean0 = iDAStar0.lastStateOnPathIsNew(prioritizedSearchNode2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDDiscHashableState0, 1.0);
      PrioritizedSearchNode prioritizedSearchNode1 = new PrioritizedSearchNode((HashableState) null, (Action) null, prioritizedSearchNode0, 1.0);
      // Undeclared exception!
      try { 
        iDAStar0.lastStateOnPathIsNew(prioritizedSearchNode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.informed.PrioritizedSearchNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      IIDiscHashableState iIDiscHashableState0 = new IIDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iIDiscHashableState0, 624.2);
      boolean boolean0 = iDAStar0.lastStateOnPathIsNew(prioritizedSearchNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDDiscHashableState0, 678.3254401949615);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SADomain sADomain0 = new SADomain();
      UniversalActionType universalActionType0 = new UniversalActionType("");
      sADomain0.addActionType(universalActionType0);
      IDAStar iDAStar0 = new IDAStar(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      BlockDudeModel blockDudeModel0 = new BlockDudeModel(1241, 1241);
      NullRewardFunction nullRewardFunction0 = new NullRewardFunction();
      FactoredModel factoredModel0 = new FactoredModel(blockDudeModel0, nullRewardFunction0, nullTermination0);
      iDAStar0.setModel(factoredModel0);
      // Undeclared exception!
      try { 
        iDAStar0.FLimtedDFS(prioritizedSearchNode0, 678.3254401949615, 678.3254401949615);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.domain.singleagent.blockdude.BlockDudeModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDDiscHashableState0, 678.3254401949615);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SADomain sADomain0 = new SADomain();
      IDAStar iDAStar0 = new IDAStar(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      BlockDudeModel blockDudeModel0 = new BlockDudeModel(1241, 1241);
      NullRewardFunction nullRewardFunction0 = new NullRewardFunction();
      FactoredModel factoredModel0 = new FactoredModel(blockDudeModel0, nullRewardFunction0, nullTermination0);
      iDAStar0.setModel(factoredModel0);
      PrioritizedSearchNode prioritizedSearchNode1 = iDAStar0.FLimtedDFS(prioritizedSearchNode0, 678.3254401949615, 678.3254401949615);
      assertNull(prioritizedSearchNode1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDDiscHashableState0, (-1250.093921492581));
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      IDAStar iDAStar0 = new IDAStar((SADomain) null, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      PrioritizedSearchNode prioritizedSearchNode1 = iDAStar0.FLimtedDFS(prioritizedSearchNode0, 1199.90151047, (-1250.093921492581));
      assertSame(prioritizedSearchNode1, prioritizedSearchNode0);
  }
}
