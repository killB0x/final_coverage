/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:24:35 GMT 2022
 */

package burlap.behavior.singleagent.planning.deterministic.uninformed.bfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.planning.deterministic.uninformed.bfs.BFS;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.mdp.auxiliary.stateconditiontest.StateConditionTest;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BFS_ESTest extends BFS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFS bFS0 = new BFS(sADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0);
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      // Undeclared exception!
      try { 
        bFS0.planFromState(blockDudeCell0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      BFS bFS0 = new BFS(sADomain0, (StateConditionTest) null, (HashableStateFactory) null);
      // Undeclared exception!
      try { 
        bFS0.planFromState((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.MDPSolver", e);
      }
  }
}
