/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:05:56 GMT 2022
 */

package burlap.behavior.singleagent.planning.stochastic.policyiteration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.policy.BoltzmannQPolicy;
import burlap.behavior.policy.EnumerablePolicy;
import burlap.behavior.policy.GreedyDeterministicQPolicy;
import burlap.behavior.policy.GreedyQPolicy;
import burlap.behavior.policy.RandomPolicy;
import burlap.behavior.singleagent.learning.tdmethods.SarsaLam;
import burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyEvaluation;
import burlap.domain.singleagent.blockdude.BlockDudeModel;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.domain.singleagent.blocksworld.BWModel;
import burlap.domain.singleagent.gridworld.GridWorldDomain;
import burlap.domain.singleagent.lunarlander.LunarLanderDomain;
import burlap.domain.singleagent.lunarlander.LunarLanderModel;
import burlap.mdp.auxiliary.common.GoalConditionTF;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.auxiliary.common.SinglePFTF;
import burlap.mdp.auxiliary.stateconditiontest.TFGoalCondition;
import burlap.mdp.core.action.ActionType;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.GoalBasedRF;
import burlap.mdp.singleagent.common.SingleGoalPFRF;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.statehashing.ReflectiveHashableStateFactory;
import java.util.List;
import javax.management.RuntimeErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PolicyEvaluation_ESTest extends PolicyEvaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      assertNotNull(tabularBeliefState0);
      
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      assertNotNull(singleGoalPFRF0);
      
      NullTermination nullTermination0 = new NullTermination();
      assertNotNull(nullTermination0);
      
      BlockDudeModel blockDudeModel0 = new BlockDudeModel(1, 1);
      assertNotNull(blockDudeModel0);
      
      FactoredModel factoredModel0 = new FactoredModel(blockDudeModel0, singleGoalPFRF0, nullTermination0);
      assertNotNull(factoredModel0);
      
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 0.5, reflectiveHashableStateFactory0, 0.5, 0.0);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(0.5, policyEvaluation0.getGamma(), 0.01);
      assertNotNull(policyEvaluation0);
      
      boolean boolean0 = policyEvaluation0.performReachabilityFrom(tabularBeliefState0);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(0.5, policyEvaluation0.getGamma(), 0.01);
      assertTrue(boolean0);
      
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy((-1200.133146587));
      assertNotNull(boltzmannQPolicy0);
      
      policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(0.5, policyEvaluation0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1152.2, reflectiveHashableStateFactory0, 1152.2, 1152.2);
      assertEquals(1152.2, policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertNotNull(policyEvaluation0);
      
      DeepOOState deepOOState0 = new DeepOOState();
      assertEquals(0, deepOOState0.numObjects());
      assertNotNull(deepOOState0);
      
      // Undeclared exception!
      try { 
        policyEvaluation0.performReachabilityFrom(deepOOState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      assertNotNull(tabularBeliefState0);
      
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, (-5225.1697), reflectiveHashableStateFactory0, (-5225.1697), (-5225.1697));
      assertEquals((-5225.1697), policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertNotNull(policyEvaluation0);
      
      // Undeclared exception!
      try { 
        policyEvaluation0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      assertNotNull(tabularBeliefState0);
      
      NullTermination nullTermination0 = new NullTermination();
      assertNotNull(nullTermination0);
      
      BWModel bWModel0 = new BWModel();
      assertNotNull(bWModel0);
      
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0);
      assertEquals(0.0, goalBasedRF0.getDefaultReward(), 0.01);
      assertEquals(1.0, goalBasedRF0.getGoalReward(), 0.01);
      assertNotNull(goalBasedRF0);
      
      FactoredModel factoredModel0 = new FactoredModel(bWModel0, goalBasedRF0, nullTermination0);
      assertEquals(0.0, goalBasedRF0.getDefaultReward(), 0.01);
      assertEquals(1.0, goalBasedRF0.getGoalReward(), 0.01);
      assertNotNull(factoredModel0);
      
      oOSADomain0.setModel(factoredModel0);
      assertEquals(0.0, goalBasedRF0.getDefaultReward(), 0.01);
      assertEquals(1.0, goalBasedRF0.getGoalReward(), 0.01);
      
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1443.298845, reflectiveHashableStateFactory0, 1443.298845, 1443.298845);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(1443.298845, policyEvaluation0.getGamma(), 0.01);
      assertNotNull(policyEvaluation0);
      
      RandomPolicy randomPolicy0 = new RandomPolicy(oOSADomain0);
      assertNotNull(randomPolicy0);
      
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) randomPolicy0, (State) tabularBeliefState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.policy.RandomPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      assertNotNull(tabularBeliefState0);
      
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      assertNotNull(singleGoalPFRF0);
      
      NullTermination nullTermination0 = new NullTermination();
      assertNotNull(nullTermination0);
      
      LunarLanderDomain.LLPhysicsParams lunarLanderDomain_LLPhysicsParams0 = new LunarLanderDomain.LLPhysicsParams();
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertNotNull(lunarLanderDomain_LLPhysicsParams0);
      
      LunarLanderModel lunarLanderModel0 = new LunarLanderModel(lunarLanderDomain_LLPhysicsParams0);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertNotNull(lunarLanderModel0);
      
      FactoredModel factoredModel0 = new FactoredModel(lunarLanderModel0, singleGoalPFRF0, nullTermination0);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertNotNull(factoredModel0);
      
      oOSADomain0.setModel(factoredModel0);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1.0E-10, reflectiveHashableStateFactory0, 2.0, 2.0);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(1.0E-10, policyEvaluation0.getGamma(), 0.01);
      assertNotNull(policyEvaluation0);
      
      SarsaLam sarsaLam0 = new SarsaLam(oOSADomain0, 1443.298845, reflectiveHashableStateFactory0, 2.0, 1677.976, (-477), 2738.4737911996);
      assertEquals(0, sarsaLam0.getDebugCode());
      assertEquals(0, sarsaLam0.getLastNumSteps());
      assertEquals(1443.298845, sarsaLam0.getGamma(), 0.01);
      assertNotNull(sarsaLam0);
      
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(sarsaLam0, 1677.976);
      assertEquals(0, sarsaLam0.getDebugCode());
      assertEquals(0, sarsaLam0.getLastNumSteps());
      assertEquals(1443.298845, sarsaLam0.getGamma(), 0.01);
      assertNotNull(boltzmannQPolicy0);
      
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0, (State) tabularBeliefState0);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.tdmethods.QLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      assertNotNull(tabularBeliefState0);
      
      GridWorldDomain.GridWorldModel gridWorldDomain_GridWorldModel0 = new GridWorldDomain.GridWorldModel((int[][]) null, (double[][]) null);
      assertNotNull(gridWorldDomain_GridWorldModel0);
      
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      assertNotNull(singleGoalPFRF0);
      
      NullTermination nullTermination0 = new NullTermination();
      assertNotNull(nullTermination0);
      
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      assertNotNull(tFGoalCondition0);
      
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(tFGoalCondition0);
      assertNotNull(goalConditionTF0);
      
      tFGoalCondition0.setTf(goalConditionTF0);
      FactoredModel factoredModel0 = new FactoredModel(gridWorldDomain_GridWorldModel0, singleGoalPFRF0, goalConditionTF0);
      assertNotNull(factoredModel0);
      
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1443.298845, reflectiveHashableStateFactory0, 0.17638429825777346, 1443.298845);
      assertEquals(1443.298845, policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertNotNull(policyEvaluation0);
      
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyEvaluation0, 0.17638429825777346);
      assertEquals(1443.298845, policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertNotNull(boltzmannQPolicy0);
      
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0, (State) tabularBeliefState0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      assertNotNull(sADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(sADomain0, 927.4572372064376, reflectiveHashableStateFactory0, 927.4572372064376, 927.4572372064376);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(927.4572372064376, policyEvaluation0.getGamma(), 0.01);
      assertNotNull(policyEvaluation0);
      
      GreedyDeterministicQPolicy greedyDeterministicQPolicy0 = new GreedyDeterministicQPolicy(policyEvaluation0);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(927.4572372064376, policyEvaluation0.getGamma(), 0.01);
      assertNotNull(greedyDeterministicQPolicy0);
      
      BlockDudeState blockDudeState0 = new BlockDudeState();
      assertNotNull(blockDudeState0);
      
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) greedyDeterministicQPolicy0, (State) blockDudeState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      assertNotNull(tabularBeliefState0);
      
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      assertNotNull(singleGoalPFRF0);
      
      NullTermination nullTermination0 = new NullTermination();
      assertNotNull(nullTermination0);
      
      LunarLanderDomain.LLPhysicsParams lunarLanderDomain_LLPhysicsParams0 = new LunarLanderDomain.LLPhysicsParams();
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertNotNull(lunarLanderDomain_LLPhysicsParams0);
      
      LunarLanderModel lunarLanderModel0 = new LunarLanderModel(lunarLanderDomain_LLPhysicsParams0);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertNotNull(lunarLanderModel0);
      
      FactoredModel factoredModel0 = new FactoredModel(lunarLanderModel0, singleGoalPFRF0, nullTermination0);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertNotNull(factoredModel0);
      
      oOSADomain0.setModel(factoredModel0);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1443.298845, reflectiveHashableStateFactory0, 1.0E-10, 2.0);
      assertEquals(1443.298845, policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertNotNull(policyEvaluation0);
      
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(policyEvaluation0);
      assertEquals(1443.298845, policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertNotNull(greedyQPolicy0);
      
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) greedyQPolicy0, (State) tabularBeliefState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      assertNotNull(tabularBeliefState0);
      
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      assertNotNull(singleGoalPFRF0);
      
      LunarLanderDomain.LLPhysicsParams lunarLanderDomain_LLPhysicsParams0 = new LunarLanderDomain.LLPhysicsParams();
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertNotNull(lunarLanderDomain_LLPhysicsParams0);
      
      LunarLanderModel lunarLanderModel0 = new LunarLanderModel(lunarLanderDomain_LLPhysicsParams0);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertNotNull(lunarLanderModel0);
      
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null);
      assertNotNull(singlePFTF0);
      
      FactoredModel factoredModel0 = new FactoredModel(lunarLanderModel0, singleGoalPFRF0, singlePFTF0);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      assertNotNull(factoredModel0);
      
      oOSADomain0.setModel(factoredModel0);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getXmin(), 0.01);
      assertEquals(0.7853981633974483, lunarLanderDomain_LLPhysicsParams0.getAngmax(), 0.01);
      assertEquals(4.0, lunarLanderDomain_LLPhysicsParams0.getVmax(), 0.01);
      assertEquals(50.0, lunarLanderDomain_LLPhysicsParams0.getYmax(), 0.01);
      assertEquals(0.15707963267948966, lunarLanderDomain_LLPhysicsParams0.getAnginc(), 0.01);
      assertEquals((-0.2), lunarLanderDomain_LLPhysicsParams0.getGravity(), 0.01);
      assertEquals(0.0, lunarLanderDomain_LLPhysicsParams0.getYmin(), 0.01);
      assertEquals(100.0, lunarLanderDomain_LLPhysicsParams0.getXmax(), 0.01);
      
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1443.298845, reflectiveHashableStateFactory0, 1.0E-10, 1443.298845);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(1443.298845, policyEvaluation0.getGamma(), 0.01);
      assertNotNull(policyEvaluation0);
      
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyEvaluation0, 1443.298845);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(1443.298845, policyEvaluation0.getGamma(), 0.01);
      assertNotNull(boltzmannQPolicy0);
      
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0, (State) tabularBeliefState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @70d2ef87)
         //
         verifyException("burlap.mdp.auxiliary.common.SinglePFTF", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      assertNotNull(tabularBeliefState0);
      
      GridWorldDomain.GridWorldModel gridWorldDomain_GridWorldModel0 = new GridWorldDomain.GridWorldModel((int[][]) null, (double[][]) null);
      assertNotNull(gridWorldDomain_GridWorldModel0);
      
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      assertNotNull(singleGoalPFRF0);
      
      NullTermination nullTermination0 = new NullTermination();
      assertNotNull(nullTermination0);
      
      FactoredModel factoredModel0 = new FactoredModel(gridWorldDomain_GridWorldModel0, singleGoalPFRF0, nullTermination0);
      assertNotNull(factoredModel0);
      
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 667.5680858545478, reflectiveHashableStateFactory0, 667.5680858545478, 667.5680858545478);
      assertEquals(667.5680858545478, policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertNotNull(policyEvaluation0);
      
      boolean boolean0 = policyEvaluation0.performReachabilityFrom(tabularBeliefState0);
      assertEquals(667.5680858545478, policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertTrue(boolean0);
      
      List<ActionType> list0 = policyEvaluation0.getActionTypes();
      assertEquals(667.5680858545478, policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      RandomPolicy randomPolicy0 = new RandomPolicy(list0);
      assertEquals(667.5680858545478, policyEvaluation0.getGamma(), 0.01);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(randomPolicy0);
      
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) randomPolicy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.policy.RandomPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      assertNotNull(oOSADomain0);
      
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      assertNotNull(reflectiveHashableStateFactory0);
      
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      assertNotNull(tabularBeliefState0);
      
      GridWorldDomain.GridWorldModel gridWorldDomain_GridWorldModel0 = new GridWorldDomain.GridWorldModel((int[][]) null, (double[][]) null);
      assertNotNull(gridWorldDomain_GridWorldModel0);
      
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      assertNotNull(singleGoalPFRF0);
      
      NullTermination nullTermination0 = new NullTermination();
      assertNotNull(nullTermination0);
      
      FactoredModel factoredModel0 = new FactoredModel(gridWorldDomain_GridWorldModel0, singleGoalPFRF0, nullTermination0);
      assertNotNull(factoredModel0);
      
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 667.5680858545478, reflectiveHashableStateFactory0, 667.5680858545478, 1.5707963267948966);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(667.5680858545478, policyEvaluation0.getGamma(), 0.01);
      assertNotNull(policyEvaluation0);
      
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyEvaluation0, 3822.0);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(667.5680858545478, policyEvaluation0.getGamma(), 0.01);
      assertNotNull(boltzmannQPolicy0);
      
      policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0, (State) tabularBeliefState0);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(667.5680858545478, policyEvaluation0.getGamma(), 0.01);
      
      policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0);
      assertEquals(0, policyEvaluation0.getDebugCode());
      assertEquals(667.5680858545478, policyEvaluation0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      GridWorldDomain.GridWorldModel gridWorldDomain_GridWorldModel0 = new GridWorldDomain.GridWorldModel((int[][]) null, (double[][]) null);
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      NullTermination nullTermination0 = new NullTermination();
      FactoredModel factoredModel0 = new FactoredModel(gridWorldDomain_GridWorldModel0, singleGoalPFRF0, nullTermination0);
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 667.5680858545478, reflectiveHashableStateFactory0, 667.5680858545478, 1.5707963267948966);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyEvaluation0, 667.5680858545478);
      PolicyEvaluation policyEvaluation1 = new PolicyEvaluation(oOSADomain0, 5.0, reflectiveHashableStateFactory0, (-2436.932), 3847.8516);
      policyEvaluation1.performReachabilityFrom(tabularBeliefState0);
      policyEvaluation1.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0);
      // Undeclared exception!
      policyEvaluation1.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      NullTermination nullTermination0 = new NullTermination();
      LunarLanderDomain.LLPhysicsParams lunarLanderDomain_LLPhysicsParams0 = new LunarLanderDomain.LLPhysicsParams();
      LunarLanderModel lunarLanderModel0 = new LunarLanderModel(lunarLanderDomain_LLPhysicsParams0);
      FactoredModel factoredModel0 = new FactoredModel(lunarLanderModel0, singleGoalPFRF0, nullTermination0);
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1443.298845, reflectiveHashableStateFactory0, 1.0E-10, 2.0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyEvaluation0, 1443.298845);
      policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0, (State) tabularBeliefState0);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(policyEvaluation0);
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) greedyQPolicy0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullTermination nullTermination0 = new NullTermination();
      BWModel bWModel0 = new BWModel();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0);
      FactoredModel factoredModel0 = new FactoredModel(bWModel0, goalBasedRF0, nullTermination0);
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, (-764.0), reflectiveHashableStateFactory0, (-764.0), (-764.0));
      UniversalActionType universalActionType0 = new UniversalActionType((String) null);
      policyEvaluation0.addActionType(universalActionType0);
      // Undeclared exception!
      try { 
        policyEvaluation0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.domain.singleagent.blocksworld.BlocksWorldState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.domain.singleagent.blocksworld.BlocksWorldState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @70d2ef87)
         //
         verifyException("burlap.domain.singleagent.blocksworld.BWModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      NullTermination nullTermination0 = new NullTermination();
      LunarLanderDomain.LLPhysicsParams lunarLanderDomain_LLPhysicsParams0 = new LunarLanderDomain.LLPhysicsParams();
      LunarLanderModel lunarLanderModel0 = new LunarLanderModel(lunarLanderDomain_LLPhysicsParams0);
      FactoredModel factoredModel0 = new FactoredModel(lunarLanderModel0, singleGoalPFRF0, nullTermination0);
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1443.298845, reflectiveHashableStateFactory0, 1.0E-10, 2.0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyEvaluation0, 1443.298845);
      policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0, (State) tabularBeliefState0);
      boolean boolean0 = policyEvaluation0.performReachabilityFrom(tabularBeliefState0);
      assertEquals(1443.298845, policyEvaluation0.getGamma(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullTermination nullTermination0 = new NullTermination();
      BWModel bWModel0 = new BWModel();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0);
      FactoredModel factoredModel0 = new FactoredModel(bWModel0, goalBasedRF0, nullTermination0);
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, (-2372.636228067), reflectiveHashableStateFactory0, 0.0, 1443.298845);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyEvaluation0, (-2466.9834495093));
      policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0, (State) tabularBeliefState0);
      assertEquals((-2372.636228067), policyEvaluation0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(sADomain0, 928.1454, reflectiveHashableStateFactory0, 928.1454, 928.1454);
      GreedyDeterministicQPolicy greedyDeterministicQPolicy0 = new GreedyDeterministicQPolicy(policyEvaluation0);
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) greedyDeterministicQPolicy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot evaluate policy, because no states have been expanded. Use the performStateReachability methodor call the evaluatePolicy method that takes a seed initial state as input.
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullTermination nullTermination0 = new NullTermination();
      BWModel bWModel0 = new BWModel();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0);
      FactoredModel factoredModel0 = new FactoredModel(bWModel0, goalBasedRF0, nullTermination0);
      oOSADomain0.setModel(factoredModel0);
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1447.9059809899768, reflectiveHashableStateFactory0, 1447.9059809899768, 1447.9059809899768);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyEvaluation0, 1447.9059809899768);
      policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0, (State) tabularBeliefState0);
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      PolicyEvaluation policyEvaluation0 = new PolicyEvaluation(oOSADomain0, 1447.9059809899768, reflectiveHashableStateFactory0, 1447.9059809899768, 1447.9059809899768);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyEvaluation0, 1447.9059809899768);
      // Undeclared exception!
      try { 
        policyEvaluation0.evaluatePolicy((EnumerablePolicy) boltzmannQPolicy0, (State) tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyEvaluation", e);
      }
  }
}
