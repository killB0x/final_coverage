/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:47:56 GMT 2022
 */

package burlap.behavior.singleagent.planning.deterministic.informed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.planning.deterministic.informed.NullHeuristic;
import burlap.behavior.singleagent.planning.deterministic.informed.PrioritizedSearchNode;
import burlap.behavior.singleagent.planning.deterministic.informed.astar.AStar;
import burlap.behavior.singleagent.planning.deterministic.informed.astar.WeightedGreedy;
import burlap.datastructures.HashIndexedHeap;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.auxiliary.stateconditiontest.StateConditionTest;
import burlap.mdp.auxiliary.stateconditiontest.TFGoalCondition;
import burlap.mdp.core.TerminalFunction;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.UniformCostRF;
import burlap.statehashing.HashableState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import burlap.statehashing.discretized.IIDiscHashableState;
import burlap.statehashing.masked.IDMaskedHashableState;
import burlap.statehashing.masked.IIMaskedHashableState;
import burlap.statehashing.masked.MaskedConfig;
import burlap.statehashing.simple.IDSimpleHashableState;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BestFirst_ESTest extends BestFirst_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      AStar aStar0 = new AStar(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      Comparator<PrioritizedSearchNode> comparator0 = (Comparator<PrioritizedSearchNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashIndexedHeap<PrioritizedSearchNode> hashIndexedHeap0 = new HashIndexedHeap<PrioritizedSearchNode>(comparator0, 2106);
      SimpleAction simpleAction0 = new SimpleAction();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode((HashableState) null, 2106);
      PrioritizedSearchNode prioritizedSearchNode1 = new PrioritizedSearchNode((HashableState) null, simpleAction0, prioritizedSearchNode0, 2106.0);
      // Undeclared exception!
      try { 
        aStar0.updateOpen(hashIndexedHeap0, prioritizedSearchNode1, prioritizedSearchNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.informed.astar.AStar", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      AStar aStar0 = new AStar(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      aStar0.prePlanPrep();
      Comparator<PrioritizedSearchNode> comparator0 = (Comparator<PrioritizedSearchNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashIndexedHeap<PrioritizedSearchNode> hashIndexedHeap0 = new HashIndexedHeap<PrioritizedSearchNode>(comparator0, 2106);
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode((HashableState) null, 2106);
      aStar0.updateOpen(hashIndexedHeap0, prioritizedSearchNode0, prioritizedSearchNode0);
      assertEquals(1.0, aStar0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition((TerminalFunction) null);
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      AStar aStar0 = new AStar(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      aStar0.prePlanPrep();
      Comparator<PrioritizedSearchNode> comparator0 = (Comparator<PrioritizedSearchNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashIndexedHeap<PrioritizedSearchNode> hashIndexedHeap0 = new HashIndexedHeap<PrioritizedSearchNode>(comparator0);
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode((HashableState) null, (-691.924));
      aStar0.insertIntoOpen(hashIndexedHeap0, prioritizedSearchNode0);
      assertEquals((-691.924), prioritizedSearchNode0.priority, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      WeightedGreedy weightedGreedy0 = new WeightedGreedy(sADomain0, uniformCostRF0, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0, 0.0);
      weightedGreedy0.postPlanPrep();
      assertEquals(1.0, weightedGreedy0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      UniversalActionType universalActionType0 = new UniversalActionType("PGE5Lzpp");
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      WeightedGreedy weightedGreedy0 = new WeightedGreedy(sADomain0, uniformCostRF0, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0, 0.0);
      IDSimpleHashableState iDSimpleHashableState0 = new IDSimpleHashableState();
      double double0 = weightedGreedy0.computeF((PrioritizedSearchNode) null, universalActionType0.action, iDSimpleHashableState0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      AStar aStar0 = new AStar(sADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      aStar0.prePlanPrep();
      HashIndexedHeap<PrioritizedSearchNode> hashIndexedHeap0 = new HashIndexedHeap<PrioritizedSearchNode>((Comparator<PrioritizedSearchNode>) null);
      MaskedConfig maskedConfig0 = new MaskedConfig();
      IDMaskedHashableState iDMaskedHashableState0 = new IDMaskedHashableState(maskedConfig0);
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iDMaskedHashableState0, 0.0);
      // Undeclared exception!
      try { 
        aStar0.updateOpen(hashIndexedHeap0, prioritizedSearchNode0, prioritizedSearchNode0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IDSimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      AStar aStar0 = new AStar(sADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      // Undeclared exception!
      try { 
        aStar0.planFromState((State) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      AStar aStar0 = new AStar(sADomain0, (StateConditionTest) null, (HashableStateFactory) null, nullHeuristic0);
      // Undeclared exception!
      try { 
        aStar0.planFromState((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.MDPSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      AStar aStar0 = new AStar(sADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      aStar0.prePlanPrep();
      HashIndexedHeap<PrioritizedSearchNode> hashIndexedHeap0 = new HashIndexedHeap<PrioritizedSearchNode>((Comparator<PrioritizedSearchNode>) null);
      IIDiscHashableState iIDiscHashableState0 = new IIDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iIDiscHashableState0, 0.0);
      // Undeclared exception!
      try { 
        aStar0.insertIntoOpen(hashIndexedHeap0, prioritizedSearchNode0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IISimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      AStar aStar0 = new AStar((SADomain) null, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      IIMaskedHashableState iIMaskedHashableState0 = new IIMaskedHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iIMaskedHashableState0, 1358.3093772929533);
      // Undeclared exception!
      try { 
        aStar0.computeF(prioritizedSearchNode0, (Action) null, iIMaskedHashableState0, 1358.3093772929533);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.informed.astar.AStar", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      AStar aStar0 = new AStar((SADomain) null, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      aStar0.prePlanPrep();
      IIMaskedHashableState iIMaskedHashableState0 = new IIMaskedHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iIMaskedHashableState0, 1358.3093772929533);
      // Undeclared exception!
      try { 
        aStar0.computeF(prioritizedSearchNode0, (Action) null, iIMaskedHashableState0, 1358.3093772929533);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IISimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      AStar aStar0 = new AStar(sADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      HashIndexedHeap<PrioritizedSearchNode> hashIndexedHeap0 = new HashIndexedHeap<PrioritizedSearchNode>((Comparator<PrioritizedSearchNode>) null);
      IIDiscHashableState iIDiscHashableState0 = new IIDiscHashableState();
      PrioritizedSearchNode prioritizedSearchNode0 = new PrioritizedSearchNode(iIDiscHashableState0, 0.0);
      // Undeclared exception!
      try { 
        aStar0.insertIntoOpen(hashIndexedHeap0, prioritizedSearchNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.informed.astar.AStar", e);
      }
  }
}
