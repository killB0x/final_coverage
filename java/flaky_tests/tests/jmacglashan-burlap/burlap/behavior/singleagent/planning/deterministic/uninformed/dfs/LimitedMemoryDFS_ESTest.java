/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:09:41 GMT 2022
 */

package burlap.behavior.singleagent.planning.deterministic.uninformed.dfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.planning.deterministic.SearchNode;
import burlap.behavior.singleagent.planning.deterministic.uninformed.dfs.LimitedMemoryDFS;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.domain.singleagent.blocksworld.BlocksWorldBlock;
import burlap.domain.singleagent.mountaincar.MountainCar;
import burlap.mdp.auxiliary.common.GoalConditionTF;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT;
import burlap.mdp.auxiliary.stateconditiontest.StateConditionTest;
import burlap.mdp.auxiliary.stateconditiontest.TFGoalCondition;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.GoalBasedRF;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.statehashing.HashableState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import burlap.statehashing.discretized.DiscConfig;
import burlap.statehashing.discretized.IDDiscHashableState;
import burlap.statehashing.masked.IDMaskedHashableState;
import burlap.statehashing.maskeddiscretized.DiscMaskedConfig;
import burlap.statehashing.maskeddiscretized.IDDiscMaskedHashableState;
import burlap.statehashing.simple.IDSimpleHashableState;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LimitedMemoryDFS_ESTest extends LimitedMemoryDFS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      LimitedMemoryDFS limitedMemoryDFS0 = new LimitedMemoryDFS(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, 3723, false, true, 1);
      BlockDudeCell blockDudeCell0 = new BlockDudeCell(204, 3723, "", "burlap.behavior.singleagent.planning.deterministic.uninformed.dfs.LimitedMemoryDFS");
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      DiscConfig discConfig0 = new DiscConfig(hashMap0, 1812.9773);
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState(blockDudeCell0, discConfig0);
      SearchNode searchNode0 = new SearchNode(iDDiscHashableState0);
      LinkedHashSet<HashableState> linkedHashSet0 = new LinkedHashSet<HashableState>();
      // Undeclared exception!
      try { 
        limitedMemoryDFS0.dfs(searchNode0, 1495, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.uninformed.dfs.LimitedMemoryDFS", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      LimitedMemoryDFS limitedMemoryDFS0 = new LimitedMemoryDFS(sADomain0, (StateConditionTest) null, (HashableStateFactory) null, 31, true, false, 31);
      // Undeclared exception!
      try { 
        limitedMemoryDFS0.planFromState((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.MDPSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(tFGoalCondition0);
      tFGoalCondition0.setTf(goalConditionTF0);
      LimitedMemoryDFS limitedMemoryDFS0 = new LimitedMemoryDFS(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, 3202, true, true, 3202);
      LinkedHashSet<HashableState> linkedHashSet0 = new LinkedHashSet<HashableState>();
      IDMaskedHashableState iDMaskedHashableState0 = new IDMaskedHashableState();
      SearchNode searchNode0 = new SearchNode(iDMaskedHashableState0);
      // Undeclared exception!
      try { 
        limitedMemoryDFS0.dfs(searchNode0, 3202, linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      LimitedMemoryDFS limitedMemoryDFS0 = new LimitedMemoryDFS(sADomain0, singlePFSCT0, (HashableStateFactory) null, 382, false, false, 382);
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("burlap.domain.singleagent.blocksworld.BWModel");
      IDSimpleHashableState iDSimpleHashableState0 = new IDSimpleHashableState(blocksWorldBlock0);
      SearchNode searchNode0 = new SearchNode(iDSimpleHashableState0);
      // Undeclared exception!
      try { 
        limitedMemoryDFS0.dfs(searchNode0, 382, (Set<HashableState>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.domain.singleagent.blocksworld.BlocksWorldBlock cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.domain.singleagent.blocksworld.BlocksWorldBlock and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3ba3a802)
         //
         verifyException("burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      LimitedMemoryDFS limitedMemoryDFS0 = null;
      try {
        limitedMemoryDFS0 = new LimitedMemoryDFS((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, 3202, false, true, 3202);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.uninformed.dfs.DFS", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      MountainCar.MCPhysicsParams mountainCar_MCPhysicsParams0 = new MountainCar.MCPhysicsParams();
      MountainCar.MCModel mountainCar_MCModel0 = new MountainCar.MCModel(mountainCar_MCPhysicsParams0);
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 3.0);
      FactoredModel factoredModel0 = new FactoredModel(mountainCar_MCModel0, goalBasedRF0, nullTermination0);
      sADomain0.setModel(factoredModel0);
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      LimitedMemoryDFS limitedMemoryDFS0 = new LimitedMemoryDFS(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, 3236, true, true, 3236);
      LinkedHashSet<HashableState> linkedHashSet0 = new LinkedHashSet<HashableState>();
      IDMaskedHashableState iDMaskedHashableState0 = new IDMaskedHashableState();
      SearchNode searchNode0 = new SearchNode(iDMaskedHashableState0);
      // Undeclared exception!
      try { 
        limitedMemoryDFS0.dfs(searchNode0, 3236, linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("burlap.statehashing.simple.IDSimpleHashableState", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      LimitedMemoryDFS limitedMemoryDFS0 = new LimitedMemoryDFS(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, (-3923), true, true, 7);
      BlockDudeCell blockDudeCell0 = new BlockDudeCell((-1), 22, ":7`sySk9i|`N fn", "qVx3'59_pFy");
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      DiscConfig discConfig0 = new DiscConfig(hashMap0, (-1));
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState(blockDudeCell0, discConfig0);
      SearchNode searchNode0 = new SearchNode(iDDiscHashableState0);
      LinkedHashSet<HashableState> linkedHashSet0 = new LinkedHashSet<HashableState>();
      limitedMemoryDFS0.dfs(searchNode0, 1, linkedHashSet0);
      assertEquals(1, limitedMemoryDFS0.getNumVisited());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      LimitedMemoryDFS limitedMemoryDFS0 = new LimitedMemoryDFS(sADomain0, tFGoalCondition0, reflectiveHashableStateFactory0, (-1), true, false, (-1));
      DiscMaskedConfig discMaskedConfig0 = new DiscMaskedConfig((-3569.738342970885));
      IDDiscMaskedHashableState iDDiscMaskedHashableState0 = new IDDiscMaskedHashableState(discMaskedConfig0);
      SearchNode searchNode0 = new SearchNode(iDDiscMaskedHashableState0);
      LinkedHashSet<HashableState> linkedHashSet0 = new LinkedHashSet<HashableState>(501);
      // Undeclared exception!
      try { 
        limitedMemoryDFS0.dfs(searchNode0, (-1), linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.uninformed.dfs.LimitedMemoryDFS", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      LimitedMemoryDFS limitedMemoryDFS0 = new LimitedMemoryDFS(sADomain0, singlePFSCT0, reflectiveHashableStateFactory0, 1, true, true, 1500);
      // Undeclared exception!
      try { 
        limitedMemoryDFS0.planFromState((State) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }
}
