/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:26:06 GMT 2022
 */

package burlap.behavior.singleagent.planning.stochastic.policyiteration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.policy.BoltzmannQPolicy;
import burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyIteration;
import burlap.domain.singleagent.blocksworld.BlocksWorldBlock;
import burlap.mdp.auxiliary.common.SinglePFTF;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PolicyIteration_ESTest extends PolicyIteration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration((SADomain) null, 201, reflectiveHashableStateFactory0, 201, 201, 201);
      policyIteration0.totalPolicyIterations = (-2998);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        policyIteration0.planFromState(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyIteration", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, 112, reflectiveHashableStateFactory0, (-2.74868), 112, 112);
      policyIteration0.foundReachableStates = true;
      policyIteration0.evaluatePolicy();
      double double0 = policyIteration0.evaluatePolicy();
      assertEquals(224, policyIteration0.getTotalValueIterations());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, (-2855), reflectiveHashableStateFactory0, (-1.0), (-2855), (-1639));
      assertEquals(0, policyIteration0.getTotalPolicyIterations());
      
      policyIteration0.totalPolicyIterations = (-2855);
      policyIteration0.foundReachableStates = true;
      double double0 = policyIteration0.evaluatePolicy();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, 33, reflectiveHashableStateFactory0, 0.0, 33, 33);
      policyIteration0.foundReachableStates = true;
      double double0 = policyIteration0.evaluatePolicy();
      assertEquals(33, policyIteration0.getTotalValueIterations());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, 7, reflectiveHashableStateFactory0, (-1.0), 7, (-1612));
      policyIteration0.maxPIDelta = (-1566.084740815);
      policyIteration0.foundReachableStates = true;
      double double0 = policyIteration0.evaluatePolicy();
      assertEquals(7, policyIteration0.getTotalValueIterations());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration((SADomain) null, 201, reflectiveHashableStateFactory0, 201, 201, 201);
      int int0 = policyIteration0.getTotalValueIterations();
      assertEquals(201.0, policyIteration0.getGamma(), 0.01);
      assertEquals(0, policyIteration0.getTotalPolicyIterations());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, 5, reflectiveHashableStateFactory0, (-1.0), 5, (-1639));
      policyIteration0.foundReachableStates = true;
      assertEquals(0, policyIteration0.getTotalValueIterations());
      
      policyIteration0.evaluatePolicy();
      int int0 = policyIteration0.getTotalValueIterations();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration((SADomain) null, 201, reflectiveHashableStateFactory0, 201, 201, 201);
      assertEquals(0, policyIteration0.getTotalPolicyIterations());
      
      policyIteration0.totalPolicyIterations = 201;
      int int0 = policyIteration0.getTotalPolicyIterations();
      assertEquals(201, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration((SADomain) null, 201, reflectiveHashableStateFactory0, 201, 201, 201);
      policyIteration0.totalPolicyIterations = (-2998);
      int int0 = policyIteration0.getTotalPolicyIterations();
      assertEquals((-2998), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, 112, reflectiveHashableStateFactory0, (-2.74868), 112, 112);
      policyIteration0.evaluativePolicy = null;
      policyIteration0.getComputedPolicy();
      assertEquals(112.0, policyIteration0.getGamma(), 0.01);
      assertEquals(0, policyIteration0.getTotalPolicyIterations());
      assertEquals(0, policyIteration0.getTotalValueIterations());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration((SADomain) null, 4606, reflectiveHashableStateFactory0, 4606, 4606, 4606);
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      // Undeclared exception!
      try { 
        policyIteration0.planFromState(blocksWorldBlock0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      OOSADomain oOSADomain0 = new OOSADomain();
      FactoredModel factoredModel0 = new FactoredModel();
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null);
      factoredModel0.useTerminalFunction(singlePFTF0);
      oOSADomain0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      PolicyIteration policyIteration0 = new PolicyIteration(oOSADomain0, 133, reflectiveHashableStateFactory0, 133, 133, 133);
      // Undeclared exception!
      try { 
        policyIteration0.planFromState(tabularBeliefState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @86082a)
         //
         verifyException("burlap.mdp.auxiliary.common.SinglePFTF", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration((SADomain) null, (-2317), reflectiveHashableStateFactory0, (-2317), (-2317), (-2317));
      // Undeclared exception!
      try { 
        policyIteration0.performReachabilityFrom((State) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration((SADomain) null, 191, reflectiveHashableStateFactory0, 191, 191, 191);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        policyIteration0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyIteration", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, 27, reflectiveHashableStateFactory0, 38.46342992509089, 27, 27);
      policyIteration0.foundReachableStates = true;
      double double0 = policyIteration0.evaluatePolicy();
      assertEquals(1, policyIteration0.getTotalValueIterations());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      PolicyIteration policyIteration0 = new PolicyIteration(oOSADomain0, 327.6998278240217, (HashableStateFactory) null, 0.0, 327.6998278240217, 50, 50);
      // Undeclared exception!
      try { 
        policyIteration0.evaluatePolicy();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot run VI until the reachable states have been found. Use planFromState method at least once or instead.
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyIteration", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, 7, reflectiveHashableStateFactory0, (-1.0), 7, (-1612));
      policyIteration0.foundReachableStates = true;
      policyIteration0.evaluatePolicy();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        policyIteration0.planFromState(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.policyiteration.PolicyIteration", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, 2064.00878892749, (HashableStateFactory) null, 2064.00878892749, 2064.00878892749, 0, 0);
      policyIteration0.resetSolver();
      assertEquals(2064.00878892749, policyIteration0.getGamma(), 0.01);
      assertEquals(0, policyIteration0.getTotalValueIterations());
      assertEquals(0, policyIteration0.getTotalPolicyIterations());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(pODomain0, (-1.0), reflectiveHashableStateFactory0, (-1.0), 7, 7);
      int int0 = policyIteration0.getTotalPolicyIterations();
      assertEquals(0, int0);
      assertEquals(0, policyIteration0.getTotalValueIterations());
      assertEquals((-1.0), policyIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      PolicyIteration policyIteration0 = new PolicyIteration(oOSADomain0, 327.6998278240217, (HashableStateFactory) null, 0.0, 327.6998278240217, 50, 50);
      policyIteration0.recomputeReachableStates();
      assertEquals(0, policyIteration0.getTotalValueIterations());
      assertEquals(0, policyIteration0.getTotalPolicyIterations());
      assertEquals(327.6998278240217, policyIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration((SADomain) null, 95.0, reflectiveHashableStateFactory0, 0.0, 0, 1901);
      policyIteration0.getComputedPolicy();
      assertEquals(0, policyIteration0.getTotalPolicyIterations());
      assertEquals(0, policyIteration0.getTotalValueIterations());
      assertEquals(95.0, policyIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration((SADomain) null, 252.9, reflectiveHashableStateFactory0, 252.9, (-856), (-856));
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(policyIteration0, 2914.7621632287);
      policyIteration0.setPolicyToEvaluate(boltzmannQPolicy0);
      assertEquals(252.9, policyIteration0.getGamma(), 0.01);
      assertEquals(0, policyIteration0.getTotalValueIterations());
      assertEquals(0, policyIteration0.getTotalPolicyIterations());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PolicyIteration policyIteration0 = new PolicyIteration(oOSADomain0, 0.0, reflectiveHashableStateFactory0, (-3751.6153402), (-3751.6153402), 0, (-1557));
      assertEquals(0.0, policyIteration0.getGamma(), 0.01);
      assertEquals(0, policyIteration0.getTotalPolicyIterations());
      assertEquals(0, policyIteration0.getTotalValueIterations());
  }
}
