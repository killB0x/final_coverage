/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:10:00 GMT 2022
 */

package burlap.behavior.singleagent.planning.stochastic.rtdp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.learnfromdemo.RewardValueProjection;
import burlap.behavior.singleagent.learning.actorcritic.critics.TDLambda;
import burlap.behavior.singleagent.learning.actorcritic.critics.TimeIndexedTDLambda;
import burlap.behavior.singleagent.learning.tdmethods.QLearning;
import burlap.behavior.singleagent.planning.stochastic.dpoperator.DPOperator;
import burlap.behavior.singleagent.planning.stochastic.rtdp.BoundedRTDP;
import burlap.behavior.valuefunction.ConstantValueFunction;
import burlap.behavior.valuefunction.ValueFunction;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.domain.singleagent.mountaincar.MountainCar;
import burlap.mdp.auxiliary.common.SinglePFTF;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.UniformCostRF;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.mdp.singleagent.model.RewardFunction;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.mdp.stochasticgames.JointAction;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import burlap.statehashing.discretized.DiscConfig;
import burlap.statehashing.discretized.IIDiscHashableState;
import burlap.statehashing.maskeddiscretized.IIDiscMaskedHashableState;
import java.util.Hashtable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoundedRTDP_ESTest extends BoundedRTDP_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-23), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-23), (-23));
      int int0 = boundedRTDP0.getNumberOfBellmanUpdates();
      assertEquals(0, boundedRTDP0.getNumberOfSteps());
      assertEquals(0, int0);
      assertEquals((-23.0), boundedRTDP0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      ConstantValueFunction constantValueFunction0 = new ConstantValueFunction(1726.025);
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(oOSADomain0, 1726.025, reflectiveHashableStateFactory0, constantValueFunction0, constantValueFunction0, 0.0, 30);
      BoundedRTDP boundedRTDP1 = new BoundedRTDP((SADomain) null, 0.0, reflectiveHashableStateFactory0, boundedRTDP0, constantValueFunction0, 402.0, 5448);
      Hashtable<Object, Double> hashtable0 = new Hashtable<Object, Double>();
      DiscConfig discConfig0 = new DiscConfig(hashtable0, 95.0);
      IIDiscHashableState iIDiscHashableState0 = new IIDiscHashableState(discConfig0);
      // Undeclared exception!
      try { 
        boundedRTDP1.getGap(iIDiscHashableState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.DynamicProgramming", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ConstantValueFunction constantValueFunction0 = new ConstantValueFunction(1251.91429691);
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-1000.707), (HashableStateFactory) null, constantValueFunction0, constantValueFunction0, 356.88278, 0);
      BoundedRTDP boundedRTDP1 = new BoundedRTDP(pODomain0, 1623.946407254374, (HashableStateFactory) null, constantValueFunction0, boundedRTDP0, 1623.946407254374, 998);
      boundedRTDP1.setValueFunctionToUpperBound();
      assertEquals(0, boundedRTDP1.getNumberOfBellmanUpdates());
      assertEquals(1623.946407254374, boundedRTDP1.getGamma(), 0.01);
      assertEquals(0, boundedRTDP1.getNumberOfSteps());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 130, reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, 130, 130);
      boundedRTDP0.setDebugCode(911);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        boundedRTDP0.planFromState(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.rtdp.BoundedRTDP", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-23), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-23), (-23));
      boundedRTDP0.setRunRolloutsInRevere(true);
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
      assertEquals(0, boundedRTDP0.getNumberOfSteps());
      assertEquals((-23.0), boundedRTDP0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      QLearning qLearning0 = new QLearning(pODomain0, 2895.7283, reflectiveHashableStateFactory0, 2895.7283, 2895.7283);
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 2895.7283, reflectiveHashableStateFactory0, qLearning0, qLearning0, 2895.7283, 837);
      boundedRTDP0.setDefaultValueFunctionAfterARollout(true);
      assertEquals(0, boundedRTDP0.getNumberOfSteps());
      assertEquals(2895.7283, boundedRTDP0.getGamma(), 0.01);
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP((SADomain) null, (-4042.9804675416), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-4042.9804675416), 0);
      boundedRTDP0.setMaxDifference(0.0);
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
      assertEquals((-4042.9804675416), boundedRTDP0.getGamma(), 0.01);
      assertEquals(0, boundedRTDP0.getNumberOfSteps());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(oOSADomain0, (-16.0291605985), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, 3538.261947813541, (-1182));
      boundedRTDP0.setMaxRolloutDepth(20);
      assertEquals((-16.0291605985), boundedRTDP0.getGamma(), 0.01);
      assertEquals(0, boundedRTDP0.getNumberOfSteps());
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TDLambda tDLambda0 = new TDLambda(0, reflectiveHashableStateFactory0, (-173.0), 2895.7283, 783.314);
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 2531.776518, reflectiveHashableStateFactory0, tDLambda0, tDLambda0, 0, 0);
      boundedRTDP0.setMaxNumberOfRollouts(583);
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
      assertEquals(2531.776518, boundedRTDP0.getGamma(), 0.01);
      assertEquals(0, boundedRTDP0.getNumberOfSteps());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      QLearning qLearning0 = new QLearning(pODomain0, 2895.7283, reflectiveHashableStateFactory0, 2895.7283, 2895.7283);
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 837, reflectiveHashableStateFactory0, qLearning0, qLearning0, 2895.7283, 837);
      boundedRTDP0.numSteps = 2;
      int int0 = boundedRTDP0.getNumberOfSteps();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 14, reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, 14, 14);
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
      
      boundedRTDP0.numBellmanUpdates = 14;
      int int0 = boundedRTDP0.getNumberOfBellmanUpdates();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-1), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-1), (-1));
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
      
      boundedRTDP0.numBellmanUpdates = (-1);
      int int0 = boundedRTDP0.getNumberOfBellmanUpdates();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 130, reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, 130, 130);
      DeepOOState deepOOState0 = new DeepOOState();
      // Undeclared exception!
      try { 
        boundedRTDP0.runRollout(deepOOState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-3079.07), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-174), (-174));
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        boundedRTDP0.runRollout(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.rtdp.BoundedRTDP", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-23), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-23), (-23));
      BlockDudeState blockDudeState0 = new BlockDudeState();
      // Undeclared exception!
      try { 
        boundedRTDP0.planFromState(blockDudeState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      MountainCar.MCPhysicsParams mountainCar_MCPhysicsParams0 = new MountainCar.MCPhysicsParams();
      MountainCar.MCModel mountainCar_MCModel0 = new MountainCar.MCModel(mountainCar_MCPhysicsParams0);
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null);
      FactoredModel factoredModel0 = new FactoredModel(mountainCar_MCModel0, uniformCostRF0, singlePFTF0);
      pODomain0.setModel(factoredModel0);
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 61, reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, 61, 61);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        boundedRTDP0.planFromState(tabularBeliefState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7b7eb850)
         //
         verifyException("burlap.mdp.auxiliary.common.SinglePFTF", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP((SADomain) null, (-2837), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-2837), (-2837));
      // Undeclared exception!
      try { 
        boundedRTDP0.maxQ((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.action.ActionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FactoredModel factoredModel0 = new FactoredModel();
      pODomain0.setModel(factoredModel0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 16, reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, 16, 16);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        boundedRTDP0.getNextStateBySampling(tabularBeliefState0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factored Model cannot enumerate transition distribution, because the state model does not implement FullStateModel
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 0, reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, 0, 0);
      // Undeclared exception!
      try { 
        boundedRTDP0.getNextStateBySampling(blockDudeAgent0, (Action) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.rtdp.BoundedRTDP", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-1506), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-1506), (-1506));
      FactoredModel factoredModel0 = new FactoredModel();
      boundedRTDP0.setModel(factoredModel0);
      // Undeclared exception!
      try { 
        boundedRTDP0.getNextStateByMaxMargin((State) null, (Action) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factored Model cannot enumerate transition distribution, because the state model does not implement FullStateModel
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-23), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-23), (-23));
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      JointAction jointAction0 = new JointAction();
      // Undeclared exception!
      try { 
        boundedRTDP0.getNextStateByMaxMargin(tabularBeliefState0, jointAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.rtdp.BoundedRTDP", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP.StateSelectionMode boundedRTDP_StateSelectionMode0 = BoundedRTDP.StateSelectionMode.MAXMARGIN;
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-1506), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-1506), (-1506));
      boundedRTDP0.setStateSelectionMode(boundedRTDP_StateSelectionMode0);
      FactoredModel factoredModel0 = new FactoredModel();
      boundedRTDP0.setModel(factoredModel0);
      // Undeclared exception!
      try { 
        boundedRTDP0.getNextState((State) null, (Action) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factored Model cannot enumerate transition distribution, because the state model does not implement FullStateModel
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection((RewardFunction) null);
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(oOSADomain0, (-1826.17832), reflectiveHashableStateFactory0, rewardValueProjection0, rewardValueProjection0, 224.2723475, 0);
      boundedRTDP0.setValueFunctionToLowerBound();
      assertEquals(0, boundedRTDP0.getNumberOfSteps());
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
      assertEquals((-1826.17832), boundedRTDP0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 0, reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, 0, 0);
      // Undeclared exception!
      try { 
        boundedRTDP0.maxQ(blockDudeAgent0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-2829), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-2829), (-2829));
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      BoundedRTDP.StateSelectionMode boundedRTDP_StateSelectionMode0 = BoundedRTDP.StateSelectionMode.WEIGHTEDMARGIN;
      boundedRTDP0.setStateSelectionMode(boundedRTDP_StateSelectionMode0);
      // Undeclared exception!
      try { 
        boundedRTDP0.getNextState(tabularBeliefState0, (Action) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.rtdp.BoundedRTDP", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 0, reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, 0, 0);
      // Undeclared exception!
      try { 
        boundedRTDP0.getNextState(blockDudeAgent0, (Action) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.rtdp.BoundedRTDP", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIDiscMaskedHashableState iIDiscMaskedHashableState0 = new IIDiscMaskedHashableState();
      BoundedRTDP.StateSelectionAndExpectedGap boundedRTDP_StateSelectionAndExpectedGap0 = new BoundedRTDP.StateSelectionAndExpectedGap(iIDiscMaskedHashableState0, 1408.9);
      assertEquals(1408.9, boundedRTDP_StateSelectionAndExpectedGap0.expectedGap, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ConstantValueFunction constantValueFunction0 = new ConstantValueFunction(0.0);
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda(2556.8354581448484, (HashableStateFactory) null, 3894.103365, constantValueFunction0, 3894.103365, (-1182));
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 2721.0, (HashableStateFactory) null, timeIndexedTDLambda0, timeIndexedTDLambda0, 0.15707963267948966, 3);
      boundedRTDP0.setDefaultValueFunctionAfterARollout(false);
      assertEquals(2721.0, boundedRTDP0.getGamma(), 0.01);
      assertEquals(0, boundedRTDP0.getNumberOfSteps());
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, (-23), reflectiveHashableStateFactory0, (ValueFunction) null, (ValueFunction) null, (-23), (-23));
      // Undeclared exception!
      try { 
        boundedRTDP0.setOperator((DPOperator) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bounded RTDP does not currently support custom operators.
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.rtdp.BoundedRTDP", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ConstantValueFunction constantValueFunction0 = new ConstantValueFunction(0.0);
      TimeIndexedTDLambda timeIndexedTDLambda0 = new TimeIndexedTDLambda(2556.8354581448484, (HashableStateFactory) null, 3894.103365, constantValueFunction0, 3894.103365, (-1182));
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 2721.0, (HashableStateFactory) null, timeIndexedTDLambda0, timeIndexedTDLambda0, 0.15707963267948966, 3);
      int int0 = boundedRTDP0.getNumberOfSteps();
      assertEquals(2721.0, boundedRTDP0.getGamma(), 0.01);
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      QLearning qLearning0 = new QLearning(pODomain0, (-340.3), reflectiveHashableStateFactory0, (-340.3), 2895.7283);
      BoundedRTDP boundedRTDP0 = new BoundedRTDP(pODomain0, 0.0, reflectiveHashableStateFactory0, qLearning0, qLearning0, 153.369933623896, 0);
      boundedRTDP0.setRunRolloutsInRevere(false);
      assertEquals(0.0, boundedRTDP0.getGamma(), 0.01);
      assertEquals(0, boundedRTDP0.getNumberOfBellmanUpdates());
      assertEquals(0, boundedRTDP0.getNumberOfSteps());
  }
}
