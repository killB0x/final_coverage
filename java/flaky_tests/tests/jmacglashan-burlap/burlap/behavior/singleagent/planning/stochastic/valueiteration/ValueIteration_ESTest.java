/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:31:17 GMT 2022
 */

package burlap.behavior.singleagent.planning.stochastic.valueiteration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.learning.tdmethods.SarsaLam;
import burlap.behavior.singleagent.planning.stochastic.dpoperator.SoftmaxOperator;
import burlap.behavior.singleagent.planning.stochastic.valueiteration.ValueIteration;
import burlap.domain.singleagent.blockdude.state.BlockDudeState;
import burlap.domain.singleagent.frostbite.FrostbiteModel;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.GoalBasedRF;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import javax.management.RuntimeErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValueIteration_ESTest extends ValueIteration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      ValueIteration valueIteration0 = new ValueIteration((SADomain) null, 13.0, reflectiveHashableStateFactory0, 0.0, Integer.MAX_VALUE);
      valueIteration0.foundReachableStates = true;
      // Undeclared exception!
      valueIteration0.runVI();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BlockDudeState blockDudeState0 = new BlockDudeState();
      ValueIteration valueIteration0 = new ValueIteration((SADomain) null, 4, reflectiveHashableStateFactory0, 4, 4);
      // Undeclared exception!
      try { 
        valueIteration0.planFromState(blockDudeState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ValueIteration valueIteration0 = new ValueIteration(pODomain0, (-7), reflectiveHashableStateFactory0, (-7), (-7));
      // Undeclared exception!
      try { 
        valueIteration0.planFromState(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.ValueIteration", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel(455);
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 455);
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, 455, reflectiveHashableStateFactory0, 455, 455);
      valueIteration0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      SarsaLam sarsaLam0 = new SarsaLam(oOSADomain0, (-596.99423), reflectiveHashableStateFactory0, (-1634.1187), (-496.5), (-1344.8421972995147));
      valueIteration0.setValueFunctionInitialization(sarsaLam0);
      // Undeclared exception!
      try { 
        valueIteration0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.tdmethods.QLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      ValueIteration valueIteration0 = new ValueIteration(pODomain0, (-7), reflectiveHashableStateFactory0, (-7), (-7));
      // Undeclared exception!
      try { 
        valueIteration0.performReachabilityFrom((State) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ValueIteration valueIteration0 = new ValueIteration(pODomain0, (-7), reflectiveHashableStateFactory0, (-7), (-7));
      // Undeclared exception!
      try { 
        valueIteration0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.ValueIteration", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel(493);
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 493);
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, 493, reflectiveHashableStateFactory0, 493, 493);
      valueIteration0.setModel(factoredModel0);
      UniversalActionType universalActionType0 = new UniversalActionType("EJ", (Action) null);
      valueIteration0.addActionType(universalActionType0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        valueIteration0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.domain.singleagent.frostbite.state.FrostbiteState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.domain.singleagent.frostbite.state.FrostbiteState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7ba10e7a)
         //
         verifyException("burlap.domain.singleagent.frostbite.FrostbiteModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 5057.295090888955);
      FrostbiteModel frostbiteModel0 = new FrostbiteModel(1543);
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, (-298.92678546339096), reflectiveHashableStateFactory0, 1147.0164628296, (-17));
      valueIteration0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      valueIteration0.performReachabilityFrom(tabularBeliefState0);
      boolean boolean0 = valueIteration0.performReachabilityFrom(tabularBeliefState0);
      assertEquals((-298.92678546339096), valueIteration0.getGamma(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      ValueIteration valueIteration0 = new ValueIteration((SADomain) null, 14, reflectiveHashableStateFactory0, 14, 14);
      valueIteration0.foundReachableStates = true;
      valueIteration0.runVI();
      assertEquals(14.0, valueIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueIteration valueIteration0 = new ValueIteration((SADomain) null, 13.0, (HashableStateFactory) null, (-7.80962933968), 2);
      valueIteration0.foundReachableStates = true;
      valueIteration0.runVI();
      assertEquals(13.0, valueIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel(491);
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 491);
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, 491, reflectiveHashableStateFactory0, 491, 491);
      valueIteration0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      valueIteration0.performReachabilityFrom(tabularBeliefState0);
      // Undeclared exception!
      try { 
        valueIteration0.runVI();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.dpoperator.BellmanOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      ValueIteration valueIteration0 = new ValueIteration((SADomain) null, (-7), reflectiveHashableStateFactory0, (-7), (-7));
      valueIteration0.foundReachableStates = true;
      valueIteration0.runVI();
      assertEquals((-7.0), valueIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel(493);
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 493);
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, 493, reflectiveHashableStateFactory0, 493, 493);
      UniversalActionType universalActionType0 = new UniversalActionType("p");
      valueIteration0.addActionType(universalActionType0);
      valueIteration0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        valueIteration0.planFromState(tabularBeliefState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.domain.singleagent.frostbite.state.FrostbiteState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.domain.singleagent.frostbite.state.FrostbiteState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7ba10e7a)
         //
         verifyException("burlap.domain.singleagent.frostbite.FrostbiteModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel((-2429));
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 527);
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, 527, reflectiveHashableStateFactory0, (-2429), 837493);
      SoftmaxOperator softmaxOperator0 = new SoftmaxOperator();
      valueIteration0.setOperator(softmaxOperator0);
      valueIteration0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      valueIteration0.planFromState(tabularBeliefState0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel(503);
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 503);
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, 503, reflectiveHashableStateFactory0, 503, 503);
      SoftmaxOperator softmaxOperator0 = new SoftmaxOperator();
      valueIteration0.setOperator(softmaxOperator0);
      valueIteration0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      valueIteration0.planFromState(tabularBeliefState0);
      assertEquals(503.0, valueIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      ValueIteration valueIteration0 = new ValueIteration((SADomain) null, 2759.171216676489, reflectiveHashableStateFactory0, (-1238.601332158), 8);
      // Undeclared exception!
      try { 
        valueIteration0.runVI();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot run VI until the reachable states have been found. Use the planFromState or performReachabilityFrom method at least once before calling runVI.
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.ValueIteration", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel((-533));
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, (-533));
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, (-533), reflectiveHashableStateFactory0, (-533), (-533));
      valueIteration0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      valueIteration0.planFromState(tabularBeliefState0);
      valueIteration0.planFromState(tabularBeliefState0);
      assertEquals((-533.0), valueIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel((-533));
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, (-533));
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, (-533), reflectiveHashableStateFactory0, (-533), (-533));
      valueIteration0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      valueIteration0.performReachabilityFrom(tabularBeliefState0);
      valueIteration0.planFromState(tabularBeliefState0);
      assertEquals((-533.0), valueIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel(503);
      NullTermination nullTermination0 = new NullTermination();
      GoalBasedRF goalBasedRF0 = new GoalBasedRF(nullTermination0, 503);
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, goalBasedRF0, nullTermination0);
      OOSADomain oOSADomain0 = new OOSADomain();
      ValueIteration valueIteration0 = new ValueIteration(oOSADomain0, 503, reflectiveHashableStateFactory0, 503, 503);
      valueIteration0.setModel(factoredModel0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        valueIteration0.planFromState(tabularBeliefState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.dpoperator.BellmanOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ValueIteration valueIteration0 = new ValueIteration((SADomain) null, (-1136.24059154), (HashableStateFactory) null, 0.0, (-1390));
      valueIteration0.recomputeReachableStates();
      assertEquals((-1136.24059154), valueIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      ValueIteration valueIteration0 = new ValueIteration((SADomain) null, 2759.171216676489, reflectiveHashableStateFactory0, (-1238.601332158), 8);
      valueIteration0.toggleReachabiltiyTerminalStatePruning(true);
      assertEquals(2759.171216676489, valueIteration0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ValueIteration valueIteration0 = new ValueIteration((SADomain) null, (-1.5707963267948966), (HashableStateFactory) null, (-1.5707963267948966), (-2102));
      valueIteration0.resetSolver();
      assertEquals((-1.5707963267948966), valueIteration0.getGamma(), 0.01);
  }
}
