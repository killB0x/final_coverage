/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:39:34 GMT 2022
 */

package burlap.behavior.singleagent.planning.deterministic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.planning.deterministic.DeterministicPlanner;
import burlap.behavior.singleagent.planning.deterministic.informed.NullHeuristic;
import burlap.behavior.singleagent.planning.deterministic.informed.astar.AStar;
import burlap.behavior.singleagent.planning.deterministic.uninformed.bfs.BFS;
import burlap.behavior.singleagent.planning.deterministic.uninformed.dfs.DFS;
import burlap.behavior.singleagent.planning.deterministic.uninformed.dfs.LimitedMemoryDFS;
import burlap.mdp.auxiliary.common.GoalConditionTF;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.auxiliary.common.SinglePFTF;
import burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT;
import burlap.mdp.auxiliary.stateconditiontest.StateConditionTest;
import burlap.mdp.auxiliary.stateconditiontest.TFGoalCondition;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeterministicPlanner_ESTest extends DeterministicPlanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null, true);
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(singlePFTF0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      DFS dFS0 = new DFS(oOSADomain0, tFGoalCondition0, reflectiveHashableStateFactory0);
      dFS0.resetSolver();
      assertEquals(1.0, dFS0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      LimitedMemoryDFS limitedMemoryDFS0 = new LimitedMemoryDFS(pODomain0, tFGoalCondition0, reflectiveHashableStateFactory0, (-1), false, true, 117);
      limitedMemoryDFS0.deterministicPlannerInit(pODomain0, tFGoalCondition0, reflectiveHashableStateFactory0);
      assertEquals(1.0, limitedMemoryDFS0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(tFGoalCondition0);
      tFGoalCondition0.setTf(goalConditionTF0);
      AStar aStar0 = new AStar((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      // Undeclared exception!
      try { 
        aStar0.querySelectedActionForState(tabularBeliefState0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      AStar aStar0 = new AStar((SADomain) null, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      // Undeclared exception!
      try { 
        aStar0.querySelectedActionForState((State) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      AStar aStar0 = new AStar((SADomain) null, singlePFSCT0, reflectiveHashableStateFactory0, nullHeuristic0);
      // Undeclared exception!
      try { 
        aStar0.querySelectedActionForState(tabularBeliefState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5907eb14)
         //
         verifyException("burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SADomain sADomain0 = new SADomain();
      AStar aStar0 = new AStar(sADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0, nullHeuristic0);
      // Undeclared exception!
      try { 
        aStar0.hasCachedPlanForState((State) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      AStar aStar0 = new AStar((SADomain) null, (StateConditionTest) null, (HashableStateFactory) null, nullHeuristic0);
      // Undeclared exception!
      try { 
        aStar0.hasCachedPlanForState(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.MDPSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      AStar aStar0 = new AStar((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      // Undeclared exception!
      try { 
        aStar0.querySelectedActionForState(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.informed.BestFirst", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NullTermination nullTermination0 = new NullTermination();
      TFGoalCondition tFGoalCondition0 = new TFGoalCondition(nullTermination0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      NullHeuristic nullHeuristic0 = new NullHeuristic();
      AStar aStar0 = new AStar((SADomain) null, tFGoalCondition0, reflectiveHashableStateFactory0, nullHeuristic0);
      boolean boolean0 = aStar0.hasCachedPlanForState(tabularBeliefState0);
      assertEquals(1.0, aStar0.getGamma(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFS bFS0 = new BFS(sADomain0, singlePFSCT0, reflectiveHashableStateFactory0);
      DeterministicPlanner.PlanningFailedException deterministicPlanner_PlanningFailedException0 = bFS0.new PlanningFailedException();
  }
}
