/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:27:22 GMT 2022
 */

package burlap.behavior.singleagent.planning.deterministic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.planning.deterministic.SDPlannerPolicy;
import burlap.behavior.singleagent.planning.deterministic.uninformed.bfs.BFS;
import burlap.behavior.singleagent.planning.deterministic.uninformed.dfs.DFS;
import burlap.behavior.singleagent.planning.stochastic.DynamicProgramming;
import burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT;
import burlap.mdp.auxiliary.stateconditiontest.StateConditionTest;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import javax.management.RuntimeErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SDPlannerPolicy_ESTest extends SDPlannerPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      OOSADomain oOSADomain0 = new OOSADomain();
      BFS bFS0 = new BFS(oOSADomain0, (StateConditionTest) null, (HashableStateFactory) null);
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy(bFS0);
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.policyDistribution(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.MDPSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      OOSADomain oOSADomain0 = new OOSADomain();
      BFS bFS0 = new BFS(oOSADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0);
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy(bFS0);
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.actionProb(tabularBeliefState0, (Action) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.SDPlannerPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      SimpleAction simpleAction0 = new SimpleAction();
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.actionProb(tabularBeliefState0, simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The valueFunction used by this Policy is not defined; therefore, the policy is undefined.
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.SDPlannerPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      OOSADomain oOSADomain0 = new OOSADomain();
      SimpleAction simpleAction0 = new SimpleAction();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      DFS dFS0 = new DFS(oOSADomain0, singlePFSCT0, (HashableStateFactory) null);
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy(dFS0);
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.actionProb(tabularBeliefState0, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.MDPSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      OOSADomain oOSADomain0 = new OOSADomain();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      DFS dFS0 = new DFS(oOSADomain0, singlePFSCT0, (HashableStateFactory) null);
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy(dFS0);
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.action(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.MDPSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      OOSADomain oOSADomain0 = new OOSADomain();
      BFS bFS0 = new BFS(oOSADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0);
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy(bFS0);
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.action(tabularBeliefState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.SDPlannerPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy();
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.action((State) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The valueFunction used by this Policy is not defined; therefore, the policy is undefined.
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.SDPlannerPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      OOSADomain oOSADomain0 = new OOSADomain();
      BFS bFS0 = new BFS(oOSADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0);
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy(bFS0);
      boolean boolean0 = sDPlannerPolicy0.definedFor(tabularBeliefState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.definedFor(tabularBeliefState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The valueFunction used by this Policy is not defined; therefore, the policy is undefined.
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.SDPlannerPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      BFS bFS0 = new BFS(oOSADomain0, (StateConditionTest) null, (HashableStateFactory) null);
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy(bFS0);
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.definedFor((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.MDPSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy();
      DeepOOState deepOOState0 = new DeepOOState();
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.policyDistribution(deepOOState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The valueFunction used by this Policy is not defined; therefore, the policy is undefined.
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.SDPlannerPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      OOSADomain oOSADomain0 = new OOSADomain();
      BFS bFS0 = new BFS(oOSADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0);
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy(bFS0);
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.policyDistribution(tabularBeliefState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.SDPlannerPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy();
      DynamicProgramming dynamicProgramming0 = new DynamicProgramming();
      // Undeclared exception!
      try { 
        sDPlannerPolicy0.setSolver(dynamicProgramming0);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.deterministic.SDPlannerPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      OOSADomain oOSADomain0 = new OOSADomain();
      BFS bFS0 = new BFS(oOSADomain0, (StateConditionTest) null, reflectiveHashableStateFactory0);
      SDPlannerPolicy sDPlannerPolicy0 = new SDPlannerPolicy(bFS0);
      sDPlannerPolicy0.setSolver(bFS0);
      assertEquals(0, bFS0.getDebugCode());
  }
}
