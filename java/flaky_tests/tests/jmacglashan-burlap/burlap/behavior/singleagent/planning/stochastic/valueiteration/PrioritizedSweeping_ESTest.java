/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:33:39 GMT 2022
 */

package burlap.behavior.singleagent.planning.stochastic.valueiteration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.planning.stochastic.valueiteration.PrioritizedSweeping;
import burlap.domain.singleagent.frostbite.FrostbiteModel;
import burlap.mdp.auxiliary.common.GoalConditionTF;
import burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.state.NullState;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.SingleGoalPFRF;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.statehashing.HashableState;
import burlap.statehashing.ReflectiveHashableStateFactory;
import burlap.statehashing.discretized.DiscConfig;
import burlap.statehashing.discretized.IDDiscHashableState;
import burlap.statehashing.masked.IIMaskedHashableState;
import burlap.statehashing.maskeddiscretized.IDDiscMaskedHashableState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrioritizedSweeping_ESTest extends PrioritizedSweeping_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(pODomain0, (-1178), reflectiveHashableStateFactory0, (-1178), (-1178));
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode0 = prioritizedSweeping0.getNodeFor(tabularBeliefState0);
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode1 = prioritizedSweeping0.new BPTRNode(prioritizedSweeping_BPTRNode0.sh);
      prioritizedSweeping_BPTRNode0.addBackTransition(prioritizedSweeping_BPTRNode1);
      assertEquals(1.7976931348623157E308, prioritizedSweeping_BPTRNode1.priority, 0.01);
      assertEquals(0.0, prioritizedSweeping_BPTRNode0.maxSelfTransitionProb, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(sADomain0, (-835), reflectiveHashableStateFactory0, 0, 0);
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode0 = prioritizedSweeping0.new BPTRNode(iDDiscHashableState0);
      prioritizedSweeping_BPTRNode0.maxSelfTransitionProb = 330.9092853;
      prioritizedSweeping_BPTRNode0.addBackTransition(prioritizedSweeping_BPTRNode0);
      assertEquals(330.9092853, prioritizedSweeping_BPTRNode0.maxSelfTransitionProb, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SADomain sADomain0 = new SADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(sADomain0, 330.9092853, reflectiveHashableStateFactory0, (-1178), 1);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      prioritizedSweeping0.maxIterations = 1;
      // Undeclared exception!
      try { 
        prioritizedSweeping0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.PrioritizedSweeping", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(pODomain0, (-17), reflectiveHashableStateFactory0, (-17), (-17));
      prioritizedSweeping0.foundReachableStates = true;
      prioritizedSweeping0.runVI();
      assertEquals((-17.0), prioritizedSweeping0.getGamma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(pODomain0, 26, reflectiveHashableStateFactory0, 26, 26);
      prioritizedSweeping0.maxIterations = (-246);
      prioritizedSweeping0.foundReachableStates = true;
      // Undeclared exception!
      try { 
        prioritizedSweeping0.runVI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.PrioritizedSweeping", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(oOSADomain0, (-1178), reflectiveHashableStateFactory0, (-1178), (-1178));
      IIMaskedHashableState iIMaskedHashableState0 = new IIMaskedHashableState();
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode0 = prioritizedSweeping0.getNodeFor(iIMaskedHashableState0);
      PrioritizedSweeping.BPTR prioritizedSweeping_BPTR0 = prioritizedSweeping0.new BPTR(prioritizedSweeping_BPTRNode0, iIMaskedHashableState0);
      assertEquals(0.0, prioritizedSweeping_BPTR0.forwardMaxProbability, 0.01);
      assertEquals(1.7976931348623157E308, prioritizedSweeping_BPTRNode0.priority, 0.01);
      assertEquals(0.0, prioritizedSweeping_BPTRNode0.maxSelfTransitionProb, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrioritizedSweeping.BPTRNodeComparator prioritizedSweeping_BPTRNodeComparator0 = new PrioritizedSweeping.BPTRNodeComparator();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(pODomain0, (-1), reflectiveHashableStateFactory0, (-1), (-1));
      prioritizedSweeping0.foundReachableStates = true;
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      prioritizedSweeping0.getNodeFor(iDDiscHashableState0);
      // Undeclared exception!
      try { 
        prioritizedSweeping0.runVI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.DynamicProgramming", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(pODomain0, (-1157), reflectiveHashableStateFactory0, (-1157), (-1157));
      NullState nullState0 = NullState.instance;
      // Undeclared exception!
      try { 
        prioritizedSweeping0.performReachabilityFrom(nullState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      FrostbiteModel frostbiteModel0 = new FrostbiteModel((-2527));
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(singlePFSCT0);
      FactoredModel factoredModel0 = new FactoredModel(frostbiteModel0, singleGoalPFRF0, goalConditionTF0);
      pODomain0.setModel(factoredModel0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(pODomain0, (-532), reflectiveHashableStateFactory0, (-532), (-532));
      // Undeclared exception!
      try { 
        prioritizedSweeping0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3cce9363)
         //
         verifyException("burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(pODomain0, 27, reflectiveHashableStateFactory0, 27, (-2145649759));
      prioritizedSweeping0.getNodeFor((HashableState) null);
      // Undeclared exception!
      try { 
        prioritizedSweeping0.getNodeFor((HashableState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.PrioritizedSweeping$BPTRNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      UniversalActionType universalActionType0 = new UniversalActionType("uG2[n95[+");
      SADomain sADomain0 = oOSADomain0.addActionType(universalActionType0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(sADomain0, 0, reflectiveHashableStateFactory0, 0, 0);
      IDDiscMaskedHashableState iDDiscMaskedHashableState0 = new IDDiscMaskedHashableState();
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode0 = prioritizedSweeping0.new BPTRNode(iDDiscMaskedHashableState0);
      PrioritizedSweeping.BPTR prioritizedSweeping_BPTR0 = null;
      try {
        prioritizedSweeping_BPTR0 = prioritizedSweeping0.new BPTR(prioritizedSweeping_BPTRNode0, iDDiscMaskedHashableState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.PrioritizedSweeping$BPTR", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(oOSADomain0, (-4227.8295049674), reflectiveHashableStateFactory0, 0.0, 0);
      DiscConfig discConfig0 = new DiscConfig(0);
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState(discConfig0);
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode0 = prioritizedSweeping0.new BPTRNode(iDDiscHashableState0);
      Object object0 = new Object();
      boolean boolean0 = prioritizedSweeping_BPTRNode0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, prioritizedSweeping_BPTRNode0.maxSelfTransitionProb, 0.01);
      assertEquals(1.7976931348623157E308, prioritizedSweeping_BPTRNode0.priority, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PODomain pODomain0 = new PODomain();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(pODomain0, 0.0, reflectiveHashableStateFactory0, 0.0, (-1032));
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode0 = prioritizedSweeping0.new BPTRNode(tabularBeliefState0);
      boolean boolean0 = prioritizedSweeping_BPTRNode0.equals((Object) null);
      assertEquals(0.0, prioritizedSweeping_BPTRNode0.maxSelfTransitionProb, 0.01);
      assertEquals(1.7976931348623157E308, prioritizedSweeping_BPTRNode0.priority, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(oOSADomain0, (-1178), reflectiveHashableStateFactory0, (-1178), (-1178));
      IDDiscMaskedHashableState iDDiscMaskedHashableState0 = new IDDiscMaskedHashableState();
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode0 = prioritizedSweeping0.new BPTRNode(iDDiscMaskedHashableState0);
      prioritizedSweeping_BPTRNode0.maxSelfTransitionProb = (double) (-1178);
      prioritizedSweeping_BPTRNode0.addBackTransition(prioritizedSweeping_BPTRNode0);
      assertEquals((-1178.0), prioritizedSweeping_BPTRNode0.maxSelfTransitionProb, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(oOSADomain0, (-3722.0), reflectiveHashableStateFactory0, 0.0, 0);
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode0 = prioritizedSweeping0.new BPTRNode(iDDiscHashableState0);
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode1 = prioritizedSweeping0.getNodeFor((HashableState) null);
      prioritizedSweeping_BPTRNode1.addBackTransition(prioritizedSweeping_BPTRNode0);
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode2 = prioritizedSweeping0.new BPTRNode(prioritizedSweeping_BPTRNode0.sh);
      prioritizedSweeping_BPTRNode1.addBackTransition(prioritizedSweeping_BPTRNode2);
      assertEquals(1.7976931348623157E308, prioritizedSweeping_BPTRNode2.priority, 0.01);
      assertEquals(0.0, prioritizedSweeping_BPTRNode2.maxSelfTransitionProb, 0.01);
      assertEquals(1.7976931348623157E308, prioritizedSweeping_BPTRNode0.priority, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(oOSADomain0, (-3722.0), reflectiveHashableStateFactory0, 0.0, 0);
      IDDiscHashableState iDDiscHashableState0 = new IDDiscHashableState();
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode0 = prioritizedSweeping0.new BPTRNode(iDDiscHashableState0);
      PrioritizedSweeping.BPTRNode prioritizedSweeping_BPTRNode1 = prioritizedSweeping0.getNodeFor((HashableState) null);
      assertNotNull(prioritizedSweeping_BPTRNode1);
      
      prioritizedSweeping_BPTRNode1.addBackTransition(prioritizedSweeping_BPTRNode0);
      prioritizedSweeping_BPTRNode1.addBackTransition(prioritizedSweeping_BPTRNode0);
      assertEquals(0.0, prioritizedSweeping_BPTRNode1.maxSelfTransitionProb, 0.01);
      assertEquals(1.7976931348623157E308, prioritizedSweeping_BPTRNode1.priority, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(oOSADomain0, (-1178), reflectiveHashableStateFactory0, (-1178), (-1178));
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      prioritizedSweeping0.getNodeFor(tabularBeliefState0);
      // Undeclared exception!
      try { 
        prioritizedSweeping0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.PrioritizedSweeping", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(pODomain0, 0, reflectiveHashableStateFactory0, 0, 0);
      prioritizedSweeping0.foundReachableStates = true;
      prioritizedSweeping0.runVI();
      assertEquals(0, prioritizedSweeping0.getDebugCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(oOSADomain0, (-3722.0), reflectiveHashableStateFactory0, 0.0, 0);
      // Undeclared exception!
      try { 
        prioritizedSweeping0.runVI();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot run VI until the reachable states have been found. Use the planFromState or performReachabilityFrom method at least once before calling runVI.
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.PrioritizedSweeping", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OOSADomain oOSADomain0 = new OOSADomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PrioritizedSweeping prioritizedSweeping0 = new PrioritizedSweeping(oOSADomain0, (-1178), reflectiveHashableStateFactory0, (-1178), (-1178));
      IIMaskedHashableState iIMaskedHashableState0 = new IIMaskedHashableState();
      prioritizedSweeping0.getNodeFor(iIMaskedHashableState0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        prioritizedSweeping0.performReachabilityFrom(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.planning.stochastic.valueiteration.PrioritizedSweeping", e);
      }
  }
}
