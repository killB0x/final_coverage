/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:48:14 GMT 2022
 */

package burlap.behavior.singleagent.options.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.policy.BoltzmannQPolicy;
import burlap.behavior.policy.GreedyQPolicy;
import burlap.behavior.policy.Policy;
import burlap.behavior.policy.RandomPolicy;
import burlap.behavior.singleagent.auxiliary.StateEnumerator;
import burlap.behavior.singleagent.learnfromdemo.RewardValueProjection;
import burlap.behavior.singleagent.learning.tdmethods.QLearning;
import burlap.behavior.singleagent.learning.tdmethods.SarsaLam;
import burlap.behavior.singleagent.options.MacroAction;
import burlap.behavior.singleagent.options.Option;
import burlap.behavior.singleagent.options.SubgoalOption;
import burlap.behavior.singleagent.options.model.BFSMarkovOptionModel;
import burlap.datastructures.HashedAggregator;
import burlap.domain.singleagent.blockdude.BlockDudeModel;
import burlap.domain.singleagent.graphdefined.GraphDefinedDomain;
import burlap.mdp.auxiliary.common.GoalConditionTF;
import burlap.mdp.auxiliary.common.NullTermination;
import burlap.mdp.auxiliary.common.SinglePFTF;
import burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.core.oo.state.generic.GenericOOState;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.common.SingleGoalPFRF;
import burlap.mdp.singleagent.common.UniformCostRF;
import burlap.mdp.singleagent.model.DelegatedModel;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.mdp.singleagent.model.SampleModel;
import burlap.mdp.singleagent.model.TransitionProb;
import burlap.mdp.singleagent.oo.OOSADomain;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.mdp.stochasticgames.JointAction;
import burlap.mdp.stochasticgames.oo.OOSGDomain;
import burlap.statehashing.HashableState;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.management.RuntimeErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BFSMarkovOptionModel_ESTest extends BFSMarkovOptionModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullTermination nullTermination0 = new NullTermination();
      factoredModel0.setTf(nullTermination0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0.0, reflectiveHashableStateFactory0);
      boolean boolean0 = bFSMarkovOptionModel0.terminal((State) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      HashedAggregator<HashableState> hashedAggregator0 = new HashedAggregator<HashableState>(0, 0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0, reflectiveHashableStateFactory0);
      bFSMarkovOptionModel0.setMinProb(0.0);
      SubgoalOption subgoalOption0 = new SubgoalOption();
      double double0 = bFSMarkovOptionModel0.computeTransitions((State) null, subgoalOption0, hashedAggregator0, (double[]) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullTermination nullTermination0 = new NullTermination();
      factoredModel0.setTf(nullTermination0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 4988.0, reflectiveHashableStateFactory0);
      OOSADomain oOSADomain0 = new OOSADomain();
      RandomPolicy randomPolicy0 = new RandomPolicy(oOSADomain0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      SubgoalOption subgoalOption0 = new SubgoalOption("]-kSo", randomPolicy0, singlePFSCT0, singlePFSCT0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.transitions(tabularBeliefState0, subgoalOption0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.policy.RandomPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullTermination nullTermination0 = new NullTermination();
      factoredModel0.setTf(nullTermination0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 4988.0, reflectiveHashableStateFactory0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      SADomain sADomain0 = new SADomain();
      SarsaLam sarsaLam0 = new SarsaLam(sADomain0, 4988.0, reflectiveHashableStateFactory0, 0.15707963267948966, 108.808, (-329), 177.31);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(sarsaLam0);
      SubgoalOption subgoalOption0 = new SubgoalOption("", greedyQPolicy0, singlePFSCT0, singlePFSCT0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.transitions(tabularBeliefState0, subgoalOption0);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.tdmethods.QLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      SubgoalOption subgoalOption0 = new SubgoalOption("Cannot compute option transition function probability distribution, because the underlying state model isnot a FullModel", (Policy) null, singlePFSCT0, singlePFSCT0);
      BlockDudeModel blockDudeModel0 = new BlockDudeModel(1614, 1614);
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null);
      GoalConditionTF goalConditionTF0 = new GoalConditionTF(singlePFSCT0);
      FactoredModel factoredModel0 = new FactoredModel(blockDudeModel0, singleGoalPFRF0, goalConditionTF0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, (-1.0), reflectiveHashableStateFactory0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.transitions(tabularBeliefState0, subgoalOption0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @53aef88b)
         //
         verifyException("burlap.mdp.auxiliary.stateconditiontest.SinglePFSCT", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Map<Integer, Set<GraphDefinedDomain.NodeTransitionProbability>>> hashMap0 = new HashMap<Integer, Map<Integer, Set<GraphDefinedDomain.NodeTransitionProbability>>>();
      GraphDefinedDomain.GraphStateModel graphDefinedDomain_GraphStateModel0 = new GraphDefinedDomain.GraphStateModel(hashMap0);
      SingleGoalPFRF singleGoalPFRF0 = new SingleGoalPFRF((PropositionalFunction) null, 0.999, 0.999);
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null);
      FactoredModel factoredModel0 = new FactoredModel(graphDefinedDomain_GraphStateModel0, singleGoalPFRF0, singlePFTF0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, (-71.139), reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.terminal(tabularBeliefState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @53aef88b)
         //
         verifyException("burlap.mdp.auxiliary.common.SinglePFTF", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(rewardValueProjection0, 0.0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      SubgoalOption subgoalOption0 = new SubgoalOption("<O`ZvjK Q;jG~DVp;a", boltzmannQPolicy0, singlePFSCT0, singlePFSCT0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0.0, reflectiveHashableStateFactory0);
      DeepOOState deepOOState0 = new DeepOOState();
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.sample(deepOOState0, subgoalOption0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to sample policy action distribution, but it did not sum to 1.
         //
         verifyException("burlap.behavior.policy.PolicyUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      DelegatedModel delegatedModel0 = new DelegatedModel(factoredModel0);
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(delegatedModel0, (-251.921), reflectiveHashableStateFactory0);
      DeepOOState deepOOState0 = new DeepOOState();
      LinkedList<Action> linkedList0 = new LinkedList<Action>();
      MacroAction macroAction0 = new MacroAction("kR*=M&EhmKAA\"", linkedList0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.sample(deepOOState0, macroAction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 558.78393863, reflectiveHashableStateFactory0);
      MacroAction macroAction0 = new MacroAction();
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.getOrCreateModel(macroAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.options.MacroAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullTermination nullTermination0 = new NullTermination();
      factoredModel0.setTf(nullTermination0);
      HashedAggregator<HashableState> hashedAggregator0 = new HashedAggregator<HashableState>(0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, (-847.17356069), reflectiveHashableStateFactory0);
      OOSADomain oOSADomain0 = new OOSADomain();
      RandomPolicy randomPolicy0 = new RandomPolicy(oOSADomain0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      SubgoalOption subgoalOption0 = new SubgoalOption("", randomPolicy0, singlePFSCT0, singlePFSCT0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.computeTransitions((State) null, subgoalOption0, hashedAggregator0, (double[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.policy.RandomPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullTermination nullTermination0 = new NullTermination();
      factoredModel0.setTf(nullTermination0);
      HashedAggregator<HashableState> hashedAggregator0 = new HashedAggregator<HashableState>(0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      OOSADomain oOSADomain0 = new OOSADomain();
      QLearning qLearning0 = new QLearning(oOSADomain0, 0, reflectiveHashableStateFactory0, 5.0, 0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(qLearning0, 0.0);
      SubgoalOption subgoalOption0 = new SubgoalOption("", boltzmannQPolicy0, singlePFSCT0, singlePFSCT0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0.999, reflectiveHashableStateFactory0);
      PODomain pODomain0 = new PODomain();
      OOSGDomain oOSGDomain0 = new OOSGDomain();
      StateEnumerator stateEnumerator0 = new StateEnumerator(oOSGDomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.computeTransitions(tabularBeliefState0, subgoalOption0, hashedAggregator0, doubleArray0);
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.learning.tdmethods.QLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      HashedAggregator<HashableState> hashedAggregator0 = new HashedAggregator<HashableState>();
      MacroAction macroAction0 = new MacroAction();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0.0, reflectiveHashableStateFactory0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.computeTransitions((State) null, macroAction0, hashedAggregator0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      NullTermination nullTermination0 = new NullTermination();
      factoredModel0.setTf(nullTermination0);
      HashedAggregator<HashableState> hashedAggregator0 = new HashedAggregator<HashableState>();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0.0, reflectiveHashableStateFactory0);
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      OOSADomain oOSADomain0 = new OOSADomain();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.SOURCESTATE;
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0, rewardValueProjection_RewardProjectionType0, oOSADomain0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      GreedyQPolicy greedyQPolicy0 = new GreedyQPolicy(rewardValueProjection0);
      SubgoalOption subgoalOption0 = new SubgoalOption("DerivedOptionMarkovModel can only compute transition function probability distribution for Markov options, but the input Option is not Markov", greedyQPolicy0, singlePFSCT0, singlePFSCT0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.computeTransitions((State) null, subgoalOption0, hashedAggregator0, (double[]) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SinglePFTF singlePFTF0 = new SinglePFTF((PropositionalFunction) null);
      factoredModel0.setTf(singlePFTF0);
      HashedAggregator<HashableState> hashedAggregator0 = new HashedAggregator<HashableState>(1.0);
      SubgoalOption subgoalOption0 = new SubgoalOption();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 1.0, reflectiveHashableStateFactory0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.computeTransitions(tabularBeliefState0, subgoalOption0, hashedAggregator0, (double[]) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState cannot be cast to class burlap.mdp.core.oo.state.OOState (burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState and burlap.mdp.core.oo.state.OOState are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @53aef88b)
         //
         verifyException("burlap.mdp.auxiliary.common.SinglePFTF", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0, reflectiveHashableStateFactory0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.terminal((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BFSMarkovOptionModel.CachedModel bFSMarkovOptionModel_CachedModel0 = new BFSMarkovOptionModel.CachedModel();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullTermination nullTermination0 = new NullTermination();
      factoredModel0.setTf(nullTermination0);
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(rewardValueProjection0, 0.0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      SubgoalOption subgoalOption0 = new SubgoalOption("<O`ZvjK Q;jG~DVp;a", boltzmannQPolicy0, singlePFSCT0, singlePFSCT0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0, reflectiveHashableStateFactory0);
      HashedAggregator<HashableState> hashedAggregator0 = new HashedAggregator<HashableState>();
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.computeTransitions((State) null, subgoalOption0, hashedAggregator0, (double[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factored Model cannot enumerate transition distribution, because the state model does not implement FullStateModel
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      SubgoalOption subgoalOption0 = new SubgoalOption("^)0", (Policy) null, singlePFSCT0, singlePFSCT0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, (-1630.0), reflectiveHashableStateFactory0);
      bFSMarkovOptionModel0.setMinProb((-1630.0));
      List<TransitionProb> list0 = bFSMarkovOptionModel0.transitions(tabularBeliefState0, subgoalOption0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      DelegatedModel delegatedModel0 = new DelegatedModel((SampleModel) null);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(delegatedModel0, (-2910.152917), reflectiveHashableStateFactory0);
      BFSMarkovOptionModel.CachedModel bFSMarkovOptionModel_CachedModel0 = bFSMarkovOptionModel0.getOrCreateModel((Option) null);
      BFSMarkovOptionModel.CachedModel bFSMarkovOptionModel_CachedModel1 = bFSMarkovOptionModel0.getOrCreateModel((Option) null);
      assertSame(bFSMarkovOptionModel_CachedModel1, bFSMarkovOptionModel_CachedModel0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel((SampleModel) null, 0, reflectiveHashableStateFactory0);
      JointAction jointAction0 = new JointAction();
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.sample((State) null, jointAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.options.model.BFSMarkovOptionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 4988.0, reflectiveHashableStateFactory0);
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      OOSADomain oOSADomain0 = new OOSADomain();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.DESTINATIONSTATE;
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0, rewardValueProjection_RewardProjectionType0, oOSADomain0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(rewardValueProjection0, 4988.0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      SubgoalOption subgoalOption0 = new SubgoalOption("n|;NO8", boltzmannQPolicy0, singlePFSCT0, singlePFSCT0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.sample(tabularBeliefState0, subgoalOption0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Policy is undefined for the provided state
         //
         verifyException("burlap.behavior.policy.PolicyUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      NullTermination nullTermination0 = new NullTermination();
      factoredModel0.setTf(nullTermination0);
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 4988.0, reflectiveHashableStateFactory0);
      UniformCostRF uniformCostRF0 = new UniformCostRF();
      OOSADomain oOSADomain0 = new OOSADomain();
      RewardValueProjection.RewardProjectionType rewardValueProjection_RewardProjectionType0 = RewardValueProjection.RewardProjectionType.DESTINATIONSTATE;
      RewardValueProjection rewardValueProjection0 = new RewardValueProjection(uniformCostRF0, rewardValueProjection_RewardProjectionType0, oOSADomain0);
      BoltzmannQPolicy boltzmannQPolicy0 = new BoltzmannQPolicy(rewardValueProjection0, 4988.0);
      SinglePFSCT singlePFSCT0 = new SinglePFSCT((PropositionalFunction) null);
      SubgoalOption subgoalOption0 = new SubgoalOption("n|;NO8", boltzmannQPolicy0, singlePFSCT0, singlePFSCT0);
      List<TransitionProb> list0 = bFSMarkovOptionModel0.transitions(tabularBeliefState0, subgoalOption0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0, reflectiveHashableStateFactory0);
      bFSMarkovOptionModel0.requireMarkov = false;
      MacroAction macroAction0 = new MacroAction();
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.transitions((State) null, macroAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.singleagent.options.MacroAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0, reflectiveHashableStateFactory0);
      MacroAction macroAction0 = new MacroAction();
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.transitions((State) null, macroAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DerivedOptionMarkovModel can only compute transition function probability distribution for Markov options, but the input Option is not Markov
         //
         verifyException("burlap.behavior.singleagent.options.model.BFSMarkovOptionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 0.0, (HashableStateFactory) null);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.transitions((State) null, (Action) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factored Model cannot enumerate transition distribution, because the state model does not implement FullStateModel
         //
         verifyException("burlap.mdp.singleagent.model.FactoredModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel((SampleModel) null, 0, reflectiveHashableStateFactory0);
      // Undeclared exception!
      try { 
        bFSMarkovOptionModel0.transitions((State) null, (Action) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot compute option transition function probability distribution, because the underlying state model isnot a FullModel
         //
         verifyException("burlap.behavior.singleagent.options.model.BFSMarkovOptionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BFSMarkovOptionModel.OptionScanNode bFSMarkovOptionModel_OptionScanNode0 = new BFSMarkovOptionModel.OptionScanNode();
      GenericOOState genericOOState0 = new GenericOOState();
      BFSMarkovOptionModel.OptionScanNode bFSMarkovOptionModel_OptionScanNode1 = new BFSMarkovOptionModel.OptionScanNode(bFSMarkovOptionModel_OptionScanNode0, genericOOState0, 1, 1835.89764);
      assertEquals(0.0, bFSMarkovOptionModel_OptionScanNode1.probability, 0.01);
      assertEquals(1, bFSMarkovOptionModel_OptionScanNode1.nSteps);
      assertEquals(1835.89764, bFSMarkovOptionModel_OptionScanNode1.cumulativeDiscountedReward, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BFSMarkovOptionModel.OptionScanNode bFSMarkovOptionModel_OptionScanNode0 = new BFSMarkovOptionModel.OptionScanNode((State) null);
      BFSMarkovOptionModel.OptionScanNode bFSMarkovOptionModel_OptionScanNode1 = new BFSMarkovOptionModel.OptionScanNode(bFSMarkovOptionModel_OptionScanNode0, (State) null, (-452.0), 0.0);
      assertEquals((-452.0), bFSMarkovOptionModel_OptionScanNode1.probability, 0.01);
      assertEquals(0.0, bFSMarkovOptionModel_OptionScanNode1.cumulativeDiscountedReward, 0.01);
      assertEquals(1, bFSMarkovOptionModel_OptionScanNode1.nSteps);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FactoredModel factoredModel0 = new FactoredModel();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      BFSMarkovOptionModel bFSMarkovOptionModel0 = new BFSMarkovOptionModel(factoredModel0, 4988.0, reflectiveHashableStateFactory0);
      bFSMarkovOptionModel0.setMinProb(3.0);
  }
}
