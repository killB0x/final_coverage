/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:24:43 GMT 2022
 */

package burlap.behavior.learningrate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.learningrate.SoftTimeInverseDecayLR;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.state.NullState;
import burlap.mdp.core.state.State;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SoftTimeInverseDecayLR_ESTest extends SoftTimeInverseDecayLR_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1.0), (-2916.0), (-1.0));
      double double0 = softTimeInverseDecayLR0.learningRate(0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1.0), (-1.0), 0.0, reflectiveHashableStateFactory0, true);
      double double0 = softTimeInverseDecayLR0.learningRate((-1));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1.0), (-1.0), 0.0, reflectiveHashableStateFactory0, true);
      double double0 = softTimeInverseDecayLR0.pollLearningRate((-1), 896);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-2920.203235541492), (-2920.203235541492));
      double double0 = softTimeInverseDecayLR0.pollLearningRate(626, 626);
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(1.0, 1.0, 1.0);
      NullState nullState0 = NullState.instance;
      SimpleAction simpleAction0 = new SimpleAction("VMe");
      double double0 = softTimeInverseDecayLR0.pollLearningRate(334, (-6));
      double double1 = softTimeInverseDecayLR0.pollLearningRate(334, (State) nullState0, (Action) simpleAction0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(454, (-656.5262), 454, reflectiveHashableStateFactory0, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1.0), (-1.0), 558.99876364011, reflectiveHashableStateFactory0, true);
      softTimeInverseDecayLR0.resetDecay();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(0.0, 813.66146, 0.0);
      NullState nullState0 = NullState.instance;
      SimpleAction simpleAction0 = new SimpleAction();
      double double0 = softTimeInverseDecayLR0.pollLearningRate((-144), (State) nullState0, (Action) simpleAction0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1.0), (-250.5277), (-1.0));
      NullState nullState0 = NullState.instance;
      SimpleAction simpleAction0 = new SimpleAction("burlap.behavior.learningrate.SoftTimeInverseDecayLR");
      double double0 = softTimeInverseDecayLR0.pollLearningRate((-745), (State) nullState0, (Action) simpleAction0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(0, 522.308002635, (-927.2));
      double double0 = softTimeInverseDecayLR0.pollLearningRate((-1), 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(0.0, 813.66146, 0.0);
      double double0 = softTimeInverseDecayLR0.peekAtLearningRate((State) null, (Action) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1041.659870095194), (-1041.659870095194), (-1041.659870095194));
      NullState nullState0 = NullState.instance;
      SimpleAction simpleAction0 = new SimpleAction();
      double double0 = softTimeInverseDecayLR0.peekAtLearningRate((State) nullState0, (Action) simpleAction0);
      assertEquals((-1041.659870095194), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(0.0, 0.0, (-1320.29876857853), reflectiveHashableStateFactory0, true);
      double double0 = softTimeInverseDecayLR0.peekAtLearningRate((-1141));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-364.889368019), (-364.889368019), (-364.889368019));
      double double0 = softTimeInverseDecayLR0.peekAtLearningRate(0);
      assertEquals((-364.889368019), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(0.0, 0.0);
      double double0 = softTimeInverseDecayLR0.learningRate(0);
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullState nullState0 = NullState.instance;
      SimpleAction simpleAction0 = new SimpleAction();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(1, 1, reflectiveHashableStateFactory0, false);
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.pollLearningRate(1, (State) nullState0, (Action) simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(4819.7866259356, 4819.7866259356);
      softTimeInverseDecayLR0.useStateWise = true;
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.pollLearningRate(626, 626);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.learningrate.SoftTimeInverseDecayLR", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(2141.0, 2141.0, reflectiveHashableStateFactory0, true);
      SimpleAction simpleAction0 = new SimpleAction();
      NullState nullState0 = NullState.instance;
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.peekAtLearningRate((State) nullState0, (Action) simpleAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-757.5086), (-757.5086), (-5051.09597));
      softTimeInverseDecayLR0.useStateWise = true;
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.peekAtLearningRate(2068);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.learningrate.SoftTimeInverseDecayLR", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NullState nullState0 = NullState.instance;
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-5198.937925744854), (-5198.937925744854), reflectiveHashableStateFactory0, false);
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.getStateWiseTimeIndex(nullState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(182.2606, 182.2606);
      NullState nullState0 = NullState.instance;
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.getStateWiseTimeIndex(nullState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.learningrate.SoftTimeInverseDecayLR", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1953), (-1953));
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.getFeatureWiseTimeIndex((-1953));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.learningrate.SoftTimeInverseDecayLR", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(182.2606, 182.2606);
      SoftTimeInverseDecayLR.StateWiseTimeIndex softTimeInverseDecayLR_StateWiseTimeIndex0 = softTimeInverseDecayLR0.new StateWiseTimeIndex();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(1.0, 1.0, 1.0);
      SoftTimeInverseDecayLR.MutableInt softTimeInverseDecayLR_MutableInt0 = softTimeInverseDecayLR0.new MutableInt(334);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1.0), (-1.0), 0.0, reflectiveHashableStateFactory0, true);
      softTimeInverseDecayLR0.getFeatureWiseTimeIndex((-1));
      double double0 = softTimeInverseDecayLR0.peekAtLearningRate((-1));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1957), (-1957), reflectiveHashableStateFactory0, true);
      double double0 = softTimeInverseDecayLR0.pollLearningRate((-1957), (-1957));
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1.0), (-2916.0), (-1.0));
      double double0 = softTimeInverseDecayLR0.pollLearningRate(626, 626);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(4819.7866259356, 4819.7866259356);
      double double0 = softTimeInverseDecayLR0.pollLearningRate((-504), 626);
      assertEquals(4819.7866259356, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-2760.0), 1144.0233, reflectiveHashableStateFactory0, false);
      double double0 = softTimeInverseDecayLR0.pollLearningRate(1263, 759);
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(1.0, 1081.30403701161);
      double double0 = softTimeInverseDecayLR0.peekAtLearningRate((-706));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(993, 993);
      NullState nullState0 = NullState.instance;
      double double0 = softTimeInverseDecayLR0.pollLearningRate(993, (State) nullState0, (Action) simpleAction0);
      assertEquals(993.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NullState nullState0 = NullState.instance;
      SimpleAction simpleAction0 = new SimpleAction();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-21), (-21));
      double double0 = softTimeInverseDecayLR0.pollLearningRate((-21), (State) nullState0, (Action) simpleAction0);
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(993, 993, (HashableStateFactory) null, false);
      NullState nullState0 = NullState.instance;
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.pollLearningRate(993, (State) nullState0, (Action) simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.learningrate.SoftTimeInverseDecayLR", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-2920.203235541492), (-2920.203235541492));
      SimpleAction simpleAction0 = new SimpleAction();
      NullState nullState0 = NullState.instance;
      double double0 = softTimeInverseDecayLR0.peekAtLearningRate((State) nullState0, (Action) simpleAction0);
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NullState nullState0 = NullState.instance;
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(182.2606, 182.2606, (HashableStateFactory) null, false);
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.peekAtLearningRate((State) nullState0, (Action) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.learningrate.SoftTimeInverseDecayLR", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR(2141.0, 2141.0, reflectiveHashableStateFactory0, true);
      SoftTimeInverseDecayLR.StateWiseTimeIndex softTimeInverseDecayLR_StateWiseTimeIndex0 = softTimeInverseDecayLR0.new StateWiseTimeIndex();
      SimpleAction simpleAction0 = new SimpleAction();
      SoftTimeInverseDecayLR.MutableInt softTimeInverseDecayLR_MutableInt0 = softTimeInverseDecayLR_StateWiseTimeIndex0.getActionTimeIndexEntry(simpleAction0);
      SoftTimeInverseDecayLR.MutableInt softTimeInverseDecayLR_MutableInt1 = softTimeInverseDecayLR_StateWiseTimeIndex0.getActionTimeIndexEntry((Action) null);
      assertSame(softTimeInverseDecayLR_MutableInt1, softTimeInverseDecayLR_MutableInt0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SoftTimeInverseDecayLR softTimeInverseDecayLR0 = new SoftTimeInverseDecayLR((-1.0), (-250.5277), (-1.0));
      // Undeclared exception!
      try { 
        softTimeInverseDecayLR0.resetDecay();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.behavior.learningrate.SoftTimeInverseDecayLR", e);
      }
  }
}
