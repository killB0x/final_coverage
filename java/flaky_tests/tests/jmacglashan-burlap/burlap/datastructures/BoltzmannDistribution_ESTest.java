/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:34:16 GMT 2022
 */

package burlap.datastructures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.datastructures.BoltzmannDistribution;
import javax.management.RuntimeErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoltzmannDistribution_ESTest extends BoltzmannDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.setTemperature(0.0);
      // Undeclared exception!
      try { 
        boltzmannDistribution0.sample();
        fail("Expecting exception: RuntimeErrorException");
      
      } catch(RuntimeErrorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.computeTempNormalized();
      assertEquals(1.0, boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 969.516983702;
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      int int0 = boltzmannDistribution0.sample();
      assertEquals(3, int0);
      assertEquals(1.0, boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.preferenceLength();
      assertEquals(1.0, boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0, (-654.83025879));
      int int0 = boltzmannDistribution0.sample();
      assertEquals(0, int0);
      
      double double0 = boltzmannDistribution0.maxTNormed();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3763.5134;
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      double[] doubleArray1 = boltzmannDistribution0.getProbabilities();
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      double double0 = boltzmannDistribution0.maxTNormed();
      assertEquals(3763.5134, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0, Double.NEGATIVE_INFINITY);
      boltzmannDistribution0.computeProbs();
      double double0 = boltzmannDistribution0.maxTNormed();
      assertEquals(Double.NEGATIVE_INFINITY, boltzmannDistribution0.getTemperature(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0, 0.0);
      double double0 = boltzmannDistribution0.getTemperature();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.temperature = Double.NEGATIVE_INFINITY;
      double double0 = boltzmannDistribution0.getTemperature();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.needsUpdate = false;
      double[] doubleArray1 = boltzmannDistribution0.getProbabilities();
      assertNull(doubleArray1);
      assertEquals(1.0, boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0, Double.NEGATIVE_INFINITY);
      double[] doubleArray1 = boltzmannDistribution0.getProbabilities();
      assertNotNull(doubleArray1);
      assertEquals(Double.NEGATIVE_INFINITY, boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0, (-4063.458872104747));
      boltzmannDistribution0.preferences = null;
      boltzmannDistribution0.getPreferences();
      assertEquals((-4063.458872104747), boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0, Double.NEGATIVE_INFINITY);
      double[] doubleArray1 = boltzmannDistribution0.getPreferences();
      assertNotNull(doubleArray1);
      assertEquals(Double.NEGATIVE_INFINITY, boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      // Undeclared exception!
      try { 
        boltzmannDistribution0.setPreferences((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.preferences = null;
      // Undeclared exception!
      try { 
        boltzmannDistribution0.setPreference((-1828), (-1828));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      // Undeclared exception!
      try { 
        boltzmannDistribution0.setPreference((-406280690), (-406280690));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -406280690 out of bounds for length 1
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.needsUpdate = false;
      // Undeclared exception!
      try { 
        boltzmannDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.preferences = null;
      // Undeclared exception!
      try { 
        boltzmannDistribution0.preferenceLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      // Undeclared exception!
      try { 
        boltzmannDistribution0.maxTNormed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.preferences = null;
      // Undeclared exception!
      try { 
        boltzmannDistribution0.getProbabilities();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.preferences = null;
      // Undeclared exception!
      try { 
        boltzmannDistribution0.computeProbs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoltzmannDistribution boltzmannDistribution0 = null;
      try {
        boltzmannDistribution0 = new BoltzmannDistribution((double[]) null, (-230.72));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BoltzmannDistribution boltzmannDistribution0 = null;
      try {
        boltzmannDistribution0 = new BoltzmannDistribution((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      double double0 = boltzmannDistribution0.getTemperature();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.setPreference(0, 1766.9906945597206);
      assertEquals(1.0, boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.preferenceLength();
      assertEquals(1.0, boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.setPreferences(doubleArray0);
      assertEquals(1.0, boltzmannDistribution0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0);
      boltzmannDistribution0.preferences = null;
      // Undeclared exception!
      try { 
        boltzmannDistribution0.computeTempNormalized();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.datastructures.BoltzmannDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoltzmannDistribution boltzmannDistribution0 = new BoltzmannDistribution(doubleArray0, (-4063.458872104747));
      double[] doubleArray1 = boltzmannDistribution0.getPreferences();
      assertEquals((-4063.458872104747), boltzmannDistribution0.getTemperature(), 0.01);
      assertNotNull(doubleArray1);
  }
}
