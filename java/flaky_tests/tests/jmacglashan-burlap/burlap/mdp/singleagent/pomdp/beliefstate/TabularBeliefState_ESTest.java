/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:01:18 GMT 2022
 */

package burlap.mdp.singleagent.pomdp.beliefstate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.auxiliary.StateEnumerator;
import burlap.domain.singleagent.blockdude.state.BlockDudeAgent;
import burlap.domain.singleagent.blockdude.state.BlockDudeCell;
import burlap.domain.singleagent.mountaincar.MountainCar;
import burlap.mdp.core.state.MutableState;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.EnumerableBeliefState;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.statehashing.ReflectiveHashableStateFactory;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TabularBeliefState_ESTest extends TabularBeliefState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      TabularBeliefState tabularBeliefState1 = new TabularBeliefState(tabularBeliefState0);
      assertTrue(tabularBeliefState1.equals((Object)tabularBeliefState0));
      
      tabularBeliefState0.setBelief((State) tabularBeliefState1, (double) 617);
      boolean boolean0 = tabularBeliefState0.equals(tabularBeliefState1);
      assertFalse(tabularBeliefState1.equals((Object)tabularBeliefState0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      Double double0 = new Double(0.15707963267948966);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        tabularBeliefState0.set(object0, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set belief for TabularBeliefState because they is a java.lang.Object rather than a, Integer, State, or String representation of an int
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.initializeAllBeliefValuesTo((-78));
      assertEquals(0, tabularBeliefState0.numStates());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, (double) 617);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        tabularBeliefState0.setBeliefVector(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error; cannot set belief state with provided vector because dimensionality does not match.Provided vector of dimension 0 need dimension 1
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, (double) 617);
      tabularBeliefState0.sample();
      TabularBeliefState tabularBeliefState1 = (TabularBeliefState)tabularBeliefState0.sample();
      assertEquals(1, tabularBeliefState1.numStates());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      tabularBeliefState0.setStateEnumerator(stateEnumerator0);
      assertEquals(0, stateEnumerator0.numStatesEnumerated());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      tabularBeliefState0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, 1.0);
      State state0 = tabularBeliefState0.stateForId(0);
      assertSame(state0, tabularBeliefState0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      Double double0 = new Double(1.0);
      MutableState mutableState0 = tabularBeliefState0.set(tabularBeliefState0, double0);
      assertSame(tabularBeliefState0, mutableState0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      State state0 = tabularBeliefState0.s();
      assertSame(state0, tabularBeliefState0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      int int0 = tabularBeliefState0.numStates();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      int int0 = stateEnumerator0.getEnumeratedID(tabularBeliefState0);
      int int1 = tabularBeliefState0.numStates();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      List<State> list0 = tabularBeliefState0.getStateSpace();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      StateEnumerator stateEnumerator1 = tabularBeliefState0.getStateEnumerator();
      assertSame(stateEnumerator0, stateEnumerator1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, (double) 617);
      StateEnumerator stateEnumerator1 = tabularBeliefState0.getStateEnumerator();
      assertSame(stateEnumerator1, stateEnumerator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      PODomain pODomain0 = tabularBeliefState0.getDomain();
      assertNull(pODomain0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      PODomain pODomain1 = tabularBeliefState0.getDomain();
      assertFalse(pODomain1.providesStateEnumerator());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, (double) 617);
      Map<Integer, Double> map0 = tabularBeliefState0.getBeliefValues();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      double[] doubleArray0 = tabularBeliefState0.beliefVector();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      TabularBeliefState tabularBeliefState1 = new TabularBeliefState(tabularBeliefState0);
      tabularBeliefState0.setBelief((State) tabularBeliefState1, (double) 617);
      double double0 = tabularBeliefState0.belief((State) tabularBeliefState1);
      assertFalse(tabularBeliefState1.equals((Object)tabularBeliefState0));
      assertEquals(617.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      tabularBeliefState0.beliefValues = null;
      // Undeclared exception!
      try { 
        tabularBeliefState0.zeroOutBeliefVector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.variableKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.beliefValues = null;
      // Undeclared exception!
      try { 
        tabularBeliefState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      // Undeclared exception!
      try { 
        tabularBeliefState0.stateForId(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no state stored with the enumeration id: 0
         //
         verifyException("burlap.behavior.singleagent.auxiliary.StateEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        tabularBeliefState0.setBeliefVector(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      BlockDudeAgent blockDudeAgent0 = new BlockDudeAgent();
      // Undeclared exception!
      try { 
        tabularBeliefState0.setBelief((State) blockDudeAgent0, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.setBelief((State) tabularBeliefState0, (-1933.0511395));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      tabularBeliefState0.beliefValues = null;
      // Undeclared exception!
      try { 
        tabularBeliefState0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Double double0 = new Double(2757);
      Integer integer0 = new Integer(2757);
      hashMap0.put(integer0, double0);
      tabularBeliefState0.setBeliefValues(hashMap0);
      // Undeclared exception!
      try { 
        tabularBeliefState0.nonZeroBeliefs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.initializeBeliefsUniformly();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.initializeAllBeliefValuesTo(95.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.getStateSpace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      TabularBeliefState tabularBeliefState1 = new TabularBeliefState();
      tabularBeliefState1.beliefValues = null;
      // Undeclared exception!
      try { 
        tabularBeliefState0.equals(tabularBeliefState1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      tabularBeliefState0.beliefValues = null;
      // Undeclared exception!
      try { 
        tabularBeliefState0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.beliefVector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      PODomain pODomain0 = new PODomain();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      BlockDudeCell blockDudeCell0 = new BlockDudeCell();
      // Undeclared exception!
      try { 
        tabularBeliefState0.belief((State) blockDudeCell0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflective Hashable State should only be used with State objects that also already implement HashableState.
         //
         verifyException("burlap.statehashing.ReflectiveHashableStateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.belief((State) tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      tabularBeliefState0.beliefValues = null;
      // Undeclared exception!
      try { 
        tabularBeliefState0.belief((-741));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      tabularBeliefState0.beliefValues = null;
      TabularBeliefState tabularBeliefState1 = null;
      try {
        tabularBeliefState1 = new TabularBeliefState(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = null;
      try {
        tabularBeliefState0 = new TabularBeliefState((PODomain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief(0, (double) 0);
      assertEquals(0, tabularBeliefState0.numStates());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      stateEnumerator0.getEnumeratedID(tabularBeliefState0);
      tabularBeliefState0.setBelief(1, (double) 1);
      // Undeclared exception!
      try { 
        tabularBeliefState0.nonZeroBeliefs();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no state stored with the enumeration id: 1
         //
         verifyException("burlap.behavior.singleagent.auxiliary.StateEnumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      double double0 = tabularBeliefState0.belief(617);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      stateEnumerator0.getEnumeratedID(tabularBeliefState0);
      tabularBeliefState0.initializeAllBeliefValuesTo(1.0);
      double double0 = tabularBeliefState0.belief(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.numStates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.stateForId(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, 970.74);
      TabularBeliefState tabularBeliefState1 = new TabularBeliefState(tabularBeliefState0);
      assertTrue(tabularBeliefState1.equals((Object)tabularBeliefState0));
      
      tabularBeliefState1.initializeBeliefsUniformly();
      boolean boolean0 = tabularBeliefState0.equals(tabularBeliefState1);
      assertFalse(tabularBeliefState1.equals((Object)tabularBeliefState0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-64));
      hashMap0.put(integer0, (Double) null);
      tabularBeliefState0.setBeliefValues(hashMap0);
      TabularBeliefState tabularBeliefState1 = new TabularBeliefState(tabularBeliefState0);
      boolean boolean0 = tabularBeliefState0.equals(tabularBeliefState1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, 0.001);
      TabularBeliefState tabularBeliefState1 = new TabularBeliefState();
      boolean boolean0 = tabularBeliefState1.equals(tabularBeliefState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      boolean boolean0 = tabularBeliefState0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      boolean boolean0 = tabularBeliefState0.equals(tabularBeliefState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      TabularBeliefState tabularBeliefState1 = new TabularBeliefState(tabularBeliefState0);
      boolean boolean0 = tabularBeliefState1.equals(tabularBeliefState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        tabularBeliefState0.get(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cound not return belief value for key, because it is a java.lang.Object rather than an Integer, State, or String representation of an integer
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      MountainCar.MCPhysicsParams mountainCar_MCPhysicsParams0 = new MountainCar.MCPhysicsParams();
      MountainCar.MCModel mountainCar_MCModel0 = new MountainCar.MCModel(mountainCar_MCPhysicsParams0);
      // Undeclared exception!
      try { 
        mountainCar_MCModel0.move(tabularBeliefState0, 681);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not return belief for TabularBeliefState because the key is a String, but does not parse into an int; it is x
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.get(tabularBeliefState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      stateEnumerator0.getEnumeratedID(tabularBeliefState0);
      List<Object> list0 = tabularBeliefState0.variableKeys();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      List<Object> list0 = tabularBeliefState0.variableKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      Integer integer0 = new Integer(5473);
      Object object0 = tabularBeliefState0.get(integer0);
      // Undeclared exception!
      try { 
        tabularBeliefState0.set(object0, tabularBeliefState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set belief state value, because the value is a burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState not a Double
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        tabularBeliefState0.set(tabularBeliefState0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, (-8.800658043216309));
      tabularBeliefState0.initializeAllBeliefValuesTo(31);
      assertEquals(1, tabularBeliefState0.numStates());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      tabularBeliefState0.initializeAllBeliefValuesTo(0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        tabularBeliefState0.setBeliefVector(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error; cannot set belief state with provided vector because dimensionality does not match.Provided vector of dimension 2 need dimension 0
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      TabularBeliefState tabularBeliefState1 = new TabularBeliefState(tabularBeliefState0);
      tabularBeliefState0.setBelief((State) tabularBeliefState1, (double) 617);
      double[] doubleArray0 = tabularBeliefState1.beliefVector();
      tabularBeliefState1.setBeliefVector(doubleArray0);
      assertFalse(tabularBeliefState1.equals((Object)tabularBeliefState0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      // Undeclared exception!
      try { 
        tabularBeliefState0.setBelief(617, (double) 617);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error; cannot set belief value for state id 617; belief vector is of dimension 0
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      // Undeclared exception!
      try { 
        tabularBeliefState0.setBelief((-1141), (double) (-1141));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, 0.001);
      List<EnumerableBeliefState.StateBelief> list0 = tabularBeliefState0.nonZeroBeliefs();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      List<EnumerableBeliefState.StateBelief> list0 = tabularBeliefState0.nonZeroBeliefs();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, (-3481.88427));
      // Undeclared exception!
      try { 
        tabularBeliefState0.sample();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error; could not sample from belief state because the beliefs did not sum to 1; they summed to: -3481.88427
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      TabularBeliefState tabularBeliefState0 = null;
      try {
        tabularBeliefState0 = new TabularBeliefState(pODomain0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TabularBeliefState(PODomain domain) constructor requires thatthe PODomain provides a StateEnumerator, but it does not. Alternatively consider using theTabularBeliefState(PODomain domain, StateEnumerator stateEnumerator), where you canspecify your own StateEnumerator for lazy state indexing.
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      tabularBeliefState0.zeroOutBeliefVector();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      StateEnumerator stateEnumerator0 = tabularBeliefState0.getStateEnumerator();
      assertNull(stateEnumerator0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      String string0 = tabularBeliefState0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      State state0 = tabularBeliefState0.copy();
      tabularBeliefState0.setBelief(state0, (-4456.82955));
      double double0 = tabularBeliefState0.belief(state0);
      assertFalse(state0.equals((Object)tabularBeliefState0));
      assertEquals((-4456.82955), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.initializeBeliefsUniformly();
      assertEquals(0, tabularBeliefState0.numStates());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      Map<Integer, Double> map0 = tabularBeliefState0.getBeliefValues();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      double double0 = tabularBeliefState0.belief((State) tabularBeliefState0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      pODomain0.setStateEnumerator(stateEnumerator0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0);
      PODomain pODomain1 = tabularBeliefState0.getDomain();
      assertTrue(pODomain1.providesStateEnumerator());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, (double) 617);
      List<State> list0 = tabularBeliefState0.getStateSpace();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, stateEnumerator0);
      tabularBeliefState0.setBelief((State) tabularBeliefState0, (-8.800658043216309));
      TabularBeliefState tabularBeliefState1 = new TabularBeliefState(tabularBeliefState0);
      boolean boolean0 = tabularBeliefState1.equals(tabularBeliefState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      PODomain pODomain0 = new PODomain();
      tabularBeliefState0.setDomain(pODomain0);
      assertFalse(pODomain0.providesStateEnumerator());
  }
}
