/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:59:46 GMT 2022
 */

package burlap.mdp.singleagent.pomdp.beliefstate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.behavior.singleagent.auxiliary.StateEnumerator;
import burlap.mdp.core.state.State;
import burlap.mdp.singleagent.pomdp.PODomain;
import burlap.mdp.singleagent.pomdp.beliefstate.BeliefState;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefState;
import burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefUpdate;
import burlap.mdp.stochasticgames.JointAction;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.ReflectiveHashableStateFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TabularBeliefUpdate_ESTest extends TabularBeliefUpdate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, (HashableStateFactory) null);
      TabularBeliefUpdate tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0, stateEnumerator0);
      tabularBeliefUpdate0.setStateEnumerator((StateEnumerator) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefUpdate tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0, stateEnumerator0);
      StateEnumerator stateEnumerator1 = tabularBeliefUpdate0.getStateEnumerator();
      assertSame(stateEnumerator0, stateEnumerator1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefUpdate tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0, stateEnumerator0);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState();
      stateEnumerator0.getEnumeratedID(tabularBeliefState0);
      StateEnumerator stateEnumerator1 = tabularBeliefUpdate0.getStateEnumerator();
      assertEquals(1, stateEnumerator1.numStatesEnumerated());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      TabularBeliefUpdate tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0, stateEnumerator0);
      tabularBeliefUpdate0.setDomain((PODomain) null);
      PODomain pODomain1 = tabularBeliefUpdate0.getDomain();
      assertNull(pODomain1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      ReflectiveHashableStateFactory reflectiveHashableStateFactory0 = new ReflectiveHashableStateFactory();
      StateEnumerator stateEnumerator0 = new StateEnumerator(pODomain0, reflectiveHashableStateFactory0);
      pODomain0.setStateEnumerator(stateEnumerator0);
      TabularBeliefUpdate tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0);
      PODomain pODomain1 = tabularBeliefUpdate0.getDomain();
      assertTrue(pODomain1.providesStateEnumerator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      TabularBeliefUpdate tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0, (StateEnumerator) null);
      JointAction jointAction0 = new JointAction();
      // Undeclared exception!
      try { 
        tabularBeliefUpdate0.update((BeliefState) null, (State) null, jointAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefUpdate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TabularBeliefUpdate tabularBeliefUpdate0 = null;
      try {
        tabularBeliefUpdate0 = new TabularBeliefUpdate((PODomain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefUpdate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      JointAction jointAction0 = new JointAction();
      TabularBeliefUpdate tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0, (StateEnumerator) null);
      TabularBeliefState tabularBeliefState0 = new TabularBeliefState(pODomain0, (StateEnumerator) null);
      // Undeclared exception!
      try { 
        tabularBeliefUpdate0.update(tabularBeliefState0, tabularBeliefState0, jointAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot get updated belief state, because probabilities summed to 0
         //
         verifyException("burlap.mdp.singleagent.pomdp.beliefstate.TabularBeliefUpdate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      TabularBeliefUpdate tabularBeliefUpdate0 = null;
      try {
        tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This domain cannot return a StateEnumerator because one is not defined for it. Use the providesStateEnumerator() method to check if one is provided in advance.
         //
         verifyException("burlap.mdp.singleagent.pomdp.PODomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      TabularBeliefUpdate tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0, (StateEnumerator) null);
      StateEnumerator stateEnumerator0 = tabularBeliefUpdate0.getStateEnumerator();
      assertNull(stateEnumerator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PODomain pODomain0 = new PODomain();
      TabularBeliefUpdate tabularBeliefUpdate0 = new TabularBeliefUpdate(pODomain0, (StateEnumerator) null);
      PODomain pODomain1 = tabularBeliefUpdate0.getDomain();
      assertFalse(pODomain1.providesStateEnumerator());
  }
}
