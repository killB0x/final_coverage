/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:15:16 GMT 2022
 */

package burlap.mdp.core.oo.propositional;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.mdp.core.oo.propositional.GroundedProp;
import burlap.mdp.core.oo.propositional.PropositionalFunction;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.core.oo.state.generic.GenericOOState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroundedProp_ESTest extends GroundedProp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      GroundedProp groundedProp0 = new GroundedProp((PropositionalFunction) null, stringArray0);
      String[] stringArray1 = new String[0];
      GroundedProp groundedProp1 = new GroundedProp((PropositionalFunction) null, stringArray1);
      boolean boolean0 = groundedProp0.equals(groundedProp1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[16];
      PropositionalFunction propositionalFunction0 = mock(PropositionalFunction.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(propositionalFunction0).isTrue(any(burlap.mdp.core.oo.state.OOState.class) , any(java.lang.String[].class));
      GroundedProp groundedProp0 = new GroundedProp(propositionalFunction0, stringArray0);
      GenericOOState genericOOState0 = new GenericOOState();
      DeepOOState deepOOState0 = new DeepOOState(genericOOState0);
      boolean boolean0 = groundedProp0.isTrue(deepOOState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[10];
      GroundedProp groundedProp0 = new GroundedProp((PropositionalFunction) null, stringArray0);
      // Undeclared exception!
      try { 
        groundedProp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.propositional.GroundedProp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropositionalFunction propositionalFunction0 = mock(PropositionalFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NYD3k}>e%,[eL";
      GroundedProp groundedProp0 = new GroundedProp(propositionalFunction0, stringArray0);
      String[] stringArray1 = new String[3];
      GroundedProp groundedProp1 = new GroundedProp(groundedProp0.pf, stringArray1);
      // Undeclared exception!
      try { 
        groundedProp0.equals(groundedProp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.propositional.GroundedProp", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      GroundedProp groundedProp0 = new GroundedProp((PropositionalFunction) null, stringArray0);
      Object object0 = groundedProp0.clone();
      boolean boolean0 = groundedProp0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      GroundedProp groundedProp0 = new GroundedProp((PropositionalFunction) null, stringArray0);
      String[] stringArray1 = new String[9];
      GroundedProp groundedProp1 = new GroundedProp((PropositionalFunction) null, stringArray1);
      boolean boolean0 = groundedProp0.equals(groundedProp1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[21];
      PropositionalFunction propositionalFunction0 = mock(PropositionalFunction.class, new ViolatedAssumptionAnswer());
      GroundedProp groundedProp0 = new GroundedProp(propositionalFunction0, stringArray0);
      GroundedProp groundedProp1 = new GroundedProp((PropositionalFunction) null, groundedProp0.params);
      boolean boolean0 = groundedProp0.equals(groundedProp1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      GroundedProp groundedProp0 = new GroundedProp((PropositionalFunction) null, stringArray0);
      boolean boolean0 = groundedProp0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      GroundedProp groundedProp0 = new GroundedProp((PropositionalFunction) null, stringArray0);
      boolean boolean0 = groundedProp0.equals(groundedProp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      GroundedProp groundedProp0 = new GroundedProp((PropositionalFunction) null, stringArray0);
      groundedProp0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[16];
      PropositionalFunction propositionalFunction0 = mock(PropositionalFunction.class, new ViolatedAssumptionAnswer());
      GroundedProp groundedProp0 = new GroundedProp(propositionalFunction0, stringArray0);
      groundedProp0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[16];
      PropositionalFunction propositionalFunction0 = mock(PropositionalFunction.class, new ViolatedAssumptionAnswer());
      GroundedProp groundedProp0 = new GroundedProp(propositionalFunction0, stringArray0);
      String string0 = groundedProp0.toString();
      assertEquals("null(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      GroundedProp groundedProp0 = new GroundedProp((PropositionalFunction) null, stringArray0);
      DeepOOState deepOOState0 = new DeepOOState();
      // Undeclared exception!
      try { 
        groundedProp0.isTrue(deepOOState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.propositional.GroundedProp", e);
      }
  }
}
