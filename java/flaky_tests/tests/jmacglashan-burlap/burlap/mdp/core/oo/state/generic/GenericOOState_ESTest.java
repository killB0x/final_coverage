/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:58:26 GMT 2022
 */

package burlap.mdp.core.oo.state.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.domain.singleagent.blocksworld.BlocksWorldBlock;
import burlap.mdp.core.oo.state.MutableOOState;
import burlap.mdp.core.oo.state.OOState;
import burlap.mdp.core.oo.state.ObjectInstance;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.core.oo.state.generic.GenericOOState;
import java.awt.Color;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericOOState_ESTest extends GenericOOState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[4];
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      ObjectInstance objectInstance0 = blocksWorldBlock0.copyWithName("");
      objectInstanceArray0[1] = objectInstance0;
      objectInstanceArray0[2] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[3] = objectInstance0;
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      // Undeclared exception!
      try { 
        genericOOState0.set(blocksWorldBlock0, objectInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An OOState variable Key must either be a OOVariableKey or String that can be parsed into an OOVariableKey, but key was of type burlap.domain.singleagent.blocksworld.BlocksWorldBlock
         //
         verifyException("burlap.mdp.core.oo.state.OOStateUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[1];
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("G}_z_`;h");
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      DeepOOState deepOOState0 = new DeepOOState(objectInstanceArray0);
      List<Object> list0 = deepOOState0.variableKeys();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[1];
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("6Ixy~l<W");
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      List<ObjectInstance> list0 = genericOOState0.objects();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("=ZN2)VT'");
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[7];
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[1] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[2] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[3] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[4] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[5] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[6] = (ObjectInstance) blocksWorldBlock0;
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      ObjectInstance objectInstance0 = genericOOState0.object("=ZN2)VT'");
      assertNotNull(objectInstance0);
      assertEquals(1, genericOOState0.numObjects());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[1];
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("G}_z_`;h");
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      DeepOOState deepOOState0 = new DeepOOState(objectInstanceArray0);
      int int0 = deepOOState0.numObjects();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("");
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[3];
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[1] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[2] = (ObjectInstance) blocksWorldBlock0;
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      List<ObjectInstance> list0 = genericOOState0.getOrGenerateObjectClassList("block");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[2];
      Color color0 = Color.GREEN;
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("=g#W4d3$", true, color0, " because it does not implement MutableState");
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[1] = (ObjectInstance) blocksWorldBlock0;
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      Map<String, ObjectInstance> map0 = genericOOState0.getObjectsMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      deepOOState0.setObjectsByClass((Map<String, List<ObjectInstance>>) null);
      Map<String, List<ObjectInstance>> map0 = deepOOState0.getObjectsByClass();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      genericOOState0.getOrGenerateObjectClassList("1~");
      Map<String, List<ObjectInstance>> map0 = genericOOState0.getObjectsByClass();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      MutableOOState mutableOOState0 = genericOOState0.addObject(blocksWorldBlock0);
      GenericOOState genericOOState1 = genericOOState0.copy();
      assertNotSame(genericOOState1, mutableOOState0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      deepOOState0.objectsMap = null;
      // Undeclared exception!
      try { 
        deepOOState0.variableKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      deepOOState0.setObjectsMap((Map<String, ObjectInstance>) null);
      // Undeclared exception!
      try { 
        deepOOState0.touch("{\n}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      genericOOState0.setObjectsMap((Map<String, ObjectInstance>) null);
      // Undeclared exception!
      try { 
        genericOOState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      // Undeclared exception!
      try { 
        genericOOState0.set((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.OOStateUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      genericOOState0.setObjectsMap((Map<String, ObjectInstance>) null);
      // Undeclared exception!
      try { 
        genericOOState0.renameObject((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      deepOOState0.setObjectsByClass((Map<String, List<ObjectInstance>>) null);
      // Undeclared exception!
      try { 
        deepOOState0.objectsOfClass(" because it does not implement MutableState");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[0];
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      genericOOState0.objectsMap = null;
      // Undeclared exception!
      try { 
        genericOOState0.objects();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      genericOOState0.setObjectsMap((Map<String, ObjectInstance>) null);
      // Undeclared exception!
      try { 
        genericOOState0.object("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      genericOOState0.setObjectsMap((Map<String, ObjectInstance>) null);
      // Undeclared exception!
      try { 
        genericOOState0.numObjects();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      genericOOState0.objectsByClass = null;
      // Undeclared exception!
      try { 
        genericOOState0.getOrGenerateObjectClassList("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      // Undeclared exception!
      try { 
        genericOOState0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.OOStateUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      genericOOState0.setObjectsMap((Map<String, ObjectInstance>) null);
      // Undeclared exception!
      try { 
        genericOOState0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      // Undeclared exception!
      try { 
        genericOOState0.addObject((ObjectInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GenericOOState genericOOState0 = null;
      try {
        genericOOState0 = new GenericOOState((OOState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      ObjectInstance objectInstance0 = genericOOState0.touch("");
      assertNull(objectInstance0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[6];
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      BlocksWorldBlock blocksWorldBlock1 = new BlocksWorldBlock("./");
      objectInstanceArray0[1] = (ObjectInstance) blocksWorldBlock1;
      objectInstanceArray0[2] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[3] = (ObjectInstance) blocksWorldBlock1;
      objectInstanceArray0[4] = (ObjectInstance) blocksWorldBlock1;
      objectInstanceArray0[5] = (ObjectInstance) blocksWorldBlock0;
      DeepOOState deepOOState0 = new DeepOOState(objectInstanceArray0);
      ObjectInstance objectInstance0 = deepOOState0.touch("./");
      assertEquals(2, deepOOState0.numObjects());
      assertNotNull(objectInstance0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[3];
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("");
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      BlocksWorldBlock blocksWorldBlock1 = new BlocksWorldBlock();
      objectInstanceArray0[1] = (ObjectInstance) blocksWorldBlock1;
      objectInstanceArray0[2] = (ObjectInstance) blocksWorldBlock1;
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      assertEquals(2, genericOOState0.numObjects());
      
      genericOOState0.removeObject("");
      assertEquals(1, genericOOState0.numObjects());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[3];
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("");
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[1] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[2] = (ObjectInstance) blocksWorldBlock0;
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      assertEquals(1, genericOOState0.numObjects());
      
      genericOOState0.removeObject("");
      assertEquals(0, genericOOState0.numObjects());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      MutableOOState mutableOOState0 = genericOOState0.removeObject("1~");
      assertEquals(0, mutableOOState0.numObjects());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[0];
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      List<ObjectInstance> list0 = genericOOState0.objects();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      ObjectInstance objectInstance0 = deepOOState0.object("=ZN2)VT'");
      assertNull(objectInstance0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      List<ObjectInstance> list0 = genericOOState0.objectsOfClass("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      List<ObjectInstance> list0 = genericOOState0.getOrGenerateObjectClassList("");
      List<ObjectInstance> list1 = genericOOState0.objectsOfClass("");
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock();
      ObjectInstance objectInstance0 = blocksWorldBlock0.copyWithName("R");
      genericOOState0.addObject(objectInstance0);
      genericOOState0.renameObject("R", "__table__");
      assertEquals(1, genericOOState0.numObjects());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      MutableOOState mutableOOState0 = deepOOState0.renameObject("", "$#cl+`LR@e<VMs-Z");
      assertEquals(0, mutableOOState0.numObjects());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("");
      genericOOState0.addObject(blocksWorldBlock0);
      // Undeclared exception!
      try { 
        genericOOState0.set(":$?m", ":$?m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set value for object  because it does not implement MutableState
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlocksWorldBlock blocksWorldBlock0 = new BlocksWorldBlock("");
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[3];
      objectInstanceArray0[0] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[1] = (ObjectInstance) blocksWorldBlock0;
      objectInstanceArray0[2] = (ObjectInstance) blocksWorldBlock0;
      GenericOOState genericOOState0 = new GenericOOState(objectInstanceArray0);
      GenericOOState genericOOState1 = new GenericOOState(genericOOState0);
      assertEquals(1, genericOOState1.numObjects());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      // Undeclared exception!
      try { 
        genericOOState0.set(":$?m", ":$?m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown object 
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      deepOOState0.setObjectsMap((Map<String, ObjectInstance>) null);
      // Undeclared exception!
      try { 
        deepOOState0.removeObject("): ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      GenericOOState genericOOState1 = genericOOState0.copy();
      assertNotSame(genericOOState1, genericOOState0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      String string0 = genericOOState0.toString();
      assertEquals("{\n}", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      Map<String, ObjectInstance> map0 = genericOOState0.getObjectsMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ObjectInstance[] objectInstanceArray0 = new ObjectInstance[7];
      GenericOOState genericOOState0 = null;
      try {
        genericOOState0 = new GenericOOState(objectInstanceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.mdp.core.oo.state.generic.GenericOOState", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      List<Object> list0 = deepOOState0.variableKeys();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      // Undeclared exception!
      try { 
        genericOOState0.get("block");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse string rep of OOVariableKey, because it does not have a : separating object name and object key
         //
         verifyException("burlap.mdp.core.oo.state.OOVariableKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GenericOOState genericOOState0 = new GenericOOState();
      int int0 = genericOOState0.numObjects();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DeepOOState deepOOState0 = new DeepOOState();
      Map<String, List<ObjectInstance>> map0 = deepOOState0.getObjectsByClass();
      assertTrue(map0.isEmpty());
  }
}
