/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 03:08:07 GMT 2022
 */

package burlap.visualizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import burlap.mdp.core.action.SimpleAction;
import burlap.mdp.core.oo.state.generic.DeepOOState;
import burlap.mdp.core.state.State;
import burlap.visualizer.OOStatePainter;
import burlap.visualizer.RenderLayer;
import burlap.visualizer.StateActionRenderLayer;
import burlap.visualizer.StateRenderLayer;
import burlap.visualizer.Visualizer;
import java.awt.SystemColor;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Visualizer_ESTest extends Visualizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Visualizer visualizer0 = new Visualizer();
      visualizer0.setStateActionRenderLayer((StateActionRenderLayer) null, false);
      visualizer0.setStateActionRenderLayer((StateActionRenderLayer) null, false);
      assertEquals(3, visualizer0.numRenderLayers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Visualizer visualizer0 = new Visualizer();
      visualizer0.setSetRenderLayer((StateRenderLayer) null);
      StateRenderLayer stateRenderLayer0 = visualizer0.getStateRenderLayer();
      assertNull(stateRenderLayer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleAction simpleAction0 = new SimpleAction();
      Visualizer visualizer0 = new Visualizer((StateRenderLayer) null);
      // Undeclared exception!
      try { 
        visualizer0.updateStateAction((State) null, simpleAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.visualizer.Visualizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Visualizer visualizer0 = new Visualizer((StateRenderLayer) null);
      // Undeclared exception!
      try { 
        visualizer0.updateState((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.visualizer.Visualizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Visualizer visualizer0 = new Visualizer();
      LinkedList<RenderLayer> linkedList0 = new LinkedList<RenderLayer>();
      visualizer0.renderLayers = (List<RenderLayer>) linkedList0;
      // Undeclared exception!
      try { 
        visualizer0.setStateActionRenderLayer((StateActionRenderLayer) null, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Visualizer visualizer0 = new Visualizer();
      Visualizer visualizer1 = visualizer0.copy();
      visualizer1.renderLayers = null;
      // Undeclared exception!
      try { 
        visualizer1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("burlap.visualizer.Visualizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Visualizer visualizer0 = new Visualizer();
      StateRenderLayer stateRenderLayer0 = new StateRenderLayer();
      visualizer0.srender = stateRenderLayer0;
      // Undeclared exception!
      try { 
        visualizer0.copy();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Visualizer visualizer0 = new Visualizer();
      visualizer0.addRenderLayer((RenderLayer) null);
      Visualizer visualizer1 = visualizer0.copy();
      assertEquals(1, visualizer1.numRenderLayers());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StateRenderLayer stateRenderLayer0 = new StateRenderLayer();
      Visualizer visualizer0 = new Visualizer(stateRenderLayer0);
      DeepOOState deepOOState0 = new DeepOOState();
      SimpleAction simpleAction0 = new SimpleAction((String) null);
      visualizer0.updateStateAction(deepOOState0, simpleAction0);
      assertFalse(visualizer0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StateRenderLayer stateRenderLayer0 = new StateRenderLayer();
      Visualizer visualizer0 = new Visualizer(stateRenderLayer0);
      DeepOOState deepOOState0 = new DeepOOState();
      visualizer0.updateState(deepOOState0);
      assertTrue(visualizer0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StateRenderLayer stateRenderLayer0 = new StateRenderLayer();
      Visualizer visualizer0 = new Visualizer(stateRenderLayer0);
      visualizer0.setStateActionRenderLayer((StateActionRenderLayer) null, false);
      visualizer0.setStateActionRenderLayer((StateActionRenderLayer) null, true);
      assertEquals(3, visualizer0.numRenderLayers());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StateRenderLayer stateRenderLayer0 = new StateRenderLayer();
      Visualizer visualizer0 = new Visualizer(stateRenderLayer0);
      OOStatePainter oOStatePainter0 = new OOStatePainter();
      visualizer0.addStatePainter(oOStatePainter0);
      assertTrue(visualizer0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StateRenderLayer stateRenderLayer0 = new StateRenderLayer();
      Visualizer visualizer0 = new Visualizer(stateRenderLayer0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      visualizer0.setBGColor(systemColor0);
      assertTrue(visualizer0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Visualizer visualizer0 = new Visualizer();
      StateRenderLayer stateRenderLayer0 = visualizer0.getStateRenderLayer();
      visualizer0.setSetRenderLayer(stateRenderLayer0);
      assertFalse(visualizer0.isFocusTraversalPolicySet());
  }
}
