/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 11:14:00 GMT 2022
 */

package tec.uom.se.spi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.function.ToDoubleFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import tec.uom.se.spi.NumberComparator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberComparator_ESTest extends NumberComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      int int0 = numberComparator0.compareRight("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char char0 = NumberComparator.charAt("", 1283);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char char0 = NumberComparator.charAt(")3/", 1);
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char char0 = NumberComparator.charAt("tec.uom.se.spi.NumberComparator", 0);
      assertEquals('t', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      // Undeclared exception!
      try { 
        numberComparator0.compareRight((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      // Undeclared exception!
      try { 
        numberComparator0.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberComparator.charAt("tec.uom.se.spi.NumberComparator", (-354));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberComparator.charAt((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      NumberComparator numberComparator1 = NumberComparator.getInstance();
      assertSame(numberComparator1, numberComparator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<Object>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Comparable<Object>>) toDoubleFunction0);
      Object object0 = new Object();
      int int0 = numberComparator0.compare(comparator0, object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      Comparator<Comparable<Object>> comparator0 = Comparator.reverseOrder();
      Comparator<Object> comparator1 = numberComparator0.reversed();
      int int0 = numberComparator0.compare(comparator1, comparator0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = numberComparator0.thenComparingLong(toLongFunction0);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<Object>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Comparable<Object>>) toDoubleFunction0);
      int int0 = numberComparator0.compare(comparator0, comparator1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = numberComparator0.compare(object1, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = numberComparator0.thenComparingLong(toLongFunction0);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<Object>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Comparable<Object>>) toDoubleFunction0);
      int int0 = numberComparator0.compare(comparator1, comparator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      int int0 = numberComparator0.compareRight("2Cd!%y&-v^", ">coru@ 1VG\n");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      int int0 = numberComparator0.compareRight("", "5Dm37\"&^I");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberComparator numberComparator0 = NumberComparator.getInstance();
      assertNotNull(numberComparator0);
      
      int int0 = numberComparator0.compare(numberComparator0, numberComparator0);
      assertEquals(0, int0);
  }
}
