/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 02:29:56 GMT 2022
 */

package org.seasar.mayaa.cycle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.seasar.mayaa.cycle.CycleWriter;
import org.seasar.mayaa.impl.cycle.CycleWriterImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CycleWriter_ESTest extends CycleWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, CALLS_REAL_METHODS);
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, true);
      cycleWriterImpl0.writeOut(cycleWriterImpl0);
      assertTrue(cycleWriterImpl0.isDirty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, CALLS_REAL_METHODS);
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, false);
      cycleWriterImpl0.clearBuffer();
      assertFalse(cycleWriterImpl0.isDirty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, CALLS_REAL_METHODS);
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      cycleWriterImpl0.flush();
      boolean boolean0 = cycleWriterImpl0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl((CycleWriter) null);
      boolean boolean0 = cycleWriterImpl0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, CALLS_REAL_METHODS);
      doReturn((String) null).when(cycleWriter0).getString();
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, true);
      CycleWriter cycleWriter1 = cycleWriterImpl0.getEnclosingWriter();
      String string0 = cycleWriter1.getString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, CALLS_REAL_METHODS);
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      cycleWriterImpl0.append('x');
      String string0 = cycleWriterImpl0.getString();
      assertEquals("x", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, CALLS_REAL_METHODS);
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, false);
      String string0 = cycleWriterImpl0.getString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl((CycleWriter) null);
      CycleWriter cycleWriter0 = cycleWriterImpl0.getEnclosingWriter();
      assertNull(cycleWriter0);
  }
}
