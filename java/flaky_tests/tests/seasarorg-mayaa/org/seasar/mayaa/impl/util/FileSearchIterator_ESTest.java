/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:05:26 GMT 2022
 */

package org.seasar.mayaa.impl.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FilenameFilter;
import java.net.URI;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.seasar.mayaa.impl.util.FileSearchIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileSearchIterator_ESTest extends FileSearchIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ufye/ufye0");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("ufye");
      assertNotNull(mockFile0);
      
      boolean boolean1 = mockFile0.setLastModified(1L);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      
      fileSearchIterator0.startThread();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      
      fileSearchIterator0.finalize();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      
      FilenameFilter filenameFilter0 = fileSearchIterator0.getFilenameFilter();
      assertNull(filenameFilter0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      
      File file0 = MockFile.createTempFile("ufye", "", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/ufye/ufye0", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("ufye0", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/ufye", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.nextFile();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.util.FileSearchIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("AhYZb");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setLastModified(1L);
      assertFalse(boolean0);
      assertEquals("AhYZb", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertEquals("AhYZb", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      fileSearchIterator0.startThread();
      assertEquals("AhYZb", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      fileSearchIterator0.finalize();
      assertEquals("AhYZb", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      FileSearchIterator fileSearchIterator1 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator1);
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertEquals("AhYZb", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      FilenameFilter filenameFilter0 = fileSearchIterator1.getFilenameFilter();
      assertNull(filenameFilter0);
      assertNotSame(fileSearchIterator1, fileSearchIterator0);
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertEquals("AhYZb", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      File file0 = MockFile.createTempFile("Au1", "{58a", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("AhYZb", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("AhYZb", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("Au10{58a", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/AhYZb/Au10{58a", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user/AhYZb", file0.getParent());
      assertEquals(0L, file0.length());
      
      boolean boolean1 = mockFile0.setReadOnly();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("AhYZb", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      fileSearchIterator0.findFile((File) null, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(fileSearchIterator0, fileSearchIterator1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(fileSearchIterator0.equals((Object)fileSearchIterator1));
      assertEquals("AhYZb", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      fileSearchIterator1.startThread();
      assertNotSame(mockFile0, file0);
      assertNotSame(fileSearchIterator1, fileSearchIterator0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertEquals("AhYZb", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      fileSearchIterator1.run();
      assertNotSame(mockFile0, file0);
      assertNotSame(fileSearchIterator1, fileSearchIterator0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertEquals("AhYZb", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("AhYZb", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      fileSearchIterator1.nextFile();
      fileSearchIterator1.nextFile();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      
      boolean boolean0 = mockFile0.setWritable(false);
      assertTrue(boolean0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      fileSearchIterator0.run();
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      FileSearchIterator fileSearchIterator1 = new FileSearchIterator(mockFile0, (FilenameFilter) null);
      assertNotNull(fileSearchIterator1);
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      fileSearchIterator1.findFile(mockFile0, mockFile0);
      assertNotSame(fileSearchIterator1, fileSearchIterator0);
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      
      fileSearchIterator0.run();
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      
      fileSearchIterator0.finalize();
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      
      fileSearchIterator0.stopThread();
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      
      boolean boolean0 = fileSearchIterator0.hasNextFile();
      assertFalse(boolean0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ufye");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(true, true);
      assertFalse(boolean0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      boolean boolean1 = mockFile0.setLastModified(1L);
      assertFalse(boolean1);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      fileSearchIterator0.startThread();
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      fileSearchIterator0.finalize();
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      FilenameFilter filenameFilter0 = fileSearchIterator0.getFilenameFilter();
      assertNull(filenameFilter0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      File file0 = MockFile.createTempFile("b}z,gL\"<'{v,+eO", "", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("b}z,gL\"<'{v,+eO0", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/ufye", file0.getParent());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      FileSearchIterator fileSearchIterator1 = new FileSearchIterator(mockFile0, (FilenameFilter) null);
      assertNotNull(fileSearchIterator1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      FilenameFilter filenameFilter1 = fileSearchIterator1.getFilenameFilter();
      assertNull(filenameFilter1);
      assertNotSame(mockFile0, file0);
      assertNotSame(fileSearchIterator1, fileSearchIterator0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      File file1 = fileSearchIterator0.getRoot();
      assertNotNull(file1);
      assertNotSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(fileSearchIterator0, fileSearchIterator1);
      assertSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(fileSearchIterator0.equals((Object)fileSearchIterator1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(file1.isAbsolute());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertNull(file1.getParent());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals(0L, file1.length());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals("ufye", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isFile());
      assertEquals("ufye", file1.getName());
      
      boolean boolean2 = fileSearchIterator0.hasNextFile();
      assertNotSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(fileSearchIterator0, fileSearchIterator1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(fileSearchIterator0.equals((Object)fileSearchIterator1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      // Undeclared exception!
      try { 
        fileSearchIterator1.findFile(file1, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      
      boolean boolean0 = fileSearchIterator0.hasNextFile();
      assertFalse(boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      
      File file0 = fileSearchIterator0.getRoot();
      assertNotNull(file0);
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.toString());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals("", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      
      MockFile mockFile1 = new MockFile("");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      
      boolean boolean1 = mockFile1.mkdir();
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(boolean1);
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("", mockFile1.toString());
      assertTrue(mockFile1.isDirectory());
      assertFalse(mockFile1.isHidden());
      assertNull(mockFile1.getParent());
      assertEquals("", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isFile());
      assertFalse(mockFile1.isAbsolute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      
      fileSearchIterator0.findFile(mockFile1, file0);
      assertSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.toString());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals("", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("", mockFile1.toString());
      assertTrue(mockFile1.isDirectory());
      assertFalse(mockFile1.isHidden());
      assertNull(mockFile1.getParent());
      assertEquals("", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isFile());
      assertFalse(mockFile1.isAbsolute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("", "b");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "org.seasar.mayaa.impl.util.FileSearchIterator");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile1);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("b", mockFile0.getName());
      assertEquals("/b", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals("/b", mockFile1.getParent());
      assertEquals("/b/org.seasar.mayaa.impl.util.FileSearchIterator", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertEquals("org.seasar.mayaa.impl.util.FileSearchIterator", mockFile1.getName());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      
      File file0 = fileSearchIterator0.getRoot();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile0);
      assertSame(file0, mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("b", mockFile0.getName());
      assertEquals("/b", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals("/b", mockFile1.getParent());
      assertEquals("/b/org.seasar.mayaa.impl.util.FileSearchIterator", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertEquals("org.seasar.mayaa.impl.util.FileSearchIterator", mockFile1.getName());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/b", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/b/org.seasar.mayaa.impl.util.FileSearchIterator", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("org.seasar.mayaa.impl.util.FileSearchIterator", file0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, true).when(filenameFilter0).accept(any(java.io.File.class) , anyString());
      doReturn((String) null, "r147k<7Qe]iWp", (String) null).when(filenameFilter0).toString();
      boolean boolean1 = mockFile0.delete();
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      boolean boolean2 = mockFile0.setReadable(false);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0, filenameFilter0);
      //  // Unstable assertion: assertNotNull(fileSearchIterator0);
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      FilenameFilter filenameFilter1 = fileSearchIterator0.getFilenameFilter();
      //  // Unstable assertion: assertNotNull(filenameFilter1);
      //  // Unstable assertion: assertSame(filenameFilter1, filenameFilter0);
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      File file0 = fileSearchIterator0.nextFile();
      //  // Unstable assertion: assertNotNull(file0);
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertEquals(108144771072L, file0.getUsableSpace());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertEquals(1661165656000L, file0.lastModified());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertEquals("/lib/os-release", file0.toString());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals(120637505536L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals("os-release", file0.getName());
      //  // Unstable assertion: assertEquals(382L, file0.length());
      //  // Unstable assertion: assertEquals(244464644096L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals("/lib", file0.getParent());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      
      boolean boolean3 = fileSearchIterator0.hasNextFile();
      //  // Unstable assertion: assertFalse(boolean3 == boolean1);
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      //  // Unstable assertion: assertTrue(boolean3);
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      fileSearchIterator0.run();
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      fileSearchIterator0.finalize();
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      fileSearchIterator0.finalize();
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      fileSearchIterator0.finalize();
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      
      File file1 = fileSearchIterator0.getRoot();
      //  // Unstable assertion: assertNotNull(file1);
      //  // Unstable assertion: assertSame(mockFile0, file1);
      //  // Unstable assertion: assertSame(file1, mockFile0);
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertEquals(0L, file1.length());
      //  // Unstable assertion: assertEquals(1392409281320L, file1.lastModified());
      //  // Unstable assertion: assertEquals(0L, file1.getFreeSpace());
      //  // Unstable assertion: assertTrue(file1.exists());
      //  // Unstable assertion: assertEquals(0L, file1.getTotalSpace());
      //  // Unstable assertion: assertTrue(file1.canExecute());
      //  // Unstable assertion: assertFalse(file1.isHidden());
      //  // Unstable assertion: assertTrue(file1.isAbsolute());
      //  // Unstable assertion: assertTrue(file1.canWrite());
      //  // Unstable assertion: assertFalse(file1.canRead());
      //  // Unstable assertion: assertEquals("/", file1.toString());
      //  // Unstable assertion: assertEquals("", file1.getName());
      //  // Unstable assertion: assertTrue(file1.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file1.getUsableSpace());
      //  // Unstable assertion: assertNull(file1.getParent());
      //  // Unstable assertion: assertFalse(file1.isFile());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.findFile((File) null, file0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.util.FileSearchIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, true).when(filenameFilter0).accept(any(java.io.File.class) , anyString());
      doReturn("", "}$oe@]wuOucr#og", (String) null).when(filenameFilter0).toString();
      boolean boolean1 = mockFile0.delete();
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      boolean boolean2 = mockFile0.setReadable(false);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0, filenameFilter0);
      //  // Unstable assertion: assertNotNull(fileSearchIterator0);
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      FilenameFilter filenameFilter1 = fileSearchIterator0.getFilenameFilter();
      //  // Unstable assertion: assertNotNull(filenameFilter1);
      //  // Unstable assertion: assertSame(filenameFilter1, filenameFilter0);
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      File file0 = fileSearchIterator0.nextFile();
      //  // Unstable assertion: assertNotNull(file0);
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(92L, file0.length());
      //  // Unstable assertion: assertEquals(1575556761000L, file0.lastModified());
      //  // Unstable assertion: assertEquals(120637501440L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals("/etc/host.conf", file0.toString());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertEquals(244464644096L, file0.getTotalSpace());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertEquals("/etc", file0.getParent());
      //  // Unstable assertion: assertEquals(108144766976L, file0.getUsableSpace());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals("host.conf", file0.getName());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      
      boolean boolean3 = fileSearchIterator0.hasNextFile();
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      //  // Unstable assertion: assertFalse(boolean3 == boolean1);
      //  // Unstable assertion: assertTrue(boolean3);
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      fileSearchIterator0.run();
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      fileSearchIterator0.finalize();
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      fileSearchIterator0.finalize();
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      fileSearchIterator0.finalize();
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.findFile((File) null, file0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.util.FileSearchIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, true).when(filenameFilter0).accept(any(java.io.File.class) , anyString());
      doReturn((String) null, "r147k<7Qe]iWp", "").when(filenameFilter0).toString();
      boolean boolean1 = mockFile0.delete();
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      boolean boolean2 = mockFile0.setReadable(false);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0, filenameFilter0);
      //  // Unstable assertion: assertNotNull(fileSearchIterator0);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      FilenameFilter filenameFilter1 = fileSearchIterator0.getFilenameFilter();
      //  // Unstable assertion: assertNotNull(filenameFilter1);
      //  // Unstable assertion: assertSame(filenameFilter1, filenameFilter0);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      File file0 = fileSearchIterator0.nextFile();
      //  // Unstable assertion: assertNotNull(file0);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals(382L, file0.length());
      //  // Unstable assertion: assertEquals(108144734208L, file0.getUsableSpace());
      //  // Unstable assertion: assertEquals(1661165656000L, file0.lastModified());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertEquals(244464644096L, file0.getTotalSpace());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertEquals("/lib/os-release", file0.toString());
      //  // Unstable assertion: assertEquals("/lib", file0.getParent());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertEquals(120637468672L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals("os-release", file0.getName());
      
      boolean boolean3 = fileSearchIterator0.hasNextFile();
      //  // Unstable assertion: assertFalse(boolean3 == boolean1);
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      //  // Unstable assertion: assertTrue(boolean3);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.run();
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.finalize();
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.startThread();
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.finalize();
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.finalize();
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      
      File file1 = fileSearchIterator0.getRoot();
      //  // Unstable assertion: assertNotNull(file1);
      //  // Unstable assertion: assertSame(mockFile0, file1);
      //  // Unstable assertion: assertSame(file1, mockFile0);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals(0L, file1.length());
      //  // Unstable assertion: assertEquals(0L, file1.getFreeSpace());
      //  // Unstable assertion: assertEquals("/", file1.toString());
      //  // Unstable assertion: assertTrue(file1.exists());
      //  // Unstable assertion: assertEquals(1392409281320L, file1.lastModified());
      //  // Unstable assertion: assertEquals(0L, file1.getTotalSpace());
      //  // Unstable assertion: assertTrue(file1.isAbsolute());
      //  // Unstable assertion: assertTrue(file1.canWrite());
      //  // Unstable assertion: assertTrue(file1.canExecute());
      //  // Unstable assertion: assertFalse(file1.isFile());
      //  // Unstable assertion: assertFalse(file1.canRead());
      //  // Unstable assertion: assertEquals("", file1.getName());
      //  // Unstable assertion: assertFalse(file1.isHidden());
      //  // Unstable assertion: assertEquals(0L, file1.getUsableSpace());
      //  // Unstable assertion: assertNull(file1.getParent());
      //  // Unstable assertion: assertTrue(file1.isDirectory());
      
      File file2 = fileSearchIterator0.getRoot();
      //  // Unstable assertion: assertNotNull(file2);
      //  // Unstable assertion: assertSame(mockFile0, file1);
      //  // Unstable assertion: assertSame(mockFile0, file2);
      //  // Unstable assertion: assertSame(file2, mockFile0);
      //  // Unstable assertion: assertSame(file2, file1);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(file2.isAbsolute());
      //  // Unstable assertion: assertTrue(file2.canExecute());
      //  // Unstable assertion: assertFalse(file2.canRead());
      //  // Unstable assertion: assertFalse(file2.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, file2.lastModified());
      //  // Unstable assertion: assertEquals(0L, file2.getTotalSpace());
      //  // Unstable assertion: assertEquals("/", file2.toString());
      //  // Unstable assertion: assertTrue(file2.exists());
      //  // Unstable assertion: assertEquals(0L, file2.length());
      //  // Unstable assertion: assertTrue(file2.isDirectory());
      //  // Unstable assertion: assertNull(file2.getParent());
      //  // Unstable assertion: assertFalse(file2.isHidden());
      //  // Unstable assertion: assertEquals(0L, file2.getFreeSpace());
      //  // Unstable assertion: assertEquals("", file2.getName());
      //  // Unstable assertion: assertEquals(0L, file2.getUsableSpace());
      //  // Unstable assertion: assertTrue(file2.canWrite());
      
      File file3 = fileSearchIterator0.nextFile();
      //  // Unstable assertion: assertNull(file3);
      //  // Unstable assertion: assertSame(mockFile0, file1);
      //  // Unstable assertion: assertSame(mockFile0, file2);
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("/", mockFile0.toString());
      //  // Unstable assertion: assertEquals("", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      boolean boolean0 = mockFile0.setWritable(false);
      assertTrue(boolean0);
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      fileSearchIterator0.run();
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      File file0 = fileSearchIterator0.getRoot();
      assertNotNull(file0);
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(file0.getParent());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      
      fileSearchIterator0.finalize();
      assertSame(mockFile0, file0);
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      fileSearchIterator0.startThread();
      assertSame(mockFile0, file0);
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      fileSearchIterator0.stopThread();
      assertSame(mockFile0, file0);
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      boolean boolean1 = fileSearchIterator0.hasNextFile();
      assertSame(mockFile0, file0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, true, true).when(filenameFilter0).accept(any(java.io.File.class) , anyString());
      doReturn("").when(filenameFilter0).toString();
      FileSearchIterator fileSearchIterator1 = new FileSearchIterator(file0, filenameFilter0);
      assertNotNull(fileSearchIterator1);
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(file0.getParent());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      
      boolean boolean2 = fileSearchIterator1.hasNextFile();
      assertSame(mockFile0, file0);
      assertNotSame(fileSearchIterator0, fileSearchIterator1);
      assertSame(file0, mockFile0);
      assertNotSame(fileSearchIterator1, fileSearchIterator0);
      assertFalse(fileSearchIterator0.equals((Object)fileSearchIterator1));
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(file0.getParent());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      
      File file1 = fileSearchIterator1.getRoot();
      assertNotNull(file1);
      assertSame(mockFile0, file1);
      assertSame(mockFile0, file0);
      assertNotSame(fileSearchIterator0, fileSearchIterator1);
      assertSame(file0, mockFile0);
      assertSame(file0, file1);
      assertNotSame(fileSearchIterator1, fileSearchIterator0);
      assertSame(file1, file0);
      assertSame(file1, mockFile0);
      assertFalse(fileSearchIterator0.equals((Object)fileSearchIterator1));
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(file0.getParent());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("", file1.getName());
      assertEquals("/", file1.toString());
      assertFalse(file1.canWrite());
      assertFalse(file1.isFile());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertNull(file1.getParent());
      assertTrue(file1.isDirectory());
      
      FilenameFilter filenameFilter1 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, false).when(filenameFilter1).accept(any(java.io.File.class) , anyString());
      FileSearchIterator fileSearchIterator2 = new FileSearchIterator(file1, filenameFilter1);
      assertNotNull(fileSearchIterator2);
      assertFalse(fileSearchIterator0.equals((Object)fileSearchIterator1));
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertFalse(fileSearchIterator2.equals((Object)fileSearchIterator0));
      assertFalse(fileSearchIterator2.equals((Object)fileSearchIterator1));
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(file0.getParent());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("", file1.getName());
      assertEquals("/", file1.toString());
      assertFalse(file1.canWrite());
      assertFalse(file1.isFile());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertNull(file1.getParent());
      assertTrue(file1.isDirectory());
      
      fileSearchIterator2.findFile(file0, file1);
      assertSame(mockFile0, file1);
      assertSame(mockFile0, file0);
      assertNotSame(fileSearchIterator0, fileSearchIterator2);
      assertNotSame(fileSearchIterator0, fileSearchIterator1);
      assertSame(file0, mockFile0);
      assertSame(file0, file1);
      assertNotSame(fileSearchIterator1, fileSearchIterator2);
      assertNotSame(fileSearchIterator1, fileSearchIterator0);
      assertSame(file1, file0);
      assertSame(file1, mockFile0);
      assertNotSame(fileSearchIterator2, fileSearchIterator0);
      assertNotSame(fileSearchIterator2, fileSearchIterator1);
      assertFalse(fileSearchIterator0.equals((Object)fileSearchIterator2));
      assertFalse(fileSearchIterator0.equals((Object)fileSearchIterator1));
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator2));
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertFalse(fileSearchIterator2.equals((Object)fileSearchIterator0));
      assertFalse(fileSearchIterator2.equals((Object)fileSearchIterator1));
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(file0.getParent());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("", file1.getName());
      assertEquals("/", file1.toString());
      assertFalse(file1.canWrite());
      assertFalse(file1.isFile());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertNull(file1.getParent());
      assertTrue(file1.isDirectory());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(filenameFilter0).accept(any(java.io.File.class) , anyString());
      doReturn((String) null, (String) null).when(filenameFilter0).toString();
      boolean boolean1 = mockFile0.delete();
      assertFalse(boolean1);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      boolean boolean2 = mockFile0.setReadable(false);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0, filenameFilter0);
      assertNotNull(fileSearchIterator0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      FilenameFilter filenameFilter1 = fileSearchIterator0.getFilenameFilter();
      assertNotNull(filenameFilter1);
      assertSame(filenameFilter1, filenameFilter0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.startThread();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      fileSearchIterator0.startThread();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.nextFile();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.util.FileSearchIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"z!B");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("\"z!B", "0Kxh&q<2do`", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"z!B", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("\"z!B", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/user/\"z!B/\"z!B00Kxh&q<2do`", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/home/user/\"z!B", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("\"z!B00Kxh&q<2do`", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      boolean boolean0 = mockFile0.mkdirs();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"z!B", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("\"z!B", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      
      URI uRI0 = mockFile0.toURI();
      assertNotNull(uRI0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"z!B", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("\"z!B", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/home/user/%22z!B/", uRI0.getRawPath());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:/home/user/%22z!B/", uRI0.toString());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(file0, (FilenameFilter) null);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"z!B", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("\"z!B", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/user/\"z!B/\"z!B00Kxh&q<2do`", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/home/user/\"z!B", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("\"z!B00Kxh&q<2do`", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      File file1 = fileSearchIterator0.getRoot();
      assertNotNull(file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(file1, mockFile0);
      assertSame(file1, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"z!B", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("\"z!B", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/user/\"z!B/\"z!B00Kxh&q<2do`", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/home/user/\"z!B", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("\"z!B00Kxh&q<2do`", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals("/home/user/\"z!B", file1.getParent());
      assertEquals("\"z!B00Kxh&q<2do`", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertTrue(file1.canExecute());
      assertEquals("/home/user/\"z!B/\"z!B00Kxh&q<2do`", file1.toString());
      assertTrue(file1.canWrite());
      assertTrue(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.findFile(file1, file1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ufye");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setLastModified(1L);
      assertFalse(boolean0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      fileSearchIterator0.startThread();
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      fileSearchIterator0.finalize();
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      FilenameFilter filenameFilter0 = fileSearchIterator0.getFilenameFilter();
      assertNull(filenameFilter0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      File file0 = MockFile.createTempFile("b}z,gL\"<'{v,+eO", "", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file0.toString());
      assertEquals("b}z,gL\"<'{v,+eO0", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/ufye", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.nextFile();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.util.FileSearchIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ufye");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setLastModified(1L);
      assertFalse(boolean0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("ufye", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("ufye", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      fileSearchIterator0.startThread();
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("ufye", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      fileSearchIterator0.finalize();
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("ufye", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      FilenameFilter filenameFilter0 = fileSearchIterator0.getFilenameFilter();
      assertNull(filenameFilter0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("ufye", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      File file0 = MockFile.createTempFile("b}z,gL\"<'{v,+eO", "", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("b}z,gL\"<'{v,+eO0", file0.getName());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals("/home/user/ufye", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      File file1 = fileSearchIterator0.nextFile();
      assertNotNull(file1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(file1.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals("b}z,gL\"<'{v,+eO0", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/home/user/ufye", file1.getParent());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file1.toString());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      fileSearchIterator0.run();
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      boolean boolean1 = fileSearchIterator0.hasNextFile();
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean1);
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      FilenameFilter filenameFilter1 = fileSearchIterator0.getFilenameFilter();
      assertNull(filenameFilter1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      fileSearchIterator0.findFile(file1, mockFile0);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(file1.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals("b}z,gL\"<'{v,+eO0", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/home/user/ufye", file1.getParent());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file1.toString());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.nextFile();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.util.FileSearchIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(false);
      assertTrue(boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      fileSearchIterator0.startThread();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      fileSearchIterator0.startThread();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.nextFile();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.util.FileSearchIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ufye");
      assertNotNull(mockFile0);
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      fileSearchIterator0.startThread();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      fileSearchIterator0.finalize();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      FilenameFilter filenameFilter0 = fileSearchIterator0.getFilenameFilter();
      assertNull(filenameFilter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      File file0 = MockFile.createTempFile("b}z,gL\"<'{v,+eO", "", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/ufye", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("b}z,gL\"<'{v,+eO0", file0.getName());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      File file1 = file0.getCanonicalFile();
      assertNotNull(file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(file1.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/ufye", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("b}z,gL\"<'{v,+eO0", file0.getName());
      assertTrue(file1.exists());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/home/user/ufye", file1.getParent());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file1.toString());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals("b}z,gL\"<'{v,+eO0", file1.getName());
      
      File file2 = fileSearchIterator0.nextFile();
      assertNotNull(file2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(file2, file1);
      assertNotSame(file2, mockFile0);
      assertNotSame(file2, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(file2.equals((Object)file0));
      assertTrue(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(file2.exists());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertEquals("b}z,gL\"<'{v,+eO0", file2.getName());
      assertEquals(1392409281320L, file2.lastModified());
      assertEquals(0L, file2.getTotalSpace());
      assertTrue(file2.canRead());
      assertTrue(file2.canWrite());
      assertFalse(file2.isHidden());
      assertTrue(file2.isFile());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("/home/user/ufye", file2.getParent());
      assertTrue(file2.canExecute());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file2.toString());
      assertTrue(file2.isAbsolute());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file1));
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      fileSearchIterator0.run();
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file1));
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      fileSearchIterator0.findFile(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/ufye", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("b}z,gL\"<'{v,+eO0", file0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = MockFile.createTempFile(":filter=", "&c\"dsb");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(":filter=0&c\"dsb", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/:filter=0&c\"dsb", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(file0);
      assertNotNull(fileSearchIterator0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(":filter=0&c\"dsb", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/:filter=0&c\"dsb", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      
      FilenameFilter filenameFilter0 = fileSearchIterator0.getFilenameFilter();
      assertNull(filenameFilter0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(":filter=0&c\"dsb", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/:filter=0&c\"dsb", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ufye");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(true, true);
      assertFalse(boolean0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      boolean boolean1 = mockFile0.setLastModified(1L);
      assertFalse(boolean1);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      fileSearchIterator0.startThread();
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      fileSearchIterator0.finalize();
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      FilenameFilter filenameFilter0 = fileSearchIterator0.getFilenameFilter();
      assertNull(filenameFilter0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      
      File file0 = MockFile.createTempFile("b}z,gL\"<'{v,+eO", "", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("b}z,gL\"<'{v,+eO0", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/ufye", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      
      File file1 = fileSearchIterator0.nextFile();
      assertNotNull(file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("b}z,gL\"<'{v,+eO0", file1.getName());
      assertEquals("/home/user/ufye/b}z,gL\"<'{v,+eO0", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertEquals("/home/user/ufye", file1.getParent());
      assertTrue(file1.canExecute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      
      fileSearchIterator0.run();
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      
      fileSearchIterator0.startThread();
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("ufye", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ufye", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.findFile(file1, file1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hIH1V?w?7");
      assertNotNull(mockFile0);
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("hIH1V?w?7", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("hIH1V?w?7", mockFile0.getName());
      
      FileSearchIterator fileSearchIterator1 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator1);
      assertFalse(fileSearchIterator1.equals((Object)fileSearchIterator0));
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("hIH1V?w?7", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("hIH1V?w?7", mockFile0.getName());
      
      fileSearchIterator0.finalize();
      assertNotSame(fileSearchIterator0, fileSearchIterator1);
      assertFalse(fileSearchIterator0.equals((Object)fileSearchIterator1));
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("hIH1V?w?7", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("hIH1V?w?7", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(false);
      assertTrue(boolean0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      
      fileSearchIterator0.run();
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(false);
      assertTrue(boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      
      fileSearchIterator0.run();
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      
      fileSearchIterator0.findFile(mockFile0, mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~", "~");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(false);
      assertFalse(boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/~", mockFile0.getParent());
      assertEquals("~", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/user/~/~", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/~", mockFile0.getParent());
      assertEquals("~", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/user/~/~", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      assertNotNull(fileSearchIterator0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.nextFile();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.util.FileSearchIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.deleteOnExit();
      mockFile0.setWritable(false);
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      fileSearchIterator0.run();
      fileSearchIterator0.getRoot();
      fileSearchIterator0.finalize();
      fileSearchIterator0.startThread();
      fileSearchIterator0.stopThread();
      fileSearchIterator0.hasNextFile();
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getCanonicalPath();
      mockFile0.setWritable(true);
      mockFile1.setExecutable(false);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hIH1V?w?7");
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      File file0 = fileSearchIterator0.getRoot();
      assertEquals(0L, file0.getUsableSpace());
      
      // Undeclared exception!
      try { 
        fileSearchIterator0.findFile(file0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.deleteOnExit();
      mockFile0.setWritable(false);
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0);
      fileSearchIterator0.run();
      FileSearchIterator fileSearchIterator1 = new FileSearchIterator(mockFile0, (FilenameFilter) null);
      File file0 = fileSearchIterator1.getRoot();
      fileSearchIterator0.finalize();
      fileSearchIterator0.startThread();
      fileSearchIterator0.stopThread();
      fileSearchIterator0.hasNextFile();
      FileSearchIterator fileSearchIterator2 = new FileSearchIterator(file0, (FilenameFilter) null);
      fileSearchIterator0.hasNextFile();
      fileSearchIterator0.getRoot();
      FileSearchIterator fileSearchIterator3 = new FileSearchIterator(file0, (FilenameFilter) null);
      fileSearchIterator1.findFile(file0, file0);
      assertNotSame(fileSearchIterator1, fileSearchIterator3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0, filenameFilter0);
      // Undeclared exception!
      try { 
        fileSearchIterator0.findFile(mockFile0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "w>QpB:9zk+5";
      MockFile mockFile0 = new MockFile("w>QpB:9zk+5");
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile0, filenameFilter0);
      // Undeclared exception!
      try { 
        fileSearchIterator0.findFile(mockFile0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.seasar.mayaa.impl.util.FileSearchIterator", "org.seasar.mayaa.impl.util.FileSearchIterator");
      mockFile0.toURI();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.toPath();
      mockFile0.toPath();
      mockFile1.setReadable(true);
      mockFile1.getCanonicalPath();
      FilenameFilter filenameFilter0 = mock(FilenameFilter.class, new ViolatedAssumptionAnswer());
      mockFile0.createNewFile();
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile1, filenameFilter0);
      long long0 = (-3947L);
      // Undeclared exception!
      try { 
        mockFile1.setLastModified((-3947L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative time
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R8", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.setReadable(false, false);
      mockFile1.renameTo(mockFile0);
      mockFile1.setExecutable(false);
      mockFile0.getCanonicalPath();
      mockFile1.toURI();
      mockFile1.mkdirs();
      mockFile0.toURI();
      FileSearchIterator fileSearchIterator0 = new FileSearchIterator(mockFile1);
      // Undeclared exception!
      try { 
        mockFile0.setLastModified((-5750L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative time
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }
}
