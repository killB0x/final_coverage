/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:52:22 GMT 2022
 */

package org.seasar.mayaa.impl.cycle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.seasar.mayaa.cycle.CycleWriter;
import org.seasar.mayaa.impl.cycle.CycleWriterImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CycleWriterImpl_ESTest extends CycleWriterImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, true);
      cycleWriterImpl0.write("", (-3470), 0);
      assertEquals("", cycleWriterImpl0.getString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, true);
      char[] charArray0 = new char[3];
      cycleWriterImpl0.write(charArray0, 1, 1);
      cycleWriterImpl0.getString();
      assertTrue(cycleWriterImpl0.isDirty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl((CycleWriter) null);
      CycleWriter cycleWriter0 = cycleWriterImpl0.getEnclosingWriter();
      assertNull(cycleWriter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cycleWriter0).toString();
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      CycleWriter cycleWriter1 = cycleWriterImpl0.getEnclosingWriter();
      // Undeclared exception!
      try { 
        cycleWriter1.writeOut(cycleWriter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl((CycleWriter) null);
      // Undeclared exception!
      try { 
        cycleWriterImpl0.write((char[]) null, 2445, 2445);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl((CycleWriter) null);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        cycleWriterImpl0.write(charArray0, (-2983), (-2191));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      doReturn(" r)XSb7/oV7TP~t!").when(cycleWriter0).toString();
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, false);
      char[] charArray0 = new char[0];
      CycleWriter cycleWriter1 = cycleWriterImpl0.getEnclosingWriter();
      // Undeclared exception!
      try { 
        ((CycleWriterImpl) cycleWriter1).write(charArray0, (-3557), 3748);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      // Undeclared exception!
      try { 
        cycleWriterImpl0.write("L.~K6(WS%", 0, 1329);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl((CycleWriter) null);
      // Undeclared exception!
      try { 
        cycleWriterImpl0.write((String) null, (-2890), (-2890));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      doReturn("org.seasar.mayaa.impl.cycle.CycleWriterImpl").when(cycleWriter0).toString();
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      CycleWriter cycleWriter1 = cycleWriterImpl0.getEnclosingWriter();
      // Undeclared exception!
      try { 
        ((CycleWriterImpl) cycleWriter1).write("org.seasar.mayaa.impl.cycle.CycleWriterImpl", (int) ';', (int) ';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cycleWriter0).toString();
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      CycleWriter cycleWriter1 = cycleWriterImpl0.getEnclosingWriter();
      // Undeclared exception!
      try { 
        cycleWriter1.isDirty();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cycleWriter0).toString();
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      CycleWriter cycleWriter1 = cycleWriterImpl0.getEnclosingWriter();
      // Undeclared exception!
      try { 
        cycleWriter1.getString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cycleWriter0).toString();
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      CycleWriter cycleWriter1 = cycleWriterImpl0.getEnclosingWriter();
      // Undeclared exception!
      try { 
        cycleWriter1.getEnclosingWriter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cycleWriter0).toString();
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      CycleWriter cycleWriter1 = cycleWriterImpl0.getEnclosingWriter();
      // Undeclared exception!
      try { 
        ((CycleWriterImpl) cycleWriter1).flush();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, false);
      char[] charArray0 = new char[0];
      cycleWriterImpl0.write(charArray0);
      assertFalse(cycleWriterImpl0.isDirty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, true);
      cycleWriterImpl0.flush();
      assertTrue(cycleWriterImpl0.isDirty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, false);
      cycleWriterImpl0.flush();
      assertFalse(cycleWriterImpl0.isDirty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl((CycleWriter) null);
      cycleWriterImpl0.writeOut((Writer) null);
      assertEquals("", cycleWriterImpl0.getString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, true);
      cycleWriterImpl0.write("Z~");
      boolean boolean0 = cycleWriterImpl0.isDirty();
      assertEquals("Z~", cycleWriterImpl0.getString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      boolean boolean0 = cycleWriterImpl0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, true);
      String string0 = cycleWriterImpl0.getString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cycleWriter0).toString();
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0);
      CycleWriter cycleWriter1 = cycleWriterImpl0.getEnclosingWriter();
      // Undeclared exception!
      try { 
        cycleWriter1.clearBuffer();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, true);
      cycleWriterImpl0.close();
      assertFalse(cycleWriterImpl0.isDirty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CycleWriter cycleWriter0 = mock(CycleWriter.class, new ViolatedAssumptionAnswer());
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl(cycleWriter0, true);
      cycleWriterImpl0.clearBuffer();
      assertFalse(cycleWriterImpl0.isDirty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CycleWriterImpl cycleWriterImpl0 = new CycleWriterImpl((CycleWriter) null);
      cycleWriterImpl0.writeOut(cycleWriterImpl0);
      boolean boolean0 = cycleWriterImpl0.isDirty();
      assertTrue(boolean0);
  }
}
