/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:47:26 GMT 2022
 */

package org.seasar.mayaa.impl.cycle.script;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.seasar.mayaa.impl.cycle.script.LiteralScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LiteralScript_ESTest extends LiteralScript_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      String string0 = literalScript0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LiteralScript literalScript0 = new LiteralScript("org.seasar.mayaa.impl.util.AbstractMessagedException");
      String string0 = literalScript0.getScriptText();
      assertEquals("org.seasar.mayaa.impl.util.AbstractMessagedException", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      Class<Void> class0 = Void.TYPE;
      literalScript0.setExpectedClass(class0);
      Class<?> class1 = literalScript0.getExpectedClass();
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      Object object0 = literalScript0.execute((Object[]) null);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LiteralScript literalScript0 = new LiteralScript("org.seasar.mayaa.impl.cycle.script.LiteralScript");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        literalScript0.execute(objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.seasar.mayaa.impl.util.StringUtil
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.LiteralScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      // Undeclared exception!
      try { 
        literalScript0.setExpectedClass((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.LiteralScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LiteralScript literalScript0 = null;
      try {
        literalScript0 = new LiteralScript((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.LiteralScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LiteralScript literalScript0 = new LiteralScript("Vl{l");
      String string0 = literalScript0.toString();
      assertEquals("Vl{l", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      // Undeclared exception!
      try { 
        literalScript0.assignValue((Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.seasar.mayaa.impl.cycle.script.ReadOnlyScriptBlockException
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.LiteralScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      boolean boolean0 = literalScript0.isReadOnly();
      assertTrue(boolean0);
      
      Class<Void>[] classArray0 = (Class<Void>[]) Array.newInstance(Class.class, 8);
      Class<Void> class0 = Void.class;
      classArray0[0] = class0;
      Class<Void> class1 = Void.class;
      Class<Void> class2 = Void.class;
      Object object0 = literalScript0.execute(classArray0);
      assertNotNull(object0);
      assertTrue(literalScript0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      Class<Void>[] classArray0 = (Class<Void>[]) Array.newInstance(Class.class, 8);
      literalScript0.setMethodArgClasses(classArray0);
      assertEquals("", literalScript0.getScriptText());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      String string0 = literalScript0.getScriptText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      Class<?>[] classArray0 = literalScript0.getMethodArgClasses();
      assertNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      Class<?> class0 = literalScript0.getExpectedClass();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      boolean boolean0 = literalScript0.isLiteral();
      assertTrue(boolean0);
  }
}
