/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:48:45 GMT 2022
 */

package org.seasar.mayaa.impl.cycle.script;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.seasar.mayaa.cycle.script.CompiledScript;
import org.seasar.mayaa.impl.cycle.script.ComplexScript;
import org.seasar.mayaa.impl.cycle.script.LiteralScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComplexScript_ESTest extends ComplexScript_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[9];
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      compiledScriptArray0[0] = (CompiledScript) literalScript0;
      LiteralScript literalScript1 = new LiteralScript("kOmtQ!Iqjh%}tcvT");
      compiledScriptArray0[1] = (CompiledScript) literalScript1;
      compiledScriptArray0[2] = (CompiledScript) literalScript1;
      compiledScriptArray0[3] = (CompiledScript) literalScript0;
      compiledScriptArray0[4] = (CompiledScript) literalScript0;
      compiledScriptArray0[5] = (CompiledScript) literalScript1;
      compiledScriptArray0[6] = (CompiledScript) literalScript0;
      compiledScriptArray0[7] = (CompiledScript) literalScript1;
      compiledScriptArray0[8] = (CompiledScript) literalScript0;
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      String string0 = complexScript0.toString();
      assertEquals("kOmtQ!Iqjh%}tcvTkOmtQ!Iqjh%}tcvTkOmtQ!Iqjh%}tcvTkOmtQ!Iqjh%}tcvT", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[8];
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      compiledScriptArray0[0] = (CompiledScript) literalScript0;
      LiteralScript literalScript1 = new LiteralScript("#x\"1&}L");
      compiledScriptArray0[1] = (CompiledScript) literalScript1;
      compiledScriptArray0[2] = (CompiledScript) literalScript1;
      compiledScriptArray0[3] = (CompiledScript) literalScript0;
      compiledScriptArray0[4] = (CompiledScript) literalScript1;
      compiledScriptArray0[5] = (CompiledScript) literalScript0;
      compiledScriptArray0[6] = (CompiledScript) literalScript1;
      compiledScriptArray0[7] = (CompiledScript) literalScript1;
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      String string0 = complexScript0.getScriptText();
      assertEquals("#x\"1&}L#x\"1&}L#x\"1&}L#x\"1&}L#x\"1&}L", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[0];
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      Class<Void> class0 = Void.TYPE;
      complexScript0.setExpectedClass(class0);
      Class<?> class1 = complexScript0.getExpectedClass();
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[1];
      ComplexScript complexScript0 = null;
      try {
        complexScript0 = new ComplexScript(compiledScriptArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.ComplexScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[3];
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      compiledScriptArray0[0] = (CompiledScript) literalScript0;
      compiledScriptArray0[1] = (CompiledScript) literalScript0;
      compiledScriptArray0[2] = (CompiledScript) literalScript0;
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      String string0 = complexScript0.getScriptText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[1];
      LiteralScript literalScript0 = LiteralScript.NULL_LITERAL_SCRIPT;
      compiledScriptArray0[0] = (CompiledScript) literalScript0;
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      // Undeclared exception!
      try { 
        complexScript0.execute(compiledScriptArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.seasar.mayaa.impl.util.ObjectUtil
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.ComplexScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[1];
      LiteralScript literalScript0 = new LiteralScript("");
      compiledScriptArray0[0] = (CompiledScript) literalScript0;
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      Class<Void> class0 = Void.class;
      literalScript0.setExpectedClass(class0);
      // Undeclared exception!
      try { 
        complexScript0.execute(compiledScriptArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.seasar.mayaa.impl.util.ObjectUtil
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.ComplexScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[0];
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      // Undeclared exception!
      try { 
        complexScript0.setExpectedClass((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.ComplexScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[0];
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      Class<Void> class0 = Void.class;
      complexScript0.setExpectedClass(class0);
      Object object0 = complexScript0.execute(compiledScriptArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexScript complexScript0 = null;
      try {
        complexScript0 = new ComplexScript((CompiledScript[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.ComplexScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[0];
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      complexScript0.setMethodArgClasses((Class<?>[]) null);
      assertTrue(complexScript0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[1];
      LiteralScript literalScript0 = new LiteralScript("");
      compiledScriptArray0[0] = (CompiledScript) literalScript0;
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      boolean boolean0 = complexScript0.isReadOnly();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[0];
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      boolean boolean0 = complexScript0.isLiteral();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[0];
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      Class<?>[] classArray0 = complexScript0.getMethodArgClasses();
      assertNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[0];
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      String string0 = complexScript0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[0];
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        complexScript0.assignValue(object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.seasar.mayaa.impl.cycle.script.ReadOnlyScriptBlockException
         //
         verifyException("org.seasar.mayaa.impl.cycle.script.ComplexScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompiledScript[] compiledScriptArray0 = new CompiledScript[0];
      ComplexScript complexScript0 = new ComplexScript(compiledScriptArray0);
      Class<?> class0 = complexScript0.getExpectedClass();
      assertFalse(class0.isPrimitive());
  }
}
