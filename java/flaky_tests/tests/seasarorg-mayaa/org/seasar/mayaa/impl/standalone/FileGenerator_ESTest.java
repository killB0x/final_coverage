/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:53:24 GMT 2022
 */

package org.seasar.mayaa.impl.standalone;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.seasar.mayaa.impl.standalone.FileGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileGenerator_ESTest extends FileGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileGenerator.printVersion();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileGenerator.printHelp();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileGenerator.validate((FileGenerator.Argument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileGenerator.extractAttributes((FileGenerator.Argument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      fileGenerator_Argument0.setBasePath("");
      fileGenerator_Argument0.setOutputPath("");
      FileGenerator.validate(fileGenerator_Argument0);
      assertFalse(fileGenerator_Argument0.isHelp());
      assertFalse(fileGenerator_Argument0.isVersion());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "         : set attributes of application scope.";
      stringArray0[1] = "org.seasar.mayaa.impl.util.IOUtil";
      stringArray0[2] = "\" is not file.";
      stringArray0[3] = "C~Kl[4.|Yyu";
      stringArray0[4] = "'H 60g:8BM$8,X6";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      assertFalse(fileGenerator_Argument0.isHelp());
      
      fileGenerator_Argument0.setHelp(true);
      assertTrue(fileGenerator_Argument0.isHelp());
      
      FileGenerator.validate(fileGenerator_Argument0);
      assertFalse(fileGenerator_Argument0.isVersion());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]kIAu2pLKd$J;-Ss;9=";
      stringArray0[1] = "a/_N5LQy,dSPx";
      stringArray0[2] = "]kIAu2pLKd$J;-Ss;9=";
      stringArray0[3] = "";
      stringArray0[4] = "cr[K*oLx=@LbI@i";
      stringArray0[5] = "-v";
      stringArray0[6] = "PA<l?o(DuL{rvu7{Trk";
      stringArray0[7] = "PA<l?o(DuL{rvu7{Trk";
      stringArray0[8] = "";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      assertTrue(fileGenerator_Argument0.isVersion());
      
      FileGenerator.validate(fileGenerator_Argument0);
      assertFalse(fileGenerator_Argument0.isHelp());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-a";
      // Undeclared exception!
      try { 
        FileGenerator.parse(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lack of argument \"attributes\".
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "EO2HGl%SDL3N";
      stringArray0[2] = "file";
      stringArray0[3] = "azRc4^L\"z\"hk";
      stringArray0[4] = "+olC/$W";
      stringArray0[5] = "~";
      stringArray0[6] = "--attributes";
      // Undeclared exception!
      try { 
        FileGenerator.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-f";
      stringArray0[2] = "-f";
      stringArray0[4] = "R";
      stringArray0[5] = "R";
      stringArray0[6] = "-f";
      // Undeclared exception!
      try { 
        FileGenerator.parse(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lack of argument \"filters\".
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "hGSmF~}g<Av{lwf^";
      stringArray0[1] = "@*(7";
      stringArray0[2] = "@*(7";
      stringArray0[3] = "hGSmF~}g<Av{lwf^";
      stringArray0[4] = "-o";
      // Undeclared exception!
      try { 
        FileGenerator.parse(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lack of argument \"output path\".
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-o";
      // Undeclared exception!
      try { 
        FileGenerator.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--base";
      // Undeclared exception!
      try { 
        FileGenerator.parse(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lack of argument \"base path\".
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--help";
      // Undeclared exception!
      try { 
        FileGenerator.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "/";
      stringArray0[2] = "";
      stringArray0[3] = "n";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "A W|zzM1!";
      stringArray0[7] = "Byt0=Jle{ 6q^_Z&";
      stringArray0[8] = "-h";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      assertFalse(fileGenerator_Argument0.isVersion());
      assertTrue(fileGenerator_Argument0.isHelp());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^&o";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      fileGenerator_Argument0.setFilters("W m6Rh0e7y<1:9{C;~A");
      assertFalse(fileGenerator_Argument0.isHelp());
      assertFalse(fileGenerator_Argument0.isVersion());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      boolean boolean0 = fileGenerator_Argument0.isHelp();
      assertFalse(fileGenerator_Argument0.isVersion());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--version";
      stringArray0[1] = "";
      stringArray0[2] = "";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      assertFalse(fileGenerator_Argument0.isHelp());
      
      fileGenerator_Argument0.setHelp(true);
      assertTrue(fileGenerator_Argument0.isHelp());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      assertFalse(fileGenerator_Argument0.isVersion());
      
      fileGenerator_Argument0.setVersion(true);
      assertTrue(fileGenerator_Argument0.isVersion());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--version";
      stringArray0[1] = "";
      stringArray0[2] = "";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      boolean boolean0 = fileGenerator_Argument0.isVersion();
      assertFalse(fileGenerator_Argument0.isHelp());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "gHv5Q$Njap^";
      stringArray0[3] = "";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      fileGenerator_Argument0.getAttributes();
      assertFalse(fileGenerator_Argument0.isHelp());
      assertFalse(fileGenerator_Argument0.isVersion());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rbdA*D)pVT&sa~H-Y";
      stringArray0[1] = "";
      stringArray0[2] = "7";
      stringArray0[3] = "Please set base path (-b, --base).";
      stringArray0[4] = "";
      stringArray0[5] = "org.seasar.mayaa.useURLCache";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      fileGenerator_Argument0.getPropertyFilePath();
      assertFalse(fileGenerator_Argument0.isVersion());
      assertFalse(fileGenerator_Argument0.isHelp());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      fileGenerator_Argument0.getOutputPath();
      assertFalse(fileGenerator_Argument0.isVersion());
      assertFalse(fileGenerator_Argument0.isHelp());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      fileGenerator_Argument0.getBasePath();
      assertFalse(fileGenerator_Argument0.isVersion());
      assertFalse(fileGenerator_Argument0.isHelp());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      fileGenerator_Argument0.setPropertyFilePath("--filters");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--filters");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "--filters");
      // Undeclared exception!
      try { 
        FileGenerator.extractAttributes(fileGenerator_Argument0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.seasar.mayaa.impl.util.IOUtil
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse((String[]) null);
      fileGenerator_Argument0.setPropertyFilePath("/");
      fileGenerator_Argument0.setAttributes("/");
      // Undeclared exception!
      try { 
        FileGenerator.extractAttributes(fileGenerator_Argument0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.seasar.mayaa.impl.util.IOUtil
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wDr9gX?DtIHK:l,~x";
      stringArray0[1] = "--property";
      stringArray0[2] = "J";
      stringArray0[3] = "\"(";
      stringArray0[4] = "J";
      stringArray0[5] = "--filters";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      // Undeclared exception!
      try { 
        FileGenerator.extractAttributes(fileGenerator_Argument0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.seasar.mayaa.impl.util.IOUtil
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse((String[]) null);
      fileGenerator_Argument0.setAttributes("pFw5sN:t%n.~jvX=");
      Map<Object, Object> map0 = FileGenerator.extractAttributes(fileGenerator_Argument0);
      assertFalse(fileGenerator_Argument0.isHelp());
      assertFalse(fileGenerator_Argument0.isVersion());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      fileGenerator_Argument0.setBasePath("");
      fileGenerator_Argument0.setOutputPath("");
      fileGenerator_Argument0.setPropertyFilePath("");
      // Undeclared exception!
      try { 
        FileGenerator.validate(fileGenerator_Argument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property file \"\" is not file.
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("d");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      fileGenerator_Argument0.setBasePath("");
      fileGenerator_Argument0.setOutputPath("");
      fileGenerator_Argument0.setPropertyFilePath("d");
      FileGenerator.validate(fileGenerator_Argument0);
      assertFalse(fileGenerator_Argument0.isVersion());
      assertFalse(fileGenerator_Argument0.isHelp());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      fileGenerator_Argument0.setBasePath("");
      fileGenerator_Argument0.setOutputPath("");
      fileGenerator_Argument0.setPropertyFilePath("d");
      // Undeclared exception!
      try { 
        FileGenerator.validate(fileGenerator_Argument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property file \"d\" is not exists.
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("'n){C~\\up`yL(8");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      String string0 = "'n){C~\\up`yL(8";
      fileGenerator_Argument0.setBasePath(string0);
      fileGenerator_Argument0.setOutputPath(string0);
      // Undeclared exception!
      try { 
        FileGenerator.validate(fileGenerator_Argument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base path \"'n){C~\\up`yL(8\" is not directory.
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      fileGenerator_Argument0.setBasePath("k`S1>}#yW");
      fileGenerator_Argument0.setOutputPath("k`S1>}#yW");
      // Undeclared exception!
      try { 
        FileGenerator.validate(fileGenerator_Argument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base path \"k`S1>}#yW\" is not exists.
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-p";
      // Undeclared exception!
      try { 
        FileGenerator.parse(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lack of argument \"property file path\".
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--attributes";
      FileGenerator.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--output";
      FileGenerator.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":>@%G0$,@t]ek{/";
      stringArray0[1] = "--output";
      // Undeclared exception!
      try { 
        FileGenerator.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--help";
      // Undeclared exception!
      try { 
        FileGenerator.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "_Lsg}#x25s";
      stringArray0[1] = "-b";
      stringArray0[2] = "/";
      stringArray0[3] = "       -f, --filters <filter-strings>";
      stringArray0[4] = "-o";
      stringArray0[5] = "wCeMoG^j&";
      stringArray0[6] = "-Sx~EpuhC%]`v!RYQ0I";
      // Undeclared exception!
      try { 
        FileGenerator.main(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/servlet/ServletContext
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-v";
      FileGenerator.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      fileGenerator_Argument0.setBasePath(stringArray0[0]);
      // Undeclared exception!
      try { 
        FileGenerator.validate(fileGenerator_Argument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Please set output path (-o, --output).
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "-b";
      stringArray0[3] = "";
      FileGenerator.Argument fileGenerator_Argument0 = FileGenerator.parse(stringArray0);
      fileGenerator_Argument0.getFilters();
      assertFalse(fileGenerator_Argument0.isHelp());
      assertFalse(fileGenerator_Argument0.isVersion());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      FileGenerator.extractAttributes(fileGenerator_Argument0);
      assertFalse(fileGenerator_Argument0.isVersion());
      assertFalse(fileGenerator_Argument0.isHelp());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-h";
      FileGenerator.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      fileGenerator_Argument0.setAttributes("=2vt^\"ZBR/Qj>Ms:");
      Map<Object, Object> map0 = FileGenerator.extractAttributes(fileGenerator_Argument0);
      assertFalse(fileGenerator_Argument0.isVersion());
      assertFalse(fileGenerator_Argument0.isHelp());
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileGenerator.Argument fileGenerator_Argument0 = new FileGenerator.Argument();
      // Undeclared exception!
      try { 
        FileGenerator.validate(fileGenerator_Argument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Please set base path (-b, --base).
         //
         verifyException("org.seasar.mayaa.impl.standalone.FileGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileGenerator fileGenerator0 = new FileGenerator();
      assertFalse(FileGenerator.generating);
  }
}
