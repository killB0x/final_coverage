/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:27:53 GMT 2022
 */

package io.joshworks.restclient.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.joshworks.restclient.http.MediaType;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MediaType_ESTest extends MediaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("s=me2%`|]M=e", "s=me2%`|]M=e");
      MediaType mediaType0 = new MediaType("s=me2%`|]M=e", "s=me2%`|]M=e", hashMap0);
      mediaType0.hashCode();
      assertEquals(1, hashMap0.size());
      assertEquals("s=me2%`|]M=e", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_FORM_URLENCODED_TYPE;
      MediaType mediaType1 = MediaType.valueOf("application/x-www-form-urlencoded");
      boolean boolean0 = mediaType0.equals(mediaType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaType mediaType0 = MediaType.getMimeForFile("html");
      assertEquals("html", mediaType0.getSubtype());
      assertEquals("text", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaType mediaType0 = MediaType.valueOf("*/*");
      boolean boolean0 = mediaType0.isWildcardSubtype();
      assertTrue(boolean0);
      assertTrue(mediaType0.isWildcardType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType0 = new MediaType("", "", hashMap0);
      String string0 = mediaType0.getType();
      assertEquals("", string0);
      assertEquals("", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType0 = new MediaType("", "", hashMap0);
      String string0 = mediaType0.getSubtype();
      assertEquals("", string0);
      assertEquals("", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = new MediaType("i2Y? _; ", "tnz pPCQeL4HV+B15", (Map<String, String>) null);
      mediaType0.getParameters();
      assertEquals("tnz pPCQeL4HV+B15", mediaType0.getSubtype());
      assertEquals("i2Y? _; ", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MediaType.valueOf("$0.nQ{wwC/}ckr=J;");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("io.joshworks.restclient.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      MediaType mediaType0 = null;
      try {
        mediaType0 = new MediaType((String) null, (String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.joshworks.restclient.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_XML_TYPE;
      String string0 = mediaType0.getType();
      assertEquals("text", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("s=me2%`|]M=e", "s=me2%`|]M=e");
      MediaType mediaType0 = new MediaType("s=me2%`|]M=e", "s=me2%`|]M=e", hashMap0);
      String string0 = mediaType0.toString();
      assertEquals("s=me2%`|]M=e/s=me2%`|]M=e; s=me2%`|]m=e=s=me2%`|]M=e", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_XML_TYPE;
      String string0 = mediaType0.TEXT_PLAIN_TYPE.toString();
      assertEquals("text/plain", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_OCTET_STREAM_TYPE;
      MediaType mediaType1 = MediaType.valueOf("application/atom+xml");
      boolean boolean0 = mediaType1.equals(mediaType0);
      assertFalse(boolean0);
      assertEquals("application", mediaType1.getType());
      assertEquals("atom+xml", mediaType1.getSubtype());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_XML_TYPE;
      MediaType mediaType1 = MediaType.getMimeForFile(" ");
      boolean boolean0 = mediaType1.equals(mediaType0);
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_OCTET_STREAM_TYPE;
      boolean boolean0 = mediaType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_XML_TYPE;
      boolean boolean0 = mediaType0.equals(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaType mediaType0 = new MediaType("?", "?");
      MediaType mediaType1 = new MediaType("?", "=");
      boolean boolean0 = mediaType1.isCompatible(mediaType0);
      assertFalse(boolean0);
      assertEquals("?", mediaType1.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaType mediaType0 = new MediaType("?", "?");
      MediaType mediaType1 = new MediaType("?", "*");
      boolean boolean0 = mediaType0.isCompatible(mediaType1);
      assertEquals("?", mediaType1.getType());
      assertTrue(mediaType1.isWildcardSubtype());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaType mediaType0 = new MediaType(")", (String) null);
      boolean boolean0 = mediaType0.isCompatible(mediaType0);
      assertEquals(")", mediaType0.getType());
      assertTrue(mediaType0.isWildcardSubtype());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType0 = new MediaType("", "", hashMap0);
      MediaType mediaType1 = new MediaType("application/x-www-form-urlencoded", "/");
      boolean boolean0 = mediaType1.isCompatible(mediaType0);
      assertFalse(boolean0);
      assertEquals("/", mediaType1.getSubtype());
      assertEquals("", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_FORM_URLENCODED_TYPE;
      MediaType mediaType1 = MediaType.valueOf("*/*");
      boolean boolean0 = mediaType0.isCompatible(mediaType1);
      assertTrue(boolean0);
      assertTrue(mediaType1.isWildcardSubtype());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_FORM_URLENCODED_TYPE;
      MediaType mediaType1 = MediaType.valueOf("*/*");
      boolean boolean0 = mediaType1.isCompatible(mediaType0);
      assertTrue(boolean0);
      assertTrue(mediaType1.isWildcardSubtype());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN_TYPE;
      boolean boolean0 = mediaType0.isCompatible((MediaType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_XML_TYPE;
      boolean boolean0 = mediaType0.isCompatible(mediaType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.getMimeForFile("json");
      assertEquals("application", mediaType0.getType());
      assertEquals("json", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = MediaType.getMimeForFile("");
      assertEquals("octet-stream", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaType mediaType0 = MediaType.getMimeForFile((String) null);
      assertEquals("octet-stream", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.valueOf("0/.]~;p-Y)LZuui ~W");
      assertEquals(".]~", mediaType0.getSubtype());
      assertEquals("0", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      try { 
        MediaType.valueOf(" /*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mime type ' /*'
         //
         verifyException("io.joshworks.restclient.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      try { 
        MediaType.valueOf("X?t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mime type 'X?t'
         //
         verifyException("io.joshworks.restclient.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      try { 
        MediaType.valueOf("TP/w./tgM\"O3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mime type 'TP/w./tgM\"O3'
         //
         verifyException("io.joshworks.restclient.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MediaType mediaType0 = MediaType.valueOf("sv4crc");
      assertEquals("x-sv4crc", mediaType0.getSubtype());
      assertEquals("application", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      try { 
        MediaType.valueOf("*/*/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mime type '*_/*_/'
         //
         verifyException("io.joshworks.restclient.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      try { 
        MediaType.valueOf("/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mime type '/'
         //
         verifyException("io.joshworks.restclient.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      try { 
        MediaType.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mime type ''
         //
         verifyException("io.joshworks.restclient.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      try { 
        MediaType.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mime type 'null'
         //
         verifyException("io.joshworks.restclient.http.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MediaType mediaType0 = MediaType.valueOf("+?QVHu /v_X`h;=(L");
      assertEquals("+?QVHu", mediaType0.getType());
      assertEquals("v_X`h", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_XML_TYPE;
      boolean boolean0 = mediaType0.isWildcardSubtype();
      assertEquals("xml", mediaType0.getSubtype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML_TYPE;
      boolean boolean0 = mediaType0.isWildcardType();
      assertEquals("application", mediaType0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_XML_TYPE;
      String string0 = mediaType0.getSubtype();
      assertEquals("xml", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      boolean boolean0 = mediaType0.isWildcardType();
      assertTrue(boolean0);
      assertTrue(mediaType0.isWildcardSubtype());
  }
}
