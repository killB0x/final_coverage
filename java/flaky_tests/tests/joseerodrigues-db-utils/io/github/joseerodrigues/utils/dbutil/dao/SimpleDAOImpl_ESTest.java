/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:51:57 GMT 2022
 */

package io.github.joseerodrigues.utils.dbutil.dao;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.joseerodrigues.utils.dbutil.DBUtil;
import io.github.joseerodrigues.utils.dbutil.ResultSetMapper;
import io.github.joseerodrigues.utils.dbutil.SQLConnectionFactory;
import io.github.joseerodrigues.utils.dbutil.dao.DAOBuilder;
import io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl;
import io.github.joseerodrigues.utils.dbutil.mapper.BasicResultSetMapper;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleDAOImpl_ESTest extends SimpleDAOImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-94)).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-94)).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[8];
      boolean boolean0 = simpleDAOImpl0.delete("", objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Object[] objectArray0 = new Object[7];
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>(dBUtil0, dAOBuilder_InitContainer0);
      String string0 = simpleDAOImpl0.selectOne(dBUtil0, "4+X p<gd'}:", objectArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[4];
      List<DBUtil> list0 = simpleDAOImpl0.selectAll("", objectArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Object[] objectArray0 = new Object[4];
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>(dBUtil0, dAOBuilder_InitContainer0);
      List<DAOBuilder.FieldInfo> list0 = simpleDAOImpl0.selectAll(dBUtil0, "", objectArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      BasicResultSetMapper<String> basicResultSetMapper0 = new BasicResultSetMapper<String>("INSERT INTO ");
      dAOBuilder_InitContainer0.mapper = (ResultSetMapper) basicResultSetMapper0;
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      doReturn(false).when(connection0).isClosed();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>(dBUtil0, dAOBuilder_InitContainer0);
      UnaryOperator<DBUtil> unaryOperator0 = UnaryOperator.identity();
      Function<Object, DBUtil> function0 = (Function<Object, DBUtil>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<DBUtil, DBUtil> function1 = unaryOperator0.andThen((Function<? super DBUtil, ? extends DBUtil>) function0);
      DBUtil dBUtil1 = simpleDAOImpl0.insideTransaction(function1);
      assertNull(dBUtil1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      doReturn(false).when(connection0).isClosed();
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>(dBUtil0, dAOBuilder_InitContainer0);
      Function<DBUtil, DBUtil> function0 = Function.identity();
      DBUtil dBUtil1 = simpleDAOImpl0.insideTransaction(function0);
      assertNotSame(dBUtil0, dBUtil1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-9)).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(2147483645).when(statement0).executeUpdate(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection1).createStatement();
      doReturn(true).when(connection1).isClosed();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, connection1).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[8];
      simpleDAOImpl0.delete("colName il empty", objectArray0);
      Charset charset0 = Charset.defaultCharset();
      boolean boolean0 = simpleDAOImpl0.insert(charset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      dAOBuilder_InitContainer0.tableName = "io.github.joseerodrigues.utils.dbutil.mapper.ResultSetMap";
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>(dBUtil0, dAOBuilder_InitContainer0);
      String string0 = simpleDAOImpl0.getTableName();
      assertEquals("io.github.joseerodrigues.utils.dbutil.mapper.ResultSetMap", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>((DBUtil) null, dAOBuilder_InitContainer0);
      String string0 = simpleDAOImpl0.getSqlSelect(") VALUES (", ") VALUES (");
      assertEquals("SELECT ) VALUES ( FROM  WHERE ) VALUES (", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(statement0).executeUpdate(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      doReturn(false).when(connection0).isClosed();
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      DBUtil dBUtil0 = new DBUtil(connection0);
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>(dBUtil0, dAOBuilder_InitContainer0);
      boolean boolean0 = simpleDAOImpl0.delete("eKO17u", (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, (DAOBuilder.InitContainer) null);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.update((DBUtil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectOne("ds", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectOne((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // condition cannot be null
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-17)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Object[] objectArray0 = new Object[4];
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectOne("6", objectArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -17
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.mapper.MapResultSetMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2044).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectOne("%:ead>\"w>K*", objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectOne((DBUtil) null, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // condition cannot be null
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-18)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectOne(dBUtil0, "COUNT(1) AS COUNT", objectArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -18
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.mapper.MapResultSetMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2296).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Object[] objectArray0 = new Object[3];
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectOne(dBUtil0, "B\"W=MjQ_X]lFI+HN4", objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[4];
      List<DBUtil> list0 = simpleDAOImpl0.selectAll("H>", objectArray0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2147483645).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      simpleDAOImpl0.selectAll("", objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll("", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // condition cannot be null
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-41)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll("", objectArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -41
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.mapper.MapResultSetMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1692).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll("N6", objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll((DBUtil) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // condition cannot be null
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-646)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Object[] objectArray0 = new Object[4];
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll(dBUtil0, "%:ead>\"w>K*", objectArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -646
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.mapper.MapResultSetMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      doReturn(false).when(connection0).isClosed();
      DBUtil dBUtil0 = new DBUtil(connection0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.insideTransaction((Function<DBUtil, DAOBuilder.FieldInfo>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.insideTransaction((Function<DBUtil, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.insert((DBUtil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(false).when(connection0).isClosed();
      DBUtil dBUtil0 = new DBUtil(connection0);
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.insert(dBUtil0, dBUtil0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>((DBUtil) null, (DAOBuilder.InitContainer) null);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.getTableName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, (DAOBuilder.InitContainer) null);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.getSqlSelect("|::W8j", "|::W8j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.getSqlSelect((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // condition cannot be null
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>((DBUtil) null, (DAOBuilder.InitContainer) null);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.getResultSetMapper();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>((DBUtil) null, (DAOBuilder.InitContainer) null);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.getColumnNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete("", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // condition cannot be null
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(3150).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      doReturn(false).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Object[] objectArray0 = new Object[4];
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete("!-Exo^d\"(9\"frNiGd", objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, (DAOBuilder.InitContainer) null);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete((DBUtil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>((DBUtil) null, (DAOBuilder.InitContainer) null);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete((DBUtil) null, "zJ;_N", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(4788).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete(dBUtil0, "' not found", objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count("%:ead>\"w>K*", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // condition cannot be null
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DAOBuilder.FieldInfo dAOBuilder_FieldInfo0 = new DAOBuilder.FieldInfo();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(dAOBuilder_FieldInfo0).when(resultSet0).getObject(anyString());
      doReturn(true).when(resultSet0).next();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count("%:ead>\"w>K*", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class io.github.joseerodrigues.utils.dbutil.dao.DAOBuilder$FieldInfo cannot be cast to class java.lang.Long (io.github.joseerodrigues.utils.dbutil.dao.DAOBuilder$FieldInfo is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @18c5f661; java.lang.Long is in module java.base of loader 'bootstrap')
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.CountMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(4146).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Object[] objectArray0 = new Object[4];
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count("%:ead>\"w>K*", objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count((DBUtil) null, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // condition cannot be null
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(false).when(connection0).isClosed();
      DBUtil dBUtil0 = new DBUtil(connection0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<Locale.Category, DBUtil>> simpleDAOImpl0 = new SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<Locale.Category, DBUtil>>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DAOBuilder.FieldInfo dAOBuilder_FieldInfo0 = new DAOBuilder.FieldInfo();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(dAOBuilder_FieldInfo0).when(resultSet0).getObject(anyString());
      doReturn(true).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).createStatement();
      doReturn(true).when(connection0).isClosed();
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class io.github.joseerodrigues.utils.dbutil.dao.DAOBuilder$FieldInfo cannot be cast to class java.lang.Long (io.github.joseerodrigues.utils.dbutil.dao.DAOBuilder$FieldInfo is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @18c5f661; java.lang.Long is in module java.base of loader 'bootstrap')
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.CountMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.update((DBUtil) null, (DBUtil) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // object does not have primary keys defined
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-9)).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Object[] objectArray0 = new Object[8];
      SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<Charset, DBUtil>> simpleDAOImpl0 = new SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<Charset, DBUtil>>(dBUtil0, dAOBuilder_InitContainer0);
      boolean boolean0 = simpleDAOImpl0.delete(dBUtil0, "", objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete((DBUtil) null, (DBUtil) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // object does not have primary keys defined
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(statement0).executeUpdate(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      doReturn(true).when(connection0).isClosed();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      boolean boolean0 = simpleDAOImpl0.insert(dBUtil0, dBUtil0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, (DAOBuilder.InitContainer) null);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll((DBUtil) null, "C", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count((DBUtil) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectOne((DBUtil) null, "*", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      dAOBuilder_InitContainer0.primaryKeysColumns = list0;
      // Undeclared exception!
      try { 
        simpleDAOImpl0.update(dBUtil0, dBUtil0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      dAOBuilder_InitContainer0.primaryKeysColumns = list0;
      HashMap<String, DAOBuilder.FieldInfo> hashMap0 = new HashMap<String, DAOBuilder.FieldInfo>();
      DAOBuilder.FieldInfo dAOBuilder_FieldInfo0 = new DAOBuilder.FieldInfo();
      DAOBuilder.FieldInfo dAOBuilder_FieldInfo1 = hashMap0.put("eKO17u", dAOBuilder_FieldInfo0);
      hashMap0.put("X&", dAOBuilder_FieldInfo1);
      dAOBuilder_InitContainer0.colsFields = (Map<String, DAOBuilder.FieldInfo>) hashMap0;
      // Undeclared exception!
      try { 
        simpleDAOImpl0.update(dBUtil0, dBUtil0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      dAOBuilder_InitContainer0.primaryKeysColumns = list0;
      HashMap<String, DAOBuilder.FieldInfo> hashMap0 = new HashMap<String, DAOBuilder.FieldInfo>();
      DAOBuilder.FieldInfo dAOBuilder_FieldInfo0 = new DAOBuilder.FieldInfo();
      hashMap0.put("eKO17u", dAOBuilder_FieldInfo0);
      dAOBuilder_InitContainer0.colsFields = (Map<String, DAOBuilder.FieldInfo>) hashMap0;
      // Undeclared exception!
      try { 
        simpleDAOImpl0.update(dBUtil0, dBUtil0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      dAOBuilder_InitContainer0.primaryKeysColumns = list0;
      // Undeclared exception!
      try { 
        simpleDAOImpl0.update(dBUtil0, dBUtil0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(statement0).executeUpdate(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      doReturn(false).when(connection0).getAutoCommit();
      doReturn(false).when(connection0).isClosed();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<Charset, DBUtil>> simpleDAOImpl0 = new SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<Charset, DBUtil>>(dBUtil0, dAOBuilder_InitContainer0);
      boolean boolean0 = simpleDAOImpl0.delete(dBUtil0, "5EvAG4TKG ", (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<DBUtil, MockFileInputStream>> simpleDAOImpl0 = new SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<DBUtil, MockFileInputStream>>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete(dBUtil0, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      dAOBuilder_InitContainer0.primaryKeysColumns = list0;
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete((DBUtil) null, (DBUtil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      dAOBuilder_InitContainer0.primaryKeysColumns = list0;
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>(dBUtil0, dAOBuilder_InitContainer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete(dBUtil0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(statement0).executeUpdate(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      doReturn(true).when(connection0).isClosed();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      boolean boolean0 = simpleDAOImpl0.insert(dBUtil0, dBUtil0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-9)).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(statement0).executeUpdate(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection1).createStatement();
      doReturn(true).when(connection1).isClosed();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, connection1).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>(dBUtil0, dAOBuilder_InitContainer0);
      Object[] objectArray0 = new Object[8];
      boolean boolean0 = simpleDAOImpl0.delete("colName il empty", objectArray0);
      Charset charset0 = Charset.defaultCharset();
      boolean boolean1 = simpleDAOImpl0.insert(charset0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      dAOBuilder_InitContainer0.generatedColumns = list0;
      // Undeclared exception!
      try { 
        simpleDAOImpl0.insert((DBUtil) null, (DBUtil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<String, DAOBuilder.FieldInfo> hashMap0 = new HashMap<String, DAOBuilder.FieldInfo>();
      DAOBuilder.FieldInfo dAOBuilder_FieldInfo0 = new DAOBuilder.FieldInfo();
      hashMap0.put("{PX&", dAOBuilder_FieldInfo0);
      hashMap0.put("m(", dAOBuilder_FieldInfo0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      dAOBuilder_InitContainer0.colsFields = (Map<String, DAOBuilder.FieldInfo>) hashMap0;
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.insert((DBUtil) null, (DBUtil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).createStatement();
      doReturn(true).when(connection0).isClosed();
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      dAOBuilder_InitContainer0.defaultSelectClause = "%:ead>\"w>K*";
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.count();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.insideTransaction((Function<DBUtil, List<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.delete((DBUtil) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // object does not have primary keys defined
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>((DBUtil) null, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.update((DBUtil) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // object does not have primary keys defined
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.dao.SimpleDAOImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(true).when(connection0).isClosed();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<Charset> simpleDAOImpl0 = new SimpleDAOImpl<Charset>(dBUtil0, dAOBuilder_InitContainer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        simpleDAOImpl0.insert(charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<DBUtil, Charset>> simpleDAOImpl0 = new SimpleDAOImpl<AbstractMap.SimpleImmutableEntry<DBUtil, Charset>>(dBUtil0, dAOBuilder_InitContainer0);
      ResultSetMapper<AbstractMap.SimpleImmutableEntry<DBUtil, Charset>> resultSetMapper0 = simpleDAOImpl0.getResultSetMapper();
      assertNotNull(resultSetMapper0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<MockFileInputStream> simpleDAOImpl0 = new SimpleDAOImpl<MockFileInputStream>(dBUtil0, dAOBuilder_InitContainer0);
      Set<String> set0 = simpleDAOImpl0.getColumnNames();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).isClosed();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      Object[] objectArray0 = new Object[4];
      SimpleDAOImpl<DAOBuilder.FieldInfo> simpleDAOImpl0 = new SimpleDAOImpl<DAOBuilder.FieldInfo>(dBUtil0, dAOBuilder_InitContainer0);
      DAOBuilder.FieldInfo dAOBuilder_FieldInfo0 = simpleDAOImpl0.selectOne("6", objectArray0);
      assertNull(dAOBuilder_FieldInfo0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<String> simpleDAOImpl0 = new SimpleDAOImpl<String>(dBUtil0, dAOBuilder_InitContainer0);
      String string0 = simpleDAOImpl0.getTableName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      DAOBuilder.InitContainer dAOBuilder_InitContainer0 = new DAOBuilder.InitContainer();
      SimpleDAOImpl<DBUtil> simpleDAOImpl0 = new SimpleDAOImpl<DBUtil>(dBUtil0, dAOBuilder_InitContainer0);
      // Undeclared exception!
      try { 
        simpleDAOImpl0.selectAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }
}
