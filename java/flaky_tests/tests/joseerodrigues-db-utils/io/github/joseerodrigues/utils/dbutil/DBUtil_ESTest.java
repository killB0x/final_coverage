/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:48:09 GMT 2022
 */

package io.github.joseerodrigues.utils.dbutil;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.joseerodrigues.utils.dbutil.DBUtil;
import io.github.joseerodrigues.utils.dbutil.JDBCAction;
import io.github.joseerodrigues.utils.dbutil.ListSimpleResultSetIterator;
import io.github.joseerodrigues.utils.dbutil.QueryTranslator;
import io.github.joseerodrigues.utils.dbutil.ResultSetIterator;
import io.github.joseerodrigues.utils.dbutil.ResultSetMapper;
import io.github.joseerodrigues.utils.dbutil.SQLConnectionFactory;
import io.github.joseerodrigues.utils.dbutil.SimpleQueryTranslator;
import io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl;
import io.github.joseerodrigues.utils.dbutil.mapper.BasicResultSetMapper;
import io.github.joseerodrigues.utils.dbutil.mapper.BeanResultSetMapper;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.concurrent.Delayed;
import java.util.function.Function;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn(false).when(connection0).getAutoCommit();
      doReturn(false).when(connection0).isClosed();
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      JDBCAction<DBUtil> jDBCAction0 = (JDBCAction<DBUtil>) mock(JDBCAction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jDBCAction0).execute(any(java.sql.Connection.class));
      DBUtil dBUtil1 = dBUtil0.useConnection(jDBCAction0);
      assertNull(dBUtil1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      JDBCAction<DBUtil> jDBCAction0 = (JDBCAction<DBUtil>) mock(JDBCAction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dBUtil0.useConnection(jDBCAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        dBUtil0.update("4", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      Object[] objectArray0 = new Object[3];
      Class<Object> class0 = Object.class;
      BeanResultSetMapper<Object> beanResultSetMapper0 = new BeanResultSetMapper<Object>(class0);
      // Undeclared exception!
      try { 
        dBUtil0.selectOne("2FdgEm'gVAA;", (ResultSetMapper<Object>) beanResultSetMapper0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dBUtil0.selectOne("io.github.joseerodrigues.utils.dbutil.DBUtil", (ResultSetMapper<Delayed>) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rsMapper
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      Class<DBUtil> class0 = DBUtil.class;
      BeanResultSetMapper<DBUtil> beanResultSetMapper0 = new BeanResultSetMapper<DBUtil>(class0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        dBUtil0.selectOne("", (ResultSetMapper<DBUtil>) beanResultSetMapper0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // query
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      // Undeclared exception!
      try { 
        dBUtil0.selectOne("N", (ResultSetMapper<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rsMapper
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      BasicResultSetMapper<String> basicResultSetMapper0 = new BasicResultSetMapper<String>("io.github.joseerodrigues.utils.dbutil.mapper.BeanResultSetMapper");
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        dBUtil0.selectAll("P6XHC;P?G}aD\"izbLH", (ResultSetMapper<String>) basicResultSetMapper0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      // Undeclared exception!
      try { 
        dBUtil0.rollback();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(sQLConnectionFactory0).getConnection();
      SimpleQueryTranslator simpleQueryTranslator0 = new SimpleQueryTranslator();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0, simpleQueryTranslator0);
      BasicResultSetMapper<DBUtil> basicResultSetMapper0 = new BasicResultSetMapper<DBUtil>("Column '");
      ListSimpleResultSetIterator<DBUtil> listSimpleResultSetIterator0 = new ListSimpleResultSetIterator<DBUtil>(false);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        dBUtil0.iterate("[hSoo/',", (ResultSetMapper<DBUtil>) basicResultSetMapper0, (ResultSetIterator<DBUtil>) listSimpleResultSetIterator0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      Class<String> class0 = String.class;
      BeanResultSetMapper<String> beanResultSetMapper0 = new BeanResultSetMapper<String>(class0);
      ListSimpleResultSetIterator<String> listSimpleResultSetIterator0 = new ListSimpleResultSetIterator<String>(false);
      // Undeclared exception!
      try { 
        dBUtil0.iterate("", (ResultSetMapper<String>) beanResultSetMapper0, (ResultSetIterator<String>) listSimpleResultSetIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // query
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(sQLConnectionFactory0).getConnection();
      SimpleQueryTranslator simpleQueryTranslator0 = new SimpleQueryTranslator();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0, simpleQueryTranslator0);
      // Undeclared exception!
      try { 
        dBUtil0.iterate(")g:P", (ResultSetIterator<ResultSet>) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      SimpleQueryTranslator simpleQueryTranslator0 = new SimpleQueryTranslator();
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0, simpleQueryTranslator0);
      ListSimpleResultSetIterator<ResultSet> listSimpleResultSetIterator0 = new ListSimpleResultSetIterator<ResultSet>(true);
      // Undeclared exception!
      try { 
        dBUtil0.iterate("io.github.joseerodrigues.utils.dbutil.JDBCAction", (ResultSetIterator<ResultSet>) listSimpleResultSetIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      // Undeclared exception!
      try { 
        dBUtil0.insert("me}\"4_7", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn(false).when(connection0).isClosed();
      DBUtil dBUtil0 = new DBUtil(connection0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        dBUtil0.insert("", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // query
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      // Undeclared exception!
      try { 
        dBUtil0.insert("io.github.joseerodrigues.utils.dbutil.DBUtil");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      // Undeclared exception!
      try { 
        dBUtil0.hasResults("io.github.joseerodrigues.utils.dbutil.mapper.SimpleResultSetMapper");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      // Undeclared exception!
      try { 
        dBUtil0.getKeysForInsert(":zxGZ8<,<*l^g", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      // Undeclared exception!
      try { 
        dBUtil0.getKeysForInsert("E^<WM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn(false).when(connection0).isClosed();
      DBUtil dBUtil0 = new DBUtil(connection0);
      // Undeclared exception!
      try { 
        dBUtil0.delete("", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // query
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleQueryTranslator simpleQueryTranslator0 = new SimpleQueryTranslator();
      DBUtil dBUtil0 = null;
      try {
        dBUtil0 = new DBUtil((DataSource) null, simpleQueryTranslator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ds
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleQueryTranslator simpleQueryTranslator0 = new SimpleQueryTranslator();
      DBUtil dBUtil0 = null;
      try {
        dBUtil0 = new DBUtil((Connection) null, simpleQueryTranslator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBUtil dBUtil0 = null;
      try {
        dBUtil0 = new DBUtil((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBUtil dBUtil0 = null;
      try {
        dBUtil0 = new DBUtil((SQLConnectionFactory) null, (QueryTranslator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // connectionFactory
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(false).when(connection0).isClosed();
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl(connection0);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      // Undeclared exception!
      try { 
        dBUtil0.update("QxxJ~K_Z=\"qpFEgDI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(false).when(connection0).isClosed();
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl(connection0);
      SimpleQueryTranslator simpleQueryTranslator0 = new SimpleQueryTranslator();
      Class<DBUtil> class0 = DBUtil.class;
      BeanResultSetMapper<DBUtil> beanResultSetMapper0 = new BeanResultSetMapper<DBUtil>(class0);
      ListSimpleResultSetIterator<DBUtil> listSimpleResultSetIterator0 = new ListSimpleResultSetIterator<DBUtil>(false);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        dBUtil0.iterate("WqZa}KLjC54zeLEn", (ResultSetMapper<DBUtil>) beanResultSetMapper0, (ResultSetIterator<DBUtil>) listSimpleResultSetIterator0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(uncloseableConnectionImpl0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      // Undeclared exception!
      try { 
        dBUtil0.delete("-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      // Undeclared exception!
      try { 
        dBUtil0.selectAll("me}\"4_7", (ResultSetMapper<Delayed>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rsMapper
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      SimpleQueryTranslator simpleQueryTranslator0 = new SimpleQueryTranslator();
      DBUtil dBUtil0 = new DBUtil(dataSource0, simpleQueryTranslator0);
      BasicResultSetMapper<String> basicResultSetMapper0 = new BasicResultSetMapper<String>("io.github.joseerodrigues.utils.dbutil.JDBCAction");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        dBUtil0.selectAll("io.github.joseerodrigues.utils.dbutil.JDBCAction", (ResultSetMapper<String>) basicResultSetMapper0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn(false).when(connection0).getAutoCommit();
      doReturn(false).when(connection0).isClosed();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      ListSimpleResultSetIterator<ResultSet> listSimpleResultSetIterator0 = new ListSimpleResultSetIterator<ResultSet>(false);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        dBUtil0.iterate("<evosuite>", (ResultSetIterator<ResultSet>) listSimpleResultSetIterator0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      QueryTranslator queryTranslator0 = dBUtil0.getQueryTranslator();
      assertNotNull(queryTranslator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      SimpleQueryTranslator simpleQueryTranslator0 = new SimpleQueryTranslator();
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0, simpleQueryTranslator0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        dBUtil0.delete("<evosuite>", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        dBUtil0.hasResults("E^wM", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.UncloseableConnectionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("\"-fZ W").when(connection0).toString();
      doReturn(true).when(connection0).isClosed();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      // Undeclared exception!
      try { 
        dBUtil0.getKeysForInsert("\"-fZ W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("\"-fZ W").when(connection0).toString();
      doReturn(true).when(connection0).getAutoCommit();
      doReturn(false).when(connection0).isClosed();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      // Undeclared exception!
      try { 
        dBUtil0.getKeysForInsert("\"-fZ W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      // Undeclared exception!
      try { 
        dBUtil0.iterate("v&as)>$B?oiv0", (ResultSetIterator<ResultSet>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn(false).when(connection0).isClosed();
      DBUtil dBUtil0 = new DBUtil(connection0);
      // Undeclared exception!
      try { 
        dBUtil0.insert("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // query
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      // Undeclared exception!
      try { 
        dBUtil0.selectOne("", (ResultSetMapper<HashMap<String, Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // query
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn(false).when(connection0).isClosed();
      DBUtil dBUtil0 = new DBUtil(connection0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        dBUtil0.update("", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // query
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(sQLConnectionFactory0).getConnection();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0);
      // Undeclared exception!
      try { 
        dBUtil0.insert("io.github.joseerodrigues.utils.dbutil.ListSimpleResultSetIterator", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLConnectionFactory sQLConnectionFactory0 = mock(SQLConnectionFactory.class, new ViolatedAssumptionAnswer());
      SimpleQueryTranslator simpleQueryTranslator0 = new SimpleQueryTranslator();
      DBUtil dBUtil0 = new DBUtil(sQLConnectionFactory0, simpleQueryTranslator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      DBUtil dBUtil0 = new DBUtil(connection0);
      dBUtil0.rollback();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UncloseableConnectionImpl uncloseableConnectionImpl0 = new UncloseableConnectionImpl((Connection) null);
      DBUtil dBUtil0 = new DBUtil(uncloseableConnectionImpl0);
      ListSimpleResultSetIterator<Delayed> listSimpleResultSetIterator0 = new ListSimpleResultSetIterator<Delayed>(true);
      // Undeclared exception!
      try { 
        dBUtil0.iterate("<evosuite>", (ResultSetMapper<Delayed>) null, (ResultSetIterator<Delayed>) listSimpleResultSetIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rsMapper
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(":tPnM>(dzf`qNZ-M;jD").when(connection0).toString();
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(false).when(connection0).isClosed();
      DBUtil dBUtil0 = new DBUtil(connection0);
      // Undeclared exception!
      try { 
        dBUtil0.hasResults(":tPnM>(dzf`qNZ-M;jD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn(false).when(connection0).getAutoCommit();
      doReturn(false).when(connection0).isClosed();
      DBUtil dBUtil0 = new DBUtil(connection0);
      // Undeclared exception!
      try { 
        dBUtil0.insideTransaction((Function<DBUtil, String>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      DBUtil dBUtil0 = new DBUtil(dataSource0);
      // Undeclared exception!
      try { 
        dBUtil0.insideTransaction((Function<DBUtil, InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("io.github.joseerodrigues.utils.Checks", e);
      }
  }
}
