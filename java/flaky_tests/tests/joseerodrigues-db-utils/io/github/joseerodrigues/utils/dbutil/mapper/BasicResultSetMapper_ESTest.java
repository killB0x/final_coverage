/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:01:39 GMT 2022
 */

package io.github.joseerodrigues.utils.dbutil.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.joseerodrigues.utils.dbutil.mapper.BasicResultSetMapper;
import java.sql.ResultSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicResultSetMapper_ESTest extends BasicResultSetMapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicResultSetMapper<Object> basicResultSetMapper0 = new BasicResultSetMapper<Object>("3$osKS&OyE\";/");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      Object object0 = basicResultSetMapper0.mapObject(resultSet0);
      //  // Unstable assertion: assertEquals("3$osKS&OyE\";/", object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicResultSetMapper<Object> basicResultSetMapper0 = null;
      try {
        basicResultSetMapper0 = new BasicResultSetMapper<Object>((-519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // colIndex < 1 : -519
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.mapper.BasicResultSetMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicResultSetMapper<Object> basicResultSetMapper0 = new BasicResultSetMapper<Object>(4140);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      Object object0 = basicResultSetMapper0.mapObject(resultSet0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicResultSetMapper<Object> basicResultSetMapper0 = null;
      try {
        basicResultSetMapper0 = new BasicResultSetMapper<Object>("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // colName is empty
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.mapper.BasicResultSetMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicResultSetMapper<Integer> basicResultSetMapper0 = null;
      try {
        basicResultSetMapper0 = new BasicResultSetMapper<Integer>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // colName
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.mapper.BasicResultSetMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicResultSetMapper<Integer> basicResultSetMapper0 = new BasicResultSetMapper<Integer>("k");
      // Undeclared exception!
      try { 
        basicResultSetMapper0.mapObject((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.dbutil.mapper.BasicResultSetMapper", e);
      }
  }
}
