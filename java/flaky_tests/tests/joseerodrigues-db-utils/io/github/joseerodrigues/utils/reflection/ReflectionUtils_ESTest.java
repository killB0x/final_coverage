/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:53:40 GMT 2022
 */

package io.github.joseerodrigues.utils.reflection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.joseerodrigues.utils.reflection.ReflectionUtils;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionUtils_ESTest extends ReflectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtils.hasPublicNoArgConstructor((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ReflectionUtils.getAnnotationFromType((Class<?>) class0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.reflection.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<?> class0 = ReflectionUtils.getCallingClass((Class<?>[]) null);
      assertNotNull(class0);
      assertEquals(0, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<ReflectionUtils> class1 = ReflectionUtils.class;
      Annotation annotation0 = ReflectionUtils.getAnnotationFromType((Class<?>) class1, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<ReflectionUtils> class0 = ReflectionUtils.class;
      boolean boolean0 = ReflectionUtils.hasPublicNoArgConstructor(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ReflectionUtils.hasPublicNoArgConstructor(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ReflectionUtils> class0 = ReflectionUtils.class;
      Class<ReflectionUtils>[] classArray0 = (Class<ReflectionUtils>[]) Array.newInstance(Class.class, 3);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      Class<?> class1 = ReflectionUtils.getCallingClass(classArray0);
      assertNotNull(class1);
      assertEquals(0, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ReflectionUtils>[] classArray0 = (Class<ReflectionUtils>[]) Array.newInstance(Class.class, 0);
      Class<?> class0 = ReflectionUtils.getCallingClass(classArray0);
      assertNotNull(class0);
      assertEquals("class jdk.internal.reflect.NativeMethodAccessorImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<ReflectionUtils>[] classArray0 = (Class<ReflectionUtils>[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        ReflectionUtils.getCallingClass(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.joseerodrigues.utils.reflection.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<?> class0 = ReflectionUtils.getCallingClass();
      assertNotNull(class0);
      assertEquals("class jdk.internal.reflect.NativeMethodAccessorImpl", class0.toString());
  }
}
