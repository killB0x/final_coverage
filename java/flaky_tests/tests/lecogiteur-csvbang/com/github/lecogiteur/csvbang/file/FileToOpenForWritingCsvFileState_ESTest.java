/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:30:54 GMT 2022
 */

package com.github.lecogiteur.csvbang.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.lecogiteur.csvbang.configuration.CsvBangConfiguration;
import com.github.lecogiteur.csvbang.file.CsvFileContext;
import com.github.lecogiteur.csvbang.file.CsvFileWrapper;
import com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState;
import java.io.File;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileToOpenForWritingCsvFileState_ESTest extends FileToOpenForWritingCsvFileState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper(",");
      assertNotNull(csvFileWrapper0);
      assertEquals(",", csvFileWrapper0.getFileName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, object0, csvBangConfiguration0);
      assertNotNull(csvFileContext0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals(",", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals(",", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      csvBangConfiguration0.charset = null;
      try { 
        fileToOpenForWritingCsvFileState0.open(csvBangConfiguration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot write header (null) on file /home/user/,
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      assertNotNull(csvFileWrapper0);
      assertEquals("", csvFileWrapper0.getFileName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, object0, object0);
      assertNotNull(csvFileContext0);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      
      CsvFileWrapper csvFileWrapper1 = new CsvFileWrapper("Cannot delete the last end record characters on file %s");
      assertNotNull(csvFileWrapper1);
      assertFalse(csvFileWrapper1.equals((Object)csvFileWrapper0));
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper1.getFileName());
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertFalse(csvFileWrapper0.equals((Object)csvFileWrapper1));
      assertEquals("", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      fileToOpenForWritingCsvFileState0.write(csvFileContext0, "");
      assertNotSame(csvFileWrapper0, csvFileWrapper1);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertFalse(csvFileWrapper0.equals((Object)csvFileWrapper1));
      assertEquals("", csvFileWrapper0.getFileName());
      assertTrue(csvFileContext0.isOpen());
      assertTrue(fileToOpenForWritingCsvFileState0.isOpen());
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState1 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper1, csvFileContext0);
      assertNotNull(fileToOpenForWritingCsvFileState1);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertFalse(csvFileWrapper0.equals((Object)csvFileWrapper1));
      assertFalse(csvFileWrapper1.equals((Object)csvFileWrapper0));
      assertFalse(fileToOpenForWritingCsvFileState1.equals((Object)fileToOpenForWritingCsvFileState0));
      assertEquals("", csvFileWrapper0.getFileName());
      assertTrue(csvFileContext0.isOpen());
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper1.getFileName());
      assertFalse(fileToOpenForWritingCsvFileState1.isOpen());
      
      try { 
        fileToOpenForWritingCsvFileState1.open("l\"N( ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create file: /home/user/Cannot delete the last end record characters on file %s
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("yyyyMMdd");
      assertNotNull(csvFileWrapper0);
      assertEquals("yyyyMMdd", csvFileWrapper0.getFileName());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("yyyyMMdd");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, (CsvFileContext) null);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals("yyyyMMdd", csvFileWrapper0.getFileName());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      try { 
        fileToOpenForWritingCsvFileState0.open(csvFileWrapper0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create file: /home/user/yyyyMMdd
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("Cannot delete the last end record characters on file %s");
      assertNotNull(csvFileWrapper0);
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper0.getFileName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, object0, object0);
      assertNotNull(csvFileContext0);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      fileToOpenForWritingCsvFileState0.write(object0, "");
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper0.getFileName());
      assertTrue(csvFileContext0.isOpen());
      assertTrue(fileToOpenForWritingCsvFileState0.isOpen());
      
      boolean boolean0 = fileToOpenForWritingCsvFileState0.isOpen();
      assertTrue(boolean0);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper0.getFileName());
      assertTrue(csvFileContext0.isOpen());
      assertTrue(fileToOpenForWritingCsvFileState0.isOpen());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState");
      assertNotNull(csvFileWrapper0);
      assertEquals("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", csvFileWrapper0.getFileName());
      
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, csvFileWrapper0, (Object) null);
      assertNotNull(csvFileContext0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      fileToOpenForWritingCsvFileState0.open(csvBangConfiguration0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", csvFileWrapper0.getFileName());
      assertTrue(csvFileContext0.isOpen());
      assertTrue(fileToOpenForWritingCsvFileState0.isOpen());
      
      fileToOpenForWritingCsvFileState0.close((Object) null);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      assertTrue(fileToOpenForWritingCsvFileState0.isOpen());
      
      try { 
        fileToOpenForWritingCsvFileState0.write(csvBangConfiguration0, "#6*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The file is closed. We can't write in /home/user/com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState the content: #6* .
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToCloseForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertTrue(csvBangConfiguration0.isFileByFile);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("Cannot delete the last end record characters on file %s");
      assertNotNull(csvFileWrapper0);
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper0.getFileName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, object0, object0);
      assertNotNull(csvFileContext0);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals("Cannot delete the last end record characters on file %s", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      // Undeclared exception!
      try { 
        fileToOpenForWritingCsvFileState0.write(object0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileReadyForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("yyyyMMdd");
      assertNotNull(csvFileWrapper0);
      assertEquals("yyyyMMdd", csvFileWrapper0.getFileName());
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, (CsvFileContext) null);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals("yyyyMMdd", csvFileWrapper0.getFileName());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      // Undeclared exception!
      try { 
        fileToOpenForWritingCsvFileState0.write((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      assertNotNull(csvFileWrapper0);
      assertEquals("", csvFileWrapper0.getFileName());
      
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, csvBangConfiguration0, csvFileWrapper0);
      assertNotNull(csvFileContext0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals("", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals("", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      fileToOpenForWritingCsvFileState0.open(object0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals("", csvFileWrapper0.getFileName());
      assertTrue(csvFileContext0.isOpen());
      assertTrue(fileToOpenForWritingCsvFileState0.isOpen());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("", true);
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.close();
      csvFileWrapper0.setOutputStream(mockFileOutputStream0);
      assertEquals("", csvFileWrapper0.getFileName());
      
      try { 
        fileToOpenForWritingCsvFileState0.close(object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: An error has occured when closed file
         //
         verifyException("com.github.lecogiteur.csvbang.file.CsvFileContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      assertNotNull(csvFileWrapper0);
      assertEquals("", csvFileWrapper0.getFileName());
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, (CsvFileContext) null);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals("", csvFileWrapper0.getFileName());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      fileToOpenForWritingCsvFileState0.close((Object) null);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals("", csvFileWrapper0.getFileName());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper(",");
      assertNotNull(csvFileWrapper0);
      assertEquals(",", csvFileWrapper0.getFileName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, object0, csvBangConfiguration0);
      assertNotNull(csvFileContext0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals(",", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      
      csvBangConfiguration0.header = "\n";
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals(",", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      fileToOpenForWritingCsvFileState0.open(object0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals(",", csvFileWrapper0.getFileName());
      assertTrue(csvFileContext0.isOpen());
      assertTrue(fileToOpenForWritingCsvFileState0.isOpen());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("yyyyMMdd");
      assertNotNull(csvFileWrapper0);
      assertEquals("yyyyMMdd", csvFileWrapper0.getFileName());
      
      csvBangConfiguration0.header = "";
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, (CsvFileContext) null);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals("yyyyMMdd", csvFileWrapper0.getFileName());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      // Undeclared exception!
      try { 
        fileToOpenForWritingCsvFileState0.open(csvFileWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("yyyyMMdd");
      assertNotNull(csvFileWrapper0);
      assertEquals("yyyyMMdd", csvFileWrapper0.getFileName());
      
      csvBangConfiguration0.header = "yyyyMMdd";
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, (CsvFileContext) null);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertEquals("yyyyMMdd", csvFileWrapper0.getFileName());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      // Undeclared exception!
      try { 
        fileToOpenForWritingCsvFileState0.open(csvFileWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("\n");
      assertNotNull(csvFileWrapper0);
      assertEquals("\n", csvFileWrapper0.getFileName());
      
      File file0 = csvFileWrapper0.getFile();
      assertNotNull(file0);
      assertEquals("\n", csvFileWrapper0.getFileName());
      assertFalse(file0.exists());
      assertEquals("\n", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("\n", file0.toString());
      assertFalse(file0.canWrite());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      assertNotNull(mockFileOutputStream0);
      
      csvBangConfiguration0.isAppendToFile = true;
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, (CsvFileContext) null);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertTrue(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals("\n", csvFileWrapper0.getFileName());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      // Undeclared exception!
      try { 
        fileToOpenForWritingCsvFileState0.open((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      assertNotNull(csvBangConfiguration0);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertTrue(csvBangConfiguration0.isFileByFile);
      
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      assertNotNull(csvFileWrapper0);
      assertEquals("", csvFileWrapper0.getFileName());
      
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, csvBangConfiguration0, csvFileWrapper0);
      assertNotNull(csvFileContext0);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals("", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("out-%n.csv", false);
      assertNotNull(mockFileOutputStream0);
      
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      assertNotNull(fileToOpenForWritingCsvFileState0);
      assertEquals((-1L), csvBangConfiguration0.maxFileSize);
      assertEquals('\\', csvBangConfiguration0.escapeQuoteCharacter);
      assertEquals((-1L), csvBangConfiguration0.maxFile);
      assertFalse(csvBangConfiguration0.isAppendToFile);
      assertEquals((-1L), csvBangConfiguration0.maxRecordByFile);
      assertEquals((-1), csvBangConfiguration0.blockSize);
      assertFalse(csvBangConfiguration0.isAsynchronousWrite);
      assertFalse(csvBangConfiguration0.isDisplayHeader);
      assertEquals('#', csvBangConfiguration0.commentCharacter);
      assertFalse(csvBangConfiguration0.noEndRecordOnLastRecord);
      assertTrue(csvBangConfiguration0.isFileByFile);
      assertEquals("", csvFileWrapper0.getFileName());
      assertFalse(csvFileContext0.isOpen());
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      try { 
        fileToOpenForWritingCsvFileState0.open(csvBangConfiguration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/user is not a file. 
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("Cannot delete the last end record characters on file %s");
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, csvBangConfiguration0, "Cannot delete the last end record characters on file %s");
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      Object object0 = new Object();
      fileToOpenForWritingCsvFileState0.write(csvFileContext0, ",");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Cannot delete the last end record characters on file %s");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState1 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      try { 
        fileToOpenForWritingCsvFileState1.open(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not write in file: /home/user/Cannot delete the last end record characters on file %s 
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, csvBangConfiguration0, csvFileWrapper0);
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      assertFalse(fileToOpenForWritingCsvFileState0.isOpen());
      
      Object object0 = new Object();
      fileToOpenForWritingCsvFileState0.open(object0);
      fileToOpenForWritingCsvFileState0.open(object0);
      assertTrue(fileToOpenForWritingCsvFileState0.isOpen());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("Cannot delete the last end record characters on file %s");
      Object object0 = new Object();
      CsvFileContext csvFileContext0 = new CsvFileContext(csvBangConfiguration0, csvFileWrapper0, object0, object0);
      FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState0 = new FileToOpenForWritingCsvFileState(csvBangConfiguration0, csvFileWrapper0, csvFileContext0);
      boolean boolean0 = fileToOpenForWritingCsvFileState0.isOpen();
      assertFalse(boolean0);
  }
}
