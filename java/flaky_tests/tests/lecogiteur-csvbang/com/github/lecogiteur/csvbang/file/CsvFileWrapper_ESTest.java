/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:56:19 GMT 2022
 */

package com.github.lecogiteur.csvbang.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.lecogiteur.csvbang.file.CsvFileWrapper;
import java.io.File;
import java.io.FileOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CsvFileWrapper_ESTest extends CsvFileWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("0p;D,_*N< ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0p;D,_*N< ");
      csvFileWrapper0.setOutputStream(mockFileOutputStream0);
      FileOutputStream fileOutputStream0 = csvFileWrapper0.getOutPutStream();
      assertSame(fileOutputStream0, mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      String string0 = csvFileWrapper0.getFileName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("0p;D,_*N< ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0p;D,_*N< ");
      mockFileOutputStream0.write((-1));
      File file0 = csvFileWrapper0.getFile();
      assertFalse(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("/}%>>a8^4(>jwR");
      File file0 = csvFileWrapper0.getFile();
      assertFalse(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      File file0 = csvFileWrapper0.getFile();
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = null;
      try {
        csvFileWrapper0 = new CsvFileWrapper((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      FileOutputStream fileOutputStream0 = csvFileWrapper0.getOutPutStream();
      assertNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper(".M");
      String string0 = csvFileWrapper0.getFileName();
      assertEquals(".M", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper(".M");
      File file0 = csvFileWrapper0.getFile();
      assertFalse(file0.canWrite());
  }
}
