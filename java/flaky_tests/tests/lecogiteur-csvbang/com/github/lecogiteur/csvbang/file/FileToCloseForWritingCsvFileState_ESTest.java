/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:39:45 GMT 2022
 */

package com.github.lecogiteur.csvbang.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.lecogiteur.csvbang.configuration.CsvBangConfiguration;
import com.github.lecogiteur.csvbang.file.CsvFileWrapper;
import com.github.lecogiteur.csvbang.file.FileToCloseForWritingCsvFileState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileToCloseForWritingCsvFileState_ESTest extends FileToCloseForWritingCsvFileState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("|cJ.|D9I`bT^o3z9");
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      csvBangConfiguration0.noEndRecordOnLastRecord = true;
      csvBangConfiguration0.endRecord = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",");
      csvFileWrapper0.setOutputStream(mockFileOutputStream0);
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      assertTrue(fileToCloseForWritingCsvFileState0.isOpen());
      
      fileToCloseForWritingCsvFileState0.close(csvBangConfiguration0);
      assertFalse(fileToCloseForWritingCsvFileState0.isOpen());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState((CsvFileWrapper) null, csvBangConfiguration0);
      // Undeclared exception!
      try { 
        fileToCloseForWritingCsvFileState0.write(csvBangConfiguration0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToCloseForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState((CsvFileWrapper) null, csvBangConfiguration0);
      // Undeclared exception!
      try { 
        fileToCloseForWritingCsvFileState0.open((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToCloseForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState((CsvFileWrapper) null, (CsvBangConfiguration) null);
      // Undeclared exception!
      try { 
        fileToCloseForWritingCsvFileState0.close((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToCloseForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("(");
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      boolean boolean0 = fileToCloseForWritingCsvFileState0.isOpen();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("GAefS}Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("GAefS}Q", false);
      csvFileWrapper0.setOutputStream(mockFileOutputStream0);
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      assertTrue(fileToCloseForWritingCsvFileState0.isOpen());
      
      fileToCloseForWritingCsvFileState0.close(mockFileOutputStream0);
      boolean boolean0 = fileToCloseForWritingCsvFileState0.isOpen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      csvBangConfiguration0.footer = "`Vz-A7^uHSfpPGu";
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      try { 
        fileToCloseForWritingCsvFileState0.close(fileToCloseForWritingCsvFileState0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // An error has occured when closed file
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToCloseForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("R)[D{");
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      csvBangConfiguration0.noEndRecordOnLastRecord = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("R)[D{");
      byte[] byteArray0 = new byte[8];
      mockFileOutputStream0.write(byteArray0);
      csvFileWrapper0.setOutputStream(mockFileOutputStream0);
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      assertTrue(fileToCloseForWritingCsvFileState0.isOpen());
      
      fileToCloseForWritingCsvFileState0.close(csvBangConfiguration0);
      assertFalse(fileToCloseForWritingCsvFileState0.isOpen());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("|cJ.|D9I`bT^o3z9");
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      csvBangConfiguration0.noEndRecordOnLastRecord = true;
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      csvFileWrapper0.setOutputStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("|cJ.|D9I`bT^o3z9");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "|cJ.|D9I`bT^o3z9");
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      assertTrue(fileToCloseForWritingCsvFileState0.isOpen());
      
      Object object0 = new Object();
      fileToCloseForWritingCsvFileState0.close(object0);
      assertFalse(fileToCloseForWritingCsvFileState0.isOpen());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("");
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      csvBangConfiguration0.noEndRecordOnLastRecord = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("yyyyMMdd", false);
      csvFileWrapper0.setOutputStream(mockFileOutputStream0);
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      assertTrue(fileToCloseForWritingCsvFileState0.isOpen());
      
      fileToCloseForWritingCsvFileState0.close(fileToCloseForWritingCsvFileState0);
      assertFalse(fileToCloseForWritingCsvFileState0.isOpen());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("|cJ.|D9I`bT^o3z9");
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      csvBangConfiguration0.noEndRecordOnLastRecord = true;
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      Object object0 = new Object();
      try { 
        fileToCloseForWritingCsvFileState0.close(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // An error has occured when closed file
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToCloseForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_](U*(PY'f ", true);
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("sfQWzFcLI");
      csvFileWrapper0.setOutputStream(mockFileOutputStream0);
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      assertTrue(fileToCloseForWritingCsvFileState0.isOpen());
      
      fileToCloseForWritingCsvFileState0.close((Object) null);
      fileToCloseForWritingCsvFileState0.close(csvFileWrapper0);
      assertFalse(fileToCloseForWritingCsvFileState0.isOpen());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("(");
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      try { 
        fileToCloseForWritingCsvFileState0.write("(", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The file is closed. We can't write in /home/user/( the content: null .
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToCloseForWritingCsvFileState", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CsvFileWrapper csvFileWrapper0 = new CsvFileWrapper("|cJ.|D9I`bT^o3z9");
      CsvBangConfiguration csvBangConfiguration0 = new CsvBangConfiguration();
      FileToCloseForWritingCsvFileState fileToCloseForWritingCsvFileState0 = new FileToCloseForWritingCsvFileState(csvFileWrapper0, csvBangConfiguration0);
      Object object0 = new Object();
      try { 
        fileToCloseForWritingCsvFileState0.open(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The file /home/user/|cJ.|D9I`bT^o3z9 is closed. We can't open it.
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileToCloseForWritingCsvFileState", e);
      }
  }
}
