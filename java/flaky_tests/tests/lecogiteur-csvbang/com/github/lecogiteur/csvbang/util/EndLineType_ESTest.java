/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:55:06 GMT 2022
 */

package com.github.lecogiteur.csvbang.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.lecogiteur.csvbang.util.EndLineType;
import java.nio.charset.Charset;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EndLineType_ESTest extends EndLineType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EndLineType[] endLineTypeArray0 = EndLineType.values();
      assertEquals(9, endLineTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EndLineType endLineType0 = EndLineType.valueOf("LINE_SEPARATOR");
      assertEquals("\u2028", endLineType0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EndLineType endLineType0 = EndLineType.VERTICAL_TAB;
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = endLineType0.toBytes(charset0);
      assertArrayEquals(new byte[] {(byte)11}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EndLineType endLineType0 = EndLineType.LINE_FEED;
      String string0 = endLineType0.toString();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EndLineType endLineType0 = EndLineType.NEXT_LINE;
      // Undeclared exception!
      try { 
        endLineType0.toBytes((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EndLineType endLineType0 = EndLineType.LINE_FEED;
      Pattern pattern0 = endLineType0.getPattern();
      assertEquals("\\Q\n\\E", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EndLineType endLineType0 = EndLineType.FORM_FEED;
      char[] charArray0 = endLineType0.getCharacters();
      assertArrayEquals(new char[] {'\f'}, charArray0);
  }
}
