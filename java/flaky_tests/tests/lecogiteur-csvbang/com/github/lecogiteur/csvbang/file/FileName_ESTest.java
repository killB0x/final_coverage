/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:23:46 GMT 2022
 */

package com.github.lecogiteur.csvbang.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.lecogiteur.csvbang.file.FileName;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileName_ESTest extends FileName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileName fileName0 = new FileName("com.github.lecogiteur.csvbang.util.CsvBangDateFormat", "com.github.lecogiteur.csvbang.util.CsvBangDateFormat");
      FileName fileName1 = fileName0.clone();
      assertTrue(fileName1.equals((Object)fileName0));
      
      fileName1.ackNewFileName();
      boolean boolean0 = fileName1.equals(fileName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileName fileName0 = new FileName("!O6u%db]48h", "v@HKw\u00058a/5D.`<}mn");
      fileName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileName fileName0 = new FileName("%", ":pS?iR(");
      String string0 = fileName0.getNewFileName(false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileName fileName0 = new FileName("%", "%");
      // Undeclared exception!
      try { 
        fileName0.setBaseDirectory("%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileName fileName0 = new FileName("%", "%");
      File file0 = MockFile.createTempFile("._r", "%");
      // Undeclared exception!
      try { 
        fileName0.setBaseDirectory(file0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileName fileName0 = new FileName("9L_%d8/4", "9L_%d8/4");
      fileName0.setBaseDirectory("qz!S{c@bc08:cmb+");
      FileName fileName1 = fileName0.clone();
      fileName0.setBaseDirectory("9L_%d8/4");
      // Undeclared exception!
      try { 
        fileName1.getNewFileName(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileName fileName0 = new FileName("!O6u%db]48h", "!O6u%db]48h");
      // Undeclared exception!
      try { 
        fileName0.getNewFileName(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'O'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileName fileName0 = new FileName("&&2[Ra6&w@)[v", "&&2[Ra6&w@)[v");
      FileName fileName1 = fileName0.clone();
      MockFile mockFile0 = new MockFile("&&2[Ra6&w@)[v", "");
      fileName0.setBaseDirectory((File) mockFile0);
      fileName1.setBaseDirectory("com.github.lecogiteur.csvbang.file.FileName$TYPE_FORMAT");
      assertNotSame(fileName1, fileName0);
      assertTrue(fileName1.equals((Object)fileName0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileName fileName0 = new FileName("{", "{");
      FileName fileName1 = fileName0.clone();
      assertTrue(fileName1.equals((Object)fileName0));
      
      fileName0.ackNewFileName();
      boolean boolean0 = fileName1.equals(fileName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileName fileName0 = new FileName("com.github.lecogteur>svbang.util.CsvBangDateFormat", "{<#Fe");
      FileName fileName1 = new FileName("{<#Fe", "com.github.lecogteur>svbang.util.CsvBangDateFormat");
      boolean boolean0 = fileName1.equals(fileName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileName fileName0 = new FileName(":tm/#0_FWsQA%n0yxTHg?Pl/", ":tm/#0_FWsQA%n0yxTHg?Pl/");
      FileName fileName1 = new FileName(":tm/#0_FWsQA%n0yxTHg?Pl/", "");
      boolean boolean0 = fileName1.equals(fileName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileName fileName0 = new FileName("DATE", (String) null);
      FileName fileName1 = new FileName("No file name is defined.", (String) null);
      boolean boolean0 = fileName1.equals(fileName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileName fileName0 = new FileName("?63_-;FX.E`FvA%n", ",/$");
      boolean boolean0 = fileName0.equals("?63_-;FX.E`FvA%n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileName fileName0 = new FileName("4B/tKA]kFlWS(S\"g", "");
      boolean boolean0 = fileName0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileName fileName0 = new FileName("JM@5W%j|x<C5MgG~", "JM@5W%j|x<C5MgG~");
      boolean boolean0 = fileName0.equals(fileName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileName fileName0 = new FileName("4B/tKA]kFlWS(S\"g", "");
      fileName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileName fileName0 = new FileName("?63_-;FX.E`FvA%n", ",/$");
      String string0 = fileName0.getNewFileName(false);
      assertEquals("?63_-;FX.E`FvA1", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileName fileName0 = new FileName("ux+og-uOF&", "jthmjxa}zv<");
      fileName0.setBaseDirectory("J3 /");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileName fileName0 = new FileName("4B/tKA]kFlWS(S\"g", "");
      fileName0.setBaseDirectory((String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileName fileName0 = new FileName("%", ":pS?iR(");
      fileName0.setBaseDirectory((File) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileName fileName0 = null;
      try {
        fileName0 = new FileName("!O6u%db]48h", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You want to add the date to the file name. But no date pattern is defined. Define a date pattern.
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileName", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileName fileName0 = new FileName("?63_-;FX.E`FvA%n", ",/$");
      String string0 = fileName0.getNewFileName(true);
      assertEquals("?63_-;FX.E`FvA1", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileName fileName0 = null;
      try {
        fileName0 = new FileName("", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // No file name is defined.
         //
         verifyException("com.github.lecogiteur.csvbang.file.FileName", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileName fileName0 = new FileName("{", "{");
      FileName fileName1 = fileName0.clone();
      boolean boolean0 = fileName1.equals(fileName0);
      assertNotSame(fileName1, fileName0);
      assertTrue(boolean0);
  }
}
