/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:20:24 GMT 2022
 */

package com.github.lecogiteur.csvbang.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.lecogiteur.csvbang.annotation.CsvComment;
import com.github.lecogiteur.csvbang.annotation.CsvField;
import com.github.lecogiteur.csvbang.annotation.CsvFile;
import com.github.lecogiteur.csvbang.annotation.CsvFooter;
import com.github.lecogiteur.csvbang.annotation.CsvFormat;
import com.github.lecogiteur.csvbang.annotation.CsvHeader;
import com.github.lecogiteur.csvbang.annotation.CsvType;
import com.github.lecogiteur.csvbang.util.ReflectionUti;
import java.lang.annotation.Annotation;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.List;
import java.util.jar.JarEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionUti_ESTest extends ReflectionUti_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Collection<Class<?>> collection0 = ReflectionUti.scanPackageClass("$!F(Wg2?yd<F+mM}g.*");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Collection<Class<?>> collection0 = ReflectionUti.scanPackageClass("./");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method method0 = ReflectionUti.getGetterMethod(class0, "class");
      Object object0 = new Object();
      Class class1 = (Class)ReflectionUti.getValue(method0, object0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<JarEntry> class0 = JarEntry.class;
      Method method0 = ReflectionUti.getGetterMethod(class0, "crc");
      assertNotNull(method0);
      assertEquals("getCrc", method0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<JarEntry> class0 = JarEntry.class;
      Method method0 = ReflectionUti.getGetterMethod(class0, "lastModifiedTime");
      try { 
        ReflectionUti.getValue(method0, class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Un probl\uFFFD\uFFFDme est survenue dans la r\uFFFD\uFFFDcup\uFFFD\uFFFDration d'un champs ou une m\uFFFD\uFFFDthode dans [class java.lang.Class]: getLastModifiedTime
         //
         verifyException("com.github.lecogiteur.csvbang.util.ReflectionUti", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUti.getMembers((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUti.getGetterMethod((Class<?>) null, "LINE_FEED_CcRRIAGE_RETUR(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      List<AnnotatedElement> list0 = ReflectionUti.getMembers(class0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<JarEntry> class0 = JarEntry.class;
      List<AnnotatedElement> list0 = ReflectionUti.getMembers(class0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      CsvComment csvComment0 = ReflectionUti.getCsvCommentAnnotation(annotationArray0);
      assertNull(csvComment0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[8];
      CsvComment csvComment0 = ReflectionUti.getCsvCommentAnnotation(annotationArray0);
      assertNull(csvComment0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CsvComment csvComment0 = ReflectionUti.getCsvCommentAnnotation((Annotation[]) null);
      assertNull(csvComment0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      CsvFile csvFile0 = ReflectionUti.getCsvFileAnnotation(annotationArray0);
      assertNull(csvFile0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[8];
      CsvFile csvFile0 = ReflectionUti.getCsvFileAnnotation(annotationArray0);
      assertNull(csvFile0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CsvFile csvFile0 = ReflectionUti.getCsvFileAnnotation((Annotation[]) null);
      assertNull(csvFile0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      CsvFormat csvFormat0 = ReflectionUti.getCsvFormatAnnotation(annotationArray0);
      assertNull(csvFormat0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[2];
      CsvFormat csvFormat0 = ReflectionUti.getCsvFormatAnnotation(annotationArray0);
      assertNull(csvFormat0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CsvFormat csvFormat0 = ReflectionUti.getCsvFormatAnnotation((Annotation[]) null);
      assertNull(csvFormat0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      CsvField csvField0 = ReflectionUti.getCsvFieldAnnotation(annotationArray0);
      assertNull(csvField0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[8];
      CsvField csvField0 = ReflectionUti.getCsvFieldAnnotation(annotationArray0);
      assertNull(csvField0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CsvField csvField0 = ReflectionUti.getCsvFieldAnnotation((Annotation[]) null);
      assertNull(csvField0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      CsvFooter csvFooter0 = ReflectionUti.getCsvFooterAnnotation(annotationArray0);
      assertNull(csvFooter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[8];
      CsvFooter csvFooter0 = ReflectionUti.getCsvFooterAnnotation(annotationArray0);
      assertNull(csvFooter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CsvFooter csvFooter0 = ReflectionUti.getCsvFooterAnnotation((Annotation[]) null);
      assertNull(csvFooter0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      CsvHeader csvHeader0 = ReflectionUti.getCsvHeaderAnnotation(annotationArray0);
      assertNull(csvHeader0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[8];
      CsvHeader csvHeader0 = ReflectionUti.getCsvHeaderAnnotation(annotationArray0);
      assertNull(csvHeader0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CsvHeader csvHeader0 = ReflectionUti.getCsvHeaderAnnotation((Annotation[]) null);
      assertNull(csvHeader0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      CsvType csvType0 = ReflectionUti.getCsvTypeAnnotation(annotationArray0);
      assertNull(csvType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[8];
      CsvType csvType0 = ReflectionUti.getCsvTypeAnnotation(annotationArray0);
      assertNull(csvType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CsvType csvType0 = ReflectionUti.getCsvTypeAnnotation((Annotation[]) null);
      assertNull(csvType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<JarEntry> class0 = JarEntry.class;
      Method method0 = ReflectionUti.getGetterMethod(class0, "SE!DBjdSW$H9,V}Qr");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<JarEntry> class0 = JarEntry.class;
      Method method0 = ReflectionUti.getGetterMethod(class0, "name");
      // Undeclared exception!
      try { 
        ReflectionUti.getValue(method0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lecogiteur.csvbang.util.ReflectionUti", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = ReflectionUti.getValue((AnnotatedElement) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Collection<Class<?>> collection0 = ReflectionUti.scanPackageClass("");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("volume/projects/lecogiteur-csvbang/target/classes/../../target/classes");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Collection<Class<?>> collection0 = ReflectionUti.scanPackageClass(".*");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReflectionUti reflectionUti0 = new ReflectionUti();
  }
}
