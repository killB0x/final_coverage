/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 13:33:31 GMT 2022
 */

package com.github.t3t5u.common.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.t3t5u.common.http.ByteArrayConfiguration;
import com.github.t3t5u.common.http.FileConfiguration;
import com.github.t3t5u.common.http.HttpUtils;
import com.github.t3t5u.common.http.InputStreamConfiguration;
import com.github.t3t5u.common.http.Result;
import com.github.t3t5u.common.http.StringConfiguration;
import java.io.File;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.RunnableFuture;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpUtils_ESTest extends HttpUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<String>> runnableFuture0 = HttpUtils.deleteOrNull((String) null, "ylb:Z3", hashMap0, (StringConfiguration) null);
      assertNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<byte[]>> runnableFuture0 = HttpUtils.deleteAsByteArrayOrNull("[8yd;GsFb^f(5B#~'h", "lx(y5", hashMap0, (ByteArrayConfiguration) null);
      assertNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<InputStream>> runnableFuture0 = HttpUtils.deleteAsInputStreamOrNull("com.github.t3t5u.common.http.HttpUtils$4", "~MEtclWIH<", hashMap0, inputStreamConfiguration1);
      assertNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<File>> runnableFuture0 = HttpUtils.deleteAsFileOrNull("", (String) null, hashMap0, (FileConfiguration) null);
      assertNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<String>> runnableFuture0 = HttpUtils.putOrNull("&zL%L", ",p>j|^jUCLBS<0", hashMap0, (StringConfiguration) null);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayConfiguration byteArrayConfiguration0 = mock(ByteArrayConfiguration.class, new ViolatedAssumptionAnswer());
      ByteArrayConfiguration byteArrayConfiguration1 = new ByteArrayConfiguration(byteArrayConfiguration0);
      RunnableFuture<Result<byte[]>> runnableFuture0 = HttpUtils.putAsByteArrayOrNull("write: ", "R3 8f5q.;", (Map<String, List<String>>) null, byteArrayConfiguration1);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      RunnableFuture<Result<InputStream>> runnableFuture0 = HttpUtils.putAsInputStreamOrNull("[8yd;GsFb^f(5B#~'h", "\tMAZX", hashMap0, inputStreamConfiguration1);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      FileConfiguration fileConfiguration0 = new FileConfiguration((FileConfiguration) null);
      HttpUtils.putAsFileOrNull("d&", (String) null, hashMap0, fileConfiguration0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ByteArrayConfiguration byteArrayConfiguration0 = new ByteArrayConfiguration((ByteArrayConfiguration) null);
      RunnableFuture<Result<byte[]>> runnableFuture0 = HttpUtils.postAsByteArrayOrNull("putAsByteArrayOrNull", "com.github.t3t5u.common.http.ByteArrayConfiguration", hashMap0, byteArrayConfiguration0);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      RunnableFuture<Result<InputStream>> runnableFuture0 = HttpUtils.postAsInputStreamOrNull("com.github.t3t5u.common.http.HttpUtils$4", "8BLxHcesY@[", (Map<String, List<String>>) null, inputStreamConfiguration1);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      FileConfiguration fileConfiguration0 = new FileConfiguration((FileConfiguration) null);
      HttpUtils.postAsFileOrNull("JKX$Kq", "\tMAZX", hashMap0, fileConfiguration0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RunnableFuture<Result<String>> runnableFuture0 = HttpUtils.getOrNull("", "", (Map<String, List<String>>) null, (StringConfiguration) null);
      assertNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayConfiguration byteArrayConfiguration0 = mock(ByteArrayConfiguration.class, new ViolatedAssumptionAnswer());
      ByteArrayConfiguration byteArrayConfiguration1 = new ByteArrayConfiguration(byteArrayConfiguration0);
      RunnableFuture<Result<byte[]>> runnableFuture0 = HttpUtils.getAsByteArrayOrNull("", "", (Map<String, List<String>>) null, byteArrayConfiguration1);
      assertNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      RunnableFuture<Result<InputStream>> runnableFuture0 = HttpUtils.getAsInputStreamOrNull("DELETE", "", (Map<String, List<String>>) null, inputStreamConfiguration1);
      assertNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      FileConfiguration fileConfiguration0 = new FileConfiguration((FileConfiguration) null);
      HttpUtils.getAsFileOrNull("deleteOrNull", "[}Wqawf7+X ", hashMap0, fileConfiguration0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.toQueryString((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.fromQueryString("CXk_Jgy<Uqx;<pxQL:");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ByteArrayConfiguration byteArrayConfiguration0 = mock(ByteArrayConfiguration.class, new ViolatedAssumptionAnswer());
      ByteArrayConfiguration byteArrayConfiguration1 = new ByteArrayConfiguration(byteArrayConfiguration0);
      RunnableFuture<Result<byte[]>> runnableFuture0 = HttpUtils.putAsByteArray("", "", hashMap0, byteArrayConfiguration1);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<File>> runnableFuture0 = HttpUtils.putAsFile("IpZ:}Lzfy", ":*i0^v^J^#R7", hashMap0, (FileConfiguration) null);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<String>> runnableFuture0 = HttpUtils.post("", "", hashMap0, (StringConfiguration) null);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      // Undeclared exception!
      try { 
        HttpUtils.get("getAsFileOrNull", "getAsFileOrNull", hashMap0, (StringConfiguration) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.delete("2KL^VF[ Nu}", "2KL^VF[ Nu}", (Map<String, List<String>>) null, (StringConfiguration) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<File>> runnableFuture0 = HttpUtils.postAsFile("@W8N:flu@", "asByteArray", hashMap0, (FileConfiguration) null);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      // Undeclared exception!
      try { 
        HttpUtils.deleteAsInputStream((String) null, (String) null, hashMap0, (InputStreamConfiguration) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<String>> runnableFuture0 = HttpUtils.put("com.github.t3t5u.common.http.HttpUtils$4", "com.github.t3t5u.common.http.HttpUtils$4", hashMap0, (StringConfiguration) null);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      RunnableFuture<Result<InputStream>> runnableFuture0 = HttpUtils.putAsInputStream("P%L)Xg;:pYjP@C", "P%L)Xg;:pYjP@C", hashMap0, inputStreamConfiguration1);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ByteArrayConfiguration byteArrayConfiguration0 = mock(ByteArrayConfiguration.class, new ViolatedAssumptionAnswer());
      ByteArrayConfiguration byteArrayConfiguration1 = new ByteArrayConfiguration(byteArrayConfiguration0);
      RunnableFuture<Result<byte[]>> runnableFuture0 = HttpUtils.postAsByteArray("", "@W8N:flu@", hashMap0, byteArrayConfiguration1);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.deleteAsFile("com.github.t3t5u.common.http.ttpUtils$1", "com.github.t3t5u.common.http.ttpUtils$1", (Map<String, List<String>>) null, (FileConfiguration) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      // Undeclared exception!
      try { 
        HttpUtils.getAsFile("com.github.t3t5u.common.http.AbstractResult", "com.github.t3t5u.common.http.AbstractResult", hashMap0, (FileConfiguration) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getAsInputStream("", "", (Map<String, List<String>>) null, (InputStreamConfiguration) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      RunnableFuture<Result<InputStream>> runnableFuture0 = HttpUtils.postAsInputStream("", "", hashMap0, inputStreamConfiguration1);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put((Object) null, hashMap0);
      // Undeclared exception!
      try { 
        HttpUtils.toQueryString(hashMap1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/github/t3t5u/common/util/ExtraArrayUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = HttpUtils.toQueryString(hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getAsByteArray("nydtah\u0004AVrti", "nydtah\u0004AVrti", (Map<String, List<String>>) null, (ByteArrayConfiguration) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<String>> runnableFuture0 = HttpUtils.postOrNull("deleteAsByteArrayOrNull", "property: ", hashMap0, (StringConfiguration) null);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.deleteAsByteArray("", "", (Map<String, List<String>>) null, (ByteArrayConfiguration) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.github.t3t5u.common.http.HttpUtils", e);
      }
  }
}
