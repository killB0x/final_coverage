/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 13:44:05 GMT 2022
 */

package com.github.t3t5u.common.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.t3t5u.common.http.AbstractResult;
import com.github.t3t5u.common.http.InputStreamResult;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractResult_ESTest extends AbstractResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpURLConnection0).getResponseMessage();
      String string0 = AbstractResult.getResponseMessage(httpURLConnection0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpURLConnection0).getResponseMessage();
      String string0 = AbstractResult.getResponseMessage(httpURLConnection0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(httpURLConnection0).getResponseCode();
      int int0 = AbstractResult.getResponseCode(httpURLConnection0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(httpURLConnection0).getResponseCode();
      int int0 = AbstractResult.getResponseCode(httpURLConnection0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn(pipedInputStream0).when(httpURLConnection0).getInputStream();
      InputStream inputStream0 = AbstractResult.getInputStream(httpURLConnection0);
      assertSame(pipedInputStream0, inputStream0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractResult.getResponseMessage((HttpURLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.t3t5u.common.http.AbstractResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractResult.getResponseCode((HttpURLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.t3t5u.common.http.AbstractResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractResult.getInputStream((HttpURLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.t3t5u.common.http.AbstractResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpURLConnection0).getResponseCode();
      int int0 = AbstractResult.getResponseCode(httpURLConnection0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(httpURLConnection0).getInputStream();
      InputStream inputStream0 = AbstractResult.getInputStream(httpURLConnection0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn("88p").when(httpURLConnection0).getResponseMessage();
      String string0 = AbstractResult.getResponseMessage(httpURLConnection0);
      assertEquals("88p", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SocketTimeoutException socketTimeoutException0 = new SocketTimeoutException("f`Cri~Pyt8{A/vh%J2");
      InputStreamResult inputStreamResult0 = new InputStreamResult(socketTimeoutException0);
      assertEquals((-1), inputStreamResult0.getResponseCode());
  }
}
