/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 13:59:43 GMT 2022
 */

package com.github.t3t5u.common.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.github.t3t5u.common.http.InputStreamConfiguration;
import com.github.t3t5u.common.http.InputStreamDelegator;
import com.github.t3t5u.common.http.Result;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.RunnableFuture;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InputStreamDelegator_ESTest extends InputStreamDelegator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InputStreamDelegator inputStreamDelegator0 = new InputStreamDelegator();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      RunnableFuture<Result<InputStream>> runnableFuture0 = inputStreamDelegator0.put("yVk?xMKEs}0,D", "", (Map<String, List<String>>) null, inputStreamConfiguration1);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InputStreamDelegator inputStreamDelegator0 = new InputStreamDelegator();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RunnableFuture<Result<InputStream>> runnableFuture0 = inputStreamDelegator0.get("", "2On P7e%WQ_=g@3", (Map<String, List<String>>) hashMap0, inputStreamConfiguration1);
      assertNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InputStreamDelegator inputStreamDelegator0 = InputStreamDelegator.getInstance();
      assertNotNull(inputStreamDelegator0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InputStreamDelegator inputStreamDelegator0 = new InputStreamDelegator();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      RunnableFuture<Result<InputStream>> runnableFuture0 = inputStreamDelegator0.post("yVk?xMKEs}0,D", "com.github.t3t5u.common.http.ByteArrayResult", (Map<String, List<String>>) null, inputStreamConfiguration1);
      assertNotNull(runnableFuture0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InputStreamDelegator inputStreamDelegator0 = new InputStreamDelegator();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      RunnableFuture<Result<InputStream>> runnableFuture0 = inputStreamDelegator0.delete("com.github.t3t5u.common.http.ByteArrayResult", "", (Map<String, List<String>>) null, inputStreamConfiguration1);
      assertNull(runnableFuture0);
  }
}
