/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 13:51:13 GMT 2022
 */

package com.github.t3t5u.common.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.github.t3t5u.common.http.InputStreamConfiguration;
import com.github.t3t5u.common.http.InputStreamConfigurationBuilder;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InputStreamConfigurationBuilder_ESTest extends InputStreamConfigurationBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      InputStreamConfigurationBuilder inputStreamConfigurationBuilder0 = new InputStreamConfigurationBuilder(inputStreamConfiguration1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InputStreamConfigurationBuilder inputStreamConfigurationBuilder0 = new InputStreamConfigurationBuilder();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      inputStreamConfiguration1.setFollowRedirects(true);
      InputStreamConfiguration inputStreamConfiguration2 = inputStreamConfigurationBuilder0.clone(inputStreamConfiguration1);
      assertEquals(0, inputStreamConfiguration2.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InputStreamConfigurationBuilder inputStreamConfigurationBuilder0 = new InputStreamConfigurationBuilder();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      inputStreamConfigurationBuilder0.setConfiguration(inputStreamConfiguration1);
      inputStreamConfigurationBuilder0.setReadTimeout(90L, timeUnit0);
      InputStreamConfiguration inputStreamConfiguration2 = inputStreamConfigurationBuilder0.clone(inputStreamConfiguration1);
      assertFalse(inputStreamConfiguration2.equals((Object)inputStreamConfiguration0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InputStreamConfigurationBuilder inputStreamConfigurationBuilder0 = new InputStreamConfigurationBuilder();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      inputStreamConfiguration1.setReadTimeout((-1L), timeUnit0);
      InputStreamConfiguration inputStreamConfiguration2 = inputStreamConfigurationBuilder0.clone(inputStreamConfiguration1);
      assertFalse(inputStreamConfiguration2.isFollowRedirects());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InputStreamConfigurationBuilder inputStreamConfigurationBuilder0 = new InputStreamConfigurationBuilder();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      inputStreamConfiguration1.setConnectTimeout(1);
      InputStreamConfiguration inputStreamConfiguration2 = inputStreamConfigurationBuilder0.clone(inputStreamConfiguration1);
      assertNotSame(inputStreamConfiguration1, inputStreamConfiguration2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InputStreamConfigurationBuilder inputStreamConfigurationBuilder0 = new InputStreamConfigurationBuilder();
      InputStreamConfiguration inputStreamConfiguration0 = mock(InputStreamConfiguration.class, new ViolatedAssumptionAnswer());
      InputStreamConfiguration inputStreamConfiguration1 = new InputStreamConfiguration(inputStreamConfiguration0);
      inputStreamConfiguration1.setConnectTimeout((-1));
      InputStreamConfiguration inputStreamConfiguration2 = inputStreamConfigurationBuilder0.clone(inputStreamConfiguration1);
      assertFalse(inputStreamConfiguration2.equals((Object)inputStreamConfiguration0));
  }
}
