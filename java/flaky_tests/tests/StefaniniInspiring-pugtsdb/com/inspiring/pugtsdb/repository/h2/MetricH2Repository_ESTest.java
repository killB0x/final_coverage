/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:08:15 GMT 2022
 */

package com.inspiring.pugtsdb.repository.h2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.metric.Metric;
import com.inspiring.pugtsdb.repository.TagRepository;
import com.inspiring.pugtsdb.repository.h2.MetricH2Repository;
import com.inspiring.pugtsdb.repository.h2.TagH2Repository;
import com.inspiring.pugtsdb.sql.PugConnection;
import com.inspiring.pugtsdb.util.DummySqlConnection;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MetricH2Repository_ESTest extends MetricH2Repository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MetricH2Repository metricH2Repository0 = new MetricH2Repository((TagRepository) null);
      // Undeclared exception!
      try { 
        metricH2Repository0.selectMetricNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.H2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MetricH2Repository metricH2Repository0 = new MetricH2Repository((TagRepository) null);
      // Undeclared exception!
      try { 
        metricH2Repository0.notExistsMetric((Metric<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.H2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MetricH2Repository metricH2Repository0 = new MetricH2Repository((TagRepository) null);
      // Undeclared exception!
      try { 
        metricH2Repository0.insertMetric((Metric<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.H2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      MetricH2Repository metricH2Repository0 = new MetricH2Repository(tagH2Repository0);
      // Undeclared exception!
      try { 
        metricH2Repository0.existsMetric((Metric<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.H2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      MetricH2Repository metricH2Repository0 = new MetricH2Repository(supplier0, tagH2Repository0);
      // Undeclared exception!
      try { 
        metricH2Repository0.existsMetric((Metric<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.MetricH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      MetricH2Repository metricH2Repository0 = new MetricH2Repository(supplier0, tagH2Repository0);
      // Undeclared exception!
      try { 
        metricH2Repository0.insertMetric((Metric<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.MetricH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      MetricH2Repository metricH2Repository0 = new MetricH2Repository(supplier0, (TagRepository) null);
      // Undeclared exception!
      try { 
        metricH2Repository0.selectMetricsByName("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metrics by name  with statement  SELECT \"id\",              \"name\",            \"type\"      FROM   metric        WHERE  \"name\" = ? 
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.MetricH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      MetricH2Repository metricH2Repository0 = new MetricH2Repository(supplier0, tagH2Repository0);
      // Undeclared exception!
      try { 
        metricH2Repository0.selectMetricNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.MetricH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      MetricH2Repository metricH2Repository0 = new MetricH2Repository(supplier0, tagH2Repository0);
      // Undeclared exception!
      try { 
        metricH2Repository0.notExistsMetric((Metric<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.MetricH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      MetricH2Repository metricH2Repository0 = new MetricH2Repository(tagH2Repository0);
      // Undeclared exception!
      try { 
        metricH2Repository0.selectMetricById("s0$g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // MetricH2Repository.selectMetricById(String id) not implemented yet
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.MetricH2Repository", e);
      }
  }
}
