/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 17:53:34 GMT 2022
 */

package com.inspiring.pugtsdb.repository.h2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.bean.MetricPoint;
import com.inspiring.pugtsdb.bean.MetricPoints;
import com.inspiring.pugtsdb.bean.Point;
import com.inspiring.pugtsdb.metric.Metric;
import com.inspiring.pugtsdb.metric.StringMetric;
import com.inspiring.pugtsdb.repository.TagRepository;
import com.inspiring.pugtsdb.repository.h2.H2Repositories;
import com.inspiring.pugtsdb.repository.h2.PointH2Repository;
import com.inspiring.pugtsdb.repository.h2.TagH2Repository;
import com.inspiring.pugtsdb.sql.PugConnection;
import com.inspiring.pugtsdb.time.Granularity;
import com.inspiring.pugtsdb.util.DummySqlConnection;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PointH2Repository_ESTest extends PointH2Repository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      H2Repositories h2Repositories0 = new H2Repositories(supplier0);
      TagRepository tagRepository0 = h2Repositories0.getTagRepository();
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier1 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier1).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier1, tagRepository0);
      Granularity granularity0 = Granularity.ONE_HOUR;
      // Undeclared exception!
      try { 
        pointH2Repository0.deletePointsByNameAndAggregationBeforeTime("Point{timestamp=", "MC6fE", granularity0, (-1493L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      H2Repositories h2Repositories0 = new H2Repositories(supplier0);
      TagRepository tagRepository0 = h2Repositories0.getTagRepository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagRepository0);
      Granularity granularity0 = Granularity.ONE_MONTH;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricsPointsByNameAndTagsBetweenTimestamp("", granularity0, map0, (-3315L), 971L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric  points between -3315 and 971 with granularity 1mo tags {PLT=Asia/Karachi, CNT=America/St_Johns, IET=America/Indiana/Indianapolis, VST=Asia/Ho_Chi_Minh, JST=Asia/Tokyo, ART=Africa/Cairo, PST=America/Los_Angeles, BET=America/Sao_Paulo, MIT=Pacific/Apia, CAT=Africa/Harare, AGT=America/Argentina/Buenos_Aires, NET=Asia/Yerevan, CST=America/Chicago, IST=Asia/Kolkata, AET=Australia/Sydney, BST=Asia/Dhaka, ACT=Australia/Darwin, HST=-10:00, NST=Pacific/Auckland, AST=America/Anchorage, MST=-07:00, SST=Pacific/Guadalcanal, CTT=Asia/Shanghai, PRT=America/Puerto_Rico, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, EST=-05:00, PNT=America/Phoenix} and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1mo AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              INNER JOIN metric_tag AS t0              ON     metric.\"id\" = t0.\"metric_id\"  AND    t0.\"tag_name\" = ?               AND    t0.\"tag_value\" = ?              INNER JOIN metric_tag AS t1              ON     metric.\"id\" = t1.\"metric_id\"  AND    t1.\"tag_name\" = ?               AND    t1.\"tag_value\" = ?              INNER JOIN metric_tag AS t2              ON     metric.\"id\" = t2.\"metric_id\"  AND    t2.\"tag_name\" = ?               AND    t2.\"tag_value\" = ?              INNER JOIN metric_tag AS t3              ON     metric.\"id\" = t3.\"metric_id\"  AND    t3.\"tag_name\" = ?               AND    t3.\"tag_value\" = ?              INNER JOIN metric_tag AS t4              ON     metric.\"id\" = t4.\"metric_id\"  AND    t4.\"tag_name\" = ?               AND    t4.\"tag_value\" = ?              INNER JOIN metric_tag AS t5              ON     metric.\"id\" = t5.\"metric_id\"  AND    t5.\"tag_name\" = ?               AND    t5.\"tag_value\" = ?              INNER JOIN metric_tag AS t6              ON     metric.\"id\" = t6.\"metric_id\"  AND    t6.\"tag_name\" = ?               AND    t6.\"tag_value\" = ?              INNER JOIN metric_tag AS t7              ON     metric.\"id\" = t7.\"metric_id\"  AND    t7.\"tag_name\" = ?               AND    t7.\"tag_value\" = ?              INNER JOIN metric_tag AS t8              ON     metric.\"id\" = t8.\"metric_id\"  AND    t8.\"tag_name\" = ?               AND    t8.\"tag_value\" = ?              INNER JOIN metric_tag AS t9              ON     metric.\"id\" = t9.\"metric_id\"  AND    t9.\"tag_name\" = ?               AND    t9.\"tag_value\" = ?              INNER JOIN metric_tag AS t10              ON     metric.\"id\" = t10.\"metric_id\"  AND    t10.\"tag_name\" = ?               AND    t10.\"tag_value\" = ?              INNER JOIN metric_tag AS t11              ON     metric.\"id\" = t11.\"metric_id\"  AND    t11.\"tag_name\" = ?               AND    t11.\"tag_value\" = ?              INNER JOIN metric_tag AS t12              ON     metric.\"id\" = t12.\"metric_id\"  AND    t12.\"tag_name\" = ?               AND    t12.\"tag_value\" = ?              INNER JOIN metric_tag AS t13              ON     metric.\"id\" = t13.\"metric_id\"  AND    t13.\"tag_name\" = ?               AND    t13.\"tag_value\" = ?              INNER JOIN metric_tag AS t14              ON     metric.\"id\" = t14.\"metric_id\"  AND    t14.\"tag_name\" = ?               AND    t14.\"tag_value\" = ?              INNER JOIN metric_tag AS t15              ON     metric.\"id\" = t15.\"metric_id\"  AND    t15.\"tag_name\" = ?               AND    t15.\"tag_value\" = ?              INNER JOIN metric_tag AS t16              ON     metric.\"id\" = t16.\"metric_id\"  AND    t16.\"tag_name\" = ?               AND    t16.\"tag_value\" = ?              INNER JOIN metric_tag AS t17              ON     metric.\"id\" = t17.\"metric_id\"  AND    t17.\"tag_name\" = ?               AND    t17.\"tag_value\" = ?              INNER JOIN metric_tag AS t18              ON     metric.\"id\" = t18.\"metric_id\"  AND    t18.\"tag_name\" = ?               AND    t18.\"tag_value\" = ?              INNER JOIN metric_tag AS t19              ON     metric.\"id\" = t19.\"metric_id\"  AND    t19.\"tag_name\" = ?               AND    t19.\"tag_value\" = ?              INNER JOIN metric_tag AS t20              ON     metric.\"id\" = t20.\"metric_id\"  AND    t20.\"tag_name\" = ?               AND    t20.\"tag_value\" = ?              INNER JOIN metric_tag AS t21              ON     metric.\"id\" = t21.\"metric_id\"  AND    t21.\"tag_name\" = ?               AND    t21.\"tag_value\" = ?              INNER JOIN metric_tag AS t22              ON     metric.\"id\" = t22.\"metric_id\"  AND    t22.\"tag_name\" = ?               AND    t22.\"tag_value\" = ?              INNER JOIN metric_tag AS t23              ON     metric.\"id\" = t23.\"metric_id\"  AND    t23.\"tag_name\" = ?               AND    t23.\"tag_value\" = ?              INNER JOIN metric_tag AS t24              ON     metric.\"id\" = t24.\"metric_id\"  AND    t24.\"tag_name\" = ?               AND    t24.\"tag_value\" = ?              INNER JOIN metric_tag AS t25              ON     metric.\"id\" = t25.\"metric_id\"  AND    t25.\"tag_name\" = ?               AND    t25.\"tag_value\" = ?              INNER JOIN metric_tag AS t26              ON     metric.\"id\" = t26.\"metric_id\"  AND    t26.\"tag_name\" = ?               AND    t26.\"tag_value\" = ?              INNER JOIN metric_tag AS t27              ON     metric.\"id\" = t27.\"metric_id\"  AND    t27.\"tag_name\" = ?               AND    t27.\"tag_value\" = ?              ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\"              
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      H2Repositories h2Repositories0 = new H2Repositories(supplier0);
      TagRepository tagRepository0 = h2Repositories0.getTagRepository();
      Supplier<PugConnection> supplier1 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier1, tagRepository0);
      Granularity granularity0 = Granularity.ONE_HOUR;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectLastMetricsPointsByNameAndAggregationAndTags("com.inspiring.pugtsdb.util.Strings", "MC6fE", granularity0, map0, (-176));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric com.inspiring.pugtsdb.util.Strings last -176 points aggregated as MC6fE with granularity 1h tags {PLT=Asia/Karachi, CNT=America/St_Johns, IET=America/Indiana/Indianapolis, VST=Asia/Ho_Chi_Minh, JST=Asia/Tokyo, ART=Africa/Cairo, PST=America/Los_Angeles, BET=America/Sao_Paulo, MIT=Pacific/Apia, CAT=Africa/Harare, AGT=America/Argentina/Buenos_Aires, NET=Asia/Yerevan, CST=America/Chicago, IST=Asia/Kolkata, AET=Australia/Sydney, BST=Asia/Dhaka, ACT=Australia/Darwin, HST=-10:00, NST=Pacific/Auckland, AST=America/Anchorage, MST=-07:00, SST=Pacific/Guadalcanal, CTT=Asia/Shanghai, PRT=America/Puerto_Rico, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, EST=-05:00, PNT=America/Phoenix} and statement  SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1h AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"aggregation\" = ?            INNER JOIN metric_tag AS t0              ON     metric.\"id\" = t0.\"metric_id\"  AND    t0.\"tag_name\" = ?               AND    t0.\"tag_value\" = ?              INNER JOIN metric_tag AS t1              ON     metric.\"id\" = t1.\"metric_id\"  AND    t1.\"tag_name\" = ?               AND    t1.\"tag_value\" = ?              INNER JOIN metric_tag AS t2              ON     metric.\"id\" = t2.\"metric_id\"  AND    t2.\"tag_name\" = ?               AND    t2.\"tag_value\" = ?              INNER JOIN metric_tag AS t3              ON     metric.\"id\" = t3.\"metric_id\"  AND    t3.\"tag_name\" = ?               AND    t3.\"tag_value\" = ?              INNER JOIN metric_tag AS t4              ON     metric.\"id\" = t4.\"metric_id\"  AND    t4.\"tag_name\" = ?               AND    t4.\"tag_value\" = ?              INNER JOIN metric_tag AS t5              ON     metric.\"id\" = t5.\"metric_id\"  AND    t5.\"tag_name\" = ?               AND    t5.\"tag_value\" = ?              INNER JOIN metric_tag AS t6              ON     metric.\"id\" = t6.\"metric_id\"  AND    t6.\"tag_name\" = ?               AND    t6.\"tag_value\" = ?              INNER JOIN metric_tag AS t7              ON     metric.\"id\" = t7.\"metric_id\"  AND    t7.\"tag_name\" = ?               AND    t7.\"tag_value\" = ?              INNER JOIN metric_tag AS t8              ON     metric.\"id\" = t8.\"metric_id\"  AND    t8.\"tag_name\" = ?               AND    t8.\"tag_value\" = ?              INNER JOIN metric_tag AS t9              ON     metric.\"id\" = t9.\"metric_id\"  AND    t9.\"tag_name\" = ?               AND    t9.\"tag_value\" = ?              INNER JOIN metric_tag AS t10              ON     metric.\"id\" = t10.\"metric_id\"  AND    t10.\"tag_name\" = ?               AND    t10.\"tag_value\" = ?              INNER JOIN metric_tag AS t11              ON     metric.\"id\" = t11.\"metric_id\"  AND    t11.\"tag_name\" = ?               AND    t11.\"tag_value\" = ?              INNER JOIN metric_tag AS t12              ON     metric.\"id\" = t12.\"metric_id\"  AND    t12.\"tag_name\" = ?               AND    t12.\"tag_value\" = ?              INNER JOIN metric_tag AS t13              ON     metric.\"id\" = t13.\"metric_id\"  AND    t13.\"tag_name\" = ?               AND    t13.\"tag_value\" = ?              INNER JOIN metric_tag AS t14              ON     metric.\"id\" = t14.\"metric_id\"  AND    t14.\"tag_name\" = ?               AND    t14.\"tag_value\" = ?              INNER JOIN metric_tag AS t15              ON     metric.\"id\" = t15.\"metric_id\"  AND    t15.\"tag_name\" = ?               AND    t15.\"tag_value\" = ?              INNER JOIN metric_tag AS t16              ON     metric.\"id\" = t16.\"metric_id\"  AND    t16.\"tag_name\" = ?               AND    t16.\"tag_value\" = ?              INNER JOIN metric_tag AS t17              ON     metric.\"id\" = t17.\"metric_id\"  AND    t17.\"tag_name\" = ?               AND    t17.\"tag_value\" = ?              INNER JOIN metric_tag AS t18              ON     metric.\"id\" = t18.\"metric_id\"  AND    t18.\"tag_name\" = ?               AND    t18.\"tag_value\" = ?              INNER JOIN metric_tag AS t19              ON     metric.\"id\" = t19.\"metric_id\"  AND    t19.\"tag_name\" = ?               AND    t19.\"tag_value\" = ?              INNER JOIN metric_tag AS t20              ON     metric.\"id\" = t20.\"metric_id\"  AND    t20.\"tag_name\" = ?               AND    t20.\"tag_value\" = ?              INNER JOIN metric_tag AS t21              ON     metric.\"id\" = t21.\"metric_id\"  AND    t21.\"tag_name\" = ?               AND    t21.\"tag_value\" = ?              INNER JOIN metric_tag AS t22              ON     metric.\"id\" = t22.\"metric_id\"  AND    t22.\"tag_name\" = ?               AND    t22.\"tag_value\" = ?              INNER JOIN metric_tag AS t23              ON     metric.\"id\" = t23.\"metric_id\"  AND    t23.\"tag_name\" = ?               AND    t23.\"tag_value\" = ?              INNER JOIN metric_tag AS t24              ON     metric.\"id\" = t24.\"metric_id\"  AND    t24.\"tag_name\" = ?               AND    t24.\"tag_value\" = ?              INNER JOIN metric_tag AS t25              ON     metric.\"id\" = t25.\"metric_id\"  AND    t25.\"tag_name\" = ?               AND    t25.\"tag_value\" = ?              INNER JOIN metric_tag AS t26              ON     metric.\"id\" = t26.\"metric_id\"  AND    t26.\"tag_name\" = ?               AND    t26.\"tag_value\" = ?              INNER JOIN metric_tag AS t27              ON     metric.\"id\" = t27.\"metric_id\"  AND    t27.\"tag_name\" = ?               AND    t27.\"tag_value\" = ?              ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\" DESC         
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Granularity granularity0 = Granularity.ONE_DAY;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricsPointsByNameAndAggregationAndTagsBetweenTimestamp("com.inspiring.pugtsdb.rollup.listen.RollUpEvent", "!bb+2}bG]%Kb674+U", granularity0, (Map<String, String>) hashMap0, (-8663945395140668459L), (-8663945395140668459L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric com.inspiring.pugtsdb.rollup.listen.RollUpEvent points aggregated as !bb+2}bG]%Kb674+U between -8663945395140668459 and -8663945395140668459 with granularity 1d tags {} and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1d AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"aggregation\" = ?            AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\"              
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_YEAR;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectLastMetricsPointsByNameAndAggregation("com.inspiring.pugtsdb.rollup.listen.RollUpEvent", "Cannot insert metric ", granularity0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric com.inspiring.pugtsdb.rollup.listen.RollUpEvent last 0 points aggregated as Cannot insert metric  with granularity 1y and statement  SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1y AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"aggregation\" = ?            ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\" DESC         
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      H2Repositories h2Repositories0 = new H2Repositories(supplier0);
      TagRepository tagRepository0 = h2Repositories0.getTagRepository();
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier1 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier1).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier1, tagRepository0);
      Granularity granularity0 = Granularity.HALF_MINUTE;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricsPointsByNameAndAggregationBetweenTimestamp("com.inspiring.pugtsdb.util.Strings", "", granularity0, 0L, (-49064778989728563L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric com.inspiring.pugtsdb.util.Strings points aggregated as  between 0 and -49064778989728563 with granularity 30s and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_30s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"aggregation\" = ?            AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\"              
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagH2Repository0);
      Granularity granularity0 = Granularity.ONE_SECOND;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricPointsByIdBetweenTimestamp("l wqGC$3rX", granularity0, (-1242L), (-270L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric l wqGC$3rX points between -1242 and -270 with granularity 1s and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\"              
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_YEAR;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectLastMetricPointsByIdAndAggregation("", "", granularity0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric  last 11 points aggregated as  with granularity 1y and statement  SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1y AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"aggregation\" = ?            ORDER BY metric.\"id\",                              point.\"timestamp\" DESC          
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, tagH2Repository0);
      Granularity granularity0 = Granularity.ONE_MONTH;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricPointsByIdAndAggregationBetweenTimestamp("Z=O~ \"jZ", "Z=O~ \"jZ", granularity0, 0L, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric Z=O~ \"jZ points aggregated as Z=O~ \"jZ between 0 and -1 with granularity 1mo and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1mo AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"aggregation\" = ?            AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                              point.\"timestamp\"               
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_MINUTE;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricPointsByIdAndAggregationBetweenTimestamp("#NwTB-e:qD,TrXe37", " SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"aggregation\" = ?           ", granularity0, 0L, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric #NwTB-e:qD,TrXe37 points aggregated as  SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"aggregation\" = ?            between 0 and 0 with granularity 1m and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1m AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"aggregation\" = ?            AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                              point.\"timestamp\"               
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository((Supplier<PugConnection>) null, tagH2Repository0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectRawMetricsPointsByNameAndTagsBetweenTimestamp("", map0, 3696L, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric  points between 3696 and 0 with tags {PLT=Asia/Karachi, CNT=America/St_Johns, IET=America/Indiana/Indianapolis, VST=Asia/Ho_Chi_Minh, JST=Asia/Tokyo, ART=Africa/Cairo, PST=America/Los_Angeles, BET=America/Sao_Paulo, MIT=Pacific/Apia, CAT=Africa/Harare, AGT=America/Argentina/Buenos_Aires, NET=Asia/Yerevan, CST=America/Chicago, IST=Asia/Kolkata, AET=Australia/Sydney, BST=Asia/Dhaka, ACT=Australia/Darwin, HST=-10:00, NST=Pacific/Auckland, AST=America/Anchorage, MST=-07:00, SST=Pacific/Guadalcanal, CTT=Asia/Shanghai, PRT=America/Puerto_Rico, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, EST=-05:00, PNT=America/Phoenix} and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"value\"                      FROM   metric                               INNER JOIN point                            ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              INNER JOIN metric_tag AS t0              ON     metric.\"id\" = t0.\"metric_id\"  AND    t0.\"tag_name\" = ?               AND    t0.\"tag_value\" = ?              INNER JOIN metric_tag AS t1              ON     metric.\"id\" = t1.\"metric_id\"  AND    t1.\"tag_name\" = ?               AND    t1.\"tag_value\" = ?              INNER JOIN metric_tag AS t2              ON     metric.\"id\" = t2.\"metric_id\"  AND    t2.\"tag_name\" = ?               AND    t2.\"tag_value\" = ?              INNER JOIN metric_tag AS t3              ON     metric.\"id\" = t3.\"metric_id\"  AND    t3.\"tag_name\" = ?               AND    t3.\"tag_value\" = ?              INNER JOIN metric_tag AS t4              ON     metric.\"id\" = t4.\"metric_id\"  AND    t4.\"tag_name\" = ?               AND    t4.\"tag_value\" = ?              INNER JOIN metric_tag AS t5              ON     metric.\"id\" = t5.\"metric_id\"  AND    t5.\"tag_name\" = ?               AND    t5.\"tag_value\" = ?              INNER JOIN metric_tag AS t6              ON     metric.\"id\" = t6.\"metric_id\"  AND    t6.\"tag_name\" = ?               AND    t6.\"tag_value\" = ?              INNER JOIN metric_tag AS t7              ON     metric.\"id\" = t7.\"metric_id\"  AND    t7.\"tag_name\" = ?               AND    t7.\"tag_value\" = ?              INNER JOIN metric_tag AS t8              ON     metric.\"id\" = t8.\"metric_id\"  AND    t8.\"tag_name\" = ?               AND    t8.\"tag_value\" = ?              INNER JOIN metric_tag AS t9              ON     metric.\"id\" = t9.\"metric_id\"  AND    t9.\"tag_name\" = ?               AND    t9.\"tag_value\" = ?              INNER JOIN metric_tag AS t10              ON     metric.\"id\" = t10.\"metric_id\"  AND    t10.\"tag_name\" = ?               AND    t10.\"tag_value\" = ?              INNER JOIN metric_tag AS t11              ON     metric.\"id\" = t11.\"metric_id\"  AND    t11.\"tag_name\" = ?               AND    t11.\"tag_value\" = ?              INNER JOIN metric_tag AS t12              ON     metric.\"id\" = t12.\"metric_id\"  AND    t12.\"tag_name\" = ?               AND    t12.\"tag_value\" = ?              INNER JOIN metric_tag AS t13              ON     metric.\"id\" = t13.\"metric_id\"  AND    t13.\"tag_name\" = ?               AND    t13.\"tag_value\" = ?              INNER JOIN metric_tag AS t14              ON     metric.\"id\" = t14.\"metric_id\"  AND    t14.\"tag_name\" = ?               AND    t14.\"tag_value\" = ?              INNER JOIN metric_tag AS t15              ON     metric.\"id\" = t15.\"metric_id\"  AND    t15.\"tag_name\" = ?               AND    t15.\"tag_value\" = ?              INNER JOIN metric_tag AS t16              ON     metric.\"id\" = t16.\"metric_id\"  AND    t16.\"tag_name\" = ?               AND    t16.\"tag_value\" = ?              INNER JOIN metric_tag AS t17              ON     metric.\"id\" = t17.\"metric_id\"  AND    t17.\"tag_name\" = ?               AND    t17.\"tag_value\" = ?              INNER JOIN metric_tag AS t18              ON     metric.\"id\" = t18.\"metric_id\"  AND    t18.\"tag_name\" = ?               AND    t18.\"tag_value\" = ?              INNER JOIN metric_tag AS t19              ON     metric.\"id\" = t19.\"metric_id\"  AND    t19.\"tag_name\" = ?               AND    t19.\"tag_value\" = ?              INNER JOIN metric_tag AS t20              ON     metric.\"id\" = t20.\"metric_id\"  AND    t20.\"tag_name\" = ?               AND    t20.\"tag_value\" = ?              INNER JOIN metric_tag AS t21              ON     metric.\"id\" = t21.\"metric_id\"  AND    t21.\"tag_name\" = ?               AND    t21.\"tag_value\" = ?              INNER JOIN metric_tag AS t22              ON     metric.\"id\" = t22.\"metric_id\"  AND    t22.\"tag_name\" = ?               AND    t22.\"tag_value\" = ?              INNER JOIN metric_tag AS t23              ON     metric.\"id\" = t23.\"metric_id\"  AND    t23.\"tag_name\" = ?               AND    t23.\"tag_value\" = ?              INNER JOIN metric_tag AS t24              ON     metric.\"id\" = t24.\"metric_id\"  AND    t24.\"tag_name\" = ?               AND    t24.\"tag_value\" = ?              INNER JOIN metric_tag AS t25              ON     metric.\"id\" = t25.\"metric_id\"  AND    t25.\"tag_name\" = ?               AND    t25.\"tag_value\" = ?              INNER JOIN metric_tag AS t26              ON     metric.\"id\" = t26.\"metric_id\"  AND    t26.\"tag_name\" = ?               AND    t26.\"tag_value\" = ?              INNER JOIN metric_tag AS t27              ON     metric.\"id\" = t27.\"metric_id\"  AND    t27.\"tag_name\" = ?               AND    t27.\"tag_value\" = ?              ORDER BY metric.\"id\",                              point.\"timestamp\"               
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      // Undeclared exception!
      try { 
        pointH2Repository0.selectRawMetricsPointsByNameBetweenTimestamp("", 0L, (-959L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric  points between 0 and -959 with statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"value\"                      FROM   metric                               INNER JOIN point                            ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                              point.\"timestamp\"               
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      // Undeclared exception!
      try { 
        pointH2Repository0.selectRawMetricPointsByIdBetweenTimestamp(".ztR:]m/[o=QM\"", 0L, (-1344L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric .ztR:]m/[o=QM\" points between 0 and -1344 with statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"value\"                      FROM   metric                               INNER JOIN point                            ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                              point.\"timestamp\"               
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_YEAR;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMaxPointTimestampByNameAndAggregation("", (String) null, granularity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagH2Repository0);
      // Undeclared exception!
      try { 
        pointH2Repository0.upsertMetricPoint((MetricPoint<MetricPoints<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagH2Repository0);
      // Undeclared exception!
      try { 
        pointH2Repository0.selectRawMetricsPointsByNameAndTagsBetweenTimestamp("CSdxd_yo.{M'yK5m ", (Map<String, String>) null, (-719L), (-719L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagH2Repository0);
      Granularity granularity0 = Granularity.ONE_HOUR;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricsPointsByNameAndTagsBetweenTimestamp("~('Mc}L^SBw^NT", granularity0, (Map<String, String>) null, (-4265267296055464877L), (-4265267296055464877L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagH2Repository0);
      Granularity granularity0 = Granularity.ONE_MINUTE;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricsPointsByNameAndAggregationAndTagsBetweenTimestamp("", "", granularity0, (Map<String, String>) null, 2269L, 1190L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagH2Repository0);
      Granularity granularity0 = Granularity.ONE_MINUTE;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMaxPointTimestampByNameAndAggregation(" SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                 ", " SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                 ", granularity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.H2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PointH2Repository pointH2Repository0 = new PointH2Repository((TagRepository) null);
      Granularity granularity0 = Granularity.ONE_DAY;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectLastMetricsPointsByNameAndTags("Cannot select metric %s points between %s and %s with statement %s", granularity0, (Map<String, String>) null, (-705));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PointH2Repository pointH2Repository0 = new PointH2Repository((TagRepository) null);
      Granularity granularity0 = Granularity.ONE_DAY;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectLastMetricsPointsByNameAndAggregationAndTags("Cannot select metric %s points between %s and %s with statement %s", "Cannot select metric %s points between %s and %s with statement %s", granularity0, (Map<String, String>) null, (-1269));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagH2Repository0);
      Granularity granularity0 = Granularity.ONE_HOUR;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectAggregationNames("{=", granularity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.H2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagH2Repository0);
      // Undeclared exception!
      try { 
        pointH2Repository0.deleteRawPointsByNameBeforeTime(" ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\" DESC         ", (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.H2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      // Undeclared exception!
      try { 
        pointH2Repository0.deleteRawPointsByNameBeforeTime("", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Metric<MetricPoints<StringMetric>> metric0 = (Metric<MetricPoints<StringMetric>>) mock(Metric.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metric0).getId();
      doReturn((Object) null).when(metric0).valueFromBytes(any(byte[].class));
      MetricPoints<MetricPoints<StringMetric>> metricPoints0 = new MetricPoints<MetricPoints<StringMetric>>(metric0);
      byte[] byteArray0 = new byte[7];
      metricPoints0.put("RJm.^g1", (long) 13, byteArray0);
      Granularity granularity0 = Granularity.ONE_YEAR;
      // Undeclared exception!
      try { 
        pointH2Repository0.upsertMetricPoints(metricPoints0, granularity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Metric<Object> metric0 = (Metric<Object>) mock(Metric.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metric0).getId();
      MetricPoint<Object> metricPoint0 = new MetricPoint<Object>(metric0, (Point<Object>) null);
      // Undeclared exception!
      try { 
        pointH2Repository0.upsertMetricPoint(metricPoint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Granularity granularity0 = Granularity.ONE_SECOND;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectLastMetricsPointsByNameAndTags("", granularity0, map0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric  last 0 points with granularity 1s tags {PLT=Asia/Karachi, CNT=America/St_Johns, IET=America/Indiana/Indianapolis, VST=Asia/Ho_Chi_Minh, JST=Asia/Tokyo, ART=Africa/Cairo, PST=America/Los_Angeles, BET=America/Sao_Paulo, MIT=Pacific/Apia, CAT=Africa/Harare, AGT=America/Argentina/Buenos_Aires, NET=Asia/Yerevan, CST=America/Chicago, IST=Asia/Kolkata, AET=Australia/Sydney, BST=Asia/Dhaka, ACT=Australia/Darwin, HST=-10:00, NST=Pacific/Auckland, AST=America/Anchorage, MST=-07:00, SST=Pacific/Guadalcanal, CTT=Asia/Shanghai, PRT=America/Puerto_Rico, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, EST=-05:00, PNT=America/Phoenix} and statement  SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  INNER JOIN metric_tag AS t0              ON     metric.\"id\" = t0.\"metric_id\"  AND    t0.\"tag_name\" = ?               AND    t0.\"tag_value\" = ?              INNER JOIN metric_tag AS t1              ON     metric.\"id\" = t1.\"metric_id\"  AND    t1.\"tag_name\" = ?               AND    t1.\"tag_value\" = ?              INNER JOIN metric_tag AS t2              ON     metric.\"id\" = t2.\"metric_id\"  AND    t2.\"tag_name\" = ?               AND    t2.\"tag_value\" = ?              INNER JOIN metric_tag AS t3              ON     metric.\"id\" = t3.\"metric_id\"  AND    t3.\"tag_name\" = ?               AND    t3.\"tag_value\" = ?              INNER JOIN metric_tag AS t4              ON     metric.\"id\" = t4.\"metric_id\"  AND    t4.\"tag_name\" = ?               AND    t4.\"tag_value\" = ?              INNER JOIN metric_tag AS t5              ON     metric.\"id\" = t5.\"metric_id\"  AND    t5.\"tag_name\" = ?               AND    t5.\"tag_value\" = ?              INNER JOIN metric_tag AS t6              ON     metric.\"id\" = t6.\"metric_id\"  AND    t6.\"tag_name\" = ?               AND    t6.\"tag_value\" = ?              INNER JOIN metric_tag AS t7              ON     metric.\"id\" = t7.\"metric_id\"  AND    t7.\"tag_name\" = ?               AND    t7.\"tag_value\" = ?              INNER JOIN metric_tag AS t8              ON     metric.\"id\" = t8.\"metric_id\"  AND    t8.\"tag_name\" = ?               AND    t8.\"tag_value\" = ?              INNER JOIN metric_tag AS t9              ON     metric.\"id\" = t9.\"metric_id\"  AND    t9.\"tag_name\" = ?               AND    t9.\"tag_value\" = ?              INNER JOIN metric_tag AS t10              ON     metric.\"id\" = t10.\"metric_id\"  AND    t10.\"tag_name\" = ?               AND    t10.\"tag_value\" = ?              INNER JOIN metric_tag AS t11              ON     metric.\"id\" = t11.\"metric_id\"  AND    t11.\"tag_name\" = ?               AND    t11.\"tag_value\" = ?              INNER JOIN metric_tag AS t12              ON     metric.\"id\" = t12.\"metric_id\"  AND    t12.\"tag_name\" = ?               AND    t12.\"tag_value\" = ?              INNER JOIN metric_tag AS t13              ON     metric.\"id\" = t13.\"metric_id\"  AND    t13.\"tag_name\" = ?               AND    t13.\"tag_value\" = ?              INNER JOIN metric_tag AS t14              ON     metric.\"id\" = t14.\"metric_id\"  AND    t14.\"tag_name\" = ?               AND    t14.\"tag_value\" = ?              INNER JOIN metric_tag AS t15              ON     metric.\"id\" = t15.\"metric_id\"  AND    t15.\"tag_name\" = ?               AND    t15.\"tag_value\" = ?              INNER JOIN metric_tag AS t16              ON     metric.\"id\" = t16.\"metric_id\"  AND    t16.\"tag_name\" = ?               AND    t16.\"tag_value\" = ?              INNER JOIN metric_tag AS t17              ON     metric.\"id\" = t17.\"metric_id\"  AND    t17.\"tag_name\" = ?               AND    t17.\"tag_value\" = ?              INNER JOIN metric_tag AS t18              ON     metric.\"id\" = t18.\"metric_id\"  AND    t18.\"tag_name\" = ?               AND    t18.\"tag_value\" = ?              INNER JOIN metric_tag AS t19              ON     metric.\"id\" = t19.\"metric_id\"  AND    t19.\"tag_name\" = ?               AND    t19.\"tag_value\" = ?              INNER JOIN metric_tag AS t20              ON     metric.\"id\" = t20.\"metric_id\"  AND    t20.\"tag_name\" = ?               AND    t20.\"tag_value\" = ?              INNER JOIN metric_tag AS t21              ON     metric.\"id\" = t21.\"metric_id\"  AND    t21.\"tag_name\" = ?               AND    t21.\"tag_value\" = ?              INNER JOIN metric_tag AS t22              ON     metric.\"id\" = t22.\"metric_id\"  AND    t22.\"tag_name\" = ?               AND    t22.\"tag_value\" = ?              INNER JOIN metric_tag AS t23              ON     metric.\"id\" = t23.\"metric_id\"  AND    t23.\"tag_name\" = ?               AND    t23.\"tag_value\" = ?              INNER JOIN metric_tag AS t24              ON     metric.\"id\" = t24.\"metric_id\"  AND    t24.\"tag_name\" = ?               AND    t24.\"tag_value\" = ?              INNER JOIN metric_tag AS t25              ON     metric.\"id\" = t25.\"metric_id\"  AND    t25.\"tag_name\" = ?               AND    t25.\"tag_value\" = ?              INNER JOIN metric_tag AS t26              ON     metric.\"id\" = t26.\"metric_id\"  AND    t26.\"tag_name\" = ?               AND    t26.\"tag_value\" = ?              INNER JOIN metric_tag AS t27              ON     metric.\"id\" = t27.\"metric_id\"  AND    t27.\"tag_name\" = ?               AND    t27.\"tag_value\" = ?              ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\" DESC         
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_YEAR;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricsPointsByNameAndTagsBetweenTimestamp("com.inspiring.pugtsdb.repository.h2.PointH2Repository", granularity0, (Map<String, String>) hashMap0, 0L, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric com.inspiring.pugtsdb.repository.h2.PointH2Repository points between 0 and 0 with granularity 1y tags {} and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1y AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\"              
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_HOUR;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        pointH2Repository0.selectLastMetricsPointsByNameAndAggregationAndTags(" SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?             ", " SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?             ", granularity0, (Map<String, String>) hashMap0, (-1269));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              last -1269 points aggregated as  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              with granularity 1h tags {} and statement  SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1h AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"aggregation\" = ?            ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\" DESC         
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_SECOND;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricsPointsByNameAndAggregationAndTagsBetweenTimestamp("", "", granularity0, map0, 0L, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric  points aggregated as  between 0 and 0 with granularity 1s tags {PLT=Asia/Karachi, CNT=America/St_Johns, IET=America/Indiana/Indianapolis, VST=Asia/Ho_Chi_Minh, JST=Asia/Tokyo, ART=Africa/Cairo, PST=America/Los_Angeles, BET=America/Sao_Paulo, MIT=Pacific/Apia, CAT=Africa/Harare, AGT=America/Argentina/Buenos_Aires, NET=Asia/Yerevan, CST=America/Chicago, IST=Asia/Kolkata, AET=Australia/Sydney, BST=Asia/Dhaka, ACT=Australia/Darwin, HST=-10:00, NST=Pacific/Auckland, AST=America/Anchorage, MST=-07:00, SST=Pacific/Guadalcanal, CTT=Asia/Shanghai, PRT=America/Puerto_Rico, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, EST=-05:00, PNT=America/Phoenix} and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"aggregation\" = ?            AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              INNER JOIN metric_tag AS t0              ON     metric.\"id\" = t0.\"metric_id\"  AND    t0.\"tag_name\" = ?               AND    t0.\"tag_value\" = ?              INNER JOIN metric_tag AS t1              ON     metric.\"id\" = t1.\"metric_id\"  AND    t1.\"tag_name\" = ?               AND    t1.\"tag_value\" = ?              INNER JOIN metric_tag AS t2              ON     metric.\"id\" = t2.\"metric_id\"  AND    t2.\"tag_name\" = ?               AND    t2.\"tag_value\" = ?              INNER JOIN metric_tag AS t3              ON     metric.\"id\" = t3.\"metric_id\"  AND    t3.\"tag_name\" = ?               AND    t3.\"tag_value\" = ?              INNER JOIN metric_tag AS t4              ON     metric.\"id\" = t4.\"metric_id\"  AND    t4.\"tag_name\" = ?               AND    t4.\"tag_value\" = ?              INNER JOIN metric_tag AS t5              ON     metric.\"id\" = t5.\"metric_id\"  AND    t5.\"tag_name\" = ?               AND    t5.\"tag_value\" = ?              INNER JOIN metric_tag AS t6              ON     metric.\"id\" = t6.\"metric_id\"  AND    t6.\"tag_name\" = ?               AND    t6.\"tag_value\" = ?              INNER JOIN metric_tag AS t7              ON     metric.\"id\" = t7.\"metric_id\"  AND    t7.\"tag_name\" = ?               AND    t7.\"tag_value\" = ?              INNER JOIN metric_tag AS t8              ON     metric.\"id\" = t8.\"metric_id\"  AND    t8.\"tag_name\" = ?               AND    t8.\"tag_value\" = ?              INNER JOIN metric_tag AS t9              ON     metric.\"id\" = t9.\"metric_id\"  AND    t9.\"tag_name\" = ?               AND    t9.\"tag_value\" = ?              INNER JOIN metric_tag AS t10              ON     metric.\"id\" = t10.\"metric_id\"  AND    t10.\"tag_name\" = ?               AND    t10.\"tag_value\" = ?              INNER JOIN metric_tag AS t11              ON     metric.\"id\" = t11.\"metric_id\"  AND    t11.\"tag_name\" = ?               AND    t11.\"tag_value\" = ?              INNER JOIN metric_tag AS t12              ON     metric.\"id\" = t12.\"metric_id\"  AND    t12.\"tag_name\" = ?               AND    t12.\"tag_value\" = ?              INNER JOIN metric_tag AS t13              ON     metric.\"id\" = t13.\"metric_id\"  AND    t13.\"tag_name\" = ?               AND    t13.\"tag_value\" = ?              INNER JOIN metric_tag AS t14              ON     metric.\"id\" = t14.\"metric_id\"  AND    t14.\"tag_name\" = ?               AND    t14.\"tag_value\" = ?              INNER JOIN metric_tag AS t15              ON     metric.\"id\" = t15.\"metric_id\"  AND    t15.\"tag_name\" = ?               AND    t15.\"tag_value\" = ?              INNER JOIN metric_tag AS t16              ON     metric.\"id\" = t16.\"metric_id\"  AND    t16.\"tag_name\" = ?               AND    t16.\"tag_value\" = ?              INNER JOIN metric_tag AS t17              ON     metric.\"id\" = t17.\"metric_id\"  AND    t17.\"tag_name\" = ?               AND    t17.\"tag_value\" = ?              INNER JOIN metric_tag AS t18              ON     metric.\"id\" = t18.\"metric_id\"  AND    t18.\"tag_name\" = ?               AND    t18.\"tag_value\" = ?              INNER JOIN metric_tag AS t19              ON     metric.\"id\" = t19.\"metric_id\"  AND    t19.\"tag_name\" = ?               AND    t19.\"tag_value\" = ?              INNER JOIN metric_tag AS t20              ON     metric.\"id\" = t20.\"metric_id\"  AND    t20.\"tag_name\" = ?               AND    t20.\"tag_value\" = ?              INNER JOIN metric_tag AS t21              ON     metric.\"id\" = t21.\"metric_id\"  AND    t21.\"tag_name\" = ?               AND    t21.\"tag_value\" = ?              INNER JOIN metric_tag AS t22              ON     metric.\"id\" = t22.\"metric_id\"  AND    t22.\"tag_name\" = ?               AND    t22.\"tag_value\" = ?              INNER JOIN metric_tag AS t23              ON     metric.\"id\" = t23.\"metric_id\"  AND    t23.\"tag_name\" = ?               AND    t23.\"tag_value\" = ?              INNER JOIN metric_tag AS t24              ON     metric.\"id\" = t24.\"metric_id\"  AND    t24.\"tag_name\" = ?               AND    t24.\"tag_value\" = ?              INNER JOIN metric_tag AS t25              ON     metric.\"id\" = t25.\"metric_id\"  AND    t25.\"tag_name\" = ?               AND    t25.\"tag_value\" = ?              INNER JOIN metric_tag AS t26              ON     metric.\"id\" = t26.\"metric_id\"  AND    t26.\"tag_name\" = ?               AND    t26.\"tag_value\" = ?              INNER JOIN metric_tag AS t27              ON     metric.\"id\" = t27.\"metric_id\"  AND    t27.\"tag_name\" = ?               AND    t27.\"tag_value\" = ?              ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\"              
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_YEAR;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectLastMetricPointsById("C&fM!BDq", granularity0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric C&fM!BDq last points with granularity 0 and statement 1y
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.HALF_MINUTE;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectMetricPointsByIdBetweenTimestamp(",DR^!Dq@H.2. amW", granularity0, 2037L, 2037L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric ,DR^!Dq@H.2. amW points between 2037 and 2037 with granularity 30s and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_30s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                             point.\"aggregation\",                     point.\"timestamp\"              
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_DAY;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectLastMetricPointsByIdAndAggregation("v?rA=Z-H ", "v?rA=Z-H ", granularity0, 419);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric v?rA=Z-H  last 419 points aggregated as v?rA=Z-H  with granularity 1d and statement  SELECT TOP ?                                       metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_1d AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"aggregation\" = ?            ORDER BY metric.\"id\",                              point.\"timestamp\" DESC          
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      // Undeclared exception!
      try { 
        pointH2Repository0.selectRawMetricsPointsByNameAndTagsBetweenTimestamp("~>!% DQ9.<n-", (Map<String, String>) hashMap0, 0L, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric ~>!% DQ9.<n- points between 0 and 0 with tags {} and statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"value\"                      FROM   metric                               INNER JOIN point                            ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                              point.\"timestamp\"               
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      // Undeclared exception!
      try { 
        pointH2Repository0.selectRawMetricsPointsByNameBetweenTimestamp(" SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"aggregation\" = ?            AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?             ", 5879L, 5879L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot select metric  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"aggregation\",                      point.\"value\"                      FROM   metric                               INNER JOIN point_%s AS point                ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"id\" = ?                    AND    point.\"aggregation\" = ?            AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              points between 5879 and 5879 with statement  SELECT metric.\"id\",                              metric.\"name\",                            metric.\"type\",                            point.\"timestamp\",                        point.\"value\"                      FROM   metric                               INNER JOIN point                            ON     metric.\"id\" = point.\"metric_id\"  AND    metric.\"name\" = ?                  AND    point.\"timestamp\" >= ?             AND    point.\"timestamp\" < ?              ORDER BY metric.\"id\",                              point.\"timestamp\"               
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PugConnection pugConnection0 = new PugConnection(dummySqlConnection0);
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Granularity granularity0 = Granularity.ONE_MINUTE;
      // Undeclared exception!
      try { 
        pointH2Repository0.selectAggregationNames("com.inspiring.pugtsdb.repository.h2.PointH2Repository", granularity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TagH2Repository tagH2Repository0 = new TagH2Repository();
      PointH2Repository pointH2Repository0 = new PointH2Repository(tagH2Repository0);
      Granularity granularity0 = Granularity.ONE_YEAR;
      // Undeclared exception!
      try { 
        pointH2Repository0.deletePointsByNameAndAggregationBeforeTime("", "", granularity0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.H2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointH2Repository pointH2Repository0 = new PointH2Repository(supplier0, (TagRepository) null);
      Metric<MetricPoints<StringMetric>> metric0 = (Metric<MetricPoints<StringMetric>>) mock(Metric.class, new ViolatedAssumptionAnswer());
      MetricPoints<MetricPoints<StringMetric>> metricPoints0 = new MetricPoints<MetricPoints<StringMetric>>(metric0);
      Granularity granularity0 = Granularity.ONE_YEAR;
      pointH2Repository0.upsertMetricPoints(metricPoints0, granularity0);
  }
}
