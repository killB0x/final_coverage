/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:25:18 GMT 2022
 */

package com.inspiring.pugtsdb.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.metric.DoubleMetric;
import com.inspiring.pugtsdb.metric.StringMetric;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Metric_ESTest extends Metric_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringMetric stringMetric0 = new StringMetric("{0,number,", (Map<String, String>) null);
      stringMetric0.valueToBytes((String) null);
      assertEquals("-002065791122", stringMetric0.getId());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringMetric stringMetric0 = new StringMetric("{0,number,", (Map<String, String>) null);
      stringMetric0.valueToBytes("com.inspiring.pugtsdb.exception.PugIllegalArgumentException");
      assertEquals("-002065791122", stringMetric0.getId());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringMetric stringMetric0 = new StringMetric("Metric name cannot be blank", hashMap0);
      stringMetric0.valueToBytes("");
      assertEquals("0001313293882", stringMetric0.getId());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringMetric stringMetric0 = new StringMetric("qtZ", hashMap0);
      stringMetric0.valueFromBytes((byte[]) null);
      assertEquals("0000724902238", stringMetric0.getId());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringMetric stringMetric0 = new StringMetric("*`^tu>%A&rhL", hashMap0);
      byte[] byteArray0 = new byte[2];
      stringMetric0.valueFromBytes(byteArray0);
      assertEquals("0001264662306", stringMetric0.getId());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringMetric stringMetric0 = new StringMetric("_zf!#:ZJvN,3yd4hE", (Map<String, String>) null);
      String string0 = stringMetric0.getId();
      assertEquals("0001247386628", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleMetric doubleMetric0 = null;
      try {
        doubleMetric0 = new DoubleMetric("", (Map<String, String>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Metric name cannot be blank
         //
         verifyException("com.inspiring.pugtsdb.metric.Metric", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringMetric stringMetric0 = new StringMetric("com.inspiring.pugtsdb.exception.PugException", hashMap0);
      String string0 = stringMetric0.getName();
      assertEquals("com.inspiring.pugtsdb.exception.PugException", string0);
      assertEquals("-001284228323", stringMetric0.getId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StringMetric stringMetric0 = new StringMetric("IF brq>4", (Map<String, String>) null);
      String string0 = stringMetric0.toString();
      assertEquals("Metric{id=0000917977398, type='com.inspiring.pugtsdb.metric.StringMetric', name='IF brq>4', tags={}}", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringMetric stringMetric0 = new StringMetric("Ya7(}<?k7c6t)t.t?FR", hashMap0);
      stringMetric0.getTags();
      assertEquals("0001381406674", stringMetric0.getId());
  }
}
