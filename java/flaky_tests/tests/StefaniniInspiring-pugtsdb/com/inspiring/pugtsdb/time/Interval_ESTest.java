/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:52:59 GMT 2022
 */

package com.inspiring.pugtsdb.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.time.Granularity;
import com.inspiring.pugtsdb.time.Interval;
import java.time.temporal.ChronoUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastWeeks(1795L);
      Interval interval0 = interval_Builder0.fromMinutesAgo(0L);
      assertEquals(306793281320L, interval0.getFromTime());
      assertEquals(1392409281320L, interval0.getUntilTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.until((-628L));
      Interval interval0 = interval_Builder0.fromDaysAgo((-1L));
      assertEquals((-628L), interval0.getUntilTime());
      assertEquals(1392495681320L, interval0.getFromTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastMonths(2465L);
      assertNotNull(interval_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastHours(0L);
      Interval interval0 = interval_Builder0.from(0L);
      long long0 = interval0.getUntilTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1258L);
      long long0 = interval0.getFromTime();
      assertEquals(0L, long0);
      assertEquals(1258L, interval0.getUntilTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.until((-993L));
      Interval interval0 = interval_Builder0.from((-993L));
      long long0 = interval0.getFromTime();
      assertEquals((-993L), long0);
      assertEquals((-993L), interval0.getUntilTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.ofLastYears(4684851273320L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Exceeds capacity of Duration: 147839626759298120640000000000
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.ofLast((Granularity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.ofLast(0L, (ChronoUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        Interval.ofLast(560L, chronoUnit0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Exceeds capacity of Duration: 5165088340638674452479999999440
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastSeconds(2084L);
      assertNotNull(interval_Builder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.ofLastMonths((-72608643158680L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Exceeds capacity of Duration: -190942288911966095280000000000
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastHours(0L);
      Interval interval0 = interval_Builder0.fromMinutesAgo(0L);
      long long0 = interval0.getUntilTime();
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, interval0.getFromTime());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.until((-235L));
      Interval interval0 = interval_Builder0.fromSecondsAgo(0L);
      assertEquals(1392409281320L, interval0.getFromTime());
      assertEquals((-235L), interval0.getUntilTime());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastYears(634L);
      assertNotNull(interval_Builder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      String string0 = interval0.toString();
      assertEquals("Interval{fromTime=1, untilTime=1}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Granularity granularity0 = Granularity.ONE_DAY;
      Interval.Builder interval_Builder0 = Interval.ofLast(granularity0);
      assertNotNull(interval_Builder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastWeeks((-1L));
      Interval interval0 = interval_Builder0.fromWeeksAgo((-1L));
      long long0 = interval0.getFromTime();
      assertEquals(1393618881320L, long0);
      assertEquals(1393014081320L, interval0.getUntilTime());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastDays(0L);
      Interval interval0 = interval_Builder0.fromDaysAgo(0L);
      assertEquals(1392409281320L, interval0.getUntilTime());
      assertEquals(1392409281320L, interval0.getFromTime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastDays(0L);
      Interval interval0 = interval_Builder0.fromYearsAgo(2345L);
      long long0 = interval0.getUntilTime();
      assertEquals((-72608643158680L), long0);
      assertEquals((-72608643158680L), interval0.getFromTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      Interval.Builder interval_Builder0 = Interval.ofLast((-1616L), chronoUnit0);
      Interval interval0 = interval_Builder0.fromNowTruncatedTo(chronoUnit0);
      assertEquals(52384568832000L, interval0.getFromTime());
      assertEquals(1388534400000L, interval0.getUntilTime());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastHours(0L);
      Interval interval0 = interval_Builder0.fromMonthsAgo(1L);
      assertEquals(1389779535320L, interval0.getUntilTime());
      assertEquals(1389779535320L, interval0.getFromTime());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastHours(0L);
      Interval interval0 = interval_Builder0.fromNow();
      assertEquals(1392409281320L, interval0.getUntilTime());
      assertEquals(1392409281320L, interval0.getFromTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Interval.Builder interval_Builder0 = Interval.ofLastWeeks((-1L));
      Interval interval0 = interval_Builder0.fromHoursAgo((-1L));
      assertEquals(1393017681320L, interval0.getFromTime());
      assertEquals(1392412881320L, interval0.getUntilTime());
  }
}
