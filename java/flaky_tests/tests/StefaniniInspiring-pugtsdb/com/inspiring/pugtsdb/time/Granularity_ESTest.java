/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:32:22 GMT 2022
 */

package com.inspiring.pugtsdb.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.time.Granularity;
import java.time.temporal.ChronoUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Granularity_ESTest extends Granularity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Granularity granularity0 = Granularity.fromString("1d");
      assertEquals(Granularity.ONE_DAY, granularity0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Granularity[] granularityArray0 = Granularity.values();
      assertEquals(7, granularityArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Granularity granularity0 = Granularity.valueOf("ONE_SECOND");
      assertEquals(Granularity.ONE_SECOND, granularity0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      Granularity granularity0 = Granularity.valueOf(1L, chronoUnit0);
      assertEquals(1L, granularity0.getValue());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      // Undeclared exception!
      try { 
        Granularity.valueOf(1L, chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No granularity found with value 1 and unit Millis
         //
         verifyException("com.inspiring.pugtsdb.time.Granularity", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Granularity granularity0 = Granularity.fromString("30s");
      assertEquals(Granularity.HALF_MINUTE, granularity0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Granularity granularity0 = Granularity.fromString("ONE_SECOND");
      assertEquals(1L, granularity0.getValue());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Granularity granularity0 = Granularity.ONE_DAY;
      ChronoUnit chronoUnit0 = granularity0.getUnit();
      assertEquals(ChronoUnit.DAYS, chronoUnit0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Granularity granularity0 = Granularity.ONE_DAY;
      String string0 = granularity0.toString();
      assertEquals("1d", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Granularity granularity0 = Granularity.ONE_DAY;
      long long0 = granularity0.getValue();
      assertEquals(1L, long0);
  }
}
