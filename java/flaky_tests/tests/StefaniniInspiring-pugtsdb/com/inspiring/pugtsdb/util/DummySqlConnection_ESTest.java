/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:53:44 GMT 2022
 */

package com.inspiring.pugtsdb.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.inspiring.pugtsdb.util.DummySqlConnection;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DummySqlConnection_ESTest extends DummySqlConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Struct struct0 = dummySqlConnection0.createStruct("sum", (Object[]) null);
      assertNull(struct0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Statement statement0 = dummySqlConnection0.createStatement(3, 3);
      assertNull(statement0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      int int0 = dummySqlConnection0.getNetworkTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.clearWarnings();
      assertNull(dummySqlConnection0.getSchema());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Object[] objectArray0 = new Object[0];
      Array array0 = dummySqlConnection0.createArrayOf("8YhKO,@Y!=I5nj", objectArray0);
      assertNull(array0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      SQLWarning sQLWarning0 = dummySqlConnection0.getWarnings();
      assertNull(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Clob clob0 = dummySqlConnection0.createClob();
      assertNull(clob0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.setHoldability((-1327));
      assertNull(dummySqlConnection0.getSchema());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.setClientInfo((String) null, (String) null);
      assertNull(dummySqlConnection0.getCatalog());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.setSchema("cxQr| xr(>3U4t<");
      assertFalse(dummySqlConnection0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      int int0 = dummySqlConnection0.getHoldability();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Class<Object> class0 = Object.class;
      Object object0 = dummySqlConnection0.unwrap(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PreparedStatement preparedStatement0 = dummySqlConnection0.prepareStatement("com.inspiring.pugtsdb.rollup.aggregation.StringSumAggregation", 771);
      assertNull(preparedStatement0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.setTransactionIsolation(234);
      assertFalse(dummySqlConnection0.getAutoCommit());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      String[] stringArray0 = new String[3];
      PreparedStatement preparedStatement0 = dummySqlConnection0.prepareStatement((String) null, stringArray0);
      assertNull(preparedStatement0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.close();
      assertEquals(0, dummySqlConnection0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Properties properties0 = dummySqlConnection0.getClientInfo();
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Savepoint savepoint0 = dummySqlConnection0.setSavepoint();
      assertNull(savepoint0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.commit();
      assertNull(dummySqlConnection0.getSchema());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      boolean boolean0 = dummySqlConnection0.isValid((-1893));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      String string0 = dummySqlConnection0.getCatalog();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      NClob nClob0 = dummySqlConnection0.createNClob();
      assertNull(nClob0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Class<Object> class0 = Object.class;
      boolean boolean0 = dummySqlConnection0.isWrapperFor(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      int int0 = dummySqlConnection0.getTransactionIsolation();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Statement statement0 = dummySqlConnection0.createStatement();
      assertNull(statement0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      boolean boolean0 = dummySqlConnection0.isReadOnly();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      String string0 = dummySqlConnection0.getClientInfo("com.inspiring.pugtsdb.rollup.aggregation.StringSumAggregation");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      SQLXML sQLXML0 = dummySqlConnection0.createSQLXML();
      assertNull(sQLXML0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      CallableStatement callableStatement0 = dummySqlConnection0.prepareCall("b@", 0, 0);
      assertNull(callableStatement0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PreparedStatement preparedStatement0 = dummySqlConnection0.prepareStatement("18WM{(e6+>", (int[]) null);
      assertNull(preparedStatement0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      CallableStatement callableStatement0 = dummySqlConnection0.prepareCall("nVNm%O=", (-446), (-446), (-446));
      assertNull(callableStatement0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.releaseSavepoint((Savepoint) null);
      assertEquals(0, dummySqlConnection0.getHoldability());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.setClientInfo((Properties) null);
      assertNull(dummySqlConnection0.getSchema());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      DatabaseMetaData databaseMetaData0 = dummySqlConnection0.getMetaData();
      assertNull(databaseMetaData0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PreparedStatement preparedStatement0 = dummySqlConnection0.prepareStatement("_J@cR,Ve#6-");
      assertNull(preparedStatement0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PreparedStatement preparedStatement0 = dummySqlConnection0.prepareStatement("", 0, 0, 0);
      assertNull(preparedStatement0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.setAutoCommit(true);
      assertEquals(0, dummySqlConnection0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      boolean boolean0 = dummySqlConnection0.getAutoCommit();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Map<String, Class<?>> map0 = dummySqlConnection0.getTypeMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      dummySqlConnection0.abort(forkJoinPool0);
      assertEquals(0, dummySqlConnection0.getHoldability());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      String string0 = dummySqlConnection0.getSchema();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.rollback();
      assertFalse(dummySqlConnection0.getAutoCommit());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Blob blob0 = dummySqlConnection0.createBlob();
      assertNull(blob0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Statement statement0 = dummySqlConnection0.createStatement((-1), (-1), (-1));
      assertNull(statement0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      boolean boolean0 = dummySqlConnection0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      Savepoint savepoint0 = dummySqlConnection0.setSavepoint("WbXE+Q}3zB");
      assertNull(savepoint0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.rollback((Savepoint) null);
      assertEquals(0, dummySqlConnection0.getTransactionIsolation());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      CallableStatement callableStatement0 = dummySqlConnection0.prepareCall("U1W");
      assertNull(callableStatement0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      PreparedStatement preparedStatement0 = dummySqlConnection0.prepareStatement("com.inspiring.pugtsdb.util.DummySqlConnection", 0, 0);
      assertNull(preparedStatement0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.setCatalog("1UP.P");
      assertFalse(dummySqlConnection0.getAutoCommit());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2297, threadPoolExecutor_DiscardPolicy0);
      dummySqlConnection0.setNetworkTimeout(scheduledThreadPoolExecutor0, 2297);
      assertFalse(dummySqlConnection0.getAutoCommit());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      dummySqlConnection0.setReadOnly(false);
      assertFalse(dummySqlConnection0.isClosed());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DummySqlConnection dummySqlConnection0 = new DummySqlConnection();
      String string0 = dummySqlConnection0.nativeSQL("");
      assertNull(string0);
  }
}
