/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:03:01 GMT 2022
 */

package com.inspiring.pugtsdb.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.util.Temporals;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Temporals_ESTest extends Temporals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      long long0 = Temporals.truncate((-1L), chronoUnit0);
      assertEquals((-2678400000L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      long long0 = Temporals.truncate(3091L, chronoUnit0);
      assertEquals(3000L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      long long0 = Temporals.truncate((-1L), chronoUnit0);
      assertEquals((-1000L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        Temporals.truncate(0L, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Invalid unit for truncation: Forever
         //
         verifyException("com.inspiring.pugtsdb.util.Temporals", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Temporals.truncate(308L, (ChronoUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.util.Temporals", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      long long0 = Temporals.truncate(instant0, chronoUnit0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      ZonedDateTime zonedDateTime1 = Temporals.truncate(zonedDateTime0, chronoUnit0);
      assertFalse(zonedDateTime1.equals((Object)zonedDateTime0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      ZonedDateTime zonedDateTime1 = Temporals.truncate(zonedDateTime0, chronoUnit0);
      assertFalse(zonedDateTime1.equals((Object)zonedDateTime0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      ZonedDateTime zonedDateTime1 = Temporals.truncate(zonedDateTime0, chronoUnit0);
      assertFalse(zonedDateTime1.equals((Object)zonedDateTime0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      ZonedDateTime zonedDateTime1 = Temporals.truncate(zonedDateTime0, chronoUnit0);
      assertNotSame(zonedDateTime0, zonedDateTime1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      // Undeclared exception!
      try { 
        Temporals.truncate((ZonedDateTime) null, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.util.Temporals", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      ZonedDateTime zonedDateTime1 = Temporals.truncate(zonedDateTime0, chronoUnit0);
      assertFalse(zonedDateTime1.equals((Object)zonedDateTime0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      ZonedDateTime zonedDateTime1 = Temporals.truncate(zonedDateTime0, chronoUnit0);
      assertFalse(zonedDateTime1.equals((Object)zonedDateTime0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      ZonedDateTime zonedDateTime1 = Temporals.truncate(zonedDateTime0, chronoUnit0);
      assertTrue(zonedDateTime1.equals((Object)zonedDateTime0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      ZonedDateTime zonedDateTime1 = Temporals.truncate(zonedDateTime0, chronoUnit0);
      assertNotSame(zonedDateTime0, zonedDateTime1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      // Undeclared exception!
      try { 
        Temporals.truncate(zonedDateTime0, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Invalid unit for truncation: Millennia
         //
         verifyException("com.inspiring.pugtsdb.util.Temporals", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;
      ZonedDateTime zonedDateTime1 = Temporals.truncate(zonedDateTime0, chronoUnit0);
      assertTrue(zonedDateTime1.equals((Object)zonedDateTime0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      // Undeclared exception!
      try { 
        Temporals.truncate((Instant) null, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Invalid unit for truncation: Eras
         //
         verifyException("com.inspiring.pugtsdb.util.Temporals", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-2080L), (-2080L));
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      long long0 = Temporals.truncate(instant0, chronoUnit0);
      assertEquals((-31536000000L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      // Undeclared exception!
      try { 
        Temporals.truncate((Instant) null, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      long long0 = Temporals.truncate(instant0, chronoUnit0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      long long0 = Temporals.truncate(instant0, chronoUnit0);
      assertEquals(1392408000000L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      // Undeclared exception!
      try { 
        Temporals.truncate((Instant) null, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      // Undeclared exception!
      try { 
        Temporals.truncate((Instant) null, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      // Undeclared exception!
      try { 
        Temporals.truncate((Instant) null, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      long long0 = Temporals.truncate(instant0, chronoUnit0);
      assertEquals(1392409281000L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;
      // Undeclared exception!
      try { 
        Temporals.truncate((Instant) null, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Temporals temporals0 = new Temporals();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      long long0 = Temporals.truncate(308L, chronoUnit0);
      assertEquals(0L, long0);
  }
}
