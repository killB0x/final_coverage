/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:28:17 GMT 2022
 */

package com.inspiring.pugtsdb.rollup.schedule;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.repository.Repositories;
import com.inspiring.pugtsdb.repository.h2.H2Repositories;
import com.inspiring.pugtsdb.rollup.schedule.ScheduledPointPurger;
import com.inspiring.pugtsdb.sql.PugConnection;
import com.inspiring.pugtsdb.time.Retention;
import java.time.temporal.ChronoUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScheduledPointPurger_ESTest extends ScheduledPointPurger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      H2Repositories h2Repositories0 = new H2Repositories();
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      Retention retention0 = Retention.of(1L, chronoUnit0);
      ChronoUnit chronoUnit1 = ChronoUnit.DAYS;
      Retention retention1 = new Retention(1L, chronoUnit1);
      ScheduledPointPurger scheduledPointPurger0 = new ScheduledPointPurger(h2Repositories0, retention0, retention1);
      // Undeclared exception!
      try { 
        scheduledPointPurger0.run();
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Invalid unit for truncation: Weeks
         //
         verifyException("com.inspiring.pugtsdb.util.Temporals", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ScheduledPointPurger scheduledPointPurger0 = null;
      try {
        scheduledPointPurger0 = new ScheduledPointPurger((Repositories) null, (Retention) null, (Retention) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.schedule.ScheduledPointPurger", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      H2Repositories h2Repositories0 = new H2Repositories();
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      h2Repositories0.setConnectionSupplier(supplier0);
      Supplier<PugConnection> supplier1 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      h2Repositories0.setConnectionSupplier(supplier1);
      Supplier<PugConnection> supplier2 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      h2Repositories0.setConnectionSupplier(supplier2);
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      Supplier<PugConnection> supplier3 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier3).get();
      h2Repositories0.setConnectionSupplier(supplier3);
      Retention retention0 = new Retention(30L, chronoUnit0);
      Retention retention1 = Retention.of(2447L, chronoUnit0);
      retention0.get(chronoUnit0);
      retention1.getUnits();
      ScheduledPointPurger scheduledPointPurger0 = new ScheduledPointPurger(h2Repositories0, retention0, retention1);
      scheduledPointPurger0.close();
      scheduledPointPurger0.run();
      Supplier<PugConnection> supplier4 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(supplier4).get();
      h2Repositories0.setConnectionSupplier(supplier4);
      scheduledPointPurger0.run();
      scheduledPointPurger0.run();
      scheduledPointPurger0.run();
      scheduledPointPurger0.close();
      scheduledPointPurger0.run();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      H2Repositories h2Repositories0 = new H2Repositories();
      ScheduledPointPurger scheduledPointPurger0 = new ScheduledPointPurger(h2Repositories0, (Retention) null, (Retention) null);
      scheduledPointPurger0.close();
      // Undeclared exception!
      try { 
        scheduledPointPurger0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.schedule.ScheduledPointPurger", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      H2Repositories h2Repositories0 = new H2Repositories();
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      Retention retention0 = new Retention(0L, chronoUnit0);
      ScheduledPointPurger scheduledPointPurger0 = new ScheduledPointPurger(h2Repositories0, retention0, retention0);
      scheduledPointPurger0.run();
      scheduledPointPurger0.run();
      scheduledPointPurger0.close();
  }
}
