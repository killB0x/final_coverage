/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:10:29 GMT 2022
 */

package com.inspiring.pugtsdb.rollup.schedule;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.repository.h2.H2Repositories;
import com.inspiring.pugtsdb.rollup.aggregation.Aggregation;
import com.inspiring.pugtsdb.rollup.listen.RollUpListener;
import com.inspiring.pugtsdb.rollup.schedule.RollUpScheduler;
import com.inspiring.pugtsdb.sql.PugConnection;
import com.inspiring.pugtsdb.time.Granularity;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.function.Supplier;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RollUpScheduler_ESTest extends RollUpScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("").when(resultSet0).getString(anyString());
      doReturn(true, false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      PugConnection pugConnection0 = mock(PugConnection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(pugConnection0).createStatement();
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0, (Object) null).when(supplier0).get();
      H2Repositories h2Repositories0 = new H2Repositories(supplier0);
      RollUpScheduler rollUpScheduler0 = new RollUpScheduler(h2Repositories0);
      Aggregation<Pattern> aggregation0 = (Aggregation<Pattern>) mock(Aggregation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(aggregation0).getName();
      // Undeclared exception!
      try { 
        rollUpScheduler0.registerRollUps("", aggregation0, (Granularity[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.repository.h2.PointH2Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      H2Repositories h2Repositories0 = new H2Repositories();
      RollUpScheduler rollUpScheduler0 = new RollUpScheduler(h2Repositories0);
      rollUpScheduler0.close();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      H2Repositories h2Repositories0 = new H2Repositories();
      RollUpScheduler rollUpScheduler0 = new RollUpScheduler(h2Repositories0);
      Granularity granularity0 = Granularity.ONE_MONTH;
      RollUpListener rollUpListener0 = rollUpScheduler0.removeRollUpListener(",DmwCp:", "", granularity0);
      assertNull(rollUpListener0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      H2Repositories h2Repositories0 = new H2Repositories();
      RollUpScheduler rollUpScheduler0 = new RollUpScheduler(h2Repositories0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      PugConnection pugConnection0 = mock(PugConnection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(pugConnection0).createStatement();
      Supplier<PugConnection> supplier0 = (Supplier<PugConnection>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pugConnection0).when(supplier0).get();
      h2Repositories0.setConnectionSupplier(supplier0);
      Granularity[] granularityArray0 = new Granularity[0];
      rollUpScheduler0.registerRollUps("?GC?US@'dz$< s?kfu,", (Aggregation<?>) null, granularityArray0);
      assertEquals(0, granularityArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      H2Repositories h2Repositories0 = new H2Repositories();
      RollUpScheduler rollUpScheduler0 = new RollUpScheduler(h2Repositories0);
      Granularity[] granularityArray0 = new Granularity[3];
      // Undeclared exception!
      try { 
        rollUpScheduler0.registerRollUps("com.inspiring.pugtsdb.rollup.schedule.RollUpScheduler", (Aggregation<?>) null, granularityArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.RollUp", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      H2Repositories h2Repositories0 = new H2Repositories();
      RollUpScheduler rollUpScheduler0 = new RollUpScheduler(h2Repositories0);
      Granularity granularity0 = Granularity.ONE_MONTH;
      rollUpScheduler0.addRollUpListener("com.inspiring.pugtsdb.rollup.schedule.RollUpScheduler", "?GC?US@'dz$< s?k&fu,", granularity0, (RollUpListener) null);
  }
}
