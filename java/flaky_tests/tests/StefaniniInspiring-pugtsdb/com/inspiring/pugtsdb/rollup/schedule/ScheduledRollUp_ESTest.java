/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:48:06 GMT 2022
 */

package com.inspiring.pugtsdb.rollup.schedule;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.rollup.RollUp;
import com.inspiring.pugtsdb.rollup.schedule.ScheduledRollUp;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScheduledRollUp_ESTest extends ScheduledRollUp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(scheduledFuture0).isDone();
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp0 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, scheduledFuture0);
      boolean boolean0 = scheduledRollUp0.isDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(scheduledFuture0).isCancelled();
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp0 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, scheduledFuture0);
      boolean boolean0 = scheduledRollUp0.isCancelled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp0 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, scheduledFuture0);
      RollUp<ScheduledRollUp<Object>> rollUp0 = scheduledRollUp0.getRollUp();
      assertNull(rollUp0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(scheduledFuture0).getDelay(any(java.util.concurrent.TimeUnit.class));
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, scheduledFuture0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      long long0 = scheduledRollUp0.getDelay(timeUnit0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-1175)).when(scheduledFuture0).getDelay(any(java.util.concurrent.TimeUnit.class));
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, scheduledFuture0);
      long long0 = scheduledRollUp0.getDelay(timeUnit0);
      assertEquals((-1175L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(scheduledFuture0).get(anyLong() , any(java.util.concurrent.TimeUnit.class));
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp0 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, scheduledFuture0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Object object1 = scheduledRollUp0.get(312L, timeUnit0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(scheduledFuture0).get();
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp0 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, scheduledFuture0);
      Object object1 = scheduledRollUp0.get();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(scheduledFuture0).compareTo(any(java.util.concurrent.Delayed.class));
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, scheduledFuture0);
      int int0 = scheduledRollUp0.compareTo((Delayed) scheduledRollUp0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(1354).when(scheduledFuture0).compareTo(any(java.util.concurrent.Delayed.class));
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, scheduledFuture0);
      int int0 = scheduledRollUp0.compareTo((Delayed) scheduledRollUp0);
      assertEquals(1354, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn((-1175)).when(scheduledFuture0).compareTo(any(java.util.concurrent.Delayed.class));
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, scheduledFuture0);
      int int0 = scheduledRollUp0.compareTo((Delayed) scheduledRollUp0);
      assertEquals((-1175), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(scheduledFuture0).cancel(anyBoolean());
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp0 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, scheduledFuture0);
      scheduledRollUp0.cancel(true);
      boolean boolean0 = scheduledRollUp0.cancel(false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, (ScheduledFuture<?>) null);
      // Undeclared exception!
      try { 
        scheduledRollUp0.isDone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.schedule.ScheduledRollUp", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, (ScheduledFuture<?>) null);
      // Undeclared exception!
      try { 
        scheduledRollUp0.isCancelled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.schedule.ScheduledRollUp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp0 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, (ScheduledFuture<?>) null);
      // Undeclared exception!
      try { 
        scheduledRollUp0.getDelay(timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.schedule.ScheduledRollUp", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, (ScheduledFuture<?>) null);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        scheduledRollUp0.get((-1369L), timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.schedule.ScheduledRollUp", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, (ScheduledFuture<?>) null);
      // Undeclared exception!
      try { 
        scheduledRollUp0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.schedule.ScheduledRollUp", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, (ScheduledFuture<?>) null);
      // Undeclared exception!
      try { 
        scheduledRollUp0.cancel(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.schedule.ScheduledRollUp", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RollUp<Object> rollUp0 = (RollUp<Object>) mock(RollUp.class, new ViolatedAssumptionAnswer());
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scheduledFuture0).get();
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>(rollUp0, scheduledFuture0);
      Object object0 = scheduledRollUp0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RollUp<Object> rollUp0 = (RollUp<Object>) mock(RollUp.class, new ViolatedAssumptionAnswer());
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(scheduledFuture0).isDone();
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>(rollUp0, scheduledFuture0);
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp1 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, scheduledRollUp0);
      boolean boolean0 = scheduledRollUp1.isDone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RollUp<Object> rollUp0 = (RollUp<Object>) mock(RollUp.class, new ViolatedAssumptionAnswer());
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scheduledFuture0).get(anyLong() , any(java.util.concurrent.TimeUnit.class));
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>(rollUp0, scheduledFuture0);
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp1 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, scheduledRollUp0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = scheduledRollUp1.get(719L, timeUnit0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(scheduledFuture0).getDelay(any(java.util.concurrent.TimeUnit.class));
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, scheduledFuture0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      long long0 = scheduledRollUp0.getDelay(timeUnit0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>((RollUp<Object>) null, (ScheduledFuture<?>) null);
      // Undeclared exception!
      try { 
        scheduledRollUp0.compareTo((Delayed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.rollup.schedule.ScheduledRollUp", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RollUp<Object> rollUp0 = (RollUp<Object>) mock(RollUp.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(rollUp0).toString();
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>(rollUp0, scheduledFuture0);
      RollUp<Object> rollUp1 = scheduledRollUp0.getRollUp();
      assertNull(rollUp1.getTargetGranularity());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RollUp<Object> rollUp0 = (RollUp<Object>) mock(RollUp.class, new ViolatedAssumptionAnswer());
      ScheduledFuture<Object> scheduledFuture0 = (ScheduledFuture<Object>) mock(ScheduledFuture.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(scheduledFuture0).isCancelled();
      ScheduledRollUp<Object> scheduledRollUp0 = new ScheduledRollUp<Object>(rollUp0, scheduledFuture0);
      ScheduledRollUp<ScheduledRollUp<Object>> scheduledRollUp1 = new ScheduledRollUp<ScheduledRollUp<Object>>((RollUp<ScheduledRollUp<Object>>) null, scheduledRollUp0);
      boolean boolean0 = scheduledRollUp1.isCancelled();
      assertFalse(boolean0);
  }
}
