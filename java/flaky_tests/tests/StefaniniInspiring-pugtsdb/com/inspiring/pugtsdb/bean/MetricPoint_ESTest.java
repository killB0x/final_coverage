/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:39:49 GMT 2022
 */

package com.inspiring.pugtsdb.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.inspiring.pugtsdb.bean.MetricPoint;
import com.inspiring.pugtsdb.bean.Point;
import com.inspiring.pugtsdb.metric.Metric;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MetricPoint_ESTest extends MetricPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Metric<Integer> metric0 = (Metric<Integer>) mock(Metric.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(13);
      Point<Integer> point0 = new Point<Integer>(0L, integer0);
      MetricPoint<Integer> metricPoint0 = new MetricPoint<Integer>(metric0, point0);
      Point<Integer> point1 = metricPoint0.getPoint();
      assertEquals(0L, point1.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Metric<Object> metric0 = (Metric<Object>) mock(Metric.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metric0).toString();
      Object object0 = new Object();
      Point<Object> point0 = Point.of(624L, object0);
      MetricPoint<Object> metricPoint0 = MetricPoint.of(metric0, point0);
      Point<Object> point1 = metricPoint0.getPoint();
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Metric<Object> metric0 = (Metric<Object>) mock(Metric.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(metric0).toString();
      Object object0 = new Object();
      Point<Object> point0 = Point.of(624L, object0);
      MetricPoint<Object> metricPoint0 = MetricPoint.of(metric0, point0);
      Metric<Object> metric1 = metricPoint0.getMetric();
      Point<Integer> point1 = new Point<Integer>((-2742L), (Integer) metric1.ID_LENGTH);
      MetricPoint<Integer> metricPoint1 = MetricPoint.of((Metric<Integer>) null, point1);
      Point<Integer> point2 = metricPoint1.getPoint();
      assertSame(point2, point1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MetricPoint<Object> metricPoint0 = new MetricPoint<Object>((Metric<Object>) null, (Point<Object>) null);
      Point<Object> point0 = metricPoint0.getPoint();
      assertNull(point0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MetricPoint<Object> metricPoint0 = new MetricPoint<Object>((Metric<Object>) null, (Point<Object>) null);
      Metric<Object> metric0 = metricPoint0.getMetric();
      assertNull(metric0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MetricPoint<Integer> metricPoint0 = new MetricPoint<Integer>((Metric<Integer>) null, (Point<Integer>) null);
      String string0 = metricPoint0.toString();
      assertEquals("MetricPoint{metric=null, point=null}", string0);
  }
}
