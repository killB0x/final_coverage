/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:55:17 GMT 2022
 */

package com.inspiring.pugtsdb.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.inspiring.pugtsdb.bean.MetricPoints;
import com.inspiring.pugtsdb.metric.LongMetric;
import com.inspiring.pugtsdb.metric.Metric;
import com.inspiring.pugtsdb.metric.StringMetric;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MetricPoints_ESTest extends MetricPoints_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MetricPoints<Object> metricPoints0 = new MetricPoints<Object>((Metric<Object>) null);
      metricPoints0.put("MetricPoints{metric=null, points={}}", (-3184L), (Object) "MetricPoints{metric=null, points={}}");
      Map<String, Map<Long, Object>> map0 = metricPoints0.getPoints();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Metric<HashMap<String, Object>> metric0 = (Metric<HashMap<String, Object>>) mock(Metric.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metric0).toString();
      MetricPoints<HashMap<String, Object>> metricPoints0 = new MetricPoints<HashMap<String, Object>>(metric0);
      Metric<HashMap<String, Object>> metric1 = metricPoints0.getMetric();
      assertNull(metric1.getId());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MetricPoints<Object> metricPoints0 = new MetricPoints<Object>((Metric<Object>) null);
      // Undeclared exception!
      try { 
        metricPoints0.put("iKVi?", 1597L, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.inspiring.pugtsdb.bean.MetricPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LongMetric longMetric0 = new LongMetric("(nHNV/a-Et=nP;{2", hashMap0);
      MetricPoints<Long> metricPoints0 = new MetricPoints<Long>(longMetric0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        metricPoints0.put("(nHNV/a-Et=nP;{2", (long) 13, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot convert bytes [] to Long: Expected a length of 8, got 0
         //
         verifyException("com.inspiring.pugtsdb.util.Bytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringMetric stringMetric0 = new StringMetric("8U1", hashMap0);
      MetricPoints<String> metricPoints0 = new MetricPoints<String>(stringMetric0);
      metricPoints0.put("8U1", (long) 13, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Metric<HashMap<String, Object>> metric0 = (Metric<HashMap<String, Object>>) mock(Metric.class, new ViolatedAssumptionAnswer());
      MetricPoints<HashMap<String, Object>> metricPoints0 = new MetricPoints<HashMap<String, Object>>(metric0);
      Map<String, Map<Long, HashMap<String, Object>>> map0 = metricPoints0.getPoints();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MetricPoints<Object> metricPoints0 = new MetricPoints<Object>((Metric<Object>) null);
      String string0 = metricPoints0.toString();
      assertEquals("MetricPoints{metric=null, points={}}", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MetricPoints<Object> metricPoints0 = new MetricPoints<Object>((Metric<Object>) null);
      Metric<Object> metric0 = metricPoints0.getMetric();
      assertNull(metric0);
  }
}
