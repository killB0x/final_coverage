/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:45:28 GMT 2022
 */

package org.chiknrice.iso.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.chiknrice.iso.util.Hex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Hex_ESTest extends Hex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.decode("K]&Au<B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid hex char <
         //
         verifyException("org.chiknrice.iso.util.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      String string0 = Hex.encode(byteArray0);
      assertEquals("5A00000000", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = Hex.value('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = Hex.value('F');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.util.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = Hex.decode("0123456789ABCDEF");
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)35, (byte)69, (byte)103, (byte) (-119), (byte) (-85), (byte) (-51), (byte) (-17)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = Hex.decode((String) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = Hex.decode("");
      String string0 = Hex.encode(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int int0 = Hex.value('x');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Hex hex0 = new Hex();
  }
}
