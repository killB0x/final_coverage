/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:38:25 GMT 2022
 */

package org.chiknrice.iso.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.FormatFlagsConversionMismatchException;
import java.util.MissingFormatWidthException;
import org.chiknrice.iso.codec.AlphaCodec;
import org.chiknrice.iso.config.ComponentDef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AlphaCodec_ESTest extends AlphaCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = Integer.valueOf(46);
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0, boolean0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(46);
      alphaCodec0.encode(byteBuffer0, "}03fEg");
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 3, 0);
      String string0 = alphaCodec0.decode(byteBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(1);
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0, boolean0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      String string0 = alphaCodec0.decode(byteBuffer0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(275);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        alphaCodec0.encode(byteBuffer1, "");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        alphaCodec0.encode(byteBuffer0, "2fPprck46BfqY+N#");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      // Undeclared exception!
      try { 
        alphaCodec0.encode((ByteBuffer) null, "org.chiknrice.iso.ConfigException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.AlphaCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2838);
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0, boolean0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      // Undeclared exception!
      try { 
        alphaCodec0.decode(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      // Undeclared exception!
      try { 
        alphaCodec0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.AlphaCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2720));
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0, boolean0, integer0);
      // Undeclared exception!
      try { 
        alphaCodec0.decode((ByteBuffer) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2720
         //
         verifyException("org.chiknrice.iso.codec.AlphaCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      AlphaCodec alphaCodec1 = new AlphaCodec(boolean0);
      boolean boolean1 = alphaCodec0.equals(alphaCodec1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = Integer.valueOf(46);
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0, boolean0, integer0);
      boolean boolean1 = alphaCodec0.equals(alphaCodec0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = Integer.valueOf(46);
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0, boolean0, integer0);
      boolean boolean1 = alphaCodec0.equals((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      boolean boolean1 = alphaCodec0.equals(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.TRUE;
      Integer integer0 = new Integer(0);
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0, boolean1, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        alphaCodec0.encode(byteBuffer0, "");
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-0s
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-773));
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0, boolean0, integer0);
      // Undeclared exception!
      try { 
        alphaCodec0.encode((ByteBuffer) null, "nll;~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Length of value (nll;~) exceeds allowed length (-773)
         //
         verifyException("org.chiknrice.iso.codec.AlphaCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0, boolean0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2144);
      // Undeclared exception!
      try { 
        alphaCodec0.encode(byteBuffer0, "");
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = s, Flags = 0
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(275);
      String string0 = alphaCodec0.decode(byteBuffer0);
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1781);
      AlphaCodec alphaCodec0 = null;
      try {
        alphaCodec0 = new AlphaCodec((Boolean) null, (Boolean) null, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Fixed length config requires justified flag
         //
         verifyException("org.chiknrice.iso.codec.AlphaCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      alphaCodec0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AlphaCodec alphaCodec0 = new AlphaCodec(boolean0);
      ComponentDef.Encoding componentDef_Encoding0 = alphaCodec0.getEncoding();
      assertEquals(ComponentDef.Encoding.CHAR, componentDef_Encoding0);
  }
}
