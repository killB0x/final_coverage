/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:41:11 GMT 2022
 */

package org.chiknrice.iso.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.TimeZone;
import org.chiknrice.iso.codec.DateTimeCodec;
import org.chiknrice.iso.config.ComponentDef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeCodec_ESTest extends DateTimeCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("", timeZone0, componentDef_Encoding0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      MockDate mockDate0 = new MockDate((-1), (-458), (-1465));
      dateTimeCodec0.encode(byteBuffer0, (Date) mockDate0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("S", timeZone0, componentDef_Encoding0);
      Date date0 = dateTimeCodec0.decode(byteBuffer0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("-", timeZone0, componentDef_Encoding0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(17);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        dateTimeCodec0.encode(byteBuffer0, (Date) mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid numeric value [-]
         //
         verifyException("org.chiknrice.iso.util.Bcd", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("9=E", timeZone0, componentDef_Encoding0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        dateTimeCodec0.encode(byteBuffer0, (Date) mockDate0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec(",~#=HkG'3h1jz&GR`&Y", (TimeZone) null, componentDef_Encoding0);
      // Undeclared exception!
      try { 
        dateTimeCodec0.encode((ByteBuffer) null, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("org.chiknrice.iso.codec.DateTimeCodec$1", (TimeZone) null, componentDef_Encoding0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      // Undeclared exception!
      try { 
        dateTimeCodec0.decode(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("|nORf~@mU5Q~M@IB7", (TimeZone) null, componentDef_Encoding0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("|nORf~@mU5Q~M@IB7");
      // Undeclared exception!
      try { 
        dateTimeCodec0.decode(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeCodec dateTimeCodec0 = null;
      try {
        dateTimeCodec0 = new DateTimeCodec("xiOO #gO*}bOq]`E", (TimeZone) null, (ComponentDef.Encoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.DateTimeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.chiknrice.iso.config.ComponentDef");
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("org.chiknrice.iso.config.ComponentDef", timeZone0, componentDef_Encoding0);
      Object object0 = new Object();
      boolean boolean0 = dateTimeCodec0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("org.chiknrice.iso.codec.DateTimeCodec", (TimeZone) null, componentDef_Encoding0);
      DateTimeCodec dateTimeCodec1 = new DateTimeCodec("org.chiknrice.iso.codec.DateTimeCodec", (TimeZone) null, componentDef_Encoding0);
      boolean boolean0 = dateTimeCodec0.equals(dateTimeCodec1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("", (TimeZone) null, componentDef_Encoding0);
      boolean boolean0 = dateTimeCodec0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("", (TimeZone) null, componentDef_Encoding0);
      boolean boolean0 = dateTimeCodec0.equals(dateTimeCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("", timeZone0, componentDef_Encoding0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        dateTimeCodec0.encode((ByteBuffer) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.DateTimeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("-y", (TimeZone) null, componentDef_Encoding0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("-y");
      // Undeclared exception!
      try { 
        dateTimeCodec0.decode(byteBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unparseable date: \"-y\"
         //
         verifyException("org.chiknrice.iso.codec.DateTimeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec(".fdt\"Npej$*)-CUNu3", (TimeZone) null, componentDef_Encoding0);
      // Undeclared exception!
      try { 
        dateTimeCodec0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.DateTimeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      DateTimeCodec dateTimeCodec0 = null;
      try {
        dateTimeCodec0 = new DateTimeCodec("Zmc+1'q!\"x?(c>", (TimeZone) null, componentDef_Encoding0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported encoding BINARY
         //
         verifyException("org.chiknrice.iso.codec.DateTimeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("", timeZone0, componentDef_Encoding0);
      ComponentDef.Encoding componentDef_Encoding1 = dateTimeCodec0.getEncoding();
      assertSame(componentDef_Encoding1, componentDef_Encoding0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      DateTimeCodec dateTimeCodec0 = new DateTimeCodec("org.chiknrice.iso.codec.DateTimeCodec", (TimeZone) null, componentDef_Encoding0);
      dateTimeCodec0.hashCode();
  }
}
