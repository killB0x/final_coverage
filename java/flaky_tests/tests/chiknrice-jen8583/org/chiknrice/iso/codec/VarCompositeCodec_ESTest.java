/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:35:03 GMT 2022
 */

package org.chiknrice.iso.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import java.util.TreeMap;
import org.chiknrice.iso.codec.BitmapCodec;
import org.chiknrice.iso.codec.Codec;
import org.chiknrice.iso.codec.CustomCodec;
import org.chiknrice.iso.codec.CustomCodecAdapter;
import org.chiknrice.iso.codec.NumericCodec;
import org.chiknrice.iso.codec.VarCodec;
import org.chiknrice.iso.codec.VarCompositeCodec;
import org.chiknrice.iso.config.ComponentDef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VarCompositeCodec_ESTest extends VarCompositeCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, true);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1193);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1193);
      treeMap0.put(integer0, (ComponentDef) null);
      Map<Integer, Object> map0 = varCompositeCodec0.decode(byteBuffer0, treeMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      Integer integer0 = Integer.getInteger("Unexpected component(s) to encode %s", 791);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      Codec<Integer> codec0 = (Codec<Integer>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn((ComponentDef.Encoding) null).when(codec0).getEncoding();
      VarCodec<Integer> varCodec0 = new VarCodec<Integer>(numericCodec0, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0, true);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      treeMap0.put(integer0, componentDef0);
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>();
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, true);
      treeMap1.put(integer0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(791);
      varCompositeCodec0.encode(byteBuffer0, treeMap1, treeMap0);
      assertEquals(0, byteBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, false);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TreeMap<Integer, ComponentDef> treeMap1 = new TreeMap<Integer, ComponentDef>();
      // Undeclared exception!
      try { 
        varCompositeCodec0.encode((ByteBuffer) null, treeMap0, treeMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to encode bitmap for org.chiknrice.iso.codec.VarCompositeCodec@2
         //
         verifyException("org.chiknrice.iso.codec.VarCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.BINARY;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, true);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode(byteBuffer0, (SortedMap<Integer, ComponentDef>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to decode bitmap
         //
         verifyException("org.chiknrice.iso.codec.VarCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, false);
      // Undeclared exception!
      try { 
        varCompositeCodec0.encode((ByteBuffer) null, (Map<Integer, Object>) null, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1897);
      CustomCodec<VarCompositeCodec> customCodec0 = (CustomCodec<VarCompositeCodec>) mock(CustomCodec.class, new ViolatedAssumptionAnswer());
      CustomCodecAdapter customCodecAdapter0 = new CustomCodecAdapter(customCodec0, integer0);
      ComponentDef componentDef0 = new ComponentDef(customCodecAdapter0, true);
      treeMap0.put(integer0, componentDef0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, true);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1464);
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(21);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1247);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      VarCodec<ComponentDef> varCodec0 = new VarCodec<ComponentDef>(numericCodec0, (Codec<ComponentDef>) null);
      ComponentDef componentDef0 = new ComponentDef(varCodec0, false);
      treeMap0.put(integer0, componentDef0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, false);
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\u0000\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, false);
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode((ByteBuffer) null, (SortedMap<Integer, ComponentDef>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.VarCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(48);
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode(byteBuffer0, (SortedMap<Integer, ComponentDef>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.VarCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(21);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(21);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, true);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      Integer integer1 = new Integer((-1077));
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer1);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0, true);
      treeMap0.put(integer0, componentDef0);
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -539
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      Integer integer0 = new Integer(3);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      Codec<Integer> codec0 = (Codec<Integer>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn((ComponentDef.Encoding) null).when(codec0).getEncoding();
      VarCodec<Integer> varCodec0 = new VarCodec<Integer>(numericCodec0, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0, false);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      treeMap0.put(integer0, componentDef0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (1100 > 6)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, true);
      varCompositeCodec0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, true);
      Object object0 = new Object();
      boolean boolean0 = varCompositeCodec0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, true);
      VarCompositeCodec varCompositeCodec1 = new VarCompositeCodec(bitmapCodec0, false);
      boolean boolean0 = varCompositeCodec1.equals(varCompositeCodec0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, true);
      boolean boolean0 = varCompositeCodec0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, true);
      boolean boolean0 = varCompositeCodec0.equals(varCompositeCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(21);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(8);
      ComponentDef componentDef0 = new ComponentDef((Codec) null, true);
      treeMap0.put(integer0, componentDef0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, true);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        varCompositeCodec0.encode(byteBuffer0, hashMap0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing mandatory component 
         //
         verifyException("org.chiknrice.iso.codec.VarCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(21);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(21);
      ComponentDef componentDef0 = new ComponentDef((Codec) null, true);
      treeMap0.put(integer0, componentDef0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      varCompositeCodec0.encode(byteBuffer0, hashMap0, treeMap0);
      assertEquals(0, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(743);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(743);
      ComponentDef componentDef0 = new ComponentDef((Codec) null, true);
      treeMap0.put(integer0, componentDef0);
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, true);
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>((SortedMap<Integer, ?>) treeMap0);
      // Undeclared exception!
      try { 
        varCompositeCodec0.encode(byteBuffer0, treeMap1, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to encode 
         //
         verifyException("org.chiknrice.iso.codec.VarCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1882);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, true);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      Integer integer0 = Integer.valueOf(1882);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      VarCodec<VarCompositeCodec> varCodec0 = new VarCodec<VarCompositeCodec>(numericCodec0, (Codec<VarCompositeCodec>) null);
      ComponentDef componentDef0 = new ComponentDef(varCodec0, false);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      treeMap0.put(integer0, componentDef0);
      Map<Integer, Object> map0 = varCompositeCodec0.decode(byteBuffer0, treeMap0);
      varCompositeCodec0.encode(byteBuffer0, map0, treeMap0);
      assertEquals(1878, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=4 lim=1882 cap=1882]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(693);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(693);
      Codec<VarCompositeCodec> codec0 = (Codec<VarCompositeCodec>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(codec0).decode(any(java.nio.ByteBuffer.class));
      VarCodec<VarCompositeCodec> varCodec0 = new VarCodec<VarCompositeCodec>((Codec<Number>) null, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0, false);
      treeMap0.put(integer0, componentDef0);
      Map<Integer, Object> map0 = varCompositeCodec0.decode(byteBuffer0, treeMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(17);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      treeMap0.put(integer0, componentDef0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, true);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(17);
      varCompositeCodec0.decode(byteBuffer0, treeMap0);
      assertEquals(9, byteBuffer0.position());
      assertEquals(8, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1);
      Codec<VarCompositeCodec> codec0 = (Codec<VarCompositeCodec>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(codec0).decode(any(java.nio.ByteBuffer.class));
      VarCodec<VarCompositeCodec> varCodec0 = new VarCodec<VarCompositeCodec>((Codec<Number>) null, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0);
      treeMap0.put(integer0, componentDef0);
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing configuration for 2
         //
         verifyException("org.chiknrice.iso.codec.VarCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(3426);
      ComponentDef componentDef0 = new ComponentDef((Codec) null, false);
      treeMap0.put(integer0, componentDef0);
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3426);
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, false);
      varCompositeCodec0.decode(byteBuffer0, treeMap0);
      varCompositeCodec0.decode(byteBuffer0, treeMap0);
      // Undeclared exception!
      varCompositeCodec0.decode(byteBuffer0, treeMap0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.COMPRESSED;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, true);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1);
      CustomCodec<VarCompositeCodec> customCodec0 = (CustomCodec<VarCompositeCodec>) mock(CustomCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(customCodec0).decode(any(byte[].class));
      CustomCodecAdapter customCodecAdapter0 = new CustomCodecAdapter(customCodec0, integer0);
      ComponentDef componentDef0 = new ComponentDef(customCodecAdapter0, true);
      treeMap0.put(integer0, componentDef0);
      // Undeclared exception!
      try { 
        varCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing mandatory component 
         //
         verifyException("org.chiknrice.iso.codec.VarCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Map<Integer, Object> map0 = varCompositeCodec0.decode(byteBuffer0, treeMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec((BitmapCodec) null, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2833);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(2833);
      hashMap0.put(integer0, varCompositeCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      // Undeclared exception!
      try { 
        varCompositeCodec0.encode(byteBuffer0, hashMap0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected component(s) to encode {2833=org.chiknrice.iso.codec.VarCompositeCodec@2}
         //
         verifyException("org.chiknrice.iso.codec.VarCompositeCodec", e);
      }
  }
}
