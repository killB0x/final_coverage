/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:32:45 GMT 2022
 */

package org.chiknrice.iso.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.function.UnaryOperator;
import org.chiknrice.iso.codec.Codec;
import org.chiknrice.iso.codec.NumericCodec;
import org.chiknrice.iso.codec.TlvCompositeCodec;
import org.chiknrice.iso.codec.VarCodec;
import org.chiknrice.iso.config.ComponentDef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TlvCompositeCodec_ESTest extends TlvCompositeCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef.Encoding componentDef_Encoding1 = ComponentDef.Encoding.BCD;
      Codec<Double> codec0 = (Codec<Double>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn(componentDef_Encoding1).when(codec0).getEncoding();
      VarCodec<Double> varCodec0 = new VarCodec<Double>(numericCodec0, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(46);
      byteBuffer0.putChar(0, 'E');
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding1, false);
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\u0000\u0000\u0000\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>((Map<? extends Integer, ?>) treeMap0);
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.encode(byteBuffer0, treeMap1, treeMap0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.encode((ByteBuffer) null, hashMap0, (SortedMap<Integer, ComponentDef>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.TlvCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.decode((ByteBuffer) null, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.TlvCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(549);
      byteBuffer0.putShort(0, (short)127);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (32512 > 546)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      TlvCompositeCodec tlvCompositeCodec1 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      boolean boolean0 = tlvCompositeCodec1.equals(tlvCompositeCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      boolean boolean0 = tlvCompositeCodec0.equals(tlvCompositeCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      boolean boolean0 = tlvCompositeCodec0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      Integer integer0 = new Integer((-1944));
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      boolean boolean0 = tlvCompositeCodec0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      Charset charset0 = Charset.defaultCharset();
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef.Encoding componentDef_Encoding1 = ComponentDef.Encoding.BCD;
      Codec<Double> codec0 = (Codec<Double>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn(componentDef_Encoding0).when(codec0).getEncoding();
      VarCodec<Double> varCodec0 = new VarCodec<Double>(numericCodec0, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding1, componentDef_Encoding1, false);
      ByteBuffer byteBuffer0 = charset0.encode("Variable length numeric field encoded in %s could exceed long type");
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>((SortedMap<Integer, ?>) treeMap0);
      tlvCompositeCodec0.encode(byteBuffer0, treeMap1, treeMap0);
      assertEquals(36, byteBuffer0.remaining());
      assertEquals(30, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(534);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>((Map<? extends Integer, ?>) treeMap0);
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.encode(byteBuffer0, treeMap1, treeMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.chiknrice.iso.config.ComponentDef cannot be cast to class java.lang.Number (org.chiknrice.iso.config.ComponentDef is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5b6a12b4; java.lang.Number is in module java.base of loader 'bootstrap')
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1106);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1106);
      hashMap0.put(integer0, tlvCompositeCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      tlvCompositeCodec0.encode(byteBuffer0, hashMap0, treeMap0);
      assertFalse(byteBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1106);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1106);
      hashMap0.put(integer0, tlvCompositeCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.encode(byteBuffer0, hashMap0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected component(s) to encode {1106=org.chiknrice.iso.codec.TlvCompositeCodec@2}
         //
         verifyException("org.chiknrice.iso.codec.TlvCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(534);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      hashMap0.computeIfAbsent(integer0, unaryOperator0);
      tlvCompositeCodec0.encode(byteBuffer0, hashMap0, treeMap0);
      assertEquals(31, byteBuffer0.position());
      assertEquals(503, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(534);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.encode(byteBuffer0, hashMap0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing mandatory component 
         //
         verifyException("org.chiknrice.iso.codec.TlvCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing mandatory tags [0]
         //
         verifyException("org.chiknrice.iso.codec.TlvCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0, false);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      Map<Integer, Object> map0 = tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
      tlvCompositeCodec0.encode(byteBuffer0, map0, treeMap0);
      assertEquals(0, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      Map<Integer, Object> map0 = tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(534);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing mandatory component 
         //
         verifyException("org.chiknrice.iso.codec.TlvCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0, false);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing configuration for 0
         //
         verifyException("org.chiknrice.iso.codec.TlvCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(534);
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      // Undeclared exception!
      try { 
        tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing configuration for 0
         //
         verifyException("org.chiknrice.iso.codec.TlvCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      Codec<Double> codec0 = (Codec<Double>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn(componentDef_Encoding0).when(codec0).getEncoding();
      VarCodec<Double> varCodec0 = new VarCodec<Double>(numericCodec0, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      ComponentDef.Encoding componentDef_Encoding1 = ComponentDef.Encoding.BCD;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding1, false);
      Map<Integer, Object> map0 = tlvCompositeCodec0.decode(byteBuffer0, treeMap0);
      tlvCompositeCodec0.encode(byteBuffer0, map0, treeMap0);
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, false);
      tlvCompositeCodec0.hashCode();
  }
}
