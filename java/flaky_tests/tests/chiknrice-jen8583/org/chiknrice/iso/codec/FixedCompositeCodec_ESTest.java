/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:39:49 GMT 2022
 */

package org.chiknrice.iso.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import java.util.TreeMap;
import org.chiknrice.iso.codec.Codec;
import org.chiknrice.iso.codec.CustomCodec;
import org.chiknrice.iso.codec.CustomCodecAdapter;
import org.chiknrice.iso.codec.FixedCompositeCodec;
import org.chiknrice.iso.codec.NumericCodec;
import org.chiknrice.iso.codec.VarCodec;
import org.chiknrice.iso.config.ComponentDef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FixedCompositeCodec_ESTest extends FixedCompositeCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(0);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0, true);
      treeMap0.put(integer0, componentDef0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(treeMap0);
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.encode(byteBuffer0, hashMap0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to encode 
         //
         verifyException("org.chiknrice.iso.codec.FixedCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      Codec<Integer> codec0 = (Codec<Integer>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn((ComponentDef.Encoding) null).when(codec0).getEncoding();
      VarCodec<Integer> varCodec0 = new VarCodec<Integer>(numericCodec0, codec0);
      VarCodec<Integer> varCodec1 = new VarCodec<Integer>(numericCodec0, varCodec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec1, true);
      treeMap0.put(integer0, componentDef0);
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to decode 
         //
         verifyException("org.chiknrice.iso.codec.FixedCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.encode((ByteBuffer) null, (Map<Integer, Object>) null, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0, true);
      Integer integer0 = new Integer(1);
      treeMap0.put(integer0, componentDef0);
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.decode((ByteBuffer) null, (SortedMap<Integer, ComponentDef>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.FixedCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(46);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer1 = new Integer((-3853));
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer1);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0, true);
      treeMap0.put(integer0, componentDef0);
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3853
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      fixedCompositeCodec0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      Object object0 = new Object();
      boolean boolean0 = fixedCompositeCodec0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      FixedCompositeCodec fixedCompositeCodec1 = new FixedCompositeCodec();
      boolean boolean0 = fixedCompositeCodec1.equals(fixedCompositeCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      boolean boolean0 = fixedCompositeCodec0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      boolean boolean0 = fixedCompositeCodec0.equals(fixedCompositeCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      Integer integer0 = new Integer((-1210));
      Codec<Integer> codec0 = (Codec<Integer>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(codec0).decode(any(java.nio.ByteBuffer.class));
      VarCodec<Integer> varCodec0 = new VarCodec<Integer>((Codec<Number>) null, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0);
      HashMap<Integer, ComponentDef> hashMap0 = new HashMap<Integer, ComponentDef>(128, 128);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>(hashMap0);
      Integer integer1 = new Integer(1);
      treeMap0.put(integer1, componentDef0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)111);
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null component 
         //
         verifyException("org.chiknrice.iso.codec.FixedCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2677);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1);
      Codec<ComponentDef> codec0 = (Codec<ComponentDef>) mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(codec0).decode(any(java.nio.ByteBuffer.class));
      VarCodec<ComponentDef> varCodec0 = new VarCodec<ComponentDef>((Codec<Number>) null, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0);
      treeMap0.put(integer0, componentDef0);
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null component 
         //
         verifyException("org.chiknrice.iso.codec.FixedCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(43);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(43);
      treeMap0.put(integer0, (ComponentDef) null);
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing configuration for sub component 1
         //
         verifyException("org.chiknrice.iso.codec.FixedCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(46);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1);
      treeMap0.put(integer0, (ComponentDef) null);
      Map<Integer, Object> map0 = fixedCompositeCodec0.decode(byteBuffer0, treeMap0);
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.encode(byteBuffer0, map0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing mandatory component null
         //
         verifyException("org.chiknrice.iso.codec.FixedCompositeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(46);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(46);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      Integer integer0 = new Integer(1);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      CustomCodec<Object> customCodec0 = (CustomCodec<Object>) mock(CustomCodec.class, new ViolatedAssumptionAnswer());
      CustomCodecAdapter customCodecAdapter0 = new CustomCodecAdapter(customCodec0, integer0);
      VarCodec<Object> varCodec0 = new VarCodec<Object>(numericCodec0, customCodecAdapter0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0);
      treeMap0.put(integer0, componentDef0);
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.decode(byteBuffer0, treeMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put((Integer) null, fixedCompositeCodec0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      // Undeclared exception!
      try { 
        fixedCompositeCodec0.encode((ByteBuffer) null, hashMap0, treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected component(s) to encode {null=org.chiknrice.iso.codec.FixedCompositeCodec@2}
         //
         verifyException("org.chiknrice.iso.codec.FixedCompositeCodec", e);
      }
  }
}
