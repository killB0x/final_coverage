/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:27:45 GMT 2022
 */

package org.chiknrice.iso.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.DuplicateFormatFlagsException;
import java.util.IllegalFormatConversionException;
import java.util.IllegalFormatFlagsException;
import org.chiknrice.iso.codec.NumericCodec;
import org.chiknrice.iso.config.ComponentDef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumericCodec_ESTest extends NumericCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.getChar();
      // Undeclared exception!
      try { 
        numericCodec0.decode(byteBuffer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer(4);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      numericCodec0.encode(byteBuffer0, (Number) integer0);
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      Integer integer0 = new Integer((-4887));
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      // Undeclared exception!
      try { 
        numericCodec0.encode((ByteBuffer) null, (Number) integer0);
        fail("Expecting exception: IllegalFormatFlagsException");
      
      } catch(IllegalFormatFlagsException e) {
         //
         // Flags = '-0'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      Integer integer0 = new Integer(15);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(15);
      Float float0 = Float.valueOf((float) 15);
      // Undeclared exception!
      try { 
        numericCodec0.encode(byteBuffer0, (Number) float0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.Float
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        numericCodec0.encode(byteBuffer1, (Number) (byte)0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(6541);
      // Undeclared exception!
      numericCodec0.decode(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      // Undeclared exception!
      try { 
        numericCodec0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer((-577));
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      // Undeclared exception!
      try { 
        numericCodec0.decode(byteBuffer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -577
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      NumericCodec numericCodec1 = new NumericCodec(componentDef_Encoding0);
      boolean boolean0 = numericCodec1.equals(numericCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      boolean boolean0 = numericCodec0.equals(numericCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      boolean boolean0 = numericCodec0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer(4);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      boolean boolean0 = numericCodec0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      // Undeclared exception!
      try { 
        numericCodec0.encode((ByteBuffer) null, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      // Undeclared exception!
      try { 
        numericCodec0.encode((ByteBuffer) null, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid numeric value [java.lang.Integer@0000000002]
         //
         verifyException("org.chiknrice.iso.util.Bcd", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer((-1729));
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      // Undeclared exception!
      try { 
        numericCodec0.encode((ByteBuffer) null, (Number) integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1729
         //
         verifyException("org.chiknrice.iso.util.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer(8);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      Number number0 = numericCodec0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        numericCodec0.encode(byteBuffer0, number0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(898);
      byteBuffer0.put(4, (byte)83);
      numericCodec0.decode(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=898 lim=898 cap=898]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer(8);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        numericCodec0.decode(byteBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value exceeds long type 9500000000000000
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer(4);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      numericCodec0.decode(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(15);
      // Undeclared exception!
      try { 
        numericCodec0.decode(byteBuffer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer(8);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      numericCodec0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        numericCodec0.decode(byteBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting 8 bytes, only 0 remaining
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      Integer integer0 = new Integer(2159);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2159);
      numericCodec0.decode(byteBuffer0);
      assertEquals(1079, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=1080 lim=2159 cap=2159]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumericCodec numericCodec0 = null;
      try {
        numericCodec0 = new NumericCodec((ComponentDef.Encoding) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported encoding null
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      Integer integer0 = new Integer(0);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      // Undeclared exception!
      try { 
        numericCodec0.encode((ByteBuffer) null, (Number) integer0);
        fail("Expecting exception: DuplicateFormatFlagsException");
      
      } catch(DuplicateFormatFlagsException e) {
         //
         // Flags = '0'
         //
         verifyException("java.util.Formatter$Flags", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer(2356);
      NumericCodec numericCodec0 = null;
      try {
        numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Numeric field encoded in BINARY with 2356 bytes won't fit long type
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      NumericCodec numericCodec0 = null;
      try {
        numericCodec0 = new NumericCodec(componentDef_Encoding0, (Integer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variable length numeric field encoded in BINARY could exceed long type
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = Integer.valueOf(0);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        numericCodec0.encode(byteBuffer0, (Number) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value 0 exceeds capacity of field
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef.Encoding componentDef_Encoding1 = numericCodec0.getEncoding();
      assertSame(componentDef_Encoding1, componentDef_Encoding0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      numericCodec0.hashCode();
  }
}
