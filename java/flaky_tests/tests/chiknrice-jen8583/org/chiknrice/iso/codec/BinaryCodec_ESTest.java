/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:46:42 GMT 2022
 */

package org.chiknrice.iso.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.chiknrice.iso.codec.BinaryCodec;
import org.chiknrice.iso.config.ComponentDef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BinaryCodec_ESTest extends BinaryCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec((Integer) null);
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, (int) (byte)2, 1);
      byte[] byteArray1 = binaryCodec0.decode(byteBuffer0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      byte[] byteArray0 = binaryCodec0.decode(byteBuffer0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        binaryCodec0.encode(byteBuffer1, byteArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec();
      // Undeclared exception!
      try { 
        binaryCodec0.encode((ByteBuffer) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.BinaryCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      BinaryCodec binaryCodec0 = new BinaryCodec(integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      binaryCodec0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        binaryCodec0.decode(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec();
      // Undeclared exception!
      try { 
        binaryCodec0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.codec.BinaryCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec();
      BinaryCodec binaryCodec1 = new BinaryCodec();
      boolean boolean0 = binaryCodec0.equals(binaryCodec1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec();
      boolean boolean0 = binaryCodec0.equals(binaryCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec();
      boolean boolean0 = binaryCodec0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(3);
      BinaryCodec binaryCodec0 = new BinaryCodec(integer0);
      Object object0 = new Object();
      boolean boolean0 = binaryCodec0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(3);
      BinaryCodec binaryCodec0 = new BinaryCodec(integer0);
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        binaryCodec0.encode(byteBuffer0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bytes exceed fixed length 3
         //
         verifyException("org.chiknrice.iso.codec.BinaryCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(3);
      BinaryCodec binaryCodec0 = new BinaryCodec(integer0);
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        binaryCodec0.encode(byteBuffer0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newPosition > limit: (2 > 1)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(3);
      BinaryCodec binaryCodec0 = new BinaryCodec(integer0);
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      binaryCodec0.encode(byteBuffer0, byteArray0);
      assertEquals(3, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-2594));
      BinaryCodec binaryCodec0 = new BinaryCodec(integer0);
      // Undeclared exception!
      try { 
        binaryCodec0.decode((ByteBuffer) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2594
         //
         verifyException("org.chiknrice.iso.codec.BinaryCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(456);
      byte[] byteArray0 = binaryCodec0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        binaryCodec0.encode(byteBuffer0, byteArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryCodec binaryCodec0 = new BinaryCodec();
      ComponentDef.Encoding componentDef_Encoding0 = binaryCodec0.getEncoding();
      assertEquals(ComponentDef.Encoding.BINARY, componentDef_Encoding0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(3);
      BinaryCodec binaryCodec0 = new BinaryCodec(integer0);
      binaryCodec0.hashCode();
  }
}
