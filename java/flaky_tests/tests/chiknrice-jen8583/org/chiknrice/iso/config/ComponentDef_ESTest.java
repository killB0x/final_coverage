/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:44:16 GMT 2022
 */

package org.chiknrice.iso.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.util.Comparator;
import java.util.Locale;
import java.util.SortedMap;
import java.util.TreeMap;
import org.chiknrice.iso.codec.BitmapCodec;
import org.chiknrice.iso.codec.Codec;
import org.chiknrice.iso.codec.CompositeCodec;
import org.chiknrice.iso.codec.CustomCodec;
import org.chiknrice.iso.codec.CustomCodecAdapter;
import org.chiknrice.iso.codec.FixedCompositeCodec;
import org.chiknrice.iso.codec.NumericCodec;
import org.chiknrice.iso.codec.TlvCompositeCodec;
import org.chiknrice.iso.codec.VarCodec;
import org.chiknrice.iso.codec.VarCompositeCodec;
import org.chiknrice.iso.config.ComponentDef;
import org.chiknrice.iso.config.CompositeDef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComponentDef_ESTest extends ComponentDef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, fixedCompositeCodec0, false);
      Integer integer0 = new Integer(4608);
      treeMap0.put(integer0, compositeDef0);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, fixedCompositeCodec0, false);
      Object object0 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Integer, ComponentDef> treeMap1 = new TreeMap<Integer, ComponentDef>(comparator0);
      FixedCompositeCodec fixedCompositeCodec1 = new FixedCompositeCodec();
      CompositeDef compositeDef2 = new CompositeDef(treeMap1, fixedCompositeCodec1, false, (Codec<Number>) null);
      compositeDef2.equals((Object) null);
      compositeDef2.setParent(compositeDef0);
      compositeDef0.toString();
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      compositeDef2.equals(fixedCompositeCodec1);
      Object object1 = new Object();
      compositeDef2.equals(object0);
      ComponentDef componentDef1 = new ComponentDef((Codec) null, false);
      Object object2 = new Object();
      componentDef1.equals(object2);
      compositeDef2.toString();
      ComponentDef componentDef2 = new ComponentDef((Codec) null);
      compositeDef1.hashCode();
      // Undeclared exception!
      try { 
        ComponentDef.Encoding.valueOf("4608");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.chiknrice.iso.config.ComponentDef.Encoding.4608
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, fixedCompositeCodec0, false);
      compositeDef0.hashCode();
      Integer integer0 = new Integer(4608);
      treeMap0.put(integer0, compositeDef0);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, fixedCompositeCodec0, false);
      Object object0 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Integer, ComponentDef> treeMap1 = new TreeMap<Integer, ComponentDef>(comparator0);
      FixedCompositeCodec fixedCompositeCodec1 = new FixedCompositeCodec();
      CompositeDef compositeDef2 = new CompositeDef(treeMap1, fixedCompositeCodec1, false, (Codec<Number>) null);
      compositeDef2.equals((Object) null);
      compositeDef2.setParent(compositeDef0);
      compositeDef0.toString();
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      compositeDef2.equals(fixedCompositeCodec1);
      Object object1 = new Object();
      compositeDef2.equals(object0);
      ComponentDef componentDef1 = new ComponentDef((Codec) null, false);
      Object object2 = new Object();
      componentDef1.equals(object2);
      compositeDef2.toString();
      ComponentDef componentDef2 = new ComponentDef((Codec) null);
      compositeDef1.hashCode();
      // Undeclared exception!
      try { 
        ComponentDef.Encoding.valueOf("4608");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.chiknrice.iso.config.ComponentDef.Encoding.4608
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      Codec<Locale.FilteringMode> codec0 = (Codec<Locale.FilteringMode>) mock(Codec.class, new ViolatedAssumptionAnswer());
      ComponentDef componentDef0 = new ComponentDef(codec0, false);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      TreeMap<Integer, ComponentDef> treeMap1 = new TreeMap<Integer, ComponentDef>((SortedMap<Integer, ? extends ComponentDef>) treeMap0);
      CompositeDef compositeDef0 = new CompositeDef(treeMap1, (CompositeCodec) null, false);
      componentDef0.setParent(compositeDef0);
      componentDef0.toString();
      componentDef0.equals(componentDef0);
      ComponentDef componentDef1 = new ComponentDef(numericCodec0, false);
      componentDef1.equals(numericCodec0);
      // Undeclared exception!
      try { 
        ComponentDef.Encoding.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.chiknrice.iso.config.ComponentDef.Encoding.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      ComponentDef componentDef0 = new ComponentDef(numericCodec0, false);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      TreeMap<Integer, ComponentDef> treeMap1 = new TreeMap<Integer, ComponentDef>((SortedMap<Integer, ? extends ComponentDef>) treeMap0);
      Integer integer0 = new Integer(1120);
      treeMap0.put(integer0, componentDef0);
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, (CompositeCodec) null, false);
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, fixedCompositeCodec0, false);
      compositeDef1.toString();
      ComponentDef componentDef1 = new ComponentDef(numericCodec0);
      CompositeDef compositeDef2 = new CompositeDef(treeMap1, fixedCompositeCodec0, false);
      componentDef1.setParent(compositeDef0);
      String string0 = componentDef1.toString();
      assertEquals("", string0);
      
      ComponentDef componentDef2 = new ComponentDef(numericCodec0);
      Object object0 = new Object();
      ComponentDef componentDef3 = new ComponentDef((Codec) null);
      Object object1 = new Object();
      Integer integer1 = new Integer(240);
      boolean boolean0 = componentDef3.equals("");
      assertFalse(boolean0);
      assertTrue(componentDef3.isMandatory());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, fixedCompositeCodec0, true, (Codec<Number>) null);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, fixedCompositeCodec0, true);
      Integer integer0 = new Integer((-10));
      treeMap0.put(integer0, compositeDef1);
      compositeDef0.setParent(compositeDef1);
      String string0 = compositeDef0.toString();
      assertEquals("", string0);
      assertTrue(compositeDef0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      Codec<Locale.FilteringMode> codec0 = (Codec<Locale.FilteringMode>) mock(Codec.class, new ViolatedAssumptionAnswer());
      ComponentDef componentDef0 = new ComponentDef(codec0, false);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      TreeMap<Integer, ComponentDef> treeMap1 = new TreeMap<Integer, ComponentDef>((SortedMap<Integer, ? extends ComponentDef>) treeMap0);
      Integer integer0 = new Integer(46);
      treeMap1.put(integer0, componentDef0);
      CompositeDef compositeDef0 = new CompositeDef(treeMap1, (CompositeCodec) null, false);
      CompositeDef compositeDef1 = new CompositeDef(treeMap1, (CompositeCodec) null, false);
      compositeDef0.setParent(compositeDef1);
      componentDef0.setParent(compositeDef0);
      componentDef0.toString();
      ComponentDef componentDef1 = new ComponentDef(numericCodec0);
      componentDef0.equals(componentDef1);
      Object object0 = new Object();
      componentDef0.equals(object0);
      componentDef0.equals(object0);
      componentDef1.equals("46");
      // Undeclared exception!
      try { 
        ComponentDef.Encoding.valueOf("46");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.chiknrice.iso.config.ComponentDef.Encoding.46
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, (CompositeCodec) null, false);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      VarCodec<Number> varCodec0 = new VarCodec<Number>(numericCodec0, numericCodec0);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, (CompositeCodec) null, false, varCodec0);
      compositeDef1.setParent(compositeDef0);
      compositeDef0.setParent(compositeDef1);
      compositeDef0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      Codec<Locale.FilteringMode> codec0 = (Codec<Locale.FilteringMode>) mock(Codec.class, new ViolatedAssumptionAnswer());
      ComponentDef componentDef0 = new ComponentDef(codec0, false);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      TreeMap<Integer, ComponentDef> treeMap1 = new TreeMap<Integer, ComponentDef>((SortedMap<Integer, ? extends ComponentDef>) treeMap0);
      Integer integer0 = new Integer(46);
      treeMap1.put(integer0, componentDef0);
      CompositeDef compositeDef0 = new CompositeDef(treeMap1, (CompositeCodec) null, false);
      componentDef0.setParent(compositeDef0);
      componentDef0.toString();
      ComponentDef componentDef1 = new ComponentDef(numericCodec0);
      componentDef0.equals(componentDef1);
      Object object0 = new Object();
      componentDef0.equals(object0);
      componentDef1.equals("46");
      // Undeclared exception!
      try { 
        ComponentDef.Encoding.valueOf("46");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.chiknrice.iso.config.ComponentDef.Encoding.46
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, fixedCompositeCodec0, true, (Codec<Number>) null);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, fixedCompositeCodec0, true);
      Integer integer0 = new Integer((-1));
      treeMap0.put(integer0, compositeDef1);
      compositeDef1.setParent(compositeDef0);
      String string0 = compositeDef1.toString();
      assertEquals("-1", string0);
      assertTrue(compositeDef1.isMandatory());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      ComponentDef componentDef1 = new ComponentDef((Codec) null);
      componentDef0.equals(componentDef1);
      ComponentDef componentDef2 = new ComponentDef((Codec) null);
      assertTrue(componentDef2.isMandatory());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComponentDef.Encoding.values();
      Codec<ComponentDef> codec0 = (Codec<ComponentDef>) mock(Codec.class, new ViolatedAssumptionAnswer());
      VarCodec<ComponentDef> varCodec0 = new VarCodec<ComponentDef>((Codec<Number>) null, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0);
      componentDef0.toString();
      ComponentDef componentDef1 = new ComponentDef(varCodec0, true);
      componentDef0.equals(componentDef1);
      ComponentDef.Encoding.values();
      componentDef1.toString();
      assertTrue(componentDef1.isMandatory());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      Codec<Locale.FilteringMode> codec0 = (Codec<Locale.FilteringMode>) mock(Codec.class, new ViolatedAssumptionAnswer());
      ComponentDef componentDef0 = new ComponentDef(codec0, false);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      TreeMap<Integer, ComponentDef> treeMap1 = new TreeMap<Integer, ComponentDef>((SortedMap<Integer, ? extends ComponentDef>) treeMap0);
      CompositeDef compositeDef0 = new CompositeDef(treeMap1, (CompositeCodec) null, false);
      componentDef0.setParent(compositeDef0);
      componentDef0.toString();
      componentDef0.toString();
      ComponentDef componentDef1 = new ComponentDef(numericCodec0);
      ComponentDef.Encoding[] componentDef_EncodingArray0 = ComponentDef.Encoding.values();
      assertEquals(3, componentDef_EncodingArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, fixedCompositeCodec0, true, (Codec<Number>) null);
      compositeDef0.setParent(compositeDef0);
      compositeDef0.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, fixedCompositeCodec0, false, (Codec<Number>) null);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, fixedCompositeCodec0, false);
      compositeDef0.setParent(compositeDef1);
      String string0 = compositeDef0.toString();
      assertEquals("", string0);
      assertFalse(compositeDef0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      componentDef0.toString();
      assertTrue(componentDef0.isMandatory());
      
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, (CompositeCodec) null, false);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, (CompositeCodec) null, false);
      compositeDef1.setParent(compositeDef0);
      compositeDef0.setParent(compositeDef1);
      componentDef0.equals(compositeDef0);
      componentDef0.hashCode();
      componentDef0.equals((Object) null);
      Object object0 = new Object();
      Integer integer0 = new Integer((-507));
      treeMap0.put(integer0, compositeDef0);
      componentDef0.equals(object0);
      componentDef0.hashCode();
      componentDef0.getCodec();
      // Undeclared exception!
      try { 
        ComponentDef.Encoding.valueOf("v$,1C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.chiknrice.iso.config.ComponentDef.Encoding.v$,1C
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      Codec<Locale.FilteringMode> codec0 = (Codec<Locale.FilteringMode>) mock(Codec.class, new ViolatedAssumptionAnswer());
      ComponentDef componentDef0 = new ComponentDef(codec0, false);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      TreeMap<Integer, ComponentDef> treeMap1 = new TreeMap<Integer, ComponentDef>((SortedMap<Integer, ? extends ComponentDef>) treeMap0);
      Integer integer0 = new Integer(46);
      treeMap1.put(integer0, componentDef0);
      CompositeDef compositeDef0 = new CompositeDef(treeMap1, (CompositeCodec) null, false);
      componentDef0.toString();
      componentDef0.equals(componentDef0);
      Object object0 = new Object();
      componentDef0.equals(object0);
      compositeDef0.equals("46");
      // Undeclared exception!
      try { 
        ComponentDef.Encoding.valueOf("46");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.chiknrice.iso.config.ComponentDef.Encoding.46
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Codec<ComponentDef> codec0 = (Codec<ComponentDef>) mock(Codec.class, new ViolatedAssumptionAnswer());
      VarCodec<ComponentDef> varCodec0 = new VarCodec<ComponentDef>((Codec<Number>) null, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0, true);
      componentDef0.equals(varCodec0);
      componentDef0.toString();
      varCodec0.encode((ByteBuffer) null, componentDef0);
      componentDef0.toString();
      boolean boolean0 = componentDef0.isMandatory();
      ComponentDef.Encoding.values();
      ComponentDef.Encoding.values();
      boolean boolean1 = componentDef0.equals(varCodec0);
      assertFalse(boolean1 == boolean0);
      
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      BitmapCodec.Bitmap.Type bitmapCodec_Bitmap_Type0 = BitmapCodec.Bitmap.Type.HEX;
      BitmapCodec bitmapCodec0 = new BitmapCodec(bitmapCodec_Bitmap_Type0);
      VarCompositeCodec varCompositeCodec0 = new VarCompositeCodec(bitmapCodec0, true);
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, varCompositeCodec0, true);
      componentDef0.setParent(compositeDef0);
      assertTrue(componentDef0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      Object object0 = new Object();
      boolean boolean0 = componentDef0.equals(object0);
      assertTrue(componentDef0.isMandatory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      assertTrue(componentDef0.isMandatory());
      
      boolean boolean0 = componentDef0.equals((Object) null);
      assertTrue(componentDef0.isMandatory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      componentDef0.hashCode();
      componentDef0.toString();
      componentDef0.equals((Object) null);
      componentDef0.setParent((CompositeDef) null);
      boolean boolean0 = componentDef0.equals((Object) null);
      assertFalse(boolean0);
      
      componentDef0.toString();
      componentDef0.hashCode();
      componentDef0.hashCode();
      assertTrue(componentDef0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      CustomCodec<Object> customCodec0 = (CustomCodec<Object>) mock(CustomCodec.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      CustomCodecAdapter customCodecAdapter0 = new CustomCodecAdapter(customCodec0, integer0);
      VarCodec<Object> varCodec0 = new VarCodec<Object>(numericCodec0, customCodecAdapter0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0, false);
      boolean boolean0 = componentDef0.isMandatory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, (CompositeCodec) null, true);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      VarCodec<Number> varCodec0 = new VarCodec<Number>(numericCodec0, numericCodec0);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, (CompositeCodec) null, true, varCodec0);
      compositeDef0.setParent(compositeDef1);
      compositeDef1.equals(compositeDef0);
      assertTrue(compositeDef1.isMandatory());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>(comparator0);
      Integer integer0 = new Integer((-80));
      treeMap0.higherKey(integer0);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.CHAR;
      Integer integer1 = new Integer(0);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer1);
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, (CompositeCodec) null, false, numericCodec0);
      treeMap0.floorKey(integer1);
      compositeDef0.hashCode();
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, (CompositeCodec) null, false);
      compositeDef0.setParent(compositeDef1);
      Integer integer2 = new Integer((-80));
      treeMap0.lowerKey(integer2);
      CompositeDef compositeDef2 = new CompositeDef(treeMap0, (CompositeCodec) null, false);
      compositeDef2.equals((Object) null);
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef3 = null;
      try {
        compositeDef3 = new CompositeDef((SortedMap<Integer, ComponentDef>) null, fixedCompositeCodec0, false, numericCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.chiknrice.iso.config.CompositeDef", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      componentDef0.hashCode();
      ComponentDef componentDef1 = new ComponentDef((Codec) null);
      assertTrue(componentDef1.isMandatory());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      Codec<Locale.FilteringMode> codec0 = (Codec<Locale.FilteringMode>) mock(Codec.class, new ViolatedAssumptionAnswer());
      VarCodec<Locale.FilteringMode> varCodec0 = new VarCodec<Locale.FilteringMode>(numericCodec0, codec0);
      ComponentDef componentDef0 = new ComponentDef(varCodec0, false);
      componentDef0.getCodec();
      assertFalse(componentDef0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      componentDef0.toString();
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, (CompositeCodec) null, false);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, (CompositeCodec) null, false);
      compositeDef1.setParent(compositeDef0);
      compositeDef0.setParent(compositeDef1);
      componentDef0.equals(compositeDef0);
      componentDef0.hashCode();
      componentDef0.equals((Object) null);
      Object object0 = new Object();
      Integer integer0 = new Integer((-507));
      treeMap0.put(integer0, compositeDef0);
      componentDef0.equals(object0);
      componentDef0.hashCode();
      componentDef0.getCodec();
      // Undeclared exception!
      try { 
        ComponentDef.Encoding.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.chiknrice.iso.config.ComponentDef.Encoding.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>(comparator0);
      Integer integer0 = new Integer(2416);
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, fixedCompositeCodec0, true);
      treeMap0.put(integer0, compositeDef0);
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      CompositeDef compositeDef1 = new CompositeDef(treeMap0, tlvCompositeCodec0, true, numericCodec0);
      int int0 = 0;
      compositeDef1.toString();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      String string0 = "(+dLr/ONqur";
      // Undeclared exception!
      try { 
        byteBuffer0.putInt(0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComponentDef componentDef0 = new ComponentDef((Codec) null);
      componentDef0.setParent((CompositeDef) null);
      componentDef0.toString();
      assertTrue(componentDef0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, fixedCompositeCodec0, true);
      compositeDef0.toString();
      compositeDef0.getCodec();
      // Undeclared exception!
      try { 
        ComponentDef.Encoding.valueOf("#I( Q7UYPHhh4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.chiknrice.iso.config.ComponentDef.Encoding.#I( Q7UYPHhh4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      CompositeDef compositeDef0 = new CompositeDef(treeMap0, fixedCompositeCodec0, false);
      SortedMap<Integer, ComponentDef> sortedMap0 = compositeDef0.getSubComponentDefs();
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      Integer integer0 = new Integer(0);
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0, integer0);
      CompositeDef compositeDef1 = new CompositeDef(sortedMap0, fixedCompositeCodec0, false, numericCodec0);
      compositeDef1.toString();
      assertFalse(compositeDef1.isMandatory());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CustomCodec<Object> customCodec0 = (CustomCodec<Object>) mock(CustomCodec.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-2743));
      CustomCodecAdapter customCodecAdapter0 = new CustomCodecAdapter(customCodec0, integer0);
      ComponentDef componentDef0 = new ComponentDef(customCodecAdapter0);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      FixedCompositeCodec fixedCompositeCodec0 = new FixedCompositeCodec();
      boolean boolean0 = true;
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BINARY;
      NumericCodec numericCodec0 = null;
      try {
        numericCodec0 = new NumericCodec(componentDef_Encoding0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variable length numeric field encoded in BINARY could exceed long type
         //
         verifyException("org.chiknrice.iso.codec.NumericCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComponentDef.Encoding componentDef_Encoding0 = ComponentDef.Encoding.BCD;
      NumericCodec numericCodec0 = new NumericCodec(componentDef_Encoding0);
      VarCodec<Object> varCodec0 = new VarCodec<Object>(numericCodec0, (Codec<Object>) null);
      ComponentDef componentDef0 = new ComponentDef(varCodec0, false);
      TreeMap<Integer, ComponentDef> treeMap0 = new TreeMap<Integer, ComponentDef>();
      TlvCompositeCodec tlvCompositeCodec0 = new TlvCompositeCodec(componentDef_Encoding0, componentDef_Encoding0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte)0, 32767);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }
}
