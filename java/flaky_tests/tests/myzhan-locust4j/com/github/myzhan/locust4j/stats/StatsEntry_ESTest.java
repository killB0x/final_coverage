/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 16:25:43 GMT 2022
 */

package com.github.myzhan.locust4j.stats;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.myzhan.locust4j.message.LongIntMap;
import com.github.myzhan.locust4j.stats.StatsEntry;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StatsEntry_ESTest extends StatsEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("D");
      // Undeclared exception!
      try { 
        statsEntry0.logResponseTime(10000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.stats.StatsEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry((String) null);
      // Undeclared exception!
      try { 
        statsEntry0.logResponseTime(1000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.stats.StatsEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "");
      // Undeclared exception!
      try { 
        statsEntry0.logResponseTime(100L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.stats.StatsEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("");
      statsEntry0.reset();
      statsEntry0.log((-1440L), 1395L);
      statsEntry0.logResponseTime(0L);
      assertEquals(1392409281L, statsEntry0.getLastRequestTimestamp());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "");
      statsEntry0.getStrippedReport();
      statsEntry0.log(0L, (-1698L));
      assertEquals(1392409281L, statsEntry0.getLastRequestTimestamp());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "");
      LongIntMap longIntMap0 = new LongIntMap();
      statsEntry0.setNumReqsPerSec(longIntMap0);
      statsEntry0.logTimeOfRequest();
      assertEquals(1392409281L, statsEntry0.getLastRequestTimestamp());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry(":clI)tOW*gC\"iUv1D", "g~Ua@SuH:ILmByK");
      statsEntry0.setTotalResponseTime(891L);
      long long0 = statsEntry0.getTotalResponseTime();
      assertEquals(891L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "Y");
      LongIntMap longIntMap0 = new LongIntMap();
      statsEntry0.setResponseTimes(longIntMap0);
      statsEntry0.logResponseTime((-1264L));
      long long0 = statsEntry0.getTotalResponseTime();
      assertEquals((-1264L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("min_response_time", "min_response_time");
      statsEntry0.getStrippedReport();
      statsEntry0.log(203L, 203L);
      long long0 = statsEntry0.getTotalContentLength();
      assertEquals(1392409281L, statsEntry0.getLastRequestTimestamp());
      assertEquals(203L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("min_response_time", "min_response_time");
      statsEntry0.getStrippedReport();
      statsEntry0.log((-2886L), (-2886L));
      long long0 = statsEntry0.getTotalContentLength();
      assertEquals((-2886L), statsEntry0.getMinResponseTime());
      assertEquals((-2886L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("otHg", "XKWM^YGBd^ARdQi#");
      statsEntry0.reset();
      long long0 = statsEntry0.getStartTime();
      assertEquals(1392409281L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-2886L));
      StatsEntry statsEntry0 = new StatsEntry("min_response_time", "min_response_time");
      statsEntry0.getStrippedReport();
      long long0 = statsEntry0.getStartTime();
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "SlJnr-M");
      statsEntry0.getStrippedReport();
      statsEntry0.getResponseTimes();
      assertEquals("", statsEntry0.getName());
      assertEquals(0L, statsEntry0.getMinResponseTime());
      assertEquals(0L, statsEntry0.getTotalResponseTime());
      assertEquals("SlJnr-M", statsEntry0.getMethod());
      assertEquals(0L, statsEntry0.getMaxResponseTime());
      assertEquals(0L, statsEntry0.getNumFailures());
      assertEquals(0L, statsEntry0.getTotalContentLength());
      assertEquals(0L, statsEntry0.getNumRequests());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("min_response_time", "min_response_time");
      statsEntry0.getStrippedReport();
      statsEntry0.log(203L, 203L);
      long long0 = statsEntry0.getNumRequests();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("");
      statsEntry0.reset();
      statsEntry0.getNumReqsPerSec();
      assertEquals(0L, statsEntry0.getMaxResponseTime());
      assertEquals(0L, statsEntry0.getNumFailures());
      assertEquals(0L, statsEntry0.getTotalContentLength());
      assertEquals(0L, statsEntry0.getNumRequests());
      assertEquals(0L, statsEntry0.getMinResponseTime());
      assertEquals(0L, statsEntry0.getTotalResponseTime());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "");
      statsEntry0.getStrippedReport();
      statsEntry0.logError("");
      long long0 = statsEntry0.getNumFailures();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "min_response_time");
      statsEntry0.setNumFailures((-254L));
      long long0 = statsEntry0.getNumFailures();
      assertEquals((-254L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry((String) null, (String) null);
      String string0 = statsEntry0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("");
      String string0 = statsEntry0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("+b", "+b");
      LongIntMap longIntMap0 = new LongIntMap();
      statsEntry0.setResponseTimes(longIntMap0);
      statsEntry0.logResponseTime(3930L);
      long long0 = statsEntry0.getMinResponseTime();
      assertEquals(3930L, statsEntry0.getMaxResponseTime());
      assertEquals(3930L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("min_response_time", "min_response_time");
      statsEntry0.getStrippedReport();
      statsEntry0.logResponseTime((-335L));
      long long0 = statsEntry0.getMinResponseTime();
      assertEquals((-335L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("+b", "+b");
      statsEntry0.setMethod((String) null);
      String string0 = statsEntry0.getMethod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("hLG]OwR4S\"O.");
      String string0 = statsEntry0.getMethod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("min_response_time", "min_response_time");
      statsEntry0.getStrippedReport();
      statsEntry0.log(203L, 203L);
      long long0 = statsEntry0.getMaxResponseTime();
      assertEquals(203L, statsEntry0.getTotalContentLength());
      assertEquals(203L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "min_response_time");
      statsEntry0.setMaxResponseTime((-433L));
      long long0 = statsEntry0.getMaxResponseTime();
      assertEquals((-433L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("]bR*X5! C", "]bR*X5! C");
      statsEntry0.getStrippedReport();
      long long0 = statsEntry0.getLastRequestTimestamp();
      assertEquals(1392409281L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("Y;kZ(A.{9?A7<#6&");
      statsEntry0.setLastRequestTimestamp((-686L));
      long long0 = statsEntry0.getLastRequestTimestamp();
      assertEquals((-686L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("");
      Map<String, Object> map0 = statsEntry0.serialize();
      assertEquals(14, map0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "");
      // Undeclared exception!
      try { 
        statsEntry0.logTimeOfRequest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.stats.StatsEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("min_response_time", "min_response_time");
      // Undeclared exception!
      try { 
        statsEntry0.logResponseTime(10014L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.stats.StatsEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "SlJnr-M");
      statsEntry0.getStrippedReport();
      statsEntry0.logResponseTime(449L);
      statsEntry0.logResponseTime((-2556L));
      assertEquals(449L, statsEntry0.getMaxResponseTime());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("+b", "+b");
      long long0 = statsEntry0.getMaxResponseTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("+b", "+b");
      long long0 = statsEntry0.getLastRequestTimestamp();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("+b", "+b");
      long long0 = statsEntry0.getMinResponseTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("+b", "+b");
      LongIntMap longIntMap0 = statsEntry0.getNumReqsPerSec();
      statsEntry0.setResponseTimes(longIntMap0);
      assertEquals(0L, statsEntry0.getNumRequests());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("q1q?m^");
      statsEntry0.setMinResponseTime((-1906L));
      assertEquals((-1906L), statsEntry0.getMinResponseTime());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "SlJnr-M");
      assertEquals("", statsEntry0.getName());
      
      statsEntry0.setName("SlJnr-M");
      assertEquals("SlJnr-M", statsEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "SlJnr-M");
      statsEntry0.setTotalContentLength((-2866L));
      assertEquals((-2866L), statsEntry0.getTotalContentLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("min_response_time", "min_response_time");
      long long0 = statsEntry0.getTotalContentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("method", "method");
      // Undeclared exception!
      try { 
        statsEntry0.logError("method");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.stats.StatsEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("+b", "+b");
      String string0 = statsEntry0.getMethod();
      assertEquals("+b", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("+b", "+b");
      long long0 = statsEntry0.getTotalResponseTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("min_response_time", "min_response_time");
      long long0 = statsEntry0.getStartTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "SlJnr-M");
      statsEntry0.setStartTime((-1708L));
      assertEquals((-1708L), statsEntry0.getStartTime());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("mthod");
      long long0 = statsEntry0.getNumFailures();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("+b", "+b");
      String string0 = statsEntry0.getName();
      assertEquals("+b", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "SlJnr-M");
      statsEntry0.getNumRequests();
      assertEquals("SlJnr-M", statsEntry0.getMethod());
      assertEquals("", statsEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "SlJnr-M");
      LongIntMap longIntMap0 = statsEntry0.getResponseTimes();
      statsEntry0.setNumReqsPerSec(longIntMap0);
      assertEquals("SlJnr-M", statsEntry0.getMethod());
      assertEquals("", statsEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("", "SlJnr-M");
      statsEntry0.setNumRequests((-2866L));
      long long0 = statsEntry0.getNumRequests();
      assertEquals((-2866L), long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StatsEntry statsEntry0 = new StatsEntry("3m");
      // Undeclared exception!
      try { 
        statsEntry0.log(890L, 890L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.stats.StatsEntry", e);
      }
  }
}
