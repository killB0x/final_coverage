/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 16:22:24 GMT 2022
 */

package com.github.myzhan.locust4j.stats;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.myzhan.locust4j.stats.RequestSuccess;
import com.github.myzhan.locust4j.stats.Stats;
import com.github.myzhan.locust4j.stats.StatsEntry;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Stats_ESTest extends Stats_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      List<Map<String, Object>> list0 = stats0.serializeStats();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        stats0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.stats.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      Map<String, Map<String, Object>> map0 = stats0.serializeErrors();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      stats0.getReportFailureQueue();
      Map<String, Object> map0 = stats0.collectReportData();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      stats0.clearAll();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      Queue<RequestSuccess> queue0 = stats0.getReportSuccessQueue();
      assertNotNull(queue0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      BlockingQueue<Map<String, Object>> blockingQueue0 = stats0.getMessageToRunnerQueue();
      assertNotNull(blockingQueue0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      stats0.start();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      stats0.wakeMeUp();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      stats0.logRequest("", "com.github.myzhan.locust4j.stats.StatsEntry", 767L, 10000L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      Queue<Boolean> queue0 = stats0.getClearStatsQueue();
      assertNotNull(queue0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      stats0.getReportFailureQueue();
      stats0.logError("stats_total", "stats_total", "dc");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        stats0.logError((String) null, "nfPF", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.utils.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stats stats0 = Stats.getInstance();
      StatsEntry statsEntry0 = stats0.getTotal();
      assertEquals(1392409281L, statsEntry0.getStartTime());
  }
}
