/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 16:31:26 GMT 2022
 */

package com.github.myzhan.locust4j.ratelimit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.myzhan.locust4j.ratelimit.RampUpRateLimiter;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RampUpRateLimiter_ESTest extends RampUpRateLimiter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      RampUpRateLimiter rampUpRateLimiter0 = new RampUpRateLimiter((-3630L), (-3630L), 0L, timeUnit0, 0L, timeUnit1);
      assertTrue(rampUpRateLimiter0.isStopped());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      RampUpRateLimiter rampUpRateLimiter0 = new RampUpRateLimiter(535L, (-190L), 1932L, timeUnit0, (-190L), timeUnit0);
      assertTrue(rampUpRateLimiter0.isStopped());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      RampUpRateLimiter rampUpRateLimiter0 = new RampUpRateLimiter((-3630L), (-3630L), 0L, timeUnit0, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        rampUpRateLimiter0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      RampUpRateLimiter rampUpRateLimiter0 = new RampUpRateLimiter(1067L, 1067L, 1695L, timeUnit0, 1695L, timeUnit0);
      // Undeclared exception!
      try { 
        rampUpRateLimiter0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.myzhan.locust4j.ratelimit.RampUpRateLimiter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      RampUpRateLimiter rampUpRateLimiter0 = new RampUpRateLimiter(1067L, 1067L, 1695L, timeUnit0, 1695L, timeUnit0);
      boolean boolean0 = rampUpRateLimiter0.isStopped();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      RampUpRateLimiter rampUpRateLimiter0 = new RampUpRateLimiter(1067L, 1067L, 1695L, timeUnit0, 1695L, timeUnit0);
      rampUpRateLimiter0.start();
      assertFalse(rampUpRateLimiter0.isStopped());
      
      rampUpRateLimiter0.stop();
      assertTrue(rampUpRateLimiter0.isStopped());
  }
}
