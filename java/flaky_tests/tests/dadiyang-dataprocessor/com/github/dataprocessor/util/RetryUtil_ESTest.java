/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 14:47:12 GMT 2022
 */

package com.github.dataprocessor.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dataprocessor.util.RetryUtil;
import java.util.concurrent.Callable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RetryUtil_ESTest extends RetryUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Callable<RetryUtil> callable0 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      RetryUtil.retryCallNullable(callable0);
      try { 
        RetryUtil.retryCall((Callable<Object>) null, 3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.util.RetryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Callable<RetryUtil> callable0 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      RetryUtil.retryCall(callable0, (-1296), false);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      RetryUtil.retryCallNullable(callable1);
      Callable<Object> callable2 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable2).call();
      RetryUtil.retryCall(callable2);
      Callable<Object> callable3 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable3).call();
      RetryUtil.retryCallNullable(callable3);
      Callable<Object> callable4 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable4).call();
      RetryUtil.retryCall(callable4);
      Callable<Object> callable5 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable5).call();
      RetryUtil.retryCall(callable5);
      Callable<Object> callable6 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable6).call();
      RetryUtil.retryCall(callable6);
      Callable<Object> callable7 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable7).call();
      RetryUtil.retryCallNullable(callable7);
      Callable<Object> callable8 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable8).call();
      RetryUtil.retryCall(callable8, 1, false);
      Callable<RetryUtil> callable9 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable9).call();
      RetryUtil.retryCall(callable9);
      Callable<Object> callable10 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable10).call();
      RetryUtil.retryCall(callable10);
      Callable<Object> callable11 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      RetryUtil.retryCall(callable11, (-1), false);
      Callable<RetryUtil> callable12 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      RetryUtil.retryCall(callable12, (-1), false);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Callable<RetryUtil> callable0 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      RetryUtil.retryCallNullable(callable0);
      Callable<RetryUtil> callable1 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      RetryUtil.retryCall(callable1, 2571, true);
      Callable<RetryUtil> callable2 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      RetryUtil.retryCall(callable2, (-1279), true);
      Callable<Object> callable3 = null;
      try { 
        RetryUtil.retryCallNullable((Callable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.util.RetryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable0).call();
      RetryUtil.retryCall(callable0);
      Callable<RetryUtil> callable1 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      RetryUtil.retryCall(callable1, 3, true);
      Callable<Object> callable2 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable2).call();
      RetryUtil.retryCall(callable2);
      Callable<Object> callable3 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable3).call();
      RetryUtil.retryCallNullable(callable3);
      Callable<Object> callable4 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable4).call();
      RetryUtil.retryCallNullable(callable4);
      Callable<RetryUtil> callable5 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable5).call();
      RetryUtil.retryCall(callable5);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      RetryUtil.retryCallNullable(callable0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable1).call();
      RetryUtil.retryCall(callable1);
      Callable<RetryUtil> callable2 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable2).call();
      RetryUtil.retryCallNullable(callable2);
      Callable<Object> callable3 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      RetryUtil.retryCall(callable3, 0, true);
      Callable<Object> callable4 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(callable4).call();
      RetryUtil.retryCall(callable4);
      Callable<Object> callable5 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable5).call();
      RetryUtil.retryCallNullable(callable5);
      try { 
        RetryUtil.retryCallNullable((Callable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.util.RetryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Callable<Object> callable0 = null;
      RetryUtil.retryCall((Callable<Object>) null, 0, false);
      try { 
        RetryUtil.retryCallNullable((Callable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.util.RetryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = (-1);
      Callable<Object> callable0 = null;
      try { 
        RetryUtil.retryCall((Callable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.util.RetryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Callable<RetryUtil> callable0 = (Callable<RetryUtil>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      RetryUtil retryUtil0 = RetryUtil.retryCallNullable(callable0);
      assertNull(retryUtil0);
  }
}
