/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 14:38:25 GMT 2022
 */

package com.github.dataprocessor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dataprocessor.DefaultDataProcessor;
import com.github.dataprocessor.provider.DataProvider;
import com.github.dataprocessor.provider.Page;
import com.github.dataprocessor.slice.DefaultSliceParser;
import com.github.dataprocessor.slice.DefaultSliceRecorder;
import com.github.dataprocessor.slice.Slice;
import com.github.dataprocessor.slice.SliceParser;
import com.github.dataprocessor.slice.SliceRecorder;
import com.github.dataprocessor.threadpool.DefaultThreadPoolFactory;
import com.github.dataprocessor.threadpool.ThreadPoolFactory;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataProcessorTemplate_ESTest extends DataProcessorTemplate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataProvider<Page<Object>, Page<Object>> dataProvider0 = (DataProvider<Page<Object>, Page<Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, Page<Object>> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Page<Object>>(10, 0, dataProvider0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultDataProcessor0.setSlicesThreadNum(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u5206\u7247\u4EFB\u52A1\u6267\u884C\u7EBF\u7A0B\u6570\u5FC5\u987B\u5927\u4E8E0, slicesThreadNum:0
         //
         verifyException("com.github.dataprocessor.DataProcessorTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      DataProvider<Object, Object> dataProvider0 = (DataProvider<Object, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(dataProvider0).generateSlices();
      DefaultDataProcessor<Object, Object> defaultDataProcessor0 = new DefaultDataProcessor<Object, Object>(8, 8, dataProvider0);
      boolean boolean0 = defaultDataProcessor0.process();
      assertTrue(boolean0);
      assertTrue(defaultDataProcessor0.isRetryNullable());
      assertEquals(8, defaultDataProcessor0.getNumPerBatch());
      assertEquals(8, defaultDataProcessor0.getSlicesThreadNum());
      assertEquals(3000L, defaultDataProcessor0.getLaunchInterval());
      assertEquals(3, defaultDataProcessor0.getRetryTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataProvider<Delayed, ForkJoinTask<Object>> dataProvider0 = (DataProvider<Delayed, ForkJoinTask<Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Delayed, ForkJoinTask<Object>> defaultDataProcessor0 = new DefaultDataProcessor<Delayed, ForkJoinTask<Object>>(0, 0, dataProvider0);
      int int0 = defaultDataProcessor0.getSlicesThreadNum();
      assertEquals(0, defaultDataProcessor0.getNumPerBatch());
      assertEquals(0, int0);
      assertEquals(3000L, defaultDataProcessor0.getLaunchInterval());
      assertTrue(defaultDataProcessor0.isRetryNullable());
      assertEquals(3, defaultDataProcessor0.getRetryTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataProvider<Object, Object> dataProvider0 = (DataProvider<Object, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Object, Object> defaultDataProcessor0 = new DefaultDataProcessor<Object, Object>(3509, (-2141), dataProvider0);
      int int0 = defaultDataProcessor0.getSlicesThreadNum();
      assertEquals(3, defaultDataProcessor0.getRetryTime());
      assertEquals(3509, defaultDataProcessor0.getNumPerBatch());
      assertEquals((-2141), int0);
      assertTrue(defaultDataProcessor0.isRetryNullable());
      assertEquals(3000L, defaultDataProcessor0.getLaunchInterval());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataProvider<Object, Object> dataProvider0 = (DataProvider<Object, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Object, Object> defaultDataProcessor0 = new DefaultDataProcessor<Object, Object>(dataProvider0, "\u6709\u83B7\u53D6\u5230{}\u4E2A\u5931\u8D25\u7684\u5206\u7247\uFF0C\u4F46\u4E4B\u524D\u5DF2\u5168\u90E8\u5904\u7406\u5B8C\u6210");
      assertEquals(3, defaultDataProcessor0.getRetryTime());
      
      defaultDataProcessor0.setRetryTime(0);
      int int0 = defaultDataProcessor0.getRetryTime();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataProvider<DefaultDataProcessor<Object, Object>, DefaultDataProcessor<Object, Object>> dataProvider0 = (DataProvider<DefaultDataProcessor<Object, Object>, DefaultDataProcessor<Object, Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<DefaultDataProcessor<Object, Object>, DefaultDataProcessor<Object, Object>> defaultDataProcessor0 = new DefaultDataProcessor<DefaultDataProcessor<Object, Object>, DefaultDataProcessor<Object, Object>>(0, 0, dataProvider0);
      int int0 = defaultDataProcessor0.getNumPerBatch();
      assertEquals(0, int0);
      assertTrue(defaultDataProcessor0.isRetryNullable());
      assertEquals(3000L, defaultDataProcessor0.getLaunchInterval());
      assertEquals(0, defaultDataProcessor0.getSlicesThreadNum());
      assertEquals(3, defaultDataProcessor0.getRetryTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataProvider<Page<Object>, Page<Delayed>> dataProvider0 = (DataProvider<Page<Object>, Page<Delayed>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, Page<Delayed>> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Page<Delayed>>((-2146414715), 312, dataProvider0);
      int int0 = defaultDataProcessor0.getNumPerBatch();
      assertTrue(defaultDataProcessor0.isRetryNullable());
      assertEquals(3000L, defaultDataProcessor0.getLaunchInterval());
      assertEquals(3, defaultDataProcessor0.getRetryTime());
      assertEquals(312, defaultDataProcessor0.getSlicesThreadNum());
      assertEquals((-2146414715), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataProvider<Object, Page<Object>> dataProvider0 = (DataProvider<Object, Page<Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Object, Page<Object>> defaultDataProcessor0 = new DefaultDataProcessor<Object, Page<Object>>(dataProvider0);
      assertEquals(3000L, defaultDataProcessor0.getLaunchInterval());
      
      defaultDataProcessor0.setLaunchInterval(0L);
      defaultDataProcessor0.getLaunchInterval();
      assertEquals(8, defaultDataProcessor0.getSlicesThreadNum());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDataProcessor<Object, Page<Object>> defaultDataProcessor0 = new DefaultDataProcessor<Object, Page<Object>>((DataProvider<Object, Page<Object>>) null);
      // Undeclared exception!
      try { 
        defaultDataProcessor0.setSlicesThreadNum((-4393));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u5206\u7247\u4EFB\u52A1\u6267\u884C\u7EBF\u7A0B\u6570\u5FC5\u987B\u5927\u4E8E0, slicesThreadNum:-4393
         //
         verifyException("com.github.dataprocessor.DataProcessorTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, Object> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Object>(dataProvider0);
      // Undeclared exception!
      try { 
        defaultDataProcessor0.setRetryTime((-76));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u91CD\u8BD5\u6B21\u6570\u4E0D\u80FD\u4E3A\u8D1F\u6570: retryTime:-76
         //
         verifyException("com.github.dataprocessor.DataProcessorTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDataProcessor<Delayed, Slice<Object>> defaultDataProcessor0 = new DefaultDataProcessor<Delayed, Slice<Object>>((DataProvider<Delayed, Slice<Object>>) null);
      defaultDataProcessor0.setSliceRecorder((SliceRecorder<Slice<Object>>) null);
      // Undeclared exception!
      try { 
        defaultDataProcessor0.resumeProgress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.DataProcessorTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/errorSlice.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, Object> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Object>(dataProvider0);
      // Undeclared exception!
      defaultDataProcessor0.processErrorSlices();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/errorSlice.txt");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultDataProcessor<Page<Object>, Object> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Object>(dataProvider0);
      // Undeclared exception!
      try { 
        defaultDataProcessor0.processErrorSlices();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4FDD\u5B58\u6240\u6709\u5206\u7247\u8BB0\u5F55\u53D1\u751F\u5F02\u5E38
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, Object> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Object>(dataProvider0);
      defaultDataProcessor0.setSliceRecorder((SliceRecorder<Object>) null);
      // Undeclared exception!
      try { 
        defaultDataProcessor0.processErrorSlices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.DataProcessorTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Slice<Object>> linkedHashSet0 = new LinkedHashSet<Slice<Object>>();
      Slice<Object> slice0 = new Slice<Object>(linkedHashSet0, linkedHashSet0);
      linkedHashSet0.add(slice0);
      Slice<Object> slice1 = new Slice<Object>();
      linkedHashSet0.add(slice1);
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(dataProvider0).generateSlices();
      DefaultDataProcessor<Page<Object>, Object> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Object>(dataProvider0);
      // Undeclared exception!
      try { 
        defaultDataProcessor0.process();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/serializer/SerializerFeature
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDataProcessor<Delayed, Page<Object>> defaultDataProcessor0 = new DefaultDataProcessor<Delayed, Page<Object>>((DataProvider<Delayed, Page<Object>>) null, "JW");
      // Undeclared exception!
      try { 
        defaultDataProcessor0.setLaunchInterval((-1808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u542F\u52A8\u95F4\u9694\u4E0D\u80FD\u4E3A\u8D1F\u6570\uFF0ClaunchInterval:-1808
         //
         verifyException("com.github.dataprocessor.DataProcessorTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataProvider<Object, Delayed> dataProvider0 = (DataProvider<Object, Delayed>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Object, Delayed> defaultDataProcessor0 = new DefaultDataProcessor<Object, Delayed>(dataProvider0);
      int int0 = defaultDataProcessor0.getSlicesThreadNum();
      assertEquals(1000, defaultDataProcessor0.getNumPerBatch());
      assertEquals(3000L, defaultDataProcessor0.getLaunchInterval());
      assertTrue(defaultDataProcessor0.isRetryNullable());
      assertEquals(8, int0);
      assertEquals(3, defaultDataProcessor0.getRetryTime());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DataProvider<Object, Page<Object>> dataProvider1 = (DataProvider<Object, Page<Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Object, Page<Object>> defaultDataProcessor0 = new DefaultDataProcessor<Object, Page<Object>>(dataProvider1, "\u6709\u83B7\u53D6\u5230{}\u4E2A\u5931\u8D25\u7684\u5206\u7247\uFF0C\u4F46\u4E4B\u524D\u5DF2\u5168\u90E8\u5904\u7406\u5B8C\u6210");
      // Undeclared exception!
      try { 
        defaultDataProcessor0.setThreadPoolFactory((ThreadPoolFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \u7EBF\u7A0B\u6C60\u5DE5\u5382\u4E0D\u80FD\u4E3A\u7A7A
         //
         verifyException("com.github.dataprocessor.DataProcessorTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataProvider<Object, DefaultDataProcessor<Object, Object>> dataProvider0 = (DataProvider<Object, DefaultDataProcessor<Object, Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Object, DefaultDataProcessor<Object, Object>> defaultDataProcessor0 = new DefaultDataProcessor<Object, DefaultDataProcessor<Object, Object>>(dataProvider0, "");
      defaultDataProcessor0.processErrorSlices();
      DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory(2327);
      defaultDataProcessor0.setThreadPoolFactory(defaultThreadPoolFactory0);
      int int0 = (-976);
      DataProvider<Page<Object>, Object> dataProvider1 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, Object> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Object>(dataProvider0);
      // Undeclared exception!
      try { 
        defaultDataProcessor0.setNumPerBatch((-325));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u6BCF\u6279\u6B21\u7684\u6570\u91CF\u5FC5\u987B\u5927\u4E8E0\uFF0CnumPerBatch:-325
         //
         verifyException("com.github.dataprocessor.DataProcessorTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Slice<Object>> linkedHashSet0 = new LinkedHashSet<Slice<Object>>();
      Slice<Object> slice0 = new Slice<Object>();
      linkedHashSet0.add(slice0);
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(dataProvider0).generateSlices();
      DefaultDataProcessor<Page<Object>, Object> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Object>(dataProvider0);
      // Undeclared exception!
      try { 
        defaultDataProcessor0.process();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // slice\u5BF9\u8C61\u7684\u5F00\u59CB\u548C\u7ED3\u675F\u65F6\u95F4\u4E0D\u80FD\u90FD\u4E3Anull
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataProvider<Object, Delayed> dataProvider0 = (DataProvider<Object, Delayed>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Object, Delayed> defaultDataProcessor0 = new DefaultDataProcessor<Object, Delayed>(dataProvider0, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDataProcessor0.setRetryNullable(false);
      defaultDataProcessor0.processErrorSlices();
      defaultDataProcessor0.isRetryNullable();
      DataProvider<Delayed, Object> dataProvider1 = (DataProvider<Delayed, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Delayed, Object> defaultDataProcessor1 = new DefaultDataProcessor<Delayed, Object>(dataProvider1);
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0);
      defaultDataProcessor1.setSliceRecorder(defaultSliceRecorder0);
      defaultDataProcessor1.getLaunchInterval();
      DataProvider<Delayed, Delayed> dataProvider2 = (DataProvider<Delayed, Delayed>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(dataProvider2).generateSlices();
      DefaultDataProcessor<Delayed, Delayed> defaultDataProcessor2 = new DefaultDataProcessor<Delayed, Delayed>(dataProvider2);
      defaultDataProcessor2.process();
      DataProvider<ForkJoinTask<Object>, ForkJoinTask<Object>> dataProvider3 = (DataProvider<ForkJoinTask<Object>, ForkJoinTask<Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DataProvider<Page<Object>, ForkJoinTask<Object>> dataProvider4 = (DataProvider<Page<Object>, ForkJoinTask<Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DataProvider<Page<Object>, DefaultDataProcessor<Object, Object>> dataProvider1 = (DataProvider<Page<Object>, DefaultDataProcessor<Object, Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      String string0 = "\u65E5\u671F\u7684\u6700\u5927\u503C\u5FC5\u987B\u5927\u4E8E\u6700\u5C0F\u503C, min:";
      DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>>(dataProvider1, "\u65E5\u671F\u7684\u6700\u5927\u503C\u5FC5\u987B\u5927\u4E8E\u6700\u5C0F\u503C, min:");
      DataProvider<Page<Object>, DefaultDataProcessor<Object, Object>> dataProvider2 = defaultDataProcessor0.getDataProvider();
      defaultDataProcessor0.processErrorSlices();
      DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>> defaultDataProcessor1 = new DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>>(dataProvider2);
      // Undeclared exception!
      try { 
        defaultDataProcessor1.resumeProgress();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u6CA1\u6709\u8BFB\u53D6\u5230\u4E0A\u6B21\u6267\u884C\u7684\u5206\u7247\u8BB0\u5F55\uFF0C\u65E0\u6CD5\u6062\u590D\u4E0A\u6B21\u7684\u672A\u5B8C\u6210\u4EFB\u52A1\uFF0C\u8BF7\u91CD\u65B0\u8FDB\u884C\u5168\u91CF\u5904\u7406
         //
         verifyException("com.github.dataprocessor.DataProcessorTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataProvider<Object, DefaultDataProcessor<Object, Object>> dataProvider0 = (DataProvider<Object, DefaultDataProcessor<Object, Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<DefaultDataProcessor<Object, Object>, DefaultDataProcessor<Object, Object>> defaultDataProcessor0 = new DefaultDataProcessor<DefaultDataProcessor<Object, Object>, DefaultDataProcessor<Object, Object>>((DataProvider<DefaultDataProcessor<Object, Object>, DefaultDataProcessor<Object, Object>>) null, "");
      defaultDataProcessor0.setRetryTime(2378);
      DataProvider<Page<Object>, Object> dataProvider1 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataProvider<Object, DefaultDataProcessor<Object, Object>> dataProvider0 = (DataProvider<Object, DefaultDataProcessor<Object, Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DataProvider<Page<Object>, Page<Object>> dataProvider1 = (DataProvider<Page<Object>, Page<Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, Page<Object>> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Page<Object>>(dataProvider1, "");
      int int0 = 2378;
      defaultDataProcessor0.setNumPerBatch(2378);
      defaultDataProcessor0.getNumPerBatch();
      assertEquals(2378, defaultDataProcessor0.getNumPerBatch());
      
      DataProvider<Page<Object>, Object> dataProvider2 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, Object> defaultDataProcessor1 = new DefaultDataProcessor<Page<Object>, Object>(int0, int0, dataProvider2);
      assertEquals(3000L, defaultDataProcessor1.getLaunchInterval());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataProvider<Object, Object> dataProvider0 = (DataProvider<Object, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Object, Object> defaultDataProcessor0 = new DefaultDataProcessor<Object, Object>(dataProvider0);
      boolean boolean0 = defaultDataProcessor0.isRetryNullable();
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(boolean0, linkedList0);
      assertEquals(3, defaultDataProcessor0.getRetryTime());
      assertEquals(8, defaultDataProcessor0.getSlicesThreadNum());
      assertEquals(3000L, defaultDataProcessor0.getLaunchInterval());
      assertEquals(1000, defaultDataProcessor0.getNumPerBatch());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>>((DataProvider<Page<Object>, DefaultDataProcessor<Object, Object>>) null);
      defaultDataProcessor0.getSliceRecorder();
      DataProvider<DefaultDataProcessor<Object, Object>, Object> dataProvider0 = (DataProvider<DefaultDataProcessor<Object, Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataProvider<Page<Object>, DefaultDataProcessor<Object, Object>> dataProvider0 = (DataProvider<Page<Object>, DefaultDataProcessor<Object, Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>>(dataProvider0, "=H|&;0\"UK#ud,0.");
      defaultDataProcessor0.setSlicesThreadNum(871);
      defaultDataProcessor0.getThreadPoolFactory();
      assertEquals(871, defaultDataProcessor0.getSlicesThreadNum());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataProvider<Object, Page<Object>> dataProvider0 = (DataProvider<Object, Page<Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DataProvider<Page<Object>, DefaultDataProcessor<Object, Object>> dataProvider1 = (DataProvider<Page<Object>, DefaultDataProcessor<Object, Object>>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, DefaultDataProcessor<Object, Object>>(dataProvider1);
      SliceParser<DefaultDataProcessor<Object, Object>> sliceParser0 = defaultDataProcessor0.getSliceParser();
      defaultDataProcessor0.setSliceParser(sliceParser0);
      assertTrue(defaultDataProcessor0.isRetryNullable());
      assertEquals(3, defaultDataProcessor0.getRetryTime());
      assertEquals(1000, defaultDataProcessor0.getNumPerBatch());
      assertEquals(3000L, defaultDataProcessor0.getLaunchInterval());
      assertEquals(8, defaultDataProcessor0.getSlicesThreadNum());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataProvider<Page<Object>, Object> dataProvider0 = (DataProvider<Page<Object>, Object>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      DefaultDataProcessor<Page<Object>, Object> defaultDataProcessor0 = new DefaultDataProcessor<Page<Object>, Object>(398, 398, dataProvider0);
      defaultDataProcessor0.getRetryTime();
      defaultDataProcessor0.setLaunchInterval(3);
      defaultDataProcessor0.setRetryNullable(true);
      boolean boolean0 = false;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(398));
  }
}
