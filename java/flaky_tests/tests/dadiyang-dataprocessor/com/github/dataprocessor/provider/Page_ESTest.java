/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 14:50:06 GMT 2022
 */

package com.github.dataprocessor.provider;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.dataprocessor.provider.Page;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(true, linkedList0, (-1459), 0);
      assertEquals((-1459), page0.getPageSize());
      assertEquals(0, page0.getCurrentPage());
      assertTrue(page0.isHasNext());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Page<Integer> page0 = new Page<Integer>(false, linkedList0);
      boolean boolean0 = page0.isHasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Page<Integer> page0 = new Page<Integer>(false, linkedList0);
      int int0 = page0.getPageSize();
      assertFalse(page0.isHasNext());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(true, linkedList0, (-3277));
      page0.setData((List<Object>) null);
      page0.getData();
      assertEquals((-3277), page0.getPageSize());
      assertTrue(page0.isHasNext());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(false, linkedList0, (-2938));
      page0.getData();
      assertEquals((-2938), page0.getPageSize());
      assertFalse(page0.isHasNext());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(false, linkedList0, (-2938));
      page0.setCurrentPage(1);
      int int0 = page0.getCurrentPage();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(true, linkedList0, (-3277));
      page0.setCurrentPage((-3277));
      int int0 = page0.getCurrentPage();
      assertEquals((-3277), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(true, linkedList0, (-3277));
      int int0 = page0.getCurrentPage();
      assertEquals((-3277), page0.getPageSize());
      assertEquals(0, int0);
      assertTrue(page0.isHasNext());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(true, linkedList0, (-3277));
      boolean boolean0 = page0.isHasNext();
      assertTrue(boolean0);
      assertEquals((-3277), page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(true, linkedList0, (-3277));
      page0.setPageSize(1);
      int int0 = page0.getPageSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(true, linkedList0, (-3277));
      int int0 = page0.getPageSize();
      assertTrue(page0.isHasNext());
      assertEquals((-3277), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(true, linkedList0);
      linkedList0.push(page0);
      page0.getData();
      assertTrue(page0.isHasNext());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(true, linkedList0, (-3277));
      assertTrue(page0.isHasNext());
      
      page0.setHasNext(false);
      assertFalse(page0.isHasNext());
  }
}
