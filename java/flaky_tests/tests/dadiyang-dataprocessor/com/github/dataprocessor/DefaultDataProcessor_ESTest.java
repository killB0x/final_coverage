/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 14:49:26 GMT 2022
 */

package com.github.dataprocessor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dataprocessor.DefaultDataProcessor;
import com.github.dataprocessor.provider.DataProvider;
import com.github.dataprocessor.provider.Page;
import com.github.dataprocessor.slice.Slice;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDataProcessor_ESTest extends DefaultDataProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataProvider<Slice<Integer>, Integer> dataProvider0 = (DataProvider<Slice<Integer>, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(dataProvider0).getResources(any(com.github.dataprocessor.slice.Slice.class) , any(com.github.dataprocessor.provider.Page.class));
      DefaultDataProcessor<Slice<Integer>, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Slice<Integer>, Integer>(dataProvider0);
      Slice<Integer> slice0 = new Slice<Integer>();
      Page<Slice<Integer>> page0 = defaultDataProcessor0.getResources(slice0, (Page<Slice<Integer>>) null);
      assertNull(page0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Slice<Integer>> linkedList0 = new LinkedList<Slice<Integer>>();
      Page<Slice<Integer>> page0 = new Page<Slice<Integer>>(true, linkedList0);
      DataProvider<Slice<Integer>, Integer> dataProvider0 = (DataProvider<Slice<Integer>, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(dataProvider0).getResources(any(com.github.dataprocessor.slice.Slice.class) , any(com.github.dataprocessor.provider.Page.class));
      DefaultDataProcessor<Slice<Integer>, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Slice<Integer>, Integer>(dataProvider0);
      Slice<Integer> slice0 = new Slice<Integer>();
      Page<Slice<Integer>> page1 = defaultDataProcessor0.getResources(slice0, page0);
      assertSame(page1, page0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(false, (List<Integer>) null, 8);
      DataProvider<Integer, Integer> dataProvider0 = (DataProvider<Integer, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(dataProvider0).getResources(any(com.github.dataprocessor.slice.Slice.class) , any(com.github.dataprocessor.provider.Page.class));
      DefaultDataProcessor<Integer, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Integer, Integer>(dataProvider0, "");
      Slice<Integer> slice0 = new Slice<Integer>();
      Page<Integer> page1 = defaultDataProcessor0.getResources(slice0, page0);
      assertEquals(8, page1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Slice<Integer>> linkedList0 = new LinkedList<Slice<Integer>>();
      Page<Slice<Integer>> page0 = new Page<Slice<Integer>>(false, linkedList0, 1, 1);
      DataProvider<Slice<Integer>, Integer> dataProvider0 = (DataProvider<Slice<Integer>, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(dataProvider0).getResources(any(com.github.dataprocessor.slice.Slice.class) , any(com.github.dataprocessor.provider.Page.class));
      DefaultDataProcessor<Slice<Integer>, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Slice<Integer>, Integer>(dataProvider0);
      Slice<Integer> slice0 = new Slice<Integer>();
      Page<Slice<Integer>> page1 = defaultDataProcessor0.getResources(slice0, page0);
      assertFalse(page1.isHasNext());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDataProcessor<Slice<Integer>, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Slice<Integer>, Integer>(0, 0, (DataProvider<Slice<Integer>, Integer>) null);
      DataProvider<Slice<Integer>, Integer> dataProvider0 = defaultDataProcessor0.getDataProvider();
      assertNull(dataProvider0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataProvider<Integer, Integer> dataProvider0 = (DataProvider<Integer, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn((Set<Slice<Integer>>) null).when(dataProvider0).generateSlices();
      DefaultDataProcessor<Integer, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Integer, Integer>(869, 2823, dataProvider0);
      Set<Slice<Integer>> set0 = defaultDataProcessor0.generateSlices();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<Slice<Integer>> linkedHashSet0 = new LinkedHashSet<Slice<Integer>>();
      DataProvider<Integer, Integer> dataProvider0 = (DataProvider<Integer, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(dataProvider0).generateSlices();
      DefaultDataProcessor<Integer, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Integer, Integer>(dataProvider0);
      Set<Slice<Integer>> set0 = defaultDataProcessor0.generateSlices();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      DataProvider<Integer, Integer> dataProvider0 = (DataProvider<Integer, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn(callable0).when(dataProvider0).createTask(anyList());
      DefaultDataProcessor<Integer, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Integer, Integer>(dataProvider0);
      Callable<?> callable1 = defaultDataProcessor0.createTask((List<Integer>) null);
      assertNull(callable1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(callable0).toString();
      DataProvider<Integer, Integer> dataProvider0 = (DataProvider<Integer, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn(callable0).when(dataProvider0).createTask(anyList());
      DefaultDataProcessor<Integer, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Integer, Integer>(dataProvider0, "");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Callable<?> callable1 = defaultDataProcessor0.createTask(linkedList0);
      assertNotNull(callable1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDataProcessor<Integer, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Integer, Integer>((DataProvider<Integer, Integer>) null);
      Slice<Integer> slice0 = new Slice<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Page<Integer> page0 = new Page<Integer>(false, linkedList0);
      try { 
        defaultDataProcessor0.getResources(slice0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.DefaultDataProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDataProcessor<Integer, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Integer, Integer>((DataProvider<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        defaultDataProcessor0.generateSlices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.DefaultDataProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Slice<Integer>> linkedList0 = new LinkedList<Slice<Integer>>();
      Page<Slice<Integer>> page0 = new Page<Slice<Integer>>(false, linkedList0, (-638), (-7188));
      DataProvider<Slice<Integer>, Integer> dataProvider0 = (DataProvider<Slice<Integer>, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(dataProvider0).getResources(any(com.github.dataprocessor.slice.Slice.class) , any(com.github.dataprocessor.provider.Page.class));
      DefaultDataProcessor<Slice<Integer>, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Slice<Integer>, Integer>(dataProvider0);
      Slice<Integer> slice0 = new Slice<Integer>();
      Page<Slice<Integer>> page1 = defaultDataProcessor0.getResources(slice0, page0);
      assertEquals((-638), page1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataProvider<Slice<Integer>, Integer> dataProvider0 = (DataProvider<Slice<Integer>, Integer>) mock(DataProvider.class, new ViolatedAssumptionAnswer());
      doReturn("k7J*/=zj\"cQE[J}").when(dataProvider0).toString();
      DefaultDataProcessor<Slice<Integer>, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Slice<Integer>, Integer>(dataProvider0);
      DataProvider<Slice<Integer>, Integer> dataProvider1 = defaultDataProcessor0.getDataProvider();
      DefaultDataProcessor<Slice<Integer>, Integer> defaultDataProcessor1 = new DefaultDataProcessor<Slice<Integer>, Integer>((-565), (-565), dataProvider1);
      assertEquals((-565), defaultDataProcessor1.getNumPerBatch());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDataProcessor<Integer, Integer> defaultDataProcessor0 = new DefaultDataProcessor<Integer, Integer>((DataProvider<Integer, Integer>) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        defaultDataProcessor0.createTask(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.DefaultDataProcessor", e);
      }
  }
}
