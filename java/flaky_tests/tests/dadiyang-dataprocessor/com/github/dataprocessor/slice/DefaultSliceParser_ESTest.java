/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 14:43:12 GMT 2022
 */

package com.github.dataprocessor.slice;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dataprocessor.slice.DefaultSliceParser;
import com.github.dataprocessor.slice.Slice;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSliceParser_ESTest extends DefaultSliceParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      // Undeclared exception!
      try { 
        defaultSliceParser0.parseSlices("Bu__'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u53CD\u5E8F\u5217\u5316\u5931\u8D25\uFF0C\u7C7B\u578B\u9519\u8BEFBu
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      LinkedHashSet<Slice<Object>> linkedHashSet0 = new LinkedHashSet<Slice<Object>>();
      linkedHashSet0.add((Slice<Object>) null);
      // Undeclared exception!
      try { 
        defaultSliceParser0.serialize((Set<Slice<Object>>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSliceParser<Integer> defaultSliceParser0 = new DefaultSliceParser<Integer>();
      // Undeclared exception!
      try { 
        defaultSliceParser0.serialize((Slice<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      // Undeclared exception!
      try { 
        defaultSliceParser0.parseSlices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      // Undeclared exception!
      try { 
        defaultSliceParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      Slice<Object> slice0 = new Slice<Object>(defaultSliceParser0, (Object) null);
      // Undeclared exception!
      try { 
        defaultSliceParser0.serialize(slice0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // slice\u5BF9\u8C61\u7684\u5F00\u59CB\u548C\u7ED3\u675F\u65F6\u95F4\u4E0D\u80FD\u90FD\u4E3Anull
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      Slice<Object> slice0 = new Slice<Object>();
      // Undeclared exception!
      try { 
        defaultSliceParser0.serialize(slice0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // slice\u5BF9\u8C61\u7684\u5F00\u59CB\u548C\u7ED3\u675F\u65F6\u95F4\u4E0D\u80FD\u90FD\u4E3Anull
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      // Undeclared exception!
      try { 
        defaultSliceParser0.parseSlices("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u53CD\u5E8F\u5217\u5316\u5931\u8D25, \u5B57\u7B26\u4E32\u4E2D\u9700\u8981\u5305\u542B\u5207\u7247\u7C7B\u578B:
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      Slice<Object> slice0 = new Slice<Object>(defaultSliceParser0, defaultSliceParser0);
      LinkedHashSet<Slice<Object>> linkedHashSet0 = new LinkedHashSet<Slice<Object>>();
      linkedHashSet0.add(slice0);
      // Undeclared exception!
      try { 
        defaultSliceParser0.serialize((Set<Slice<Object>>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/serializer/SerializerFeature
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      LinkedHashSet<Slice<Object>> linkedHashSet0 = new LinkedHashSet<Slice<Object>>();
      // Undeclared exception!
      try { 
        defaultSliceParser0.serialize((Set<Slice<Object>>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // slices\u5207\u7247\u96C6\u4E0D\u80FD\u4E3A\u7A7A
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      // Undeclared exception!
      try { 
        defaultSliceParser0.serialize((Set<Slice<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // slices\u5207\u7247\u96C6\u4E0D\u80FD\u4E3A\u7A7A
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      // Undeclared exception!
      try { 
        defaultSliceParser0.parse("Bu__'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u53CD\u5E8F\u5217\u5316\u5931\u8D25\uFF0C\u7C7B\u578B\u9519\u8BEFBu
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      Slice<Object> slice0 = new Slice<Object>(defaultSliceParser0, defaultSliceParser0);
      // Undeclared exception!
      try { 
        defaultSliceParser0.serialize(slice0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/serializer/SerializerFeature
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }
}
