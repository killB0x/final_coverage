/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 14:40:54 GMT 2022
 */

package com.github.dataprocessor.slice;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dataprocessor.slice.DefaultSliceParser;
import com.github.dataprocessor.slice.DefaultSliceRecorder;
import com.github.dataprocessor.slice.Slice;
import com.github.dataprocessor.slice.SliceParser;
import java.io.File;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSliceRecorder_ESTest extends DefaultSliceRecorder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      defaultSliceRecorder0.clearRecord();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processHistory/hist_2014-02-14-20_21_21");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      System.setCurrentTimeMillis(1630L);
      defaultSliceRecorder0.clearRecord();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("processHistory/hist_1969-12-31-23_59_59");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "ZD<N}dWjY*y)5n_h.");
      System.setCurrentTimeMillis((-1095L));
      defaultSliceRecorder0.clearRecord();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/completedSlices.txt");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      Set<Slice<File>> set0 = defaultSliceRecorder0.getCompletedSlices();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/errorSlice.txt");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      Slice<File> slice0 = new Slice<File>();
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveErrorSlice(slice0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4FDD\u5B58\u9519\u8BEF\u8BB0\u5F55\u53D1\u751F\u5F02\u5E38
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveErrorSlice((Slice<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0);
      Slice<Object> slice0 = new Slice<Object>(defaultSliceParser0, defaultSliceRecorder0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveErrorSlice(slice0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/serializer/SerializerFeature
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/completedSlices.txt");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      Slice<File> slice0 = new Slice<File>();
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveCompletedSlice(slice0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4FDD\u5B58\u9519\u8BEF\u8BB0\u5F55\u53D1\u751F\u5F02\u5E38
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveCompletedSlice((Slice<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0);
      Slice<Object> slice0 = new Slice<Object>(defaultSliceParser0, defaultSliceRecorder0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveCompletedSlice(slice0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/serializer/SerializerFeature
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>((SliceParser<File>) null);
      LinkedHashSet<Slice<File>> linkedHashSet0 = new LinkedHashSet<Slice<File>>();
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveAllSlices(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0);
      LinkedHashSet<Slice<Object>> linkedHashSet0 = new LinkedHashSet<Slice<Object>>();
      Slice<Object> slice0 = new Slice<Object>(defaultSliceParser0, defaultSliceParser0);
      linkedHashSet0.add(slice0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveAllSlices(linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/serializer/SerializerFeature
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/errorSlice.txt");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.getErrorSlices();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4FDD\u5B58\u6240\u6709\u5206\u7247\u8BB0\u5F55\u53D1\u751F\u5F02\u5E38
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/errorSlice.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "T");
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>((SliceParser<File>) null);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.getErrorSlices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/errorSlice.txt");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@Z5D9^h%-!B6^Gr9/");
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.getErrorSlices();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u53CD\u5E8F\u5217\u5316\u5931\u8D25, \u5B57\u7B26\u4E32\u4E2D\u9700\u8981\u5305\u542B\u5207\u7247\u7C7B\u578B:@Z5D9^h%-!B6^Gr9/
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/completedSlices.txt");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0);
      // Undeclared exception!
      defaultSliceRecorder0.getCompletedSlices();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/completedSlices.txt");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.getCompletedSlices();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4FDD\u5B58\u6240\u6709\u5206\u7247\u8BB0\u5F55\u53D1\u751F\u5F02\u5E38
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/completedSlices.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "9<_7H_,fbS|</");
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.getCompletedSlices();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u53CD\u5E8F\u5217\u5316\u5931\u8D25, \u5B57\u7B26\u4E32\u4E2D\u9700\u8981\u5305\u542B\u5207\u7247\u7C7B\u578B:9<_7H_,fbS|</
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/allSlices.txt");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "__");
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.getAllSlices();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u53CD\u5E8F\u5217\u5316\u5931\u8D25, \u5B57\u7B26\u4E32\u4E2D\u9700\u8981\u5305\u542B\u5207\u7247\u7C7B\u578B:__
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/allSlices.txt");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Set<Slice<File>> set0 = defaultSliceRecorder0.getCompletedSlices();
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveAllSlices(set0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4FDD\u5B58\u6240\u6709\u5206\u7247\u8BB0\u5F55\u53D1\u751F\u5F02\u5E38
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/errorSlice.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      // Undeclared exception!
      defaultSliceRecorder0.getErrorSlices();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/errorSlice.txt");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      Set<Slice<File>> set0 = defaultSliceRecorder0.getErrorSlices();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/completedSlices.txt");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>((SliceParser<File>) null);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.getCompletedSlices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/completedSlices.txt");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>((SliceParser<File>) null);
      defaultSliceRecorder0.clearRecord();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>((SliceParser<File>) null);
      defaultSliceRecorder0.clearRecord();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processHistory/hist_2014-02-14-20_21_21");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      defaultSliceRecorder0.clearRecord();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processHistory");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "D43pf~w`2S~$!/");
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      defaultSliceRecorder0.clearRecord();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/allSlices.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iqS#qjG-6#8hEy'#P");
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>((SliceParser<Object>) null);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.getAllSlices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/allSlices.txt");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0);
      Set<Slice<Object>> set0 = defaultSliceRecorder0.getAllSlices();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("processInfo/allSlices.txt");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>((SliceParser<Object>) null);
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.getAllSlices();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4FDD\u5B58\u6240\u6709\u5206\u7247\u8BB0\u5F55\u53D1\u751F\u5F02\u5E38
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0, "\u4FDD\u5B58\u9519\u8BEF\u8BB0\u5F55\u53D1\u751F\u5F02\u5E38//");
      defaultSliceRecorder0.clearRecord();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0, "ZD<N}dWjY*y)5n_h.");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultSliceParser<Object> defaultSliceParser0 = new DefaultSliceParser<Object>();
      DefaultSliceRecorder<Object> defaultSliceRecorder0 = new DefaultSliceRecorder<Object>(defaultSliceParser0, (String) null);
      Set<Slice<Object>> set0 = defaultSliceRecorder0.getAllSlices();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      Slice<File> slice0 = new Slice<File>();
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveCompletedSlice(slice0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // slice\u5BF9\u8C61\u7684\u5F00\u59CB\u548C\u7ED3\u675F\u65F6\u95F4\u4E0D\u80FD\u90FD\u4E3Anull
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      Set<Slice<File>> set0 = defaultSliceRecorder0.getCompletedSlices();
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveAllSlices(set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // slices\u5207\u7247\u96C6\u4E0D\u80FD\u4E3A\u7A7A
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultSliceParser<File> defaultSliceParser0 = new DefaultSliceParser<File>();
      DefaultSliceRecorder<File> defaultSliceRecorder0 = new DefaultSliceRecorder<File>(defaultSliceParser0);
      Slice<File> slice0 = new Slice<File>();
      // Undeclared exception!
      try { 
        defaultSliceRecorder0.saveErrorSlice(slice0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // slice\u5BF9\u8C61\u7684\u5F00\u59CB\u548C\u7ED3\u675F\u65F6\u95F4\u4E0D\u80FD\u90FD\u4E3Anull
         //
         verifyException("com.github.dataprocessor.slice.DefaultSliceParser", e);
      }
  }
}
