/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 14:45:47 GMT 2022
 */

package com.github.dataprocessor.slice;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dataprocessor.slice.Slice;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Slice_ESTest extends Slice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      slice0.getBegin();
      Slice<Object> slice1 = new Slice<Object>((Object) null, (Object) null);
      slice0.equals((Object) null);
      Integer integer0 = new Integer(0);
      Slice<Integer> slice2 = new Slice<Integer>(integer0, integer0);
      Slice<Object> slice3 = new Slice<Object>(slice2, (Object) null);
      Object object0 = slice3.getBegin();
      slice1.setBegin(object0);
      slice2.getBegin();
      slice2.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1487));
      Slice<Integer> slice0 = new Slice<Integer>(integer0, integer0);
      slice0.hashCode();
      Integer integer1 = new Integer((-1499));
      slice0.setEnd(integer1);
      Integer integer2 = new Integer((-1487));
      slice0.setBegin(integer2);
      Slice<Object> slice1 = new Slice<Object>();
      slice0.toString();
      Slice<Slice<Object>> slice2 = new Slice<Slice<Object>>(slice1, slice1);
      Slice<Object> slice3 = slice2.getBegin();
      slice3.setEnd(slice1);
      slice1.hashCode();
      slice0.setBegin(integer0);
      slice2.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(327);
      Integer integer1 = new Integer(0);
      Slice<Integer> slice0 = new Slice<Integer>(integer0, integer1);
      Integer integer2 = new Integer(0);
      slice0.setEnd(integer2);
      Integer integer3 = new Integer(0);
      slice0.setEnd(integer3);
      Slice<Integer> slice1 = new Slice<Integer>();
      slice1.toString();
      slice1.setEnd(integer1);
      Object object0 = slice1.getEnd();
      boolean boolean0 = slice1.equals(slice0);
      assertFalse(boolean0);
      
      Slice<Object> slice2 = new Slice<Object>(object0, slice1);
      slice2.hashCode();
      Object object1 = new Object();
      String string0 = slice2.toString();
      assertEquals("0-null-0", string0);
      
      slice2.setEnd(object1);
      slice2.toString();
      slice2.toString();
      slice2.getEnd();
      Slice<Slice<Integer>> slice3 = new Slice<Slice<Integer>>(slice0, slice0);
      slice3.getEnd();
      assertFalse(slice0.equals((Object)slice1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(34);
      Slice<Integer> slice0 = new Slice<Integer>(integer0, (Integer) null);
      Slice<Object> slice1 = new Slice<Object>(slice0, (Object) null);
      slice1.getEnd();
      Slice<Slice<Object>> slice2 = new Slice<Slice<Object>>();
      slice2.toString();
      Slice<Slice<Integer>> slice3 = new Slice<Slice<Integer>>();
      Slice<Object> slice4 = new Slice<Object>();
      slice3.setEnd(slice0);
      boolean boolean0 = slice3.equals(slice4);
      assertFalse(slice4.equals((Object)slice1));
      assertFalse(boolean0);
      
      String string0 = slice3.toString();
      assertEquals("null-34-null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      Slice<Object> slice1 = new Slice<Object>();
      Slice<Slice<Object>> slice2 = new Slice<Slice<Object>>(slice1, slice0);
      Object object0 = slice2.getBegin();
      boolean boolean0 = slice0.equals(object0);
      assertTrue(boolean0);
      
      slice0.getEnd();
      assertTrue(slice0.equals((Object)slice1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Slice<Integer> slice0 = new Slice<Integer>();
      Object object0 = new Object();
      slice0.equals(object0);
      Slice<Object> slice1 = new Slice<Object>();
      slice1.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      Slice<Object> slice1 = new Slice<Object>();
      slice1.getBegin();
      Object object0 = slice0.getEnd();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Slice<Integer> slice0 = new Slice<Integer>();
      slice0.hashCode();
      Slice<Object> slice1 = new Slice<Object>(slice0, slice0);
      Object object0 = slice1.getEnd();
      slice0.equals(object0);
      slice0.getBegin();
      Slice<Slice<Object>> slice2 = new Slice<Slice<Object>>();
      slice1.toString();
      Slice<Integer> slice3 = new Slice<Integer>();
      slice3.getEnd();
      Object object1 = slice1.getEnd();
      slice2.hashCode();
      Slice<Object> slice4 = new Slice<Object>((Object) null, object1);
      slice2.equals(slice4);
      slice2.hashCode();
      Slice<Slice<Object>> slice5 = new Slice<Slice<Object>>();
      slice5.setEnd(slice1);
      slice5.setEnd(slice1);
      slice5.getBegin();
      slice1.setBegin((Object) null);
      slice0.toString();
      slice0.toString();
      slice1.equals("null-null");
      slice4.getEnd();
      Slice<Object> slice6 = new Slice<Object>();
      slice6.getBegin();
      slice1.equals((Object) null);
      Integer integer0 = new Integer((-778));
      slice3.setEnd(integer0);
      slice3.toString();
      Object object2 = new Object();
      slice1.setBegin(object2);
      assertFalse(slice1.equals((Object)slice4));
      
      Integer integer1 = new Integer((-778));
      slice3.setBegin(integer1);
      Slice<Slice<Integer>> slice7 = new Slice<Slice<Integer>>();
      slice7.setEnd(slice0);
      assertFalse(slice0.equals((Object)slice3));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Slice<Integer> slice0 = new Slice<Integer>();
      slice0.hashCode();
      Slice<Object> slice1 = new Slice<Object>(slice0, slice0);
      Object object0 = slice1.getEnd();
      boolean boolean0 = slice0.equals(object0);
      assertTrue(boolean0);
      
      slice0.getBegin();
      Slice<Slice<Object>> slice2 = new Slice<Slice<Object>>();
      Integer integer0 = new Integer(0);
      Slice<Integer> slice3 = new Slice<Integer>((Integer) null, integer0);
      Integer integer1 = new Integer((-1298));
      slice3.setEnd(integer1);
      String string0 = slice3.toString();
      assertFalse(slice3.equals((Object)slice0));
      assertEquals("null--1298", string0);
      
      slice0.hashCode();
      Slice<Slice<Integer>> slice4 = new Slice<Slice<Integer>>();
      slice0.toString();
      slice4.hashCode();
      slice0.getEnd();
      slice0.hashCode();
      String string1 = slice1.toString();
      assertEquals("null-null-null-null", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      slice0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      boolean boolean0 = slice0.equals((Object) null);
      assertFalse(boolean0);
      
      slice0.getEnd();
      String string0 = slice0.toString();
      assertEquals("null-null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      String string0 = slice0.toString();
      assertEquals("null-null", string0);
      
      slice0.equals("null-null");
      slice0.getBegin();
      slice0.hashCode();
      Slice<Integer> slice1 = new Slice<Integer>();
      slice0.equals(slice1);
      slice0.toString();
      Object object0 = slice0.getBegin();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      Slice<Object> slice1 = new Slice<Object>(slice0, slice0);
      boolean boolean0 = slice0.equals(slice1);
      assertFalse(boolean0);
      
      String string0 = slice0.toString();
      assertEquals("null-null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      Slice<Slice<Object>> slice1 = new Slice<Slice<Object>>(slice0, slice0);
      slice1.setBegin(slice0);
      String string0 = slice1.toString();
      assertEquals("null-null-null-null", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      Slice<Object> slice1 = new Slice<Object>(slice0, slice0);
      Object object0 = slice1.getEnd();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      Slice<Integer> slice1 = new Slice<Integer>();
      slice0.setEnd(slice1);
      String string0 = slice0.toString();
      assertEquals("null-null-null", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      Integer integer0 = new Integer(484);
      Integer integer1 = new Integer(484);
      Slice<Integer> slice1 = new Slice<Integer>(integer0, integer1);
      slice1.equals((Object) null);
      slice0.setEnd(slice1);
      slice0.getEnd();
      Slice<Integer> slice2 = new Slice<Integer>();
      slice2.toString();
      Integer integer2 = new Integer(0);
      slice2.setBegin(integer2);
      slice2.getEnd();
      Integer integer3 = new Integer(0);
      slice1.setEnd(integer3);
      Slice<Slice<Object>> slice3 = new Slice<Slice<Object>>();
      slice3.setBegin(slice0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Slice<Object> slice0 = new Slice<Object>();
      Object object0 = slice0.getEnd();
      assertNull(object0);
  }
}
