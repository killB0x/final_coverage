/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 06:48:42 GMT 2022
 */

package com.sohu.idcenter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sohu.idcenter.IdWorker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IdWorker_ESTest extends IdWorker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(17L, 17L, 17L);
      long long0 = idWorker0.getId();
      assertEquals(201689717230735360L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(27L);
      IdWorker idWorker0 = null;
      try {
        idWorker0 = new IdWorker(27L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // idepoch is illegal: 27
         //
         verifyException("com.sohu.idcenter.IdWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IdWorker idWorker0 = null;
      try {
        idWorker0 = new IdWorker(0L, (-1261L), 12L, 12L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datacenterId is illegal: 0
         //
         verifyException("com.sohu.idcenter.IdWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(31L, 31L, 31L);
      assertEquals(31L, idWorker0.getWorkerId());
      assertEquals(31L, idWorker0.getDatacenterId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IdWorker idWorker0 = null;
      try {
        idWorker0 = new IdWorker((-984L), 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // workerId is illegal: -984
         //
         verifyException("com.sohu.idcenter.IdWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IdWorker idWorker0 = null;
      try {
        idWorker0 = new IdWorker(2044L, (-1110L), 2044L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // workerId is illegal: 2044
         //
         verifyException("com.sohu.idcenter.IdWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(0L, 0L, (-2121L), 1849L);
      assertEquals(0L, idWorker0.getDatacenterId());
      assertEquals(0L, idWorker0.getWorkerId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(17L, 17L, 17L);
      long long0 = idWorker0.getWorkerId();
      assertEquals(17L, idWorker0.getDatacenterId());
      assertEquals(17L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker((-827L));
      System.setCurrentTimeMillis(0L);
      idWorker0.getTime();
      assertEquals(0L, idWorker0.getWorkerId());
      assertEquals(0L, idWorker0.getDatacenterId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(0L);
      long long0 = idWorker0.getIdTimestamp(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(0L, 0L, 0L, 0L);
      long long0 = idWorker0.getIdTimestamp((-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(31L);
      System.setCurrentTimeMillis(31L);
      long long0 = idWorker0.getId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(17L, 17L, 17L);
      long long0 = idWorker0.getDatacenterId();
      assertEquals(17L, long0);
      assertEquals(17L, idWorker0.getWorkerId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(5L);
      IdWorker idWorker0 = null;
      try {
        idWorker0 = new IdWorker();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // idepoch is illegal: 1344322705519
         //
         verifyException("com.sohu.idcenter.IdWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(31L);
      System.setCurrentTimeMillis((-1L));
      long long0 = idWorker0.getId();
      assertEquals((-134217727L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker((-827L));
      idWorker0.getId();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        idWorker0.getId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Clock moved backwards.
         //
         verifyException("com.sohu.idcenter.IdWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IdWorker idWorker0 = null;
      try {
        idWorker0 = new IdWorker(31L, 247L, 31L, 2225L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datacenterId is illegal: 31
         //
         verifyException("com.sohu.idcenter.IdWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(31L);
      long long0 = idWorker0.getWorkerId();
      assertEquals(0L, long0);
      assertEquals(0L, idWorker0.getDatacenterId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker((-827L));
      idWorker0.getTime();
      assertEquals(0L, idWorker0.getDatacenterId());
      assertEquals(0L, idWorker0.getWorkerId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(31L);
      long long0 = idWorker0.getDatacenterId();
      assertEquals(0L, idWorker0.getWorkerId());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(31L);
      String string0 = idWorker0.toString();
      assertEquals("IdWorker{workerId=0, datacenterId=0, idepoch=31, lastTimestamp=-1, sequence=0}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker();
      System.setCurrentTimeMillis((-3215L));
      idWorker0.getTime();
      assertEquals(0L, idWorker0.getWorkerId());
      assertEquals(0L, idWorker0.getDatacenterId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IdWorker idWorker0 = new IdWorker(17L, 17L, 17L);
      long long0 = idWorker0.getIdTimestamp(17L);
      assertEquals(1344322705519L, long0);
      assertEquals(17L, idWorker0.getWorkerId());
      assertEquals(17L, idWorker0.getDatacenterId());
  }
}
