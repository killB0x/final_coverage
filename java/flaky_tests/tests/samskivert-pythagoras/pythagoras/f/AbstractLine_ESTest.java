/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:23:19 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AbstractLine;
import pythagoras.f.AffineTransform;
import pythagoras.f.Dimension;
import pythagoras.f.IRectangle;
import pythagoras.f.IVector;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Line;
import pythagoras.f.PathIterator;
import pythagoras.f.Point;
import pythagoras.f.Rectangle;
import pythagoras.f.Transform;
import pythagoras.f.Vector;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractLine_ESTest extends AbstractLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point point0 = new Point();
      Line line0 = new Line(point0, point0);
      line0.setLine(0.0F, 816.1305F, 0.0F, Float.NaN);
      Rectangle rectangle0 = line0.bounds();
      assertEquals(Float.NaN, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(Float.NaN, rectangle0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Line line0 = new Line(2858.5137F, (-506.0F), 0.0F, (-970.7957F));
      Rectangle rectangle0 = new Rectangle();
      line0.bounds(rectangle0);
      assertEquals(2858.5137F, rectangle0.width, 0.01F);
      assertEquals(464.79572F, rectangle0.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1162.51F), 2619.1838F, 1076.8146F, (-88.836F));
      affineTransform0.setScale(1076.8146F, 3.4028235E38F);
      Vector vector0 = new Vector(952.3F, (-1645.16F));
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Line line0 = new Line(vector1, vector0);
      Rectangle rectangle0 = line0.bounds();
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(Float.NaN, rectangle0.x, 0.01F);
      assertEquals(Float.NaN, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Line line0 = new Line((-1645.16F), (-1.0F), 1.5707964F, 984.83F);
      Point point0 = new Point((-3017.69F), 1.5707964F);
      Dimension dimension0 = new Dimension((-1.0F), (-1134.266F));
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      line0.bounds(rectangle0);
      assertEquals(985.83F, rectangle0.height, 0.01F);
      assertEquals((-1645.16F), rectangle0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Line line0 = new Line((-336.79F), (-336.79F), (-336.79F), (-336.79F));
      boolean boolean0 = line0.intersects(2223.0F, (-4570.521F), (-1.0F), (-336.79F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Line line0 = new Line((-1.0F), (-1775.1694F), (-1.0F), (-1.0F));
      PathIterator pathIterator0 = line0.pathIterator((Transform) null);
      float[] floatArray0 = new float[4];
      pathIterator0.next();
      assertFalse(pathIterator0.isDone());
      
      int int0 = pathIterator0.currentSegment(floatArray0);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Line line0 = new Line((-2128.975F), 0.017453292F, (-2128.975F), 0.017453292F);
      Point point0 = line0.p2();
      line0.setLine((-1082.6F), (-1.0F), (-1208.528F), (-2128.975F));
      int int0 = line0.relativeCCW((XY) point0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Line line0 = new Line(2521.7F, (-1848.0F), 0.0F, 0.0F);
      Point point0 = new Point((-2128.975F), 180.749F);
      Vector vector0 = new Vector(point0);
      int int0 = line0.relativeCCW((XY) vector0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Line line0 = new Line();
      Vector vector0 = new Vector(1855.38F, 2858.5137F);
      Point point0 = new Point();
      line0.setLine((XY) point0, (XY) vector0);
      int int0 = line0.relativeCCW(2858.5137F, 2858.5137F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Line line0 = new Line();
      line0.setLine((-873.044F), 870.1045F, 870.1045F, 1.0F);
      int int0 = line0.relativeCCW(Float.POSITIVE_INFINITY, (-680.3958F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Line line0 = new Line();
      Vector vector0 = new Vector(0.0F, 0);
      float float0 = line0.pointSegDistSq((XY) vector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-2367.4F), 0.0F, (-2367.4F), (-2367.4F), 0.0F);
      Vector vector0 = new Vector(0.0F, 0.0F);
      Vector vector1 = new Vector(vector0);
      Vector vector2 = affineTransform0.transformPoint(vector1, vector0);
      Line line0 = new Line(vector2, vector2);
      float float0 = line0.pointSegDistSq((XY) vector1);
      assertEquals(5604582.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Line line0 = new Line();
      float float0 = line0.pointSegDistSq(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector vector0 = new Vector(2884.8F, 2884.8F);
      Line line0 = new Line(vector0, vector0);
      float float0 = line0.pointSegDistSq(2884.8F, (float) 0);
      assertEquals(8322071.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Line line0 = new Line();
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      float float0 = line0.pointSegDist((XY) vector0);
      assertEquals(1.4142135F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Line line0 = new Line();
      float float0 = line0.pointSegDist(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Line line0 = new Line();
      line0.x2 = 1.0E-5F;
      Point point0 = new Point();
      float float0 = line0.pointLineDistSq((XY) point0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Line line0 = new Line((-2128.975F), 0.017453292F, (-2128.975F), 0.017453292F);
      Point point0 = line0.p2();
      line0.setLine((-1082.6F), (-1.0F), (-1208.528F), (-2128.975F));
      float float0 = line0.pointLineDistSq((XY) point0);
      assertEquals(1091205.6F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Line line0 = new Line();
      line0.setLine(1.0F, 1626.4F, 0.0F, 0.0F);
      float float0 = line0.pointLineDistSq(0.0F, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Line line0 = new Line((-2128.975F), 0.017453292F, (-2128.975F), 0.017453292F);
      line0.setLine((-1082.6F), (-1.0F), (-1208.528F), (-2128.975F));
      float float0 = line0.pointLineDistSq(0.017453292F, 0.017453292F);
      assertEquals(1167840.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector vector0 = new Vector(952.3F, (-1645.16F));
      Line line0 = new Line(vector0, vector0);
      Point point0 = line0.p1();
      line0.setLine((-3061.011F), (-748.227F), 2648.5093F, 4297.4F);
      line0.p1(point0);
      float float0 = line0.pointLineDist((XY) point0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Line line0 = new Line((-805.72003F), (-805.72003F), (-805.72003F), (-805.72003F));
      line0.x1 = (-529.7489F);
      Vector vector0 = new Vector();
      float float0 = line0.pointLineDist((XY) vector0);
      assertEquals(805.72003F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Line line0 = new Line((-1.0F), (-1775.1694F), (-1.0F), (-1.0F));
      float float0 = line0.pointLineDist((-1.0F), (-1775.1694F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Line line0 = new Line(0.0F, 0.0F, 2858.5137F, 988.62134F);
      float float0 = line0.pointLineDist(363.488F, 2962.401F);
      assertEquals(2680.8809F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Line line0 = new Line(2858.5137F, (-506.0F), 0.0F, (-970.7957F));
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.location();
      Point point1 = line0.p2(point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Line line0 = new Line();
      line0.x2 = 1.0E-5F;
      Dimension dimension0 = new Dimension(1.0E-5F, 0.0F);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Point point0 = rectangle0.location();
      Point point1 = line0.p2(point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Line line0 = new Line((-2128.975F), 0.017453292F, (-2128.975F), 0.017453292F);
      Point point0 = line0.p2();
      Point point1 = line0.p2(point0);
      assertEquals(0.017453292F, point1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Line line0 = new Line(2858.5137F, (-506.0F), 0.0F, (-970.7957F));
      Point point0 = line0.p2();
      assertEquals((-970.7957F), point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Line line0 = new Line(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F);
      Point point0 = line0.p2();
      assertEquals(1.0E-5F, point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Line line0 = new Line(282.39F, (-1775.1694F), 282.39F, (-1.0F));
      Rectangle rectangle0 = new Rectangle((-1415.07F), 282.39F, (-1908.0F), (-1775.1694F));
      Point point0 = rectangle0.min();
      Point point1 = line0.p1(point0);
      assertEquals((-1775.1694F), point1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Line line0 = new Line((-2128.975F), 0.017453292F, (-2128.975F), 0.017453292F);
      Point point0 = line0.p2();
      Point point1 = line0.p1(point0);
      assertEquals((-2128.975F), point1.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector vector0 = new Vector(0.0F, 1.0F);
      Line line0 = new Line(vector0, vector0);
      Point point0 = line0.p1();
      assertEquals(0.0F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Line line0 = new Line();
      Point point0 = line0.p1();
      assertEquals(0.0F, point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Line line0 = new Line((-805.72003F), (-805.72003F), (-805.72003F), (-805.72003F));
      Point point0 = line0.p1();
      assertEquals((-805.72003F), point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Line line0 = new Line((-1.0F), (-161.8592F), (-1.0F), 1.0F);
      Rectangle rectangle0 = new Rectangle((-161.8592F), 0.0F, 1.0F, 1.0F);
      boolean boolean0 = line0.intersects((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Line line0 = new Line();
      boolean boolean0 = line0.intersects(0.0F, 0.0F, 0.0F, 2476.8F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Line line0 = new Line(282.39F, (-1775.1694F), 282.39F, (-1.0F));
      Line line1 = line0.clone();
      assertEquals(282.39F, line1.x1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Line line0 = new Line((-2128.975F), 0.017453292F, (-2128.975F), 0.017453292F);
      Line line1 = line0.clone();
      assertFalse(line1.equals((Object)line0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector vector0 = new Vector(952.3F, (-1645.16F));
      Line line0 = new Line(vector0, vector0);
      Rectangle rectangle0 = line0.bounds();
      Rectangle rectangle1 = line0.bounds(rectangle0);
      assertEquals(0.0F, rectangle1.height, 0.01F);
      assertEquals((-1645.16F), rectangle1.y, 0.01F);
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertEquals(952.3F, rectangle1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.relativeCCW((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.pointSegDist((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.pointLineDistSq((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.pointLineDist((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.p2((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.p1((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Line line0 = new Line((-2128.975F), 0.017453292F, (-2128.975F), 0.017453292F);
      Point point0 = line0.p2();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      Rectangle rectangle1 = line0.bounds(rectangle0);
      assertEquals(0.0F, rectangle1.height, 0.01F);
      assertEquals(0.017453292F, rectangle1.y, 0.01F);
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertEquals((-2128.975F), rectangle1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point point0 = new Point();
      Line line0 = new Line(point0, point0);
      Point point1 = line0.p1(point0);
      assertEquals(0.0F, point1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Line line0 = new Line();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, identityTransform0);
      assertFalse(abstractLine_Iterator0.isDone());
      
      float[] floatArray0 = new float[2];
      int int0 = abstractLine_Iterator0.currentSegment(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Line line0 = new Line();
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, (Transform) null);
      abstractLine_Iterator0.next();
      abstractLine_Iterator0.next();
      // Undeclared exception!
      try { 
        abstractLine_Iterator0.currentSegment((float[]) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.f.AbstractLine$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Line line0 = new Line(0.0F, 0.0F, (-635.72F), 984.83F);
      Rectangle rectangle0 = line0.bounds();
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals((-635.72F), rectangle0.x, 0.01F);
      assertEquals(984.83F, rectangle0.height, 0.01F);
      assertEquals(635.72F, rectangle0.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Line line0 = new Line();
      line0.x2 = 1.0E-5F;
      Rectangle rectangle0 = new Rectangle();
      line0.bounds(rectangle0);
      assertEquals(1.0E-5F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Line line0 = new Line();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(identityTransform0);
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, affineTransform0);
      int int0 = abstractLine_Iterator0.windingRule();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector vector0 = new Vector();
      Point point0 = new Point(vector0);
      Line line0 = new Line(vector0, point0);
      boolean boolean0 = line0.contains(2132.6912F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Line line0 = new Line();
      Point point0 = new Point((-2128.975F), 180.749F);
      Vector vector0 = new Vector(point0);
      int int0 = line0.relativeCCW((XY) vector0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      boolean boolean0 = line0.contains((IRectangle) rectangle0);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, rectangle0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.pointSegDistSq((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Line line0 = new Line();
      boolean boolean0 = line0.contains(0.0F, 0.0F, (-529.7489F), (-529.7489F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Line line0 = new Line();
      int int0 = line0.relativeCCW(Float.POSITIVE_INFINITY, (-680.3958F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Line line0 = new Line();
      boolean boolean0 = line0.contains((XY) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Line line0 = new Line();
      float float0 = line0.pointSegDist((-1775.1694F), 0.0F);
      assertEquals(1775.1694F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Line line0 = new Line();
      Line line1 = line0.clone();
      assertTrue(line1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector vector0 = new Vector(952.3F, (-1645.16F));
      Line line0 = new Line(vector0, vector0);
      float float0 = line0.pointLineDistSq(Float.NaN, 0.0F);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Line line0 = new Line();
      boolean boolean0 = line0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Line line0 = new Line();
      Point point0 = line0.p2();
      assertEquals(0.0F, point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector vector0 = new Vector(952.3F, (-1645.16F));
      Line line0 = new Line(vector0, vector0);
      float float0 = line0.pointSegDist((XY) vector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      boolean boolean0 = line0.intersects((IRectangle) rectangle0);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1162.51F), 2619.1838F, 1076.8146F, (-88.836F));
      Vector vector0 = new Vector(952.3F, (-1645.16F));
      Line line0 = new Line(vector0, vector0);
      PathIterator pathIterator0 = line0.pathIterator((Transform) affineTransform0, (-1775.1694F));
      assertEquals(1, pathIterator0.windingRule());
  }
}
