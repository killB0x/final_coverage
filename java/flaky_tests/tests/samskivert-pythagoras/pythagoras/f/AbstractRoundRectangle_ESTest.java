/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:21:36 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AbstractRoundRectangle;
import pythagoras.f.AffineTransform;
import pythagoras.f.IRoundRectangle;
import pythagoras.f.IdentityTransform;
import pythagoras.f.PathIterator;
import pythagoras.f.Point;
import pythagoras.f.RoundRectangle;
import pythagoras.f.Transform;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractRoundRectangle_ESTest extends AbstractRoundRectangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0E-5F, 1.0E-5F, 1.0E-5F, 1026.8676F, 1.0E-5F, 3.1415927F);
      AffineTransform affineTransform0 = new AffineTransform(1470.626F, 1.0E-5F, 0.5F, 10.0F, 0.5F);
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      float[] floatArray0 = new float[7];
      abstractRoundRectangle_Iterator0.next();
      abstractRoundRectangle_Iterator0.next();
      abstractRoundRectangle_Iterator0.next();
      assertFalse(abstractRoundRectangle_Iterator0.isDone());
      
      int int0 = abstractRoundRectangle_Iterator0.currentSegment(floatArray0);
      assertArrayEquals(new float[] {(-722881.3F), 0.5089978F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0E-5F, 1.0E-5F, 1.0E-5F, 1026.8676F, 1.0E-5F, 3.1415927F);
      AffineTransform affineTransform0 = new AffineTransform(1470.626F, 1.0E-5F, 0.5F, 10.0F, 0.5F);
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      float[] floatArray0 = new float[7];
      abstractRoundRectangle_Iterator0.next();
      assertFalse(abstractRoundRectangle_Iterator0.isDone());
      
      int int0 = abstractRoundRectangle_Iterator0.currentSegment(floatArray0);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {10.012308F, 0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0F, 1.0F, 3444.9917F, 6.2831855F, 3354.5286F, 3444.9917F);
      roundRectangle0.setFrameFromDiagonal(1.0F, (float) 4, 3444.9917F, 3444.4917F);
      boolean boolean0 = roundRectangle0.intersects(3444.4917F, 1724.2458F, 1.0F, 1724.2458F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrameFromCenter(297.38196F, (-2972.1675F), 444.592F, 444.592F);
      boolean boolean0 = roundRectangle0.intersects(297.38196F, 297.38196F, 297.38196F, 297.38196F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 2.0F, (-721.9228F), 1023.726F);
      boolean boolean0 = roundRectangle0.intersects((-556.36F), (float) 1, 1023.726F, 1.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 1.0E-5F, (-721.9228F), 1023.726F);
      boolean boolean0 = roundRectangle0.intersects(2.0F, 1755.9343F, 1.0E-5F, (float) 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-1378.0F), (-1378.0F), 3444.9917F, 6.2831855F, 3444.9917F, 3444.9917F);
      boolean boolean0 = roundRectangle0.intersects(6.2831855F, 350.7194F, 0.0F, (-0.5F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(57.295776F, 68.4445F, 513.1329F, 68.4445F);
      boolean boolean0 = roundRectangle0.contains(1.0F, (-821.24554F), 513.1329F, (-48.3F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-1378.0F), (-1378.0F), 3444.9917F, 6.2831855F, 3354.5286F, 3444.9917F);
      boolean boolean0 = roundRectangle0.contains(1.5707964F, (float) 4, (-1439.0F), 1083.1F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0F, 1.0F, 3444.9917F, 6.2831855F, 3354.5286F, 3444.9917F);
      AffineTransform affineTransform0 = new AffineTransform(3444.9917F, 124.04F, 3444.9917F, 3444.9917F, 0.0F, 0.0F);
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      boolean boolean0 = abstractRoundRectangle_Iterator0.isDone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.5707964F, 3444.9917F, (-1371.7168F), 1.5707964F, (-13.4117F), 2243.9395F);
      RoundRectangle roundRectangle1 = roundRectangle0.clone();
      assertNotSame(roundRectangle0, roundRectangle1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2048.9849F, 2334.21F, 2048.9849F, 0.017453292F, 2334.21F, 2334.21F);
      roundRectangle0.setRoundRect(0.017453292F, 0.017453292F, 0.017453292F, (-472.29398F), (-988.17F), (-472.29398F));
      RoundRectangle roundRectangle1 = roundRectangle0.clone();
      assertEquals((-472.29398F), roundRectangle1.archeight, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      RoundRectangle roundRectangle1 = roundRectangle0.clone();
      assertEquals(0.0F, roundRectangle1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-0.18638098F), (-0.18638098F), 0, 0, (-0.18638098F), (-0.18638098F));
      RoundRectangle roundRectangle1 = roundRectangle0.clone();
      assertEquals((-0.18638098F), roundRectangle1.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0F, 1.0F, 3444.9917F, 6.2831855F, 3354.5286F, 3444.9917F);
      roundRectangle0.setFrameFromDiagonal(3354.5286F, 124.04F, 0.017453292F, (-6.023415E-4F));
      boolean boolean0 = roundRectangle0.contains(2.0F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0F, 1.0F, 3444.9917F, 6.2831855F, 3354.5286F, 3444.9917F);
      roundRectangle0.setFrameFromDiagonal(1.0F, 0.22385764F, 3444.9917F, 3444.4917F);
      boolean boolean0 = roundRectangle0.contains(2.7182817F, 1723.4958F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0F, 1.0F, 3444.9917F, 6.2831855F, 3354.5286F, 3444.9917F);
      Point point0 = roundRectangle0.center();
      RoundRectangle roundRectangle1 = new RoundRectangle(3444.9917F, 0.6666667F, 1603.7173F, 0.5F, 3444.9917F, 4);
      roundRectangle1.setFrameFromDiagonal(3354.5286F, 124.04F, 0.017453292F, (-6.023415E-4F));
      boolean boolean0 = roundRectangle1.contains((XY) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 1.0E-5F, 1.0E-5F, 2.0F);
      Point point0 = roundRectangle0.center();
      boolean boolean0 = roundRectangle0.contains((XY) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 1.0E-5F, (-721.9228F), 2.0F);
      boolean boolean0 = roundRectangle0.contains(6.2831855F, 1841.3F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0F, 1.0F, 3444.9917F, 6.2831855F, 1.0F, 3444.9917F);
      boolean boolean0 = roundRectangle0.contains(3113.9F, 3444.7893F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 1.0E-5F, (-721.9228F), 2.0F);
      boolean boolean0 = roundRectangle0.contains(2.0F, (-721.9228F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, (Transform) null);
      float[] floatArray0 = new float[2];
      int int0 = abstractRoundRectangle_Iterator0.currentSegment(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 1.0E-5F, (-721.9228F), 2.0F);
      AffineTransform affineTransform0 = new AffineTransform(501.72385F, 2.0F, 1.0E-5F, 2.0F, 2.0F, 1.0E-5F);
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      assertFalse(abstractRoundRectangle_Iterator0.isDone());
      
      float[] floatArray0 = new float[20];
      int int0 = abstractRoundRectangle_Iterator0.currentSegment(floatArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      RoundRectangle roundRectangle0 = new RoundRectangle((-0.18638098F), (-0.18638098F), 0, 0, (-0.18638098F), (-0.18638098F));
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, identityTransform0);
      abstractRoundRectangle_Iterator0.next();
      // Undeclared exception!
      try { 
        abstractRoundRectangle_Iterator0.currentSegment((float[]) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.f.AbstractRoundRectangle$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 0, 0, 2.0F, (-255.688F));
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, identityTransform0);
      assertFalse(abstractRoundRectangle_Iterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, (-1390.2F), 2.0F, (-255.688F));
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, identityTransform0);
      assertFalse(abstractRoundRectangle_Iterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame((-634.2F), (-634.2F), (-634.2F), (-634.2F));
      PathIterator pathIterator0 = roundRectangle0.pathIterator((Transform) null);
      assertEquals(1, pathIterator0.windingRule());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 1.0E-5F, 1.0E-5F, 2.0F);
      boolean boolean0 = roundRectangle0.intersects(1.0F, 0.0F, 2.0F, 10.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0E-5F, 1.0E-5F, 1.0E-5F, 989.3418F, 1.0E-5F, 1.0E-5F);
      boolean boolean0 = roundRectangle0.intersects(1.0E-5F, 989.3418F, 989.3418F, 989.3418F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 1.0E-5F, (-721.9228F), 2.0F);
      roundRectangle0.setFrameFromDiagonal(2652.345F, 1700.9F, (float) 0, 2.0F);
      boolean boolean0 = roundRectangle0.intersects(1.0E-5F, 2.0F, 1.0E-5F, 2.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 1.0E-5F, (-721.9228F), 2.0F);
      roundRectangle0.setFrameFromDiagonal(2652.345F, 1700.9F, (float) 0, 2.0F);
      boolean boolean0 = roundRectangle0.intersects((-0.5F), 1973.754F, 0.5F, 2.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1026.2288F, 2.4762828F, 1.5E-5F, 1026.2288F, (-1750.8412F), 2.4762828F);
      boolean boolean0 = roundRectangle0.intersects(1026.2288F, (-1750.8412F), 2.4762828F, 1.5E-5F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F);
      boolean boolean0 = roundRectangle0.intersects(296.0F, 296.0F, 1.0E-5F, 1.0E-5F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0E-5F, 1.0E-5F, 1.0E-5F, 989.3418F, 1.0E-5F, 1.0E-5F);
      boolean boolean0 = roundRectangle0.intersects((-539.2032F), 3.999995F, 1.0E-5F, 1.0E-5F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(1474.1478F, 1474.1478F, 1474.1478F, 1474.1478F);
      boolean boolean0 = roundRectangle0.intersects(1474.1478F, (-2350.6F), 1474.1478F, (-2350.6F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0E-5F, 1.0E-5F, 1.0E-5F, 1026.8676F, 1.0E-5F, 3.1415927F);
      boolean boolean0 = roundRectangle0.intersects(1696.7F, 57.295776F, (-825.0F), 376.38034F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      boolean boolean0 = roundRectangle0.intersects(0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(1049.4183F, 1049.4183F, 1049.4183F, 1049.4183F);
      boolean boolean0 = roundRectangle0.contains(0.0F, 1049.4183F, 1049.4183F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(2377.6213F, 2377.6213F, 2377.6213F, 2377.6213F);
      boolean boolean0 = roundRectangle0.contains(2377.6213F, 2377.6213F, 0.0F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      boolean boolean0 = roundRectangle0.contains(0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      RoundRectangle roundRectangle1 = new RoundRectangle(1474.0F, 6.2831855F, 5302.5005F, 1474.0F, 2430.6567F, 1474.0F);
      roundRectangle0.setRoundRect((IRoundRectangle) roundRectangle1);
      boolean boolean0 = roundRectangle0.contains(1474.0F, 1474.0F, 54.14372F, 54.14372F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(1480.7F, 1480.7F, 1480.7F, 1480.7F);
      roundRectangle0.arcwidth = 1480.7F;
      boolean boolean0 = roundRectangle0.contains(1480.7F, 1480.7F, 1473.8209F, 1473.8209F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(2416.561F, 2416.561F, 2416.561F, 2416.561F);
      boolean boolean0 = roundRectangle0.contains(2416.561F, 2416.561F, 0.49984646F, 2416.561F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(2416.561F, 2416.561F, 2416.561F, 2416.561F);
      boolean boolean0 = roundRectangle0.contains(2416.561F, 2416.561F, 2416.561F, 2416.561F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 2.0F, (-721.9228F), 1023.726F);
      boolean boolean0 = roundRectangle0.contains((-3076.6152F), (-721.9228F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      boolean boolean0 = roundRectangle0.contains(0.6666667F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0E-5F, 1.0E-5F, 1.0E-5F, 1026.8676F, 1.0E-5F, 3.1415927F);
      boolean boolean0 = roundRectangle0.intersects(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2.0F, 2.0F, 2.0F, 1.0E-5F, 1.0E-5F, 2.0F);
      AffineTransform affineTransform0 = new AffineTransform(501.72385F, 2.0F, 1.0E-5F, 2.0F, 2.0F, 2094.009F);
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      int int0 = abstractRoundRectangle_Iterator0.windingRule();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0E-5F, 1.0E-5F, 1.0E-5F, 1026.8676F, 1.0E-5F, 3.1415927F);
      RoundRectangle roundRectangle1 = roundRectangle0.clone();
      assertEquals(3.1415927F, roundRectangle1.arcHeight(), 0.01F);
  }
}
