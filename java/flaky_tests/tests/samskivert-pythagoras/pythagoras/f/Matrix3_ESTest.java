/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:41:52 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.FloatBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IMatrix3;
import pythagoras.f.IQuaternion;
import pythagoras.f.IVector;
import pythagoras.f.IVector3;
import pythagoras.f.Matrix3;
import pythagoras.f.Point;
import pythagoras.f.Quaternion;
import pythagoras.f.Vector;
import pythagoras.f.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrix3_ESTest extends Matrix3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      boolean boolean0 = matrix3_0.equals(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      
      matrix3_1.m02 = 165.3586F;
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(165.3586F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      
      boolean boolean0 = matrix3_0.equals(matrix3_1);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(165.3586F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(165.3586F, matrix3_1.m02, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      
      matrix3_0.m11 = 0.0F;
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      
      boolean boolean0 = matrix3_0.equals(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.setToTranslation((-1.0F), (-136.0059F));
      assertNotNull(matrix3_2);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m20(), 0.01F);
      assertEquals((-136.0059F), matrix3_1.m21(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-1.0F), matrix3_2.m20(), 0.01F);
      assertEquals((-136.0059F), matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1.0F), matrix3_1.m20, 0.01F);
      assertEquals((-136.0059F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals((-1.0F), matrix3_2.m20, 0.01F);
      assertEquals((-136.0059F), matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      
      boolean boolean0 = matrix3_0.equals(matrix3_1);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m20(), 0.01F);
      assertEquals((-136.0059F), matrix3_1.m21(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1.0F), matrix3_1.m20, 0.01F);
      assertEquals((-136.0059F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(1.0F, 1.0F, 2283.8943F, (-2871.445F), 0.0F, 1.0F, (-1156.7F), 0.0F, 1.0E-5F);
      assertNotNull(matrix3_1);
      assertEquals(2283.8943F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0E-5F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(1.0F, matrix3_1.m10(), 0.01F);
      assertEquals((-1156.7F), matrix3_1.m02(), 0.01F);
      assertEquals((-2871.445F), matrix3_1.m01(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(1.0E-5F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals((-2871.445F), matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(2283.8943F, matrix3_1.m20, 0.01F);
      assertEquals((-1156.7F), matrix3_1.m02, 0.01F);
      
      boolean boolean0 = matrix3_1.equals(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(2283.8943F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0E-5F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(1.0F, matrix3_1.m10(), 0.01F);
      assertEquals((-1156.7F), matrix3_1.m02(), 0.01F);
      assertEquals((-2871.445F), matrix3_1.m01(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0E-5F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals((-2871.445F), matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(2283.8943F, matrix3_1.m20, 0.01F);
      assertEquals((-1156.7F), matrix3_1.m02, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-597.9812F), (-597.9812F), (-1650.0F), 549.398F, (-1650.0F), (-1650.0F), 1764.1895F, 0.99999F, 0.99999F);
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1650.0F), matrix3_0.m20(), 0.01F);
      assertEquals((-597.9812F), matrix3_0.m00(), 0.01F);
      assertEquals(1764.1895F, matrix3_0.m02(), 0.01F);
      assertEquals((-597.9812F), matrix3_0.m10(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m22(), 0.01F);
      assertEquals((-1650.0F), matrix3_0.m11(), 0.01F);
      assertEquals(549.398F, matrix3_0.m01(), 0.01F);
      assertEquals((-1650.0F), matrix3_0.m21(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m12(), 0.01F);
      assertEquals((-1650.0F), matrix3_0.m20, 0.01F);
      assertEquals((-597.9812F), matrix3_0.m10, 0.01F);
      assertEquals((-597.9812F), matrix3_0.m00, 0.01F);
      assertEquals(1764.1895F, matrix3_0.m02, 0.01F);
      assertEquals(0.99999F, matrix3_0.m22, 0.01F);
      assertEquals((-1650.0F), matrix3_0.m21, 0.01F);
      assertEquals(0.99999F, matrix3_0.m12, 0.01F);
      assertEquals((-1650.0F), matrix3_0.m11, 0.01F);
      assertEquals(549.398F, matrix3_0.m01, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.lerpAffine((IMatrix3) matrix3_1, 0.0F);
      assertNotNull(matrix3_2);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1650.0F), matrix3_0.m20(), 0.01F);
      assertEquals((-597.9812F), matrix3_0.m00(), 0.01F);
      assertEquals(1764.1895F, matrix3_0.m02(), 0.01F);
      assertEquals((-597.9812F), matrix3_0.m10(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m22(), 0.01F);
      assertEquals((-1650.0F), matrix3_0.m11(), 0.01F);
      assertEquals(549.398F, matrix3_0.m01(), 0.01F);
      assertEquals((-1650.0F), matrix3_0.m21(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-597.9812F), matrix3_2.m00(), 0.01F);
      assertEquals((-597.9812F), matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals((-1650.0F), matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals((-1650.0F), matrix3_2.m11(), 0.01F);
      assertEquals(549.398F, matrix3_2.m01(), 0.01F);
      assertEquals((-1650.0F), matrix3_2.m21(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-1650.0F), matrix3_0.m20, 0.01F);
      assertEquals((-597.9812F), matrix3_0.m10, 0.01F);
      assertEquals((-597.9812F), matrix3_0.m00, 0.01F);
      assertEquals(1764.1895F, matrix3_0.m02, 0.01F);
      assertEquals(0.99999F, matrix3_0.m22, 0.01F);
      assertEquals((-1650.0F), matrix3_0.m21, 0.01F);
      assertEquals(0.99999F, matrix3_0.m12, 0.01F);
      assertEquals((-1650.0F), matrix3_0.m11, 0.01F);
      assertEquals(549.398F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals((-1650.0F), matrix3_2.m21, 0.01F);
      assertEquals((-1650.0F), matrix3_2.m11, 0.01F);
      assertEquals(549.398F, matrix3_2.m01, 0.01F);
      assertEquals((-597.9812F), matrix3_2.m10, 0.01F);
      assertEquals((-597.9812F), matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals((-1650.0F), matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      boolean boolean0 = matrix3_1.equals(matrix3_2);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1650.0F), matrix3_0.m20(), 0.01F);
      assertEquals((-597.9812F), matrix3_0.m00(), 0.01F);
      assertEquals(1764.1895F, matrix3_0.m02(), 0.01F);
      assertEquals((-597.9812F), matrix3_0.m10(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m22(), 0.01F);
      assertEquals((-1650.0F), matrix3_0.m11(), 0.01F);
      assertEquals(549.398F, matrix3_0.m01(), 0.01F);
      assertEquals((-1650.0F), matrix3_0.m21(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-597.9812F), matrix3_2.m00(), 0.01F);
      assertEquals((-597.9812F), matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals((-1650.0F), matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals((-1650.0F), matrix3_2.m11(), 0.01F);
      assertEquals(549.398F, matrix3_2.m01(), 0.01F);
      assertEquals((-1650.0F), matrix3_2.m21(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-1650.0F), matrix3_0.m20, 0.01F);
      assertEquals((-597.9812F), matrix3_0.m10, 0.01F);
      assertEquals((-597.9812F), matrix3_0.m00, 0.01F);
      assertEquals(1764.1895F, matrix3_0.m02, 0.01F);
      assertEquals(0.99999F, matrix3_0.m22, 0.01F);
      assertEquals((-1650.0F), matrix3_0.m21, 0.01F);
      assertEquals(0.99999F, matrix3_0.m12, 0.01F);
      assertEquals((-1650.0F), matrix3_0.m11, 0.01F);
      assertEquals(549.398F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals((-1650.0F), matrix3_2.m21, 0.01F);
      assertEquals((-1650.0F), matrix3_2.m11, 0.01F);
      assertEquals(549.398F, matrix3_2.m01, 0.01F);
      assertEquals((-597.9812F), matrix3_2.m10, 0.01F);
      assertEquals((-597.9812F), matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals((-1650.0F), matrix3_2.m20, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-479.4F), (-0.6666666F), 0.0F, 0.99999F, 0.0F, 1274.39F, 0.0F, (-2137.7908F), 844.494F);
      assertNotNull(matrix3_0);
      assertEquals(1274.39F, matrix3_0.m21(), 0.01F);
      assertEquals((-479.4F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.6666666F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(844.494F, matrix3_0.m22(), 0.01F);
      assertEquals((-2137.7908F), matrix3_0.m12(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals((-2137.7908F), matrix3_0.m12, 0.01F);
      assertEquals(0.99999F, matrix3_0.m01, 0.01F);
      assertEquals((-479.4F), matrix3_0.m00, 0.01F);
      assertEquals(1274.39F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-0.6666666F), matrix3_0.m10, 0.01F);
      assertEquals(844.494F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      matrix3_0.hashCode();
      assertEquals(1274.39F, matrix3_0.m21(), 0.01F);
      assertEquals((-479.4F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.6666666F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(844.494F, matrix3_0.m22(), 0.01F);
      assertEquals((-2137.7908F), matrix3_0.m12(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals((-2137.7908F), matrix3_0.m12, 0.01F);
      assertEquals(0.99999F, matrix3_0.m01, 0.01F);
      assertEquals((-479.4F), matrix3_0.m00, 0.01F);
      assertEquals(1274.39F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-0.6666666F), matrix3_0.m10, 0.01F);
      assertEquals(844.494F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F);
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      matrix3_0.hashCode();
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IVector3) vector3_0, (IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_1.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      float float0 = matrix3_1.extractRotation();
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_1.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertEquals(Float.NaN, float0, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(0.6787218F, 0.5F, 1728.435F);
      assertNotNull(matrix3_1);
      assertEquals(0.5F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1728.435F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.6787218F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.5F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1728.435F, matrix3_1.m22(), 0.01F);
      assertEquals(0.6787218F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.6787218F, matrix3_0.m00, 0.01F);
      assertEquals(0.5F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1728.435F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.6787218F, matrix3_1.m00, 0.01F);
      assertEquals(0.5F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1728.435F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      boolean boolean0 = matrix3_1.isAffine();
      assertEquals(0.5F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1728.435F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.6787218F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.5F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1728.435F, matrix3_1.m22(), 0.01F);
      assertEquals(0.6787218F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.6787218F, matrix3_0.m00, 0.01F);
      assertEquals(0.5F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1728.435F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.6787218F, matrix3_1.m00, 0.01F);
      assertEquals(0.5F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1728.435F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertFalse(boolean0);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float[] floatArray0 = new float[9];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertNotNull(floatBuffer0);
      assertEquals(0, floatBuffer0.position());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(9, floatBuffer0.remaining());
      assertEquals(9, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(9, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=9 cap=9]", floatBuffer0.toString());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      FloatBuffer floatBuffer1 = matrix3_0.get(floatBuffer0);
      assertNotNull(floatBuffer1);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(floatBuffer0.hasArray());
      assertFalse(floatBuffer0.hasRemaining());
      assertEquals(9, floatBuffer0.capacity());
      assertFalse(floatBuffer0.isReadOnly());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(9, floatBuffer0.position());
      assertEquals(9, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(0, floatBuffer0.remaining());
      assertEquals("java.nio.HeapFloatBuffer[pos=9 lim=9 cap=9]", floatBuffer0.toString());
      assertEquals(0, floatBuffer1.remaining());
      assertFalse(floatBuffer1.isReadOnly());
      assertFalse(floatBuffer1.hasRemaining());
      assertEquals(0, floatBuffer1.arrayOffset());
      assertEquals(9, floatBuffer1.position());
      assertTrue(floatBuffer1.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=9 lim=9 cap=9]", floatBuffer1.toString());
      assertFalse(floatBuffer1.isDirect());
      assertEquals(9, floatBuffer1.capacity());
      assertEquals(9, floatBuffer1.limit());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(floatBuffer0, floatBuffer1);
      assertSame(floatBuffer1, floatBuffer0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      float[] floatArray0 = new float[7];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertNotNull(floatBuffer0);
      assertTrue(floatBuffer0.hasArray());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(7, floatBuffer0.remaining());
      assertEquals(0, floatBuffer0.position());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=7 cap=7]", floatBuffer0.toString());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(7, floatBuffer0.limit());
      assertEquals(7, floatBuffer0.capacity());
      assertFalse(floatBuffer0.isDirect());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      // Undeclared exception!
      try { 
        matrix3_0.get(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transposeLocal();
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.5F, matrix3_0.m20(), 0.01F);
      assertEquals(4.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(4.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m01(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m12(), 0.01F);
      assertEquals(0.5F, matrix3_1.m20(), 0.01F);
      assertEquals(0.5F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m12, 0.01F);
      assertEquals(4.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m01, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m12, 0.01F);
      assertEquals(4.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.5F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m10, 0.01F);
      assertEquals((-2.0F), matrix3_1.m00, 0.01F);
      assertEquals((-1.0F), matrix3_1.m11, 0.01F);
      assertEquals((-2.0F), matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[6] = 57.295776F;
      Matrix3 matrix3_0 = new Matrix3(floatArray0);
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(57.295776F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(57.295776F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 57.295776F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Matrix3 matrix3_1 = matrix3_0.transposeLocal();
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(57.295776F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(57.295776F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(57.295776F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(57.295776F, matrix3_1.m20, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 57.295776F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-479.4F), (-0.6666666F), 0.0F, 0.99999F, 0.0F, 1274.39F, 0.0F, (-2137.7908F), 844.494F);
      assertNotNull(matrix3_0);
      assertEquals((-479.4F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1274.39F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.6666666F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(844.494F, matrix3_0.m22(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m01(), 0.01F);
      assertEquals((-2137.7908F), matrix3_0.m12(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m01, 0.01F);
      assertEquals((-2137.7908F), matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-479.4F), matrix3_0.m00, 0.01F);
      assertEquals(844.494F, matrix3_0.m22, 0.01F);
      assertEquals(1274.39F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-0.6666666F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transposeLocal();
      assertNotNull(matrix3_1);
      assertEquals((-479.4F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1274.39F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-0.6666666F), matrix3_0.m01(), 0.01F);
      assertEquals(844.494F, matrix3_0.m22(), 0.01F);
      assertEquals((-2137.7908F), matrix3_0.m21(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.99999F, matrix3_1.m10(), 0.01F);
      assertEquals(1274.39F, matrix3_1.m12(), 0.01F);
      assertEquals((-2137.7908F), matrix3_1.m21(), 0.01F);
      assertEquals((-479.4F), matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(844.494F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-0.6666666F), matrix3_1.m01(), 0.01F);
      assertEquals((-0.6666666F), matrix3_0.m01, 0.01F);
      assertEquals((-2137.7908F), matrix3_0.m21, 0.01F);
      assertEquals(0.99999F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-479.4F), matrix3_0.m00, 0.01F);
      assertEquals(844.494F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1274.39F, matrix3_0.m12, 0.01F);
      assertEquals((-2137.7908F), matrix3_1.m21, 0.01F);
      assertEquals(1274.39F, matrix3_1.m12, 0.01F);
      assertEquals(0.99999F, matrix3_1.m10, 0.01F);
      assertEquals((-479.4F), matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-0.6666666F), matrix3_1.m01, 0.01F);
      assertEquals(844.494F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals((-2992.0F), matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0E-4F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m21(), 0.01F);
      assertEquals(491.86252F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m02(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m01(), 0.01F);
      assertEquals(2366.5293F, matrix3_0.m20(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m00, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m01, 0.01F);
      assertEquals(2366.5293F, matrix3_0.m20, 0.01F);
      assertEquals(491.86252F, matrix3_0.m11, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m02, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m22, 0.01F);
      assertEquals((-2992.0F), matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setTranslation(1.0F, -0.0F);
      assertNotNull(matrix3_1);
      assertEquals((-2992.0F), matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m00(), 0.01F);
      assertEquals(491.86252F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m02(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m01(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-2992.0F), matrix3_1.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0E-4F, matrix3_1.m00(), 0.01F);
      assertEquals(491.86252F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m10(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m01(), 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m00, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m01, 0.01F);
      assertEquals(491.86252F, matrix3_0.m11, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m22, 0.01F);
      assertEquals((-2992.0F), matrix3_0.m12, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m10, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m01, 0.01F);
      assertEquals(491.86252F, matrix3_1.m11, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m02, 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals((-2992.0F), matrix3_1.m12, 0.01F);
      assertEquals(-0.0F, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.transposeLocal();
      assertNotNull(matrix3_2);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0E-4F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m01(), 0.01F);
      assertEquals(491.86252F, matrix3_0.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m20(), 0.01F);
      assertEquals((-2992.0F), matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0E-4F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01(), 0.01F);
      assertEquals(491.86252F, matrix3_1.m11(), 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21(), 0.01F);
      assertEquals(1.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(1810.3224F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m10(), 0.01F);
      assertEquals((-2929.2F), matrix3_2.m01(), 0.01F);
      assertEquals(491.86252F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-2992.0F), matrix3_2.m21(), 0.01F);
      assertEquals(1.0F, matrix3_2.m02(), 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m20(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m10, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m00, 0.01F);
      assertEquals(491.86252F, matrix3_0.m11, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m22, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m20, 0.01F);
      assertEquals((-2992.0F), matrix3_0.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(491.86252F, matrix3_1.m11, 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22, 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20, 0.01F);
      assertEquals(491.86252F, matrix3_2.m11, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1.0F, matrix3_2.m02, 0.01F);
      assertEquals((-2992.0F), matrix3_2.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m20, 0.01F);
      assertEquals(1810.3224F, matrix3_2.m22, 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m10, 0.01F);
      assertEquals((-2929.2F), matrix3_2.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m00, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      matrix3_0.setElement(0, 0, 0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transposeLocal();
      assertNotNull(matrix3_1);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-110.29698F), (-2.0F), 1858.1202F, 2239.27F, (-2.0F), (-110.29698F), 2239.27F, 1312.6165F);
      assertNotNull(matrix3_0);
      assertEquals((-110.29698F), matrix3_0.m10(), 0.01F);
      assertEquals(2239.27F, matrix3_0.m11(), 0.01F);
      assertEquals(2239.27F, matrix3_0.m12(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1312.6165F, matrix3_0.m22(), 0.01F);
      assertEquals(1858.1202F, matrix3_0.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m20(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m02, 0.01F);
      assertEquals((-2.0F), matrix3_0.m20, 0.01F);
      assertEquals(1858.1202F, matrix3_0.m01, 0.01F);
      assertEquals((-110.29698F), matrix3_0.m10, 0.01F);
      assertEquals(1312.6165F, matrix3_0.m22, 0.01F);
      assertEquals(2239.27F, matrix3_0.m12, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals(2239.27F, matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transposeLocal();
      assertNotNull(matrix3_1);
      assertEquals(2239.27F, matrix3_0.m21(), 0.01F);
      assertEquals(2239.27F, matrix3_0.m11(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-110.29698F), matrix3_0.m20(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals(1312.6165F, matrix3_0.m22(), 0.01F);
      assertEquals(1858.1202F, matrix3_0.m10(), 0.01F);
      assertEquals(1858.1202F, matrix3_1.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m02(), 0.01F);
      assertEquals(1312.6165F, matrix3_1.m22(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-2.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-110.29698F), matrix3_1.m01(), 0.01F);
      assertEquals(2239.27F, matrix3_1.m11(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m12(), 0.01F);
      assertEquals(2239.27F, matrix3_1.m21(), 0.01F);
      assertEquals((-110.29698F), matrix3_1.m20(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals((-110.29698F), matrix3_0.m20, 0.01F);
      assertEquals((-2.0F), matrix3_0.m12, 0.01F);
      assertEquals(1858.1202F, matrix3_0.m10, 0.01F);
      assertEquals((-110.29698F), matrix3_0.m01, 0.01F);
      assertEquals(1312.6165F, matrix3_0.m22, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals(2239.27F, matrix3_0.m11, 0.01F);
      assertEquals(2239.27F, matrix3_0.m21, 0.01F);
      assertEquals(2239.27F, matrix3_1.m11, 0.01F);
      assertEquals((-110.29698F), matrix3_1.m01, 0.01F);
      assertEquals((-2.0F), matrix3_1.m12, 0.01F);
      assertEquals((-110.29698F), matrix3_1.m20, 0.01F);
      assertEquals(2239.27F, matrix3_1.m21, 0.01F);
      assertEquals((-2.0F), matrix3_1.m00, 0.01F);
      assertEquals((-2.0F), matrix3_1.m02, 0.01F);
      assertEquals(1312.6165F, matrix3_1.m22, 0.01F);
      assertEquals(1858.1202F, matrix3_1.m10, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.transpose(matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals((-110.29698F), matrix3_0.m10(), 0.01F);
      assertEquals(2239.27F, matrix3_0.m11(), 0.01F);
      assertEquals(2239.27F, matrix3_0.m12(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1312.6165F, matrix3_0.m22(), 0.01F);
      assertEquals(1858.1202F, matrix3_0.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m20(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m20(), 0.01F);
      assertEquals(1858.1202F, matrix3_1.m01(), 0.01F);
      assertEquals((-110.29698F), matrix3_1.m10(), 0.01F);
      assertEquals(1312.6165F, matrix3_1.m22(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-2.0F), matrix3_1.m21(), 0.01F);
      assertEquals((-110.29698F), matrix3_1.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m00(), 0.01F);
      assertEquals(2239.27F, matrix3_1.m12(), 0.01F);
      assertEquals(2239.27F, matrix3_1.m11(), 0.01F);
      assertEquals((-2.0F), matrix3_2.m21(), 0.01F);
      assertEquals(2239.27F, matrix3_2.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_2.m00(), 0.01F);
      assertEquals(2239.27F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-110.29698F), matrix3_2.m10(), 0.01F);
      assertEquals(1312.6165F, matrix3_2.m22(), 0.01F);
      assertEquals((-110.29698F), matrix3_2.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_2.m20(), 0.01F);
      assertEquals(1858.1202F, matrix3_2.m01(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m02, 0.01F);
      assertEquals((-2.0F), matrix3_0.m20, 0.01F);
      assertEquals(1858.1202F, matrix3_0.m01, 0.01F);
      assertEquals((-110.29698F), matrix3_0.m10, 0.01F);
      assertEquals(1312.6165F, matrix3_0.m22, 0.01F);
      assertEquals(2239.27F, matrix3_0.m12, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals(2239.27F, matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m21, 0.01F);
      assertEquals((-110.29698F), matrix3_1.m02, 0.01F);
      assertEquals(2239.27F, matrix3_1.m11, 0.01F);
      assertEquals(2239.27F, matrix3_1.m12, 0.01F);
      assertEquals((-2.0F), matrix3_1.m00, 0.01F);
      assertEquals((-2.0F), matrix3_1.m21, 0.01F);
      assertEquals((-110.29698F), matrix3_1.m10, 0.01F);
      assertEquals(1858.1202F, matrix3_1.m01, 0.01F);
      assertEquals(1312.6165F, matrix3_1.m22, 0.01F);
      assertEquals((-2.0F), matrix3_1.m20, 0.01F);
      assertEquals((-110.29698F), matrix3_2.m10, 0.01F);
      assertEquals(1312.6165F, matrix3_2.m22, 0.01F);
      assertEquals((-110.29698F), matrix3_2.m02, 0.01F);
      assertEquals((-2.0F), matrix3_2.m20, 0.01F);
      assertEquals(1858.1202F, matrix3_2.m01, 0.01F);
      assertEquals((-2.0F), matrix3_2.m21, 0.01F);
      assertEquals((-2.0F), matrix3_2.m00, 0.01F);
      assertEquals(2239.27F, matrix3_2.m11, 0.01F);
      assertEquals(2239.27F, matrix3_2.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(0.0F, 0.0F, 0.0F, 378.709F, 0.0F, 1.0F, 3572.3F, 0.0F, 4574.85F);
      assertNotNull(matrix3_1);
      assertEquals(4574.85F, matrix3_1.m22(), 0.01F);
      assertEquals(378.709F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(3572.3F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(3572.3F, matrix3_1.m02, 0.01F);
      assertEquals(4574.85F, matrix3_1.m22, 0.01F);
      assertEquals(378.709F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.transpose(matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(4574.85F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(3572.3F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(378.709F, matrix3_0.m10(), 0.01F);
      assertEquals(4574.85F, matrix3_1.m22(), 0.01F);
      assertEquals(378.709F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(3572.3F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(378.709F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(3572.3F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(1.0F, matrix3_2.m12(), 0.01F);
      assertEquals(4574.85F, matrix3_2.m22(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(378.709F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(4574.85F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(3572.3F, matrix3_0.m20, 0.01F);
      assertEquals(3572.3F, matrix3_1.m02, 0.01F);
      assertEquals(4574.85F, matrix3_1.m22, 0.01F);
      assertEquals(378.709F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(4574.85F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(3572.3F, matrix3_2.m20, 0.01F);
      assertEquals(378.709F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(1.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2670.6924F, (-2929.2F), (-2274.6829F), 1810.3224F, (-2929.2F), 0.0F, (-2274.6829F), 0.0F, 1.0E-4F);
      assertNotNull(matrix3_0);
      assertEquals((-2274.6829F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20(), 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10, 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transpose(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals((-2274.6829F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m01(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20(), 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00(), 0.01F);
      assertEquals((-2274.6829F), matrix3_1.m02(), 0.01F);
      assertEquals(1810.3224F, matrix3_1.m10(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m11(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(2670.6924F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-2274.6829F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0E-4F, matrix3_0.m22, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m01, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m10, 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m11, 0.01F);
      assertEquals((-2274.6829F), matrix3_1.m20, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m22, 0.01F);
      assertEquals(2670.6924F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1810.3224F, matrix3_1.m10, 0.01F);
      assertEquals((-2274.6829F), matrix3_1.m02, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(1.0E-4F, 1.0E-4F, 1.0E-4F, (-2929.2F), 491.86252F, (-2992.0F), 2366.5293F, 1.0E-4F, 1810.3224F);
      assertNotNull(matrix3_1);
      assertEquals((-2992.0F), matrix3_1.m21(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22(), 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02(), 0.01F);
      assertEquals(491.86252F, matrix3_1.m11(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0E-4F, matrix3_1.m00(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(2366.5293F, matrix3_1.m02, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10, 0.01F);
      assertEquals(491.86252F, matrix3_1.m11, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12, 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22, 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.transpose(matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(1.0E-4F, matrix3_0.m01(), 0.01F);
      assertEquals(2366.5293F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m02(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m22(), 0.01F);
      assertEquals((-2992.0F), matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(491.86252F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m00(), 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22(), 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02(), 0.01F);
      assertEquals(491.86252F, matrix3_1.m11(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0E-4F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m21(), 0.01F);
      assertEquals(491.86252F, matrix3_2.m11(), 0.01F);
      assertEquals((-2929.2F), matrix3_2.m10(), 0.01F);
      assertEquals(2366.5293F, matrix3_2.m20(), 0.01F);
      assertEquals(1810.3224F, matrix3_2.m22(), 0.01F);
      assertEquals((-2992.0F), matrix3_2.m12(), 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m02(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(1.0E-4F, matrix3_2.m01(), 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m00(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-2992.0F), matrix3_0.m12, 0.01F);
      assertEquals(491.86252F, matrix3_0.m11, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m02, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m00, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m21, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m22, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10, 0.01F);
      assertEquals(2366.5293F, matrix3_0.m20, 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10, 0.01F);
      assertEquals(491.86252F, matrix3_1.m11, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12, 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22, 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m02, 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m00, 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m21, 0.01F);
      assertEquals(491.86252F, matrix3_2.m11, 0.01F);
      assertEquals((-2929.2F), matrix3_2.m10, 0.01F);
      assertEquals(1810.3224F, matrix3_2.m22, 0.01F);
      assertEquals((-2992.0F), matrix3_2.m12, 0.01F);
      assertEquals(2366.5293F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      matrix3_0.setElement(0, 0, 0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transpose(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(0.0F, 0.0F, (-660.84F), 1.1169724E7F, (-3525.0698F), 1793.815F, 9.0360024E36F, 53473.83F, (-3525.0698F));
      assertNotNull(matrix3_0);
      assertEquals((-3525.0698F), matrix3_0.m22(), 0.01F);
      assertEquals((-3525.0698F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(9.0360024E36F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.1169724E7F, matrix3_0.m01(), 0.01F);
      assertEquals(53473.83F, matrix3_0.m12(), 0.01F);
      assertEquals((-660.84F), matrix3_0.m20(), 0.01F);
      assertEquals(1793.815F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals((-660.84F), matrix3_0.m20, 0.01F);
      assertEquals(1.1169724E7F, matrix3_0.m01, 0.01F);
      assertEquals(53473.83F, matrix3_0.m12, 0.01F);
      assertEquals(1793.815F, matrix3_0.m21, 0.01F);
      assertEquals((-3525.0698F), matrix3_0.m11, 0.01F);
      assertEquals((-3525.0698F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(9.0360024E36F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(2.7182817F, 4.0F, 0.0F);
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.7182817F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(4.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(4.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(2.7182817F, matrix3_1.m00(), 0.01F);
      assertEquals(4.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(2.7182817F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(4.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.transpose();
      assertNotNull(matrix3_2);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.7182817F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(4.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(4.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(2.7182817F, matrix3_1.m00(), 0.01F);
      assertEquals(2.7182817F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(4.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertEquals(4.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(2.7182817F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(4.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(2.7182817F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(4.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(3191.7883F, 2.0F, 3191.7883F, 2.0F, 2.0F, 3191.7883F, (-1198.4158F), (-1696.4736F), (-1696.4736F));
      assertNotNull(matrix3_0);
      assertEquals(2.0F, matrix3_0.m01(), 0.01F);
      assertEquals(3191.7883F, matrix3_0.m20(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1696.4736F), matrix3_0.m22(), 0.01F);
      assertEquals(3191.7883F, matrix3_0.m21(), 0.01F);
      assertEquals(3191.7883F, matrix3_0.m00(), 0.01F);
      assertEquals((-1696.4736F), matrix3_0.m12(), 0.01F);
      assertEquals((-1198.4158F), matrix3_0.m02(), 0.01F);
      assertEquals((-1696.4736F), matrix3_0.m22, 0.01F);
      assertEquals(3191.7883F, matrix3_0.m00, 0.01F);
      assertEquals((-1696.4736F), matrix3_0.m12, 0.01F);
      assertEquals(3191.7883F, matrix3_0.m21, 0.01F);
      assertEquals(2.0F, matrix3_0.m11, 0.01F);
      assertEquals((-1198.4158F), matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m01, 0.01F);
      assertEquals(3191.7883F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transpose();
      assertNotNull(matrix3_1);
      assertEquals(2.0F, matrix3_0.m01(), 0.01F);
      assertEquals(3191.7883F, matrix3_0.m20(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1696.4736F), matrix3_0.m22(), 0.01F);
      assertEquals(3191.7883F, matrix3_0.m21(), 0.01F);
      assertEquals(3191.7883F, matrix3_0.m00(), 0.01F);
      assertEquals((-1696.4736F), matrix3_0.m12(), 0.01F);
      assertEquals((-1198.4158F), matrix3_0.m02(), 0.01F);
      assertEquals((-1696.4736F), matrix3_1.m22(), 0.01F);
      assertEquals((-1696.4736F), matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2.0F, matrix3_1.m10(), 0.01F);
      assertEquals(2.0F, matrix3_1.m11(), 0.01F);
      assertEquals(2.0F, matrix3_1.m01(), 0.01F);
      assertEquals(3191.7883F, matrix3_1.m00(), 0.01F);
      assertEquals(3191.7883F, matrix3_1.m12(), 0.01F);
      assertEquals((-1198.4158F), matrix3_1.m20(), 0.01F);
      assertEquals(3191.7883F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals((-1696.4736F), matrix3_0.m22, 0.01F);
      assertEquals(3191.7883F, matrix3_0.m00, 0.01F);
      assertEquals((-1696.4736F), matrix3_0.m12, 0.01F);
      assertEquals(3191.7883F, matrix3_0.m21, 0.01F);
      assertEquals(2.0F, matrix3_0.m11, 0.01F);
      assertEquals((-1198.4158F), matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m01, 0.01F);
      assertEquals(3191.7883F, matrix3_0.m20, 0.01F);
      assertEquals(3191.7883F, matrix3_1.m02, 0.01F);
      assertEquals(3191.7883F, matrix3_1.m12, 0.01F);
      assertEquals(3191.7883F, matrix3_1.m00, 0.01F);
      assertEquals(2.0F, matrix3_1.m01, 0.01F);
      assertEquals(2.0F, matrix3_1.m11, 0.01F);
      assertEquals(2.0F, matrix3_1.m10, 0.01F);
      assertEquals((-1198.4158F), matrix3_1.m20, 0.01F);
      assertEquals((-1696.4736F), matrix3_1.m21, 0.01F);
      assertEquals((-1696.4736F), matrix3_1.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      matrix3_0.m01 = 4367.9F;
      assertTrue(matrix3_0.isAffine());
      assertEquals(4367.9F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transpose();
      assertNotNull(matrix3_1);
      assertTrue(matrix3_0.isAffine());
      assertEquals(4367.9F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(4367.9F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(4367.9F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(4367.9F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-3.6936216F), (-3.6936216F), 4.0F, (-3.6936216F), (-1.0F), (-3.6936216F), 0.5F, 0.0F, (-3.6936216F));
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m01(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m00(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m22(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m10, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m21, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m00, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m22, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m01, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transpose();
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m01(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m00(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m22(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.5F, matrix3_1.m20(), 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m00(), 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m22(), 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m01(), 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m12(), 0.01F);
      assertEquals(4.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m10, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m21, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m00, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m22, 0.01F);
      assertEquals((-3.6936216F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_1.m20, 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m10, 0.01F);
      assertEquals(4.0F, matrix3_1.m02, 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m01, 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m12, 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m00, 0.01F);
      assertEquals((-3.6936216F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-1.0F), matrix3_1.m11, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Vector vector0 = new Vector(954.0F, (-219.02F));
      assertNotNull(vector0);
      assertEquals(954.0F, vector0.x(), 0.01F);
      assertEquals((-219.02F), vector0.y(), 0.01F);
      assertEquals(954.0F, vector0.x, 0.01F);
      assertEquals((-219.02F), vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transpose();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(0.0F, 0.0F, 0.0F, 3.1415927F, (-1815.82F), (-3745.526F), 3.1415927F, 1.0E-5F, (-1815.82F));
      assertNotNull(matrix3_0);
      assertEquals((-3745.526F), matrix3_0.m21(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1815.82F), matrix3_0.m22(), 0.01F);
      assertEquals((-1815.82F), matrix3_0.m11(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0E-5F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m01, 0.01F);
      assertEquals((-3745.526F), matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1815.82F), matrix3_0.m11, 0.01F);
      assertEquals((-1815.82F), matrix3_0.m22, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m02, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Vector vector1 = matrix3_0.transformVectorLocal(vector0);
      assertNotNull(vector1);
      assertEquals((-3745.526F), matrix3_0.m21(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1815.82F), matrix3_0.m22(), 0.01F);
      assertEquals((-1815.82F), matrix3_0.m11(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0E-5F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m01, 0.01F);
      assertEquals((-3745.526F), matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1815.82F), matrix3_0.m11, 0.01F);
      assertEquals((-1815.82F), matrix3_0.m22, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Vector vector0 = new Vector(1.0F, (-1.5707964F));
      assertNotNull(vector0);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals((-1.5707964F), vector0.y(), 0.01F);
      assertEquals((-1.5707964F), vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_0.IDENTITY.transformVectorLocal(vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals((-1.5707964F), vector0.y(), 0.01F);
      assertEquals(1.0F, vector1.x(), 0.01F);
      assertEquals((-1.5707964F), vector1.y(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1.5707964F), vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector1.x, 0.01F);
      assertEquals((-1.5707964F), vector1.y, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = new Vector(0.0F, 2305.4739F);
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(2305.4739F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(2305.4739F, vector0.y, 0.01F);
      
      Vector vector1 = matrix3_0.transformVectorLocal(vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(2305.4739F, vector0.y(), 0.01F);
      assertEquals(2305.4739F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(2305.4739F, vector0.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(2305.4739F, vector1.y, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_0.transformVectorLocal(vector0);
      assertNotNull(vector1);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector1.x(), 0.01F);
      assertEquals(1.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector1.x, 0.01F);
      assertEquals(1.0F, vector1.y, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      
      Vector vector0 = new Vector(point0);
      assertNotNull(vector0);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_0.extractScale(vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector1.x(), 0.01F);
      assertEquals(1.0F, vector1.y(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector1.y, 0.01F);
      assertEquals(1.0F, vector1.x, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      
      Vector vector2 = matrix3_0.transformVector((IVector) vector1, vector0);
      assertNotNull(vector2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector1.x(), 0.01F);
      assertEquals(1.0F, vector1.y(), 0.01F);
      assertEquals(1.0F, vector2.x(), 0.01F);
      assertEquals(1.0F, vector2.y(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector1.y, 0.01F);
      assertEquals(1.0F, vector1.x, 0.01F);
      assertEquals(1.0F, vector2.x, 0.01F);
      assertEquals(1.0F, vector2.y, 0.01F);
      assertSame(vector0, vector2);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertSame(vector2, vector1);
      assertSame(vector2, vector0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(0.90929735F, 632.153F, 0.0F, 0.90929735F, 0.90929735F, 287.8F, 287.8F, 632.153F, 1.0F);
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(632.153F, matrix3_0.m10(), 0.01F);
      assertEquals(287.8F, matrix3_0.m21(), 0.01F);
      assertEquals(0.90929735F, matrix3_0.m01(), 0.01F);
      assertEquals(0.90929735F, matrix3_0.m00(), 0.01F);
      assertEquals(0.90929735F, matrix3_0.m11(), 0.01F);
      assertEquals(287.8F, matrix3_0.m02(), 0.01F);
      assertEquals(632.153F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(287.8F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(632.153F, matrix3_0.m10, 0.01F);
      assertEquals(287.8F, matrix3_0.m21, 0.01F);
      assertEquals(0.90929735F, matrix3_0.m01, 0.01F);
      assertEquals(632.153F, matrix3_0.m12, 0.01F);
      assertEquals(0.90929735F, matrix3_0.m00, 0.01F);
      assertEquals(0.90929735F, matrix3_0.m11, 0.01F);
      
      Vector vector0 = new Vector((-1352.583F), 0.0F);
      assertNotNull(vector0);
      assertEquals((-1352.583F), vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals((-1352.583F), vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Vector vector1 = matrix3_0.transformVector((IVector) vector0);
      assertNotNull(vector1);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(632.153F, matrix3_0.m10(), 0.01F);
      assertEquals(287.8F, matrix3_0.m21(), 0.01F);
      assertEquals(0.90929735F, matrix3_0.m01(), 0.01F);
      assertEquals(0.90929735F, matrix3_0.m00(), 0.01F);
      assertEquals(0.90929735F, matrix3_0.m11(), 0.01F);
      assertEquals(287.8F, matrix3_0.m02(), 0.01F);
      assertEquals(632.153F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1352.583F), vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals((-1229.9001F), vector1.y(), 0.01F);
      assertEquals((-1229.9001F), vector1.x(), 0.01F);
      assertFalse(vector1.equals((Object)vector0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(287.8F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(632.153F, matrix3_0.m10, 0.01F);
      assertEquals(287.8F, matrix3_0.m21, 0.01F);
      assertEquals(0.90929735F, matrix3_0.m01, 0.01F);
      assertEquals(632.153F, matrix3_0.m12, 0.01F);
      assertEquals(0.90929735F, matrix3_0.m00, 0.01F);
      assertEquals(0.90929735F, matrix3_0.m11, 0.01F);
      assertEquals((-1352.583F), vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals((-1229.9001F), vector1.x, 0.01F);
      assertEquals((-1229.9001F), vector1.y, 0.01F);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-3193.8F), (-1020.65F), (-1020.65F), 2352.1711F, 0.5F, 2810.6F, (-2289.4F), 0.0F, 0.5F);
      assertNotNull(matrix3_0);
      assertEquals((-3193.8F), matrix3_0.m00(), 0.01F);
      assertEquals((-1020.65F), matrix3_0.m10(), 0.01F);
      assertEquals(2352.1711F, matrix3_0.m01(), 0.01F);
      assertEquals(0.5F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5F, matrix3_0.m11(), 0.01F);
      assertEquals((-2289.4F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2810.6F, matrix3_0.m21(), 0.01F);
      assertEquals((-1020.65F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(2810.6F, matrix3_0.m21, 0.01F);
      assertEquals((-1020.65F), matrix3_0.m10, 0.01F);
      assertEquals((-1020.65F), matrix3_0.m20, 0.01F);
      assertEquals(2352.1711F, matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m11, 0.01F);
      assertEquals(0.5F, matrix3_0.m22, 0.01F);
      assertEquals((-2289.4F), matrix3_0.m02, 0.01F);
      assertEquals((-3193.8F), matrix3_0.m00, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, (-3193.8F), (-3193.8F));
      assertNotNull(matrix3_1);
      assertEquals(1158.2511F, matrix3_0.m00(), 0.01F);
      assertEquals(1158.2511F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-2976.3757F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2976.3757F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals((-2976.3757F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(2976.3757F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1158.2511F, matrix3_1.m00(), 0.01F);
      assertEquals(1158.2511F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-2976.3757F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2976.3757F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1158.2511F, matrix3_0.m00, 0.01F);
      assertEquals(1158.2511F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1158.2511F, matrix3_1.m00, 0.01F);
      assertEquals(1158.2511F, matrix3_1.m11, 0.01F);
      assertEquals((-2976.3757F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(2976.3757F, matrix3_1.m01, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Vector vector1 = matrix3_0.transformPointLocal(vector0);
      assertNotNull(vector1);
      assertEquals(1158.2511F, matrix3_0.m00(), 0.01F);
      assertEquals(1158.2511F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-2976.3757F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2976.3757F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-2976.3757F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2976.3757F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1158.2511F, matrix3_0.m00, 0.01F);
      assertEquals(1158.2511F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Vector vector0 = new Vector(0.0F, 2305.4739F);
      assertNotNull(vector0);
      assertEquals(2305.4739F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(2305.4739F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_0.transformPoint((IVector) vector0, vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(2305.4739F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(2305.4739F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(2305.4739F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(2305.4739F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-909.0F), 0.0F, 700.768F, 0.0F, (-1054.4F), 1.0F, (-909.0F), 7.108682F, 389.60693F);
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-909.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-909.0F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(700.768F, matrix3_0.m20(), 0.01F);
      assertEquals(389.60693F, matrix3_0.m22(), 0.01F);
      assertEquals((-1054.4F), matrix3_0.m11(), 0.01F);
      assertEquals(7.108682F, matrix3_0.m12(), 0.01F);
      assertEquals(389.60693F, matrix3_0.m22, 0.01F);
      assertEquals(700.768F, matrix3_0.m20, 0.01F);
      assertEquals(7.108682F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1054.4F), matrix3_0.m11, 0.01F);
      assertEquals((-909.0F), matrix3_0.m02, 0.01F);
      assertEquals((-909.0F), matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      
      Vector vector0 = new Vector((-1054.4F), 133.0F);
      assertNotNull(vector0);
      assertEquals((-1054.4F), vector0.x(), 0.01F);
      assertEquals(133.0F, vector0.y(), 0.01F);
      assertEquals((-1054.4F), vector0.x, 0.01F);
      assertEquals(133.0F, vector0.y, 0.01F);
      
      Vector vector1 = matrix3_0.transformPoint((IVector) vector0, vector0);
      assertNotNull(vector1);
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-909.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-909.0F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(700.768F, matrix3_0.m20(), 0.01F);
      assertEquals(389.60693F, matrix3_0.m22(), 0.01F);
      assertEquals((-1054.4F), matrix3_0.m11(), 0.01F);
      assertEquals(7.108682F, matrix3_0.m12(), 0.01F);
      assertEquals(959150.4F, vector0.x(), 0.01F);
      assertEquals((-140234.2F), vector0.y(), 0.01F);
      assertEquals(959150.4F, vector1.x(), 0.01F);
      assertEquals((-140234.2F), vector1.y(), 0.01F);
      assertEquals(389.60693F, matrix3_0.m22, 0.01F);
      assertEquals(700.768F, matrix3_0.m20, 0.01F);
      assertEquals(7.108682F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1054.4F), matrix3_0.m11, 0.01F);
      assertEquals((-909.0F), matrix3_0.m02, 0.01F);
      assertEquals((-909.0F), matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals((-140234.2F), vector0.y, 0.01F);
      assertEquals(959150.4F, vector0.x, 0.01F);
      assertEquals(959150.4F, vector1.x, 0.01F);
      assertEquals((-140234.2F), vector1.y, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = new Vector(0.0F, 1.0F);
      assertNotNull(vector0);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_0.transformPoint((IVector) vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(1.0F, vector1.y(), 0.01F);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = new Vector(954.0F, (-219.02F));
      assertNotNull(vector0);
      assertEquals(954.0F, vector0.x(), 0.01F);
      assertEquals((-219.02F), vector0.y(), 0.01F);
      assertEquals((-219.02F), vector0.y, 0.01F);
      assertEquals(954.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_0.transformPoint((IVector) vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(954.0F, vector0.x(), 0.01F);
      assertEquals((-219.02F), vector0.y(), 0.01F);
      assertEquals((-219.02F), vector1.y(), 0.01F);
      assertEquals(954.0F, vector1.x(), 0.01F);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-219.02F), vector0.y, 0.01F);
      assertEquals(954.0F, vector0.x, 0.01F);
      assertEquals((-219.02F), vector1.y, 0.01F);
      assertEquals(954.0F, vector1.x, 0.01F);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Vector3 vector3_0 = new Vector3(0.0F, 0.5F, (-1210.0F));
      assertNotNull(vector3_0);
      assertEquals((-1210.0F), vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1464100.2F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.5F, vector3_0.y(), 0.01F);
      assertEquals(0.5F, vector3_0.y, 0.01F);
      assertEquals((-1210.0F), vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      
      Vector3 vector3_1 = matrix3_0.transformLocal(vector3_0);
      assertNotNull(vector3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-1210.0F), vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1464100.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals((-1210.0F), vector3_1.z(), 0.01F);
      assertEquals(1464100.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-1210.0F), vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals((-1210.0F), vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float float0 = matrix3_0.approximateUniformScale();
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = 1.0F;
      Vector vector0 = new Vector(1.0F, 1486767.8F);
      assertNotNull(vector0);
      assertEquals(1486767.8F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1486767.8F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, 2.0F, (IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.9092974F, matrix3_0.m01(), 0.01F);
      assertEquals((-618713.7F), matrix3_0.m11(), 0.01F);
      assertEquals(1486767.8F, matrix3_0.m21(), 0.01F);
      assertEquals((-1351914.0F), matrix3_0.m10(), 0.01F);
      assertEquals(1486767.8F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals((-618713.7F), matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-0.41614684F), matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.9092974F, matrix3_1.m01(), 0.01F);
      assertEquals(1486767.8F, matrix3_1.m21(), 0.01F);
      assertEquals((-1351914.0F), matrix3_1.m10(), 0.01F);
      assertEquals(1486767.8F, matrix3_0.m21, 0.01F);
      assertEquals(0.9092974F, matrix3_0.m01, 0.01F);
      assertEquals((-1351914.0F), matrix3_0.m10, 0.01F);
      assertEquals((-618713.7F), matrix3_0.m11, 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(1486767.8F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals((-0.41614684F), matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-1351914.0F), matrix3_1.m10, 0.01F);
      assertEquals(0.9092974F, matrix3_1.m01, 0.01F);
      assertEquals(1486767.8F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals((-618713.7F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      matrix3_0.hashCode();
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.9092974F, matrix3_0.m01(), 0.01F);
      assertEquals((-618713.7F), matrix3_0.m11(), 0.01F);
      assertEquals(1486767.8F, matrix3_0.m21(), 0.01F);
      assertEquals((-1351914.0F), matrix3_0.m10(), 0.01F);
      assertEquals(1486767.8F, matrix3_0.m21, 0.01F);
      assertEquals(0.9092974F, matrix3_0.m01, 0.01F);
      assertEquals((-1351914.0F), matrix3_0.m10, 0.01F);
      assertEquals((-618713.7F), matrix3_0.m11, 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      
      Vector3 vector3_1 = matrix3_1.transformLocal(vector3_0);
      assertNotNull(vector3_1);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.9092974F, matrix3_0.m01(), 0.01F);
      assertEquals((-618713.7F), matrix3_0.m11(), 0.01F);
      assertEquals(1486767.8F, matrix3_0.m21(), 0.01F);
      assertEquals((-1351914.0F), matrix3_0.m10(), 0.01F);
      assertEquals(1486767.8F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals((-618713.7F), matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-0.41614684F), matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.9092974F, matrix3_1.m01(), 0.01F);
      assertEquals(1486767.8F, matrix3_1.m21(), 0.01F);
      assertEquals((-1351914.0F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals((-0.41614684F), vector3_0.x(), 0.01F);
      assertEquals(0.9092974F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.99999994F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.9092974F, vector3_1.y(), 0.01F);
      assertEquals((-0.41614684F), vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(1486767.8F, matrix3_0.m21, 0.01F);
      assertEquals(0.9092974F, matrix3_0.m01, 0.01F);
      assertEquals((-1351914.0F), matrix3_0.m10, 0.01F);
      assertEquals((-618713.7F), matrix3_0.m11, 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(1486767.8F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals((-0.41614684F), matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-1351914.0F), matrix3_1.m10, 0.01F);
      assertEquals(0.9092974F, matrix3_1.m01, 0.01F);
      assertEquals(1486767.8F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals((-618713.7F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.9092974F, vector3_0.y, 0.01F);
      assertEquals((-0.41614684F), vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals((-0.41614684F), vector3_1.x, 0.01F);
      assertEquals(0.9092974F, vector3_1.y, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[3] = (-3763.8513F);
      Matrix3 matrix3_0 = new Matrix3(floatArray0);
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-3763.8513F), matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals((-3763.8513F), matrix3_0.m01, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-3763.8513F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertNotNull(vector3_0);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      
      Vector3 vector3_1 = matrix3_0.transform((IVector3) vector3_0);
      assertNotNull(vector3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-3763.8513F), matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(4722192.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-2173.0605F), vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals((-3763.8513F), matrix3_0.m01, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals((-2173.0605F), vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-3763.8513F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(11.440985F, 1.0F, 1.0F, 1.0F, 11.440985F, (-929.0F), 1.0F, 11.440985F, 11.440985F);
      assertNotNull(matrix3_0);
      assertEquals((-929.0F), matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertEquals(11.440985F, matrix3_0.m00(), 0.01F);
      assertEquals(11.440985F, matrix3_0.m22(), 0.01F);
      assertEquals(11.440985F, matrix3_0.m11(), 0.01F);
      assertEquals(11.440985F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      assertEquals(11.440985F, matrix3_0.m12, 0.01F);
      assertEquals(11.440985F, matrix3_0.m00, 0.01F);
      assertEquals(11.440985F, matrix3_0.m11, 0.01F);
      assertEquals(11.440985F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m10, 0.01F);
      assertEquals((-929.0F), matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m01, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertNotNull(vector3_0);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      
      Vector3 vector3_1 = matrix3_0.transform((IVector3) vector3_0);
      assertNotNull(vector3_1);
      assertEquals((-929.0F), matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertEquals(11.440985F, matrix3_0.m00(), 0.01F);
      assertEquals(11.440985F, matrix3_0.m22(), 0.01F);
      assertEquals(11.440985F, matrix3_0.m11(), 0.01F);
      assertEquals(11.440985F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_1.x(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      assertEquals(11.440985F, matrix3_0.m12, 0.01F);
      assertEquals(11.440985F, matrix3_0.m00, 0.01F);
      assertEquals(11.440985F, matrix3_0.m11, 0.01F);
      assertEquals(11.440985F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m10, 0.01F);
      assertEquals((-929.0F), matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m01, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_1.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_1.z, 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-22.026094F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, 0.0F, (-22.026094F));
      assertNotNull(matrix3_0);
      assertEquals((-22.026094F), matrix3_0.m00(), 0.01F);
      assertEquals((-22.026094F), matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-22.026094F), matrix3_0.m00, 0.01F);
      assertEquals((-22.026094F), matrix3_0.m22, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals((-22.026094F), matrix3_0.m00(), 0.01F);
      assertEquals((-22.026094F), matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-22.026094F), matrix3_0.m00, 0.01F);
      assertEquals((-22.026094F), matrix3_0.m22, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(1264.0F, 0.27447912F, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(1264.0F, matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.27447912F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1264.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.27447912F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.27447912F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1264.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.27447912F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1264.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.setTranslation((IVector) vector0);
      assertNotNull(matrix3_2);
      assertEquals(1264.0F, matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.27447912F, matrix3_0.m11(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m20(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals(1264.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.27447912F, matrix3_1.m11(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(1264.0F, matrix3_2.m00(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m20(), 0.01F);
      assertEquals(0.27447912F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m21, 0.01F);
      assertEquals(0.27447912F, matrix3_0.m11, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m20, 0.01F);
      assertEquals(1264.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m20, 0.01F);
      assertEquals(0.27447912F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m21, 0.01F);
      assertEquals(1264.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.27447912F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m21, 0.01F);
      assertEquals(1264.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_0.transformPointLocal(vector0);
      assertNotNull(vector1);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector0.x(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector1.x(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector1.y(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector1.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector1.y, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      
      Matrix3 matrix3_1 = matrix3_0.setTranslation((IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector0.x(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m20(), 0.01F);
      assertEquals(0.5F, matrix3_1.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m01(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m10(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m21, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m21, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m10, 0.01F);
      assertEquals((-2.0F), matrix3_1.m00, 0.01F);
      assertEquals((-1.0F), matrix3_1.m11, 0.01F);
      assertEquals((-2.0F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m01, 0.01F);
      assertEquals(0.5F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(vector0, vector1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.multAffine((IMatrix3) matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m21(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m10(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m20, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m10, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m21, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m00, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.setTranslation((IVector) vector0);
      assertNotNull(matrix3_2);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m21(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m10(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m20(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m11(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m21(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m20, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m10, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m21, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m00, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m20, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m10, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m21, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m00, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.setToTransform((IVector) vector0, 0.0F, (IVector) vector0);
      assertNotNull(matrix3_1);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.setTranslation((IVector) vector0);
      assertNotNull(matrix3_2);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.lerpAffine((IMatrix3) matrix3_0, 0.0F);
      assertNotNull(matrix3_1);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      
      matrix3_1.IDENTITY.m22 = 0.0F;
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.setTranslation((-136.0F), 0.0F);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-136.0F), matrix3_0.m20(), 0.01F);
      assertEquals((-136.0F), matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals((-136.0F), matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-136.0F), matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-3296.0F), (-1308.111F), (-3697.92F), (-700.68F), (-3296.0F), (-1.0F), (-1308.111F), 3.1415927F, (-700.68F));
      assertNotNull(matrix3_0);
      assertEquals((-1308.111F), matrix3_0.m10(), 0.01F);
      assertEquals((-3697.92F), matrix3_0.m20(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m12(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-700.68F), matrix3_0.m22(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02(), 0.01F);
      assertEquals((-700.68F), matrix3_0.m01(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m12, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11, 0.01F);
      assertEquals((-700.68F), matrix3_0.m01, 0.01F);
      assertEquals((-700.68F), matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10, 0.01F);
      assertEquals((-1.0F), matrix3_0.m21, 0.01F);
      assertEquals((-3697.92F), matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setTranslation((-1.0F), 2619.3198F);
      assertNotNull(matrix3_1);
      assertEquals((-1308.111F), matrix3_0.m10(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m20(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m12(), 0.01F);
      assertEquals(2619.3198F, matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-700.68F), matrix3_0.m22(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02(), 0.01F);
      assertEquals((-700.68F), matrix3_0.m01(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m02(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m20(), 0.01F);
      assertEquals((-700.68F), matrix3_1.m01(), 0.01F);
      assertEquals((-700.68F), matrix3_1.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m10(), 0.01F);
      assertEquals(3.1415927F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-3296.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-3296.0F), matrix3_1.m11(), 0.01F);
      assertEquals(2619.3198F, matrix3_1.m21(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m12, 0.01F);
      assertEquals(2619.3198F, matrix3_0.m21, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11, 0.01F);
      assertEquals((-700.68F), matrix3_0.m01, 0.01F);
      assertEquals((-1.0F), matrix3_0.m20, 0.01F);
      assertEquals((-700.68F), matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10, 0.01F);
      assertEquals(2619.3198F, matrix3_1.m21, 0.01F);
      assertEquals((-3296.0F), matrix3_1.m00, 0.01F);
      assertEquals((-3296.0F), matrix3_1.m11, 0.01F);
      assertEquals(3.1415927F, matrix3_1.m12, 0.01F);
      assertEquals((-1.0F), matrix3_1.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m10, 0.01F);
      assertEquals((-700.68F), matrix3_1.m01, 0.01F);
      assertEquals((-700.68F), matrix3_1.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(-0.0F, -0.0F, -0.0F, 1.0F, -0.0F, 1243.0F, 2788.044F, 1.0F, 1.3450497F);
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1243.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.3450497F, matrix3_0.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2788.044F, matrix3_0.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2788.044F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m12, 0.01F);
      assertEquals(-0.0F, matrix3_0.m00, 0.01F);
      assertEquals(-0.0F, matrix3_0.m11, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1243.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.3450497F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setTranslation(1.0F, 1.0F);
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.3450497F, matrix3_0.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2788.044F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.3450497F, matrix3_1.m22(), 0.01F);
      assertEquals(2788.044F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(2788.044F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m12, 0.01F);
      assertEquals(-0.0F, matrix3_0.m00, 0.01F);
      assertEquals(-0.0F, matrix3_0.m11, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.3450497F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m12, 0.01F);
      assertEquals(-0.0F, matrix3_1.m00, 0.01F);
      assertEquals(-0.0F, matrix3_1.m11, 0.01F);
      assertEquals(2788.044F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.3450497F, matrix3_1.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTranslation((IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Vector vector0 = new Vector(0.0F, 2626.618F);
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(2626.618F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(2626.618F, vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTranslation((IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(2626.618F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(2626.618F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(2626.618F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2626.618F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(2626.618F, vector0.y, 0.01F);
      assertEquals(2626.618F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTranslation((IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTranslation(1.5707964F, 0.5F);
      assertNotNull(matrix3_1);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.5707964F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.5F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.5707964F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.5F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.5F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.5707964F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.5F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.5707964F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2362.901F), 458.9132F, (-2362.901F), 2657.36F, (-1888.7909F), (-1888.7909F), (-0.99999F), 2657.36F, 287.62375F);
      assertNotNull(matrix3_0);
      assertEquals((-0.99999F), matrix3_0.m02(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m01(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m12(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(458.9132F, matrix3_0.m10(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m22, 0.01F);
      assertEquals(458.9132F, matrix3_0.m10, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11, 0.01F);
      assertEquals(2657.36F, matrix3_0.m01, 0.01F);
      assertEquals(2657.36F, matrix3_0.m12, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02, 0.01F);
      
      Point point0 = new Point((-1199.553F), 0.0F);
      assertNotNull(point0);
      assertEquals((-1199.553F), point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals((-1199.553F), point0.x, 0.01F);
      
      Vector vector0 = new Vector(point0);
      assertNotNull(vector0);
      assertEquals((-1199.553F), point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals((-1199.553F), vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals((-1199.553F), point0.x, 0.01F);
      assertEquals((-1199.553F), vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Vector vector1 = matrix3_0.transformPointLocal(vector0);
      assertNotNull(vector1);
      assertEquals((-0.99999F), matrix3_0.m02(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m01(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m12(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(458.9132F, matrix3_0.m10(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20(), 0.01F);
      assertEquals((-1199.553F), point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(2832061.8F, vector0.x(), 0.01F);
      assertEquals((-3189533.0F), vector0.y(), 0.01F);
      assertEquals((-3189533.0F), vector1.y(), 0.01F);
      assertEquals(2832061.8F, vector1.x(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m22, 0.01F);
      assertEquals(458.9132F, matrix3_0.m10, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11, 0.01F);
      assertEquals(2657.36F, matrix3_0.m01, 0.01F);
      assertEquals(2657.36F, matrix3_0.m12, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals((-1199.553F), point0.x, 0.01F);
      assertEquals((-3189533.0F), vector0.y, 0.01F);
      assertEquals(2832061.8F, vector0.x, 0.01F);
      assertEquals((-3189533.0F), vector1.y, 0.01F);
      assertEquals(2832061.8F, vector1.x, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector1, (-1199.553F), (IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(2435734.2F, matrix3_0.m00(), 0.01F);
      assertEquals((-3189533.0F), matrix3_0.m21(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-2743179.8F), matrix3_0.m11(), 0.01F);
      assertEquals(1444912.6F, matrix3_0.m01(), 0.01F);
      assertEquals(2832061.8F, matrix3_0.m20(), 0.01F);
      assertEquals(1627293.8F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-1199.553F), point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(2832061.8F, vector0.x(), 0.01F);
      assertEquals((-3189533.0F), vector0.y(), 0.01F);
      assertEquals((-3189533.0F), vector1.y(), 0.01F);
      assertEquals(2832061.8F, vector1.x(), 0.01F);
      assertEquals((-2743179.8F), matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-3189533.0F), matrix3_1.m21(), 0.01F);
      assertEquals(2832061.8F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1627293.8F, matrix3_1.m10(), 0.01F);
      assertEquals(2435734.2F, matrix3_1.m00(), 0.01F);
      assertEquals(1444912.6F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(2832061.8F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(2435734.2F, matrix3_0.m00, 0.01F);
      assertEquals(1627293.8F, matrix3_0.m10, 0.01F);
      assertEquals((-3189533.0F), matrix3_0.m21, 0.01F);
      assertEquals((-2743179.8F), matrix3_0.m11, 0.01F);
      assertEquals(1444912.6F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals((-1199.553F), point0.x, 0.01F);
      assertEquals((-3189533.0F), vector0.y, 0.01F);
      assertEquals(2832061.8F, vector0.x, 0.01F);
      assertEquals((-3189533.0F), vector1.y, 0.01F);
      assertEquals(2832061.8F, vector1.x, 0.01F);
      assertEquals(1627293.8F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(2435734.2F, matrix3_1.m00, 0.01F);
      assertEquals(1444912.6F, matrix3_1.m01, 0.01F);
      assertEquals((-2743179.8F), matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-3189533.0F), matrix3_1.m21, 0.01F);
      assertEquals(2832061.8F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Point point0 = new Point((-1105.3F), (-1.0F));
      assertNotNull(point0);
      assertEquals((-1.0F), point0.y(), 0.01F);
      assertEquals((-1105.3F), point0.x(), 0.01F);
      assertEquals((-1105.3F), point0.x, 0.01F);
      assertEquals((-1.0F), point0.y, 0.01F);
      
      Vector vector0 = new Vector(point0);
      assertNotNull(vector0);
      assertEquals((-1.0F), point0.y(), 0.01F);
      assertEquals((-1105.3F), point0.x(), 0.01F);
      assertEquals((-1105.3F), vector0.x(), 0.01F);
      assertEquals((-1.0F), vector0.y(), 0.01F);
      assertEquals((-1105.3F), point0.x, 0.01F);
      assertEquals((-1.0F), point0.y, 0.01F);
      assertEquals((-1105.3F), vector0.x, 0.01F);
      assertEquals((-1.0F), vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, -0.0F, 2589.437F);
      assertNotNull(matrix3_1);
      assertEquals(2589.437F, matrix3_0.m00(), 0.01F);
      assertEquals(2589.437F, matrix3_0.m11(), 0.01F);
      assertEquals((-1105.3F), matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), point0.y(), 0.01F);
      assertEquals((-1105.3F), point0.x(), 0.01F);
      assertEquals((-1105.3F), vector0.x(), 0.01F);
      assertEquals((-1.0F), vector0.y(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-1105.3F), matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(2589.437F, matrix3_1.m00(), 0.01F);
      assertEquals(2589.437F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals((-1.0F), matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(2589.437F, matrix3_0.m00, 0.01F);
      assertEquals(2589.437F, matrix3_0.m11, 0.01F);
      assertEquals((-1105.3F), matrix3_0.m20, 0.01F);
      assertEquals((-1105.3F), point0.x, 0.01F);
      assertEquals((-1.0F), point0.y, 0.01F);
      assertEquals((-1105.3F), vector0.x, 0.01F);
      assertEquals((-1.0F), vector0.y, 0.01F);
      assertEquals(2589.437F, matrix3_1.m00, 0.01F);
      assertEquals(2589.437F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals((-1.0F), matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-1105.3F), matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, 4291.217F, 1.0E-5F);
      assertNotNull(matrix3_1);
      assertEquals(1.9746167E-6F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-1.9746167E-6F), matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(9.803106E-6F, matrix3_0.m00(), 0.01F);
      assertEquals(9.803106E-6F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(1.9746167E-6F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(9.803106E-6F, matrix3_1.m00(), 0.01F);
      assertEquals(9.803106E-6F, matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-1.9746167E-6F), matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(9.803106E-6F, matrix3_0.m00, 0.01F);
      assertEquals(9.803106E-6F, matrix3_0.m11, 0.01F);
      assertEquals((-1.9746167E-6F), matrix3_0.m01, 0.01F);
      assertEquals(1.9746167E-6F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.9746167E-6F, matrix3_1.m10, 0.01F);
      assertEquals((-1.9746167E-6F), matrix3_1.m01, 0.01F);
      assertEquals(9.803106E-6F, matrix3_1.m00, 0.01F);
      assertEquals(9.803106E-6F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, 1.0F, 1.0F);
      assertNotNull(matrix3_1);
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.5403023F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5403023F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.84147096F, matrix3_0.m01(), 0.01F);
      assertEquals((-0.84147096F), matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.84147096F, matrix3_1.m01(), 0.01F);
      assertEquals(0.5403023F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.5403023F, matrix3_1.m11(), 0.01F);
      assertEquals((-0.84147096F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.84147096F), matrix3_0.m10, 0.01F);
      assertEquals(0.84147096F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.5403023F, matrix3_0.m00, 0.01F);
      assertEquals(0.5403023F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.5403023F, matrix3_1.m00, 0.01F);
      assertEquals(0.5403023F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals((-0.84147096F), matrix3_1.m10, 0.01F);
      assertEquals(0.84147096F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, 0.0F, (-2817.498F));
      assertNotNull(matrix3_1);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-2817.498F), matrix3_0.m00(), 0.01F);
      assertEquals((-2817.498F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals((-2817.498F), matrix3_1.m00(), 0.01F);
      assertEquals((-2817.498F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-2817.498F), matrix3_0.m00, 0.01F);
      assertEquals((-2817.498F), matrix3_0.m11, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-2817.498F), matrix3_1.m00, 0.01F);
      assertEquals((-2817.498F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = new Vector(6.170443E-4F, (-1535.168F));
      assertNotNull(vector0);
      assertEquals((-1535.168F), vector0.y(), 0.01F);
      assertEquals(6.170443E-4F, vector0.x(), 0.01F);
      assertEquals(6.170443E-4F, vector0.x, 0.01F);
      assertEquals((-1535.168F), vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(6.170443E-4F, matrix3_0.m20(), 0.01F);
      assertEquals((-1535.168F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-1535.168F), vector0.y(), 0.01F);
      assertEquals(6.170443E-4F, vector0.x(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(6.170443E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-1535.168F), matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(6.170443E-4F, matrix3_0.m20, 0.01F);
      assertEquals((-1535.168F), matrix3_0.m21, 0.01F);
      assertEquals(6.170443E-4F, vector0.x, 0.01F);
      assertEquals((-1535.168F), vector0.y, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals((-1535.168F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(6.170443E-4F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTranslation((-2.0F), 1044.8152F);
      assertNotNull(matrix3_1);
      assertEquals((-2.0F), matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1044.8152F, matrix3_0.m21(), 0.01F);
      assertEquals(1044.8152F, matrix3_1.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1044.8152F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals((-2.0F), matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1044.8152F, matrix3_1.m21, 0.01F);
      assertEquals((-2.0F), matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Vector vector1 = matrix3_0.transformPointLocal(vector0);
      assertNotNull(vector1);
      assertEquals((-2.0F), matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1044.8152F, matrix3_0.m21(), 0.01F);
      assertEquals(1044.8152F, vector0.y(), 0.01F);
      assertEquals((-2.0F), vector0.x(), 0.01F);
      assertEquals(1044.8152F, vector1.y(), 0.01F);
      assertEquals((-2.0F), vector1.x(), 0.01F);
      assertEquals(1044.8152F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals((-2.0F), matrix3_0.m20, 0.01F);
      assertEquals(1044.8152F, vector0.y, 0.01F);
      assertEquals((-2.0F), vector0.x, 0.01F);
      assertEquals(1044.8152F, vector1.y, 0.01F);
      assertEquals((-2.0F), vector1.x, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      
      Matrix3 matrix3_2 = matrix3_0.setToTransform((IVector) vector0, (-2.0F));
      assertNotNull(matrix3_2);
      assertEquals((-2.0F), matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.9092974F, matrix3_0.m10(), 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m11(), 0.01F);
      assertEquals(1044.8152F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.9092974F), matrix3_0.m01(), 0.01F);
      assertEquals(1044.8152F, vector0.y(), 0.01F);
      assertEquals((-2.0F), vector0.x(), 0.01F);
      assertEquals((-0.41614684F), matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals((-0.41614684F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals((-2.0F), matrix3_2.m20(), 0.01F);
      assertEquals(1044.8152F, matrix3_2.m21(), 0.01F);
      assertEquals(0.9092974F, matrix3_2.m10(), 0.01F);
      assertEquals((-0.9092974F), matrix3_2.m01(), 0.01F);
      assertEquals((-0.9092974F), matrix3_0.m01, 0.01F);
      assertEquals(0.9092974F, matrix3_0.m10, 0.01F);
      assertEquals(1044.8152F, matrix3_0.m21, 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m00, 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-2.0F), matrix3_0.m20, 0.01F);
      assertEquals(1044.8152F, vector0.y, 0.01F);
      assertEquals((-2.0F), vector0.x, 0.01F);
      assertEquals(0.9092974F, matrix3_2.m10, 0.01F);
      assertEquals(1044.8152F, matrix3_2.m21, 0.01F);
      assertEquals((-0.9092974F), matrix3_2.m01, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals((-0.41614684F), matrix3_2.m00, 0.01F);
      assertEquals((-0.41614684F), matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals((-2.0F), matrix3_2.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(vector0, vector1);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, (-2623.6F));
      assertNotNull(matrix3_1);
      assertEquals((-0.93224347F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.93224347F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.36183164F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.36183164F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-0.93224347F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.93224347F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.36183164F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.36183164F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-0.36183164F), matrix3_0.m10, 0.01F);
      assertEquals((-0.93224347F), matrix3_0.m00, 0.01F);
      assertEquals((-0.93224347F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.36183164F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.36183164F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-0.36183164F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-0.93224347F), matrix3_1.m00, 0.01F);
      assertEquals((-0.93224347F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2.0F, 2.0F, 2.0F, (-0.99999F), (-1308.111F), (-1308.111F), 2.0F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      assertNotNull(vector3_0);
      assertEquals((-1.50023096E10F), vector3_0.x(), 0.01F);
      assertEquals(1.4970044E7F, vector3_0.y(), 0.01F);
      assertEquals(2.2506956E20F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6630687.0F, vector3_0.z(), 0.01F);
      assertEquals(6630687.0F, vector3_0.z, 0.01F);
      assertEquals(1.4970044E7F, vector3_0.y, 0.01F);
      assertEquals((-1.50023096E10F), vector3_0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale((IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals((-1.50023096E10F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.4970044E7F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(6630687.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-1.50023096E10F), vector3_0.x(), 0.01F);
      assertEquals(1.4970044E7F, vector3_0.y(), 0.01F);
      assertEquals(2.2506956E20F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6630687.0F, vector3_0.z(), 0.01F);
      assertEquals((-1.50023096E10F), matrix3_1.m00(), 0.01F);
      assertEquals(1.4970044E7F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(6630687.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(6630687.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.4970044E7F, matrix3_0.m11, 0.01F);
      assertEquals((-1.50023096E10F), matrix3_0.m00, 0.01F);
      assertEquals(6630687.0F, vector3_0.z, 0.01F);
      assertEquals(1.4970044E7F, vector3_0.y, 0.01F);
      assertEquals((-1.50023096E10F), vector3_0.x, 0.01F);
      assertEquals(6630687.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-1.50023096E10F), matrix3_1.m00, 0.01F);
      assertEquals(1.4970044E7F, matrix3_1.m11, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertNotNull(vector3_0);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale((IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-3.4028235E38F), matrix3_0.m00(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m22(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m00(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m22(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m00, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m11, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m00, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m11, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, (-3.4028235E38F), (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m12, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale((IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(0.0F, (-5.5405045F), 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-5.5405045F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(1.0F, 1.0F, 1.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(6630687.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1784378.9F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-2716.1858F), matrix3_0.m10(), 0.01F);
      assertEquals(1784378.9F, matrix3_0.m11, 0.01F);
      assertEquals((-2716.1858F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(6630687.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(1.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2.0F, 2.0F, 2.0F, (-0.99999F), (-1308.111F), (-1308.111F), 2.0F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      assertNotNull(vector3_0);
      assertEquals((-2617.222F), vector3_0.y(), 0.01F);
      assertEquals(1253.129F, vector3_0.z(), 0.01F);
      assertEquals(8420219.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_0.x(), 0.01F);
      assertEquals(6.0F, vector3_0.x, 0.01F);
      assertEquals((-2617.222F), vector3_0.y, 0.01F);
      assertEquals(1253.129F, vector3_0.z, 0.01F);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertNotNull(vector3_1);
      assertEquals((-2617.222F), vector3_0.y(), 0.01F);
      assertEquals(1253.129F, vector3_0.z(), 0.01F);
      assertEquals(8420219.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_0.x(), 0.01F);
      assertEquals((-2617.222F), vector3_1.y(), 0.01F);
      assertEquals(1253.129F, vector3_1.z(), 0.01F);
      assertEquals(8420219.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_1.x(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(6.0F, vector3_0.x, 0.01F);
      assertEquals((-2617.222F), vector3_0.y, 0.01F);
      assertEquals(1253.129F, vector3_0.z, 0.01F);
      assertEquals(6.0F, vector3_1.x, 0.01F);
      assertEquals(1253.129F, vector3_1.z, 0.01F);
      assertEquals((-2617.222F), vector3_1.y, 0.01F);
      
      Vector3 vector3_2 = matrix3_0.transform((IVector3) vector3_1, vector3_1);
      assertNotNull(vector3_2);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals((-2617.222F), vector3_0.y(), 0.01F);
      assertEquals(1253.129F, vector3_0.z(), 0.01F);
      assertEquals(8420219.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_0.x(), 0.01F);
      assertEquals(1784378.9F, vector3_1.y(), 0.01F);
      assertEquals(4.7150025E13F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6630687.0F, vector3_1.z(), 0.01F);
      assertEquals((-2716.1858F), vector3_1.x(), 0.01F);
      assertEquals(4.7150025E13F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(6630687.0F, vector3_2.z(), 0.01F);
      assertEquals(1784378.9F, vector3_2.y(), 0.01F);
      assertEquals((-2716.1858F), vector3_2.x(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(6.0F, vector3_0.x, 0.01F);
      assertEquals((-2617.222F), vector3_0.y, 0.01F);
      assertEquals(1253.129F, vector3_0.z, 0.01F);
      assertEquals(6630687.0F, vector3_1.z, 0.01F);
      assertEquals((-2716.1858F), vector3_1.x, 0.01F);
      assertEquals(1784378.9F, vector3_1.y, 0.01F);
      assertEquals(1784378.9F, vector3_2.y, 0.01F);
      assertEquals((-2716.1858F), vector3_2.x, 0.01F);
      assertEquals(6630687.0F, vector3_2.z, 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      
      matrix3_0.IDENTITY.setColumn(1, vector3_2);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals((-2617.222F), vector3_0.y(), 0.01F);
      assertEquals(1253.129F, vector3_0.z(), 0.01F);
      assertEquals(8420219.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_0.x(), 0.01F);
      assertEquals(1784378.9F, vector3_1.y(), 0.01F);
      assertEquals(4.7150025E13F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6630687.0F, vector3_1.z(), 0.01F);
      assertEquals((-2716.1858F), vector3_1.x(), 0.01F);
      assertEquals(4.7150025E13F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(6630687.0F, vector3_2.z(), 0.01F);
      assertEquals(1784378.9F, vector3_2.y(), 0.01F);
      assertEquals((-2716.1858F), vector3_2.x(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(6.0F, vector3_0.x, 0.01F);
      assertEquals((-2617.222F), vector3_0.y, 0.01F);
      assertEquals(1253.129F, vector3_0.z, 0.01F);
      assertEquals(6630687.0F, vector3_1.z, 0.01F);
      assertEquals((-2716.1858F), vector3_1.x, 0.01F);
      assertEquals(1784378.9F, vector3_1.y, 0.01F);
      assertEquals(1784378.9F, vector3_2.y, 0.01F);
      assertEquals((-2716.1858F), vector3_2.x, 0.01F);
      assertEquals(6630687.0F, vector3_2.z, 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = vector0.subtractLocal(2263.5981F, (-2.0F));
      assertNotNull(vector1);
      assertEquals(2.0F, vector0.y(), 0.01F);
      assertEquals((-2263.5981F), vector0.x(), 0.01F);
      assertEquals(2.0F, vector1.y(), 0.01F);
      assertEquals((-2263.5981F), vector1.x(), 0.01F);
      assertEquals(2.0F, vector0.y, 0.01F);
      assertEquals((-2263.5981F), vector0.x, 0.01F);
      assertEquals((-2263.5981F), vector1.x, 0.01F);
      assertEquals(2.0F, vector1.y, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, 6.0F, (IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-2263.5981F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.558831F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(632.4844F, matrix3_0.m01(), 0.01F);
      assertEquals((-2173.4397F), matrix3_0.m00(), 0.01F);
      assertEquals(1.9203405F, matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, vector0.y(), 0.01F);
      assertEquals((-2263.5981F), vector0.x(), 0.01F);
      assertEquals(632.4844F, matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(2.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-2173.4397F), matrix3_1.m00(), 0.01F);
      assertEquals(1.9203405F, matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.558831F, matrix3_1.m10(), 0.01F);
      assertEquals((-2263.5981F), matrix3_1.m20(), 0.01F);
      assertEquals(632.4844F, matrix3_0.m01, 0.01F);
      assertEquals((-2173.4397F), matrix3_0.m00, 0.01F);
      assertEquals(1.9203405F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.558831F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-2263.5981F), matrix3_0.m20, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(2.0F, vector0.y, 0.01F);
      assertEquals((-2263.5981F), vector0.x, 0.01F);
      assertEquals(1.9203405F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-2173.4397F), matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.558831F, matrix3_1.m10, 0.01F);
      assertEquals((-2263.5981F), matrix3_1.m20, 0.01F);
      assertEquals(632.4844F, matrix3_1.m01, 0.01F);
      assertEquals(2.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(vector0, vector1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = new Matrix3();
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      
      Vector3 vector3_3 = new Vector3(1.9203405F, 2.0F, 1055.9F);
      assertNotNull(vector3_3);
      assertEquals(2.0F, vector3_3.y(), 0.01F);
      assertEquals(1055.9F, vector3_3.z(), 0.01F);
      assertEquals(1.9203405F, vector3_3.x(), 0.01F);
      assertEquals(1114932.6F, vector3_3.lengthSquared(), 0.01F);
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(1.9203405F, vector3_3.x, 0.01F);
      assertEquals(2.0F, vector3_3.y, 0.01F);
      assertEquals(1055.9F, vector3_3.z, 0.01F);
      
      Vector3 vector3_4 = matrix3_2.transformLocal(vector3_3);
      assertNotNull(vector3_4);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(2.0F, vector3_3.y(), 0.01F);
      assertEquals(1055.9F, vector3_3.z(), 0.01F);
      assertEquals(1.9203405F, vector3_3.x(), 0.01F);
      assertEquals(1114932.6F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.9203405F, vector3_4.x(), 0.01F);
      assertEquals(2.0F, vector3_4.y(), 0.01F);
      assertEquals(1055.9F, vector3_4.z(), 0.01F);
      assertEquals(1114932.6F, vector3_4.lengthSquared(), 0.01F);
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(1.9203405F, vector3_3.x, 0.01F);
      assertEquals(2.0F, vector3_3.y, 0.01F);
      assertEquals(1055.9F, vector3_3.z, 0.01F);
      assertEquals(2.0F, vector3_4.y, 0.01F);
      assertEquals(1.9203405F, vector3_4.x, 0.01F);
      assertEquals(1055.9F, vector3_4.z, 0.01F);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      
      Vector3 vector3_5 = matrix3_0.transform((IVector3) vector3_2, vector3_0);
      assertNotNull(vector3_5);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-2263.5981F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.558831F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(632.4844F, matrix3_0.m01(), 0.01F);
      assertEquals((-2173.4397F), matrix3_0.m00(), 0.01F);
      assertEquals(1.9203405F, matrix3_0.m11(), 0.01F);
      assertEquals((-1.50023096E10F), vector3_0.x(), 0.01F);
      assertEquals(2.2506956E20F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.4970044E7F, vector3_0.y(), 0.01F);
      assertEquals(6630687.0F, vector3_0.z(), 0.01F);
      assertEquals(1784378.9F, vector3_1.y(), 0.01F);
      assertEquals(4.7150025E13F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6630687.0F, vector3_1.z(), 0.01F);
      assertEquals((-2716.1858F), vector3_1.x(), 0.01F);
      assertEquals(4.7150025E13F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(6630687.0F, vector3_2.z(), 0.01F);
      assertEquals(1784378.9F, vector3_2.y(), 0.01F);
      assertEquals((-2716.1858F), vector3_2.x(), 0.01F);
      assertEquals(6630687.0F, vector3_5.z(), 0.01F);
      assertEquals(2.2506956E20F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(1.4970044E7F, vector3_5.y(), 0.01F);
      assertEquals((-1.50023096E10F), vector3_5.x(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertEquals(632.4844F, matrix3_0.m01, 0.01F);
      assertEquals((-2173.4397F), matrix3_0.m00, 0.01F);
      assertEquals(1.9203405F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.558831F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-2263.5981F), matrix3_0.m20, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(1.4970044E7F, vector3_0.y, 0.01F);
      assertEquals(6630687.0F, vector3_0.z, 0.01F);
      assertEquals((-1.50023096E10F), vector3_0.x, 0.01F);
      assertEquals(6630687.0F, vector3_1.z, 0.01F);
      assertEquals((-2716.1858F), vector3_1.x, 0.01F);
      assertEquals(1784378.9F, vector3_1.y, 0.01F);
      assertEquals(1784378.9F, vector3_2.y, 0.01F);
      assertEquals((-2716.1858F), vector3_2.x, 0.01F);
      assertEquals(6630687.0F, vector3_2.z, 0.01F);
      assertEquals((-1.50023096E10F), vector3_5.x, 0.01F);
      assertEquals(1.4970044E7F, vector3_5.y, 0.01F);
      assertEquals(6630687.0F, vector3_5.z, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_1);
      
      Matrix3 matrix3_3 = matrix3_2.setToRotation((IVector3) vector3_0, (IVector3) vector3_4);
      assertNotNull(matrix3_3);
      assertEquals((-1.50023096E10F), vector3_0.x(), 0.01F);
      assertEquals(2.2506956E20F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.4970044E7F, vector3_0.y(), 0.01F);
      assertEquals(6630687.0F, vector3_0.z(), 0.01F);
      assertEquals(0.9999948F, matrix3_2.m20(), 0.01F);
      assertEquals(0.9999953F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0028943028F, matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-0.0013737695F), matrix3_2.m00(), 0.01F);
      assertEquals((-0.0013711654F), matrix3_2.m22(), 0.01F);
      assertEquals((-0.9999986F), matrix3_2.m02(), 0.01F);
      assertEquals((-8.975485E-4F), matrix3_2.m01(), 0.01F);
      assertEquals((-9.0152153E-4F), matrix3_2.m12(), 0.01F);
      assertEquals((-0.0028955378F), matrix3_2.m21(), 0.01F);
      assertEquals(2.0F, vector3_3.y(), 0.01F);
      assertEquals(1055.9F, vector3_3.z(), 0.01F);
      assertEquals(1.9203405F, vector3_3.x(), 0.01F);
      assertEquals(1114932.6F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.9203405F, vector3_4.x(), 0.01F);
      assertEquals(2.0F, vector3_4.y(), 0.01F);
      assertEquals(1055.9F, vector3_4.z(), 0.01F);
      assertEquals(1114932.6F, vector3_4.lengthSquared(), 0.01F);
      assertEquals((-0.0013737695F), matrix3_3.m00(), 0.01F);
      assertEquals((-0.0028955378F), matrix3_3.m21(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(0.9999953F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0028943028F, matrix3_3.m10(), 0.01F);
      assertEquals(0.9999948F, matrix3_3.m20(), 0.01F);
      assertEquals((-0.9999986F), matrix3_3.m02(), 0.01F);
      assertEquals((-8.975485E-4F), matrix3_3.m01(), 0.01F);
      assertEquals((-9.0152153E-4F), matrix3_3.m12(), 0.01F);
      assertEquals((-0.0013711654F), matrix3_3.m22(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertEquals(1.4970044E7F, vector3_0.y, 0.01F);
      assertEquals(6630687.0F, vector3_0.z, 0.01F);
      assertEquals((-1.50023096E10F), vector3_0.x, 0.01F);
      assertEquals((-0.0013737695F), matrix3_2.m00, 0.01F);
      assertEquals((-0.0013711654F), matrix3_2.m22, 0.01F);
      assertEquals(0.0028943028F, matrix3_2.m10, 0.01F);
      assertEquals(0.9999953F, matrix3_2.m11, 0.01F);
      assertEquals((-8.975485E-4F), matrix3_2.m01, 0.01F);
      assertEquals((-9.0152153E-4F), matrix3_2.m12, 0.01F);
      assertEquals(0.9999948F, matrix3_2.m20, 0.01F);
      assertEquals((-0.0028955378F), matrix3_2.m21, 0.01F);
      assertEquals((-0.9999986F), matrix3_2.m02, 0.01F);
      assertEquals(1.9203405F, vector3_3.x, 0.01F);
      assertEquals(2.0F, vector3_3.y, 0.01F);
      assertEquals(1055.9F, vector3_3.z, 0.01F);
      assertEquals(2.0F, vector3_4.y, 0.01F);
      assertEquals(1.9203405F, vector3_4.x, 0.01F);
      assertEquals(1055.9F, vector3_4.z, 0.01F);
      assertEquals((-0.9999986F), matrix3_3.m02, 0.01F);
      assertEquals((-8.975485E-4F), matrix3_3.m01, 0.01F);
      assertEquals((-9.0152153E-4F), matrix3_3.m12, 0.01F);
      assertEquals((-0.0013711654F), matrix3_3.m22, 0.01F);
      assertEquals((-0.0028955378F), matrix3_3.m21, 0.01F);
      assertEquals(0.9999948F, matrix3_3.m20, 0.01F);
      assertEquals((-0.0013737695F), matrix3_3.m00, 0.01F);
      assertEquals(0.0028943028F, matrix3_3.m10, 0.01F);
      assertEquals(0.9999953F, matrix3_3.m11, 0.01F);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2.0F, 2.0F, 2.0F, (-0.99999F), (-1308.111F), (-1308.111F), 2.0F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      assertNotNull(vector3_0);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertNotNull(vector3_1);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      
      Vector3 vector3_2 = matrix3_0.transform((IVector3) vector3_1, vector3_1);
      assertNotNull(vector3_2);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals((-2617.222F), vector3_1.y(), 0.01F);
      assertEquals(8420219.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_1.x(), 0.01F);
      assertEquals(1253.129F, vector3_1.z(), 0.01F);
      assertEquals(6.0F, vector3_2.x(), 0.01F);
      assertEquals(1253.129F, vector3_2.z(), 0.01F);
      assertEquals((-2617.222F), vector3_2.y(), 0.01F);
      assertEquals(8420219.0F, vector3_2.lengthSquared(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(6.0F, vector3_1.x, 0.01F);
      assertEquals((-2617.222F), vector3_1.y, 0.01F);
      assertEquals(1253.129F, vector3_1.z, 0.01F);
      assertEquals(6.0F, vector3_2.x, 0.01F);
      assertEquals((-2617.222F), vector3_2.y, 0.01F);
      assertEquals(1253.129F, vector3_2.z, 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      
      matrix3_0.IDENTITY.setColumn(1, vector3_2);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals((-2617.222F), vector3_1.y(), 0.01F);
      assertEquals(8420219.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_1.x(), 0.01F);
      assertEquals(1253.129F, vector3_1.z(), 0.01F);
      assertEquals(6.0F, vector3_2.x(), 0.01F);
      assertEquals(1253.129F, vector3_2.z(), 0.01F);
      assertEquals((-2617.222F), vector3_2.y(), 0.01F);
      assertEquals(8420219.0F, vector3_2.lengthSquared(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(6.0F, vector3_1.x, 0.01F);
      assertEquals((-2617.222F), vector3_1.y, 0.01F);
      assertEquals(1253.129F, vector3_1.z, 0.01F);
      assertEquals(6.0F, vector3_2.x, 0.01F);
      assertEquals((-2617.222F), vector3_2.y, 0.01F);
      assertEquals(1253.129F, vector3_2.z, 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Vector vector1 = vector0.subtractLocal(2263.5981F, (-2.0F));
      assertNotNull(vector1);
      assertEquals((-2263.5981F), vector0.x(), 0.01F);
      assertEquals(2.0F, vector0.y(), 0.01F);
      assertEquals((-2263.5981F), vector1.x(), 0.01F);
      assertEquals(2.0F, vector1.y(), 0.01F);
      assertEquals((-2263.5981F), vector0.x, 0.01F);
      assertEquals(2.0F, vector0.y, 0.01F);
      assertEquals((-2263.5981F), vector1.x, 0.01F);
      assertEquals(2.0F, vector1.y, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      
      Vector3 vector3_3 = new Vector3(1.9203405F, 2.0F, 1055.9F);
      assertNotNull(vector3_3);
      assertEquals(1.9203405F, vector3_3.x(), 0.01F);
      assertEquals(1055.9F, vector3_3.z(), 0.01F);
      assertEquals(1114932.6F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(2.0F, vector3_3.y(), 0.01F);
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(2.0F, vector3_3.y, 0.01F);
      assertEquals(1055.9F, vector3_3.z, 0.01F);
      assertEquals(1.9203405F, vector3_3.x, 0.01F);
      
      Vector3 vector3_4 = matrix3_0.transform((IVector3) vector3_0, vector3_0);
      assertNotNull(vector3_4);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(8420219.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_0.x(), 0.01F);
      assertEquals((-2617.222F), vector3_0.y(), 0.01F);
      assertEquals(1253.129F, vector3_0.z(), 0.01F);
      assertEquals(8420219.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_4.x(), 0.01F);
      assertEquals((-2617.222F), vector3_4.y(), 0.01F);
      assertEquals(1253.129F, vector3_4.z(), 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertTrue(vector3_4.equals((Object)vector3_1));
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(1253.129F, vector3_0.z, 0.01F);
      assertEquals(6.0F, vector3_0.x, 0.01F);
      assertEquals((-2617.222F), vector3_0.y, 0.01F);
      assertEquals(6.0F, vector3_4.x, 0.01F);
      assertEquals((-2617.222F), vector3_4.y, 0.01F);
      assertEquals(1253.129F, vector3_4.z, 0.01F);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IVector3) vector3_0, (IVector3) vector3_3);
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.43014696F, matrix3_0.m22(), 0.01F);
      assertEquals(0.999997F, matrix3_0.m00(), 0.01F);
      assertEquals(0.00245369F, matrix3_0.m01(), 0.01F);
      assertEquals(0.9027559F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.9027589F), matrix3_0.m12(), 0.01F);
      assertEquals((-0.0023202172F), matrix3_0.m20(), 0.01F);
      assertEquals((-8.3481526E-4F), matrix3_0.m10(), 0.01F);
      assertEquals(2.4439837E-4F, matrix3_0.m02(), 0.01F);
      assertEquals(0.43014625F, matrix3_0.m11(), 0.01F);
      assertEquals(8420219.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_0.x(), 0.01F);
      assertEquals((-2617.222F), vector3_0.y(), 0.01F);
      assertEquals(1253.129F, vector3_0.z(), 0.01F);
      assertEquals(1.9203405F, vector3_3.x(), 0.01F);
      assertEquals(1055.9F, vector3_3.z(), 0.01F);
      assertEquals(1114932.6F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(2.0F, vector3_3.y(), 0.01F);
      assertEquals(2.4439837E-4F, matrix3_1.m02(), 0.01F);
      assertEquals(0.43014625F, matrix3_1.m11(), 0.01F);
      assertEquals((-0.0023202172F), matrix3_1.m20(), 0.01F);
      assertEquals(0.9027559F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.9027589F), matrix3_1.m12(), 0.01F);
      assertEquals((-8.3481526E-4F), matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.999997F, matrix3_1.m00(), 0.01F);
      assertEquals(0.00245369F, matrix3_1.m01(), 0.01F);
      assertEquals(0.43014696F, matrix3_1.m22(), 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(0.999997F, matrix3_0.m00, 0.01F);
      assertEquals((-0.0023202172F), matrix3_0.m20, 0.01F);
      assertEquals(0.9027559F, matrix3_0.m21, 0.01F);
      assertEquals((-0.9027589F), matrix3_0.m12, 0.01F);
      assertEquals((-8.3481526E-4F), matrix3_0.m10, 0.01F);
      assertEquals(0.43014625F, matrix3_0.m11, 0.01F);
      assertEquals(2.4439837E-4F, matrix3_0.m02, 0.01F);
      assertEquals(0.43014696F, matrix3_0.m22, 0.01F);
      assertEquals(0.00245369F, matrix3_0.m01, 0.01F);
      assertEquals(1253.129F, vector3_0.z, 0.01F);
      assertEquals(6.0F, vector3_0.x, 0.01F);
      assertEquals((-2617.222F), vector3_0.y, 0.01F);
      assertEquals(2.0F, vector3_3.y, 0.01F);
      assertEquals(1055.9F, vector3_3.z, 0.01F);
      assertEquals(1.9203405F, vector3_3.x, 0.01F);
      assertEquals((-8.3481526E-4F), matrix3_1.m10, 0.01F);
      assertEquals(0.00245369F, matrix3_1.m01, 0.01F);
      assertEquals(0.43014696F, matrix3_1.m22, 0.01F);
      assertEquals(0.999997F, matrix3_1.m00, 0.01F);
      assertEquals((-0.0023202172F), matrix3_1.m20, 0.01F);
      assertEquals(2.4439837E-4F, matrix3_1.m02, 0.01F);
      assertEquals(0.9027559F, matrix3_1.m21, 0.01F);
      assertEquals(0.43014625F, matrix3_1.m11, 0.01F);
      assertEquals((-0.9027589F), matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Quaternion quaternion0 = new Quaternion(1.0F, 0.0F, 0.0F, 1.6975117F);
      assertNotNull(quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.6975117F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.6975117F, quaternion0.w, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IQuaternion) quaternion0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(3.3950233F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.3950233F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.6975117F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals((-3.3950233F), matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m11(), 0.01F);
      assertEquals(3.3950233F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-1.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(3.3950233F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals((-3.3950233F), matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.6975117F, quaternion0.w, 0.01F);
      assertEquals((-3.3950233F), matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals((-1.0F), matrix3_1.m11, 0.01F);
      assertEquals((-1.0F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(3.3950233F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Quaternion quaternion0 = new Quaternion((-1487.6827F), 1279.0F, 0.99999F, (-2623.6F));
      assertNotNull(quaternion0);
      assertEquals(0.99999F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1279.0F, quaternion0.y(), 0.01F);
      assertEquals((-2623.6F), quaternion0.w(), 0.01F);
      assertEquals((-1487.6827F), quaternion0.x(), 0.01F);
      assertEquals(0.99999F, quaternion0.z, 0.01F);
      assertEquals(1279.0F, quaternion0.y, 0.01F);
      assertEquals((-2623.6F), quaternion0.w, 0.01F);
      assertEquals((-1487.6827F), quaternion0.x, 0.01F);
      
      quaternion0.w = 26970.027F;
      assertEquals(0.99999F, quaternion0.z(), 0.01F);
      assertEquals(26970.027F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1279.0F, quaternion0.y(), 0.01F);
      assertEquals((-1487.6827F), quaternion0.x(), 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IQuaternion) quaternion0);
      assertNotNull(matrix3_1);
      assertEquals((-8.0243128E7F), matrix3_0.m12(), 0.01F);
      assertEquals((-6.8992304E7F), matrix3_0.m02(), 0.01F);
      assertEquals((-3751553.0F), matrix3_0.m01(), 0.01F);
      assertEquals((-4426401.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3859432.0F), matrix3_0.m10(), 0.01F);
      assertEquals(6.8986352E7F, matrix3_0.m20(), 0.01F);
      assertEquals((-3271683.0F), matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-7698081.0F), matrix3_0.m22(), 0.01F);
      assertEquals(8.0248248E7F, matrix3_0.m21(), 0.01F);
      assertEquals(0.99999F, quaternion0.z(), 0.01F);
      assertEquals(26970.027F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1279.0F, quaternion0.y(), 0.01F);
      assertEquals((-1487.6827F), quaternion0.x(), 0.01F);
      assertEquals((-6.8992304E7F), matrix3_1.m02(), 0.01F);
      assertEquals((-7698081.0F), matrix3_1.m22(), 0.01F);
      assertEquals((-3859432.0F), matrix3_1.m10(), 0.01F);
      assertEquals((-3751553.0F), matrix3_1.m01(), 0.01F);
      assertEquals(6.8986352E7F, matrix3_1.m20(), 0.01F);
      assertEquals((-4426401.0F), matrix3_1.m11(), 0.01F);
      assertEquals((-3271683.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-8.0243128E7F), matrix3_1.m12(), 0.01F);
      assertEquals(8.0248248E7F, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(6.8986352E7F, matrix3_0.m20, 0.01F);
      assertEquals((-3859432.0F), matrix3_0.m10, 0.01F);
      assertEquals((-7698081.0F), matrix3_0.m22, 0.01F);
      assertEquals((-3271683.0F), matrix3_0.m00, 0.01F);
      assertEquals((-8.0243128E7F), matrix3_0.m12, 0.01F);
      assertEquals(8.0248248E7F, matrix3_0.m21, 0.01F);
      assertEquals((-3751553.0F), matrix3_0.m01, 0.01F);
      assertEquals((-6.8992304E7F), matrix3_0.m02, 0.01F);
      assertEquals((-4426401.0F), matrix3_0.m11, 0.01F);
      assertEquals(0.99999F, quaternion0.z, 0.01F);
      assertEquals(1279.0F, quaternion0.y, 0.01F);
      assertEquals(26970.027F, quaternion0.w, 0.01F);
      assertEquals((-1487.6827F), quaternion0.x, 0.01F);
      assertEquals((-4426401.0F), matrix3_1.m11, 0.01F);
      assertEquals((-3271683.0F), matrix3_1.m00, 0.01F);
      assertEquals((-8.0243128E7F), matrix3_1.m12, 0.01F);
      assertEquals(8.0248248E7F, matrix3_1.m21, 0.01F);
      assertEquals((-7698081.0F), matrix3_1.m22, 0.01F);
      assertEquals((-6.8992304E7F), matrix3_1.m02, 0.01F);
      assertEquals((-3859432.0F), matrix3_1.m10, 0.01F);
      assertEquals(6.8986352E7F, matrix3_1.m20, 0.01F);
      assertEquals((-3751553.0F), matrix3_1.m01, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      float float0 = matrix3_0.extractRotation();
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation(10.0F);
      assertNotNull(matrix3_1);
      assertEquals((-0.8390715F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.8390715F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.5440211F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-0.5440211F), matrix3_0.m01(), 0.01F);
      assertEquals(0.5440211F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.5440211F), matrix3_1.m01(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-0.8390715F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.8390715F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-0.5440211F), matrix3_0.m01, 0.01F);
      assertEquals(0.5440211F, matrix3_0.m10, 0.01F);
      assertEquals((-0.8390715F), matrix3_0.m00, 0.01F);
      assertEquals((-0.8390715F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-0.8390715F), matrix3_1.m00, 0.01F);
      assertEquals((-0.8390715F), matrix3_1.m11, 0.01F);
      assertEquals(0.5440211F, matrix3_1.m10, 0.01F);
      assertEquals((-0.5440211F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.transposeLocal();
      assertNotNull(matrix3_2);
      assertEquals((-0.8390715F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.8390715F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.5440211F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.5440211F, matrix3_0.m01(), 0.01F);
      assertEquals((-0.5440211F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.5440211F, matrix3_1.m01(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-0.8390715F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.8390715F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.5440211F), matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.5440211F, matrix3_2.m01(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-0.8390715F), matrix3_2.m00(), 0.01F);
      assertEquals((-0.8390715F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.5440211F, matrix3_0.m01, 0.01F);
      assertEquals((-0.5440211F), matrix3_0.m10, 0.01F);
      assertEquals((-0.8390715F), matrix3_0.m00, 0.01F);
      assertEquals((-0.8390715F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-0.8390715F), matrix3_1.m00, 0.01F);
      assertEquals((-0.8390715F), matrix3_1.m11, 0.01F);
      assertEquals((-0.5440211F), matrix3_1.m10, 0.01F);
      assertEquals(0.5440211F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals((-0.8390715F), matrix3_2.m00, 0.01F);
      assertEquals((-0.8390715F), matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals((-0.5440211F), matrix3_2.m10, 0.01F);
      assertEquals(0.5440211F, matrix3_2.m01, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      
      Quaternion quaternion0 = new Quaternion(0.0F, 0.39151502F, 0.0F, 0.0F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.39151502F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.39151502F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertNotNull(quaternion1);
      assertEquals(0.5F, quaternion0.z(), 0.01F);
      assertEquals(0.5F, quaternion0.y(), 0.01F);
      assertEquals(0.5F, quaternion0.x(), 0.01F);
      assertEquals(0.5F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.5F, quaternion1.z(), 0.01F);
      assertEquals(0.5F, quaternion1.w(), 0.01F);
      assertEquals(0.5F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.5F, quaternion1.y(), 0.01F);
      assertEquals(0.5F, quaternion0.y, 0.01F);
      assertEquals(0.5F, quaternion0.x, 0.01F);
      assertEquals(0.5F, quaternion0.w, 0.01F);
      assertEquals(0.5F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.5F, quaternion1.z, 0.01F);
      assertEquals(0.5F, quaternion1.y, 0.01F);
      assertEquals(0.5F, quaternion1.w, 0.01F);
      assertEquals(0.5F, quaternion1.x, 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      
      Matrix3 matrix3_3 = matrix3_2.setToRotation((IQuaternion) quaternion0);
      assertNotNull(matrix3_3);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(1.0F, matrix3_2.m01(), 0.01F);
      assertEquals(1.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.5F, quaternion0.z(), 0.01F);
      assertEquals(0.5F, quaternion0.y(), 0.01F);
      assertEquals(0.5F, quaternion0.x(), 0.01F);
      assertEquals(0.5F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, matrix3_3.m20(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(1.0F, matrix3_3.m01(), 0.01F);
      assertEquals(1.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m00(), 0.01F);
      assertEquals(0.0F, matrix3_3.m22(), 0.01F);
      assertEquals(0.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(1.0F, matrix3_2.m01, 0.01F);
      assertEquals(1.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(1.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.5F, quaternion0.y, 0.01F);
      assertEquals(0.5F, quaternion0.x, 0.01F);
      assertEquals(0.5F, quaternion0.w, 0.01F);
      assertEquals(0.5F, quaternion0.z, 0.01F);
      assertEquals(0.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m00, 0.01F);
      assertEquals(0.0F, matrix3_3.m11, 0.01F);
      assertEquals(0.0F, matrix3_3.m22, 0.01F);
      assertEquals(1.0F, matrix3_3.m01, 0.01F);
      assertEquals(1.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(1.0F, matrix3_3.m20, 0.01F);
      assertSame(matrix3_0, matrix3_3);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_3);
      assertSame(quaternion0, quaternion1);
      assertSame(matrix3_3, matrix3_2);
      assertSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Quaternion quaternion0 = new Quaternion();
      assertNotNull(quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IQuaternion) quaternion0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2670.6924F, (-2955.4004F), (-2274.6829F), 1810.3224F, 0.5F, 0.0F, (-2274.6829F), 0.0F, 1.0E-4F);
      assertNotNull(matrix3_0);
      assertEquals((-2274.6829F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-2955.4004F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m11(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20(), 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m11, 0.01F);
      assertEquals((-2955.4004F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertNotNull(vector3_0);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((-1672.384F), (IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals((-0.33330297F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.6721616F, matrix3_0.m21(), 0.01F);
      assertEquals(0.6721616F, matrix3_0.m10(), 0.01F);
      assertEquals(0.66114134F, matrix3_0.m00(), 0.01F);
      assertEquals(0.66114134F, matrix3_0.m22(), 0.01F);
      assertEquals(0.66114134F, matrix3_0.m11(), 0.01F);
      assertEquals(0.6721616F, matrix3_0.m02(), 0.01F);
      assertEquals((-0.33330297F), matrix3_0.m01(), 0.01F);
      assertEquals((-0.33330297F), matrix3_0.m12(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.66114134F, matrix3_1.m00(), 0.01F);
      assertEquals(0.66114134F, matrix3_1.m22(), 0.01F);
      assertEquals(0.66114134F, matrix3_1.m11(), 0.01F);
      assertEquals(0.6721616F, matrix3_1.m02(), 0.01F);
      assertEquals((-0.33330297F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-0.33330297F), matrix3_1.m01(), 0.01F);
      assertEquals((-0.33330297F), matrix3_1.m12(), 0.01F);
      assertEquals(0.6721616F, matrix3_1.m21(), 0.01F);
      assertEquals(0.6721616F, matrix3_1.m10(), 0.01F);
      assertEquals(0.6721616F, matrix3_0.m02, 0.01F);
      assertEquals(0.66114134F, matrix3_0.m00, 0.01F);
      assertEquals(0.66114134F, matrix3_0.m11, 0.01F);
      assertEquals(0.66114134F, matrix3_0.m22, 0.01F);
      assertEquals(0.6721616F, matrix3_0.m10, 0.01F);
      assertEquals(0.6721616F, matrix3_0.m21, 0.01F);
      assertEquals((-0.33330297F), matrix3_0.m01, 0.01F);
      assertEquals((-0.33330297F), matrix3_0.m12, 0.01F);
      assertEquals((-0.33330297F), matrix3_0.m20, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals((-0.33330297F), matrix3_1.m01, 0.01F);
      assertEquals((-0.33330297F), matrix3_1.m12, 0.01F);
      assertEquals(0.6721616F, matrix3_1.m02, 0.01F);
      assertEquals((-0.33330297F), matrix3_1.m20, 0.01F);
      assertEquals(0.6721616F, matrix3_1.m10, 0.01F);
      assertEquals(0.6721616F, matrix3_1.m21, 0.01F);
      assertEquals(0.66114134F, matrix3_1.m00, 0.01F);
      assertEquals(0.66114134F, matrix3_1.m11, 0.01F);
      assertEquals(0.66114134F, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Vector3 vector3_0 = new Vector3(1907.1F, (-5756.8647F), 3326.8F);
      assertNotNull(vector3_0);
      assertEquals(4.7846124E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1907.1F, vector3_0.x(), 0.01F);
      assertEquals((-5756.8647F), vector3_0.y(), 0.01F);
      assertEquals(3326.8F, vector3_0.z(), 0.01F);
      assertEquals(3326.8F, vector3_0.z, 0.01F);
      assertEquals((-5756.8647F), vector3_0.y, 0.01F);
      assertEquals(1907.1F, vector3_0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation(1.5235069E7F, (IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals((-3.7711716E7F), matrix3_0.m12(), 0.01F);
      assertEquals((-2.1618928E7F), matrix3_0.m01(), 0.01F);
      assertEquals(7161516.0F, matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.1792724E7F, matrix3_0.m22(), 0.01F);
      assertEquals((-2.1617284E7F), matrix3_0.m10(), 0.01F);
      assertEquals(1.2491336E7F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.7710772E7F), matrix3_0.m21(), 0.01F);
      assertEquals(6.525746E7F, matrix3_0.m11(), 0.01F);
      assertEquals(1.2494178E7F, matrix3_0.m20(), 0.01F);
      assertEquals(4.7846124E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1907.1F, vector3_0.x(), 0.01F);
      assertEquals((-5756.8647F), vector3_0.y(), 0.01F);
      assertEquals(3326.8F, vector3_0.z(), 0.01F);
      assertEquals(2.1792724E7F, matrix3_1.m22(), 0.01F);
      assertEquals((-2.1617284E7F), matrix3_1.m10(), 0.01F);
      assertEquals((-3.7710772E7F), matrix3_1.m21(), 0.01F);
      assertEquals(7161516.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.2491336E7F, matrix3_1.m02(), 0.01F);
      assertEquals(1.2494178E7F, matrix3_1.m20(), 0.01F);
      assertEquals((-3.7711716E7F), matrix3_1.m12(), 0.01F);
      assertEquals(6.525746E7F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-2.1618928E7F), matrix3_1.m01(), 0.01F);
      assertEquals(2.1792724E7F, matrix3_0.m22, 0.01F);
      assertEquals(7161516.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.2491336E7F, matrix3_0.m02, 0.01F);
      assertEquals((-2.1617284E7F), matrix3_0.m10, 0.01F);
      assertEquals((-3.7710772E7F), matrix3_0.m21, 0.01F);
      assertEquals(6.525746E7F, matrix3_0.m11, 0.01F);
      assertEquals(1.2494178E7F, matrix3_0.m20, 0.01F);
      assertEquals((-3.7711716E7F), matrix3_0.m12, 0.01F);
      assertEquals((-2.1618928E7F), matrix3_0.m01, 0.01F);
      assertEquals(3326.8F, vector3_0.z, 0.01F);
      assertEquals((-5756.8647F), vector3_0.y, 0.01F);
      assertEquals(1907.1F, vector3_0.x, 0.01F);
      assertEquals(6.525746E7F, matrix3_1.m11, 0.01F);
      assertEquals((-2.1618928E7F), matrix3_1.m01, 0.01F);
      assertEquals((-3.7711716E7F), matrix3_1.m12, 0.01F);
      assertEquals((-2.1617284E7F), matrix3_1.m10, 0.01F);
      assertEquals(7161516.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.2491336E7F, matrix3_1.m02, 0.01F);
      assertEquals(2.1792724E7F, matrix3_1.m22, 0.01F);
      assertEquals((-3.7710772E7F), matrix3_1.m21, 0.01F);
      assertEquals(1.2494178E7F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      assertNotNull(vector3_0);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation(0.0F, (IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((-1807.75F), 763.0F, (float) 0, 763.0F);
      assertNotNull(matrix3_1);
      assertEquals(718612.94F, matrix3_0.m02(), 0.01F);
      assertEquals((-0.23437163F), matrix3_0.m11(), 0.01F);
      assertEquals((-741.7482F), matrix3_0.m21(), 0.01F);
      assertEquals((-741.7482F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(741.7482F, matrix3_0.m01(), 0.01F);
      assertEquals(741.7482F, matrix3_0.m12(), 0.01F);
      assertEquals(718612.7F, matrix3_0.m00(), 0.01F);
      assertEquals(718612.7F, matrix3_0.m22(), 0.01F);
      assertEquals(718612.94F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-0.23437163F), matrix3_1.m11(), 0.01F);
      assertEquals(718612.94F, matrix3_1.m02(), 0.01F);
      assertEquals(741.7482F, matrix3_1.m01(), 0.01F);
      assertEquals(741.7482F, matrix3_1.m12(), 0.01F);
      assertEquals(718612.7F, matrix3_1.m00(), 0.01F);
      assertEquals(718612.7F, matrix3_1.m22(), 0.01F);
      assertEquals(718612.94F, matrix3_1.m20(), 0.01F);
      assertEquals((-741.7482F), matrix3_1.m21(), 0.01F);
      assertEquals((-741.7482F), matrix3_1.m10(), 0.01F);
      assertEquals(741.7482F, matrix3_0.m01, 0.01F);
      assertEquals(741.7482F, matrix3_0.m12, 0.01F);
      assertEquals(718612.94F, matrix3_0.m20, 0.01F);
      assertEquals(718612.7F, matrix3_0.m00, 0.01F);
      assertEquals(718612.7F, matrix3_0.m22, 0.01F);
      assertEquals((-0.23437163F), matrix3_0.m11, 0.01F);
      assertEquals(718612.94F, matrix3_0.m02, 0.01F);
      assertEquals((-741.7482F), matrix3_0.m10, 0.01F);
      assertEquals((-741.7482F), matrix3_0.m21, 0.01F);
      assertEquals(718612.7F, matrix3_1.m00, 0.01F);
      assertEquals(718612.7F, matrix3_1.m22, 0.01F);
      assertEquals((-741.7482F), matrix3_1.m10, 0.01F);
      assertEquals((-741.7482F), matrix3_1.m21, 0.01F);
      assertEquals(718612.94F, matrix3_1.m02, 0.01F);
      assertEquals((-0.23437163F), matrix3_1.m11, 0.01F);
      assertEquals(741.7482F, matrix3_1.m01, 0.01F);
      assertEquals(741.7482F, matrix3_1.m12, 0.01F);
      assertEquals(718612.94F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation(1542.0F, 0.5F, 2963.3F, 381.9135F);
      assertNotNull(matrix3_1);
      assertEquals(1834.0103F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.6392884E7F, matrix3_0.m11(), 0.01F);
      assertEquals(2112733.8F, matrix3_0.m21(), 0.01F);
      assertEquals(2112734.2F, matrix3_0.m12(), 0.01F);
      assertEquals((-1121.0437F), matrix3_0.m02(), 0.01F);
      assertEquals(272290.7F, matrix3_0.m22(), 0.01F);
      assertEquals(2956.41F, matrix3_0.m01(), 0.01F);
      assertEquals((-0.40012038F), matrix3_0.m00(), 0.01F);
      assertEquals(2575.5593F, matrix3_0.m10(), 0.01F);
      assertEquals((-1121.0437F), matrix3_1.m02(), 0.01F);
      assertEquals(2956.41F, matrix3_1.m01(), 0.01F);
      assertEquals(272290.7F, matrix3_1.m22(), 0.01F);
      assertEquals(1834.0103F, matrix3_1.m20(), 0.01F);
      assertEquals(2112733.8F, matrix3_1.m21(), 0.01F);
      assertEquals(2112734.2F, matrix3_1.m12(), 0.01F);
      assertEquals(1.6392884E7F, matrix3_1.m11(), 0.01F);
      assertEquals(2575.5593F, matrix3_1.m10(), 0.01F);
      assertEquals((-0.40012038F), matrix3_1.m00(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2575.5593F, matrix3_0.m10, 0.01F);
      assertEquals((-0.40012038F), matrix3_0.m00, 0.01F);
      assertEquals(1834.0103F, matrix3_0.m20, 0.01F);
      assertEquals(1.6392884E7F, matrix3_0.m11, 0.01F);
      assertEquals(2956.41F, matrix3_0.m01, 0.01F);
      assertEquals(2112733.8F, matrix3_0.m21, 0.01F);
      assertEquals(2112734.2F, matrix3_0.m12, 0.01F);
      assertEquals((-1121.0437F), matrix3_0.m02, 0.01F);
      assertEquals(272290.7F, matrix3_0.m22, 0.01F);
      assertEquals(2112733.8F, matrix3_1.m21, 0.01F);
      assertEquals(2112734.2F, matrix3_1.m12, 0.01F);
      assertEquals((-0.40012038F), matrix3_1.m00, 0.01F);
      assertEquals(2956.41F, matrix3_1.m01, 0.01F);
      assertEquals(272290.7F, matrix3_1.m22, 0.01F);
      assertEquals((-1121.0437F), matrix3_1.m02, 0.01F);
      assertEquals(1834.0103F, matrix3_1.m20, 0.01F);
      assertEquals(2575.5593F, matrix3_1.m10, 0.01F);
      assertEquals(1.6392884E7F, matrix3_1.m11, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[2] = (-5.5405045F);
      Vector3 vector3_0 = new Vector3(floatArray0);
      assertNotNull(vector3_0);
      assertEquals(2.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-5.5405045F), vector3_0.z(), 0.01F);
      assertEquals(34.69719F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-5.5405045F), vector3_0.z, 0.01F);
      assertEquals(2.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertArrayEquals(new float[] {2.0F, 0.0F, (-5.5405045F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Matrix3 matrix3_1 = matrix3_0.setToReflection((IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-7.0F), matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(22.162018F, matrix3_0.m02(), 0.01F);
      assertEquals(22.162018F, matrix3_0.m20(), 0.01F);
      assertEquals((-60.39438F), matrix3_0.m22(), 0.01F);
      assertEquals(2.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-5.5405045F), vector3_0.z(), 0.01F);
      assertEquals(34.69719F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-60.39438F), matrix3_1.m22(), 0.01F);
      assertEquals(22.162018F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(22.162018F, matrix3_1.m20(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-7.0F), matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(22.162018F, matrix3_0.m02, 0.01F);
      assertEquals((-60.39438F), matrix3_0.m22, 0.01F);
      assertEquals(22.162018F, matrix3_0.m20, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-7.0F), matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals((-5.5405045F), vector3_0.z, 0.01F);
      assertEquals(2.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(22.162018F, matrix3_1.m20, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-7.0F), matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-60.39438F), matrix3_1.m22, 0.01F);
      assertEquals(22.162018F, matrix3_1.m02, 0.01F);
      assertArrayEquals(new float[] {2.0F, 0.0F, (-5.5405045F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2362.901F), 458.9132F, (-2362.901F), 2657.36F, (-1888.7909F), (-1888.7909F), (-0.99999F), 2657.36F, 287.62375F);
      assertNotNull(matrix3_0);
      assertEquals((-1888.7909F), matrix3_0.m21(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11(), 0.01F);
      assertEquals(458.9132F, matrix3_0.m10(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-0.99999F), matrix3_0.m02(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m01(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m12(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m22, 0.01F);
      assertEquals(2657.36F, matrix3_0.m01, 0.01F);
      assertEquals(2657.36F, matrix3_0.m12, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals(458.9132F, matrix3_0.m10, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21, 0.01F);
      
      Vector3 vector3_0 = new Vector3((-1888.7909F), 5170.67F, (-1888.7909F));
      assertNotNull(vector3_0);
      assertEquals(5170.67F, vector3_0.y(), 0.01F);
      assertEquals((-1888.7909F), vector3_0.x(), 0.01F);
      assertEquals((-1888.7909F), vector3_0.z(), 0.01F);
      assertEquals(3.3870892E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(5170.67F, vector3_0.y, 0.01F);
      assertEquals((-1888.7909F), vector3_0.z, 0.01F);
      assertEquals((-1888.7909F), vector3_0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToReflection((IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals(1.9532628E7F, matrix3_0.m21(), 0.01F);
      assertEquals(1.9532628E7F, matrix3_0.m10(), 0.01F);
      assertEquals(1.9532628E7F, matrix3_0.m01(), 0.01F);
      assertEquals(1.9532628E7F, matrix3_0.m12(), 0.01F);
      assertEquals((-7135061.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-7135061.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-7135062.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-7135062.0F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-5.3471656E7F), matrix3_0.m11(), 0.01F);
      assertEquals(5170.67F, vector3_0.y(), 0.01F);
      assertEquals((-1888.7909F), vector3_0.x(), 0.01F);
      assertEquals((-1888.7909F), vector3_0.z(), 0.01F);
      assertEquals(3.3870892E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.9532628E7F, matrix3_1.m01(), 0.01F);
      assertEquals(1.9532628E7F, matrix3_1.m12(), 0.01F);
      assertEquals((-7135062.0F), matrix3_1.m20(), 0.01F);
      assertEquals(1.9532628E7F, matrix3_1.m21(), 0.01F);
      assertEquals(1.9532628E7F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-7135061.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-7135061.0F), matrix3_1.m22(), 0.01F);
      assertEquals((-7135062.0F), matrix3_1.m02(), 0.01F);
      assertEquals((-5.3471656E7F), matrix3_1.m11(), 0.01F);
      assertEquals(1.9532628E7F, matrix3_0.m01, 0.01F);
      assertEquals(1.9532628E7F, matrix3_0.m12, 0.01F);
      assertEquals((-7135062.0F), matrix3_0.m20, 0.01F);
      assertEquals(1.9532628E7F, matrix3_0.m10, 0.01F);
      assertEquals(1.9532628E7F, matrix3_0.m21, 0.01F);
      assertEquals((-5.3471656E7F), matrix3_0.m11, 0.01F);
      assertEquals((-7135061.0F), matrix3_0.m00, 0.01F);
      assertEquals((-7135061.0F), matrix3_0.m22, 0.01F);
      assertEquals((-7135062.0F), matrix3_0.m02, 0.01F);
      assertEquals(5170.67F, vector3_0.y, 0.01F);
      assertEquals((-1888.7909F), vector3_0.z, 0.01F);
      assertEquals((-1888.7909F), vector3_0.x, 0.01F);
      assertEquals((-5.3471656E7F), matrix3_1.m11, 0.01F);
      assertEquals(1.9532628E7F, matrix3_1.m01, 0.01F);
      assertEquals(1.9532628E7F, matrix3_1.m12, 0.01F);
      assertEquals(1.9532628E7F, matrix3_1.m10, 0.01F);
      assertEquals(1.9532628E7F, matrix3_1.m21, 0.01F);
      assertEquals((-7135062.0F), matrix3_1.m20, 0.01F);
      assertEquals((-7135061.0F), matrix3_1.m00, 0.01F);
      assertEquals((-7135061.0F), matrix3_1.m22, 0.01F);
      assertEquals((-7135062.0F), matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(-0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(-0.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      assertNotNull(vector3_0);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToReflection((IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals((-2.0F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m10(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m20(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m20(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m11(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-2.0F), matrix3_1.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals((-2.0F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m12, 0.01F);
      assertEquals((-1.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-1.0F), matrix3_0.m22, 0.01F);
      assertEquals((-2.0F), matrix3_0.m10, 0.01F);
      assertEquals((-2.0F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m20, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals((-2.0F), matrix3_1.m10, 0.01F);
      assertEquals((-2.0F), matrix3_1.m21, 0.01F);
      assertEquals((-1.0F), matrix3_1.m00, 0.01F);
      assertEquals((-1.0F), matrix3_1.m11, 0.01F);
      assertEquals((-1.0F), matrix3_1.m22, 0.01F);
      assertEquals((-2.0F), matrix3_1.m01, 0.01F);
      assertEquals((-2.0F), matrix3_1.m12, 0.01F);
      assertEquals((-2.0F), matrix3_1.m02, 0.01F);
      assertEquals((-2.0F), matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToReflection(Float.NaN, 24.466742F, Float.NaN);
      assertNotNull(matrix3_1);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22(), 0.01F);
      assertEquals((-1196.2429F), matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12(), 0.01F);
      assertEquals((-1196.2429F), matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22, 0.01F);
      assertEquals((-1196.2429F), matrix3_0.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertEquals((-1196.2429F), matrix3_1.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, (-1308.111F), (-1308.111F), 48.87661F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToReflection(48.87661F, (-255.4925F), 48.87661F);
      assertNotNull(matrix3_1);
      assertEquals((-4777.846F), matrix3_0.m02(), 0.01F);
      assertEquals((-130551.83F), matrix3_0.m11(), 0.01F);
      assertEquals((-4777.846F), matrix3_0.m20(), 0.01F);
      assertEquals(24975.213F, matrix3_0.m21(), 0.01F);
      assertEquals(24975.213F, matrix3_0.m10(), 0.01F);
      assertEquals(24975.213F, matrix3_0.m01(), 0.01F);
      assertEquals(24975.213F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-4776.846F), matrix3_0.m00(), 0.01F);
      assertEquals((-4776.846F), matrix3_0.m22(), 0.01F);
      assertEquals((-4776.846F), matrix3_1.m00(), 0.01F);
      assertEquals((-4776.846F), matrix3_1.m22(), 0.01F);
      assertEquals((-4777.846F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(24975.213F, matrix3_1.m21(), 0.01F);
      assertEquals(24975.213F, matrix3_1.m10(), 0.01F);
      assertEquals(24975.213F, matrix3_1.m01(), 0.01F);
      assertEquals(24975.213F, matrix3_1.m12(), 0.01F);
      assertEquals((-130551.83F), matrix3_1.m11(), 0.01F);
      assertEquals((-4777.846F), matrix3_1.m20(), 0.01F);
      assertEquals(24975.213F, matrix3_0.m10, 0.01F);
      assertEquals(24975.213F, matrix3_0.m21, 0.01F);
      assertEquals(24975.213F, matrix3_0.m01, 0.01F);
      assertEquals(24975.213F, matrix3_0.m12, 0.01F);
      assertEquals((-4777.846F), matrix3_0.m02, 0.01F);
      assertEquals((-4776.846F), matrix3_0.m00, 0.01F);
      assertEquals((-4776.846F), matrix3_0.m22, 0.01F);
      assertEquals((-4777.846F), matrix3_0.m20, 0.01F);
      assertEquals((-130551.83F), matrix3_0.m11, 0.01F);
      assertEquals(24975.213F, matrix3_1.m10, 0.01F);
      assertEquals(24975.213F, matrix3_1.m21, 0.01F);
      assertEquals(24975.213F, matrix3_1.m01, 0.01F);
      assertEquals(24975.213F, matrix3_1.m12, 0.01F);
      assertEquals((-4777.846F), matrix3_1.m20, 0.01F);
      assertEquals((-130551.83F), matrix3_1.m11, 0.01F);
      assertEquals((-4777.846F), matrix3_1.m02, 0.01F);
      assertEquals((-4776.846F), matrix3_1.m00, 0.01F);
      assertEquals((-4776.846F), matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.setToReflection(0.0F, 0.0F, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(-0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(-0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m20, 0.01F);
      assertEquals(-0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(-0.0F, matrix3_1.m21, 0.01F);
      assertEquals(-0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(-0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[8] = 4736.735F;
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(4736.735F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(4736.735F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(4736.735F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(4736.735F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4736.735F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[8] = (-1179.0F);
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-1179.0F), matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1179.0F), matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-1179.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-1179.0F), matrix3_1.m22, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1179.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[5] = 1.0F;
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[5] = (-647.0F);
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals((-647.0F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-647.0F), matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-647.0F), matrix3_0.m21, 0.01F);
      assertEquals((-647.0F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-647.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[2] = (-1.0F);
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals((-1.0F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1.0F), matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-1.0F), matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-1.0F), matrix3_1.m20, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[7] = 1.0F;
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[7] = (-647.0F);
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-647.0F), matrix3_0.m12(), 0.01F);
      assertEquals((-647.0F), matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-647.0F), matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-647.0F), matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-647.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[4] = (-295.3904F);
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-295.3904F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-295.3904F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-295.3904F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-295.3904F), matrix3_1.m11, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-295.3904F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[6] = 2305.87F;
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2305.87F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2305.87F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(2305.87F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(2305.87F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2305.87F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[6] = (-1.0F);
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals((-1.0F), matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-1.0F), matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[3] = 1.0F;
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[3] = (-81.3F);
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-81.3F), matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-81.3F), matrix3_1.m01(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-81.3F), matrix3_0.m01, 0.01F);
      assertEquals((-81.3F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-81.3F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-1616.9218F), (-1616.9218F), (-1616.9218F), -0.0F, (-1616.9218F), 2453.7844F, 2571.82F, 4.0F, 0.0F);
      assertNotNull(matrix3_0);
      assertEquals((-1616.9218F), matrix3_0.m00(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m11(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m10(), 0.01F);
      assertEquals(2571.82F, matrix3_0.m02(), 0.01F);
      assertEquals(2453.7844F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2453.7844F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(4.0F, matrix3_0.m12, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m20, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m10, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m00, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m11, 0.01F);
      assertEquals(2571.82F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.set((IMatrix3) matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals((-1616.9218F), matrix3_0.m00(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m11(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m10(), 0.01F);
      assertEquals(2571.82F, matrix3_0.m02(), 0.01F);
      assertEquals(2453.7844F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(4.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-1616.9218F), matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-1616.9218F), matrix3_1.m00(), 0.01F);
      assertEquals((-1616.9218F), matrix3_1.m11(), 0.01F);
      assertEquals(2571.82F, matrix3_1.m02(), 0.01F);
      assertEquals((-1616.9218F), matrix3_1.m20(), 0.01F);
      assertEquals(2453.7844F, matrix3_1.m21(), 0.01F);
      assertEquals(2453.7844F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(4.0F, matrix3_0.m12, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m20, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m10, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m00, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m11, 0.01F);
      assertEquals(2571.82F, matrix3_0.m02, 0.01F);
      assertEquals((-1616.9218F), matrix3_1.m00, 0.01F);
      assertEquals((-1616.9218F), matrix3_1.m11, 0.01F);
      assertEquals((-1616.9218F), matrix3_1.m10, 0.01F);
      assertEquals(2571.82F, matrix3_1.m02, 0.01F);
      assertEquals(2453.7844F, matrix3_1.m21, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(4.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals((-1616.9218F), matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(0.0F, 3123.86F, 1.0E-4F, 0.0F, 0.0F, (-874.955F), 0.0F, 2.0F, (-874.955F));
      assertNotNull(matrix3_1);
      assertEquals(1.0E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(3123.86F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(2.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-874.955F), matrix3_1.m21(), 0.01F);
      assertEquals((-874.955F), matrix3_1.m22(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-874.955F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(2.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals((-874.955F), matrix3_1.m22, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20, 0.01F);
      assertEquals(3123.86F, matrix3_1.m10, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.set((IMatrix3) matrix3_1);
      assertNotNull(matrix3_2);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-874.955F), matrix3_0.m22(), 0.01F);
      assertEquals((-874.955F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(3123.86F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(2.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(3123.86F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(2.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-874.955F), matrix3_1.m21(), 0.01F);
      assertEquals((-874.955F), matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(2.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(1.0E-4F, matrix3_2.m20(), 0.01F);
      assertEquals(3123.86F, matrix3_2.m10(), 0.01F);
      assertEquals((-874.955F), matrix3_2.m22(), 0.01F);
      assertEquals((-874.955F), matrix3_2.m21(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-874.955F), matrix3_0.m21, 0.01F);
      assertEquals((-874.955F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m12, 0.01F);
      assertEquals(3123.86F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-874.955F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(2.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals((-874.955F), matrix3_1.m22, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20, 0.01F);
      assertEquals(3123.86F, matrix3_1.m10, 0.01F);
      assertEquals(3123.86F, matrix3_2.m10, 0.01F);
      assertEquals((-874.955F), matrix3_2.m22, 0.01F);
      assertEquals((-874.955F), matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(2.0F, matrix3_2.m12, 0.01F);
      assertEquals(1.0E-4F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2559.24F, (-1308.111F), 2443.968F, (-2.0F), 2559.24F, (-198.306F), (-1308.111F), 2.0F, (-95.5F));
      assertNotNull(matrix3_0);
      assertEquals(2559.24F, matrix3_0.m00(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m11(), 0.01F);
      assertEquals(2443.968F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-95.5F), matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m01(), 0.01F);
      assertEquals(2.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10(), 0.01F);
      assertEquals((-198.306F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m12, 0.01F);
      assertEquals((-95.5F), matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10, 0.01F);
      assertEquals((-198.306F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02, 0.01F);
      assertEquals(2559.24F, matrix3_0.m00, 0.01F);
      assertEquals(2559.24F, matrix3_0.m11, 0.01F);
      assertEquals(2443.968F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.set((IMatrix3) matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(2559.24F, matrix3_0.m00(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m11(), 0.01F);
      assertEquals(2443.968F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-95.5F), matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m01(), 0.01F);
      assertEquals(2.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10(), 0.01F);
      assertEquals((-198.306F), matrix3_0.m21(), 0.01F);
      assertEquals((-95.5F), matrix3_1.m22(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2559.24F, matrix3_1.m00(), 0.01F);
      assertEquals(2559.24F, matrix3_1.m11(), 0.01F);
      assertEquals(2443.968F, matrix3_1.m20(), 0.01F);
      assertEquals((-198.306F), matrix3_1.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m01(), 0.01F);
      assertEquals(2.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m12, 0.01F);
      assertEquals((-95.5F), matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10, 0.01F);
      assertEquals((-198.306F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02, 0.01F);
      assertEquals(2559.24F, matrix3_0.m00, 0.01F);
      assertEquals(2559.24F, matrix3_0.m11, 0.01F);
      assertEquals(2443.968F, matrix3_0.m20, 0.01F);
      assertEquals((-198.306F), matrix3_1.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m10, 0.01F);
      assertEquals((-2.0F), matrix3_1.m01, 0.01F);
      assertEquals(2.0F, matrix3_1.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m02, 0.01F);
      assertEquals((-95.5F), matrix3_1.m22, 0.01F);
      assertEquals(2559.24F, matrix3_1.m00, 0.01F);
      assertEquals(2559.24F, matrix3_1.m11, 0.01F);
      assertEquals(2443.968F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3((-2.0F), 30.423098F, 0.0F, 7.646826F, (-1.0F), 0.0F, 1.0F, 882.077F, 6.2217026F);
      assertNotNull(matrix3_1);
      assertEquals((-2.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(6.2217026F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(30.423098F, matrix3_1.m10(), 0.01F);
      assertEquals(7.646826F, matrix3_1.m01(), 0.01F);
      assertEquals(882.077F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(7.646826F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m02, 0.01F);
      assertEquals(6.2217026F, matrix3_1.m22, 0.01F);
      assertEquals(882.077F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(30.423098F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-2.0F), matrix3_1.m00, 0.01F);
      assertEquals((-1.0F), matrix3_1.m11, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.set((IMatrix3) matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(30.423098F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(6.2217026F, matrix3_0.m22(), 0.01F);
      assertEquals(7.646826F, matrix3_0.m01(), 0.01F);
      assertEquals(882.077F, matrix3_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(6.2217026F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(30.423098F, matrix3_1.m10(), 0.01F);
      assertEquals(7.646826F, matrix3_1.m01(), 0.01F);
      assertEquals(882.077F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(882.077F, matrix3_2.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_2.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(1.0F, matrix3_2.m02(), 0.01F);
      assertEquals(30.423098F, matrix3_2.m10(), 0.01F);
      assertEquals(7.646826F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(6.2217026F, matrix3_2.m22(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals(6.2217026F, matrix3_0.m22, 0.01F);
      assertEquals(30.423098F, matrix3_0.m10, 0.01F);
      assertEquals(7.646826F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(882.077F, matrix3_0.m12, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      assertEquals(7.646826F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m02, 0.01F);
      assertEquals(6.2217026F, matrix3_1.m22, 0.01F);
      assertEquals(882.077F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(30.423098F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-2.0F), matrix3_1.m00, 0.01F);
      assertEquals((-1.0F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(6.2217026F, matrix3_2.m22, 0.01F);
      assertEquals(1.0F, matrix3_2.m02, 0.01F);
      assertEquals((-2.0F), matrix3_2.m00, 0.01F);
      assertEquals((-1.0F), matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(7.646826F, matrix3_2.m01, 0.01F);
      assertEquals(30.423098F, matrix3_2.m10, 0.01F);
      assertEquals(882.077F, matrix3_2.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.set((IMatrix3) matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.set(1.5625F, 1.0F, 1.5625F, (-1543.4326F), 0.0F, 14.364882F, (-1543.4326F), (-1052.5951F), 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(1.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.5625F, matrix3_0.m20(), 0.01F);
      assertEquals(1.5625F, matrix3_0.m00(), 0.01F);
      assertEquals((-1052.5951F), matrix3_0.m12(), 0.01F);
      assertEquals(14.364882F, matrix3_0.m21(), 0.01F);
      assertEquals((-1543.4326F), matrix3_0.m01(), 0.01F);
      assertEquals((-1543.4326F), matrix3_0.m02(), 0.01F);
      assertEquals((-1052.5951F), matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(1.5625F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m10(), 0.01F);
      assertEquals((-1543.4326F), matrix3_1.m02(), 0.01F);
      assertEquals((-1543.4326F), matrix3_1.m01(), 0.01F);
      assertEquals(14.364882F, matrix3_1.m21(), 0.01F);
      assertEquals(1.5625F, matrix3_1.m00(), 0.01F);
      assertEquals((-1052.5951F), matrix3_0.m12, 0.01F);
      assertEquals(14.364882F, matrix3_0.m21, 0.01F);
      assertEquals(1.5625F, matrix3_0.m00, 0.01F);
      assertEquals((-1543.4326F), matrix3_0.m02, 0.01F);
      assertEquals(1.5625F, matrix3_0.m20, 0.01F);
      assertEquals((-1543.4326F), matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_0.m10, 0.01F);
      assertEquals((-1543.4326F), matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m10, 0.01F);
      assertEquals(14.364882F, matrix3_1.m21, 0.01F);
      assertEquals((-1543.4326F), matrix3_1.m01, 0.01F);
      assertEquals(1.5625F, matrix3_1.m20, 0.01F);
      assertEquals(1.5625F, matrix3_1.m00, 0.01F);
      assertEquals((-1052.5951F), matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals((-2948.4553F), matrix3_0.m20(), 0.01F);
      assertEquals(1.5707964F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(884.2F, matrix3_0.m22(), 0.01F);
      assertEquals(884.2F, matrix3_0.m22, 0.01F);
      assertEquals(1.5707964F, matrix3_0.m01, 0.01F);
      assertEquals((-2948.4553F), matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.set((-1590.0F), (-1231.0529F), 807.6F, 10.0F, 10.0F, (-2755.2F), 2.0F, 2.0F, 10.0F);
      assertNotNull(matrix3_1);
      assertEquals(807.6F, matrix3_0.m20(), 0.01F);
      assertEquals(10.0F, matrix3_0.m22(), 0.01F);
      assertEquals(10.0F, matrix3_0.m11(), 0.01F);
      assertEquals((-1590.0F), matrix3_0.m00(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1231.0529F), matrix3_0.m10(), 0.01F);
      assertEquals(10.0F, matrix3_0.m01(), 0.01F);
      assertEquals(2.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-2755.2F), matrix3_0.m21(), 0.01F);
      assertEquals(807.6F, matrix3_1.m20(), 0.01F);
      assertEquals((-1231.0529F), matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-1590.0F), matrix3_1.m00(), 0.01F);
      assertEquals(2.0F, matrix3_1.m02(), 0.01F);
      assertEquals(10.0F, matrix3_1.m01(), 0.01F);
      assertEquals(2.0F, matrix3_1.m12(), 0.01F);
      assertEquals(10.0F, matrix3_1.m22(), 0.01F);
      assertEquals(10.0F, matrix3_1.m11(), 0.01F);
      assertEquals((-2755.2F), matrix3_1.m21(), 0.01F);
      assertEquals((-2755.2F), matrix3_0.m21, 0.01F);
      assertEquals((-1231.0529F), matrix3_0.m10, 0.01F);
      assertEquals(10.0F, matrix3_0.m11, 0.01F);
      assertEquals(10.0F, matrix3_0.m22, 0.01F);
      assertEquals(10.0F, matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m12, 0.01F);
      assertEquals(807.6F, matrix3_0.m20, 0.01F);
      assertEquals((-1590.0F), matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(10.0F, matrix3_1.m11, 0.01F);
      assertEquals(10.0F, matrix3_1.m22, 0.01F);
      assertEquals((-1590.0F), matrix3_1.m00, 0.01F);
      assertEquals(10.0F, matrix3_1.m01, 0.01F);
      assertEquals(2.0F, matrix3_1.m12, 0.01F);
      assertEquals((-2755.2F), matrix3_1.m21, 0.01F);
      assertEquals((-1231.0529F), matrix3_1.m10, 0.01F);
      assertEquals(2.0F, matrix3_1.m02, 0.01F);
      assertEquals(807.6F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.set(0.0F, 2.0F, 1175.148F, 0.0F, (-2562.0F), 2.0F, 0.0F, 2414.87F, (-2139.0F));
      assertNotNull(matrix3_1);
      assertEquals((-2562.0F), matrix3_0.m11(), 0.01F);
      assertEquals(1175.148F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-2139.0F), matrix3_0.m22(), 0.01F);
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2414.87F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2562.0F), matrix3_1.m11(), 0.01F);
      assertEquals(2414.87F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1175.148F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals((-2139.0F), matrix3_1.m22(), 0.01F);
      assertEquals(2.0F, matrix3_1.m21(), 0.01F);
      assertEquals(2.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(1175.148F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals(2414.87F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals((-2139.0F), matrix3_0.m22, 0.01F);
      assertEquals((-2562.0F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1175.148F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals((-2139.0F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(2.0F, matrix3_1.m10, 0.01F);
      assertEquals(2.0F, matrix3_1.m21, 0.01F);
      assertEquals((-2562.0F), matrix3_1.m11, 0.01F);
      assertEquals(2414.87F, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.set(1.0F, 0.0F, (-2948.4553F), 1.5707964F, 0.0F, 0.0F, 1.0F, 0.0F, 884.2F);
      assertNotNull(matrix3_1);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.5707964F, matrix3_1.m01(), 0.01F);
      assertEquals((-2948.4553F), matrix3_1.m20(), 0.01F);
      assertEquals(884.2F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-2948.4553F), matrix3_1.m20, 0.01F);
      assertEquals(884.2F, matrix3_1.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.5707964F, matrix3_1.m01, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2362.901F), (-3.4028235E38F), (-1888.7909F), (-2362.901F), 33338.32F, (-3.4028235E38F), 1.0E-5F, (-1888.7909F), 1490.4851F);
      assertNotNull(matrix3_0);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals(1490.4851F, matrix3_0.m22(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m01(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m12(), 0.01F);
      assertEquals(33338.32F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m02, 0.01F);
      assertEquals(33338.32F, matrix3_0.m11, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m20, 0.01F);
      assertEquals(1490.4851F, matrix3_0.m22, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m12, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m01, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(9.2999585E-8F, 0.0F, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(9.2999585E-8F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(9.2999585E-8F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(9.2999585E-8F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(9.2999585E-8F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.multLocal(matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(8.648923E-15F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(8.648923E-15F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(8.648923E-15F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(8.648923E-15F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(8.648923E-15F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(8.648923E-15F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, (-1308.111F), (-1308.111F), 48.87661F, (-1308.111F), (-1946.3772F));
      assertNotNull(matrix3_0);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.multLocal(matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_2.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_2.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_2.m12(), 0.01F);
      assertEquals((-1946.3772F), matrix3_2.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(48.87661F, matrix3_2.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_2.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_2.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_2.m01(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(48.87661F, matrix3_2.m10, 0.01F);
      assertEquals(48.87661F, matrix3_2.m00, 0.01F);
      assertEquals(48.87661F, matrix3_2.m01, 0.01F);
      assertEquals(48.87661F, matrix3_2.m02, 0.01F);
      assertEquals(48.87661F, matrix3_2.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_2.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_2.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_2.m12, 0.01F);
      assertEquals((-1946.3772F), matrix3_2.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-2.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-2.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = Matrix3.IDENTITY;
      assertNotNull(matrix3_1);
      assertEquals((-43686.094F), matrix3_1.m21(), 0.01F);
      assertEquals(9186360.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-1884888.5F), matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-50717.324F), matrix3_1.m20(), 0.01F);
      assertEquals(485112.25F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-50717.324F), matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(485112.25F, matrix3_1.m11, 0.01F);
      assertEquals((-1884888.5F), matrix3_1.m10, 0.01F);
      assertEquals((-43686.094F), matrix3_1.m21, 0.01F);
      assertEquals(9186360.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.multLocal(matrix3_1);
      assertNotNull(matrix3_2);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1.837272E7F), matrix3_0.m00(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m11(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m10(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m01(), 0.01F);
      assertEquals(4593180.0F, matrix3_0.m02(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m20(), 0.01F);
      assertEquals((-942444.25F), matrix3_0.m12(), 0.01F);
      assertEquals((-25360.662F), matrix3_0.m22(), 0.01F);
      assertEquals((-43686.094F), matrix3_1.m21(), 0.01F);
      assertEquals(9186360.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-1884888.5F), matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-50717.324F), matrix3_1.m20(), 0.01F);
      assertEquals(485112.25F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-1.837272E7F), matrix3_2.m00(), 0.01F);
      assertEquals((-25360.662F), matrix3_2.m22(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m21(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_2.m10(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(4593180.0F, matrix3_2.m02(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_2.m01(), 0.01F);
      assertEquals((-942444.25F), matrix3_2.m12(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m20, 0.01F);
      assertEquals((-942444.25F), matrix3_0.m12, 0.01F);
      assertEquals((-25360.662F), matrix3_0.m22, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m10, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m21, 0.01F);
      assertEquals((-1.837272E7F), matrix3_0.m00, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m11, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m01, 0.01F);
      assertEquals(4593180.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-50717.324F), matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(485112.25F, matrix3_1.m11, 0.01F);
      assertEquals((-1884888.5F), matrix3_1.m10, 0.01F);
      assertEquals((-43686.094F), matrix3_1.m21, 0.01F);
      assertEquals(9186360.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_2.m01, 0.01F);
      assertEquals((-942444.25F), matrix3_2.m12, 0.01F);
      assertEquals((-25360.662F), matrix3_2.m22, 0.01F);
      assertEquals(4593180.0F, matrix3_2.m02, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m20, 0.01F);
      assertEquals((-1.837272E7F), matrix3_2.m00, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m11, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_2.m10, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.multLocal(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, 1.0F, (IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(0.84147096F, matrix3_0.m01(), 0.01F);
      assertEquals((-0.84147096F), matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.5403023F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5403023F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(0.5403023F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.5403023F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.84147096F, matrix3_1.m01(), 0.01F);
      assertEquals((-0.84147096F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.5403023F, matrix3_0.m00, 0.01F);
      assertEquals(0.5403023F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals((-0.84147096F), matrix3_0.m10, 0.01F);
      assertEquals(0.84147096F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(0.84147096F, matrix3_1.m01, 0.01F);
      assertEquals((-0.84147096F), matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.5403023F, matrix3_1.m00, 0.01F);
      assertEquals(0.5403023F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.multAffineLocal(matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals((-0.90929735F), matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(2.3817732F, matrix3_0.m21(), 0.01F);
      assertEquals(0.6988313F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.4161468F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.4161468F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.90929735F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.6988313F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.4161468F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.4161468F), matrix3_1.m11(), 0.01F);
      assertEquals(2.3817732F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-0.90929735F), matrix3_1.m10(), 0.01F);
      assertEquals(0.90929735F, matrix3_1.m01(), 0.01F);
      assertEquals((-0.90929735F), matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-0.4161468F), matrix3_2.m00(), 0.01F);
      assertEquals((-0.4161468F), matrix3_2.m11(), 0.01F);
      assertEquals(2.3817732F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.6988313F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.90929735F, matrix3_2.m01(), 0.01F);
      assertEquals(2.3817732F, matrix3_0.m21, 0.01F);
      assertEquals(0.6988313F, matrix3_0.m20, 0.01F);
      assertEquals((-0.4161468F), matrix3_0.m00, 0.01F);
      assertEquals((-0.4161468F), matrix3_0.m11, 0.01F);
      assertEquals(0.90929735F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-0.90929735F), matrix3_0.m10, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals((-0.90929735F), matrix3_1.m10, 0.01F);
      assertEquals(0.90929735F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.6988313F, matrix3_1.m20, 0.01F);
      assertEquals(2.3817732F, matrix3_1.m21, 0.01F);
      assertEquals((-0.4161468F), matrix3_1.m00, 0.01F);
      assertEquals((-0.4161468F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.6988313F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(2.3817732F, matrix3_2.m21, 0.01F);
      assertEquals((-0.4161468F), matrix3_2.m00, 0.01F);
      assertEquals((-0.4161468F), matrix3_2.m11, 0.01F);
      assertEquals(0.90929735F, matrix3_2.m01, 0.01F);
      assertEquals((-0.90929735F), matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.set(3030.901F, (-807.44F), 0.0F, 0.0F, (-696.5F), 62.8125F, 0.0F, 281.658F, 532.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(281.658F, matrix3_1.m12(), 0.01F);
      assertEquals((-696.5F), matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(532.0F, matrix3_1.m22(), 0.01F);
      assertEquals(62.8125F, matrix3_1.m21(), 0.01F);
      assertEquals(3030.901F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-807.44F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(62.8125F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-807.44F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(3030.901F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(281.658F, matrix3_1.m12, 0.01F);
      assertEquals((-696.5F), matrix3_1.m11, 0.01F);
      assertEquals(532.0F, matrix3_1.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.multAffineLocal(matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals((-43686.094F), matrix3_1.m21(), 0.01F);
      assertEquals(485112.25F, matrix3_1.m11(), 0.01F);
      assertEquals((-1884888.5F), matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-50717.324F), matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(9186360.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(9186360.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-43686.094F), matrix3_2.m21(), 0.01F);
      assertEquals((-50717.324F), matrix3_2.m20(), 0.01F);
      assertEquals(485112.25F, matrix3_2.m11(), 0.01F);
      assertEquals((-1884888.5F), matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-50717.324F), matrix3_1.m20, 0.01F);
      assertEquals((-1884888.5F), matrix3_1.m10, 0.01F);
      assertEquals(9186360.0F, matrix3_1.m00, 0.01F);
      assertEquals((-43686.094F), matrix3_1.m21, 0.01F);
      assertEquals(485112.25F, matrix3_1.m11, 0.01F);
      assertEquals((-1884888.5F), matrix3_2.m10, 0.01F);
      assertEquals(485112.25F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(9186360.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals((-43686.094F), matrix3_2.m21, 0.01F);
      assertEquals((-50717.324F), matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      
      Matrix3 matrix3_2 = new Matrix3(0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(1.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(1.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      
      matrix3_2.hashCode();
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(1.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(1.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      Matrix3 matrix3_3 = new Matrix3(0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(matrix3_3);
      assertFalse(matrix3_3.isAffine());
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(1.0F, matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m00(), 0.01F);
      assertEquals(0.0F, matrix3_3.m22(), 0.01F);
      assertEquals(0.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(1.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m00, 0.01F);
      assertEquals(0.0F, matrix3_3.m11, 0.01F);
      assertEquals(0.0F, matrix3_3.m22, 0.01F);
      assertEquals(1.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      
      Matrix3 matrix3_4 = matrix3_1.IDENTITY.multAffineLocal(matrix3_2);
      assertNotNull(matrix3_4);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(1.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(0.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(0.0F, matrix3_4.m11(), 0.01F);
      assertEquals(1.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_4.equals((Object)matrix3_1));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertTrue(matrix3_4.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(1.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(1.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(0.0F, matrix3_4.m00, 0.01F);
      assertEquals(0.0F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_2);
      assertNotSame(matrix3_4, matrix3_3);
      assertSame(matrix3_4, matrix3_0);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation(2.0F);
      assertNotNull(matrix3_1);
      assertEquals((-0.41614684F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m11(), 0.01F);
      assertEquals(0.9092974F, matrix3_0.m01(), 0.01F);
      assertEquals((-0.9092974F), matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-0.41614684F), matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-0.41614684F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-0.9092974F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.9092974F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-0.9092974F), matrix3_0.m10, 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m00, 0.01F);
      assertEquals((-0.41614684F), matrix3_0.m11, 0.01F);
      assertEquals(0.9092974F, matrix3_0.m01, 0.01F);
      assertEquals((-0.9092974F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-0.41614684F), matrix3_1.m00, 0.01F);
      assertEquals((-0.41614684F), matrix3_1.m11, 0.01F);
      assertEquals(0.9092974F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.multAffineLocal(matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals((-0.7568025F), matrix3_0.m01(), 0.01F);
      assertEquals(0.7568025F, matrix3_0.m10(), 0.01F);
      assertEquals((-0.65364355F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.65364355F), matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.7568025F, matrix3_2.m10(), 0.01F);
      assertEquals((-0.7568025F), matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals((-0.65364355F), matrix3_2.m00(), 0.01F);
      assertEquals((-0.65364355F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-0.7568025F), matrix3_0.m01, 0.01F);
      assertEquals((-0.65364355F), matrix3_0.m00, 0.01F);
      assertEquals((-0.65364355F), matrix3_0.m11, 0.01F);
      assertEquals(0.7568025F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals((-0.65364355F), matrix3_2.m00, 0.01F);
      assertEquals((-0.65364355F), matrix3_2.m11, 0.01F);
      assertEquals(0.7568025F, matrix3_2.m10, 0.01F);
      assertEquals((-0.7568025F), matrix3_2.m01, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3((-1155.2134F), 0.0F, 2052.5237F, 987.7752F, 0.0F, 3405.116F, 0.0F, 0.5F, (-1855.2F));
      assertNotNull(matrix3_1);
      assertEquals(987.7752F, matrix3_1.m01(), 0.01F);
      assertEquals(2052.5237F, matrix3_1.m20(), 0.01F);
      assertEquals(3405.116F, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-1155.2134F), matrix3_1.m00(), 0.01F);
      assertEquals((-1855.2F), matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.5F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.5F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals((-1855.2F), matrix3_1.m22, 0.01F);
      assertEquals(2052.5237F, matrix3_1.m20, 0.01F);
      assertEquals(987.7752F, matrix3_1.m01, 0.01F);
      assertEquals(3405.116F, matrix3_1.m21, 0.01F);
      assertEquals((-1155.2134F), matrix3_1.m00, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.multAffine((IMatrix3) matrix3_1, matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(2052.5237F, matrix3_0.m20(), 0.01F);
      assertEquals((-1155.2134F), matrix3_0.m00(), 0.01F);
      assertEquals(3405.116F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(987.7752F, matrix3_0.m01(), 0.01F);
      assertEquals(987.7752F, matrix3_1.m01(), 0.01F);
      assertEquals(2052.5237F, matrix3_1.m20(), 0.01F);
      assertEquals(3405.116F, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-1155.2134F), matrix3_1.m00(), 0.01F);
      assertEquals((-1855.2F), matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.5F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(987.7752F, matrix3_2.m01(), 0.01F);
      assertEquals(2052.5237F, matrix3_2.m20(), 0.01F);
      assertEquals((-1155.2134F), matrix3_2.m00(), 0.01F);
      assertEquals(3405.116F, matrix3_2.m21(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(987.7752F, matrix3_0.m01, 0.01F);
      assertEquals(2052.5237F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(3405.116F, matrix3_0.m21, 0.01F);
      assertEquals((-1155.2134F), matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.5F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals((-1855.2F), matrix3_1.m22, 0.01F);
      assertEquals(2052.5237F, matrix3_1.m20, 0.01F);
      assertEquals(987.7752F, matrix3_1.m01, 0.01F);
      assertEquals(3405.116F, matrix3_1.m21, 0.01F);
      assertEquals((-1155.2134F), matrix3_1.m00, 0.01F);
      assertEquals(987.7752F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(2052.5237F, matrix3_2.m20, 0.01F);
      assertEquals((-1155.2134F), matrix3_2.m00, 0.01F);
      assertEquals(3405.116F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2.0F, 2.0F, 2.0F, 2.0F, (-1308.111F), (-1308.111F), 2.0F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m01(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m01, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.multAffine((IMatrix3) matrix3_0, matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals((-2610.222F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1711158.2F, matrix3_0.m11(), 0.01F);
      assertEquals((-2612.222F), matrix3_0.m01(), 0.01F);
      assertEquals(8.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-2612.222F), matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1709850.1F, matrix3_0.m21(), 0.01F);
      assertEquals(1709850.1F, matrix3_1.m21(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1711158.2F, matrix3_1.m11(), 0.01F);
      assertEquals((-2610.222F), matrix3_1.m20(), 0.01F);
      assertEquals((-2612.222F), matrix3_1.m01(), 0.01F);
      assertEquals(8.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-2612.222F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(8.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1711158.2F, matrix3_0.m11, 0.01F);
      assertEquals((-2612.222F), matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-2612.222F), matrix3_0.m10, 0.01F);
      assertEquals(1709850.1F, matrix3_0.m21, 0.01F);
      assertEquals((-2610.222F), matrix3_0.m20, 0.01F);
      assertEquals((-2612.222F), matrix3_1.m01, 0.01F);
      assertEquals(8.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-2612.222F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1709850.1F, matrix3_1.m21, 0.01F);
      assertEquals(1711158.2F, matrix3_1.m11, 0.01F);
      assertEquals((-2610.222F), matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.multAffine((IMatrix3) matrix3_0, matrix3_0);
      assertNotNull(matrix3_1);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.multAffine((IMatrix3) matrix3_0, matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.multAffine((IMatrix3) matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-1616.9218F), (-1616.9218F), (-1616.9218F), -0.0F, (-1616.9218F), 2453.7844F, 2571.82F, 4.0F, 0.0F);
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(2453.7844F, matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m20(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m00(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m11(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m10(), 0.01F);
      assertEquals(2571.82F, matrix3_0.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(4.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m10, 0.01F);
      assertEquals(2571.82F, matrix3_0.m02, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m00, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m11, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m20, 0.01F);
      assertEquals(2453.7844F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.multAffine((IMatrix3) matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(2453.7844F, matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m20(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m00(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m11(), 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m10(), 0.01F);
      assertEquals(2571.82F, matrix3_0.m02(), 0.01F);
      assertEquals(2614436.0F, matrix3_1.m00(), 0.01F);
      assertEquals(2614436.0F, matrix3_1.m11(), 0.01F);
      assertEquals(5228872.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-1354758.4F), matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-3965123.8F), matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(4.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m10, 0.01F);
      assertEquals(2571.82F, matrix3_0.m02, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m00, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m11, 0.01F);
      assertEquals((-1616.9218F), matrix3_0.m20, 0.01F);
      assertEquals(2453.7844F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(2614436.0F, matrix3_1.m00, 0.01F);
      assertEquals(2614436.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(5228872.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-1354758.4F), matrix3_1.m20, 0.01F);
      assertEquals((-3965123.8F), matrix3_1.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      
      matrix3_0.setRow(1, 0.0F, 2.7182817F, (-2339.8103F));
      assertEquals(2.7182817F, matrix3_0.m11(), 0.01F);
      assertEquals((-2339.8103F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-2339.8103F), matrix3_0.m21, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m11, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertNotNull(floatBuffer0);
      assertEquals(0, floatBuffer0.position());
      assertTrue(floatBuffer0.hasArray());
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(2, floatBuffer0.capacity());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(2, floatBuffer0.remaining());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=2 cap=2]", floatBuffer0.toString());
      assertEquals(2, floatBuffer0.limit());
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      assertNotNull(vector3_1);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertNotSame(vector3_1, vector3_0);
      
      Vector3 vector3_2 = (Vector3)Vector3.NORMAL_XYZ;
      assertNotNull(vector3_2);
      assertEquals(0.57735026F, vector3_2.x(), 0.01F);
      assertEquals(0.57735026F, vector3_2.y(), 0.01F);
      assertEquals(0.57735026F, vector3_2.z(), 0.01F);
      assertEquals(0.99999994F, vector3_2.lengthSquared(), 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.57735026F, vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.y, 0.01F);
      assertEquals(0.57735026F, vector3_2.x, 0.01F);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      
      Matrix3 matrix3_2 = matrix3_0.IDENTITY.multAffine((IMatrix3) matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(2.7182817F, matrix3_0.m11(), 0.01F);
      assertEquals((-2339.8103F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-2339.8103F), matrix3_0.m21, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      
      float float0 = matrix3_0.extractRotation();
      assertEquals(2.7182817F, matrix3_0.m11(), 0.01F);
      assertEquals((-2339.8103F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-2339.8103F), matrix3_0.m21, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      
      Matrix3 matrix3_3 = new Matrix3();
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      
      Matrix3 matrix3_4 = matrix3_0.lerp((IMatrix3) matrix3_3, 0.0F);
      assertNotNull(matrix3_4);
      assertEquals(2.7182817F, matrix3_0.m11(), 0.01F);
      assertEquals((-2339.8103F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(2.7182817F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals((-2339.8103F), matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals(0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(1.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(matrix3_4.equals((Object)matrix3_2));
      assertTrue(matrix3_4.equals((Object)matrix3_0));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_1));
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-2339.8103F), matrix3_0.m21, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      assertEquals((-2339.8103F), matrix3_4.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertEquals(2.7182817F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m00, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_4);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_4, matrix3_2);
      assertNotSame(matrix3_4, matrix3_0);
      assertNotSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_1);
      
      Matrix3 matrix3_5 = matrix3_3.setToRotation((-2339.8103F), (IVector3) vector3_2);
      assertNotNull(matrix3_5);
      assertEquals(0.57735026F, vector3_2.x(), 0.01F);
      assertEquals(0.57735026F, vector3_2.y(), 0.01F);
      assertEquals(0.57735026F, vector3_2.z(), 0.01F);
      assertEquals(0.99999994F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.9546499F, matrix3_3.m21(), 0.01F);
      assertEquals(0.9546499F, matrix3_3.m10(), 0.01F);
      assertEquals(0.23197761F, matrix3_3.m20(), 0.01F);
      assertEquals(0.9546499F, matrix3_3.m02(), 0.01F);
      assertEquals(0.23197761F, matrix3_3.m01(), 0.01F);
      assertEquals(0.23197761F, matrix3_3.m12(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals((-0.18662763F), matrix3_3.m00(), 0.01F);
      assertEquals((-0.18662763F), matrix3_3.m22(), 0.01F);
      assertEquals((-0.18662763F), matrix3_3.m11(), 0.01F);
      assertEquals(0.9546499F, matrix3_5.m21(), 0.01F);
      assertEquals(0.9546499F, matrix3_5.m10(), 0.01F);
      assertEquals(0.23197761F, matrix3_5.m20(), 0.01F);
      assertEquals((-0.18662763F), matrix3_5.m00(), 0.01F);
      assertEquals((-0.18662763F), matrix3_5.m22(), 0.01F);
      assertEquals((-0.18662763F), matrix3_5.m11(), 0.01F);
      assertFalse(matrix3_5.isAffine());
      assertEquals(0.9546499F, matrix3_5.m02(), 0.01F);
      assertEquals(0.23197761F, matrix3_5.m01(), 0.01F);
      assertEquals(0.23197761F, matrix3_5.m12(), 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_4));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_5.equals((Object)matrix3_1));
      assertFalse(matrix3_5.equals((Object)matrix3_0));
      assertFalse(matrix3_5.equals((Object)matrix3_2));
      assertFalse(matrix3_5.equals((Object)matrix3_4));
      assertEquals(0.57735026F, vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.y, 0.01F);
      assertEquals(0.57735026F, vector3_2.x, 0.01F);
      assertEquals((-0.18662763F), matrix3_3.m00, 0.01F);
      assertEquals((-0.18662763F), matrix3_3.m11, 0.01F);
      assertEquals((-0.18662763F), matrix3_3.m22, 0.01F);
      assertEquals(0.9546499F, matrix3_3.m02, 0.01F);
      assertEquals(0.9546499F, matrix3_3.m10, 0.01F);
      assertEquals(0.9546499F, matrix3_3.m21, 0.01F);
      assertEquals(0.23197761F, matrix3_3.m01, 0.01F);
      assertEquals(0.23197761F, matrix3_3.m12, 0.01F);
      assertEquals(0.23197761F, matrix3_3.m20, 0.01F);
      assertEquals(0.9546499F, matrix3_5.m02, 0.01F);
      assertEquals(0.23197761F, matrix3_5.m20, 0.01F);
      assertEquals(0.23197761F, matrix3_5.m01, 0.01F);
      assertEquals(0.23197761F, matrix3_5.m12, 0.01F);
      assertEquals(0.9546499F, matrix3_5.m10, 0.01F);
      assertEquals(0.9546499F, matrix3_5.m21, 0.01F);
      assertEquals((-0.18662763F), matrix3_5.m00, 0.01F);
      assertEquals((-0.18662763F), matrix3_5.m11, 0.01F);
      assertEquals((-0.18662763F), matrix3_5.m22, 0.01F);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_5);
      assertNotSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_4);
      assertNotSame(matrix3_3, matrix3_1);
      assertSame(matrix3_5, matrix3_3);
      assertNotSame(matrix3_5, matrix3_1);
      assertNotSame(matrix3_5, matrix3_0);
      assertNotSame(matrix3_5, matrix3_2);
      assertNotSame(matrix3_5, matrix3_4);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(0.0F, 2.7182817F, 1.0F, (-295.3904F), 37.74171F, 274.73233F, (-1.5707964F), 0.0F, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(274.73233F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-1.5707964F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2.7182817F, matrix3_1.m10(), 0.01F);
      assertEquals(37.74171F, matrix3_1.m11(), 0.01F);
      assertEquals((-295.3904F), matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(2.7182817F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals(37.74171F, matrix3_1.m11, 0.01F);
      assertEquals((-295.3904F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(274.73233F, matrix3_1.m21, 0.01F);
      assertEquals((-1.5707964F), matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.multAffine((IMatrix3) matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(274.73233F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-1.5707964F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2.7182817F, matrix3_1.m10(), 0.01F);
      assertEquals(37.74171F, matrix3_1.m11(), 0.01F);
      assertEquals((-295.3904F), matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals((-295.3904F), matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(2.7182817F, matrix3_2.m10(), 0.01F);
      assertEquals(274.73233F, matrix3_2.m21(), 0.01F);
      assertEquals(1.0F, matrix3_2.m20(), 0.01F);
      assertEquals(37.74171F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2.7182817F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals(37.74171F, matrix3_1.m11, 0.01F);
      assertEquals((-295.3904F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(274.73233F, matrix3_1.m21, 0.01F);
      assertEquals((-1.5707964F), matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(2.7182817F, matrix3_2.m10, 0.01F);
      assertEquals(274.73233F, matrix3_2.m21, 0.01F);
      assertEquals(37.74171F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m20, 0.01F);
      assertEquals((-295.3904F), matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(61.04739F, 61.04739F, 61.04739F, 61.04739F, (-1308.111F), (-1308.111F), 61.04739F, (-1308.111F), (-1946.3772F));
      assertNotNull(matrix3_0);
      assertEquals(61.04739F, matrix3_0.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m20(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m10(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m01(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(61.04739F, matrix3_0.m10, 0.01F);
      assertEquals(61.04739F, matrix3_0.m00, 0.01F);
      assertEquals(61.04739F, matrix3_0.m01, 0.01F);
      assertEquals(61.04739F, matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(61.04739F, matrix3_0.m20, 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.setToZero();
      assertNotNull(matrix3_1);
      assertEquals(61.04739F, matrix3_0.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m20(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m10(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m01(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(61.04739F, matrix3_0.m10, 0.01F);
      assertEquals(61.04739F, matrix3_0.m00, 0.01F);
      assertEquals(61.04739F, matrix3_0.m01, 0.01F);
      assertEquals(61.04739F, matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(61.04739F, matrix3_0.m20, 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.multAffine((IMatrix3) matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(61.04739F, matrix3_0.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m20(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m10(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m01(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(61.04739F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(61.04739F, matrix3_0.m10, 0.01F);
      assertEquals(61.04739F, matrix3_0.m00, 0.01F);
      assertEquals(61.04739F, matrix3_0.m01, 0.01F);
      assertEquals(61.04739F, matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(61.04739F, matrix3_0.m20, 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(61.04739F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(1.0E-4F, 1.0E-4F, 1.0E-4F, (-2929.2F), 491.86252F, (-2992.0F), 2366.5293F, 1.0E-4F, 1810.3224F);
      assertNotNull(matrix3_1);
      assertEquals(1.0E-4F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10(), 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01(), 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(491.86252F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals((-2992.0F), matrix3_1.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20, 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22, 0.01F);
      assertEquals(491.86252F, matrix3_1.m11, 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.invert();
      assertNotNull(matrix3_2);
      assertEquals(1.0E-4F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10(), 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01(), 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(491.86252F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-3.061272E-5F), matrix3_2.m21(), 0.01F);
      assertEquals((-4340.5195F), matrix3_2.m00(), 0.01F);
      assertEquals(2.711304E-4F, matrix3_2.m11(), 0.01F);
      assertEquals(8666.412F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0016982551F, matrix3_2.m20(), 0.01F);
      assertEquals(8.824656E-4F, matrix3_2.m10(), 0.01F);
      assertEquals((-0.001153596F), matrix3_2.m12(), 0.01F);
      assertEquals((-0.0016676423F), matrix3_2.m22(), 0.01F);
      assertEquals(5674.108F, matrix3_2.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-2992.0F), matrix3_1.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20, 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22, 0.01F);
      assertEquals(491.86252F, matrix3_1.m11, 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00, 0.01F);
      assertEquals(8666.412F, matrix3_2.m01, 0.01F);
      assertEquals((-0.0016676423F), matrix3_2.m22, 0.01F);
      assertEquals(8.824656E-4F, matrix3_2.m10, 0.01F);
      assertEquals((-0.001153596F), matrix3_2.m12, 0.01F);
      assertEquals(0.0016982551F, matrix3_2.m20, 0.01F);
      assertEquals(5674.108F, matrix3_2.m02, 0.01F);
      assertEquals((-4340.5195F), matrix3_2.m00, 0.01F);
      assertEquals((-3.061272E-5F), matrix3_2.m21, 0.01F);
      assertEquals(2.711304E-4F, matrix3_2.m11, 0.01F);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      Matrix3 matrix3_3 = matrix3_0.mult((IMatrix3) matrix3_2, matrix3_2);
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10(), 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01(), 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(491.86252F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-3.061272E-5F), matrix3_2.m21(), 0.01F);
      assertEquals((-4340.5195F), matrix3_2.m00(), 0.01F);
      assertEquals(2.711304E-4F, matrix3_2.m11(), 0.01F);
      assertEquals(8666.412F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0016982551F, matrix3_2.m20(), 0.01F);
      assertEquals(8.824656E-4F, matrix3_2.m10(), 0.01F);
      assertEquals((-0.001153596F), matrix3_2.m12(), 0.01F);
      assertEquals((-0.0016676423F), matrix3_2.m22(), 0.01F);
      assertEquals(5674.108F, matrix3_2.m02(), 0.01F);
      assertEquals((-0.0016676423F), matrix3_3.m22(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(8.824656E-4F, matrix3_3.m10(), 0.01F);
      assertEquals((-0.001153596F), matrix3_3.m12(), 0.01F);
      assertEquals(5674.108F, matrix3_3.m02(), 0.01F);
      assertEquals(8666.412F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0016982551F, matrix3_3.m20(), 0.01F);
      assertEquals((-3.061272E-5F), matrix3_3.m21(), 0.01F);
      assertEquals(2.711304E-4F, matrix3_3.m11(), 0.01F);
      assertEquals((-4340.5195F), matrix3_3.m00(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20, 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22, 0.01F);
      assertEquals(491.86252F, matrix3_1.m11, 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00, 0.01F);
      assertEquals(8666.412F, matrix3_2.m01, 0.01F);
      assertEquals((-0.0016676423F), matrix3_2.m22, 0.01F);
      assertEquals(8.824656E-4F, matrix3_2.m10, 0.01F);
      assertEquals((-0.001153596F), matrix3_2.m12, 0.01F);
      assertEquals(0.0016982551F, matrix3_2.m20, 0.01F);
      assertEquals(5674.108F, matrix3_2.m02, 0.01F);
      assertEquals((-4340.5195F), matrix3_2.m00, 0.01F);
      assertEquals((-3.061272E-5F), matrix3_2.m21, 0.01F);
      assertEquals(2.711304E-4F, matrix3_2.m11, 0.01F);
      assertEquals(8666.412F, matrix3_3.m01, 0.01F);
      assertEquals(2.711304E-4F, matrix3_3.m11, 0.01F);
      assertEquals(5674.108F, matrix3_3.m02, 0.01F);
      assertEquals((-4340.5195F), matrix3_3.m00, 0.01F);
      assertEquals((-3.061272E-5F), matrix3_3.m21, 0.01F);
      assertEquals(8.824656E-4F, matrix3_3.m10, 0.01F);
      assertEquals((-0.0016676423F), matrix3_3.m22, 0.01F);
      assertEquals((-0.001153596F), matrix3_3.m12, 0.01F);
      assertEquals(0.0016982551F, matrix3_3.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_1);
      assertSame(matrix3_3, matrix3_2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-3193.8F), (-1020.65F), (-1020.65F), 2352.1711F, 0.5F, 2810.6F, (-2289.4F), 0.0F, 0.5F);
      assertNotNull(matrix3_0);
      assertEquals((-2289.4F), matrix3_0.m02(), 0.01F);
      assertEquals((-3193.8F), matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2352.1711F, matrix3_0.m01(), 0.01F);
      assertEquals((-1020.65F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5F, matrix3_0.m11(), 0.01F);
      assertEquals(2810.6F, matrix3_0.m21(), 0.01F);
      assertEquals((-1020.65F), matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m11, 0.01F);
      assertEquals(0.5F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-1020.65F), matrix3_0.m10, 0.01F);
      assertEquals(2810.6F, matrix3_0.m21, 0.01F);
      assertEquals((-2289.4F), matrix3_0.m02, 0.01F);
      assertEquals((-3193.8F), matrix3_0.m00, 0.01F);
      assertEquals(2352.1711F, matrix3_0.m01, 0.01F);
      assertEquals((-1020.65F), matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.mult((IMatrix3) matrix3_0, matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(2336676.2F, matrix3_0.m22(), 0.01F);
      assertEquals(2336676.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-1.3945776E7F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2400743.2F), matrix3_0.m11(), 0.01F);
      assertEquals(1.0136292E7F, matrix3_0.m00(), 0.01F);
      assertEquals((-2397933.0F), matrix3_0.m21(), 0.01F);
      assertEquals(3259241.8F, matrix3_0.m10(), 0.01F);
      assertEquals(7310741.0F, matrix3_0.m02(), 0.01F);
      assertEquals(390602.7F, matrix3_0.m20(), 0.01F);
      assertEquals((-2400743.2F), matrix3_1.m11(), 0.01F);
      assertEquals(390602.7F, matrix3_1.m20(), 0.01F);
      assertEquals(2336676.2F, matrix3_1.m22(), 0.01F);
      assertEquals((-2397933.0F), matrix3_1.m21(), 0.01F);
      assertEquals(1.0136292E7F, matrix3_1.m00(), 0.01F);
      assertEquals((-1.3945776E7F), matrix3_1.m01(), 0.01F);
      assertEquals(2336676.0F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(3259241.8F, matrix3_1.m10(), 0.01F);
      assertEquals(7310741.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-2397933.0F), matrix3_0.m21, 0.01F);
      assertEquals(3259241.8F, matrix3_0.m10, 0.01F);
      assertEquals(1.0136292E7F, matrix3_0.m00, 0.01F);
      assertEquals(7310741.0F, matrix3_0.m02, 0.01F);
      assertEquals(2336676.2F, matrix3_0.m22, 0.01F);
      assertEquals(390602.7F, matrix3_0.m20, 0.01F);
      assertEquals(2336676.0F, matrix3_0.m12, 0.01F);
      assertEquals((-2400743.2F), matrix3_0.m11, 0.01F);
      assertEquals((-1.3945776E7F), matrix3_0.m01, 0.01F);
      assertEquals(3259241.8F, matrix3_1.m10, 0.01F);
      assertEquals(7310741.0F, matrix3_1.m02, 0.01F);
      assertEquals(390602.7F, matrix3_1.m20, 0.01F);
      assertEquals((-2400743.2F), matrix3_1.m11, 0.01F);
      assertEquals(1.0136292E7F, matrix3_1.m00, 0.01F);
      assertEquals((-2397933.0F), matrix3_1.m21, 0.01F);
      assertEquals(2336676.2F, matrix3_1.m22, 0.01F);
      assertEquals((-1.3945776E7F), matrix3_1.m01, 0.01F);
      assertEquals(2336676.0F, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-3193.8F), (-1020.65F), (-1020.65F), 2352.1711F, 0.5F, 2810.6F, (-2289.4F), 0.0F, 0.5F);
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2810.6F, matrix3_0.m21(), 0.01F);
      assertEquals(0.5F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1020.65F), matrix3_0.m20(), 0.01F);
      assertEquals((-3193.8F), matrix3_0.m00(), 0.01F);
      assertEquals(2352.1711F, matrix3_0.m01(), 0.01F);
      assertEquals((-2289.4F), matrix3_0.m02(), 0.01F);
      assertEquals((-1020.65F), matrix3_0.m10(), 0.01F);
      assertEquals((-3193.8F), matrix3_0.m00, 0.01F);
      assertEquals((-2289.4F), matrix3_0.m02, 0.01F);
      assertEquals((-1020.65F), matrix3_0.m20, 0.01F);
      assertEquals(2352.1711F, matrix3_0.m01, 0.01F);
      assertEquals(2810.6F, matrix3_0.m21, 0.01F);
      assertEquals(0.5F, matrix3_0.m11, 0.01F);
      assertEquals(0.5F, matrix3_0.m22, 0.01F);
      assertEquals((-1020.65F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.mult((IMatrix3) matrix3_0, matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2810.6F, matrix3_0.m21(), 0.01F);
      assertEquals(0.5F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1020.65F), matrix3_0.m20(), 0.01F);
      assertEquals((-3193.8F), matrix3_0.m00(), 0.01F);
      assertEquals(2352.1711F, matrix3_0.m01(), 0.01F);
      assertEquals((-2289.4F), matrix3_0.m02(), 0.01F);
      assertEquals((-1020.65F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(2352.1711F, matrix3_2.m01(), 0.01F);
      assertEquals((-1020.65F), matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.5F, matrix3_2.m22(), 0.01F);
      assertEquals(0.5F, matrix3_2.m11(), 0.01F);
      assertEquals((-2289.4F), matrix3_2.m02(), 0.01F);
      assertEquals((-3193.8F), matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(2810.6F, matrix3_2.m21(), 0.01F);
      assertEquals((-1020.65F), matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-3193.8F), matrix3_0.m00, 0.01F);
      assertEquals((-2289.4F), matrix3_0.m02, 0.01F);
      assertEquals((-1020.65F), matrix3_0.m20, 0.01F);
      assertEquals(2352.1711F, matrix3_0.m01, 0.01F);
      assertEquals(2810.6F, matrix3_0.m21, 0.01F);
      assertEquals(0.5F, matrix3_0.m11, 0.01F);
      assertEquals(0.5F, matrix3_0.m22, 0.01F);
      assertEquals((-1020.65F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals((-1020.65F), matrix3_2.m10, 0.01F);
      assertEquals(2810.6F, matrix3_2.m21, 0.01F);
      assertEquals(2352.1711F, matrix3_2.m01, 0.01F);
      assertEquals((-1020.65F), matrix3_2.m20, 0.01F);
      assertEquals((-3193.8F), matrix3_2.m00, 0.01F);
      assertEquals(0.5F, matrix3_2.m11, 0.01F);
      assertEquals(0.5F, matrix3_2.m22, 0.01F);
      assertEquals((-2289.4F), matrix3_2.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.mult((IMatrix3) matrix3_0, matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-2.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-2.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = Matrix3.IDENTITY;
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.setToScale(0.6787218F, 0.5F, (-1.0F));
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.6787218F, matrix3_1.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m22(), 0.01F);
      assertEquals(0.5F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals((-1.0F), matrix3_2.m22(), 0.01F);
      assertEquals(0.5F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.6787218F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.5F, matrix3_1.m11, 0.01F);
      assertEquals((-1.0F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.6787218F, matrix3_1.m00, 0.01F);
      assertEquals(0.5F, matrix3_2.m11, 0.01F);
      assertEquals((-1.0F), matrix3_2.m22, 0.01F);
      assertEquals(0.6787218F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      
      Matrix3 matrix3_3 = matrix3_0.setToReflection((IVector3) vector3_0);
      assertNotNull(matrix3_3);
      assertEquals(-0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertEquals(-0.0F, matrix3_0.m20, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(-0.0F, matrix3_3.m02, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(-0.0F, matrix3_3.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_2);
      
      Matrix3 matrix3_4 = matrix3_0.mult((IMatrix3) matrix3_1);
      assertNotNull(matrix3_4);
      assertEquals(-0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.6787218F, matrix3_1.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m22(), 0.01F);
      assertEquals(0.5F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m10(), 0.01F);
      assertFalse(matrix3_4.isAffine());
      assertEquals(0.6787218F, matrix3_4.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_4.m22(), 0.01F);
      assertEquals(0.5F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertTrue(matrix3_4.equals((Object)matrix3_2));
      assertTrue(matrix3_4.equals((Object)matrix3_1));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertEquals(-0.0F, matrix3_0.m20, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.5F, matrix3_1.m11, 0.01F);
      assertEquals((-1.0F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.6787218F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertEquals(0.6787218F, matrix3_4.m00, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(0.5F, matrix3_4.m11, 0.01F);
      assertEquals((-1.0F), matrix3_4.m22, 0.01F);
      assertEquals(0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_2);
      assertNotSame(matrix3_4, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, (-1308.111F), (-1308.111F), 48.87661F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.lerpAffineLocal(matrix3_0, 48.87661F);
      assertNotNull(matrix3_1);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(48.87661F, matrix3_1.m10, 0.01F);
      assertEquals(48.87661F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21, 0.01F);
      assertEquals(48.87661F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.mult((IMatrix3) matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1713543.1F, matrix3_2.m11(), 0.01F);
      assertEquals(4777.846F, matrix3_2.m00(), 0.01F);
      assertEquals(1712235.0F, matrix3_2.m21(), 0.01F);
      assertEquals((-61498.23F), matrix3_2.m20(), 0.01F);
      assertEquals((-61547.105F), matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-61547.105F), matrix3_2.m01(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(4777.846F, matrix3_2.m00, 0.01F);
      assertEquals((-61547.105F), matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals((-61498.23F), matrix3_2.m20, 0.01F);
      assertEquals((-61547.105F), matrix3_2.m01, 0.01F);
      assertEquals(1712235.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1713543.1F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, (-1308.111F), (-1308.111F), 48.87661F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.mult((IMatrix3) matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(8263252.5F, matrix3_1.m22(), 0.01F);
      assertEquals(3424697.5F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-1634226.9F), matrix3_1.m21(), 0.01F);
      assertEquals((-125483.13F), matrix3_1.m10(), 0.01F);
      assertEquals((-125483.13F), matrix3_1.m01(), 0.01F);
      assertEquals((-1634226.9F), matrix3_1.m12(), 0.01F);
      assertEquals(63539.87F, matrix3_1.m02(), 0.01F);
      assertEquals(7166.7695F, matrix3_1.m00(), 0.01F);
      assertEquals(63539.87F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals(63539.87F, matrix3_1.m02, 0.01F);
      assertEquals((-1634226.9F), matrix3_1.m12, 0.01F);
      assertEquals(7166.7695F, matrix3_1.m00, 0.01F);
      assertEquals(63539.87F, matrix3_1.m20, 0.01F);
      assertEquals(3424697.5F, matrix3_1.m11, 0.01F);
      assertEquals((-125483.13F), matrix3_1.m10, 0.01F);
      assertEquals((-1634226.9F), matrix3_1.m21, 0.01F);
      assertEquals(8263252.5F, matrix3_1.m22, 0.01F);
      assertEquals((-125483.13F), matrix3_1.m01, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(0.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.mult((IMatrix3) matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2362.901F), 458.9132F, (-2362.901F), 2657.36F, (-1888.7909F), (-1888.7909F), (-0.99999F), 2657.36F, 287.62375F);
      assertNotNull(matrix3_0);
      assertEquals((-1888.7909F), matrix3_0.m21(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2362.901F), matrix3_0.m20(), 0.01F);
      assertEquals(458.9132F, matrix3_0.m10(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m22(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m01(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m12(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals(458.9132F, matrix3_0.m10, 0.01F);
      assertEquals(2657.36F, matrix3_0.m01, 0.01F);
      assertEquals(2657.36F, matrix3_0.m12, 0.01F);
      assertEquals(287.62375F, matrix3_0.m22, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.mult((IMatrix3) matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals((-1888.7909F), matrix3_0.m21(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2362.901F), matrix3_0.m20(), 0.01F);
      assertEquals(458.9132F, matrix3_0.m10(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m22(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m01(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m12(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-1888.7909F), matrix3_2.m11(), 0.01F);
      assertEquals((-0.99999F), matrix3_2.m02(), 0.01F);
      assertEquals((-2362.901F), matrix3_2.m20(), 0.01F);
      assertEquals((-1888.7909F), matrix3_2.m21(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(287.62375F, matrix3_2.m22(), 0.01F);
      assertEquals(458.9132F, matrix3_2.m10(), 0.01F);
      assertEquals(2657.36F, matrix3_2.m01(), 0.01F);
      assertEquals(2657.36F, matrix3_2.m12(), 0.01F);
      assertEquals((-2362.901F), matrix3_2.m00(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertEquals(458.9132F, matrix3_0.m10, 0.01F);
      assertEquals(2657.36F, matrix3_0.m01, 0.01F);
      assertEquals(2657.36F, matrix3_0.m12, 0.01F);
      assertEquals(287.62375F, matrix3_0.m22, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(458.9132F, matrix3_2.m10, 0.01F);
      assertEquals((-2362.901F), matrix3_2.m00, 0.01F);
      assertEquals(2657.36F, matrix3_2.m01, 0.01F);
      assertEquals(2657.36F, matrix3_2.m12, 0.01F);
      assertEquals((-0.99999F), matrix3_2.m02, 0.01F);
      assertEquals((-1888.7909F), matrix3_2.m21, 0.01F);
      assertEquals((-1888.7909F), matrix3_2.m11, 0.01F);
      assertEquals((-2362.901F), matrix3_2.m20, 0.01F);
      assertEquals(287.62375F, matrix3_2.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(0.0F, 0.0F, (-660.84F), 1.1169724E7F, (-3525.0698F), 1793.815F, 9.0360024E36F, 53473.83F, (-3525.0698F));
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(9.0360024E36F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-660.84F), matrix3_0.m20(), 0.01F);
      assertEquals(1793.815F, matrix3_0.m21(), 0.01F);
      assertEquals((-3525.0698F), matrix3_0.m22(), 0.01F);
      assertEquals((-3525.0698F), matrix3_0.m11(), 0.01F);
      assertEquals(1.1169724E7F, matrix3_0.m01(), 0.01F);
      assertEquals(53473.83F, matrix3_0.m12(), 0.01F);
      assertEquals((-3525.0698F), matrix3_0.m11, 0.01F);
      assertEquals((-3525.0698F), matrix3_0.m22, 0.01F);
      assertEquals(1.1169724E7F, matrix3_0.m01, 0.01F);
      assertEquals(53473.83F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(9.0360024E36F, matrix3_0.m02, 0.01F);
      assertEquals((-660.84F), matrix3_0.m20, 0.01F);
      assertEquals(1793.815F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(2.7182817F, 4.0F, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(4.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2.7182817F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(2.7182817F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(4.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(4.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(2.7182817F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(4.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      float float0 = matrix3_0.m22();
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(4.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2.7182817F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(4.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertSame(matrix3_0, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2.0F, 2.0F, 2.0F, (-0.99999F), (-1308.111F), (-1308.111F), 2.0F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      assertNotNull(vector3_0);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertNotNull(vector3_1);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      
      Vector3 vector3_2 = matrix3_0.transform((IVector3) vector3_1, vector3_1);
      assertNotNull(vector3_2);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_1.x(), 0.01F);
      assertEquals((-2617.222F), vector3_1.y(), 0.01F);
      assertEquals(1253.129F, vector3_1.z(), 0.01F);
      assertEquals(8420219.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1253.129F, vector3_2.z(), 0.01F);
      assertEquals((-2617.222F), vector3_2.y(), 0.01F);
      assertEquals(8420219.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_2.x(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(6.0F, vector3_1.x, 0.01F);
      assertEquals(1253.129F, vector3_1.z, 0.01F);
      assertEquals((-2617.222F), vector3_1.y, 0.01F);
      assertEquals(6.0F, vector3_2.x, 0.01F);
      assertEquals((-2617.222F), vector3_2.y, 0.01F);
      assertEquals(1253.129F, vector3_2.z, 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IVector3) vector3_0, (IVector3) vector3_2);
      assertNotNull(matrix3_1);
      assertEquals((-0.78376174F), matrix3_0.m01(), 0.01F);
      assertEquals(0.9475285F, matrix3_0.m12(), 0.01F);
      assertEquals(0.10306212F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5423556F, matrix3_0.m00(), 0.01F);
      assertEquals(0.2600994F, matrix3_0.m10(), 0.01F);
      assertEquals((-0.79887354F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-0.30260232F), matrix3_0.m02(), 0.01F);
      assertEquals((-0.18584466F), matrix3_0.m11(), 0.01F);
      assertEquals((-0.5926039F), matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_1.x(), 0.01F);
      assertEquals((-2617.222F), vector3_1.y(), 0.01F);
      assertEquals(1253.129F, vector3_1.z(), 0.01F);
      assertEquals(8420219.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1253.129F, vector3_2.z(), 0.01F);
      assertEquals((-2617.222F), vector3_2.y(), 0.01F);
      assertEquals(8420219.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_2.x(), 0.01F);
      assertEquals(0.9475285F, matrix3_1.m12(), 0.01F);
      assertEquals((-0.5926039F), matrix3_1.m21(), 0.01F);
      assertEquals((-0.18584466F), matrix3_1.m11(), 0.01F);
      assertEquals((-0.30260232F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.5423556F, matrix3_1.m00(), 0.01F);
      assertEquals(0.10306212F, matrix3_1.m22(), 0.01F);
      assertEquals(0.2600994F, matrix3_1.m10(), 0.01F);
      assertEquals((-0.79887354F), matrix3_1.m20(), 0.01F);
      assertEquals((-0.78376174F), matrix3_1.m01(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.2600994F, matrix3_0.m10, 0.01F);
      assertEquals(0.5423556F, matrix3_0.m00, 0.01F);
      assertEquals((-0.30260232F), matrix3_0.m02, 0.01F);
      assertEquals((-0.5926039F), matrix3_0.m21, 0.01F);
      assertEquals((-0.18584466F), matrix3_0.m11, 0.01F);
      assertEquals(0.9475285F, matrix3_0.m12, 0.01F);
      assertEquals((-0.79887354F), matrix3_0.m20, 0.01F);
      assertEquals(0.10306212F, matrix3_0.m22, 0.01F);
      assertEquals((-0.78376174F), matrix3_0.m01, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(6.0F, vector3_1.x, 0.01F);
      assertEquals(1253.129F, vector3_1.z, 0.01F);
      assertEquals((-2617.222F), vector3_1.y, 0.01F);
      assertEquals(6.0F, vector3_2.x, 0.01F);
      assertEquals((-2617.222F), vector3_2.y, 0.01F);
      assertEquals(1253.129F, vector3_2.z, 0.01F);
      assertEquals(0.2600994F, matrix3_1.m10, 0.01F);
      assertEquals(0.5423556F, matrix3_1.m00, 0.01F);
      assertEquals(0.10306212F, matrix3_1.m22, 0.01F);
      assertEquals((-0.30260232F), matrix3_1.m02, 0.01F);
      assertEquals((-0.78376174F), matrix3_1.m01, 0.01F);
      assertEquals((-0.79887354F), matrix3_1.m20, 0.01F);
      assertEquals(0.9475285F, matrix3_1.m12, 0.01F);
      assertEquals((-0.18584466F), matrix3_1.m11, 0.01F);
      assertEquals((-0.5926039F), matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(matrix3_1, matrix3_0);
      
      float float0 = matrix3_1.m22();
      assertEquals((-0.78376174F), matrix3_0.m01(), 0.01F);
      assertEquals(0.9475285F, matrix3_0.m12(), 0.01F);
      assertEquals(0.10306212F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5423556F, matrix3_0.m00(), 0.01F);
      assertEquals(0.2600994F, matrix3_0.m10(), 0.01F);
      assertEquals((-0.79887354F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-0.30260232F), matrix3_0.m02(), 0.01F);
      assertEquals((-0.18584466F), matrix3_0.m11(), 0.01F);
      assertEquals((-0.5926039F), matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_1.x(), 0.01F);
      assertEquals((-2617.222F), vector3_1.y(), 0.01F);
      assertEquals(1253.129F, vector3_1.z(), 0.01F);
      assertEquals(8420219.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1253.129F, vector3_2.z(), 0.01F);
      assertEquals((-2617.222F), vector3_2.y(), 0.01F);
      assertEquals(8420219.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(6.0F, vector3_2.x(), 0.01F);
      assertEquals(0.9475285F, matrix3_1.m12(), 0.01F);
      assertEquals((-0.5926039F), matrix3_1.m21(), 0.01F);
      assertEquals((-0.18584466F), matrix3_1.m11(), 0.01F);
      assertEquals((-0.30260232F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.5423556F, matrix3_1.m00(), 0.01F);
      assertEquals(0.10306212F, matrix3_1.m22(), 0.01F);
      assertEquals(0.2600994F, matrix3_1.m10(), 0.01F);
      assertEquals((-0.79887354F), matrix3_1.m20(), 0.01F);
      assertEquals((-0.78376174F), matrix3_1.m01(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.2600994F, matrix3_0.m10, 0.01F);
      assertEquals(0.5423556F, matrix3_0.m00, 0.01F);
      assertEquals((-0.30260232F), matrix3_0.m02, 0.01F);
      assertEquals((-0.5926039F), matrix3_0.m21, 0.01F);
      assertEquals((-0.18584466F), matrix3_0.m11, 0.01F);
      assertEquals(0.9475285F, matrix3_0.m12, 0.01F);
      assertEquals((-0.79887354F), matrix3_0.m20, 0.01F);
      assertEquals(0.10306212F, matrix3_0.m22, 0.01F);
      assertEquals((-0.78376174F), matrix3_0.m01, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(6.0F, vector3_1.x, 0.01F);
      assertEquals(1253.129F, vector3_1.z, 0.01F);
      assertEquals((-2617.222F), vector3_1.y, 0.01F);
      assertEquals(6.0F, vector3_2.x, 0.01F);
      assertEquals((-2617.222F), vector3_2.y, 0.01F);
      assertEquals(1253.129F, vector3_2.z, 0.01F);
      assertEquals(0.2600994F, matrix3_1.m10, 0.01F);
      assertEquals(0.5423556F, matrix3_1.m00, 0.01F);
      assertEquals(0.10306212F, matrix3_1.m22, 0.01F);
      assertEquals((-0.30260232F), matrix3_1.m02, 0.01F);
      assertEquals((-0.78376174F), matrix3_1.m01, 0.01F);
      assertEquals((-0.79887354F), matrix3_1.m20, 0.01F);
      assertEquals(0.9475285F, matrix3_1.m12, 0.01F);
      assertEquals((-0.18584466F), matrix3_1.m11, 0.01F);
      assertEquals((-0.5926039F), matrix3_1.m21, 0.01F);
      assertEquals(0.10306212F, float0, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Vector3 vector3_0 = new Vector3(5.7309535E-10F, (-1861.0F), (-1861.0F));
      assertNotNull(vector3_0);
      assertEquals((-1861.0F), vector3_0.y(), 0.01F);
      assertEquals((-1861.0F), vector3_0.z(), 0.01F);
      assertEquals(6926642.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(5.7309535E-10F, vector3_0.x(), 0.01F);
      assertEquals((-1861.0F), vector3_0.y, 0.01F);
      assertEquals(5.7309535E-10F, vector3_0.x, 0.01F);
      assertEquals((-1861.0F), vector3_0.z, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((-391.5931F), (IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-0.44826525F), matrix3_0.m00(), 0.01F);
      assertEquals((-1663.549F), matrix3_0.m10(), 0.01F);
      assertEquals(1663.549F, matrix3_0.m01(), 0.01F);
      assertEquals((-1663.549F), matrix3_0.m02(), 0.01F);
      assertEquals(5015807.5F, matrix3_0.m21(), 0.01F);
      assertEquals(1663.549F, matrix3_0.m20(), 0.01F);
      assertEquals(5015807.0F, matrix3_0.m22(), 0.01F);
      assertEquals(5015807.0F, matrix3_0.m11(), 0.01F);
      assertEquals(5015807.5F, matrix3_0.m12(), 0.01F);
      assertEquals((-1861.0F), vector3_0.y(), 0.01F);
      assertEquals((-1861.0F), vector3_0.z(), 0.01F);
      assertEquals(6926642.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(5.7309535E-10F, vector3_0.x(), 0.01F);
      assertEquals(1663.549F, matrix3_1.m01(), 0.01F);
      assertEquals((-0.44826525F), matrix3_1.m00(), 0.01F);
      assertEquals((-1663.549F), matrix3_1.m10(), 0.01F);
      assertEquals((-1663.549F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(5015807.0F, matrix3_1.m22(), 0.01F);
      assertEquals(5015807.0F, matrix3_1.m11(), 0.01F);
      assertEquals(5015807.5F, matrix3_1.m12(), 0.01F);
      assertEquals(1663.549F, matrix3_1.m20(), 0.01F);
      assertEquals(5015807.5F, matrix3_1.m21(), 0.01F);
      assertEquals(5015807.5F, matrix3_0.m21, 0.01F);
      assertEquals((-1663.549F), matrix3_0.m02, 0.01F);
      assertEquals(5015807.0F, matrix3_0.m11, 0.01F);
      assertEquals(5015807.0F, matrix3_0.m22, 0.01F);
      assertEquals(1663.549F, matrix3_0.m01, 0.01F);
      assertEquals(5015807.5F, matrix3_0.m12, 0.01F);
      assertEquals((-1663.549F), matrix3_0.m10, 0.01F);
      assertEquals((-0.44826525F), matrix3_0.m00, 0.01F);
      assertEquals(1663.549F, matrix3_0.m20, 0.01F);
      assertEquals((-1861.0F), vector3_0.y, 0.01F);
      assertEquals(5.7309535E-10F, vector3_0.x, 0.01F);
      assertEquals((-1861.0F), vector3_0.z, 0.01F);
      assertEquals(5015807.0F, matrix3_1.m11, 0.01F);
      assertEquals(5015807.0F, matrix3_1.m22, 0.01F);
      assertEquals(5015807.5F, matrix3_1.m12, 0.01F);
      assertEquals(1663.549F, matrix3_1.m20, 0.01F);
      assertEquals(5015807.5F, matrix3_1.m21, 0.01F);
      assertEquals((-1663.549F), matrix3_1.m10, 0.01F);
      assertEquals(1663.549F, matrix3_1.m01, 0.01F);
      assertEquals((-0.44826525F), matrix3_1.m00, 0.01F);
      assertEquals((-1663.549F), matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      float float0 = matrix3_0.m21();
      assertFalse(matrix3_0.isAffine());
      assertEquals((-0.44826525F), matrix3_0.m00(), 0.01F);
      assertEquals((-1663.549F), matrix3_0.m10(), 0.01F);
      assertEquals(1663.549F, matrix3_0.m01(), 0.01F);
      assertEquals((-1663.549F), matrix3_0.m02(), 0.01F);
      assertEquals(5015807.5F, matrix3_0.m21(), 0.01F);
      assertEquals(1663.549F, matrix3_0.m20(), 0.01F);
      assertEquals(5015807.0F, matrix3_0.m22(), 0.01F);
      assertEquals(5015807.0F, matrix3_0.m11(), 0.01F);
      assertEquals(5015807.5F, matrix3_0.m12(), 0.01F);
      assertEquals(5015807.5F, matrix3_0.m21, 0.01F);
      assertEquals((-1663.549F), matrix3_0.m02, 0.01F);
      assertEquals(5015807.0F, matrix3_0.m11, 0.01F);
      assertEquals(5015807.0F, matrix3_0.m22, 0.01F);
      assertEquals(1663.549F, matrix3_0.m01, 0.01F);
      assertEquals(5015807.5F, matrix3_0.m12, 0.01F);
      assertEquals((-1663.549F), matrix3_0.m10, 0.01F);
      assertEquals((-0.44826525F), matrix3_0.m00, 0.01F);
      assertEquals(1663.549F, matrix3_0.m20, 0.01F);
      assertEquals(5015807.5F, float0, 0.01F);
      assertSame(matrix3_0, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float float0 = matrix3_0.m20();
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setTranslation((-1538.9039F), (-1538.9039F));
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-1538.9039F), matrix3_0.m20(), 0.01F);
      assertEquals((-1538.9039F), matrix3_0.m21(), 0.01F);
      assertEquals((-1538.9039F), matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals((-1538.9039F), matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-1538.9039F), matrix3_0.m21, 0.01F);
      assertEquals((-1538.9039F), matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-1538.9039F), matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals((-1538.9039F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      float float0 = matrix3_0.m20();
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-1538.9039F), matrix3_0.m20(), 0.01F);
      assertEquals((-1538.9039F), matrix3_0.m21(), 0.01F);
      assertEquals((-1538.9039F), matrix3_0.m21, 0.01F);
      assertEquals((-1538.9039F), matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-1538.9039F), float0, 0.01F);
      assertSame(matrix3_0, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(61.04739F, 61.04739F, (-1308.111F), (-1946.3772F), (-1946.3772F), (-3335.0F), (-1946.3772F), 61.04739F, 1.0F);
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-3335.0F), matrix3_0.m21(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m20(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m01(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m11(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m12(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m00(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1946.3772F), matrix3_0.m11, 0.01F);
      assertEquals(61.04739F, matrix3_0.m12, 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m01, 0.01F);
      assertEquals(61.04739F, matrix3_0.m10, 0.01F);
      assertEquals(61.04739F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-3335.0F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m20, 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m02, 0.01F);
      
      float float0 = matrix3_0.m12();
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-3335.0F), matrix3_0.m21(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m20(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m01(), 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m11(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m12(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m00(), 0.01F);
      assertEquals(61.04739F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1946.3772F), matrix3_0.m11, 0.01F);
      assertEquals(61.04739F, matrix3_0.m12, 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m01, 0.01F);
      assertEquals(61.04739F, matrix3_0.m10, 0.01F);
      assertEquals(61.04739F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-3335.0F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m20, 0.01F);
      assertEquals((-1946.3772F), matrix3_0.m02, 0.01F);
      assertEquals(61.04739F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(0.5F, 0.0F, 0.0F, 427789.9F, 0.0F, 794.774F, (-2.0F), (-3368.432F), (-3.1415927F));
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3368.432F), matrix3_0.m12(), 0.01F);
      assertEquals(794.774F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(427789.9F, matrix3_0.m01(), 0.01F);
      assertEquals((-3.1415927F), matrix3_0.m22(), 0.01F);
      assertEquals(794.774F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(0.5F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals((-3.1415927F), matrix3_0.m22, 0.01F);
      assertEquals(427789.9F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals((-3368.432F), matrix3_0.m12, 0.01F);
      
      float float0 = matrix3_0.m12();
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3368.432F), matrix3_0.m12(), 0.01F);
      assertEquals(794.774F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(427789.9F, matrix3_0.m01(), 0.01F);
      assertEquals((-3.1415927F), matrix3_0.m22(), 0.01F);
      assertEquals(794.774F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(0.5F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals((-3.1415927F), matrix3_0.m22, 0.01F);
      assertEquals(427789.9F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals((-3368.432F), matrix3_0.m12, 0.01F);
      assertEquals((-3368.432F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Point point0 = new Point(0.0F, 1.0F);
      assertNotNull(point0);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(1.0F, point0.y(), 0.01F);
      assertEquals(1.0F, point0.y, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      
      Vector vector0 = new Vector(point0);
      assertNotNull(vector0);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(1.0F, point0.y(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, point0.y, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, 0.0F, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(1.0F, point0.y(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, point0.y, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      float float0 = matrix3_0.m11();
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertSame(matrix3_0, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      float float0 = matrix3_0.m10();
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals((-9451.604F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-9451.604F), matrix3_0.m01(), 0.01F);
      assertEquals((-9451.604F), matrix3_0.m12(), 0.01F);
      assertEquals((-7558.1636F), matrix3_0.m11(), 0.01F);
      assertEquals((-7555.1636F), matrix3_0.m21(), 0.01F);
      assertEquals(1835.652F, matrix3_0.m10(), 0.01F);
      assertEquals((-9454.604F), matrix3_0.m00(), 0.01F);
      assertEquals((-3.99996F), matrix3_0.m02(), 0.01F);
      assertEquals(1147.495F, matrix3_0.m22(), 0.01F);
      assertEquals(1835.652F, matrix3_0.m10, 0.01F);
      assertEquals((-7555.1636F), matrix3_0.m21, 0.01F);
      assertEquals((-7558.1636F), matrix3_0.m11, 0.01F);
      assertEquals((-9454.604F), matrix3_0.m00, 0.01F);
      assertEquals(1147.495F, matrix3_0.m22, 0.01F);
      assertEquals((-3.99996F), matrix3_0.m02, 0.01F);
      assertEquals((-9451.604F), matrix3_0.m01, 0.01F);
      assertEquals((-9451.604F), matrix3_0.m12, 0.01F);
      assertEquals((-9451.604F), matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = new Vector3(6.2217026F, (-1.0F), -0.0F);
      assertNotNull(vector3_0);
      assertEquals(-0.0F, vector3_0.z(), 0.01F);
      assertEquals(6.2217026F, vector3_0.x(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals(39.709583F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(-0.0F, vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertEquals(6.2217026F, vector3_0.x, 0.01F);
      
      matrix3_0.setColumn(1, vector3_0);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-9451.604F), matrix3_0.m20(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-9451.604F), matrix3_0.m01(), 0.01F);
      assertEquals(6.2217026F, matrix3_0.m10(), 0.01F);
      assertEquals((-7555.1636F), matrix3_0.m21(), 0.01F);
      assertEquals((-9454.604F), matrix3_0.m00(), 0.01F);
      assertEquals((-3.99996F), matrix3_0.m02(), 0.01F);
      assertEquals(1147.495F, matrix3_0.m22(), 0.01F);
      assertEquals(-0.0F, vector3_0.z(), 0.01F);
      assertEquals(6.2217026F, vector3_0.x(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals(39.709583F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(6.2217026F, matrix3_0.m10, 0.01F);
      assertEquals((-7555.1636F), matrix3_0.m21, 0.01F);
      assertEquals((-9454.604F), matrix3_0.m00, 0.01F);
      assertEquals(1147.495F, matrix3_0.m22, 0.01F);
      assertEquals((-3.99996F), matrix3_0.m02, 0.01F);
      assertEquals((-9451.604F), matrix3_0.m01, 0.01F);
      assertEquals((-9451.604F), matrix3_0.m20, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(-0.0F, vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertEquals(6.2217026F, vector3_0.x, 0.01F);
      
      float float0 = matrix3_0.m10();
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-9451.604F), matrix3_0.m20(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-9451.604F), matrix3_0.m01(), 0.01F);
      assertEquals(6.2217026F, matrix3_0.m10(), 0.01F);
      assertEquals((-7555.1636F), matrix3_0.m21(), 0.01F);
      assertEquals((-9454.604F), matrix3_0.m00(), 0.01F);
      assertEquals((-3.99996F), matrix3_0.m02(), 0.01F);
      assertEquals(1147.495F, matrix3_0.m22(), 0.01F);
      assertEquals(6.2217026F, matrix3_0.m10, 0.01F);
      assertEquals((-7555.1636F), matrix3_0.m21, 0.01F);
      assertEquals((-9454.604F), matrix3_0.m00, 0.01F);
      assertEquals(1147.495F, matrix3_0.m22, 0.01F);
      assertEquals((-3.99996F), matrix3_0.m02, 0.01F);
      assertEquals((-9451.604F), matrix3_0.m01, 0.01F);
      assertEquals((-9451.604F), matrix3_0.m20, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(6.2217026F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      
      matrix3_0.m02 = (-2.0F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      
      float float0 = matrix3_0.m02();
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals((-2.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float float0 = matrix3_0.m01();
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTransform((IVector) vector0, 1.0F, (IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.84147096F), matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5403023F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5403023F, matrix3_0.m11(), 0.01F);
      assertEquals(0.84147096F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.84147096F, matrix3_1.m01(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.5403023F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.5403023F, matrix3_1.m11(), 0.01F);
      assertEquals((-0.84147096F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.84147096F), matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.5403023F, matrix3_0.m00, 0.01F);
      assertEquals(0.5403023F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.84147096F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.5403023F, matrix3_1.m00, 0.01F);
      assertEquals(0.5403023F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-0.84147096F), matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.84147096F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      float float0 = matrix3_0.m01();
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.84147096F), matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5403023F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.5403023F, matrix3_0.m11(), 0.01F);
      assertEquals(0.84147096F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-0.84147096F), matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.5403023F, matrix3_0.m00, 0.01F);
      assertEquals(0.5403023F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.84147096F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.84147096F, float0, 0.01F);
      assertSame(matrix3_0, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2362.901F), 458.913F, (-2362.901F), (-2362.901F), (-1888.7909F), (-1888.7909F), (-0.99999F), (-2362.901F), 287.62375F);
      assertNotNull(matrix3_0);
      assertEquals(287.62375F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1888.7909F), matrix3_0.m11(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m01(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m12(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20(), 0.01F);
      assertEquals(458.913F, matrix3_0.m10(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m01, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m12, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20, 0.01F);
      assertEquals(458.913F, matrix3_0.m10, 0.01F);
      assertEquals(287.62375F, matrix3_0.m22, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11, 0.01F);
      
      Matrix3 matrix3_1 = Matrix3.IDENTITY;
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.IDENTITY.lerpLocal(matrix3_0, 4.0F);
      assertNotNull(matrix3_2);
      assertEquals(287.62375F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1888.7909F), matrix3_0.m11(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m01(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m12(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20(), 0.01F);
      assertEquals(458.913F, matrix3_0.m10(), 0.01F);
      assertEquals((-9451.604F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-9451.604F), matrix3_1.m01(), 0.01F);
      assertEquals((-9451.604F), matrix3_1.m12(), 0.01F);
      assertEquals((-7558.1636F), matrix3_1.m11(), 0.01F);
      assertEquals((-7555.1636F), matrix3_1.m21(), 0.01F);
      assertEquals(1835.652F, matrix3_1.m10(), 0.01F);
      assertEquals((-9454.604F), matrix3_1.m00(), 0.01F);
      assertEquals((-3.99996F), matrix3_1.m02(), 0.01F);
      assertEquals(1147.495F, matrix3_1.m22(), 0.01F);
      assertEquals((-9451.604F), matrix3_2.m01(), 0.01F);
      assertEquals((-9451.604F), matrix3_2.m12(), 0.01F);
      assertEquals((-7555.1636F), matrix3_2.m21(), 0.01F);
      assertEquals((-9454.604F), matrix3_2.m00(), 0.01F);
      assertEquals((-3.99996F), matrix3_2.m02(), 0.01F);
      assertEquals((-9451.604F), matrix3_2.m20(), 0.01F);
      assertEquals((-7558.1636F), matrix3_2.m11(), 0.01F);
      assertEquals(1835.652F, matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(1147.495F, matrix3_2.m22(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m01, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m12, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20, 0.01F);
      assertEquals(458.913F, matrix3_0.m10, 0.01F);
      assertEquals(287.62375F, matrix3_0.m22, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11, 0.01F);
      assertEquals(1835.652F, matrix3_1.m10, 0.01F);
      assertEquals((-7555.1636F), matrix3_1.m21, 0.01F);
      assertEquals((-7558.1636F), matrix3_1.m11, 0.01F);
      assertEquals((-9454.604F), matrix3_1.m00, 0.01F);
      assertEquals(1147.495F, matrix3_1.m22, 0.01F);
      assertEquals((-3.99996F), matrix3_1.m02, 0.01F);
      assertEquals((-9451.604F), matrix3_1.m01, 0.01F);
      assertEquals((-9451.604F), matrix3_1.m12, 0.01F);
      assertEquals((-9451.604F), matrix3_1.m20, 0.01F);
      assertEquals(1147.495F, matrix3_2.m22, 0.01F);
      assertEquals((-7555.1636F), matrix3_2.m21, 0.01F);
      assertEquals((-9451.604F), matrix3_2.m01, 0.01F);
      assertEquals((-9451.604F), matrix3_2.m12, 0.01F);
      assertEquals((-9454.604F), matrix3_2.m00, 0.01F);
      assertEquals(1835.652F, matrix3_2.m10, 0.01F);
      assertEquals((-3.99996F), matrix3_2.m02, 0.01F);
      assertEquals((-9451.604F), matrix3_2.m20, 0.01F);
      assertEquals((-7558.1636F), matrix3_2.m11, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(104.41456F, (-1031.0F), (-1031.0F), (-1874.2548F), 1200.2429F, 2.0F, 519.64984F, 104.41456F, (-1874.2548F));
      assertNotNull(matrix3_0);
      assertEquals((-1874.2548F), matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1874.2548F), matrix3_0.m01(), 0.01F);
      assertEquals((-1031.0F), matrix3_0.m20(), 0.01F);
      assertEquals(519.64984F, matrix3_0.m02(), 0.01F);
      assertEquals(1200.2429F, matrix3_0.m11(), 0.01F);
      assertEquals((-1031.0F), matrix3_0.m10(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m12(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m00(), 0.01F);
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m00, 0.01F);
      assertEquals((-1031.0F), matrix3_0.m10, 0.01F);
      assertEquals(104.41456F, matrix3_0.m12, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m01, 0.01F);
      assertEquals((-1031.0F), matrix3_0.m20, 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m22, 0.01F);
      assertEquals(1200.2429F, matrix3_0.m11, 0.01F);
      assertEquals(519.64984F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.lerpLocal(matrix3_0, 1.0E-5F);
      assertNotNull(matrix3_1);
      assertEquals((-1874.2548F), matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1874.2548F), matrix3_0.m01(), 0.01F);
      assertEquals((-1031.0F), matrix3_0.m20(), 0.01F);
      assertEquals(519.64984F, matrix3_0.m02(), 0.01F);
      assertEquals(1200.2429F, matrix3_0.m11(), 0.01F);
      assertEquals((-1031.0F), matrix3_0.m10(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m12(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m00(), 0.01F);
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1200.2429F, matrix3_1.m11(), 0.01F);
      assertEquals(2.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-1031.0F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(104.41456F, matrix3_1.m00(), 0.01F);
      assertEquals((-1031.0F), matrix3_1.m10(), 0.01F);
      assertEquals(104.41456F, matrix3_1.m12(), 0.01F);
      assertEquals(519.64984F, matrix3_1.m02(), 0.01F);
      assertEquals((-1874.2548F), matrix3_1.m01(), 0.01F);
      assertEquals((-1874.2548F), matrix3_1.m22(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m00, 0.01F);
      assertEquals((-1031.0F), matrix3_0.m10, 0.01F);
      assertEquals(104.41456F, matrix3_0.m12, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m01, 0.01F);
      assertEquals((-1031.0F), matrix3_0.m20, 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m22, 0.01F);
      assertEquals(1200.2429F, matrix3_0.m11, 0.01F);
      assertEquals(519.64984F, matrix3_0.m02, 0.01F);
      assertEquals((-1031.0F), matrix3_1.m10, 0.01F);
      assertEquals(519.64984F, matrix3_1.m02, 0.01F);
      assertEquals((-1874.2548F), matrix3_1.m22, 0.01F);
      assertEquals(104.41456F, matrix3_1.m12, 0.01F);
      assertEquals(104.41456F, matrix3_1.m00, 0.01F);
      assertEquals((-1874.2548F), matrix3_1.m01, 0.01F);
      assertEquals(1200.2429F, matrix3_1.m11, 0.01F);
      assertEquals(2.0F, matrix3_1.m21, 0.01F);
      assertEquals((-1031.0F), matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale((IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.lerpLocal(matrix3_1, 5522.3F);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = Matrix3.IDENTITY;
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.lerpLocal(matrix3_1, 0.0F);
      assertNotNull(matrix3_2);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      
      matrix3_1.m11 = 0.0F;
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.lerpAffineLocal(matrix3_0, 0.0F);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-406.3721F), (-406.3721F), (-406.3721F), 57.295776F, (-406.3721F), (-914.1002F), 0.0F, (-3.1415927F), (-2825.3604F));
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(57.295776F, matrix3_0.m01(), 0.01F);
      assertEquals((-406.3721F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2825.3604F), matrix3_0.m22(), 0.01F);
      assertEquals((-914.1002F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.1415927F), matrix3_0.m12(), 0.01F);
      assertEquals((-406.3721F), matrix3_0.m20(), 0.01F);
      assertEquals((-406.3721F), matrix3_0.m00(), 0.01F);
      assertEquals((-406.3721F), matrix3_0.m11(), 0.01F);
      assertEquals((-914.1002F), matrix3_0.m21, 0.01F);
      assertEquals((-2825.3604F), matrix3_0.m22, 0.01F);
      assertEquals((-406.3721F), matrix3_0.m20, 0.01F);
      assertEquals((-406.3721F), matrix3_0.m00, 0.01F);
      assertEquals((-406.3721F), matrix3_0.m11, 0.01F);
      assertEquals((-3.1415927F), matrix3_0.m12, 0.01F);
      assertEquals(57.295776F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-406.3721F), matrix3_0.m10, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.transpose(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.lerpAffineLocal(matrix3_0, (-2780.9F));
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(0.0F, (-617.5F), 1.0F, 2.7182817F, (-4432.375F), (-2.0F), 2.0F, (-2.0F), 576.5813F);
      assertNotNull(matrix3_0);
      assertEquals(576.5813F, matrix3_0.m22(), 0.01F);
      assertEquals((-4432.375F), matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2.7182817F, matrix3_0.m01(), 0.01F);
      assertEquals((-617.5F), matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-617.5F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(576.5813F, matrix3_0.m22, 0.01F);
      assertEquals((-4432.375F), matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals((-2.0F), matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.lerpAffineLocal(matrix3_0, -0.0F);
      assertNotNull(matrix3_1);
      assertEquals((-4432.375F), matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(2.7182817F, matrix3_0.m01(), 0.01F);
      assertEquals((-617.5F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-4432.375F), matrix3_1.m11(), 0.01F);
      assertEquals((-617.5F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m21(), 0.01F);
      assertEquals(2.7182817F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-617.5F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals((-4432.375F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(2.7182817F, matrix3_1.m01, 0.01F);
      assertEquals((-4432.375F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-2.0F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-617.5F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = Matrix3.IDENTITY;
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.setToRotation(1598.5F, (-2328.5F), 538.244F, 0.0F);
      assertNotNull(matrix3_2);
      assertEquals((-2308009.8F), matrix3_0.m10(), 0.01F);
      assertEquals(9984690.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-2308009.8F), matrix3_0.m01(), 0.01F);
      assertEquals((-1257.8281F), matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(290.75302F, matrix3_0.m20(), 0.01F);
      assertEquals(533506.75F, matrix3_0.m11(), 0.01F);
      assertEquals((-290.75302F), matrix3_0.m02(), 0.01F);
      assertEquals(1257.8281F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.8415443F), matrix3_0.m22(), 0.01F);
      assertEquals((-0.8415443F), matrix3_2.m22(), 0.01F);
      assertEquals(1257.8281F, matrix3_2.m21(), 0.01F);
      assertEquals((-290.75302F), matrix3_2.m02(), 0.01F);
      assertEquals((-1257.8281F), matrix3_2.m12(), 0.01F);
      assertEquals(9984690.0F, matrix3_2.m00(), 0.01F);
      assertEquals(290.75302F, matrix3_2.m20(), 0.01F);
      assertEquals(533506.75F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-2308009.8F), matrix3_2.m01(), 0.01F);
      assertEquals((-2308009.8F), matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(533506.75F, matrix3_0.m11, 0.01F);
      assertEquals((-290.75302F), matrix3_0.m02, 0.01F);
      assertEquals(1257.8281F, matrix3_0.m21, 0.01F);
      assertEquals((-2308009.8F), matrix3_0.m01, 0.01F);
      assertEquals((-2308009.8F), matrix3_0.m10, 0.01F);
      assertEquals(290.75302F, matrix3_0.m20, 0.01F);
      assertEquals((-0.8415443F), matrix3_0.m22, 0.01F);
      assertEquals((-1257.8281F), matrix3_0.m12, 0.01F);
      assertEquals(9984690.0F, matrix3_0.m00, 0.01F);
      assertEquals(533506.75F, matrix3_2.m11, 0.01F);
      assertEquals((-2308009.8F), matrix3_2.m10, 0.01F);
      assertEquals((-2308009.8F), matrix3_2.m01, 0.01F);
      assertEquals(1257.8281F, matrix3_2.m21, 0.01F);
      assertEquals((-290.75302F), matrix3_2.m02, 0.01F);
      assertEquals((-0.8415443F), matrix3_2.m22, 0.01F);
      assertEquals((-1257.8281F), matrix3_2.m12, 0.01F);
      assertEquals(290.75302F, matrix3_2.m20, 0.01F);
      assertEquals(9984690.0F, matrix3_2.m00, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
      
      Matrix3 matrix3_3 = matrix3_1.lerpAffineLocal(matrix3_2, (-900.9637F));
      assertNotNull(matrix3_3);
      assertEquals((-2308009.8F), matrix3_0.m10(), 0.01F);
      assertEquals(9984690.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-2308009.8F), matrix3_0.m01(), 0.01F);
      assertEquals((-1257.8281F), matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(290.75302F, matrix3_0.m20(), 0.01F);
      assertEquals(533506.75F, matrix3_0.m11(), 0.01F);
      assertEquals((-290.75302F), matrix3_0.m02(), 0.01F);
      assertEquals(1257.8281F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.8415443F), matrix3_0.m22(), 0.01F);
      assertEquals((-1133257.5F), matrix3_1.m21(), 0.01F);
      assertEquals(2.07943296E9F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(2.07943296E9F, matrix3_1.m01(), 0.01F);
      assertEquals((-261957.9F), matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-8.995842E9F), matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-4.80669312E8F), matrix3_1.m11(), 0.01F);
      assertEquals((-0.8415443F), matrix3_2.m22(), 0.01F);
      assertEquals(1257.8281F, matrix3_2.m21(), 0.01F);
      assertEquals((-290.75302F), matrix3_2.m02(), 0.01F);
      assertEquals((-1257.8281F), matrix3_2.m12(), 0.01F);
      assertEquals(9984690.0F, matrix3_2.m00(), 0.01F);
      assertEquals(290.75302F, matrix3_2.m20(), 0.01F);
      assertEquals(533506.75F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-2308009.8F), matrix3_2.m01(), 0.01F);
      assertEquals((-2308009.8F), matrix3_2.m10(), 0.01F);
      assertEquals((-4.80669312E8F), matrix3_3.m11(), 0.01F);
      assertEquals(2.07943296E9F, matrix3_3.m01(), 0.01F);
      assertEquals(2.07943296E9F, matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals((-8.995842E9F), matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals((-1133257.5F), matrix3_3.m21(), 0.01F);
      assertEquals((-261957.9F), matrix3_3.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertEquals(533506.75F, matrix3_0.m11, 0.01F);
      assertEquals((-290.75302F), matrix3_0.m02, 0.01F);
      assertEquals(1257.8281F, matrix3_0.m21, 0.01F);
      assertEquals((-2308009.8F), matrix3_0.m01, 0.01F);
      assertEquals((-2308009.8F), matrix3_0.m10, 0.01F);
      assertEquals(290.75302F, matrix3_0.m20, 0.01F);
      assertEquals((-0.8415443F), matrix3_0.m22, 0.01F);
      assertEquals((-1257.8281F), matrix3_0.m12, 0.01F);
      assertEquals(9984690.0F, matrix3_0.m00, 0.01F);
      assertEquals((-8.995842E9F), matrix3_1.m00, 0.01F);
      assertEquals((-4.80669312E8F), matrix3_1.m11, 0.01F);
      assertEquals(2.07943296E9F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(2.07943296E9F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-1133257.5F), matrix3_1.m21, 0.01F);
      assertEquals((-261957.9F), matrix3_1.m20, 0.01F);
      assertEquals(533506.75F, matrix3_2.m11, 0.01F);
      assertEquals((-2308009.8F), matrix3_2.m10, 0.01F);
      assertEquals((-2308009.8F), matrix3_2.m01, 0.01F);
      assertEquals(1257.8281F, matrix3_2.m21, 0.01F);
      assertEquals((-290.75302F), matrix3_2.m02, 0.01F);
      assertEquals((-0.8415443F), matrix3_2.m22, 0.01F);
      assertEquals((-1257.8281F), matrix3_2.m12, 0.01F);
      assertEquals(290.75302F, matrix3_2.m20, 0.01F);
      assertEquals(9984690.0F, matrix3_2.m00, 0.01F);
      assertEquals((-1133257.5F), matrix3_3.m21, 0.01F);
      assertEquals((-261957.9F), matrix3_3.m20, 0.01F);
      assertEquals(2.07943296E9F, matrix3_3.m01, 0.01F);
      assertEquals((-4.80669312E8F), matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(2.07943296E9F, matrix3_3.m10, 0.01F);
      assertEquals((-8.995842E9F), matrix3_3.m00, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_3, matrix3_2);
      assertSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(2975.0F, (-648.0F), (-648.0F), 0.0F, 0.0F, 0.0F, (-754.82F), 0.0F, (-355.222F));
      assertNotNull(matrix3_1);
      assertEquals(2975.0F, matrix3_1.m00(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-754.82F), matrix3_1.m02(), 0.01F);
      assertEquals((-648.0F), matrix3_1.m20(), 0.01F);
      assertEquals((-355.222F), matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-648.0F), matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals((-355.222F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals((-648.0F), matrix3_1.m10, 0.01F);
      assertEquals(2975.0F, matrix3_1.m00, 0.01F);
      assertEquals((-754.82F), matrix3_1.m02, 0.01F);
      assertEquals((-648.0F), matrix3_1.m20, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.lerpAffine((IMatrix3) matrix3_1, 2407.0F, matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-2406.0F), matrix3_1.m11(), 0.01F);
      assertEquals((-1559736.0F), matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-1559736.0F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(7158419.0F, matrix3_1.m00(), 0.01F);
      assertEquals((-1559736.0F), matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals((-1559736.0F), matrix3_2.m20(), 0.01F);
      assertEquals(7158419.0F, matrix3_2.m00(), 0.01F);
      assertEquals((-2406.0F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-1559736.0F), matrix3_1.m10, 0.01F);
      assertEquals(7158419.0F, matrix3_1.m00, 0.01F);
      assertEquals((-1559736.0F), matrix3_1.m20, 0.01F);
      assertEquals((-2406.0F), matrix3_1.m11, 0.01F);
      assertEquals((-1559736.0F), matrix3_2.m20, 0.01F);
      assertEquals(7158419.0F, matrix3_2.m00, 0.01F);
      assertEquals((-2406.0F), matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals((-1559736.0F), matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3((-675.0859F), (-620.689F), 0.0F, (-495.50452F), 1.0E-4F, (-675.0859F), (-495.50452F), (-1090.0F), 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(1.0E-4F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-675.0859F), matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-675.0859F), matrix3_1.m00(), 0.01F);
      assertEquals((-1090.0F), matrix3_1.m12(), 0.01F);
      assertEquals((-620.689F), matrix3_1.m10(), 0.01F);
      assertEquals((-495.50452F), matrix3_1.m01(), 0.01F);
      assertEquals((-495.50452F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals((-620.689F), matrix3_1.m10, 0.01F);
      assertEquals((-495.50452F), matrix3_1.m02, 0.01F);
      assertEquals((-495.50452F), matrix3_1.m01, 0.01F);
      assertEquals((-675.0859F), matrix3_1.m00, 0.01F);
      assertEquals((-1090.0F), matrix3_1.m12, 0.01F);
      assertEquals((-675.0859F), matrix3_1.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.lerpAffine((IMatrix3) matrix3_1, 1.0E-4F, matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.04955045F), matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.9323914F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-0.062068902F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.9999F, matrix3_1.m11(), 0.01F);
      assertEquals((-0.067508586F), matrix3_1.m21(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals((-0.062068902F), matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.9323914F, matrix3_2.m00(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals((-0.067508586F), matrix3_2.m21(), 0.01F);
      assertEquals(0.9999F, matrix3_2.m11(), 0.01F);
      assertEquals((-0.04955045F), matrix3_2.m01(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.9999F, matrix3_1.m11, 0.01F);
      assertEquals((-0.067508586F), matrix3_1.m21, 0.01F);
      assertEquals((-0.04955045F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-0.062068902F), matrix3_1.m10, 0.01F);
      assertEquals(0.9323914F, matrix3_1.m00, 0.01F);
      assertEquals((-0.04955045F), matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.9999F, matrix3_2.m11, 0.01F);
      assertEquals((-0.067508586F), matrix3_2.m21, 0.01F);
      assertEquals((-0.062068902F), matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.9323914F, matrix3_2.m00, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.lerpAffine((IMatrix3) matrix3_0, 2407.0F, matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, (-1308.111F), (-1308.111F), 48.87661F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.lerpAffine((IMatrix3) matrix3_0, 1.0F);
      assertNotNull(matrix3_1);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m01(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(48.87661F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21, 0.01F);
      assertEquals(48.87661F, matrix3_1.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11, 0.01F);
      assertEquals(48.87661F, matrix3_1.m10, 0.01F);
      assertEquals(48.87661F, matrix3_1.m00, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(0.0F);
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.lerp((IMatrix3) matrix3_1, 0.0F, matrix3_1);
      assertNotNull(matrix3_2);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(1.0F, 2622.9233F, 0.0F, (-1.0F), (-3.4028235E38F), 4.0F, 161.866F, (-1.0F), 1.0277538F);
      assertNotNull(matrix3_1);
      assertEquals(161.866F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0277538F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(4.0F, matrix3_1.m21(), 0.01F);
      assertEquals(2622.9233F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-3.4028235E38F), matrix3_1.m11(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m01(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(2622.9233F, matrix3_1.m10, 0.01F);
      assertEquals(4.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m11, 0.01F);
      assertEquals((-1.0F), matrix3_1.m01, 0.01F);
      assertEquals((-1.0F), matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(161.866F, matrix3_1.m02, 0.01F);
      assertEquals(1.0277538F, matrix3_1.m22, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.lerp((IMatrix3) matrix3_0, 133354.67F, matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(133353.67F, matrix3_0.m01(), 0.01F);
      assertEquals(133353.67F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-533414.7F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.49776448E8F), matrix3_0.m10(), 0.01F);
      assertEquals((-2.1585424E7F), matrix3_0.m02(), 0.01F);
      assertEquals((-3700.075F), matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m11(), 0.01F);
      assertEquals(161.866F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0277538F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(4.0F, matrix3_1.m21(), 0.01F);
      assertEquals(2622.9233F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-3.4028235E38F), matrix3_1.m11(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m01(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-2.1585424E7F), matrix3_2.m02(), 0.01F);
      assertEquals(133353.67F, matrix3_2.m01(), 0.01F);
      assertEquals(133353.67F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m11(), 0.01F);
      assertEquals((-3.49776448E8F), matrix3_2.m10(), 0.01F);
      assertEquals((-3700.075F), matrix3_2.m22(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-533414.7F), matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-2.1585424E7F), matrix3_0.m02, 0.01F);
      assertEquals((-3.49776448E8F), matrix3_0.m10, 0.01F);
      assertEquals((-3700.075F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(133353.67F, matrix3_0.m01, 0.01F);
      assertEquals(133353.67F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_0.m11, 0.01F);
      assertEquals((-533414.7F), matrix3_0.m21, 0.01F);
      assertEquals(2622.9233F, matrix3_1.m10, 0.01F);
      assertEquals(4.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m11, 0.01F);
      assertEquals((-1.0F), matrix3_1.m01, 0.01F);
      assertEquals((-1.0F), matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(161.866F, matrix3_1.m02, 0.01F);
      assertEquals(1.0277538F, matrix3_1.m22, 0.01F);
      assertEquals((-3700.075F), matrix3_2.m22, 0.01F);
      assertEquals((-2.1585424E7F), matrix3_2.m02, 0.01F);
      assertEquals((-533414.7F), matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(133353.67F, matrix3_2.m01, 0.01F);
      assertEquals(133353.67F, matrix3_2.m12, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix3_2.m11, 0.01F);
      assertEquals((-3.49776448E8F), matrix3_2.m10, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(1.0F, 2622.9233F, 0.0F, (-1.0F), (-3.4028235E38F), 4.0F, 161.866F, (-1.0F), 1.0277538F);
      assertNotNull(matrix3_1);
      assertEquals(161.866F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0277538F, matrix3_1.m22(), 0.01F);
      assertEquals(4.0F, matrix3_1.m21(), 0.01F);
      assertEquals(2622.9233F, matrix3_1.m10(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m11(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m01(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(1.0277538F, matrix3_1.m22, 0.01F);
      assertEquals(2622.9233F, matrix3_1.m10, 0.01F);
      assertEquals(4.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m11, 0.01F);
      assertEquals((-1.0F), matrix3_1.m01, 0.01F);
      assertEquals((-1.0F), matrix3_1.m12, 0.01F);
      assertEquals(161.866F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.lerp((IMatrix3) matrix3_1, 1.0F, matrix3_1);
      assertNotNull(matrix3_2);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(161.866F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0277538F, matrix3_1.m22(), 0.01F);
      assertEquals(4.0F, matrix3_1.m21(), 0.01F);
      assertEquals(2622.9233F, matrix3_1.m10(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m11(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m01(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(161.866F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(4.0F, matrix3_2.m21(), 0.01F);
      assertEquals(2622.9233F, matrix3_2.m10(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m11(), 0.01F);
      assertEquals((-1.0F), matrix3_2.m01(), 0.01F);
      assertEquals((-1.0F), matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(1.0277538F, matrix3_2.m22(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0277538F, matrix3_1.m22, 0.01F);
      assertEquals(2622.9233F, matrix3_1.m10, 0.01F);
      assertEquals(4.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m11, 0.01F);
      assertEquals((-1.0F), matrix3_1.m01, 0.01F);
      assertEquals((-1.0F), matrix3_1.m12, 0.01F);
      assertEquals(161.866F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(2622.9233F, matrix3_2.m10, 0.01F);
      assertEquals(4.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m11, 0.01F);
      assertEquals((-1.0F), matrix3_2.m01, 0.01F);
      assertEquals((-1.0F), matrix3_2.m12, 0.01F);
      assertEquals(1.0277538F, matrix3_2.m22, 0.01F);
      assertEquals(161.866F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(0.0F, (-2752.573F), (-3763.8513F), 2.0F, 3.1415927F, 2.0F, 0.5F, 2.0F, 3652.21F);
      assertNotNull(matrix3_0);
      assertEquals(2.0F, matrix3_0.m01(), 0.01F);
      assertEquals(2.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(3652.21F, matrix3_0.m22(), 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3763.8513F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m11(), 0.01F);
      assertEquals((-3763.8513F), matrix3_0.m20, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(3652.21F, matrix3_0.m22, 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.lerp((IMatrix3) matrix3_0, 2.96884F, matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(2.0F, matrix3_0.m01(), 0.01F);
      assertEquals(2.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(3652.21F, matrix3_0.m22(), 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3763.8513F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(3652.21F, matrix3_1.m22(), 0.01F);
      assertEquals(2.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.5F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-2752.573F), matrix3_1.m10(), 0.01F);
      assertEquals(2.0F, matrix3_1.m01(), 0.01F);
      assertEquals(2.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-3763.8513F), matrix3_1.m20(), 0.01F);
      assertEquals(3.1415927F, matrix3_1.m11(), 0.01F);
      assertEquals((-3763.8513F), matrix3_0.m20, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(3652.21F, matrix3_0.m22, 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(3.1415927F, matrix3_1.m11, 0.01F);
      assertEquals((-2752.573F), matrix3_1.m10, 0.01F);
      assertEquals(2.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(3652.21F, matrix3_1.m22, 0.01F);
      assertEquals(2.0F, matrix3_1.m01, 0.01F);
      assertEquals(2.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.5F, matrix3_1.m02, 0.01F);
      assertEquals((-3763.8513F), matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, (-3.4028235E38F), (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m12, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale((-3.4028235E38F), (float) 0, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-3.4028235E38F), matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.lerp((IMatrix3) matrix3_0, (-2.0F));
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-3.4028235E38F), matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, (-1308.111F), (-1308.111F), 48.87661F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m00(), 0.01F);
      assertEquals(2559.24F, matrix3_1.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-1308.111F), matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_1.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11, 0.01F);
      assertEquals(2559.24F, matrix3_1.m22, 0.01F);
      assertEquals(48.87661F, matrix3_1.m00, 0.01F);
      assertEquals(48.87661F, matrix3_1.m10, 0.01F);
      assertEquals(48.87661F, matrix3_1.m02, 0.01F);
      assertEquals(48.87661F, matrix3_1.m01, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.lerpAffineLocal(matrix3_0, 48.87661F);
      assertNotNull(matrix3_2);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m01(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-1308.111F), matrix3_1.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_2.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals((-1308.111F), matrix3_2.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_2.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_2.m01(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_1.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(48.87661F, matrix3_1.m00, 0.01F);
      assertEquals(48.87661F, matrix3_1.m10, 0.01F);
      assertEquals(48.87661F, matrix3_1.m01, 0.01F);
      assertEquals(48.87661F, matrix3_2.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_2.m21, 0.01F);
      assertEquals(48.87661F, matrix3_2.m01, 0.01F);
      assertEquals(48.87661F, matrix3_2.m00, 0.01F);
      assertEquals(48.87661F, matrix3_2.m10, 0.01F);
      assertEquals((-1308.111F), matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      
      Matrix3 matrix3_3 = matrix3_1.lerp((IMatrix3) matrix3_0, (-1308.111F));
      assertNotNull(matrix3_3);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m01(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-1308.111F), matrix3_1.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_3.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_3.m10(), 0.01F);
      assertEquals((-63936.027F), matrix3_3.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_3.m01(), 0.01F);
      assertEquals((-3346460.8F), matrix3_3.m22(), 0.01F);
      assertEquals(1711154.2F, matrix3_3.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_3.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_3.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_3.m11(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_1.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(48.87661F, matrix3_1.m00, 0.01F);
      assertEquals(48.87661F, matrix3_1.m10, 0.01F);
      assertEquals(48.87661F, matrix3_1.m01, 0.01F);
      assertEquals(48.87661F, matrix3_3.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_3.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_3.m11, 0.01F);
      assertEquals(48.87661F, matrix3_3.m10, 0.01F);
      assertEquals((-63936.027F), matrix3_3.m02, 0.01F);
      assertEquals(48.87661F, matrix3_3.m00, 0.01F);
      assertEquals(1711154.2F, matrix3_3.m12, 0.01F);
      assertEquals(48.87661F, matrix3_3.m01, 0.01F);
      assertEquals((-3346460.8F), matrix3_3.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, (-1308.111F), (-1308.111F), 48.87661F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.lerp((IMatrix3) matrix3_0, (-1308.111F));
      assertNotNull(matrix3_1);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m01(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(48.87661F, matrix3_1.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m12(), 0.01F);
      assertEquals(2559.24F, matrix3_1.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m11, 0.01F);
      assertEquals(2559.24F, matrix3_1.m22, 0.01F);
      assertEquals(48.87661F, matrix3_1.m10, 0.01F);
      assertEquals(48.87661F, matrix3_1.m02, 0.01F);
      assertEquals(48.87661F, matrix3_1.m00, 0.01F);
      assertEquals(48.87661F, matrix3_1.m01, 0.01F);
      assertEquals(48.87661F, matrix3_1.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(0.0F, (float) 0, 0.5F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.5F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.5F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.5F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.5F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.lerp((IMatrix3) matrix3_0, (-2.0F));
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.5F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.5F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.5F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.5F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-1582.3468F), (-1.0F), (-1582.3468F), (-2.0F), 1764.1895F, (-2110.9844F), (-1582.3468F), 0.5F, (-3.4028235E38F));
      assertNotNull(matrix3_0);
      assertEquals((-3.4028235E38F), matrix3_0.m22(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m01(), 0.01F);
      assertEquals(0.5F, matrix3_0.m12(), 0.01F);
      assertEquals((-1582.3468F), matrix3_0.m00(), 0.01F);
      assertEquals((-1582.3468F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1.0F), matrix3_0.m10(), 0.01F);
      assertEquals((-1582.3468F), matrix3_0.m20(), 0.01F);
      assertEquals(1764.1895F, matrix3_0.m11(), 0.01F);
      assertEquals((-2110.9844F), matrix3_0.m21(), 0.01F);
      assertEquals(1764.1895F, matrix3_0.m11, 0.01F);
      assertEquals((-1582.3468F), matrix3_0.m02, 0.01F);
      assertEquals((-2110.9844F), matrix3_0.m21, 0.01F);
      assertEquals((-1582.3468F), matrix3_0.m00, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m22, 0.01F);
      assertEquals((-2.0F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m12, 0.01F);
      assertEquals((-1.0F), matrix3_0.m10, 0.01F);
      assertEquals((-1582.3468F), matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invertLocal();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(-0.0F, matrix3_0.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11, 0.01F);
      assertEquals(-0.0F, matrix3_1.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(-0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.lerpAffine((IMatrix3) matrix3_1, 0.0F);
      assertNotNull(matrix3_2);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      matrix3_2.IDENTITY.m22 = 0.0F;
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      
      String string0 = matrix3_2.toString();
      assertNotNull(string0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals("[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]", string0);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      Matrix3 matrix3_3 = matrix3_2.invertLocal();
      assertNotNull(matrix3_3);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      
      Matrix3 matrix3_4 = matrix3_1.setToScale(2008.68F);
      assertNotNull(matrix3_4);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m11(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m10(), 0.01F);
      assertFalse(matrix3_4.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_2));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertEquals(2008.68F, matrix3_1.m00, 0.01F);
      assertEquals(2008.68F, matrix3_1.m11, 0.01F);
      assertEquals(2008.68F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertEquals(2008.68F, matrix3_4.m00, 0.01F);
      assertEquals(2008.68F, matrix3_4.m11, 0.01F);
      assertEquals(2008.68F, matrix3_4.m22, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_4);
      assertSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_2);
      assertNotSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2008.68F;
      floatArray0[5] = -0.0F;
      floatArray0[6] = 1.0F;
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertNotNull(floatBuffer0);
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=7 cap=7]", floatBuffer0.toString());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(7, floatBuffer0.limit());
      assertFalse(floatBuffer0.isDirect());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(7, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.position());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(7, floatBuffer0.capacity());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 2008.68F, -0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Matrix3 matrix3_5 = matrix3_4.setTranslation((-136.0F), 0.0F);
      assertNotNull(matrix3_5);
      assertEquals(2008.68F, matrix3_5.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_5.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_5.m11(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(0.0F, matrix3_5.m12(), 0.01F);
      assertEquals((-136.0F), matrix3_5.m20(), 0.01F);
      assertFalse(matrix3_5.isAffine());
      assertEquals(0.0F, matrix3_5.m21(), 0.01F);
      assertEquals(0.0F, matrix3_5.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals((-136.0F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2008.68F, matrix3_1.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m11(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals((-136.0F), matrix3_4.m20(), 0.01F);
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m10(), 0.01F);
      assertFalse(matrix3_4.isAffine());
      assertFalse(matrix3_5.equals((Object)matrix3_0));
      assertFalse(matrix3_5.equals((Object)matrix3_2));
      assertFalse(matrix3_5.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_2));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_5.m10, 0.01F);
      assertEquals(0.0F, matrix3_5.m21, 0.01F);
      assertEquals((-136.0F), matrix3_5.m20, 0.01F);
      assertEquals(0.0F, matrix3_5.m01, 0.01F);
      assertEquals(0.0F, matrix3_5.m12, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals(2008.68F, matrix3_5.m00, 0.01F);
      assertEquals(2008.68F, matrix3_5.m11, 0.01F);
      assertEquals(2008.68F, matrix3_5.m22, 0.01F);
      assertEquals(2008.68F, matrix3_1.m00, 0.01F);
      assertEquals(2008.68F, matrix3_1.m11, 0.01F);
      assertEquals(2008.68F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-136.0F), matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertEquals((-136.0F), matrix3_4.m20, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(2008.68F, matrix3_4.m00, 0.01F);
      assertEquals(2008.68F, matrix3_4.m11, 0.01F);
      assertEquals(2008.68F, matrix3_4.m22, 0.01F);
      assertSame(matrix3_5, matrix3_4);
      assertSame(matrix3_5, matrix3_1);
      assertNotSame(matrix3_5, matrix3_0);
      assertNotSame(matrix3_5, matrix3_2);
      assertNotSame(matrix3_5, matrix3_3);
      assertSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_4);
      assertSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_2);
      assertNotSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_0);
      assertSame(matrix3_4, matrix3_5);
      
      float float0 = matrix3_5.extractRotation();
      assertEquals(2008.68F, matrix3_5.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_5.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_5.m11(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(0.0F, matrix3_5.m12(), 0.01F);
      assertEquals((-136.0F), matrix3_5.m20(), 0.01F);
      assertFalse(matrix3_5.isAffine());
      assertEquals(0.0F, matrix3_5.m21(), 0.01F);
      assertEquals(0.0F, matrix3_5.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals((-136.0F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2008.68F, matrix3_1.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m11(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals((-136.0F), matrix3_4.m20(), 0.01F);
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m10(), 0.01F);
      assertFalse(matrix3_4.isAffine());
      assertFalse(matrix3_5.equals((Object)matrix3_0));
      assertFalse(matrix3_5.equals((Object)matrix3_2));
      assertFalse(matrix3_5.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_2));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_5.m10, 0.01F);
      assertEquals(0.0F, matrix3_5.m21, 0.01F);
      assertEquals((-136.0F), matrix3_5.m20, 0.01F);
      assertEquals(0.0F, matrix3_5.m01, 0.01F);
      assertEquals(0.0F, matrix3_5.m12, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals(2008.68F, matrix3_5.m00, 0.01F);
      assertEquals(2008.68F, matrix3_5.m11, 0.01F);
      assertEquals(2008.68F, matrix3_5.m22, 0.01F);
      assertEquals(2008.68F, matrix3_1.m00, 0.01F);
      assertEquals(2008.68F, matrix3_1.m11, 0.01F);
      assertEquals(2008.68F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-136.0F), matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertEquals((-136.0F), matrix3_4.m20, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(2008.68F, matrix3_4.m00, 0.01F);
      assertEquals(2008.68F, matrix3_4.m11, 0.01F);
      assertEquals(2008.68F, matrix3_4.m22, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertSame(matrix3_5, matrix3_4);
      assertSame(matrix3_5, matrix3_1);
      assertNotSame(matrix3_5, matrix3_0);
      assertNotSame(matrix3_5, matrix3_2);
      assertNotSame(matrix3_5, matrix3_3);
      assertSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_4);
      assertSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_2);
      assertNotSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_0);
      assertSame(matrix3_4, matrix3_5);
      
      Matrix3 matrix3_6 = matrix3_1.setToRotation(518.54F);
      assertNotNull(matrix3_6);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01(), 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.9843429F), matrix3_6.m00(), 0.01F);
      assertEquals((-0.9843429F), matrix3_6.m11(), 0.01F);
      assertEquals(0.0F, matrix3_6.m20(), 0.01F);
      assertEquals(0.17626445F, matrix3_6.m10(), 0.01F);
      assertEquals(0.0F, matrix3_6.m02(), 0.01F);
      assertEquals((-0.17626445F), matrix3_6.m01(), 0.01F);
      assertTrue(matrix3_6.isAffine());
      assertEquals(0.0F, matrix3_6.m21(), 0.01F);
      assertEquals(0.0F, matrix3_6.m12(), 0.01F);
      assertEquals(1.0F, matrix3_6.m22(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_6.equals((Object)matrix3_0));
      assertFalse(matrix3_6.equals((Object)matrix3_3));
      assertFalse(matrix3_6.equals((Object)matrix3_2));
      assertEquals(0.17626445F, matrix3_1.m10, 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_6.m21, 0.01F);
      assertEquals(1.0F, matrix3_6.m22, 0.01F);
      assertEquals(0.0F, matrix3_6.m12, 0.01F);
      assertEquals(0.0F, matrix3_6.m20, 0.01F);
      assertEquals((-0.9843429F), matrix3_6.m00, 0.01F);
      assertEquals((-0.9843429F), matrix3_6.m11, 0.01F);
      assertEquals(0.17626445F, matrix3_6.m10, 0.01F);
      assertEquals((-0.17626445F), matrix3_6.m01, 0.01F);
      assertEquals(0.0F, matrix3_6.m02, 0.01F);
      assertSame(matrix3_1, matrix3_5);
      assertSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_6, matrix3_0);
      assertSame(matrix3_6, matrix3_4);
      assertSame(matrix3_6, matrix3_1);
      assertNotSame(matrix3_6, matrix3_3);
      assertNotSame(matrix3_6, matrix3_2);
      assertSame(matrix3_6, matrix3_5);
      
      Matrix3 matrix3_7 = Matrix3.IDENTITY;
      assertNotNull(matrix3_7);
      assertEquals(0.0F, matrix3_7.m20(), 0.01F);
      assertEquals(0.0F, matrix3_7.m02(), 0.01F);
      assertFalse(matrix3_7.isAffine());
      assertEquals(0.0F, matrix3_7.m01(), 0.01F);
      assertEquals(0.0F, matrix3_7.m12(), 0.01F);
      assertEquals(1.0F, matrix3_7.m00(), 0.01F);
      assertEquals(0.0F, matrix3_7.m22(), 0.01F);
      assertEquals(1.0F, matrix3_7.m11(), 0.01F);
      assertEquals(0.0F, matrix3_7.m21(), 0.01F);
      assertEquals(0.0F, matrix3_7.m10(), 0.01F);
      assertFalse(matrix3_7.equals((Object)matrix3_6));
      assertFalse(matrix3_7.equals((Object)matrix3_5));
      assertFalse(matrix3_7.equals((Object)matrix3_4));
      assertFalse(matrix3_7.equals((Object)matrix3_1));
      assertFalse(matrix3_7.equals((Object)matrix3_3));
      assertFalse(matrix3_7.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_7.m10, 0.01F);
      assertEquals(0.0F, matrix3_7.m21, 0.01F);
      assertEquals(1.0F, matrix3_7.m00, 0.01F);
      assertEquals(1.0F, matrix3_7.m11, 0.01F);
      assertEquals(0.0F, matrix3_7.m22, 0.01F);
      assertEquals(0.0F, matrix3_7.m20, 0.01F);
      assertEquals(0.0F, matrix3_7.m01, 0.01F);
      assertEquals(0.0F, matrix3_7.m12, 0.01F);
      assertEquals(0.0F, matrix3_7.m02, 0.01F);
      assertNotSame(matrix3_7, matrix3_6);
      assertNotSame(matrix3_7, matrix3_5);
      assertNotSame(matrix3_7, matrix3_4);
      assertSame(matrix3_7, matrix3_0);
      assertNotSame(matrix3_7, matrix3_1);
      assertNotSame(matrix3_7, matrix3_3);
      assertNotSame(matrix3_7, matrix3_2);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_3.transformVector((IVector) vector0);
      assertNotNull(vector1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01(), 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_6));
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_7));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_7));
      assertFalse(matrix3_2.equals((Object)matrix3_5));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_4));
      assertFalse(matrix3_2.equals((Object)matrix3_6));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(matrix3_3.equals((Object)matrix3_7));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_4));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_5));
      assertFalse(matrix3_3.equals((Object)matrix3_6));
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10, 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_6);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_7);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_1, matrix3_7);
      assertSame(matrix3_1, matrix3_5);
      assertSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_2, matrix3_7);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_5);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_6);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertNotSame(matrix3_3, matrix3_7);
      assertSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_4);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_5);
      assertNotSame(matrix3_3, matrix3_6);
      
      Matrix3 matrix3_8 = matrix3_7.setToTransform((IVector) vector1, -0.0F, (IVector) vector1);
      assertNotNull(matrix3_8);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01(), 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_7.m20(), 0.01F);
      assertEquals(0.0F, matrix3_7.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_7.m01(), 0.01F);
      assertEquals(0.0F, matrix3_7.m12(), 0.01F);
      assertEquals(0.0F, matrix3_7.m00(), 0.01F);
      assertEquals(1.0F, matrix3_7.m22(), 0.01F);
      assertEquals(0.0F, matrix3_7.m11(), 0.01F);
      assertEquals(0.0F, matrix3_7.m21(), 0.01F);
      assertEquals(0.0F, matrix3_7.m10(), 0.01F);
      assertTrue(matrix3_7.isAffine());
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(-0.0F, matrix3_8.m01(), 0.01F);
      assertEquals(0.0F, matrix3_8.m12(), 0.01F);
      assertEquals(0.0F, matrix3_8.m02(), 0.01F);
      assertEquals(0.0F, matrix3_8.m21(), 0.01F);
      assertEquals(0.0F, matrix3_8.m10(), 0.01F);
      assertEquals(0.0F, matrix3_8.m00(), 0.01F);
      assertEquals(1.0F, matrix3_8.m22(), 0.01F);
      assertEquals(0.0F, matrix3_8.m11(), 0.01F);
      assertEquals(0.0F, matrix3_8.m20(), 0.01F);
      assertTrue(matrix3_8.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_6));
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_7));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_7));
      assertFalse(matrix3_2.equals((Object)matrix3_5));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_4));
      assertFalse(matrix3_2.equals((Object)matrix3_6));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_7.equals((Object)matrix3_6));
      assertFalse(matrix3_7.equals((Object)matrix3_5));
      assertFalse(matrix3_7.equals((Object)matrix3_4));
      assertFalse(matrix3_7.equals((Object)matrix3_1));
      assertFalse(matrix3_7.equals((Object)matrix3_3));
      assertFalse(matrix3_7.equals((Object)matrix3_2));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(matrix3_3.equals((Object)matrix3_7));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_4));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_5));
      assertFalse(matrix3_3.equals((Object)matrix3_6));
      assertFalse(matrix3_8.equals((Object)matrix3_3));
      assertFalse(matrix3_8.equals((Object)matrix3_2));
      assertFalse(matrix3_8.equals((Object)matrix3_4));
      assertFalse(matrix3_8.equals((Object)matrix3_1));
      assertFalse(matrix3_8.equals((Object)matrix3_6));
      assertFalse(matrix3_8.equals((Object)matrix3_5));
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10, 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_7.m10, 0.01F);
      assertEquals(0.0F, matrix3_7.m21, 0.01F);
      assertEquals(0.0F, matrix3_7.m00, 0.01F);
      assertEquals(0.0F, matrix3_7.m11, 0.01F);
      assertEquals(1.0F, matrix3_7.m22, 0.01F);
      assertEquals(0.0F, matrix3_7.m20, 0.01F);
      assertEquals(-0.0F, matrix3_7.m01, 0.01F);
      assertEquals(0.0F, matrix3_7.m12, 0.01F);
      assertEquals(0.0F, matrix3_7.m02, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_8.m00, 0.01F);
      assertEquals(0.0F, matrix3_8.m11, 0.01F);
      assertEquals(1.0F, matrix3_8.m22, 0.01F);
      assertEquals(0.0F, matrix3_8.m10, 0.01F);
      assertEquals(0.0F, matrix3_8.m21, 0.01F);
      assertEquals(0.0F, matrix3_8.m02, 0.01F);
      assertEquals(-0.0F, matrix3_8.m01, 0.01F);
      assertEquals(0.0F, matrix3_8.m12, 0.01F);
      assertEquals(0.0F, matrix3_8.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_6);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_8);
      assertSame(matrix3_0, matrix3_7);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_1, matrix3_7);
      assertSame(matrix3_1, matrix3_5);
      assertSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_8);
      assertSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_2, matrix3_7);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_5);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_6);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_8);
      assertNotSame(matrix3_7, matrix3_6);
      assertNotSame(matrix3_7, matrix3_5);
      assertSame(matrix3_7, matrix3_8);
      assertNotSame(matrix3_7, matrix3_4);
      assertSame(matrix3_7, matrix3_0);
      assertNotSame(matrix3_7, matrix3_1);
      assertNotSame(matrix3_7, matrix3_3);
      assertNotSame(matrix3_7, matrix3_2);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertNotSame(matrix3_3, matrix3_7);
      assertSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_4);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_5);
      assertNotSame(matrix3_3, matrix3_6);
      assertNotSame(matrix3_3, matrix3_8);
      assertSame(matrix3_8, matrix3_7);
      assertNotSame(matrix3_8, matrix3_3);
      assertNotSame(matrix3_8, matrix3_2);
      assertNotSame(matrix3_8, matrix3_4);
      assertNotSame(matrix3_8, matrix3_1);
      assertSame(matrix3_8, matrix3_0);
      assertNotSame(matrix3_8, matrix3_6);
      assertNotSame(matrix3_8, matrix3_5);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.lerpAffine((IMatrix3) matrix3_1, 0.0F);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      
      matrix3_2.IDENTITY.m22 = 1.0F;
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      
      String string0 = matrix3_2.toString();
      assertNotNull(string0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_2));
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals("[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]", string0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      
      Matrix3 matrix3_3 = matrix3_2.invertLocal();
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_2));
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      
      Point point0 = new Point(1.0F, 0.0F);
      assertNotNull(point0);
      assertEquals(1.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(1.0F, point0.x, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_3.extractScale(vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector1.x(), 0.01F);
      assertEquals(1.0F, vector1.y(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_2));
      assertTrue(matrix3_0.equals((Object)matrix3_3));
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector1.x, 0.01F);
      assertEquals(1.0F, vector1.y, 0.01F);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      
      Matrix3 matrix3_4 = new Matrix3(matrix3_3);
      assertNotNull(matrix3_4);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertEquals(-0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(1.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(1.0F, matrix3_4.m11(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_2));
      assertTrue(matrix3_0.equals((Object)matrix3_3));
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_0));
      assertTrue(matrix3_4.equals((Object)matrix3_1));
      assertTrue(matrix3_4.equals((Object)matrix3_2));
      assertTrue(matrix3_4.equals((Object)matrix3_3));
      assertTrue(matrix3_4.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(-0.0F, matrix3_4.m01, 0.01F);
      assertEquals(-0.0F, matrix3_4.m12, 0.01F);
      assertEquals(1.0F, matrix3_4.m00, 0.01F);
      assertEquals(1.0F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(-0.0F, matrix3_4.m10, 0.01F);
      assertEquals(-0.0F, matrix3_4.m21, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = matrix3_1.equals(object0);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertTrue(matrix3_1.equals((Object)matrix3_4));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_5 = new Matrix3();
      assertNotNull(matrix3_5);
      assertEquals(1.0F, matrix3_5.m00(), 0.01F);
      assertEquals(1.0F, matrix3_5.m22(), 0.01F);
      assertEquals(1.0F, matrix3_5.m11(), 0.01F);
      assertEquals(0.0F, matrix3_5.m21(), 0.01F);
      assertEquals(0.0F, matrix3_5.m10(), 0.01F);
      assertTrue(matrix3_5.isAffine());
      assertEquals(0.0F, matrix3_5.m20(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(0.0F, matrix3_5.m12(), 0.01F);
      assertTrue(matrix3_5.equals((Object)matrix3_1));
      assertTrue(matrix3_5.equals((Object)matrix3_2));
      assertTrue(matrix3_5.equals((Object)matrix3_3));
      assertTrue(matrix3_5.equals((Object)matrix3_4));
      assertTrue(matrix3_5.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_5.m20, 0.01F);
      assertEquals(0.0F, matrix3_5.m01, 0.01F);
      assertEquals(0.0F, matrix3_5.m12, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals(0.0F, matrix3_5.m10, 0.01F);
      assertEquals(0.0F, matrix3_5.m21, 0.01F);
      assertEquals(1.0F, matrix3_5.m00, 0.01F);
      assertEquals(1.0F, matrix3_5.m11, 0.01F);
      assertEquals(1.0F, matrix3_5.m22, 0.01F);
      
      int int0 = 959;
      // Undeclared exception!
      try { 
        matrix3_2.setElement(959, 959, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.lerpAffine((IMatrix3) matrix3_1, 0.0F);
      assertNotNull(matrix3_2);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      matrix3_2.IDENTITY.m22 = 0.0F;
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      
      String string0 = matrix3_2.toString();
      assertNotNull(string0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals("[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]", string0);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      Matrix3 matrix3_3 = matrix3_2.invertLocal();
      assertNotNull(matrix3_3);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_2);
      
      Matrix3 matrix3_4 = matrix3_1.setToScale(2008.68F);
      assertNotNull(matrix3_4);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertFalse(matrix3_4.isAffine());
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_2));
      assertEquals(2008.68F, matrix3_1.m00, 0.01F);
      assertEquals(2008.68F, matrix3_1.m11, 0.01F);
      assertEquals(2008.68F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(2008.68F, matrix3_4.m00, 0.01F);
      assertEquals(2008.68F, matrix3_4.m11, 0.01F);
      assertEquals(2008.68F, matrix3_4.m22, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_4, matrix3_0);
      assertNotSame(matrix3_4, matrix3_3);
      assertSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2008.68F;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = Float.NaN;
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertNotNull(floatBuffer0);
      assertFalse(floatBuffer0.isDirect());
      assertEquals(7, floatBuffer0.remaining());
      assertEquals(7, floatBuffer0.capacity());
      assertFalse(floatBuffer0.isReadOnly());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(7, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0, floatBuffer0.position());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=7 cap=7]", floatBuffer0.toString());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, 0.0F, 2008.68F, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Matrix3 matrix3_5 = matrix3_4.setTranslation((-136.0F), 0.0F);
      assertNotNull(matrix3_5);
      assertEquals(0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(0.0F, matrix3_5.m12(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals((-136.0F), matrix3_5.m20(), 0.01F);
      assertEquals(0.0F, matrix3_5.m21(), 0.01F);
      assertEquals(0.0F, matrix3_5.m10(), 0.01F);
      assertFalse(matrix3_5.isAffine());
      assertEquals(2008.68F, matrix3_5.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_5.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_5.m11(), 0.01F);
      assertEquals((-136.0F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m00(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m22(), 0.01F);
      assertEquals(2008.68F, matrix3_4.m11(), 0.01F);
      assertFalse(matrix3_4.isAffine());
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m10(), 0.01F);
      assertEquals((-136.0F), matrix3_4.m20(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertFalse(matrix3_5.equals((Object)matrix3_3));
      assertFalse(matrix3_5.equals((Object)matrix3_0));
      assertFalse(matrix3_5.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_2));
      assertEquals(2008.68F, matrix3_5.m00, 0.01F);
      assertEquals(2008.68F, matrix3_5.m11, 0.01F);
      assertEquals(2008.68F, matrix3_5.m22, 0.01F);
      assertEquals(0.0F, matrix3_5.m10, 0.01F);
      assertEquals(0.0F, matrix3_5.m21, 0.01F);
      assertEquals((-136.0F), matrix3_5.m20, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals(0.0F, matrix3_5.m01, 0.01F);
      assertEquals(0.0F, matrix3_5.m12, 0.01F);
      assertEquals(2008.68F, matrix3_1.m00, 0.01F);
      assertEquals(2008.68F, matrix3_1.m11, 0.01F);
      assertEquals(2008.68F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals((-136.0F), matrix3_1.m20, 0.01F);
      assertEquals((-136.0F), matrix3_4.m20, 0.01F);
      assertEquals(0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(2008.68F, matrix3_4.m00, 0.01F);
      assertEquals(2008.68F, matrix3_4.m11, 0.01F);
      assertEquals(2008.68F, matrix3_4.m22, 0.01F);
      assertNotSame(matrix3_5, matrix3_3);
      assertNotSame(matrix3_5, matrix3_0);
      assertSame(matrix3_5, matrix3_4);
      assertNotSame(matrix3_5, matrix3_2);
      assertSame(matrix3_5, matrix3_1);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_5);
      assertSame(matrix3_1, matrix3_4);
      assertSame(matrix3_4, matrix3_5);
      assertNotSame(matrix3_4, matrix3_0);
      assertNotSame(matrix3_4, matrix3_3);
      assertSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_2);
      
      Matrix3 matrix3_6 = matrix3_1.setToRotation(518.54F);
      assertNotNull(matrix3_6);
      assertEquals(0.0F, matrix3_6.m20(), 0.01F);
      assertTrue(matrix3_6.isAffine());
      assertEquals((-0.17626445F), matrix3_6.m01(), 0.01F);
      assertEquals(0.17626445F, matrix3_6.m10(), 0.01F);
      assertEquals((-0.9843429F), matrix3_6.m00(), 0.01F);
      assertEquals((-0.9843429F), matrix3_6.m11(), 0.01F);
      assertEquals(0.0F, matrix3_6.m21(), 0.01F);
      assertEquals(1.0F, matrix3_6.m22(), 0.01F);
      assertEquals(0.0F, matrix3_6.m12(), 0.01F);
      assertEquals(0.0F, matrix3_6.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_6.equals((Object)matrix3_0));
      assertFalse(matrix3_6.equals((Object)matrix3_3));
      assertFalse(matrix3_6.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertEquals((-0.17626445F), matrix3_6.m01, 0.01F);
      assertEquals((-0.9843429F), matrix3_6.m00, 0.01F);
      assertEquals((-0.9843429F), matrix3_6.m11, 0.01F);
      assertEquals(0.17626445F, matrix3_6.m10, 0.01F);
      assertEquals(0.0F, matrix3_6.m20, 0.01F);
      assertEquals(0.0F, matrix3_6.m02, 0.01F);
      assertEquals(0.0F, matrix3_6.m12, 0.01F);
      assertEquals(1.0F, matrix3_6.m22, 0.01F);
      assertEquals(0.0F, matrix3_6.m21, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertNotSame(matrix3_6, matrix3_0);
      assertSame(matrix3_6, matrix3_5);
      assertNotSame(matrix3_6, matrix3_3);
      assertSame(matrix3_6, matrix3_4);
      assertSame(matrix3_6, matrix3_1);
      assertNotSame(matrix3_6, matrix3_2);
      assertSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_5);
      assertSame(matrix3_1, matrix3_4);
      
      Matrix3 matrix3_7 = Matrix3.IDENTITY;
      assertNotNull(matrix3_7);
      assertEquals(0.0F, matrix3_7.m01(), 0.01F);
      assertEquals(0.0F, matrix3_7.m12(), 0.01F);
      assertEquals(1.0F, matrix3_7.m00(), 0.01F);
      assertEquals(0.0F, matrix3_7.m22(), 0.01F);
      assertEquals(1.0F, matrix3_7.m11(), 0.01F);
      assertEquals(0.0F, matrix3_7.m21(), 0.01F);
      assertEquals(0.0F, matrix3_7.m10(), 0.01F);
      assertFalse(matrix3_7.isAffine());
      assertEquals(0.0F, matrix3_7.m02(), 0.01F);
      assertEquals(0.0F, matrix3_7.m20(), 0.01F);
      assertFalse(matrix3_7.equals((Object)matrix3_5));
      assertFalse(matrix3_7.equals((Object)matrix3_3));
      assertFalse(matrix3_7.equals((Object)matrix3_2));
      assertFalse(matrix3_7.equals((Object)matrix3_6));
      assertFalse(matrix3_7.equals((Object)matrix3_1));
      assertFalse(matrix3_7.equals((Object)matrix3_4));
      assertEquals(0.0F, matrix3_7.m20, 0.01F);
      assertEquals(1.0F, matrix3_7.m00, 0.01F);
      assertEquals(1.0F, matrix3_7.m11, 0.01F);
      assertEquals(0.0F, matrix3_7.m22, 0.01F);
      assertEquals(0.0F, matrix3_7.m01, 0.01F);
      assertEquals(0.0F, matrix3_7.m12, 0.01F);
      assertEquals(0.0F, matrix3_7.m10, 0.01F);
      assertEquals(0.0F, matrix3_7.m21, 0.01F);
      assertEquals(0.0F, matrix3_7.m02, 0.01F);
      assertSame(matrix3_7, matrix3_0);
      assertNotSame(matrix3_7, matrix3_5);
      assertNotSame(matrix3_7, matrix3_3);
      assertNotSame(matrix3_7, matrix3_2);
      assertNotSame(matrix3_7, matrix3_6);
      assertNotSame(matrix3_7, matrix3_1);
      assertNotSame(matrix3_7, matrix3_4);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_3.transformVector((IVector) vector0);
      assertNotNull(vector1);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_6));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_7));
      assertFalse(matrix3_2.equals((Object)matrix3_7));
      assertFalse(matrix3_2.equals((Object)matrix3_6));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_4));
      assertFalse(matrix3_2.equals((Object)matrix3_5));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(matrix3_3.equals((Object)matrix3_7));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_6));
      assertFalse(matrix3_3.equals((Object)matrix3_5));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_4));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertSame(matrix3_0, matrix3_7);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_6);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_5);
      assertSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_1, matrix3_7);
      assertNotSame(matrix3_2, matrix3_7);
      assertNotSame(matrix3_2, matrix3_6);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_5);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertNotSame(matrix3_3, matrix3_7);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_6);
      assertNotSame(matrix3_3, matrix3_5);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_4);
      assertSame(matrix3_3, matrix3_2);
      
      Matrix3 matrix3_8 = matrix3_7.setToTransform((IVector) vector1, Float.NaN, (IVector) vector1);
      assertNotNull(matrix3_8);
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_7.m01(), 0.01F);
      assertEquals(0.0F, matrix3_7.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_7.m00(), 0.01F);
      assertEquals(1.0F, matrix3_7.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_7.m11(), 0.01F);
      assertEquals(0.0F, matrix3_7.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_7.m10(), 0.01F);
      assertTrue(matrix3_7.isAffine());
      assertEquals(0.0F, matrix3_7.m02(), 0.01F);
      assertEquals(0.0F, matrix3_7.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, matrix3_8.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_8.m00(), 0.01F);
      assertEquals(1.0F, matrix3_8.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_8.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_8.m01(), 0.01F);
      assertEquals(0.0F, matrix3_8.m12(), 0.01F);
      assertEquals(0.0F, matrix3_8.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_8.m10(), 0.01F);
      assertTrue(matrix3_8.isAffine());
      assertEquals(0.0F, matrix3_8.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_6));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_7));
      assertFalse(matrix3_7.equals((Object)matrix3_5));
      assertFalse(matrix3_7.equals((Object)matrix3_3));
      assertFalse(matrix3_7.equals((Object)matrix3_2));
      assertFalse(matrix3_7.equals((Object)matrix3_6));
      assertFalse(matrix3_7.equals((Object)matrix3_1));
      assertFalse(matrix3_7.equals((Object)matrix3_4));
      assertFalse(matrix3_2.equals((Object)matrix3_7));
      assertFalse(matrix3_2.equals((Object)matrix3_6));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_4));
      assertFalse(matrix3_2.equals((Object)matrix3_5));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(matrix3_8.equals((Object)matrix3_6));
      assertFalse(matrix3_8.equals((Object)matrix3_1));
      assertFalse(matrix3_8.equals((Object)matrix3_4));
      assertFalse(matrix3_8.equals((Object)matrix3_5));
      assertFalse(matrix3_8.equals((Object)matrix3_3));
      assertFalse(matrix3_8.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_7));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_6));
      assertFalse(matrix3_3.equals((Object)matrix3_5));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_4));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m00, 0.01F);
      assertEquals((-0.9843429F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.17626445F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-0.17626445F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_7.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_7.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_7.m11, 0.01F);
      assertEquals(1.0F, matrix3_7.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_7.m01, 0.01F);
      assertEquals(0.0F, matrix3_7.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_7.m10, 0.01F);
      assertEquals(0.0F, matrix3_7.m21, 0.01F);
      assertEquals(0.0F, matrix3_7.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(Float.NaN, matrix3_8.m10, 0.01F);
      assertEquals(0.0F, matrix3_8.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_8.m01, 0.01F);
      assertEquals(0.0F, matrix3_8.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_8.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_8.m11, 0.01F);
      assertEquals(1.0F, matrix3_8.m22, 0.01F);
      assertEquals(0.0F, matrix3_8.m02, 0.01F);
      assertEquals(0.0F, matrix3_8.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertSame(matrix3_0, matrix3_7);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_8);
      assertNotSame(matrix3_0, matrix3_6);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_8);
      assertSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_1, matrix3_7);
      assertSame(matrix3_7, matrix3_0);
      assertNotSame(matrix3_7, matrix3_5);
      assertNotSame(matrix3_7, matrix3_3);
      assertNotSame(matrix3_7, matrix3_2);
      assertSame(matrix3_7, matrix3_8);
      assertNotSame(matrix3_7, matrix3_6);
      assertNotSame(matrix3_7, matrix3_1);
      assertNotSame(matrix3_7, matrix3_4);
      assertNotSame(matrix3_2, matrix3_7);
      assertNotSame(matrix3_2, matrix3_6);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_5);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_8);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertNotSame(matrix3_8, matrix3_6);
      assertNotSame(matrix3_8, matrix3_1);
      assertNotSame(matrix3_8, matrix3_4);
      assertSame(matrix3_8, matrix3_0);
      assertSame(matrix3_8, matrix3_7);
      assertNotSame(matrix3_8, matrix3_5);
      assertNotSame(matrix3_8, matrix3_3);
      assertNotSame(matrix3_8, matrix3_2);
      assertNotSame(matrix3_3, matrix3_7);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_8);
      assertNotSame(matrix3_3, matrix3_6);
      assertNotSame(matrix3_3, matrix3_5);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_4);
      assertSame(matrix3_3, matrix3_2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(104.41456F, (-1031.0F), (-1031.0F), (-1874.2548F), 1200.2429F, 2.0F, 519.64984F, 104.41456F, (-1874.2548F));
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1200.2429F, matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(519.64984F, matrix3_0.m02(), 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m22(), 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m01(), 0.01F);
      assertEquals((-1031.0F), matrix3_0.m10(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m12(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m00(), 0.01F);
      assertEquals((-1031.0F), matrix3_0.m20(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m00, 0.01F);
      assertEquals(104.41456F, matrix3_0.m12, 0.01F);
      assertEquals((-1031.0F), matrix3_0.m20, 0.01F);
      assertEquals(1200.2429F, matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m01, 0.01F);
      assertEquals(519.64984F, matrix3_0.m02, 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m22, 0.01F);
      assertEquals((-1031.0F), matrix3_0.m10, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invertLocal();
      assertNotNull(matrix3_1);
      assertEquals((-4.271386E-4F), matrix3_0.m22(), 0.01F);
      assertEquals(2.9201564E-4F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-8.301017E-4F), matrix3_0.m01(), 0.01F);
      assertEquals(8.038175E-5F, matrix3_0.m11(), 0.01F);
      assertEquals(4.567125E-4F, matrix3_0.m21(), 0.01F);
      assertEquals((-1.9368745E-4F), matrix3_0.m02(), 0.01F);
      assertEquals((-4.8220804E-4F), matrix3_0.m10(), 0.01F);
      assertEquals((-5.317906E-4F), matrix3_0.m00(), 0.01F);
      assertEquals((-1.2921738E-4F), matrix3_0.m12(), 0.01F);
      assertEquals(4.567125E-4F, matrix3_1.m21(), 0.01F);
      assertEquals((-4.8220804E-4F), matrix3_1.m10(), 0.01F);
      assertEquals((-1.9368745E-4F), matrix3_1.m02(), 0.01F);
      assertEquals((-5.317906E-4F), matrix3_1.m00(), 0.01F);
      assertEquals(2.9201564E-4F, matrix3_1.m20(), 0.01F);
      assertEquals((-1.2921738E-4F), matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-8.301017E-4F), matrix3_1.m01(), 0.01F);
      assertEquals((-4.271386E-4F), matrix3_1.m22(), 0.01F);
      assertEquals(8.038175E-5F, matrix3_1.m11(), 0.01F);
      assertEquals(8.038175E-5F, matrix3_0.m11, 0.01F);
      assertEquals((-1.9368745E-4F), matrix3_0.m02, 0.01F);
      assertEquals((-4.8220804E-4F), matrix3_0.m10, 0.01F);
      assertEquals((-5.317906E-4F), matrix3_0.m00, 0.01F);
      assertEquals((-1.2921738E-4F), matrix3_0.m12, 0.01F);
      assertEquals(4.567125E-4F, matrix3_0.m21, 0.01F);
      assertEquals(2.9201564E-4F, matrix3_0.m20, 0.01F);
      assertEquals((-4.271386E-4F), matrix3_0.m22, 0.01F);
      assertEquals((-8.301017E-4F), matrix3_0.m01, 0.01F);
      assertEquals(8.038175E-5F, matrix3_1.m11, 0.01F);
      assertEquals((-4.271386E-4F), matrix3_1.m22, 0.01F);
      assertEquals((-8.301017E-4F), matrix3_1.m01, 0.01F);
      assertEquals((-4.8220804E-4F), matrix3_1.m10, 0.01F);
      assertEquals((-1.9368745E-4F), matrix3_1.m02, 0.01F);
      assertEquals(4.567125E-4F, matrix3_1.m21, 0.01F);
      assertEquals((-5.317906E-4F), matrix3_1.m00, 0.01F);
      assertEquals((-1.2921738E-4F), matrix3_1.m12, 0.01F);
      assertEquals(2.9201564E-4F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-2.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-2.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invertLocal();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation(1.0F, 1420.294F, 1.0F, 653.2103F);
      assertNotNull(matrix3_1);
      assertEquals(1495.4154F, matrix3_0.m12(), 0.01F);
      assertEquals(1202.5635F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals((-894.8568F), matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(927318.8F, matrix3_0.m00(), 0.01F);
      assertEquals(196146.08F, matrix3_0.m22(), 0.01F);
      assertEquals(426485.72F, matrix3_0.m20(), 0.01F);
      assertEquals(103.24835F, matrix3_0.m10(), 0.01F);
      assertEquals(426484.03F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-894.8568F), matrix3_1.m21(), 0.01F);
      assertEquals(927318.8F, matrix3_1.m00(), 0.01F);
      assertEquals(196146.08F, matrix3_1.m22(), 0.01F);
      assertEquals(1202.5635F, matrix3_1.m01(), 0.01F);
      assertEquals(103.24835F, matrix3_1.m10(), 0.01F);
      assertEquals(1495.4154F, matrix3_1.m12(), 0.01F);
      assertEquals(426484.03F, matrix3_1.m02(), 0.01F);
      assertEquals(426485.72F, matrix3_1.m20(), 0.01F);
      assertEquals(426484.03F, matrix3_0.m02, 0.01F);
      assertEquals(426485.72F, matrix3_0.m20, 0.01F);
      assertEquals(927318.8F, matrix3_0.m00, 0.01F);
      assertEquals(196146.08F, matrix3_0.m22, 0.01F);
      assertEquals(103.24835F, matrix3_0.m10, 0.01F);
      assertEquals(1495.4154F, matrix3_0.m12, 0.01F);
      assertEquals((-894.8568F), matrix3_0.m21, 0.01F);
      assertEquals(1202.5635F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(103.24835F, matrix3_1.m10, 0.01F);
      assertEquals(1202.5635F, matrix3_1.m01, 0.01F);
      assertEquals(426484.03F, matrix3_1.m02, 0.01F);
      assertEquals(1495.4154F, matrix3_1.m12, 0.01F);
      assertEquals(426485.72F, matrix3_1.m20, 0.01F);
      assertEquals((-894.8568F), matrix3_1.m21, 0.01F);
      assertEquals(927318.8F, matrix3_1.m00, 0.01F);
      assertEquals(196146.08F, matrix3_1.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.invertAffineLocal();
      assertNotNull(matrix3_2);
      assertEquals(1.1545935F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1671.7716F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-1.2855328E-4F), matrix3_0.m10(), 0.01F);
      assertEquals((-0.0014972972F), matrix3_0.m01(), 0.01F);
      assertEquals(1.2450879E-6F, matrix3_0.m00(), 0.01F);
      assertEquals((-0.64604896F), matrix3_0.m20(), 0.01F);
      assertEquals(1.1545935F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1671.7716F, matrix3_2.m21(), 0.01F);
      assertEquals((-1.2855328E-4F), matrix3_2.m10(), 0.01F);
      assertEquals((-0.0014972972F), matrix3_2.m01(), 0.01F);
      assertEquals(1.2450879E-6F, matrix3_2.m00(), 0.01F);
      assertEquals((-0.64604896F), matrix3_2.m20(), 0.01F);
      assertEquals((-1.2855328E-4F), matrix3_0.m10, 0.01F);
      assertEquals((-0.64604896F), matrix3_0.m20, 0.01F);
      assertEquals(1.2450879E-6F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1671.7716F, matrix3_0.m21, 0.01F);
      assertEquals(1.1545935F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-0.0014972972F), matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-1.2855328E-4F), matrix3_2.m10, 0.01F);
      assertEquals((-0.0014972972F), matrix3_2.m01, 0.01F);
      assertEquals(1.2450879E-6F, matrix3_2.m00, 0.01F);
      assertEquals((-0.64604896F), matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1671.7716F, matrix3_2.m21, 0.01F);
      assertEquals(1.1545935F, matrix3_2.m11, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      
      boolean boolean0 = matrix3_0.equals(vector3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertFalse(boolean0);
      
      Matrix3 matrix3_1 = matrix3_0.invertAffineLocal();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(-0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale(Float.NEGATIVE_INFINITY, 1.0F, Float.NEGATIVE_INFINITY);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertFalse(matrix3_1.isAffine());
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m00(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.invertAffineLocal();
      assertNotNull(matrix3_2);
      assertEquals(-0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(-0.0F, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(-0.0F, matrix3_0.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2362.901F), (-3.4028235E38F), (-1888.7909F), (-2362.901F), 33338.32F, (-3.4028235E38F), 1.0E-5F, (-1888.7909F), 1490.4851F);
      assertNotNull(matrix3_0);
      assertEquals((-1888.7909F), matrix3_0.m20(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(33338.32F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m02(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m01(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals(1490.4851F, matrix3_0.m22(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m12(), 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m02, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m01, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals(1490.4851F, matrix3_0.m22, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m12, 0.01F);
      assertEquals(33338.32F, matrix3_0.m11, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((-1990.0F));
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-0.9802754F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.19763628F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.19763628F), matrix3_0.m11(), 0.01F);
      assertEquals(0.9802754F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.19763628F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.19763628F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.9802754F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.9802754F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-0.19763628F), matrix3_0.m00, 0.01F);
      assertEquals((-0.19763628F), matrix3_0.m11, 0.01F);
      assertEquals(0.9802754F, matrix3_0.m01, 0.01F);
      assertEquals((-0.9802754F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.9802754F, matrix3_1.m01, 0.01F);
      assertEquals((-0.9802754F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-0.19763628F), matrix3_1.m00, 0.01F);
      assertEquals((-0.19763628F), matrix3_1.m11, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.invertAffineLocal();
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-0.1976363F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.1976363F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-0.9802755F), matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.9802755F, matrix3_0.m10(), 0.01F);
      assertEquals((-0.1976363F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.1976363F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.9802755F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.9802755F), matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.9802755F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-0.9802755F), matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals((-0.1976363F), matrix3_2.m00(), 0.01F);
      assertEquals((-0.1976363F), matrix3_2.m11(), 0.01F);
      assertEquals(0.9802755F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-0.9802755F), matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-0.1976363F), matrix3_0.m00, 0.01F);
      assertEquals((-0.1976363F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-0.9802755F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-0.1976363F), matrix3_1.m00, 0.01F);
      assertEquals((-0.1976363F), matrix3_1.m11, 0.01F);
      assertEquals(0.9802755F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.9802755F, matrix3_2.m10, 0.01F);
      assertEquals((-0.1976363F), matrix3_2.m00, 0.01F);
      assertEquals((-0.1976363F), matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals((-0.9802755F), matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-110.29698F), (-2.0F), 1858.1202F, 2239.27F, (-2.0F), (-110.29698F), 2239.27F, 1312.6165F);
      assertNotNull(matrix3_0);
      assertEquals((-2.0F), matrix3_0.m20(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m10(), 0.01F);
      assertEquals(1858.1202F, matrix3_0.m01(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2239.27F, matrix3_0.m11(), 0.01F);
      assertEquals(2239.27F, matrix3_0.m12(), 0.01F);
      assertEquals(1312.6165F, matrix3_0.m22(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m02, 0.01F);
      assertEquals((-2.0F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals(2239.27F, matrix3_0.m12, 0.01F);
      assertEquals(2239.27F, matrix3_0.m11, 0.01F);
      assertEquals((-110.29698F), matrix3_0.m10, 0.01F);
      assertEquals(1312.6165F, matrix3_0.m22, 0.01F);
      assertEquals((-2.0F), matrix3_0.m20, 0.01F);
      assertEquals(1858.1202F, matrix3_0.m01, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invertAffine(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals((-9.976729E-6F), matrix3_0.m11(), 0.01F);
      assertEquals(0.011170296F, matrix3_0.m00(), 0.01F);
      assertEquals(5.5020157E-4F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-0.009268981F), matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals((-0.018557915F), matrix3_0.m21(), 0.01F);
      assertEquals(0.023440992F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.023440992F, matrix3_1.m20(), 0.01F);
      assertEquals((-9.976729E-6F), matrix3_1.m11(), 0.01F);
      assertEquals((-0.018557915F), matrix3_1.m21(), 0.01F);
      assertEquals(5.5020157E-4F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-0.009268981F), matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.011170296F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-0.009268981F), matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.023440992F, matrix3_0.m20, 0.01F);
      assertEquals((-0.018557915F), matrix3_0.m21, 0.01F);
      assertEquals(5.5020157E-4F, matrix3_0.m10, 0.01F);
      assertEquals((-9.976729E-6F), matrix3_0.m11, 0.01F);
      assertEquals(0.011170296F, matrix3_0.m00, 0.01F);
      assertEquals(5.5020157E-4F, matrix3_1.m10, 0.01F);
      assertEquals((-0.018557915F), matrix3_1.m21, 0.01F);
      assertEquals((-9.976729E-6F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-0.009268981F), matrix3_1.m01, 0.01F);
      assertEquals(0.023440992F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.011170296F, matrix3_1.m00, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2670.6924F, (-2929.2F), (-2274.6829F), 1810.3224F, (-2929.2F), 0.0F, (-2274.6829F), 0.0F, 1.0E-4F);
      assertNotNull(matrix3_0);
      assertEquals(1810.3224F, matrix3_0.m01(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10(), 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2929.2F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20, 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invertAffine(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.6438425F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.0010597162F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.633964F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0011622906F, matrix3_0.m00(), 0.01F);
      assertEquals((-0.0011622906F), matrix3_0.m10(), 0.01F);
      assertEquals(7.183261E-4F, matrix3_0.m01(), 0.01F);
      assertEquals((-0.0010597162F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.633964F, matrix3_1.m21(), 0.01F);
      assertEquals(2.6438425F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0011622906F, matrix3_1.m00(), 0.01F);
      assertEquals(7.183261E-4F, matrix3_1.m01(), 0.01F);
      assertEquals((-0.0011622906F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.633964F, matrix3_0.m21, 0.01F);
      assertEquals((-0.0010597162F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-0.0011622906F), matrix3_0.m10, 0.01F);
      assertEquals(0.0011622906F, matrix3_0.m00, 0.01F);
      assertEquals(7.183261E-4F, matrix3_0.m01, 0.01F);
      assertEquals(2.6438425F, matrix3_0.m20, 0.01F);
      assertEquals(2.6438425F, matrix3_1.m20, 0.01F);
      assertEquals(1.633964F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals((-0.0010597162F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-0.0011622906F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0011622906F, matrix3_1.m00, 0.01F);
      assertEquals(7.183261E-4F, matrix3_1.m01, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-110.29698F), (-2.0F), 1858.1202F, 2239.27F, (-2.0F), (-110.29698F), 2239.27F, 1312.6165F);
      assertNotNull(matrix3_0);
      assertEquals(2239.27F, matrix3_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals(2239.27F, matrix3_0.m11(), 0.01F);
      assertEquals(1312.6165F, matrix3_0.m22(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m02(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m20(), 0.01F);
      assertEquals((-110.29698F), matrix3_0.m10(), 0.01F);
      assertEquals(1858.1202F, matrix3_0.m01(), 0.01F);
      assertEquals(1312.6165F, matrix3_0.m22, 0.01F);
      assertEquals(1858.1202F, matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m20, 0.01F);
      assertEquals((-110.29698F), matrix3_0.m10, 0.01F);
      assertEquals((-110.29698F), matrix3_0.m02, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-2.0F), matrix3_0.m21, 0.01F);
      assertEquals(2239.27F, matrix3_0.m11, 0.01F);
      assertEquals(2239.27F, matrix3_0.m12, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-4.0F);
      floatArray0[1] = (-4.0F);
      floatArray0[4] = 0.017453292F;
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-4.0F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-4.0F), matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.017453292F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-4.0F), matrix3_1.m10(), 0.01F);
      assertEquals((-4.0F), matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.017453292F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.017453292F, matrix3_0.m11, 0.01F);
      assertEquals((-4.0F), matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals((-4.0F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.017453292F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-4.0F), matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals((-4.0F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertArrayEquals(new float[] {(-4.0F), (-4.0F), 0.0F, 0.0F, 0.017453292F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.invertAffine(matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-57.29578F), matrix3_0.m10(), 0.01F);
      assertEquals(57.29578F, matrix3_0.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.25F), matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-0.25F), matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals((-57.29578F), matrix3_2.m10(), 0.01F);
      assertEquals(57.29578F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-0.25F), matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(57.29578F, matrix3_0.m11, 0.01F);
      assertEquals((-57.29578F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals((-0.25F), matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(57.29578F, matrix3_2.m11, 0.01F);
      assertEquals((-57.29578F), matrix3_2.m10, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(-0.0F, matrix3_0.m00, 0.01F);
      assertEquals(-0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertNotNull(vector3_0);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IVector3) vector3_0, (IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.invertAffine(matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(Float.NaN, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m00, 0.01F);
      assertEquals(-0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(1.0E-4F, 1.0E-4F, 1.0E-4F, (-2929.2F), 491.86252F, (-2992.0F), 2366.5293F, 1.0E-4F, 1810.3224F);
      assertNotNull(matrix3_1);
      assertEquals(491.86252F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2366.5293F, matrix3_1.m02(), 0.01F);
      assertEquals((-2992.0F), matrix3_1.m21(), 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20(), 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals((-2992.0F), matrix3_1.m21, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m20, 0.01F);
      assertEquals(1810.3224F, matrix3_1.m22, 0.01F);
      assertEquals((-2929.2F), matrix3_1.m01, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m00, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m10, 0.01F);
      assertEquals(491.86252F, matrix3_1.m11, 0.01F);
      assertEquals(2366.5293F, matrix3_1.m02, 0.01F);
      
      matrix3_0.invertAffine(matrix3_0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-1.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      
      matrix3_0.m02 = (-2.0F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x, 0.01F);
      
      matrix3_0.m10 = 1728.435F;
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      
      boolean boolean0 = vector0.equals(matrix3_0);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x, 0.01F);
      assertFalse(boolean0);
      
      Matrix3 matrix3_1 = Matrix3.IDENTITY;
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.multAffine((IMatrix3) matrix3_1, matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m21(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1728.435F, matrix3_1.m10(), 0.01F);
      assertEquals(4.0F, matrix3_1.m20(), 0.01F);
      assertEquals(4.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_2.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m01(), 0.01F);
      assertEquals(1728.435F, matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals(1728.435F, matrix3_1.m10, 0.01F);
      assertEquals(4.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m21, 0.01F);
      assertEquals((-2.0F), matrix3_1.m00, 0.01F);
      assertEquals((-1.0F), matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(1728.435F, matrix3_2.m10, 0.01F);
      assertEquals(4.0F, matrix3_2.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m21, 0.01F);
      assertEquals((-2.0F), matrix3_2.m00, 0.01F);
      assertEquals((-1.0F), matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      
      Matrix3 matrix3_3 = new Matrix3(0.5F, (-946.126F), 0.0F, 586.9268F, (-1.0F), 3171.0027F, 0.0F, 586.9268F, 874.0F);
      assertNotNull(matrix3_3);
      assertFalse(matrix3_3.isAffine());
      assertEquals(586.9268F, matrix3_3.m01(), 0.01F);
      assertEquals(586.9268F, matrix3_3.m12(), 0.01F);
      assertEquals(874.0F, matrix3_3.m22(), 0.01F);
      assertEquals(0.5F, matrix3_3.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_3.m11(), 0.01F);
      assertEquals((-946.126F), matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(3171.0027F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertEquals(3171.0027F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(586.9268F, matrix3_3.m01, 0.01F);
      assertEquals(586.9268F, matrix3_3.m12, 0.01F);
      assertEquals(874.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.5F, matrix3_3.m00, 0.01F);
      assertEquals((-1.0F), matrix3_3.m11, 0.01F);
      assertEquals((-946.126F), matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      
      Vector vector1 = matrix3_3.extractScale(vector0);
      assertNotNull(vector1);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(946.1265F, vector0.y(), 0.01F);
      assertEquals(586.92706F, vector0.x(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(586.9268F, matrix3_3.m01(), 0.01F);
      assertEquals(586.9268F, matrix3_3.m12(), 0.01F);
      assertEquals(874.0F, matrix3_3.m22(), 0.01F);
      assertEquals(0.5F, matrix3_3.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_3.m11(), 0.01F);
      assertEquals((-946.126F), matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(3171.0027F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals(586.92706F, vector1.x(), 0.01F);
      assertEquals(946.1265F, vector1.y(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals(946.1265F, vector0.y, 0.01F);
      assertEquals(586.92706F, vector0.x, 0.01F);
      assertEquals(3171.0027F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(586.9268F, matrix3_3.m01, 0.01F);
      assertEquals(586.9268F, matrix3_3.m12, 0.01F);
      assertEquals(874.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.5F, matrix3_3.m00, 0.01F);
      assertEquals((-1.0F), matrix3_3.m11, 0.01F);
      assertEquals((-946.126F), matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(586.92706F, vector1.x, 0.01F);
      assertEquals(946.1265F, vector1.y, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(vector0, vector1);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_2);
      assertSame(vector1, vector0);
      
      Vector vector2 = matrix3_3.transformPointLocal(vector1);
      assertNotNull(vector2);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(346708.1F, vector0.y(), 0.01F);
      assertEquals((-894861.44F), vector0.x(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(586.9268F, matrix3_3.m01(), 0.01F);
      assertEquals(586.9268F, matrix3_3.m12(), 0.01F);
      assertEquals(874.0F, matrix3_3.m22(), 0.01F);
      assertEquals(0.5F, matrix3_3.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_3.m11(), 0.01F);
      assertEquals((-946.126F), matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(3171.0027F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals((-894861.44F), vector1.x(), 0.01F);
      assertEquals(346708.1F, vector1.y(), 0.01F);
      assertEquals((-894861.44F), vector2.x(), 0.01F);
      assertEquals(346708.1F, vector2.y(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals(346708.1F, vector0.y, 0.01F);
      assertEquals((-894861.44F), vector0.x, 0.01F);
      assertEquals(3171.0027F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(586.9268F, matrix3_3.m01, 0.01F);
      assertEquals(586.9268F, matrix3_3.m12, 0.01F);
      assertEquals(874.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.5F, matrix3_3.m00, 0.01F);
      assertEquals((-1.0F), matrix3_3.m11, 0.01F);
      assertEquals((-946.126F), matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(346708.1F, vector1.y, 0.01F);
      assertEquals((-894861.44F), vector1.x, 0.01F);
      assertEquals(346708.1F, vector2.y, 0.01F);
      assertEquals((-894861.44F), vector2.x, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(vector0, vector1);
      assertSame(vector0, vector2);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_2);
      assertSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertSame(vector2, vector0);
      assertSame(vector2, vector1);
      
      Vector vector3 = matrix3_3.transformPoint((IVector) vector1);
      assertNotNull(vector3);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(346708.1F, vector0.y(), 0.01F);
      assertEquals((-894861.44F), vector0.x(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(586.9268F, matrix3_3.m01(), 0.01F);
      assertEquals(586.9268F, matrix3_3.m12(), 0.01F);
      assertEquals(874.0F, matrix3_3.m22(), 0.01F);
      assertEquals(0.5F, matrix3_3.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_3.m11(), 0.01F);
      assertEquals((-946.126F), matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(3171.0027F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals((-894861.44F), vector1.x(), 0.01F);
      assertEquals(346708.1F, vector1.y(), 0.01F);
      assertEquals((-3.2847696E8F), vector3.x(), 0.01F);
      assertEquals((-5.25561728E8F), vector3.y(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(vector3.equals((Object)vector1));
      assertFalse(vector3.equals((Object)vector0));
      assertFalse(vector3.equals((Object)vector2));
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals(346708.1F, vector0.y, 0.01F);
      assertEquals((-894861.44F), vector0.x, 0.01F);
      assertEquals(3171.0027F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(586.9268F, matrix3_3.m01, 0.01F);
      assertEquals(586.9268F, matrix3_3.m12, 0.01F);
      assertEquals(874.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.5F, matrix3_3.m00, 0.01F);
      assertEquals((-1.0F), matrix3_3.m11, 0.01F);
      assertEquals((-946.126F), matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(346708.1F, vector1.y, 0.01F);
      assertEquals((-894861.44F), vector1.x, 0.01F);
      assertEquals((-5.25561728E8F), vector3.y, 0.01F);
      assertEquals((-3.2847696E8F), vector3.x, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(vector0, vector1);
      assertSame(vector0, vector2);
      assertNotSame(vector0, vector3);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_2);
      assertNotSame(vector1, vector3);
      assertSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertNotSame(vector3, vector1);
      assertNotSame(vector3, vector0);
      assertNotSame(vector3, vector2);
      
      Matrix3 matrix3_4 = matrix3_2.invertAffine(matrix3_1);
      assertNotNull(matrix3_4);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_4.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_4.m20(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertEquals(-0.0F, matrix3_1.m00, 0.01F);
      assertEquals(-0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m00, 0.01F);
      assertEquals(-0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_4.m20, 0.01F);
      assertEquals(-0.0F, matrix3_4.m00, 0.01F);
      assertEquals(-0.0F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(-0.0F, matrix3_4.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_4.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_4);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_2, matrix3_3);
      assertSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_4, matrix3_2);
      assertSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_0);
      
      Vector vector4 = matrix3_3.transformPointLocal(vector0);
      assertNotNull(vector4);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-3.2847696E8F), vector0.x(), 0.01F);
      assertEquals((-5.25561728E8F), vector0.y(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(586.9268F, matrix3_3.m01(), 0.01F);
      assertEquals(586.9268F, matrix3_3.m12(), 0.01F);
      assertEquals(874.0F, matrix3_3.m22(), 0.01F);
      assertEquals(0.5F, matrix3_3.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_3.m11(), 0.01F);
      assertEquals((-946.126F), matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(3171.0027F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals((-5.25561728E8F), vector4.y(), 0.01F);
      assertEquals((-3.2847696E8F), vector4.x(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertTrue(vector0.equals((Object)vector3));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_4));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertTrue(vector4.equals((Object)vector3));
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals((-5.25561728E8F), vector0.y, 0.01F);
      assertEquals((-3.2847696E8F), vector0.x, 0.01F);
      assertEquals(3171.0027F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(586.9268F, matrix3_3.m01, 0.01F);
      assertEquals(586.9268F, matrix3_3.m12, 0.01F);
      assertEquals(874.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.5F, matrix3_3.m00, 0.01F);
      assertEquals((-1.0F), matrix3_3.m11, 0.01F);
      assertEquals((-946.126F), matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals((-5.25561728E8F), vector4.y, 0.01F);
      assertEquals((-3.2847696E8F), vector4.x, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_4);
      assertSame(vector0, vector1);
      assertSame(vector0, vector2);
      assertNotSame(vector0, vector3);
      assertSame(vector0, vector4);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_4);
      assertNotSame(matrix3_3, matrix3_2);
      assertSame(vector4, vector0);
      assertNotSame(vector4, vector3);
      assertSame(vector4, vector2);
      assertSame(vector4, vector1);
      
      Vector vector5 = matrix3_0.transformVectorLocal(vector0);
      assertNotNull(vector5);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y(), 0.01F);
      assertEquals((-9.0774241E11F), vector0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector5.y(), 0.01F);
      assertEquals((-9.0774241E11F), vector5.x(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(vector0.equals((Object)vector3));
      assertFalse(vector5.equals((Object)vector3));
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector0.y, 0.01F);
      assertEquals((-9.0774241E11F), vector0.x, 0.01F);
      assertEquals((-9.0774241E11F), vector5.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector5.y, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_4);
      assertSame(vector0, vector1);
      assertSame(vector0, vector5);
      assertSame(vector0, vector2);
      assertNotSame(vector0, vector3);
      assertSame(vector0, vector4);
      assertNotSame(vector5, vector3);
      assertSame(vector5, vector4);
      assertSame(vector5, vector2);
      assertSame(vector5, vector1);
      assertSame(vector5, vector0);
      
      float float0 = matrix3_0.extractRotation();
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals((-1.5707964F), float0, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_4);
      
      Matrix3 matrix3_5 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_5);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(4.0F, matrix3_5.m20(), 0.01F);
      assertEquals((-2.0F), matrix3_5.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_5.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_5.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_5.m21(), 0.01F);
      assertEquals(0.0F, matrix3_5.m12(), 0.01F);
      assertEquals((-2.0F), matrix3_5.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_5.m01(), 0.01F);
      assertFalse(matrix3_5.isAffine());
      assertEquals(1728.435F, matrix3_5.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_5.equals((Object)matrix3_3));
      assertFalse(matrix3_5.equals((Object)matrix3_4));
      assertFalse(matrix3_5.equals((Object)matrix3_1));
      assertTrue(matrix3_5.equals((Object)matrix3_0));
      assertFalse(matrix3_5.equals((Object)matrix3_2));
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals(1728.435F, matrix3_5.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_5.m01, 0.01F);
      assertEquals((-2.0F), matrix3_5.m02, 0.01F);
      assertEquals(0.0F, matrix3_5.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_5.m21, 0.01F);
      assertEquals((-2.0F), matrix3_5.m00, 0.01F);
      assertEquals((-1.0F), matrix3_5.m11, 0.01F);
      assertEquals((-2.0F), matrix3_5.m22, 0.01F);
      assertEquals(4.0F, matrix3_5.m20, 0.01F);
      
      Vector3 vector3_0 = new Vector3(Float.NaN, 1728.435F, 1728.435F);
      assertNotNull(vector3_0);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(1728.435F, vector3_0.z(), 0.01F);
      assertEquals(1728.435F, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1728.435F, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(1728.435F, vector3_0.z, 0.01F);
      
      Vector3 vector3_1 = matrix3_0.transform((IVector3) vector3_0);
      assertNotNull(vector3_1);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(1728.435F, vector3_0.z(), 0.01F);
      assertEquals(1728.435F, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(1728.435F, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(1728.435F, vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(vector3_1, vector3_0);
      
      Vector3 vector3_2 = (Vector3)Vector3.MIN_VALUE;
      assertNotNull(vector3_2);
      assertEquals((-3.4028235E38F), vector3_2.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.x(), 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals((-3.4028235E38F), vector3_2.x, 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.z, 0.01F);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      
      Vector3 vector3_3 = matrix3_4.transform((IVector3) vector3_2, vector3_0);
      assertNotNull(vector3_3);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1728.435F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_3.z(), 0.01F);
      assertEquals(Float.NaN, vector3_3.x(), 0.01F);
      assertEquals(Float.NaN, vector3_3.y(), 0.01F);
      assertEquals(Float.NaN, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_4.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_4.m20(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_5));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_5));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_4.equals((Object)matrix3_5));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals((-2.0F), matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(1728.435F, matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.x, 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_3.x, 0.01F);
      assertEquals((-3.4028235E38F), vector3_3.z, 0.01F);
      assertEquals(Float.NaN, vector3_3.y, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertEquals(-0.0F, matrix3_1.m00, 0.01F);
      assertEquals(-0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m00, 0.01F);
      assertEquals(-0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_4.m20, 0.01F);
      assertEquals(-0.0F, matrix3_4.m00, 0.01F);
      assertEquals(-0.0F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(-0.0F, matrix3_4.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_4.m21, 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_3);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_0);
      assertNotSame(matrix3_1, matrix3_5);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_5);
      assertSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_4, matrix3_2);
      assertSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_5);
      assertNotSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(2516.3027F, 0.0F, 0.11274094F, (-5.5405045F), (-5.5405045F), 1.0F, 0.0F, (-5.5405045F), 2516.3027F);
      assertNotNull(matrix3_1);
      assertEquals(2516.3027F, matrix3_1.m00(), 0.01F);
      assertEquals(2516.3027F, matrix3_1.m22(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-5.5405045F), matrix3_1.m01(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m12(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.11274094F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.11274094F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(2516.3027F, matrix3_1.m00, 0.01F);
      assertEquals(2516.3027F, matrix3_1.m22, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m01, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m12, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.add((IMatrix3) matrix3_1, matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-4.5405045F), matrix3_1.m11(), 0.01F);
      assertEquals(2517.3027F, matrix3_1.m00(), 0.01F);
      assertEquals(2517.3027F, matrix3_1.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m21(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.11274094F, matrix3_1.m02(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m21(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals((-4.5405045F), matrix3_2.m11(), 0.01F);
      assertEquals(2517.3027F, matrix3_2.m00(), 0.01F);
      assertEquals(2517.3027F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(1.0F, matrix3_2.m12(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.11274094F, matrix3_2.m02(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.11274094F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m12, 0.01F);
      assertEquals(2517.3027F, matrix3_1.m00, 0.01F);
      assertEquals(2517.3027F, matrix3_1.m22, 0.01F);
      assertEquals((-4.5405045F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m10, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(1.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.11274094F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m10, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m21, 0.01F);
      assertEquals((-4.5405045F), matrix3_2.m11, 0.01F);
      assertEquals(2517.3027F, matrix3_2.m00, 0.01F);
      assertEquals(2517.3027F, matrix3_2.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      
      Matrix3 matrix3_3 = matrix3_2.invertAffine();
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-4.5405045F), matrix3_1.m11(), 0.01F);
      assertEquals(2517.3027F, matrix3_1.m00(), 0.01F);
      assertEquals(2517.3027F, matrix3_1.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m21(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(1.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.11274094F, matrix3_1.m02(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m21(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals((-4.5405045F), matrix3_2.m11(), 0.01F);
      assertEquals(2517.3027F, matrix3_2.m00(), 0.01F);
      assertEquals(2517.3027F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(1.0F, matrix3_2.m12(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.11274094F, matrix3_2.m02(), 0.01F);
      assertEquals((-0.0026857096F), matrix3_3.m20(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals((-1.2202398F), matrix3_3.m21(), 0.01F);
      assertEquals((-4.84741E-4F), matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals((-0.22023985F), matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(3.9725058E-4F, matrix3_3.m00(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.11274094F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(1.0F, matrix3_1.m12, 0.01F);
      assertEquals(2517.3027F, matrix3_1.m00, 0.01F);
      assertEquals(2517.3027F, matrix3_1.m22, 0.01F);
      assertEquals((-4.5405045F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m10, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(1.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.11274094F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m10, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m21, 0.01F);
      assertEquals((-4.5405045F), matrix3_2.m11, 0.01F);
      assertEquals(2517.3027F, matrix3_2.m00, 0.01F);
      assertEquals(2517.3027F, matrix3_2.m22, 0.01F);
      assertEquals((-4.84741E-4F), matrix3_3.m10, 0.01F);
      assertEquals((-0.22023985F), matrix3_3.m11, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertEquals((-1.2202398F), matrix3_3.m21, 0.01F);
      assertEquals(3.9725058E-4F, matrix3_3.m00, 0.01F);
      assertEquals((-0.0026857096F), matrix3_3.m20, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2516.3027F, 0.0F, 0.11274094F, (-5.5405045F), (-5.5405045F), 1.0F, 0.0F, (-5.5405045F), 2516.3027F);
      assertNotNull(matrix3_0);
      assertEquals(0.11274094F, matrix3_0.m20(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m01(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m12(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11(), 0.01F);
      assertEquals(2516.3027F, matrix3_0.m00(), 0.01F);
      assertEquals(2516.3027F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2516.3027F, matrix3_0.m00, 0.01F);
      assertEquals(2516.3027F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.11274094F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m01, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m12, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invertAffine();
      assertNotNull(matrix3_1);
      assertEquals(0.11274094F, matrix3_0.m20(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m01(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m12(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11(), 0.01F);
      assertEquals(2516.3027F, matrix3_0.m00(), 0.01F);
      assertEquals(2516.3027F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(3.9740844E-4F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-4.4804205E-5F), matrix3_1.m20(), 0.01F);
      assertEquals(0.18053378F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.18048897F), matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals((-3.9740844E-4F), matrix3_1.m01(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(2516.3027F, matrix3_0.m00, 0.01F);
      assertEquals(2516.3027F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.11274094F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m01, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m12, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11, 0.01F);
      assertEquals((-3.9740844E-4F), matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals((-4.4804205E-5F), matrix3_1.m20, 0.01F);
      assertEquals(3.9740844E-4F, matrix3_1.m00, 0.01F);
      assertEquals(0.18053378F, matrix3_1.m21, 0.01F);
      assertEquals((-0.18048897F), matrix3_1.m11, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation(2516.3027F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-0.11274094F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.11274094F, matrix3_0.m01(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.9936244F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.9936244F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-0.9936244F), matrix3_1.m00(), 0.01F);
      assertEquals((-0.9936244F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals((-0.11274094F), matrix3_1.m10(), 0.01F);
      assertEquals(0.11274094F, matrix3_1.m01(), 0.01F);
      assertEquals((-0.9936244F), matrix3_0.m00, 0.01F);
      assertEquals((-0.9936244F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-0.11274094F), matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.11274094F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-0.9936244F), matrix3_1.m00, 0.01F);
      assertEquals((-0.9936244F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.11274094F, matrix3_1.m01, 0.01F);
      assertEquals((-0.11274094F), matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.add((IMatrix3) matrix3_1, matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.22548188F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.22548188F), matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1.9872488F), matrix3_0.m00(), 0.01F);
      assertEquals((-1.9872488F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-1.9872488F), matrix3_1.m00(), 0.01F);
      assertEquals((-1.9872488F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(2.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.22548188F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-0.22548188F), matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-0.22548188F), matrix3_2.m01(), 0.01F);
      assertEquals(0.22548188F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals((-1.9872488F), matrix3_2.m00(), 0.01F);
      assertEquals((-1.9872488F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(2.0F, matrix3_2.m22(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-1.9872488F), matrix3_0.m00, 0.01F);
      assertEquals((-1.9872488F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.22548188F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-0.22548188F), matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1.9872488F), matrix3_1.m00, 0.01F);
      assertEquals((-1.9872488F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(2.0F, matrix3_1.m22, 0.01F);
      assertEquals((-0.22548188F), matrix3_1.m01, 0.01F);
      assertEquals(0.22548188F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals((-1.9872488F), matrix3_2.m00, 0.01F);
      assertEquals((-1.9872488F), matrix3_2.m11, 0.01F);
      assertEquals(2.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals((-0.22548188F), matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.22548188F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      
      Matrix3 matrix3_3 = matrix3_2.invertAffine();
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.22548188F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-0.22548188F), matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1.9872488F), matrix3_0.m00(), 0.01F);
      assertEquals((-1.9872488F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-1.9872488F), matrix3_1.m00(), 0.01F);
      assertEquals((-1.9872488F), matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(2.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.22548188F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-0.22548188F), matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-0.22548188F), matrix3_2.m01(), 0.01F);
      assertEquals(0.22548188F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals((-1.9872488F), matrix3_2.m00(), 0.01F);
      assertEquals((-1.9872488F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(2.0F, matrix3_2.m22(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-0.056370478F), matrix3_3.m10(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals((-0.49681225F), matrix3_3.m00(), 0.01F);
      assertEquals((-0.49681225F), matrix3_3.m11(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(0.056370478F, matrix3_3.m01(), 0.01F);
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertEquals((-1.9872488F), matrix3_0.m00, 0.01F);
      assertEquals((-1.9872488F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.22548188F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-0.22548188F), matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1.9872488F), matrix3_1.m00, 0.01F);
      assertEquals((-1.9872488F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(2.0F, matrix3_1.m22, 0.01F);
      assertEquals((-0.22548188F), matrix3_1.m01, 0.01F);
      assertEquals(0.22548188F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals((-1.9872488F), matrix3_2.m00, 0.01F);
      assertEquals((-1.9872488F), matrix3_2.m11, 0.01F);
      assertEquals(2.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals((-0.22548188F), matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.22548188F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals((-0.49681225F), matrix3_3.m00, 0.01F);
      assertEquals((-0.49681225F), matrix3_3.m11, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.056370478F, matrix3_3.m01, 0.01F);
      assertEquals((-0.056370478F), matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IVector3) vector3_0, (IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.invertAffine();
      assertNotNull(matrix3_2);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-3659.0F), (-3.4028235E38F), 0.73611104F, (-3659.0F), 3.9637086F, 0.73611104F, 3.9637086F, 0.73611104F, (-3659.0F));
      assertNotNull(matrix3_0);
      assertEquals(3.9637086F, matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(3.9637086F, matrix3_0.m02(), 0.01F);
      assertEquals((-3659.0F), matrix3_0.m01(), 0.01F);
      assertEquals((-3659.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-3659.0F), matrix3_0.m22(), 0.01F);
      assertEquals(0.73611104F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.73611104F, matrix3_0.m12(), 0.01F);
      assertEquals(0.73611104F, matrix3_0.m21(), 0.01F);
      assertEquals(0.73611104F, matrix3_0.m12, 0.01F);
      assertEquals(0.73611104F, matrix3_0.m21, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals(3.9637086F, matrix3_0.m11, 0.01F);
      assertEquals((-3659.0F), matrix3_0.m00, 0.01F);
      assertEquals((-3659.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.73611104F, matrix3_0.m20, 0.01F);
      assertEquals((-3659.0F), matrix3_0.m01, 0.01F);
      assertEquals(3.9637086F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invertAffine();
      assertNotNull(matrix3_1);
      assertEquals(3.9637086F, matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(3.9637086F, matrix3_0.m02(), 0.01F);
      assertEquals((-3659.0F), matrix3_0.m01(), 0.01F);
      assertEquals((-3659.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-3659.0F), matrix3_0.m22(), 0.01F);
      assertEquals(0.73611104F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.73611104F, matrix3_0.m12(), 0.01F);
      assertEquals(0.73611104F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.73611104F, matrix3_0.m12, 0.01F);
      assertEquals(0.73611104F, matrix3_0.m21, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals(3.9637086F, matrix3_0.m11, 0.01F);
      assertEquals((-3659.0F), matrix3_0.m00, 0.01F);
      assertEquals((-3659.0F), matrix3_0.m22, 0.01F);
      assertEquals(0.73611104F, matrix3_0.m20, 0.01F);
      assertEquals((-3659.0F), matrix3_0.m01, 0.01F);
      assertEquals(3.9637086F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(-0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToReflection(3357.2761F, 1.0F, 1.0F);
      assertNotNull(matrix3_1);
      assertEquals((-6714.5522F), matrix3_0.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m21(), 0.01F);
      assertEquals((-2.2542604E7F), matrix3_0.m00(), 0.01F);
      assertEquals((-6714.5522F), matrix3_0.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m12(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-6714.5522F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-6714.5522F), matrix3_0.m20(), 0.01F);
      assertEquals((-2.2542604E7F), matrix3_1.m00(), 0.01F);
      assertEquals((-6714.5522F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-2.0F), matrix3_1.m21(), 0.01F);
      assertEquals((-6714.5522F), matrix3_1.m01(), 0.01F);
      assertEquals((-6714.5522F), matrix3_1.m10(), 0.01F);
      assertEquals((-6714.5522F), matrix3_1.m20(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m22(), 0.01F);
      assertEquals((-1.0F), matrix3_1.m11(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m12(), 0.01F);
      assertEquals((-6714.5522F), matrix3_0.m20, 0.01F);
      assertEquals((-6714.5522F), matrix3_0.m10, 0.01F);
      assertEquals((-2.2542604E7F), matrix3_0.m00, 0.01F);
      assertEquals((-6714.5522F), matrix3_0.m02, 0.01F);
      assertEquals((-2.0F), matrix3_0.m21, 0.01F);
      assertEquals((-6714.5522F), matrix3_0.m01, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-1.0F), matrix3_0.m22, 0.01F);
      assertEquals((-2.0F), matrix3_0.m12, 0.01F);
      assertEquals((-2.0F), matrix3_1.m12, 0.01F);
      assertEquals((-1.0F), matrix3_1.m11, 0.01F);
      assertEquals((-1.0F), matrix3_1.m22, 0.01F);
      assertEquals((-6714.5522F), matrix3_1.m20, 0.01F);
      assertEquals((-6714.5522F), matrix3_1.m01, 0.01F);
      assertEquals((-6714.5522F), matrix3_1.m02, 0.01F);
      assertEquals((-6714.5522F), matrix3_1.m10, 0.01F);
      assertEquals((-2.0F), matrix3_1.m21, 0.01F);
      assertEquals((-2.2542604E7F), matrix3_1.m00, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.invert(matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(1.3308127E-7F, matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2.978604E-4F), matrix3_0.m01(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_0.m02(), 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_0.m12(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_0.m10(), 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_0.m21(), 0.01F);
      assertEquals(0.99999964F, matrix3_0.m22(), 0.01F);
      assertEquals(0.99999964F, matrix3_0.m11(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_0.m20(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-1.7744169E-7F), matrix3_1.m12(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_1.m10(), 0.01F);
      assertEquals(0.99999964F, matrix3_1.m22(), 0.01F);
      assertEquals(0.99999964F, matrix3_1.m11(), 0.01F);
      assertEquals(1.3308127E-7F, matrix3_1.m00(), 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_1.m21(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_1.m02(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_1.m01(), 0.01F);
      assertEquals(1.3308127E-7F, matrix3_2.m00(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_2.m20(), 0.01F);
      assertEquals(0.99999964F, matrix3_2.m22(), 0.01F);
      assertEquals(0.99999964F, matrix3_2.m11(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_2.m02(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_2.m10(), 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_2.m12(), 0.01F);
      assertEquals((-2.978604E-4F), matrix3_2.m01(), 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_2.m21(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-1.7744169E-7F), matrix3_0.m12, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_0.m10, 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_0.m21, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_0.m02, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_0.m01, 0.01F);
      assertEquals(0.99999964F, matrix3_0.m11, 0.01F);
      assertEquals(0.99999964F, matrix3_0.m22, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_0.m20, 0.01F);
      assertEquals(1.3308127E-7F, matrix3_0.m00, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_1.m10, 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_1.m21, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_1.m01, 0.01F);
      assertEquals(0.99999964F, matrix3_1.m11, 0.01F);
      assertEquals(0.99999964F, matrix3_1.m22, 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_1.m12, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_1.m02, 0.01F);
      assertEquals(1.3308127E-7F, matrix3_1.m00, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_1.m20, 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_2.m21, 0.01F);
      assertEquals((-1.7744169E-7F), matrix3_2.m12, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_2.m01, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_2.m10, 0.01F);
      assertEquals(1.3308127E-7F, matrix3_2.m00, 0.01F);
      assertEquals(0.99999964F, matrix3_2.m11, 0.01F);
      assertEquals(0.99999964F, matrix3_2.m22, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_2.m02, 0.01F);
      assertEquals((-2.978604E-4F), matrix3_2.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IVector3) vector3_0, (IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.invert(matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(Float.NaN, matrix3_0.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(Float.NaN, matrix3_0.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m10(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m00(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(Float.NaN, matrix3_2.m01(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m12(), 0.01F);
      assertEquals(Float.NaN, matrix3_2.m02(), 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m01, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m12, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m11, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m21, 0.01F);
      assertEquals(Float.NaN, matrix3_2.m20, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.invert(matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(-0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(-0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      
      Vector vector0 = new Vector(6.0F, 1.0F);
      assertNotNull(vector0);
      assertEquals(6.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(6.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      
      Matrix3 matrix3_3 = matrix3_1.setTranslation((IVector) vector0);
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(6.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(6.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(6.0F, matrix3_3.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(1.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(6.0F, matrix3_1.m20, 0.01F);
      assertEquals(6.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(1.0F, matrix3_3.m21, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(6.0F, matrix3_3.m20, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_1);
      assertSame(matrix3_3, matrix3_2);
      
      Matrix3 matrix3_4 = matrix3_2.lerp((IMatrix3) matrix3_1, (-612.4F), matrix3_3);
      assertNotNull(matrix3_4);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(6.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(1.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(6.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(6.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(6.0F, matrix3_3.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(1.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(6.0F, matrix3_4.m20(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertEquals(1.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(1.0F, matrix3_4.m11(), 0.01F);
      assertEquals(1.0F, matrix3_4.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m12(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(6.0F, matrix3_1.m20, 0.01F);
      assertEquals(6.0F, matrix3_2.m20, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(1.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(6.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(1.0F, matrix3_3.m21, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(6.0F, matrix3_3.m20, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(-0.0F, matrix3_4.m10, 0.01F);
      assertEquals(1.0F, matrix3_4.m21, 0.01F);
      assertEquals(1.0F, matrix3_4.m00, 0.01F);
      assertEquals(1.0F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(-0.0F, matrix3_4.m01, 0.01F);
      assertEquals(-0.0F, matrix3_4.m12, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(6.0F, matrix3_4.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_4);
      assertSame(matrix3_1, matrix3_3);
      assertSame(matrix3_2, matrix3_3);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_3, matrix3_4);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_1);
      assertSame(matrix3_3, matrix3_2);
      assertSame(matrix3_4, matrix3_2);
      assertSame(matrix3_4, matrix3_1);
      assertSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_0);
      
      Matrix3 matrix3_5 = new Matrix3(matrix3_1);
      assertNotNull(matrix3_5);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(6.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(6.0F, matrix3_5.m20(), 0.01F);
      assertTrue(matrix3_5.isAffine());
      assertEquals(1.0F, matrix3_5.m00(), 0.01F);
      assertEquals(1.0F, matrix3_5.m22(), 0.01F);
      assertEquals(1.0F, matrix3_5.m11(), 0.01F);
      assertEquals(1.0F, matrix3_5.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m10(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m12(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_5.equals((Object)matrix3_4));
      assertTrue(matrix3_5.equals((Object)matrix3_2));
      assertTrue(matrix3_5.equals((Object)matrix3_3));
      assertTrue(matrix3_5.equals((Object)matrix3_1));
      assertFalse(matrix3_5.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(6.0F, matrix3_1.m20, 0.01F);
      assertEquals(-0.0F, matrix3_5.m10, 0.01F);
      assertEquals(1.0F, matrix3_5.m21, 0.01F);
      assertEquals(1.0F, matrix3_5.m00, 0.01F);
      assertEquals(1.0F, matrix3_5.m11, 0.01F);
      assertEquals(1.0F, matrix3_5.m22, 0.01F);
      assertEquals(-0.0F, matrix3_5.m01, 0.01F);
      assertEquals(-0.0F, matrix3_5.m12, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals(6.0F, matrix3_5.m20, 0.01F);
      
      float float0 = matrix3_5.element(2, 2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(6.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(6.0F, matrix3_5.m20(), 0.01F);
      assertTrue(matrix3_5.isAffine());
      assertEquals(1.0F, matrix3_5.m00(), 0.01F);
      assertEquals(1.0F, matrix3_5.m22(), 0.01F);
      assertEquals(1.0F, matrix3_5.m11(), 0.01F);
      assertEquals(1.0F, matrix3_5.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m10(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m12(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_5));
      assertTrue(matrix3_5.equals((Object)matrix3_4));
      assertTrue(matrix3_5.equals((Object)matrix3_2));
      assertTrue(matrix3_5.equals((Object)matrix3_3));
      assertTrue(matrix3_5.equals((Object)matrix3_1));
      assertFalse(matrix3_5.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(6.0F, matrix3_1.m20, 0.01F);
      assertEquals(-0.0F, matrix3_5.m10, 0.01F);
      assertEquals(1.0F, matrix3_5.m21, 0.01F);
      assertEquals(1.0F, matrix3_5.m00, 0.01F);
      assertEquals(1.0F, matrix3_5.m11, 0.01F);
      assertEquals(1.0F, matrix3_5.m22, 0.01F);
      assertEquals(-0.0F, matrix3_5.m01, 0.01F);
      assertEquals(-0.0F, matrix3_5.m12, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals(6.0F, matrix3_5.m20, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_5);
      assertSame(matrix3_1, matrix3_4);
      assertSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_5, matrix3_1);
      assertNotSame(matrix3_5, matrix3_3);
      assertNotSame(matrix3_5, matrix3_4);
      assertNotSame(matrix3_5, matrix3_2);
      assertNotSame(matrix3_5, matrix3_0);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      
      Matrix3 matrix3_6 = new Matrix3(matrix3_3);
      assertNotNull(matrix3_6);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(6.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(6.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(6.0F, matrix3_3.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(1.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(-0.0F, matrix3_6.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_6.m12(), 0.01F);
      assertEquals(0.0F, matrix3_6.m02(), 0.01F);
      assertEquals(1.0F, matrix3_6.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_6.m10(), 0.01F);
      assertEquals(1.0F, matrix3_6.m00(), 0.01F);
      assertEquals(1.0F, matrix3_6.m22(), 0.01F);
      assertEquals(1.0F, matrix3_6.m11(), 0.01F);
      assertEquals(6.0F, matrix3_6.m20(), 0.01F);
      assertTrue(matrix3_6.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_5));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertTrue(matrix3_3.equals((Object)matrix3_5));
      assertTrue(matrix3_6.equals((Object)matrix3_5));
      assertTrue(matrix3_6.equals((Object)matrix3_1));
      assertTrue(matrix3_6.equals((Object)matrix3_4));
      assertFalse(matrix3_6.equals((Object)matrix3_0));
      assertTrue(matrix3_6.equals((Object)matrix3_3));
      assertTrue(matrix3_6.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(6.0F, matrix3_1.m20, 0.01F);
      assertEquals(6.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(1.0F, matrix3_3.m21, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(6.0F, matrix3_3.m20, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(6.0F, matrix3_6.m20, 0.01F);
      assertEquals(1.0F, matrix3_6.m00, 0.01F);
      assertEquals(1.0F, matrix3_6.m11, 0.01F);
      assertEquals(1.0F, matrix3_6.m22, 0.01F);
      assertEquals(-0.0F, matrix3_6.m10, 0.01F);
      assertEquals(1.0F, matrix3_6.m21, 0.01F);
      assertEquals(0.0F, matrix3_6.m02, 0.01F);
      assertEquals(-0.0F, matrix3_6.m01, 0.01F);
      assertEquals(-0.0F, matrix3_6.m12, 0.01F);
      
      Matrix3 matrix3_7 = matrix3_5.setTranslation(1653.7F, (-2015.19F));
      assertNotNull(matrix3_7);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(6.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1653.7F, matrix3_5.m20(), 0.01F);
      assertTrue(matrix3_5.isAffine());
      assertEquals((-2015.19F), matrix3_5.m21(), 0.01F);
      assertEquals(1.0F, matrix3_5.m00(), 0.01F);
      assertEquals(1.0F, matrix3_5.m22(), 0.01F);
      assertEquals(1.0F, matrix3_5.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m10(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m12(), 0.01F);
      assertEquals(1653.7F, matrix3_7.m20(), 0.01F);
      assertEquals((-2015.19F), matrix3_7.m21(), 0.01F);
      assertEquals(1.0F, matrix3_7.m00(), 0.01F);
      assertEquals(1.0F, matrix3_7.m22(), 0.01F);
      assertEquals(1.0F, matrix3_7.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_7.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_7.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_7.m10(), 0.01F);
      assertTrue(matrix3_7.isAffine());
      assertEquals(0.0F, matrix3_7.m02(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_0.equals((Object)matrix3_6));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_6));
      assertFalse(matrix3_1.equals((Object)matrix3_5));
      assertFalse(matrix3_5.equals((Object)matrix3_1));
      assertFalse(matrix3_5.equals((Object)matrix3_3));
      assertFalse(matrix3_5.equals((Object)matrix3_4));
      assertFalse(matrix3_5.equals((Object)matrix3_6));
      assertFalse(matrix3_5.equals((Object)matrix3_2));
      assertFalse(matrix3_5.equals((Object)matrix3_0));
      assertFalse(matrix3_7.equals((Object)matrix3_3));
      assertFalse(matrix3_7.equals((Object)matrix3_1));
      assertFalse(matrix3_7.equals((Object)matrix3_6));
      assertFalse(matrix3_7.equals((Object)matrix3_4));
      assertFalse(matrix3_7.equals((Object)matrix3_0));
      assertFalse(matrix3_7.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(6.0F, matrix3_1.m20, 0.01F);
      assertEquals(-0.0F, matrix3_5.m10, 0.01F);
      assertEquals(1.0F, matrix3_5.m00, 0.01F);
      assertEquals(1.0F, matrix3_5.m11, 0.01F);
      assertEquals(1.0F, matrix3_5.m22, 0.01F);
      assertEquals(-0.0F, matrix3_5.m01, 0.01F);
      assertEquals(-0.0F, matrix3_5.m12, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals(1653.7F, matrix3_5.m20, 0.01F);
      assertEquals((-2015.19F), matrix3_5.m21, 0.01F);
      assertEquals(-0.0F, matrix3_7.m10, 0.01F);
      assertEquals(-0.0F, matrix3_7.m01, 0.01F);
      assertEquals(-0.0F, matrix3_7.m12, 0.01F);
      assertEquals(1.0F, matrix3_7.m00, 0.01F);
      assertEquals(1.0F, matrix3_7.m11, 0.01F);
      assertEquals(1.0F, matrix3_7.m22, 0.01F);
      assertEquals(0.0F, matrix3_7.m02, 0.01F);
      assertEquals(1653.7F, matrix3_7.m20, 0.01F);
      assertEquals((-2015.19F), matrix3_7.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_7);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_6);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_6);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_5);
      assertSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_1, matrix3_7);
      assertSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_5, matrix3_1);
      assertNotSame(matrix3_5, matrix3_3);
      assertNotSame(matrix3_5, matrix3_4);
      assertNotSame(matrix3_5, matrix3_6);
      assertNotSame(matrix3_5, matrix3_2);
      assertSame(matrix3_5, matrix3_7);
      assertNotSame(matrix3_5, matrix3_0);
      assertNotSame(matrix3_7, matrix3_3);
      assertNotSame(matrix3_7, matrix3_1);
      assertNotSame(matrix3_7, matrix3_6);
      assertSame(matrix3_7, matrix3_5);
      assertNotSame(matrix3_7, matrix3_4);
      assertNotSame(matrix3_7, matrix3_0);
      assertNotSame(matrix3_7, matrix3_2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(1015.22986F, 1015.22986F, 1015.22986F, 0.5F, 0.5F, 1015.22986F, (-1351.3282F), 114.10205F, (-1351.3282F));
      assertNotNull(matrix3_0);
      assertEquals(0.5F, matrix3_0.m01(), 0.01F);
      assertEquals(0.5F, matrix3_0.m11(), 0.01F);
      assertEquals(1015.22986F, matrix3_0.m00(), 0.01F);
      assertEquals(114.10205F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1015.22986F, matrix3_0.m21(), 0.01F);
      assertEquals(1015.22986F, matrix3_0.m10(), 0.01F);
      assertEquals((-1351.3282F), matrix3_0.m22(), 0.01F);
      assertEquals((-1351.3282F), matrix3_0.m02(), 0.01F);
      assertEquals(1015.22986F, matrix3_0.m20(), 0.01F);
      assertEquals(1015.22986F, matrix3_0.m20, 0.01F);
      assertEquals(0.5F, matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m11, 0.01F);
      assertEquals(1015.22986F, matrix3_0.m10, 0.01F);
      assertEquals(1015.22986F, matrix3_0.m21, 0.01F);
      assertEquals(1015.22986F, matrix3_0.m00, 0.01F);
      assertEquals((-1351.3282F), matrix3_0.m02, 0.01F);
      assertEquals((-1351.3282F), matrix3_0.m22, 0.01F);
      assertEquals(114.10205F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invert(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(9.854839E-4F, matrix3_0.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(7.717979E-5F, matrix3_0.m00(), 0.01F);
      assertEquals(9.083042E-4F, matrix3_0.m01(), 0.01F);
      assertEquals(6.8239344E-4F, matrix3_0.m21(), 0.01F);
      assertEquals((-4.8535014E-7F), matrix3_0.m02(), 0.01F);
      assertEquals((-6.8239344E-4F), matrix3_0.m20(), 0.01F);
      assertEquals((-9.854839E-4F), matrix3_0.m10(), 0.01F);
      assertEquals((-6.8239344E-4F), matrix3_1.m20(), 0.01F);
      assertEquals(9.083042E-4F, matrix3_1.m01(), 0.01F);
      assertEquals((-4.8535014E-7F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(-0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(7.717979E-5F, matrix3_1.m00(), 0.01F);
      assertEquals((-9.854839E-4F), matrix3_1.m10(), 0.01F);
      assertEquals(6.8239344E-4F, matrix3_1.m21(), 0.01F);
      assertEquals(9.854839E-4F, matrix3_1.m12(), 0.01F);
      assertEquals((-4.8535014E-7F), matrix3_0.m02, 0.01F);
      assertEquals((-6.8239344E-4F), matrix3_0.m20, 0.01F);
      assertEquals(9.854839E-4F, matrix3_0.m12, 0.01F);
      assertEquals((-9.854839E-4F), matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m11, 0.01F);
      assertEquals(-0.0F, matrix3_0.m22, 0.01F);
      assertEquals(6.8239344E-4F, matrix3_0.m21, 0.01F);
      assertEquals(7.717979E-5F, matrix3_0.m00, 0.01F);
      assertEquals(9.083042E-4F, matrix3_0.m01, 0.01F);
      assertEquals(6.8239344E-4F, matrix3_1.m21, 0.01F);
      assertEquals(7.717979E-5F, matrix3_1.m00, 0.01F);
      assertEquals(-0.0F, matrix3_1.m11, 0.01F);
      assertEquals(-0.0F, matrix3_1.m22, 0.01F);
      assertEquals((-6.8239344E-4F), matrix3_1.m20, 0.01F);
      assertEquals(9.083042E-4F, matrix3_1.m01, 0.01F);
      assertEquals(9.854839E-4F, matrix3_1.m12, 0.01F);
      assertEquals((-4.8535014E-7F), matrix3_1.m02, 0.01F);
      assertEquals((-9.854839E-4F), matrix3_1.m10, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2670.6924F, (-2929.2F), (-2274.6829F), 1810.3224F, (-2929.2F), 0.0F, (-2274.6829F), 0.0F, 1.0E-4F);
      assertNotNull(matrix3_0);
      assertEquals(2670.6924F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02, 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invert();
      assertNotNull(matrix3_1);
      assertEquals(2670.6924F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.413901E-4F), matrix3_1.m11(), 0.01F);
      assertEquals((-1.1944424E-11F), matrix3_1.m01(), 0.01F);
      assertEquals((-2.7169776E-4F), matrix3_1.m21(), 0.01F);
      assertEquals((-4.3962174E-4F), matrix3_1.m20(), 0.01F);
      assertEquals((-1.9326726E-11F), matrix3_1.m00(), 0.01F);
      assertEquals(1.9326726E-11F, matrix3_1.m10(), 0.01F);
      assertEquals((-4.3962174E-4F), matrix3_1.m02(), 0.01F);
      assertEquals((-1.6628137E-4F), matrix3_1.m22(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(4.3962174E-4F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02, 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m11, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10, 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(4.3962174E-4F, matrix3_1.m12, 0.01F);
      assertEquals((-4.3962174E-4F), matrix3_1.m02, 0.01F);
      assertEquals((-1.1944424E-11F), matrix3_1.m01, 0.01F);
      assertEquals((-3.413901E-4F), matrix3_1.m11, 0.01F);
      assertEquals((-2.7169776E-4F), matrix3_1.m21, 0.01F);
      assertEquals((-4.3962174E-4F), matrix3_1.m20, 0.01F);
      assertEquals(1.9326726E-11F, matrix3_1.m10, 0.01F);
      assertEquals((-1.6628137E-4F), matrix3_1.m22, 0.01F);
      assertEquals((-1.9326726E-11F), matrix3_1.m00, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-0.5768893F), (-1200.283F), 1498.6F, (-0.5768893F), (-0.5768893F), 1498.6F, (-3.4028235E38F), 2997.6106F, (-3.4028235E38F));
      assertNotNull(matrix3_0);
      assertEquals((-1200.283F), matrix3_0.m10(), 0.01F);
      assertEquals(1498.6F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m01(), 0.01F);
      assertEquals(2997.6106F, matrix3_0.m12(), 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-3.4028235E38F), matrix3_0.m22(), 0.01F);
      assertEquals(1498.6F, matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m02(), 0.01F);
      assertEquals(2997.6106F, matrix3_0.m12, 0.01F);
      assertEquals(1498.6F, matrix3_0.m21, 0.01F);
      assertEquals((-1200.283F), matrix3_0.m10, 0.01F);
      assertEquals(1498.6F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m02, 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m00, 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m11, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m22, 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m01, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.add((IMatrix3) matrix3_1, matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals((-1200.283F), matrix3_0.m10(), 0.01F);
      assertEquals(1498.6F, matrix3_0.m20(), 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m01(), 0.01F);
      assertEquals(2997.6106F, matrix3_0.m12(), 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m00(), 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-3.4028235E38F), matrix3_0.m22(), 0.01F);
      assertEquals(1498.6F, matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m02(), 0.01F);
      assertEquals(0.42311072F, matrix3_1.m00(), 0.01F);
      assertEquals(0.42311072F, matrix3_1.m11(), 0.01F);
      assertEquals(2997.6106F, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1498.6F, matrix3_1.m02(), 0.01F);
      assertEquals((-1200.283F), matrix3_1.m01(), 0.01F);
      assertEquals((-0.5768893F), matrix3_1.m10(), 0.01F);
      assertEquals(1498.6F, matrix3_1.m12(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m22(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m20(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.42311072F, matrix3_2.m00(), 0.01F);
      assertEquals(0.42311072F, matrix3_2.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m22(), 0.01F);
      assertEquals(2997.6106F, matrix3_2.m21(), 0.01F);
      assertEquals(1498.6F, matrix3_2.m02(), 0.01F);
      assertEquals((-1200.283F), matrix3_2.m01(), 0.01F);
      assertEquals((-0.5768893F), matrix3_2.m10(), 0.01F);
      assertEquals(1498.6F, matrix3_2.m12(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(2997.6106F, matrix3_0.m12, 0.01F);
      assertEquals(1498.6F, matrix3_0.m21, 0.01F);
      assertEquals((-1200.283F), matrix3_0.m10, 0.01F);
      assertEquals(1498.6F, matrix3_0.m20, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m02, 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m00, 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m11, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m22, 0.01F);
      assertEquals((-0.5768893F), matrix3_0.m01, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m22, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m20, 0.01F);
      assertEquals(0.42311072F, matrix3_1.m00, 0.01F);
      assertEquals(0.42311072F, matrix3_1.m11, 0.01F);
      assertEquals(2997.6106F, matrix3_1.m21, 0.01F);
      assertEquals(1498.6F, matrix3_1.m12, 0.01F);
      assertEquals((-0.5768893F), matrix3_1.m10, 0.01F);
      assertEquals((-1200.283F), matrix3_1.m01, 0.01F);
      assertEquals(1498.6F, matrix3_1.m02, 0.01F);
      assertEquals(0.42311072F, matrix3_2.m00, 0.01F);
      assertEquals(0.42311072F, matrix3_2.m11, 0.01F);
      assertEquals(2997.6106F, matrix3_2.m21, 0.01F);
      assertEquals((-0.5768893F), matrix3_2.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m22, 0.01F);
      assertEquals(1498.6F, matrix3_2.m12, 0.01F);
      assertEquals((-1200.283F), matrix3_2.m01, 0.01F);
      assertEquals(1498.6F, matrix3_2.m02, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_1);
      
      Matrix3 matrix3_3 = matrix3_1.invert();
      assertNotNull(matrix3_3);
      assertEquals(0.42311072F, matrix3_1.m00(), 0.01F);
      assertEquals(0.42311072F, matrix3_1.m11(), 0.01F);
      assertEquals(2997.6106F, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(1498.6F, matrix3_1.m02(), 0.01F);
      assertEquals((-1200.283F), matrix3_1.m01(), 0.01F);
      assertEquals((-0.5768893F), matrix3_1.m10(), 0.01F);
      assertEquals(1498.6F, matrix3_1.m12(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m22(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals(Float.NaN, matrix3_3.m21(), 0.01F);
      assertEquals(Float.NaN, matrix3_3.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m00(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m22(), 0.01F);
      assertEquals(Float.NaN, matrix3_3.m11(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(Float.NaN, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertEquals((-3.4028235E38F), matrix3_1.m22, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_1.m20, 0.01F);
      assertEquals(0.42311072F, matrix3_1.m00, 0.01F);
      assertEquals(0.42311072F, matrix3_1.m11, 0.01F);
      assertEquals(2997.6106F, matrix3_1.m21, 0.01F);
      assertEquals(1498.6F, matrix3_1.m12, 0.01F);
      assertEquals((-0.5768893F), matrix3_1.m10, 0.01F);
      assertEquals((-1200.283F), matrix3_1.m01, 0.01F);
      assertEquals(1498.6F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_3.m02, 0.01F);
      assertEquals(Float.NaN, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(-0.0F, matrix3_3.m00, 0.01F);
      assertEquals(Float.NaN, matrix3_3.m11, 0.01F);
      assertEquals(-0.0F, matrix3_3.m22, 0.01F);
      assertEquals(Float.NaN, matrix3_3.m10, 0.01F);
      assertEquals(Float.NaN, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertNotSame(matrix3_1, matrix3_3);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-675.0859F), (-620.689F), 0.0F, (-495.50452F), 1.0E-4F, (-675.0859F), (-495.50452F), (-1090.0F), 0.0F);
      assertNotNull(matrix3_0);
      assertEquals((-495.50452F), matrix3_0.m01(), 0.01F);
      assertEquals((-495.50452F), matrix3_0.m02(), 0.01F);
      assertEquals((-675.0859F), matrix3_0.m00(), 0.01F);
      assertEquals((-1090.0F), matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-675.0859F), matrix3_0.m21(), 0.01F);
      assertEquals((-620.689F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0E-4F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-620.689F), matrix3_0.m10, 0.01F);
      assertEquals((-495.50452F), matrix3_0.m02, 0.01F);
      assertEquals((-495.50452F), matrix3_0.m01, 0.01F);
      assertEquals((-675.0859F), matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals((-675.0859F), matrix3_0.m00, 0.01F);
      assertEquals((-1090.0F), matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invert();
      assertNotNull(matrix3_1);
      assertEquals((-495.50452F), matrix3_0.m01(), 0.01F);
      assertEquals((-495.50452F), matrix3_0.m02(), 0.01F);
      assertEquals((-675.0859F), matrix3_0.m00(), 0.01F);
      assertEquals((-1090.0F), matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-675.0859F), matrix3_0.m21(), 0.01F);
      assertEquals((-620.689F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0E-4F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.001449228F, matrix3_1.m20(), 0.01F);
      assertEquals((-0.0025450082F), matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0018680041F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0011569385F, matrix3_1.m01(), 0.01F);
      assertEquals((-0.0015762376F), matrix3_1.m21(), 0.01F);
      assertEquals((-0.001481293F), matrix3_1.m12(), 0.01F);
      assertEquals((-0.0010637153F), matrix3_1.m22(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(1.0E-4F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals((-620.689F), matrix3_0.m10, 0.01F);
      assertEquals((-495.50452F), matrix3_0.m02, 0.01F);
      assertEquals((-495.50452F), matrix3_0.m01, 0.01F);
      assertEquals((-675.0859F), matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals((-675.0859F), matrix3_0.m00, 0.01F);
      assertEquals((-1090.0F), matrix3_0.m12, 0.01F);
      assertEquals(0.0011569385F, matrix3_1.m01, 0.01F);
      assertEquals((-0.0015762376F), matrix3_1.m21, 0.01F);
      assertEquals((-0.001481293F), matrix3_1.m12, 0.01F);
      assertEquals(0.0018680041F, matrix3_1.m02, 0.01F);
      assertEquals((-0.0010637153F), matrix3_1.m22, 0.01F);
      assertEquals((-0.0025450082F), matrix3_1.m00, 0.01F);
      assertEquals(0.001449228F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invert();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(-0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(-0.0F, matrix3_1.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = Matrix3.IDENTITY;
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = matrix3_1.transformPoint((IVector) vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      
      Vector vector2 = matrix3_1.transformPoint((IVector) vector1, vector1);
      assertNotNull(vector2);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, vector2.y(), 0.01F);
      assertEquals(0.0F, vector2.x(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector2.equals((Object)vector0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector2.y, 0.01F);
      assertEquals(0.0F, vector2.x, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector0, vector2);
      assertNotSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertNotSame(vector2, vector0);
      assertSame(vector2, vector1);
      
      Vector vector3 = vector2.normalizeLocal();
      assertNotNull(vector3);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(Float.NaN, vector1.y(), 0.01F);
      assertEquals(Float.NaN, vector1.x(), 0.01F);
      assertEquals(Float.NaN, vector2.y(), 0.01F);
      assertEquals(Float.NaN, vector2.x(), 0.01F);
      assertEquals(Float.NaN, vector3.x(), 0.01F);
      assertEquals(Float.NaN, vector3.y(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(vector0.equals((Object)vector1));
      assertFalse(vector0.equals((Object)vector2));
      assertFalse(vector1.equals((Object)vector0));
      assertFalse(vector2.equals((Object)vector0));
      assertFalse(vector3.equals((Object)vector0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(Float.NaN, vector1.y, 0.01F);
      assertEquals(Float.NaN, vector1.x, 0.01F);
      assertEquals(Float.NaN, vector2.y, 0.01F);
      assertEquals(Float.NaN, vector2.x, 0.01F);
      assertEquals(Float.NaN, vector3.x, 0.01F);
      assertEquals(Float.NaN, vector3.y, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector0, vector3);
      assertNotSame(vector0, vector2);
      assertNotSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertSame(vector1, vector3);
      assertNotSame(vector2, vector0);
      assertSame(vector2, vector1);
      assertSame(vector2, vector3);
      assertSame(vector3, vector2);
      assertNotSame(vector3, vector0);
      assertSame(vector3, vector1);
      
      Vector vector4 = vector2.setLength(0.0F);
      assertNotNull(vector4);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(Float.NaN, vector1.y(), 0.01F);
      assertEquals(Float.NaN, vector1.x(), 0.01F);
      assertEquals(Float.NaN, vector2.y(), 0.01F);
      assertEquals(Float.NaN, vector2.x(), 0.01F);
      assertEquals(Float.NaN, vector4.y(), 0.01F);
      assertEquals(Float.NaN, vector4.x(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(vector0.equals((Object)vector1));
      assertFalse(vector0.equals((Object)vector3));
      assertFalse(vector0.equals((Object)vector2));
      assertFalse(vector1.equals((Object)vector0));
      assertFalse(vector2.equals((Object)vector0));
      assertFalse(vector4.equals((Object)vector0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(Float.NaN, vector1.y, 0.01F);
      assertEquals(Float.NaN, vector1.x, 0.01F);
      assertEquals(Float.NaN, vector2.y, 0.01F);
      assertEquals(Float.NaN, vector2.x, 0.01F);
      assertEquals(Float.NaN, vector4.y, 0.01F);
      assertEquals(Float.NaN, vector4.x, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector0, vector3);
      assertNotSame(vector0, vector2);
      assertNotSame(vector0, vector4);
      assertNotSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertSame(vector1, vector4);
      assertSame(vector1, vector3);
      assertSame(vector2, vector4);
      assertNotSame(vector2, vector0);
      assertSame(vector2, vector1);
      assertSame(vector2, vector3);
      assertSame(vector4, vector3);
      assertNotSame(vector4, vector0);
      assertSame(vector4, vector1);
      assertSame(vector4, vector2);
      
      Vector vector5 = matrix3_1.IDENTITY.extractScale(vector2);
      assertNotNull(vector5);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, vector2.y(), 0.01F);
      assertEquals(0.0F, vector2.x(), 0.01F);
      assertEquals(0.0F, vector5.y(), 0.01F);
      assertEquals(0.0F, vector5.x(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(vector0.equals((Object)vector4));
      assertTrue(vector0.equals((Object)vector2));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector0.equals((Object)vector3));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector2.equals((Object)vector0));
      assertTrue(vector5.equals((Object)vector0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector2.y, 0.01F);
      assertEquals(0.0F, vector2.x, 0.01F);
      assertEquals(0.0F, vector5.x, 0.01F);
      assertEquals(0.0F, vector5.y, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector0, vector3);
      assertNotSame(vector0, vector2);
      assertNotSame(vector0, vector5);
      assertNotSame(vector0, vector4);
      assertNotSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertSame(vector1, vector5);
      assertSame(vector1, vector4);
      assertSame(vector1, vector3);
      assertSame(vector2, vector4);
      assertNotSame(vector2, vector0);
      assertSame(vector2, vector1);
      assertSame(vector2, vector3);
      assertSame(vector2, vector5);
      assertNotSame(vector5, vector0);
      assertSame(vector5, vector1);
      assertSame(vector5, vector2);
      assertSame(vector5, vector4);
      assertSame(vector5, vector3);
      
      Matrix3 matrix3_2 = matrix3_0.multAffineLocal(matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
      
      matrix3_2.m00 = 0.0F;
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      
      Matrix3 matrix3_3 = matrix3_0.IDENTITY.transpose();
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(0.0F, matrix3_3.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_2));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m00, 0.01F);
      assertEquals(0.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_2);
      
      float float0 = matrix3_0.m22();
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_0.equals((Object)matrix3_3));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      
      float float1 = matrix3_1.m02();
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_2);
      
      Vector vector6 = vector4.rotateScaleAndAdd(0.0F, 0.0F, vector0, vector1);
      assertNotNull(vector6);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, vector2.y(), 0.01F);
      assertEquals(0.0F, vector2.x(), 0.01F);
      assertEquals(0.0F, vector4.y(), 0.01F);
      assertEquals(0.0F, vector4.x(), 0.01F);
      assertEquals(0.0F, vector6.x(), 0.01F);
      assertEquals(0.0F, vector6.y(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertTrue(vector0.equals((Object)vector4));
      assertTrue(vector0.equals((Object)vector2));
      assertTrue(vector0.equals((Object)vector5));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector0.equals((Object)vector3));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector2.equals((Object)vector0));
      assertTrue(vector4.equals((Object)vector0));
      assertTrue(vector6.equals((Object)vector0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector2.y, 0.01F);
      assertEquals(0.0F, vector2.x, 0.01F);
      assertEquals(0.0F, vector4.y, 0.01F);
      assertEquals(0.0F, vector4.x, 0.01F);
      assertEquals(0.0F, vector6.x, 0.01F);
      assertEquals(0.0F, vector6.y, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(vector0, vector1);
      assertNotSame(vector0, vector3);
      assertNotSame(vector0, vector2);
      assertNotSame(vector0, vector5);
      assertNotSame(vector0, vector6);
      assertNotSame(vector0, vector4);
      assertNotSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertSame(vector1, vector5);
      assertSame(vector1, vector6);
      assertSame(vector1, vector4);
      assertSame(vector1, vector3);
      assertSame(vector2, vector4);
      assertNotSame(vector2, vector0);
      assertSame(vector2, vector1);
      assertSame(vector2, vector5);
      assertSame(vector2, vector3);
      assertSame(vector2, vector6);
      assertSame(vector4, vector3);
      assertNotSame(vector4, vector0);
      assertSame(vector4, vector1);
      assertSame(vector4, vector6);
      assertSame(vector4, vector2);
      assertSame(vector4, vector5);
      assertSame(vector6, vector1);
      assertNotSame(vector6, vector0);
      assertSame(vector6, vector4);
      assertSame(vector6, vector2);
      assertSame(vector6, vector5);
      assertSame(vector6, vector3);
      
      Matrix3 matrix3_4 = matrix3_0.setToRotation(0.0F);
      assertNotNull(matrix3_4);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertEquals(1.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(1.0F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_4.equals((Object)matrix3_1));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(-0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(1.0F, matrix3_4.m00, 0.01F);
      assertEquals(1.0F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_4, matrix3_1);
      assertSame(matrix3_4, matrix3_2);
      assertSame(matrix3_4, matrix3_0);
      assertNotSame(matrix3_4, matrix3_3);
      
      Matrix3 matrix3_5 = matrix3_4.IDENTITY.lerpAffine((IMatrix3) matrix3_1, 0.0F);
      assertNotNull(matrix3_5);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_4.isAffine());
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertEquals(1.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(1.0F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(0.0F, matrix3_5.m21(), 0.01F);
      assertEquals(0.0F, matrix3_5.m10(), 0.01F);
      assertEquals(0.0F, matrix3_5.m20(), 0.01F);
      assertTrue(matrix3_5.isAffine());
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(0.0F, matrix3_5.m00(), 0.01F);
      assertEquals(1.0F, matrix3_5.m22(), 0.01F);
      assertEquals(0.0F, matrix3_5.m11(), 0.01F);
      assertEquals(0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(0.0F, matrix3_5.m12(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_4));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_4.equals((Object)matrix3_1));
      assertFalse(matrix3_4.equals((Object)matrix3_3));
      assertTrue(matrix3_5.equals((Object)matrix3_3));
      assertTrue(matrix3_5.equals((Object)matrix3_1));
      assertFalse(matrix3_5.equals((Object)matrix3_0));
      assertFalse(matrix3_5.equals((Object)matrix3_4));
      assertFalse(matrix3_5.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(1.0F, matrix3_4.m00, 0.01F);
      assertEquals(1.0F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertEquals(0.0F, matrix3_5.m20, 0.01F);
      assertEquals(0.0F, matrix3_5.m01, 0.01F);
      assertEquals(0.0F, matrix3_5.m12, 0.01F);
      assertEquals(0.0F, matrix3_5.m00, 0.01F);
      assertEquals(0.0F, matrix3_5.m11, 0.01F);
      assertEquals(1.0F, matrix3_5.m22, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals(0.0F, matrix3_5.m10, 0.01F);
      assertEquals(0.0F, matrix3_5.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_5);
      assertSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_4, matrix3_1);
      assertSame(matrix3_4, matrix3_2);
      assertSame(matrix3_4, matrix3_0);
      assertNotSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_5);
      assertNotSame(matrix3_5, matrix3_0);
      assertNotSame(matrix3_5, matrix3_4);
      assertNotSame(matrix3_5, matrix3_1);
      assertNotSame(matrix3_5, matrix3_3);
      assertNotSame(matrix3_5, matrix3_2);
      
      Matrix3 matrix3_6 = matrix3_0.setToRotation(0.0F, 1.0F, 318.96F, 0.0F);
      assertNotNull(matrix3_6);
      assertEquals(0.0F, matrix3_6.m21(), 0.01F);
      assertEquals(0.0F, matrix3_6.m10(), 0.01F);
      assertEquals(0.0F, matrix3_6.m01(), 0.01F);
      assertEquals(0.0F, matrix3_6.m12(), 0.01F);
      assertEquals(1.0F, matrix3_6.m00(), 0.01F);
      assertEquals(1.0F, matrix3_6.m22(), 0.01F);
      assertEquals(1.0F, matrix3_6.m11(), 0.01F);
      assertEquals(0.0F, matrix3_6.m20(), 0.01F);
      assertEquals(0.0F, matrix3_6.m02(), 0.01F);
      assertTrue(matrix3_6.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_6.equals((Object)matrix3_1));
      assertFalse(matrix3_6.equals((Object)matrix3_3));
      assertFalse(matrix3_6.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_6.m20, 0.01F);
      assertEquals(0.0F, matrix3_6.m02, 0.01F);
      assertEquals(0.0F, matrix3_6.m10, 0.01F);
      assertEquals(0.0F, matrix3_6.m21, 0.01F);
      assertEquals(1.0F, matrix3_6.m00, 0.01F);
      assertEquals(1.0F, matrix3_6.m11, 0.01F);
      assertEquals(1.0F, matrix3_6.m22, 0.01F);
      assertEquals(0.0F, matrix3_6.m01, 0.01F);
      assertEquals(0.0F, matrix3_6.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertSame(matrix3_6, matrix3_4);
      assertSame(matrix3_6, matrix3_0);
      assertNotSame(matrix3_6, matrix3_1);
      assertNotSame(matrix3_6, matrix3_3);
      assertNotSame(matrix3_6, matrix3_5);
      assertSame(matrix3_6, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_6);
      
      Vector vector7 = new Vector();
      assertNotNull(vector7);
      assertEquals(0.0F, vector7.x(), 0.01F);
      assertEquals(0.0F, vector7.y(), 0.01F);
      assertTrue(vector7.equals((Object)vector0));
      assertTrue(vector7.equals((Object)vector2));
      assertTrue(vector7.equals((Object)vector5));
      assertTrue(vector7.equals((Object)vector6));
      assertTrue(vector7.equals((Object)vector1));
      assertTrue(vector7.equals((Object)vector3));
      assertTrue(vector7.equals((Object)vector4));
      assertEquals(0.0F, vector7.x, 0.01F);
      assertEquals(0.0F, vector7.y, 0.01F);
      
      Matrix3 matrix3_7 = matrix3_6.IDENTITY.setToTransform((IVector) vector7, 0.0F, (IVector) vector1);
      assertNotNull(matrix3_7);
      assertEquals(0.0F, matrix3_6.m21(), 0.01F);
      assertEquals(0.0F, matrix3_6.m10(), 0.01F);
      assertEquals(0.0F, matrix3_6.m01(), 0.01F);
      assertEquals(0.0F, matrix3_6.m12(), 0.01F);
      assertEquals(1.0F, matrix3_6.m00(), 0.01F);
      assertEquals(1.0F, matrix3_6.m22(), 0.01F);
      assertEquals(1.0F, matrix3_6.m11(), 0.01F);
      assertEquals(0.0F, matrix3_6.m20(), 0.01F);
      assertEquals(0.0F, matrix3_6.m02(), 0.01F);
      assertTrue(matrix3_6.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, vector7.x(), 0.01F);
      assertEquals(0.0F, vector7.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_7.m02(), 0.01F);
      assertTrue(matrix3_7.isAffine());
      assertEquals(0.0F, matrix3_7.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_7.m10(), 0.01F);
      assertEquals(0.0F, matrix3_7.m00(), 0.01F);
      assertEquals(1.0F, matrix3_7.m22(), 0.01F);
      assertEquals(0.0F, matrix3_7.m11(), 0.01F);
      assertEquals(0.0F, matrix3_7.m01(), 0.01F);
      assertEquals(0.0F, matrix3_7.m12(), 0.01F);
      assertEquals(0.0F, matrix3_7.m20(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertFalse(matrix3_6.equals((Object)matrix3_1));
      assertFalse(matrix3_6.equals((Object)matrix3_3));
      assertFalse(matrix3_6.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertTrue(vector7.equals((Object)vector0));
      assertTrue(vector7.equals((Object)vector2));
      assertTrue(vector7.equals((Object)vector5));
      assertTrue(vector7.equals((Object)vector6));
      assertTrue(vector7.equals((Object)vector1));
      assertTrue(vector7.equals((Object)vector3));
      assertTrue(vector7.equals((Object)vector4));
      assertFalse(matrix3_1.equals((Object)matrix3_6));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_1.equals((Object)matrix3_5));
      assertFalse(matrix3_1.equals((Object)matrix3_4));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_7.equals((Object)matrix3_6));
      assertTrue(matrix3_7.equals((Object)matrix3_3));
      assertTrue(matrix3_7.equals((Object)matrix3_5));
      assertFalse(matrix3_7.equals((Object)matrix3_2));
      assertFalse(matrix3_7.equals((Object)matrix3_4));
      assertFalse(matrix3_7.equals((Object)matrix3_0));
      assertTrue(vector0.equals((Object)vector7));
      assertTrue(vector0.equals((Object)vector6));
      assertTrue(vector0.equals((Object)vector4));
      assertTrue(vector0.equals((Object)vector2));
      assertTrue(vector0.equals((Object)vector5));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector0.equals((Object)vector3));
      assertTrue(vector1.equals((Object)vector7));
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0.0F, matrix3_6.m20, 0.01F);
      assertEquals(0.0F, matrix3_6.m02, 0.01F);
      assertEquals(0.0F, matrix3_6.m10, 0.01F);
      assertEquals(0.0F, matrix3_6.m21, 0.01F);
      assertEquals(1.0F, matrix3_6.m00, 0.01F);
      assertEquals(1.0F, matrix3_6.m11, 0.01F);
      assertEquals(1.0F, matrix3_6.m22, 0.01F);
      assertEquals(0.0F, matrix3_6.m01, 0.01F);
      assertEquals(0.0F, matrix3_6.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, vector7.x, 0.01F);
      assertEquals(0.0F, vector7.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_7.m20, 0.01F);
      assertEquals(0.0F, matrix3_7.m01, 0.01F);
      assertEquals(0.0F, matrix3_7.m12, 0.01F);
      assertEquals(0.0F, matrix3_7.m00, 0.01F);
      assertEquals(0.0F, matrix3_7.m11, 0.01F);
      assertEquals(1.0F, matrix3_7.m22, 0.01F);
      assertEquals(-0.0F, matrix3_7.m10, 0.01F);
      assertEquals(0.0F, matrix3_7.m21, 0.01F);
      assertEquals(0.0F, matrix3_7.m02, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertSame(matrix3_6, matrix3_4);
      assertNotSame(matrix3_6, matrix3_7);
      assertSame(matrix3_6, matrix3_0);
      assertNotSame(matrix3_6, matrix3_1);
      assertNotSame(matrix3_6, matrix3_3);
      assertNotSame(matrix3_6, matrix3_5);
      assertSame(matrix3_6, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_7);
      assertSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_6);
      assertNotSame(vector7, vector6);
      assertNotSame(vector7, vector4);
      assertNotSame(vector7, vector1);
      assertNotSame(vector7, vector3);
      assertNotSame(vector7, vector0);
      assertNotSame(vector7, vector2);
      assertNotSame(vector7, vector5);
      assertNotSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_7);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_7, matrix3_6);
      assertNotSame(matrix3_7, matrix3_5);
      assertNotSame(matrix3_7, matrix3_3);
      assertNotSame(matrix3_7, matrix3_2);
      assertNotSame(matrix3_7, matrix3_4);
      assertNotSame(matrix3_7, matrix3_0);
      assertSame(matrix3_7, matrix3_1);
      assertNotSame(vector0, vector1);
      assertNotSame(vector0, vector3);
      assertNotSame(vector0, vector2);
      assertNotSame(vector0, vector5);
      assertNotSame(vector0, vector6);
      assertNotSame(vector0, vector7);
      assertNotSame(vector0, vector4);
      assertNotSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertSame(vector1, vector5);
      assertNotSame(vector1, vector7);
      assertSame(vector1, vector6);
      assertSame(vector1, vector4);
      assertSame(vector1, vector3);
      
      Vector vector8 = matrix3_1.transformVector((IVector) vector5, vector2);
      assertNotNull(vector8);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector8.x(), 0.01F);
      assertEquals(0.0F, vector8.y(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, vector2.y(), 0.01F);
      assertEquals(0.0F, vector2.x(), 0.01F);
      assertEquals(0.0F, vector5.y(), 0.01F);
      assertEquals(0.0F, vector5.x(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_6));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_1.equals((Object)matrix3_5));
      assertFalse(matrix3_1.equals((Object)matrix3_4));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertTrue(vector0.equals((Object)vector7));
      assertTrue(vector0.equals((Object)vector6));
      assertTrue(vector0.equals((Object)vector4));
      assertTrue(vector0.equals((Object)vector2));
      assertTrue(vector0.equals((Object)vector5));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector0.equals((Object)vector3));
      assertTrue(vector8.equals((Object)vector7));
      assertTrue(vector8.equals((Object)vector0));
      assertTrue(vector1.equals((Object)vector7));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector2.equals((Object)vector0));
      assertTrue(vector2.equals((Object)vector7));
      assertTrue(vector5.equals((Object)vector0));
      assertTrue(vector5.equals((Object)vector7));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector8.x, 0.01F);
      assertEquals(0.0F, vector8.y, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector2.y, 0.01F);
      assertEquals(0.0F, vector2.x, 0.01F);
      assertEquals(0.0F, vector5.x, 0.01F);
      assertEquals(0.0F, vector5.y, 0.01F);
      assertNotSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_7);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(vector0, vector1);
      assertNotSame(vector0, vector8);
      assertNotSame(vector0, vector3);
      assertNotSame(vector0, vector2);
      assertNotSame(vector0, vector5);
      assertNotSame(vector0, vector6);
      assertNotSame(vector0, vector7);
      assertNotSame(vector0, vector4);
      assertNotSame(vector8, vector0);
      assertSame(vector8, vector1);
      assertSame(vector8, vector6);
      assertSame(vector8, vector3);
      assertNotSame(vector8, vector7);
      assertSame(vector8, vector2);
      assertSame(vector8, vector5);
      assertSame(vector8, vector4);
      assertNotSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertSame(vector1, vector5);
      assertNotSame(vector1, vector7);
      assertSame(vector1, vector6);
      assertSame(vector1, vector4);
      assertSame(vector1, vector3);
      assertSame(vector1, vector8);
      assertSame(vector2, vector4);
      assertSame(vector2, vector8);
      assertNotSame(vector2, vector0);
      assertSame(vector2, vector1);
      assertSame(vector2, vector5);
      assertSame(vector2, vector3);
      assertSame(vector2, vector6);
      assertNotSame(vector2, vector7);
      assertNotSame(vector5, vector0);
      assertSame(vector5, vector1);
      assertNotSame(vector5, vector7);
      assertSame(vector5, vector2);
      assertSame(vector5, vector6);
      assertSame(vector5, vector4);
      assertSame(vector5, vector3);
      assertSame(vector5, vector8);
      
      Matrix3 matrix3_8 = matrix3_7.setToRotation(0.0F);
      assertNotNull(matrix3_8);
      assertEquals(0.0F, matrix3_6.m21(), 0.01F);
      assertEquals(0.0F, matrix3_6.m10(), 0.01F);
      assertEquals(0.0F, matrix3_6.m01(), 0.01F);
      assertEquals(0.0F, matrix3_6.m12(), 0.01F);
      assertEquals(1.0F, matrix3_6.m00(), 0.01F);
      assertEquals(1.0F, matrix3_6.m22(), 0.01F);
      assertEquals(1.0F, matrix3_6.m11(), 0.01F);
      assertEquals(0.0F, matrix3_6.m20(), 0.01F);
      assertEquals(0.0F, matrix3_6.m02(), 0.01F);
      assertTrue(matrix3_6.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, vector7.x(), 0.01F);
      assertEquals(0.0F, vector7.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_7.m02(), 0.01F);
      assertTrue(matrix3_7.isAffine());
      assertEquals(0.0F, matrix3_7.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_7.m10(), 0.01F);
      assertEquals(1.0F, matrix3_7.m00(), 0.01F);
      assertEquals(1.0F, matrix3_7.m22(), 0.01F);
      assertEquals(1.0F, matrix3_7.m11(), 0.01F);
      assertEquals(0.0F, matrix3_7.m01(), 0.01F);
      assertEquals(0.0F, matrix3_7.m12(), 0.01F);
      assertEquals(0.0F, matrix3_7.m20(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, matrix3_8.m20(), 0.01F);
      assertEquals(0.0F, matrix3_8.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_8.m10(), 0.01F);
      assertEquals(0.0F, matrix3_8.m01(), 0.01F);
      assertEquals(0.0F, matrix3_8.m12(), 0.01F);
      assertEquals(1.0F, matrix3_8.m00(), 0.01F);
      assertEquals(1.0F, matrix3_8.m22(), 0.01F);
      assertEquals(1.0F, matrix3_8.m11(), 0.01F);
      assertEquals(0.0F, matrix3_8.m02(), 0.01F);
      assertTrue(matrix3_8.isAffine());
      assertTrue(matrix3_6.equals((Object)matrix3_1));
      assertFalse(matrix3_6.equals((Object)matrix3_3));
      assertTrue(matrix3_6.equals((Object)matrix3_7));
      assertFalse(matrix3_6.equals((Object)matrix3_5));
      assertFalse(matrix3_0.equals((Object)matrix3_5));
      assertTrue(matrix3_0.equals((Object)matrix3_7));
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertTrue(vector7.equals((Object)vector0));
      assertTrue(vector7.equals((Object)vector2));
      assertTrue(vector7.equals((Object)vector5));
      assertTrue(vector7.equals((Object)vector6));
      assertTrue(vector7.equals((Object)vector1));
      assertTrue(vector7.equals((Object)vector8));
      assertTrue(vector7.equals((Object)vector3));
      assertTrue(vector7.equals((Object)vector4));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_1.equals((Object)matrix3_4));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_5));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_6));
      assertTrue(matrix3_7.equals((Object)matrix3_2));
      assertTrue(matrix3_7.equals((Object)matrix3_4));
      assertFalse(matrix3_7.equals((Object)matrix3_5));
      assertTrue(matrix3_7.equals((Object)matrix3_6));
      assertTrue(matrix3_7.equals((Object)matrix3_0));
      assertFalse(matrix3_7.equals((Object)matrix3_3));
      assertTrue(vector0.equals((Object)vector7));
      assertTrue(vector0.equals((Object)vector6));
      assertTrue(vector0.equals((Object)vector4));
      assertTrue(vector0.equals((Object)vector2));
      assertTrue(vector0.equals((Object)vector5));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector0.equals((Object)vector8));
      assertTrue(vector0.equals((Object)vector3));
      assertTrue(vector1.equals((Object)vector7));
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(matrix3_8.equals((Object)matrix3_3));
      assertFalse(matrix3_8.equals((Object)matrix3_5));
      assertTrue(matrix3_8.equals((Object)matrix3_0));
      assertTrue(matrix3_8.equals((Object)matrix3_4));
      assertTrue(matrix3_8.equals((Object)matrix3_6));
      assertTrue(matrix3_8.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_6.m20, 0.01F);
      assertEquals(0.0F, matrix3_6.m02, 0.01F);
      assertEquals(0.0F, matrix3_6.m10, 0.01F);
      assertEquals(0.0F, matrix3_6.m21, 0.01F);
      assertEquals(1.0F, matrix3_6.m00, 0.01F);
      assertEquals(1.0F, matrix3_6.m11, 0.01F);
      assertEquals(1.0F, matrix3_6.m22, 0.01F);
      assertEquals(0.0F, matrix3_6.m01, 0.01F);
      assertEquals(0.0F, matrix3_6.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, vector7.x, 0.01F);
      assertEquals(0.0F, vector7.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_7.m20, 0.01F);
      assertEquals(0.0F, matrix3_7.m01, 0.01F);
      assertEquals(0.0F, matrix3_7.m12, 0.01F);
      assertEquals(1.0F, matrix3_7.m00, 0.01F);
      assertEquals(1.0F, matrix3_7.m11, 0.01F);
      assertEquals(1.0F, matrix3_7.m22, 0.01F);
      assertEquals(-0.0F, matrix3_7.m10, 0.01F);
      assertEquals(0.0F, matrix3_7.m21, 0.01F);
      assertEquals(0.0F, matrix3_7.m02, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(-0.0F, matrix3_8.m10, 0.01F);
      assertEquals(0.0F, matrix3_8.m21, 0.01F);
      assertEquals(1.0F, matrix3_8.m00, 0.01F);
      assertEquals(1.0F, matrix3_8.m11, 0.01F);
      assertEquals(1.0F, matrix3_8.m22, 0.01F);
      assertEquals(0.0F, matrix3_8.m01, 0.01F);
      assertEquals(0.0F, matrix3_8.m12, 0.01F);
      assertEquals(0.0F, matrix3_8.m02, 0.01F);
      assertEquals(0.0F, matrix3_8.m20, 0.01F);
      assertSame(matrix3_6, matrix3_4);
      assertNotSame(matrix3_6, matrix3_7);
      assertSame(matrix3_6, matrix3_0);
      assertNotSame(matrix3_6, matrix3_8);
      assertNotSame(matrix3_6, matrix3_1);
      assertNotSame(matrix3_6, matrix3_3);
      assertNotSame(matrix3_6, matrix3_5);
      assertSame(matrix3_6, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertNotSame(matrix3_0, matrix3_7);
      assertNotSame(matrix3_0, matrix3_8);
      assertSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_6);
      assertNotSame(vector7, vector8);
      assertNotSame(vector7, vector6);
      assertNotSame(vector7, vector4);
      assertNotSame(vector7, vector1);
      assertNotSame(vector7, vector3);
      assertNotSame(vector7, vector0);
      assertNotSame(vector7, vector2);
      assertNotSame(vector7, vector5);
      assertSame(matrix3_1, matrix3_8);
      assertNotSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_7);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_7, matrix3_6);
      assertNotSame(matrix3_7, matrix3_5);
      assertSame(matrix3_7, matrix3_8);
      assertNotSame(matrix3_7, matrix3_3);
      assertNotSame(matrix3_7, matrix3_2);
      assertNotSame(matrix3_7, matrix3_4);
      assertNotSame(matrix3_7, matrix3_0);
      assertSame(matrix3_7, matrix3_1);
      assertNotSame(vector0, vector1);
      assertNotSame(vector0, vector8);
      assertNotSame(vector0, vector3);
      assertNotSame(vector0, vector2);
      assertNotSame(vector0, vector5);
      assertNotSame(vector0, vector6);
      assertNotSame(vector0, vector7);
      assertNotSame(vector0, vector4);
      assertNotSame(vector1, vector0);
      assertSame(vector1, vector2);
      assertSame(vector1, vector5);
      assertNotSame(vector1, vector7);
      assertSame(vector1, vector6);
      assertSame(vector1, vector4);
      assertSame(vector1, vector3);
      assertSame(vector1, vector8);
      assertNotSame(matrix3_8, matrix3_4);
      assertNotSame(matrix3_8, matrix3_3);
      assertSame(matrix3_8, matrix3_7);
      assertNotSame(matrix3_8, matrix3_5);
      assertNotSame(matrix3_8, matrix3_0);
      assertNotSame(matrix3_8, matrix3_6);
      assertNotSame(matrix3_8, matrix3_2);
      assertSame(matrix3_8, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.setToTransform((IVector) vector0, 0.0F, (IVector) vector0);
      assertNotNull(matrix3_1);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      
      Vector vector1 = matrix3_1.extractScale();
      assertNotNull(vector1);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(vector0, vector1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(4386875.5F, matrix3_0.m00(), 0.01F);
      assertEquals(4386875.5F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-4392757.5F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2963.052F), matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-4392757.5F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-4392757.5F), matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(2.0F, matrix3_0.m22, 0.01F);
      assertEquals((-4392757.5F), matrix3_0.m10, 0.01F);
      assertEquals(4386875.5F, matrix3_0.m00, 0.01F);
      assertEquals(4386875.5F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-2963.052F), matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.addLocal(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(8773751.0F, matrix3_0.m00(), 0.01F);
      assertEquals(8773751.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-5926.104F), matrix3_0.m21(), 0.01F);
      assertEquals((-8785515.0F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4.0F, matrix3_0.m22(), 0.01F);
      assertEquals((-8785515.0F), matrix3_0.m10(), 0.01F);
      assertEquals((-8785515.0F), matrix3_1.m01(), 0.01F);
      assertEquals((-5926.104F), matrix3_1.m21(), 0.01F);
      assertEquals((-8785515.0F), matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(8773751.0F, matrix3_1.m00(), 0.01F);
      assertEquals(8773751.0F, matrix3_1.m11(), 0.01F);
      assertEquals(4.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals((-8785515.0F), matrix3_0.m01, 0.01F);
      assertEquals(4.0F, matrix3_0.m22, 0.01F);
      assertEquals((-8785515.0F), matrix3_0.m10, 0.01F);
      assertEquals(8773751.0F, matrix3_0.m00, 0.01F);
      assertEquals(8773751.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-5926.104F), matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(8773751.0F, matrix3_1.m00, 0.01F);
      assertEquals(8773751.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(4.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-5926.104F), matrix3_1.m21, 0.01F);
      assertEquals((-8785515.0F), matrix3_1.m01, 0.01F);
      assertEquals((-8785515.0F), matrix3_1.m10, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2670.6924F, (-2929.2F), (-2274.6829F), 1810.3224F, (-1.4241498F), 0.0F, (-2274.6829F), 0.0F, 1.0E-4F);
      assertNotNull(matrix3_0);
      assertEquals((-1.4241498F), matrix3_0.m11(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22(), 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2274.6829F), matrix3_0.m02(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01(), 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10(), 0.01F);
      assertEquals(1810.3224F, matrix3_0.m01, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m02, 0.01F);
      assertEquals((-2929.2F), matrix3_0.m10, 0.01F);
      assertEquals((-1.4241498F), matrix3_0.m11, 0.01F);
      assertEquals((-2274.6829F), matrix3_0.m20, 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(2670.6924F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.addLocal(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals((-2.8482995F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0E-4F, matrix3_0.m22(), 0.01F);
      assertEquals((-5858.4F), matrix3_0.m01(), 0.01F);
      assertEquals(5341.385F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals((-4549.3657F), matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-4549.3657F), matrix3_0.m02(), 0.01F);
      assertEquals(3620.6448F, matrix3_0.m10(), 0.01F);
      assertEquals((-2.8482995F), matrix3_1.m11(), 0.01F);
      assertEquals((-5858.4F), matrix3_1.m01(), 0.01F);
      assertEquals(5341.385F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals((-4549.3657F), matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(2.0E-4F, matrix3_1.m22(), 0.01F);
      assertEquals((-4549.3657F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(3620.6448F, matrix3_1.m10(), 0.01F);
      assertEquals(3620.6448F, matrix3_0.m10, 0.01F);
      assertEquals((-4549.3657F), matrix3_0.m02, 0.01F);
      assertEquals((-2.8482995F), matrix3_0.m11, 0.01F);
      assertEquals((-5858.4F), matrix3_0.m01, 0.01F);
      assertEquals((-4549.3657F), matrix3_0.m20, 0.01F);
      assertEquals(2.0E-4F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(5341.385F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-4549.3657F), matrix3_1.m02, 0.01F);
      assertEquals(3620.6448F, matrix3_1.m10, 0.01F);
      assertEquals(2.0E-4F, matrix3_1.m22, 0.01F);
      assertEquals((-2.8482995F), matrix3_1.m11, 0.01F);
      assertEquals((-5858.4F), matrix3_1.m01, 0.01F);
      assertEquals(5341.385F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals((-4549.3657F), matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(1.0F, 0.99999F, 0.99999F, 0.99999F, 1.0F, 0.99999F, 1.0F, 1.0E-5F, 456.47272F);
      assertNotNull(matrix3_0);
      assertEquals(0.99999F, matrix3_0.m01(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m21(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m12(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(456.47272F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.99999F, matrix3_0.m20, 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m12, 0.01F);
      assertEquals(456.47272F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.99999F, matrix3_0.m01, 0.01F);
      assertEquals(0.99999F, matrix3_0.m10, 0.01F);
      assertEquals(0.99999F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToZero();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = Matrix3.IDENTITY;
      assertNotNull(matrix3_2);
      assertTrue(matrix3_2.isAffine());
      assertEquals(1482.5111F, matrix3_2.m01(), 0.01F);
      assertEquals((-1480.526F), matrix3_2.m00(), 0.01F);
      assertEquals((-1480.526F), matrix3_2.m11(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m21(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m20, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m10, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m21, 0.01F);
      assertEquals((-1480.526F), matrix3_2.m00, 0.01F);
      assertEquals((-1480.526F), matrix3_2.m11, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m01, 0.01F);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      matrix3_2.IDENTITY.m12 = 1.0F;
      assertEquals(1482.5111F, matrix3_2.m01(), 0.01F);
      assertEquals((-1480.526F), matrix3_2.m00(), 0.01F);
      assertEquals((-1480.526F), matrix3_2.m11(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m21(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m20(), 0.01F);
      
      Matrix3 matrix3_3 = matrix3_0.IDENTITY.transpose(matrix3_2);
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m02(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m01(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals((-1480.526F), matrix3_2.m00(), 0.01F);
      assertEquals((-1480.526F), matrix3_2.m11(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_2.m21(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1482.5111F, matrix3_3.m02(), 0.01F);
      assertEquals(1.0F, matrix3_3.m21(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals((-1480.526F), matrix3_3.m00(), 0.01F);
      assertEquals((-1480.526F), matrix3_3.m11(), 0.01F);
      assertEquals(1482.5111F, matrix3_3.m10(), 0.01F);
      assertEquals(1482.5111F, matrix3_3.m01(), 0.01F);
      assertEquals(1482.5111F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(1.0F, matrix3_2.m21, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m02, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m10, 0.01F);
      assertEquals((-1480.526F), matrix3_2.m00, 0.01F);
      assertEquals((-1480.526F), matrix3_2.m11, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m01, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals((-1480.526F), matrix3_3.m00, 0.01F);
      assertEquals((-1480.526F), matrix3_3.m11, 0.01F);
      assertEquals(1482.5111F, matrix3_3.m02, 0.01F);
      assertEquals(1482.5111F, matrix3_3.m01, 0.01F);
      assertEquals(1482.5111F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(1482.5111F, matrix3_3.m10, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(1.0F, matrix3_3.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_2);
      
      Matrix3 matrix3_4 = matrix3_0.lerpAffine((IMatrix3) matrix3_2, (-1481.526F), matrix3_2);
      assertNotNull(matrix3_4);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-2196378.8F), matrix3_2.m10(), 0.01F);
      assertEquals((-2196378.8F), matrix3_2.m01(), 0.01F);
      assertEquals((-1481.526F), matrix3_2.m21(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(2193437.8F, matrix3_2.m00(), 0.01F);
      assertEquals(2193437.8F, matrix3_2.m11(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals((-1481.526F), matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertEquals(2193437.8F, matrix3_4.m00(), 0.01F);
      assertEquals(2193437.8F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals((-2196378.8F), matrix3_4.m01(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals((-2196378.8F), matrix3_4.m10(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_4.equals((Object)matrix3_1));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(2193437.8F, matrix3_2.m00, 0.01F);
      assertEquals(2193437.8F, matrix3_2.m11, 0.01F);
      assertEquals((-2196378.8F), matrix3_2.m10, 0.01F);
      assertEquals((-2196378.8F), matrix3_2.m01, 0.01F);
      assertEquals((-1481.526F), matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals((-2196378.8F), matrix3_4.m10, 0.01F);
      assertEquals(2193437.8F, matrix3_4.m00, 0.01F);
      assertEquals(2193437.8F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals((-2196378.8F), matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals((-1481.526F), matrix3_4.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_4);
      assertSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_3);
      assertSame(matrix3_4, matrix3_2);
      assertNotSame(matrix3_4, matrix3_1);
      assertNotSame(matrix3_4, matrix3_0);
      assertSame(matrix3_4, matrix3_3);
      
      Matrix3 matrix3_5 = matrix3_3.addLocal(matrix3_2);
      assertNotNull(matrix3_5);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-4392757.5F), matrix3_2.m10(), 0.01F);
      assertEquals((-4392757.5F), matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(4386875.5F, matrix3_2.m00(), 0.01F);
      assertEquals(4386875.5F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals((-2963.052F), matrix3_2.m12(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(2.0F, matrix3_2.m22(), 0.01F);
      assertEquals(4386875.5F, matrix3_3.m00(), 0.01F);
      assertEquals(4386875.5F, matrix3_3.m11(), 0.01F);
      assertEquals((-4392757.5F), matrix3_3.m01(), 0.01F);
      assertEquals((-4392757.5F), matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals((-2963.052F), matrix3_3.m12(), 0.01F);
      assertEquals(2.0F, matrix3_3.m22(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals(4386875.5F, matrix3_5.m00(), 0.01F);
      assertEquals(4386875.5F, matrix3_5.m11(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(0.0F, matrix3_5.m21(), 0.01F);
      assertEquals(2.0F, matrix3_5.m22(), 0.01F);
      assertEquals((-4392757.5F), matrix3_5.m10(), 0.01F);
      assertFalse(matrix3_5.isAffine());
      assertEquals((-4392757.5F), matrix3_5.m01(), 0.01F);
      assertEquals((-2963.052F), matrix3_5.m12(), 0.01F);
      assertEquals(0.0F, matrix3_5.m20(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_0.equals((Object)matrix3_4));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_5.equals((Object)matrix3_1));
      assertFalse(matrix3_5.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(2.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals((-2963.052F), matrix3_2.m12, 0.01F);
      assertEquals(4386875.5F, matrix3_2.m00, 0.01F);
      assertEquals(4386875.5F, matrix3_2.m11, 0.01F);
      assertEquals((-4392757.5F), matrix3_2.m10, 0.01F);
      assertEquals((-4392757.5F), matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals((-2963.052F), matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals((-4392757.5F), matrix3_3.m01, 0.01F);
      assertEquals(2.0F, matrix3_3.m22, 0.01F);
      assertEquals((-4392757.5F), matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      assertEquals(4386875.5F, matrix3_3.m00, 0.01F);
      assertEquals(4386875.5F, matrix3_3.m11, 0.01F);
      assertEquals((-4392757.5F), matrix3_5.m01, 0.01F);
      assertEquals(0.0F, matrix3_5.m20, 0.01F);
      assertEquals((-2963.052F), matrix3_5.m12, 0.01F);
      assertEquals(4386875.5F, matrix3_5.m00, 0.01F);
      assertEquals(4386875.5F, matrix3_5.m11, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals((-4392757.5F), matrix3_5.m10, 0.01F);
      assertEquals(2.0F, matrix3_5.m22, 0.01F);
      assertEquals(0.0F, matrix3_5.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_5);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_4);
      assertSame(matrix3_2, matrix3_4);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_5);
      assertSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_2);
      assertSame(matrix3_3, matrix3_4);
      assertSame(matrix3_3, matrix3_5);
      assertSame(matrix3_5, matrix3_3);
      assertNotSame(matrix3_5, matrix3_1);
      assertSame(matrix3_5, matrix3_2);
      assertNotSame(matrix3_5, matrix3_0);
      assertSame(matrix3_5, matrix3_4);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(104.41456F, (-1031.0F), (-1031.0F), (-1874.2548F), 1200.2429F, 2.0F, 519.64984F, 104.41456F, (-1874.2548F));
      assertNotNull(matrix3_0);
      assertEquals((-1874.2548F), matrix3_0.m22(), 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m01(), 0.01F);
      assertEquals((-1031.0F), matrix3_0.m20(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m12(), 0.01F);
      assertEquals(104.41456F, matrix3_0.m00(), 0.01F);
      assertEquals(1200.2429F, matrix3_0.m11(), 0.01F);
      assertEquals(519.64984F, matrix3_0.m02(), 0.01F);
      assertEquals((-1031.0F), matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(519.64984F, matrix3_0.m02, 0.01F);
      assertEquals(1200.2429F, matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1031.0F), matrix3_0.m20, 0.01F);
      assertEquals(104.41456F, matrix3_0.m00, 0.01F);
      assertEquals((-1031.0F), matrix3_0.m10, 0.01F);
      assertEquals(104.41456F, matrix3_0.m12, 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m01, 0.01F);
      assertEquals((-1874.2548F), matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.addLocal(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals((-3748.5095F), matrix3_0.m22(), 0.01F);
      assertEquals(208.82912F, matrix3_0.m00(), 0.01F);
      assertEquals(2400.4858F, matrix3_0.m11(), 0.01F);
      assertEquals(208.82912F, matrix3_0.m21(), 0.01F);
      assertEquals((-3748.5095F), matrix3_0.m10(), 0.01F);
      assertEquals(4.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1039.2997F, matrix3_0.m20(), 0.01F);
      assertEquals((-2062.0F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2062.0F), matrix3_0.m02(), 0.01F);
      assertEquals(208.82912F, matrix3_1.m00(), 0.01F);
      assertEquals(1039.2997F, matrix3_1.m20(), 0.01F);
      assertEquals((-2062.0F), matrix3_1.m02(), 0.01F);
      assertEquals((-2062.0F), matrix3_1.m01(), 0.01F);
      assertEquals(4.0F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2400.4858F, matrix3_1.m11(), 0.01F);
      assertEquals((-3748.5095F), matrix3_1.m10(), 0.01F);
      assertEquals((-3748.5095F), matrix3_1.m22(), 0.01F);
      assertEquals(208.82912F, matrix3_1.m21(), 0.01F);
      assertEquals(4.0F, matrix3_0.m12, 0.01F);
      assertEquals(2400.4858F, matrix3_0.m11, 0.01F);
      assertEquals((-3748.5095F), matrix3_0.m10, 0.01F);
      assertEquals((-2062.0F), matrix3_0.m02, 0.01F);
      assertEquals((-2062.0F), matrix3_0.m01, 0.01F);
      assertEquals(208.82912F, matrix3_0.m00, 0.01F);
      assertEquals(1039.2997F, matrix3_0.m20, 0.01F);
      assertEquals(208.82912F, matrix3_0.m21, 0.01F);
      assertEquals((-3748.5095F), matrix3_0.m22, 0.01F);
      assertEquals(2400.4858F, matrix3_1.m11, 0.01F);
      assertEquals((-3748.5095F), matrix3_1.m10, 0.01F);
      assertEquals((-3748.5095F), matrix3_1.m22, 0.01F);
      assertEquals(208.82912F, matrix3_1.m00, 0.01F);
      assertEquals(208.82912F, matrix3_1.m21, 0.01F);
      assertEquals(1039.2997F, matrix3_1.m20, 0.01F);
      assertEquals((-2062.0F), matrix3_1.m01, 0.01F);
      assertEquals((-2062.0F), matrix3_1.m02, 0.01F);
      assertEquals(4.0F, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(1.0F, 0.99999F, 0.99999F, 0.99999F, 1.0F, 0.99999F, 1.0F, 1.0E-5F, 456.47272F);
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(456.47272F, matrix3_0.m22(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m12(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m21(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m10(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m01, 0.01F);
      assertEquals(456.47272F, matrix3_0.m22, 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m12, 0.01F);
      assertEquals(0.99999F, matrix3_0.m10, 0.01F);
      assertEquals(0.99999F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.99999F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      
      Matrix3 matrix3_1 = Matrix3.IDENTITY;
      assertNotNull(matrix3_1);
      assertEquals(2.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(2.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(2.0F, matrix3_1.m00, 0.01F);
      assertEquals(2.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.lerpAffine((IMatrix3) matrix3_1, (-1481.526F), matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(1.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(456.47272F, matrix3_0.m22(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m12(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m21(), 0.01F);
      assertEquals(0.99999F, matrix3_0.m10(), 0.01F);
      assertEquals(1482.5111F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1482.5111F, matrix3_1.m01(), 0.01F);
      assertEquals((-1480.526F), matrix3_1.m00(), 0.01F);
      assertEquals((-1480.526F), matrix3_1.m11(), 0.01F);
      assertEquals(1482.5111F, matrix3_1.m21(), 0.01F);
      assertEquals(1482.5111F, matrix3_1.m10(), 0.01F);
      assertEquals((-1480.526F), matrix3_2.m00(), 0.01F);
      assertEquals((-1480.526F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m20(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m21(), 0.01F);
      assertEquals(1482.5111F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(1482.5111F, matrix3_2.m01(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals(0.99999F, matrix3_0.m01, 0.01F);
      assertEquals(456.47272F, matrix3_0.m22, 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m12, 0.01F);
      assertEquals(0.99999F, matrix3_0.m10, 0.01F);
      assertEquals(0.99999F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.99999F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1482.5111F, matrix3_1.m10, 0.01F);
      assertEquals(1482.5111F, matrix3_1.m21, 0.01F);
      assertEquals((-1480.526F), matrix3_1.m00, 0.01F);
      assertEquals((-1480.526F), matrix3_1.m11, 0.01F);
      assertEquals(1482.5111F, matrix3_1.m01, 0.01F);
      assertEquals(1482.5111F, matrix3_1.m20, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m01, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m10, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m21, 0.01F);
      assertEquals(1482.5111F, matrix3_2.m20, 0.01F);
      assertEquals((-1480.526F), matrix3_2.m00, 0.01F);
      assertEquals((-1480.526F), matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      
      Matrix3 matrix3_3 = matrix3_0.addLocal(matrix3_1);
      assertNotNull(matrix3_3);
      assertEquals(1.0E-5F, matrix3_0.m21(), 0.01F);
      assertEquals(1483.5111F, matrix3_0.m02(), 0.01F);
      assertEquals(1483.5111F, matrix3_0.m01(), 0.01F);
      assertEquals(1483.5111F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1479.526F), matrix3_0.m00(), 0.01F);
      assertEquals((-1479.526F), matrix3_0.m11(), 0.01F);
      assertEquals(457.47272F, matrix3_0.m22(), 0.01F);
      assertEquals(1483.5111F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1482.5111F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(1482.5111F, matrix3_1.m01(), 0.01F);
      assertEquals((-1480.526F), matrix3_1.m00(), 0.01F);
      assertEquals((-1480.526F), matrix3_1.m11(), 0.01F);
      assertEquals(1482.5111F, matrix3_1.m21(), 0.01F);
      assertEquals(1482.5111F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(1483.5111F, matrix3_3.m10(), 0.01F);
      assertEquals(1.0E-5F, matrix3_3.m21(), 0.01F);
      assertEquals(457.47272F, matrix3_3.m22(), 0.01F);
      assertEquals((-1479.526F), matrix3_3.m00(), 0.01F);
      assertEquals((-1479.526F), matrix3_3.m11(), 0.01F);
      assertEquals(1.0F, matrix3_3.m20(), 0.01F);
      assertEquals(1483.5111F, matrix3_3.m01(), 0.01F);
      assertEquals(1483.5111F, matrix3_3.m12(), 0.01F);
      assertEquals(1483.5111F, matrix3_3.m02(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(1483.5111F, matrix3_0.m10, 0.01F);
      assertEquals(1483.5111F, matrix3_0.m01, 0.01F);
      assertEquals(1483.5111F, matrix3_0.m12, 0.01F);
      assertEquals(1.0E-5F, matrix3_0.m21, 0.01F);
      assertEquals(1483.5111F, matrix3_0.m02, 0.01F);
      assertEquals((-1479.526F), matrix3_0.m00, 0.01F);
      assertEquals((-1479.526F), matrix3_0.m11, 0.01F);
      assertEquals(457.47272F, matrix3_0.m22, 0.01F);
      assertEquals(1482.5111F, matrix3_1.m10, 0.01F);
      assertEquals(1482.5111F, matrix3_1.m21, 0.01F);
      assertEquals((-1480.526F), matrix3_1.m00, 0.01F);
      assertEquals((-1480.526F), matrix3_1.m11, 0.01F);
      assertEquals(1482.5111F, matrix3_1.m01, 0.01F);
      assertEquals(1482.5111F, matrix3_1.m20, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_3.m20, 0.01F);
      assertEquals((-1479.526F), matrix3_3.m00, 0.01F);
      assertEquals((-1479.526F), matrix3_3.m11, 0.01F);
      assertEquals(1483.5111F, matrix3_3.m01, 0.01F);
      assertEquals(1483.5111F, matrix3_3.m12, 0.01F);
      assertEquals(1483.5111F, matrix3_3.m02, 0.01F);
      assertEquals(457.47272F, matrix3_3.m22, 0.01F);
      assertEquals(1483.5111F, matrix3_3.m10, 0.01F);
      assertEquals(1.0E-5F, matrix3_3.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_3, matrix3_2);
      assertSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, (-1308.111F), (-1308.111F), 48.87661F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.add((IMatrix3) matrix3_0, matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(2560.24F, matrix3_0.m22(), 0.01F);
      assertEquals(50.87661F, matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals((-1306.111F), matrix3_0.m11(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m20(), 0.01F);
      assertEquals(50.87661F, matrix3_1.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(2560.24F, matrix3_1.m22(), 0.01F);
      assertEquals((-1306.111F), matrix3_1.m11(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_1.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals((-1306.111F), matrix3_0.m11, 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(2560.24F, matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(50.87661F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(2560.24F, matrix3_1.m22, 0.01F);
      assertEquals(48.87661F, matrix3_1.m10, 0.01F);
      assertEquals(48.87661F, matrix3_1.m01, 0.01F);
      assertEquals((-1306.111F), matrix3_1.m11, 0.01F);
      assertEquals(48.87661F, matrix3_1.m02, 0.01F);
      assertEquals(48.87661F, matrix3_1.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m21, 0.01F);
      assertEquals(50.87661F, matrix3_1.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(1.0955675F, (-3703.0F), 1.050625F, (-3703.0F), 1.050625F, 1.050625F, 1.0955675F, 1.0955675F, (-3703.0F));
      assertNotNull(matrix3_0);
      assertEquals(1.0955675F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0955675F, matrix3_0.m00(), 0.01F);
      assertEquals((-3703.0F), matrix3_0.m10(), 0.01F);
      assertEquals(1.050625F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0955675F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-3703.0F), matrix3_0.m22(), 0.01F);
      assertEquals(1.050625F, matrix3_0.m21(), 0.01F);
      assertEquals(1.050625F, matrix3_0.m11(), 0.01F);
      assertEquals((-3703.0F), matrix3_0.m01(), 0.01F);
      assertEquals(1.050625F, matrix3_0.m20, 0.01F);
      assertEquals((-3703.0F), matrix3_0.m01, 0.01F);
      assertEquals((-3703.0F), matrix3_0.m22, 0.01F);
      assertEquals(1.0955675F, matrix3_0.m00, 0.01F);
      assertEquals(1.050625F, matrix3_0.m11, 0.01F);
      assertEquals(1.050625F, matrix3_0.m21, 0.01F);
      assertEquals(1.0955675F, matrix3_0.m12, 0.01F);
      assertEquals((-3703.0F), matrix3_0.m10, 0.01F);
      assertEquals(1.0955675F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToZero();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_1.add((IMatrix3) matrix3_0, matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      assertSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_1);
      assertSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-3296.0F), (-1308.111F), (-3697.92F), (-700.68F), (-3296.0F), (-1.0F), (-1308.111F), 3.1415927F, (-700.68F));
      assertNotNull(matrix3_0);
      assertEquals((-700.68F), matrix3_0.m22(), 0.01F);
      assertEquals((-3697.92F), matrix3_0.m20(), 0.01F);
      assertEquals((-700.68F), matrix3_0.m01(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m10(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m12(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02, 0.01F);
      assertEquals((-3697.92F), matrix3_0.m20, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11, 0.01F);
      assertEquals((-700.68F), matrix3_0.m01, 0.01F);
      assertEquals((-700.68F), matrix3_0.m22, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10, 0.01F);
      assertEquals((-1.0F), matrix3_0.m21, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.add((IMatrix3) matrix3_0, matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals((-1401.36F), matrix3_0.m10(), 0.01F);
      assertEquals((-1401.36F), matrix3_0.m22(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m12(), 0.01F);
      assertEquals((-2616.222F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(6.2831855F, matrix3_0.m21(), 0.01F);
      assertEquals((-6592.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-6592.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-7395.84F), matrix3_0.m02(), 0.01F);
      assertEquals((-2616.222F), matrix3_0.m20(), 0.01F);
      assertEquals((-1401.36F), matrix3_1.m22(), 0.01F);
      assertEquals((-2616.222F), matrix3_1.m01(), 0.01F);
      assertEquals((-1401.36F), matrix3_1.m10(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m12(), 0.01F);
      assertEquals((-7395.84F), matrix3_1.m02(), 0.01F);
      assertEquals((-6592.0F), matrix3_1.m00(), 0.01F);
      assertEquals((-6592.0F), matrix3_1.m11(), 0.01F);
      assertEquals((-2616.222F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(6.2831855F, matrix3_1.m21(), 0.01F);
      assertEquals(6.2831855F, matrix3_0.m21, 0.01F);
      assertEquals((-2616.222F), matrix3_0.m20, 0.01F);
      assertEquals((-7395.84F), matrix3_0.m02, 0.01F);
      assertEquals((-2.0F), matrix3_0.m12, 0.01F);
      assertEquals((-6592.0F), matrix3_0.m00, 0.01F);
      assertEquals((-6592.0F), matrix3_0.m11, 0.01F);
      assertEquals((-1401.36F), matrix3_0.m22, 0.01F);
      assertEquals((-2616.222F), matrix3_0.m01, 0.01F);
      assertEquals((-1401.36F), matrix3_0.m10, 0.01F);
      assertEquals((-2616.222F), matrix3_1.m20, 0.01F);
      assertEquals((-7395.84F), matrix3_1.m02, 0.01F);
      assertEquals((-6592.0F), matrix3_1.m00, 0.01F);
      assertEquals((-6592.0F), matrix3_1.m11, 0.01F);
      assertEquals(6.2831855F, matrix3_1.m21, 0.01F);
      assertEquals((-1401.36F), matrix3_1.m10, 0.01F);
      assertEquals((-1401.36F), matrix3_1.m22, 0.01F);
      assertEquals((-2616.222F), matrix3_1.m01, 0.01F);
      assertEquals((-2.0F), matrix3_1.m12, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      
      float float0 = matrix3_1.approximateUniformScale();
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      
      Matrix3 matrix3_2 = Matrix3.IDENTITY;
      assertNotNull(matrix3_2);
      assertTrue(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
      
      matrix3_1.setRow(2, vector3_0);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      
      Matrix3 matrix3_3 = Matrix3.IDENTITY;
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m10(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_2);
      
      Matrix3 matrix3_4 = matrix3_1.add((IMatrix3) matrix3_3, matrix3_3);
      assertNotNull(matrix3_4);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(2.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(2.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m10(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertEquals(0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(2.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(2.0F, matrix3_4.m11(), 0.01F);
      assertEquals(0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(0.0F, matrix3_4.m12(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertFalse(matrix3_4.equals((Object)matrix3_0));
      assertFalse(matrix3_4.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(2.0F, matrix3_3.m00, 0.01F);
      assertEquals(2.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertEquals(0.0F, matrix3_4.m01, 0.01F);
      assertEquals(0.0F, matrix3_4.m12, 0.01F);
      assertEquals(2.0F, matrix3_4.m00, 0.01F);
      assertEquals(2.0F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(0.0F, matrix3_4.m10, 0.01F);
      assertEquals(0.0F, matrix3_4.m21, 0.01F);
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertSame(matrix3_3, matrix3_4);
      assertSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_4, matrix3_0);
      assertSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_1);
      assertSame(matrix3_4, matrix3_2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3((-237.44F), (-106336.195F), (-1755.89F), (-2755.2F), (-2760.62F), 3.3768487F, (-3400.0F), 225.6463F, (-237.44F));
      assertNotNull(matrix3_1);
      assertEquals((-237.44F), matrix3_1.m00(), 0.01F);
      assertEquals((-237.44F), matrix3_1.m22(), 0.01F);
      assertEquals((-2760.62F), matrix3_1.m11(), 0.01F);
      assertEquals((-2755.2F), matrix3_1.m01(), 0.01F);
      assertEquals(3.3768487F, matrix3_1.m21(), 0.01F);
      assertEquals((-106336.195F), matrix3_1.m10(), 0.01F);
      assertEquals(225.6463F, matrix3_1.m12(), 0.01F);
      assertEquals((-3400.0F), matrix3_1.m02(), 0.01F);
      assertEquals((-1755.89F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals((-2755.2F), matrix3_1.m01, 0.01F);
      assertEquals((-106336.195F), matrix3_1.m10, 0.01F);
      assertEquals((-3400.0F), matrix3_1.m02, 0.01F);
      assertEquals(3.3768487F, matrix3_1.m21, 0.01F);
      assertEquals(225.6463F, matrix3_1.m12, 0.01F);
      assertEquals((-1755.89F), matrix3_1.m20, 0.01F);
      assertEquals((-237.44F), matrix3_1.m00, 0.01F);
      assertEquals((-237.44F), matrix3_1.m22, 0.01F);
      assertEquals((-2760.62F), matrix3_1.m11, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_0.add((IMatrix3) matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-237.44F), matrix3_1.m00(), 0.01F);
      assertEquals((-237.44F), matrix3_1.m22(), 0.01F);
      assertEquals((-2760.62F), matrix3_1.m11(), 0.01F);
      assertEquals((-2755.2F), matrix3_1.m01(), 0.01F);
      assertEquals(3.3768487F, matrix3_1.m21(), 0.01F);
      assertEquals((-106336.195F), matrix3_1.m10(), 0.01F);
      assertEquals(225.6463F, matrix3_1.m12(), 0.01F);
      assertEquals((-3400.0F), matrix3_1.m02(), 0.01F);
      assertEquals((-1755.89F), matrix3_1.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-236.44F), matrix3_2.m00(), 0.01F);
      assertEquals((-236.44F), matrix3_2.m22(), 0.01F);
      assertEquals((-106336.195F), matrix3_2.m01(), 0.01F);
      assertEquals((-1755.89F), matrix3_2.m02(), 0.01F);
      assertEquals(225.6463F, matrix3_2.m21(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals((-3400.0F), matrix3_2.m20(), 0.01F);
      assertEquals((-2755.2F), matrix3_2.m10(), 0.01F);
      assertEquals((-2759.62F), matrix3_2.m11(), 0.01F);
      assertEquals(3.3768487F, matrix3_2.m12(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals((-2755.2F), matrix3_1.m01, 0.01F);
      assertEquals((-106336.195F), matrix3_1.m10, 0.01F);
      assertEquals((-3400.0F), matrix3_1.m02, 0.01F);
      assertEquals(3.3768487F, matrix3_1.m21, 0.01F);
      assertEquals(225.6463F, matrix3_1.m12, 0.01F);
      assertEquals((-1755.89F), matrix3_1.m20, 0.01F);
      assertEquals((-237.44F), matrix3_1.m00, 0.01F);
      assertEquals((-237.44F), matrix3_1.m22, 0.01F);
      assertEquals((-2760.62F), matrix3_1.m11, 0.01F);
      assertEquals(3.3768487F, matrix3_2.m12, 0.01F);
      assertEquals((-3400.0F), matrix3_2.m20, 0.01F);
      assertEquals((-2759.62F), matrix3_2.m11, 0.01F);
      assertEquals((-2755.2F), matrix3_2.m10, 0.01F);
      assertEquals((-1755.89F), matrix3_2.m02, 0.01F);
      assertEquals(225.6463F, matrix3_2.m21, 0.01F);
      assertEquals((-236.44F), matrix3_2.m00, 0.01F);
      assertEquals((-236.44F), matrix3_2.m22, 0.01F);
      assertEquals((-106336.195F), matrix3_2.m01, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      matrix3_0.setColumn(0, 3220.4526F, 333.3124F, 1873.832F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(3220.4526F, matrix3_0.m00(), 0.01F);
      assertEquals(1873.832F, matrix3_0.m02(), 0.01F);
      assertEquals(333.3124F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(333.3124F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(3220.4526F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1873.832F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.add((IMatrix3) matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(3220.4526F, matrix3_0.m00(), 0.01F);
      assertEquals(1873.832F, matrix3_0.m02(), 0.01F);
      assertEquals(333.3124F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(2.0F, matrix3_1.m22(), 0.01F);
      assertEquals(2.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(6440.9053F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(3747.664F, matrix3_1.m20(), 0.01F);
      assertEquals(666.6248F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(333.3124F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(3220.4526F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1873.832F, matrix3_0.m02, 0.01F);
      assertEquals(666.6248F, matrix3_1.m10, 0.01F);
      assertEquals(6440.9053F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(2.0F, matrix3_1.m11, 0.01F);
      assertEquals(2.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(3747.664F, matrix3_1.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.add((IMatrix3) matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(2.0F, matrix3_1.m00(), 0.01F);
      assertEquals(2.0F, matrix3_1.m22(), 0.01F);
      assertEquals(2.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(2.0F, matrix3_1.m00, 0.01F);
      assertEquals(2.0F, matrix3_1.m11, 0.01F);
      assertEquals(2.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = 1.0F;
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(1.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(1.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.add((IMatrix3) matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(2.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(2.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2362.901F), 458.9132F, (-2362.901F), 2657.36F, (-1888.7909F), (-1888.7909F), (-0.99999F), 2657.36F, 287.62375F);
      assertNotNull(matrix3_0);
      assertEquals(458.9132F, matrix3_0.m10(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m01(), 0.01F);
      assertEquals(2657.36F, matrix3_0.m12(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1888.7909F), matrix3_0.m21(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m22(), 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m21, 0.01F);
      assertEquals((-1888.7909F), matrix3_0.m11, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m02, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals(287.62375F, matrix3_0.m22, 0.01F);
      assertEquals(458.9132F, matrix3_0.m10, 0.01F);
      assertEquals(2657.36F, matrix3_0.m01, 0.01F);
      assertEquals(2657.36F, matrix3_0.m12, 0.01F);
      assertEquals((-2362.901F), matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToScale((-2362.901F), 287.62375F, 0.5F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals(0.5F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-2362.901F), matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(287.62375F, matrix3_1.m11(), 0.01F);
      assertEquals(0.5F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals(287.62375F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.5F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(287.62375F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.5F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-2362.901F), matrix3_1.m00, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = matrix3_0.add((IMatrix3) matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-2362.901F), matrix3_0.m00(), 0.01F);
      assertEquals(0.5F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(287.62375F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-2362.901F), matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(287.62375F, matrix3_1.m11(), 0.01F);
      assertEquals(0.5F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(575.2475F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals((-4725.802F), matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertEquals((-2362.901F), matrix3_0.m00, 0.01F);
      assertEquals(287.62375F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.5F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(287.62375F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.5F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-2362.901F), matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals((-4725.802F), matrix3_2.m00, 0.01F);
      assertEquals(575.2475F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_2, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Vector vector0 = matrix3_0.extractScale();
      assertNotNull(vector0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.transformVector((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.transformVector((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.transformPointLocal((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.transformPoint((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.transformPoint((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.transformLocal((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.transform((IVector3) null, vector3_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.transform((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setTranslation((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setToTranslation((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setToTransform((IVector) null, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setToTransform((IVector) null, (-3160.74F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setToScale((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setToRotation((IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setToRotation((IQuaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setRow(2681, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.IDENTITY.setColumn(2147482495, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = new Vector3(1.0F, 2966, 1.68006034E13F);
      assertNotNull(vector3_0);
      assertEquals(1.68006034E13F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(2.8226027E26F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(2966.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(2966.0F, vector3_0.y, 0.01F);
      assertEquals(1.68006034E13F, vector3_0.z, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.IDENTITY.setColumn(2966, vector3_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        matrix3_0.set(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.set((IMatrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.multLocal((IMatrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.multAffineLocal((IMatrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.multAffine((IMatrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.mult((IMatrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.lerpLocal((IMatrix3) null, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.lerpAffineLocal((IMatrix3) null, (-51.7F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.lerpAffine((IMatrix3) matrix3_0, 0.0F, (Matrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.lerpAffine((IMatrix3) null, (-942.96344F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.lerp((IMatrix3) null, (-1860.2F), matrix3_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.lerp((IMatrix3) null, 145.48F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.invertAffineLocal();
      assertNotNull(matrix3_1);
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(-0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(-0.0F, matrix3_1.m10, 0.01F);
      assertEquals(-0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.invert((Matrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.getRow(0, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.extractScale((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.addLocal((IMatrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.add((IMatrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Matrix3 matrix3_0 = null;
      try {
        matrix3_0 = new Matrix3((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Matrix3 matrix3_0 = null;
      try {
        matrix3_0 = new Matrix3((Matrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      
      matrix3_1.m11 = 0.0F;
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      
      boolean boolean0 = matrix3_0.equals(matrix3_1);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(1.0F, 0.0F, 1.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(1.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      
      boolean boolean0 = matrix3_0.equals(matrix3_1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(3652.21F, (-2752.573F), 2.7182817F, 665374.25F, (-246.2F), 0.0F, (-4432.375F), 0.0F, (-730.355F));
      assertNotNull(matrix3_0);
      assertEquals((-730.355F), matrix3_0.m22(), 0.01F);
      assertEquals((-4432.375F), matrix3_0.m02(), 0.01F);
      assertEquals(665374.25F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2.7182817F, matrix3_0.m20(), 0.01F);
      assertEquals(3652.21F, matrix3_0.m00(), 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10(), 0.01F);
      assertEquals((-246.2F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(3652.21F, matrix3_0.m00, 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10, 0.01F);
      assertEquals(665374.25F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m20, 0.01F);
      assertEquals((-246.2F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-730.355F), matrix3_0.m22, 0.01F);
      assertEquals((-4432.375F), matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals((-730.355F), matrix3_0.m22(), 0.01F);
      assertEquals((-4432.375F), matrix3_0.m02(), 0.01F);
      assertEquals(665374.25F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2.7182817F, matrix3_0.m20(), 0.01F);
      assertEquals(3652.21F, matrix3_0.m00(), 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10(), 0.01F);
      assertEquals((-246.2F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(665374.25F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(2.7182817F, matrix3_1.m20(), 0.01F);
      assertEquals((-2752.573F), matrix3_1.m10(), 0.01F);
      assertEquals(3652.21F, matrix3_1.m00(), 0.01F);
      assertEquals((-730.355F), matrix3_1.m22(), 0.01F);
      assertEquals((-4432.375F), matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-246.2F), matrix3_1.m11(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(3652.21F, matrix3_0.m00, 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10, 0.01F);
      assertEquals(665374.25F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m20, 0.01F);
      assertEquals((-246.2F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-730.355F), matrix3_0.m22, 0.01F);
      assertEquals((-4432.375F), matrix3_0.m02, 0.01F);
      assertEquals((-730.355F), matrix3_1.m22, 0.01F);
      assertEquals((-246.2F), matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(665374.25F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(2.7182817F, matrix3_1.m20, 0.01F);
      assertEquals((-2752.573F), matrix3_1.m10, 0.01F);
      assertEquals(3652.21F, matrix3_1.m00, 0.01F);
      assertEquals((-4432.375F), matrix3_1.m02, 0.01F);
      
      matrix3_1.m21 = 2763.5615F;
      assertEquals((-730.355F), matrix3_0.m22(), 0.01F);
      assertEquals((-4432.375F), matrix3_0.m02(), 0.01F);
      assertEquals(665374.25F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2.7182817F, matrix3_0.m20(), 0.01F);
      assertEquals(3652.21F, matrix3_0.m00(), 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10(), 0.01F);
      assertEquals((-246.2F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(665374.25F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(2.7182817F, matrix3_1.m20(), 0.01F);
      assertEquals((-2752.573F), matrix3_1.m10(), 0.01F);
      assertEquals(3652.21F, matrix3_1.m00(), 0.01F);
      assertEquals((-730.355F), matrix3_1.m22(), 0.01F);
      assertEquals((-4432.375F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-246.2F), matrix3_1.m11(), 0.01F);
      assertEquals(2763.5615F, matrix3_1.m21(), 0.01F);
      
      boolean boolean0 = matrix3_1.equals(matrix3_0);
      assertEquals((-730.355F), matrix3_0.m22(), 0.01F);
      assertEquals((-4432.375F), matrix3_0.m02(), 0.01F);
      assertEquals(665374.25F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(2.7182817F, matrix3_0.m20(), 0.01F);
      assertEquals(3652.21F, matrix3_0.m00(), 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10(), 0.01F);
      assertEquals((-246.2F), matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(665374.25F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(2.7182817F, matrix3_1.m20(), 0.01F);
      assertEquals((-2752.573F), matrix3_1.m10(), 0.01F);
      assertEquals(3652.21F, matrix3_1.m00(), 0.01F);
      assertEquals((-730.355F), matrix3_1.m22(), 0.01F);
      assertEquals((-4432.375F), matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-246.2F), matrix3_1.m11(), 0.01F);
      assertEquals(2763.5615F, matrix3_1.m21(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(3652.21F, matrix3_0.m00, 0.01F);
      assertEquals((-2752.573F), matrix3_0.m10, 0.01F);
      assertEquals(665374.25F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(2.7182817F, matrix3_0.m20, 0.01F);
      assertEquals((-246.2F), matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-730.355F), matrix3_0.m22, 0.01F);
      assertEquals((-4432.375F), matrix3_0.m02, 0.01F);
      assertEquals(2763.5615F, matrix3_1.m21, 0.01F);
      assertEquals((-730.355F), matrix3_1.m22, 0.01F);
      assertEquals((-246.2F), matrix3_1.m11, 0.01F);
      assertEquals(665374.25F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(2.7182817F, matrix3_1.m20, 0.01F);
      assertEquals((-2752.573F), matrix3_1.m10, 0.01F);
      assertEquals(3652.21F, matrix3_1.m00, 0.01F);
      assertEquals((-4432.375F), matrix3_1.m02, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.invertAffine((Matrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToZero();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      try { 
        matrix3_0.invert(matrix3_1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.invert(matrix3_0);
      assertNotNull(matrix3_2);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertNotNull(vector3_0);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      
      Matrix3 matrix3_3 = new Matrix3(matrix3_2);
      assertNotNull(matrix3_3);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(-0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_0));
      assertTrue(matrix3_3.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(-0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(-0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      
      Matrix3 matrix3_4 = Matrix3.IDENTITY;
      assertNotNull(matrix3_4);
      assertEquals(1.0F, matrix3_4.m00(), 0.01F);
      assertEquals(1.0F, matrix3_4.m22(), 0.01F);
      assertEquals(1.0F, matrix3_4.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m10(), 0.01F);
      assertEquals(0.0F, matrix3_4.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_4.m12(), 0.01F);
      assertTrue(matrix3_4.isAffine());
      assertEquals(0.0F, matrix3_4.m20(), 0.01F);
      assertTrue(matrix3_4.equals((Object)matrix3_1));
      assertTrue(matrix3_4.equals((Object)matrix3_3));
      assertEquals(0.0F, matrix3_4.m20, 0.01F);
      assertEquals(-0.0F, matrix3_4.m10, 0.01F);
      assertEquals(-0.0F, matrix3_4.m21, 0.01F);
      assertEquals(1.0F, matrix3_4.m00, 0.01F);
      assertEquals(1.0F, matrix3_4.m11, 0.01F);
      assertEquals(1.0F, matrix3_4.m22, 0.01F);
      assertEquals(-0.0F, matrix3_4.m01, 0.01F);
      assertEquals(-0.0F, matrix3_4.m12, 0.01F);
      assertEquals(0.0F, matrix3_4.m02, 0.01F);
      assertNotSame(matrix3_4, matrix3_3);
      assertNotSame(matrix3_4, matrix3_1);
      assertSame(matrix3_4, matrix3_2);
      assertSame(matrix3_4, matrix3_0);
      
      Matrix3 matrix3_5 = Matrix3.IDENTITY;
      assertNotNull(matrix3_5);
      assertEquals(0.0F, matrix3_5.m20(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m12(), 0.01F);
      assertEquals(1.0F, matrix3_5.m00(), 0.01F);
      assertEquals(1.0F, matrix3_5.m22(), 0.01F);
      assertEquals(1.0F, matrix3_5.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m10(), 0.01F);
      assertTrue(matrix3_5.isAffine());
      assertTrue(matrix3_5.equals((Object)matrix3_3));
      assertTrue(matrix3_5.equals((Object)matrix3_1));
      assertEquals(1.0F, matrix3_5.m00, 0.01F);
      assertEquals(1.0F, matrix3_5.m11, 0.01F);
      assertEquals(1.0F, matrix3_5.m22, 0.01F);
      assertEquals(-0.0F, matrix3_5.m01, 0.01F);
      assertEquals(-0.0F, matrix3_5.m12, 0.01F);
      assertEquals(-0.0F, matrix3_5.m10, 0.01F);
      assertEquals(-0.0F, matrix3_5.m21, 0.01F);
      assertEquals(0.0F, matrix3_5.m20, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertSame(matrix3_5, matrix3_4);
      assertNotSame(matrix3_5, matrix3_1);
      assertSame(matrix3_5, matrix3_0);
      assertNotSame(matrix3_5, matrix3_3);
      assertSame(matrix3_5, matrix3_2);
      
      Matrix3 matrix3_6 = matrix3_5.setTranslation(0.0F, 2.0F);
      assertNotNull(matrix3_6);
      assertEquals(0.0F, matrix3_5.m20(), 0.01F);
      assertEquals(0.0F, matrix3_5.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m12(), 0.01F);
      assertEquals(1.0F, matrix3_5.m00(), 0.01F);
      assertEquals(1.0F, matrix3_5.m22(), 0.01F);
      assertEquals(1.0F, matrix3_5.m11(), 0.01F);
      assertEquals(2.0F, matrix3_5.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_5.m10(), 0.01F);
      assertTrue(matrix3_5.isAffine());
      assertEquals(0.0F, matrix3_6.m20(), 0.01F);
      assertTrue(matrix3_6.isAffine());
      assertEquals(-0.0F, matrix3_6.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_6.m12(), 0.01F);
      assertEquals(1.0F, matrix3_6.m00(), 0.01F);
      assertEquals(1.0F, matrix3_6.m22(), 0.01F);
      assertEquals(1.0F, matrix3_6.m11(), 0.01F);
      assertEquals(0.0F, matrix3_6.m02(), 0.01F);
      assertEquals(2.0F, matrix3_6.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_6.m10(), 0.01F);
      assertFalse(matrix3_5.equals((Object)matrix3_1));
      assertFalse(matrix3_5.equals((Object)matrix3_3));
      assertFalse(matrix3_6.equals((Object)matrix3_1));
      assertFalse(matrix3_6.equals((Object)matrix3_3));
      assertEquals(1.0F, matrix3_5.m00, 0.01F);
      assertEquals(1.0F, matrix3_5.m11, 0.01F);
      assertEquals(1.0F, matrix3_5.m22, 0.01F);
      assertEquals(-0.0F, matrix3_5.m01, 0.01F);
      assertEquals(-0.0F, matrix3_5.m12, 0.01F);
      assertEquals(-0.0F, matrix3_5.m10, 0.01F);
      assertEquals(2.0F, matrix3_5.m21, 0.01F);
      assertEquals(0.0F, matrix3_5.m20, 0.01F);
      assertEquals(0.0F, matrix3_5.m02, 0.01F);
      assertEquals(1.0F, matrix3_6.m00, 0.01F);
      assertEquals(1.0F, matrix3_6.m11, 0.01F);
      assertEquals(1.0F, matrix3_6.m22, 0.01F);
      assertEquals(-0.0F, matrix3_6.m01, 0.01F);
      assertEquals(-0.0F, matrix3_6.m12, 0.01F);
      assertEquals(0.0F, matrix3_6.m02, 0.01F);
      assertEquals(-0.0F, matrix3_6.m10, 0.01F);
      assertEquals(2.0F, matrix3_6.m21, 0.01F);
      assertEquals(0.0F, matrix3_6.m20, 0.01F);
      assertSame(matrix3_5, matrix3_4);
      assertNotSame(matrix3_5, matrix3_1);
      assertSame(matrix3_5, matrix3_6);
      assertSame(matrix3_5, matrix3_0);
      assertNotSame(matrix3_5, matrix3_3);
      assertSame(matrix3_5, matrix3_2);
      assertSame(matrix3_6, matrix3_4);
      assertNotSame(matrix3_6, matrix3_1);
      assertSame(matrix3_6, matrix3_2);
      assertSame(matrix3_6, matrix3_0);
      assertNotSame(matrix3_6, matrix3_3);
      assertSame(matrix3_6, matrix3_5);
      
      boolean boolean0 = matrix3_3.isAffine();
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertTrue(matrix3_2.isAffine());
      assertEquals(-0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(1.0F, matrix3_2.m00(), 0.01F);
      assertEquals(1.0F, matrix3_2.m22(), 0.01F);
      assertEquals(1.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(2.0F, matrix3_2.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(1.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(1.0F, matrix3_3.m11(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_4));
      assertFalse(matrix3_1.equals((Object)matrix3_5));
      assertFalse(matrix3_1.equals((Object)matrix3_6));
      assertFalse(matrix3_2.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertTrue(matrix3_3.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_6));
      assertFalse(matrix3_3.equals((Object)matrix3_4));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_5));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(-0.0F, matrix3_2.m10, 0.01F);
      assertEquals(2.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(1.0F, matrix3_2.m00, 0.01F);
      assertEquals(1.0F, matrix3_2.m11, 0.01F);
      assertEquals(1.0F, matrix3_2.m22, 0.01F);
      assertEquals(-0.0F, matrix3_2.m01, 0.01F);
      assertEquals(-0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(-0.0F, matrix3_3.m01, 0.01F);
      assertEquals(-0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(-0.0F, matrix3_3.m10, 0.01F);
      assertEquals(-0.0F, matrix3_3.m21, 0.01F);
      assertEquals(1.0F, matrix3_3.m00, 0.01F);
      assertEquals(1.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertTrue(boolean0);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_6);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(matrix3_0, matrix3_5);
      assertSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_2, matrix3_3);
      assertSame(matrix3_2, matrix3_6);
      assertSame(matrix3_2, matrix3_4);
      assertSame(matrix3_2, matrix3_0);
      assertSame(matrix3_2, matrix3_5);
      assertNotSame(matrix3_2, matrix3_1);
      assertNotSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_6);
      assertNotSame(matrix3_3, matrix3_4);
      assertNotSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_5);
      
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      assertNotNull(vector3_1);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertNotSame(vector3_1, vector3_0);
      
      Vector3 vector3_2 = (Vector3)Vector3.NORMAL_XYZ;
      assertNotNull(vector3_2);
      assertEquals(0.99999994F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_2.x(), 0.01F);
      assertEquals(0.57735026F, vector3_2.y(), 0.01F);
      assertEquals(0.57735026F, vector3_2.z(), 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals(0.57735026F, vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.x, 0.01F);
      assertEquals(0.57735026F, vector3_2.y, 0.01F);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      
      float float0 = matrix3_1.extractRotation();
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_4));
      assertFalse(matrix3_1.equals((Object)matrix3_5));
      assertFalse(matrix3_1.equals((Object)matrix3_6));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_6);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(matrix3_0, matrix3_5);
      assertSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_6);
      
      Matrix3 matrix3_7 = new Matrix3();
      assertNotNull(matrix3_7);
      assertEquals(1.0F, matrix3_7.m00(), 0.01F);
      assertEquals(1.0F, matrix3_7.m22(), 0.01F);
      assertEquals(1.0F, matrix3_7.m11(), 0.01F);
      assertEquals(0.0F, matrix3_7.m01(), 0.01F);
      assertEquals(0.0F, matrix3_7.m12(), 0.01F);
      assertEquals(0.0F, matrix3_7.m02(), 0.01F);
      assertTrue(matrix3_7.isAffine());
      assertEquals(0.0F, matrix3_7.m20(), 0.01F);
      assertEquals(0.0F, matrix3_7.m21(), 0.01F);
      assertEquals(0.0F, matrix3_7.m10(), 0.01F);
      assertFalse(matrix3_7.equals((Object)matrix3_2));
      assertTrue(matrix3_7.equals((Object)matrix3_1));
      assertFalse(matrix3_7.equals((Object)matrix3_4));
      assertFalse(matrix3_7.equals((Object)matrix3_6));
      assertFalse(matrix3_7.equals((Object)matrix3_5));
      assertTrue(matrix3_7.equals((Object)matrix3_3));
      assertFalse(matrix3_7.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_7.m20, 0.01F);
      assertEquals(0.0F, matrix3_7.m02, 0.01F);
      assertEquals(0.0F, matrix3_7.m01, 0.01F);
      assertEquals(0.0F, matrix3_7.m12, 0.01F);
      assertEquals(1.0F, matrix3_7.m00, 0.01F);
      assertEquals(1.0F, matrix3_7.m11, 0.01F);
      assertEquals(1.0F, matrix3_7.m22, 0.01F);
      assertEquals(0.0F, matrix3_7.m10, 0.01F);
      assertEquals(0.0F, matrix3_7.m21, 0.01F);
      
      Matrix3 matrix3_8 = matrix3_1.lerp((IMatrix3) matrix3_7, 1.3450497F);
      assertNotNull(matrix3_8);
      assertEquals(-0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m21(), 0.01F);
      assertEquals(-0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_7.m00(), 0.01F);
      assertEquals(1.0F, matrix3_7.m22(), 0.01F);
      assertEquals(1.0F, matrix3_7.m11(), 0.01F);
      assertEquals(0.0F, matrix3_7.m01(), 0.01F);
      assertEquals(0.0F, matrix3_7.m12(), 0.01F);
      assertEquals(0.0F, matrix3_7.m02(), 0.01F);
      assertTrue(matrix3_7.isAffine());
      assertEquals(0.0F, matrix3_7.m20(), 0.01F);
      assertEquals(0.0F, matrix3_7.m21(), 0.01F);
      assertEquals(0.0F, matrix3_7.m10(), 0.01F);
      assertEquals(0.0F, matrix3_8.m20(), 0.01F);
      assertTrue(matrix3_8.isAffine());
      assertEquals(0.0F, matrix3_8.m02(), 0.01F);
      assertEquals(0.0F, matrix3_8.m01(), 0.01F);
      assertEquals(0.0F, matrix3_8.m12(), 0.01F);
      assertEquals(1.0F, matrix3_8.m00(), 0.01F);
      assertEquals(1.0F, matrix3_8.m22(), 0.01F);
      assertEquals(1.0F, matrix3_8.m11(), 0.01F);
      assertEquals(0.0F, matrix3_8.m21(), 0.01F);
      assertEquals(0.0F, matrix3_8.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_7));
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_1.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_4));
      assertTrue(matrix3_1.equals((Object)matrix3_7));
      assertFalse(matrix3_1.equals((Object)matrix3_5));
      assertFalse(matrix3_1.equals((Object)matrix3_6));
      assertFalse(matrix3_7.equals((Object)matrix3_2));
      assertTrue(matrix3_7.equals((Object)matrix3_1));
      assertFalse(matrix3_7.equals((Object)matrix3_4));
      assertFalse(matrix3_7.equals((Object)matrix3_6));
      assertFalse(matrix3_7.equals((Object)matrix3_5));
      assertTrue(matrix3_7.equals((Object)matrix3_3));
      assertFalse(matrix3_7.equals((Object)matrix3_0));
      assertFalse(matrix3_8.equals((Object)matrix3_5));
      assertTrue(matrix3_8.equals((Object)matrix3_7));
      assertFalse(matrix3_8.equals((Object)matrix3_0));
      assertTrue(matrix3_8.equals((Object)matrix3_3));
      assertTrue(matrix3_8.equals((Object)matrix3_1));
      assertFalse(matrix3_8.equals((Object)matrix3_2));
      assertFalse(matrix3_8.equals((Object)matrix3_4));
      assertFalse(matrix3_8.equals((Object)matrix3_6));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(-0.0F, matrix3_0.m01, 0.01F);
      assertEquals(-0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(-0.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_7.m20, 0.01F);
      assertEquals(0.0F, matrix3_7.m02, 0.01F);
      assertEquals(0.0F, matrix3_7.m01, 0.01F);
      assertEquals(0.0F, matrix3_7.m12, 0.01F);
      assertEquals(1.0F, matrix3_7.m00, 0.01F);
      assertEquals(1.0F, matrix3_7.m11, 0.01F);
      assertEquals(1.0F, matrix3_7.m22, 0.01F);
      assertEquals(0.0F, matrix3_7.m10, 0.01F);
      assertEquals(0.0F, matrix3_7.m21, 0.01F);
      assertEquals(0.0F, matrix3_8.m10, 0.01F);
      assertEquals(0.0F, matrix3_8.m21, 0.01F);
      assertEquals(1.0F, matrix3_8.m00, 0.01F);
      assertEquals(1.0F, matrix3_8.m11, 0.01F);
      assertEquals(1.0F, matrix3_8.m22, 0.01F);
      assertEquals(0.0F, matrix3_8.m20, 0.01F);
      assertEquals(0.0F, matrix3_8.m01, 0.01F);
      assertEquals(0.0F, matrix3_8.m12, 0.01F);
      assertEquals(0.0F, matrix3_8.m02, 0.01F);
      assertNotSame(matrix3_0, matrix3_7);
      assertSame(matrix3_0, matrix3_2);
      assertSame(matrix3_0, matrix3_6);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_8);
      assertSame(matrix3_0, matrix3_5);
      assertSame(matrix3_0, matrix3_4);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_8);
      assertNotSame(matrix3_1, matrix3_7);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_4);
      assertNotSame(matrix3_1, matrix3_5);
      assertNotSame(matrix3_1, matrix3_6);
      assertNotSame(matrix3_7, matrix3_2);
      assertNotSame(matrix3_7, matrix3_4);
      assertNotSame(matrix3_7, matrix3_6);
      assertNotSame(matrix3_7, matrix3_5);
      assertNotSame(matrix3_7, matrix3_1);
      assertNotSame(matrix3_7, matrix3_0);
      assertNotSame(matrix3_7, matrix3_3);
      assertNotSame(matrix3_7, matrix3_8);
      assertNotSame(matrix3_8, matrix3_5);
      assertNotSame(matrix3_8, matrix3_1);
      assertNotSame(matrix3_8, matrix3_0);
      assertNotSame(matrix3_8, matrix3_3);
      assertNotSame(matrix3_8, matrix3_7);
      assertNotSame(matrix3_8, matrix3_2);
      assertNotSame(matrix3_8, matrix3_4);
      assertNotSame(matrix3_8, matrix3_6);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2.0F, 2.0F, 2.0F, (-0.99999F), (-1308.111F), (-1308.111F), 2.0F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      
      matrix3_0.setColumn(1, 3367.1833F, (-1.0F), (-2618.1958F));
      assertEquals((-2618.1958F), matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(3367.1833F, matrix3_0.m10(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertEquals(3367.1833F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals((-0.99999F), matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2618.1958F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      matrix3_0.setRow(0, 7.99996F, 1417.9F, 0.0F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(7.99996F, matrix3_0.m00(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1417.9F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1417.9F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(7.99996F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setRow(2104, 2025.39F, (float) 2104, 2025.39F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToIdentity();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-1.0F), (-1.0F), (-1210.3091F), (-1633.3542F), (-1633.3542F), 0.0F, (-1.0F), (-1210.3091F), 2266.3F);
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m10(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m00(), 0.01F);
      assertEquals(2266.3F, matrix3_0.m22(), 0.01F);
      assertEquals((-1210.3091F), matrix3_0.m12(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-1633.3542F), matrix3_0.m01(), 0.01F);
      assertEquals((-1633.3542F), matrix3_0.m11(), 0.01F);
      assertEquals((-1210.3091F), matrix3_0.m20(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m02, 0.01F);
      assertEquals((-1633.3542F), matrix3_0.m11, 0.01F);
      assertEquals((-1633.3542F), matrix3_0.m01, 0.01F);
      assertEquals((-1210.3091F), matrix3_0.m20, 0.01F);
      assertEquals(2266.3F, matrix3_0.m22, 0.01F);
      assertEquals((-1.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1210.3091F), matrix3_0.m12, 0.01F);
      
      float float0 = matrix3_0.m21();
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m10(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m00(), 0.01F);
      assertEquals(2266.3F, matrix3_0.m22(), 0.01F);
      assertEquals((-1210.3091F), matrix3_0.m12(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m02(), 0.01F);
      assertEquals((-1633.3542F), matrix3_0.m01(), 0.01F);
      assertEquals((-1633.3542F), matrix3_0.m11(), 0.01F);
      assertEquals((-1210.3091F), matrix3_0.m20(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m02, 0.01F);
      assertEquals((-1633.3542F), matrix3_0.m11, 0.01F);
      assertEquals((-1633.3542F), matrix3_0.m01, 0.01F);
      assertEquals((-1210.3091F), matrix3_0.m20, 0.01F);
      assertEquals(2266.3F, matrix3_0.m22, 0.01F);
      assertEquals((-1.0F), matrix3_0.m00, 0.01F);
      assertEquals((-1.0F), matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals((-1210.3091F), matrix3_0.m12, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      float float0 = matrix3_0.m11();
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float float0 = matrix3_0.m12();
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2.0F, 2.0F, 2.0F, 2.0F, (-1308.111F), (-1308.111F), 2.0F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m01(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(2.0F, matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      
      float float0 = matrix3_0.m02();
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals(2.0F, matrix3_0.m01(), 0.01F);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(2.0F, matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-1.0F), 5230.4097F, 5230.4097F, 5230.4097F, 208.0F, 1114.0F, 5230.4097F, 5230.4097F, 3.1415927F);
      assertNotNull(matrix3_0);
      assertEquals(1114.0F, matrix3_0.m21(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m02(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m20(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m22(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m01(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1.0F), matrix3_0.m00(), 0.01F);
      assertEquals(208.0F, matrix3_0.m11(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m10(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m01, 0.01F);
      assertEquals(5230.4097F, matrix3_0.m12, 0.01F);
      assertEquals(5230.4097F, matrix3_0.m10, 0.01F);
      assertEquals((-1.0F), matrix3_0.m00, 0.01F);
      assertEquals(208.0F, matrix3_0.m11, 0.01F);
      assertEquals(5230.4097F, matrix3_0.m02, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m22, 0.01F);
      assertEquals(5230.4097F, matrix3_0.m20, 0.01F);
      assertEquals(1114.0F, matrix3_0.m21, 0.01F);
      
      float float0 = matrix3_0.m20();
      assertEquals(1114.0F, matrix3_0.m21(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m02(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m20(), 0.01F);
      assertEquals(3.1415927F, matrix3_0.m22(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m01(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-1.0F), matrix3_0.m00(), 0.01F);
      assertEquals(208.0F, matrix3_0.m11(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m10(), 0.01F);
      assertEquals(5230.4097F, matrix3_0.m01, 0.01F);
      assertEquals(5230.4097F, matrix3_0.m12, 0.01F);
      assertEquals(5230.4097F, matrix3_0.m10, 0.01F);
      assertEquals((-1.0F), matrix3_0.m00, 0.01F);
      assertEquals(208.0F, matrix3_0.m11, 0.01F);
      assertEquals(5230.4097F, matrix3_0.m02, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m22, 0.01F);
      assertEquals(5230.4097F, matrix3_0.m20, 0.01F);
      assertEquals(1114.0F, matrix3_0.m21, 0.01F);
      assertEquals(5230.4097F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToTranslation(0.0F, 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.transpose((Matrix3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.set((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.mult((IMatrix3) null, matrix3_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.multAffine((IMatrix3) null, matrix3_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.add((IMatrix3) null, matrix3_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      float float0 = matrix3_0.m00();
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-3296.0F), (-1308.111F), (-3697.92F), (-700.68F), (-3296.0F), (-1.0F), (-1308.111F), 3.1415927F, (-700.68F));
      assertNotNull(matrix3_0);
      assertEquals(3.1415927F, matrix3_0.m12(), 0.01F);
      assertEquals((-3697.92F), matrix3_0.m20(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-700.68F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-700.68F), matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02(), 0.01F);
      assertEquals((-3697.92F), matrix3_0.m20, 0.01F);
      assertEquals((-1.0F), matrix3_0.m21, 0.01F);
      assertEquals((-700.68F), matrix3_0.m22, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11, 0.01F);
      assertEquals((-700.68F), matrix3_0.m01, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m12, 0.01F);
      
      float float0 = matrix3_0.m10();
      assertEquals(3.1415927F, matrix3_0.m12(), 0.01F);
      assertEquals((-3697.92F), matrix3_0.m20(), 0.01F);
      assertEquals((-1.0F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-700.68F), matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-700.68F), matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02(), 0.01F);
      assertEquals((-3697.92F), matrix3_0.m20, 0.01F);
      assertEquals((-1.0F), matrix3_0.m21, 0.01F);
      assertEquals((-700.68F), matrix3_0.m22, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m00, 0.01F);
      assertEquals((-3296.0F), matrix3_0.m11, 0.01F);
      assertEquals((-700.68F), matrix3_0.m01, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m10, 0.01F);
      assertEquals(3.1415927F, matrix3_0.m12, 0.01F);
      assertEquals((-1308.111F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(0.0F, 0.0F, 643.3493F, (-1807.3129F), (-1807.3129F), 643.3493F, 0.0F, (-3640.0F), (-3.4028235E38F));
      assertNotNull(matrix3_0);
      assertEquals((-3640.0F), matrix3_0.m12(), 0.01F);
      assertEquals(643.3493F, matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m22(), 0.01F);
      assertEquals(643.3493F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-1807.3129F), matrix3_0.m01(), 0.01F);
      assertEquals((-1807.3129F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(643.3493F, matrix3_0.m20, 0.01F);
      assertEquals((-1807.3129F), matrix3_0.m01, 0.01F);
      assertEquals((-1807.3129F), matrix3_0.m11, 0.01F);
      assertEquals(643.3493F, matrix3_0.m21, 0.01F);
      assertEquals((-3640.0F), matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      
      float float0 = matrix3_0.m01();
      assertEquals((-3640.0F), matrix3_0.m12(), 0.01F);
      assertEquals(643.3493F, matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m22(), 0.01F);
      assertEquals(643.3493F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-1807.3129F), matrix3_0.m01(), 0.01F);
      assertEquals((-1807.3129F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(643.3493F, matrix3_0.m20, 0.01F);
      assertEquals((-1807.3129F), matrix3_0.m01, 0.01F);
      assertEquals((-1807.3129F), matrix3_0.m11, 0.01F);
      assertEquals(643.3493F, matrix3_0.m21, 0.01F);
      assertEquals((-3640.0F), matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals((-1807.3129F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setToRotation(1.3832449F, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector vector0 = new Vector((-1.0F), (-752.1668F));
      assertNotNull(vector0);
      assertEquals((-752.1668F), vector0.y(), 0.01F);
      assertEquals((-1.0F), vector0.x(), 0.01F);
      assertEquals((-752.1668F), vector0.y, 0.01F);
      assertEquals((-1.0F), vector0.x, 0.01F);
      
      Vector vector1 = matrix3_0.transformPoint((IVector) vector0, vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.setToScale(0.0F);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      Matrix3 matrix3_2 = new Matrix3(matrix3_1);
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertTrue(matrix3_2.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      
      Matrix3 matrix3_3 = matrix3_2.lerpAffine((IMatrix3) matrix3_0, 0.0F, matrix3_0);
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m00(), 0.01F);
      assertEquals(1.0F, matrix3_3.m22(), 0.01F);
      assertEquals(0.0F, matrix3_3.m11(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertTrue(matrix3_3.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertEquals(0.0F, matrix3_3.m00, 0.01F);
      assertEquals(0.0F, matrix3_3.m11, 0.01F);
      assertEquals(1.0F, matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_3, matrix3_0);
      assertNotSame(matrix3_3, matrix3_2);
      assertSame(matrix3_3, matrix3_1);
      
      boolean boolean0 = matrix3_1.equals(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m00(), 0.01F);
      assertEquals(0.0F, matrix3_2.m22(), 0.01F);
      assertEquals(0.0F, matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_2.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals(0.0F, matrix3_2.m00, 0.01F);
      assertEquals(0.0F, matrix3_2.m11, 0.01F);
      assertEquals(0.0F, matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertFalse(boolean0);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_3);
      assertNotSame(matrix3_0, matrix3_2);
      assertSame(matrix3_1, matrix3_0);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      
      Matrix3 matrix3_2 = matrix3_1.IDENTITY.setToScale((-5.5405045F));
      assertNotNull(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-5.5405045F), matrix3_0.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-5.5405045F), matrix3_0.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_1);
      
      Matrix3 matrix3_3 = matrix3_0.lerp((IMatrix3) matrix3_2, (-5.5405045F), matrix3_1);
      assertNotNull(matrix3_3);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-5.5405045F), matrix3_0.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m11(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m10(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(0.0F, matrix3_3.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m11(), 0.01F);
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_2));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(matrix3_2.equals((Object)matrix3_1));
      assertTrue(matrix3_3.equals((Object)matrix3_2));
      assertTrue(matrix3_3.equals((Object)matrix3_0));
      assertEquals((-5.5405045F), matrix3_0.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m02, 0.01F);
      assertEquals(0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_0);
      
      matrix3_3.setElement(2, 0, 1.0F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-5.5405045F), matrix3_0.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m11(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertEquals(0.0F, matrix3_3.m21(), 0.01F);
      assertEquals(0.0F, matrix3_3.m10(), 0.01F);
      assertFalse(matrix3_3.isAffine());
      assertEquals(0.0F, matrix3_3.m01(), 0.01F);
      assertEquals(0.0F, matrix3_3.m12(), 0.01F);
      assertEquals(1.0F, matrix3_3.m02(), 0.01F);
      assertEquals(0.0F, matrix3_3.m20(), 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m11(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertFalse(matrix3_3.equals((Object)matrix3_2));
      assertFalse(matrix3_3.equals((Object)matrix3_0));
      assertEquals((-5.5405045F), matrix3_0.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertEquals(0.0F, matrix3_3.m10, 0.01F);
      assertEquals(0.0F, matrix3_3.m21, 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_3.m22, 0.01F);
      assertEquals(0.0F, matrix3_3.m20, 0.01F);
      assertEquals(1.0F, matrix3_3.m02, 0.01F);
      assertEquals(0.0F, matrix3_3.m01, 0.01F);
      assertEquals(0.0F, matrix3_3.m12, 0.01F);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_1);
      assertSame(matrix3_3, matrix3_1);
      assertNotSame(matrix3_3, matrix3_2);
      assertNotSame(matrix3_3, matrix3_0);
      
      boolean boolean0 = matrix3_1.equals(matrix3_2);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-5.5405045F), matrix3_0.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m02(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m11(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m00(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m22(), 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m11(), 0.01F);
      assertEquals(0.0F, matrix3_2.m20(), 0.01F);
      assertFalse(matrix3_2.isAffine());
      assertEquals(0.0F, matrix3_2.m02(), 0.01F);
      assertEquals(0.0F, matrix3_2.m01(), 0.01F);
      assertEquals(0.0F, matrix3_2.m12(), 0.01F);
      assertEquals(0.0F, matrix3_2.m21(), 0.01F);
      assertEquals(0.0F, matrix3_2.m10(), 0.01F);
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_0.equals((Object)matrix3_3));
      assertFalse(matrix3_1.equals((Object)matrix3_2));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertFalse(matrix3_2.equals((Object)matrix3_3));
      assertFalse(matrix3_2.equals((Object)matrix3_1));
      assertEquals((-5.5405045F), matrix3_0.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m01, 0.01F);
      assertEquals(0.0F, matrix3_2.m12, 0.01F);
      assertEquals(0.0F, matrix3_2.m02, 0.01F);
      assertEquals(0.0F, matrix3_2.m10, 0.01F);
      assertEquals(0.0F, matrix3_2.m21, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m00, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m11, 0.01F);
      assertEquals((-5.5405045F), matrix3_2.m22, 0.01F);
      assertEquals(0.0F, matrix3_2.m20, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_0, matrix3_3);
      assertSame(matrix3_0, matrix3_2);
      assertNotSame(matrix3_1, matrix3_2);
      assertSame(matrix3_1, matrix3_3);
      assertNotSame(matrix3_1, matrix3_0);
      assertSame(matrix3_2, matrix3_0);
      assertNotSame(matrix3_2, matrix3_3);
      assertNotSame(matrix3_2, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Matrix3 matrix3_1 = new Matrix3(1.0F, 0.0F, 0.0F, 1.0F, 1197.462F, (-19.9998F), 1654.8F, (-2.0F), 0.0F);
      assertNotNull(matrix3_1);
      assertEquals(1654.8F, matrix3_1.m02(), 0.01F);
      assertEquals((-19.9998F), matrix3_1.m21(), 0.01F);
      assertEquals(1197.462F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m01, 0.01F);
      assertEquals((-2.0F), matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1654.8F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-19.9998F), matrix3_1.m21, 0.01F);
      assertEquals(1197.462F, matrix3_1.m11, 0.01F);
      
      boolean boolean0 = matrix3_0.equals(matrix3_1);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1654.8F, matrix3_1.m02(), 0.01F);
      assertEquals((-19.9998F), matrix3_1.m21(), 0.01F);
      assertEquals(1197.462F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m01(), 0.01F);
      assertEquals((-2.0F), matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertFalse(matrix3_0.equals((Object)matrix3_1));
      assertFalse(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(1.0F, matrix3_1.m01, 0.01F);
      assertEquals((-2.0F), matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(1654.8F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals((-19.9998F), matrix3_1.m21, 0.01F);
      assertEquals(1197.462F, matrix3_1.m11, 0.01F);
      assertFalse(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Matrix3 matrix3_1 = Matrix3.IDENTITY;
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
      
      boolean boolean0 = matrix3_0.equals(matrix3_1);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertTrue(boolean0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(matrix3_1, matrix3_0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      assertNotNull(vector3_1);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Vector3 vector3_2 = matrix3_1.transform((IVector3) vector3_0, vector3_1);
      assertNotNull(vector3_2);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      
      Vector3 vector3_3 = new Vector3(vector3_0);
      assertNotNull(vector3_3);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      
      Vector3 vector3_4 = vector3_3.add(1.0F, 0.0F, 1.0E-4F);
      assertNotNull(vector3_4);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0E-4F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(1.0E-4F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(1.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      
      Vector3 vector3_5 = (Vector3)Vector3.UNIT_X;
      assertNotNull(vector3_5);
      assertEquals(1.0F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.z(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(1.0F, vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_5.z, 0.01F);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_2);
      
      Vector3 vector3_6 = vector3_5.abs();
      assertNotNull(vector3_6);
      assertEquals(1.0F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.z(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(1.0F, vector3_6.y(), 0.01F);
      assertEquals(0.0F, vector3_6.z(), 0.01F);
      assertEquals(0.0F, vector3_6.x(), 0.01F);
      assertEquals(1.0F, vector3_6.lengthSquared(), 0.01F);
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertTrue(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(1.0F, vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_5.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(1.0F, vector3_6.y, 0.01F);
      assertEquals(0.0F, vector3_6.z, 0.01F);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_3);
      
      Vector3 vector3_7 = vector3_4.subtractLocal(vector3_1);
      assertNotNull(vector3_7);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0E-4F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_7.y(), 0.01F);
      assertEquals(1.0F, vector3_7.x(), 0.01F);
      assertEquals(1.0F, vector3_7.lengthSquared(), 0.01F);
      assertEquals(1.0E-4F, vector3_7.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_6));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(1.0E-4F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(1.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_7.x, 0.01F);
      assertEquals(1.0E-4F, vector3_7.z, 0.01F);
      assertEquals(0.0F, vector3_7.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_7);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_0);
      assertSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_1);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_6);
      
      Vector3 vector3_8 = matrix3_0.transform((IVector3) vector3_5, vector3_4);
      assertNotNull(vector3_8);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.z(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_8.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_8.z(), 0.01F);
      assertEquals(1.0F, vector3_8.y(), 0.01F);
      assertEquals(0.0F, vector3_8.x(), 0.01F);
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_7));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_6));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertTrue(matrix3_0.equals((Object)matrix3_1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertTrue(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertTrue(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertTrue(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertTrue(vector3_5.equals((Object)vector3_7));
      assertTrue(vector3_5.equals((Object)vector3_6));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_8.equals((Object)vector3_6));
      assertFalse(vector3_8.equals((Object)vector3_3));
      assertFalse(vector3_8.equals((Object)vector3_1));
      assertTrue(vector3_8.equals((Object)vector3_5));
      assertFalse(vector3_8.equals((Object)vector3_2));
      assertFalse(vector3_8.equals((Object)vector3_0));
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(1.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(1.0F, vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_5.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_8.x, 0.01F);
      assertEquals(0.0F, vector3_8.z, 0.01F);
      assertEquals(1.0F, vector3_8.y, 0.01F);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_7);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_8);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(matrix3_0, matrix3_1);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_8);
      assertSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_8, vector3_3);
      assertNotSame(vector3_8, vector3_5);
      assertNotSame(vector3_8, vector3_6);
      assertNotSame(vector3_8, vector3_1);
      assertNotSame(vector3_8, vector3_2);
      assertSame(vector3_8, vector3_7);
      assertSame(vector3_8, vector3_4);
      assertNotSame(vector3_8, vector3_0);
      
      Vector3 vector3_9 = matrix3_1.transformLocal(vector3_3);
      assertNotNull(vector3_9);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_9.z(), 0.01F);
      assertEquals(0.0F, vector3_9.x(), 0.01F);
      assertEquals(0.0F, vector3_9.y(), 0.01F);
      assertEquals(0.0F, vector3_9.lengthSquared(), 0.01F);
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_7));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_6));
      assertFalse(vector3_3.equals((Object)vector3_8));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_6));
      assertTrue(vector3_9.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_5));
      assertTrue(vector3_9.equals((Object)vector3_0));
      assertTrue(vector3_9.equals((Object)vector3_2));
      assertFalse(vector3_9.equals((Object)vector3_8));
      assertFalse(vector3_9.equals((Object)vector3_4));
      assertFalse(vector3_9.equals((Object)vector3_7));
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_9.z, 0.01F);
      assertEquals(0.0F, vector3_9.x, 0.01F);
      assertEquals(0.0F, vector3_9.y, 0.01F);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_7);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_9);
      assertNotSame(vector3_3, vector3_8);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_9, vector3_6);
      assertNotSame(vector3_9, vector3_2);
      assertNotSame(vector3_9, vector3_5);
      assertSame(vector3_9, vector3_3);
      assertNotSame(vector3_9, vector3_8);
      assertNotSame(vector3_9, vector3_0);
      assertNotSame(vector3_9, vector3_4);
      assertNotSame(vector3_9, vector3_1);
      assertNotSame(vector3_9, vector3_7);
      
      Vector3 vector3_10 = vector3_4.mult(0.0F, vector3_9);
      assertNotNull(vector3_10);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_9.z(), 0.01F);
      assertEquals(0.0F, vector3_9.x(), 0.01F);
      assertEquals(0.0F, vector3_9.y(), 0.01F);
      assertEquals(0.0F, vector3_9.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_10.z(), 0.01F);
      assertEquals(0.0F, vector3_10.y(), 0.01F);
      assertEquals(0.0F, vector3_10.x(), 0.01F);
      assertEquals(0.0F, vector3_10.lengthSquared(), 0.01F);
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_7));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_6));
      assertFalse(vector3_3.equals((Object)vector3_8));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertTrue(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertTrue(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_9));
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertTrue(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_6));
      assertTrue(vector3_9.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_5));
      assertTrue(vector3_9.equals((Object)vector3_0));
      assertTrue(vector3_9.equals((Object)vector3_2));
      assertFalse(vector3_9.equals((Object)vector3_8));
      assertFalse(vector3_9.equals((Object)vector3_4));
      assertFalse(vector3_9.equals((Object)vector3_7));
      assertFalse(vector3_10.equals((Object)vector3_5));
      assertFalse(vector3_10.equals((Object)vector3_4));
      assertTrue(vector3_10.equals((Object)vector3_0));
      assertFalse(vector3_10.equals((Object)vector3_6));
      assertTrue(vector3_10.equals((Object)vector3_1));
      assertFalse(vector3_10.equals((Object)vector3_7));
      assertFalse(vector3_10.equals((Object)vector3_8));
      assertTrue(vector3_10.equals((Object)vector3_2));
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(1.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_9.z, 0.01F);
      assertEquals(0.0F, vector3_9.x, 0.01F);
      assertEquals(0.0F, vector3_9.y, 0.01F);
      assertEquals(0.0F, vector3_10.y, 0.01F);
      assertEquals(0.0F, vector3_10.x, 0.01F);
      assertEquals(0.0F, vector3_10.z, 0.01F);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_7);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_9);
      assertNotSame(vector3_3, vector3_8);
      assertSame(vector3_3, vector3_10);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_10);
      assertSame(vector3_4, vector3_8);
      assertSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_9);
      assertNotSame(matrix3_1, matrix3_0);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_9, vector3_6);
      assertNotSame(vector3_9, vector3_2);
      assertNotSame(vector3_9, vector3_5);
      assertSame(vector3_9, vector3_3);
      assertSame(vector3_9, vector3_10);
      assertNotSame(vector3_9, vector3_8);
      assertNotSame(vector3_9, vector3_0);
      assertNotSame(vector3_9, vector3_4);
      assertNotSame(vector3_9, vector3_1);
      assertNotSame(vector3_9, vector3_7);
      assertNotSame(vector3_10, vector3_5);
      assertNotSame(vector3_10, vector3_4);
      assertSame(vector3_10, vector3_3);
      assertNotSame(vector3_10, vector3_6);
      assertNotSame(vector3_10, vector3_1);
      assertSame(vector3_10, vector3_9);
      assertNotSame(vector3_10, vector3_7);
      assertNotSame(vector3_10, vector3_8);
      assertNotSame(vector3_10, vector3_2);
      assertNotSame(vector3_10, vector3_0);
      
      float float0 = matrix3_1.extractRotation();
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertTrue(matrix3_1.equals((Object)matrix3_0));
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation(1598.2F, 1598.2F, 1598.2F, (-732.0F));
      assertNotNull(matrix3_1);
      assertEquals(4199900.5F, matrix3_0.m00(), 0.01F);
      assertEquals(4199900.5F, matrix3_0.m11(), 0.01F);
      assertEquals((-1924841.1F), matrix3_0.m21(), 0.01F);
      assertEquals((-1922396.6F), matrix3_0.m12(), 0.01F);
      assertEquals(4199341.0F, matrix3_0.m01(), 0.01F);
      assertEquals(881046.2F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4200461.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1922396.6F), matrix3_0.m20(), 0.01F);
      assertEquals((-1924841.1F), matrix3_0.m02(), 0.01F);
      assertEquals((-1924841.1F), matrix3_1.m21(), 0.01F);
      assertEquals((-1922396.6F), matrix3_1.m12(), 0.01F);
      assertEquals(881046.2F, matrix3_1.m22(), 0.01F);
      assertEquals(4200461.0F, matrix3_1.m10(), 0.01F);
      assertEquals((-1922396.6F), matrix3_1.m20(), 0.01F);
      assertEquals((-1924841.1F), matrix3_1.m02(), 0.01F);
      assertEquals(4199900.5F, matrix3_1.m00(), 0.01F);
      assertEquals(4199900.5F, matrix3_1.m11(), 0.01F);
      assertEquals(4199341.0F, matrix3_1.m01(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-1922396.6F), matrix3_0.m20, 0.01F);
      assertEquals((-1924841.1F), matrix3_0.m02, 0.01F);
      assertEquals(881046.2F, matrix3_0.m22, 0.01F);
      assertEquals(4199900.5F, matrix3_0.m00, 0.01F);
      assertEquals(4199900.5F, matrix3_0.m11, 0.01F);
      assertEquals(4199341.0F, matrix3_0.m01, 0.01F);
      assertEquals(4200461.0F, matrix3_0.m10, 0.01F);
      assertEquals((-1924841.1F), matrix3_0.m21, 0.01F);
      assertEquals((-1922396.6F), matrix3_0.m12, 0.01F);
      assertEquals((-1924841.1F), matrix3_1.m21, 0.01F);
      assertEquals(4199900.5F, matrix3_1.m00, 0.01F);
      assertEquals(4199900.5F, matrix3_1.m11, 0.01F);
      assertEquals(4199341.0F, matrix3_1.m01, 0.01F);
      assertEquals((-1922396.6F), matrix3_1.m12, 0.01F);
      assertEquals(881046.2F, matrix3_1.m22, 0.01F);
      assertEquals(4200461.0F, matrix3_1.m10, 0.01F);
      assertEquals((-1922396.6F), matrix3_1.m20, 0.01F);
      assertEquals((-1924841.1F), matrix3_1.m02, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      float float0 = matrix3_0.approximateUniformScale();
      assertEquals(4199900.5F, matrix3_0.m00(), 0.01F);
      assertEquals(4199900.5F, matrix3_0.m11(), 0.01F);
      assertEquals((-1924841.1F), matrix3_0.m21(), 0.01F);
      assertEquals((-1922396.6F), matrix3_0.m12(), 0.01F);
      assertEquals(4199341.0F, matrix3_0.m01(), 0.01F);
      assertEquals(881046.2F, matrix3_0.m22(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(4200461.0F, matrix3_0.m10(), 0.01F);
      assertEquals((-1922396.6F), matrix3_0.m20(), 0.01F);
      assertEquals((-1924841.1F), matrix3_0.m02(), 0.01F);
      assertEquals((-1922396.6F), matrix3_0.m20, 0.01F);
      assertEquals((-1924841.1F), matrix3_0.m02, 0.01F);
      assertEquals(881046.2F, matrix3_0.m22, 0.01F);
      assertEquals(4199900.5F, matrix3_0.m00, 0.01F);
      assertEquals(4199900.5F, matrix3_0.m11, 0.01F);
      assertEquals(4199341.0F, matrix3_0.m01, 0.01F);
      assertEquals(4200461.0F, matrix3_0.m10, 0.01F);
      assertEquals((-1924841.1F), matrix3_0.m21, 0.01F);
      assertEquals((-1922396.6F), matrix3_0.m12, 0.01F);
      assertEquals((-2048.0F), float0, 0.01F);
      assertSame(matrix3_0, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      float float0 = matrix3_0.approximateUniformScale();
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      float float0 = matrix3_0.extractRotation();
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = matrix3_0.m12;
      floatArray0[1] = matrix3_0.m11;
      floatArray0[2] = matrix3_0.m22;
      floatArray0[3] = matrix3_0.m22;
      floatArray0[4] = matrix3_0.m12;
      floatArray0[5] = matrix3_0.m11;
      floatArray0[6] = float0;
      float float1 = 1.0E-4F;
      floatArray0[7] = float1;
      floatArray0[8] = matrix3_0.m12;
      Matrix3 matrix3_1 = matrix3_0.set(floatArray0);
      assertNotNull(matrix3_1);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, matrix3_0.m21(), 0.01F);
      assertEquals(1.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(1.0F, matrix3_1.m21(), 0.01F);
      assertEquals(1.0F, matrix3_1.m10(), 0.01F);
      assertEquals(1.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(1.0F, matrix3_1.m01(), 0.01F);
      assertEquals(1.0E-4F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m10, 0.01F);
      assertEquals(1.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(1.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m20, 0.01F);
      assertEquals(1.0E-4F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m10, 0.01F);
      assertEquals(1.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 1.0F, 0.0F, 1.0F, 0.0F, 1.0E-4F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToZero();
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(0.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(0.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m00, 0.01F);
      assertEquals(0.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m00, 0.01F);
      assertEquals(0.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      try { 
        matrix3_1.invertAffine(matrix3_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Quaternion quaternion0 = new Quaternion((-1054.4F), 1108.9965F, 14.146676F, 1.0F);
      assertNotNull(quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(14.146676F, quaternion0.z(), 0.01F);
      assertEquals(1108.9965F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-1054.4F), quaternion0.x(), 0.01F);
      assertEquals(14.146676F, quaternion0.z, 0.01F);
      assertEquals((-1054.4F), quaternion0.x, 0.01F);
      assertEquals(1108.9965F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IQuaternion) quaternion0);
      assertNotNull(matrix3_1);
      assertEquals((-4683264.0F), matrix3_0.m22(), 0.01F);
      assertEquals(33486.027F, matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2338680.0F), matrix3_0.m10(), 0.01F);
      assertEquals((-27614.52F), matrix3_0.m20(), 0.01F);
      assertEquals((-2338623.5F), matrix3_0.m01(), 0.01F);
      assertEquals((-2460145.5F), matrix3_0.m00(), 0.01F);
      assertEquals((-2223918.0F), matrix3_0.m11(), 0.01F);
      assertEquals(29268.426F, matrix3_0.m12(), 0.01F);
      assertEquals((-32050.504F), matrix3_0.m02(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(14.146676F, quaternion0.z(), 0.01F);
      assertEquals(1108.9965F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-1054.4F), quaternion0.x(), 0.01F);
      assertEquals((-32050.504F), matrix3_1.m02(), 0.01F);
      assertEquals((-2460145.5F), matrix3_1.m00(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals((-2223918.0F), matrix3_1.m11(), 0.01F);
      assertEquals((-2338680.0F), matrix3_1.m10(), 0.01F);
      assertEquals(29268.426F, matrix3_1.m12(), 0.01F);
      assertEquals((-4683264.0F), matrix3_1.m22(), 0.01F);
      assertEquals(33486.027F, matrix3_1.m21(), 0.01F);
      assertEquals((-2338623.5F), matrix3_1.m01(), 0.01F);
      assertEquals((-27614.52F), matrix3_1.m20(), 0.01F);
      assertEquals((-2223918.0F), matrix3_0.m11, 0.01F);
      assertEquals(29268.426F, matrix3_0.m12, 0.01F);
      assertEquals((-2338680.0F), matrix3_0.m10, 0.01F);
      assertEquals((-2460145.5F), matrix3_0.m00, 0.01F);
      assertEquals((-32050.504F), matrix3_0.m02, 0.01F);
      assertEquals(33486.027F, matrix3_0.m21, 0.01F);
      assertEquals((-4683264.0F), matrix3_0.m22, 0.01F);
      assertEquals((-2338623.5F), matrix3_0.m01, 0.01F);
      assertEquals((-27614.52F), matrix3_0.m20, 0.01F);
      assertEquals(14.146676F, quaternion0.z, 0.01F);
      assertEquals((-1054.4F), quaternion0.x, 0.01F);
      assertEquals(1108.9965F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals((-2338680.0F), matrix3_1.m10, 0.01F);
      assertEquals(29268.426F, matrix3_1.m12, 0.01F);
      assertEquals(33486.027F, matrix3_1.m21, 0.01F);
      assertEquals((-4683264.0F), matrix3_1.m22, 0.01F);
      assertEquals((-2338623.5F), matrix3_1.m01, 0.01F);
      assertEquals((-27614.52F), matrix3_1.m20, 0.01F);
      assertEquals((-32050.504F), matrix3_1.m02, 0.01F);
      assertEquals((-2460145.5F), matrix3_1.m00, 0.01F);
      assertEquals((-2223918.0F), matrix3_1.m11, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
      
      boolean boolean0 = matrix3_0.isAffine();
      assertEquals((-4683264.0F), matrix3_0.m22(), 0.01F);
      assertEquals(33486.027F, matrix3_0.m21(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals((-2338680.0F), matrix3_0.m10(), 0.01F);
      assertEquals((-27614.52F), matrix3_0.m20(), 0.01F);
      assertEquals((-2338623.5F), matrix3_0.m01(), 0.01F);
      assertEquals((-2460145.5F), matrix3_0.m00(), 0.01F);
      assertEquals((-2223918.0F), matrix3_0.m11(), 0.01F);
      assertEquals(29268.426F, matrix3_0.m12(), 0.01F);
      assertEquals((-32050.504F), matrix3_0.m02(), 0.01F);
      assertEquals((-2223918.0F), matrix3_0.m11, 0.01F);
      assertEquals(29268.426F, matrix3_0.m12, 0.01F);
      assertEquals((-2338680.0F), matrix3_0.m10, 0.01F);
      assertEquals((-2460145.5F), matrix3_0.m00, 0.01F);
      assertEquals((-32050.504F), matrix3_0.m02, 0.01F);
      assertEquals(33486.027F, matrix3_0.m21, 0.01F);
      assertEquals((-4683264.0F), matrix3_0.m22, 0.01F);
      assertEquals((-2338623.5F), matrix3_0.m01, 0.01F);
      assertEquals((-27614.52F), matrix3_0.m20, 0.01F);
      assertFalse(boolean0);
      assertSame(matrix3_0, matrix3_1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3((-2.0F), (-3.4028235E38F), 4.0F, (-3.4028235E38F), (-2.0F), (-3.4028235E38F), 0.5F, 0.0F, (-2.0F));
      assertNotNull(matrix3_0);
      assertEquals((-2.0F), matrix3_0.m00(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m22(), 0.01F);
      assertEquals((-2.0F), matrix3_0.m11(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.5F, matrix3_0.m02(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01(), 0.01F);
      assertEquals(4.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m01, 0.01F);
      assertEquals(0.5F, matrix3_0.m02, 0.01F);
      assertEquals(4.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m10, 0.01F);
      assertEquals((-3.4028235E38F), matrix3_0.m21, 0.01F);
      assertEquals((-2.0F), matrix3_0.m00, 0.01F);
      assertEquals((-2.0F), matrix3_0.m11, 0.01F);
      assertEquals((-2.0F), matrix3_0.m22, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.getColumn(1143, vector3_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      
      matrix3_0.getColumn(2, vector3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      
      matrix3_0.getColumn(1, vector3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      
      float float0 = matrix3_0.extractRotation();
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.IDENTITY.getColumn(0, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.getRow((-1700), (Vector3) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      assertNotNull(vector3_0);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      
      matrix3_0.getRow(1, vector3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      
      matrix3_0.IDENTITY.getRow(2, vector3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.element(3596, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(2.0F, 2.0F, 2.0F, 2.0F, (-1308.111F), (-1308.111F), 2.0F, (-1308.111F), 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals(2.0F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      
      float float0 = matrix3_0.element(1, 2);
      assertEquals(2.0F, matrix3_0.m00(), 0.01F);
      assertEquals(2.0F, matrix3_0.m01(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(2.0F, matrix3_0.m10(), 0.01F);
      assertEquals(2.0F, matrix3_0.m02(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12(), 0.01F);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21(), 0.01F);
      assertEquals((-1308.111F), matrix3_0.m12, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m21, 0.01F);
      assertEquals((-1308.111F), matrix3_0.m11, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(2.0F, matrix3_0.m10, 0.01F);
      assertEquals(2.0F, matrix3_0.m01, 0.01F);
      assertEquals(2.0F, matrix3_0.m00, 0.01F);
      assertEquals(2.0F, matrix3_0.m02, 0.01F);
      assertEquals((-1308.111F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float float0 = matrix3_0.element(0, 2);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      float float0 = matrix3_0.element(2, 1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float float0 = matrix3_0.element(1, 1);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, 48.87661F, 48.87661F, 48.87661F, 48.87661F, 2559.24F);
      assertNotNull(matrix3_0);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m12, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m11, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m21, 0.01F);
      
      float float0 = matrix3_0.element(0, 1);
      assertEquals(2559.24F, matrix3_0.m22(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m21(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m10(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m00(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(48.87661F, matrix3_0.m20(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m01(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m12(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02(), 0.01F);
      assertEquals(48.87661F, matrix3_0.m02, 0.01F);
      assertEquals(48.87661F, matrix3_0.m01, 0.01F);
      assertEquals(48.87661F, matrix3_0.m12, 0.01F);
      assertEquals(48.87661F, matrix3_0.m20, 0.01F);
      assertEquals(2559.24F, matrix3_0.m22, 0.01F);
      assertEquals(48.87661F, matrix3_0.m00, 0.01F);
      assertEquals(48.87661F, matrix3_0.m11, 0.01F);
      assertEquals(48.87661F, matrix3_0.m10, 0.01F);
      assertEquals(48.87661F, matrix3_0.m21, 0.01F);
      assertEquals(48.87661F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.element((-2), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float float0 = matrix3_0.element(1, 0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      float float0 = matrix3_0.IDENTITY.element(0, 0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.IDENTITY.element(309, 309);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.IDENTITY.element(1143, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      
      float float0 = matrix3_0.element(2, 0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      
      Vector3 vector3_1 = vector3_0.add(1.0F, (-0.8381305F), 0.0F);
      assertNotNull(vector3_1);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(1.7024627F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.8381305F), vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-0.8381305F), vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      
      Vector3 vector3_2 = vector3_0.subtract((IVector3) vector3_1, vector3_0);
      assertNotNull(vector3_2);
      assertEquals(1.7024627F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.8381305F, vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(1.7024627F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.8381305F), vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.8381305F, vector3_2.y(), 0.01F);
      assertEquals((-1.0F), vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(1.7024627F, vector3_2.lengthSquared(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.x, 0.01F);
      assertEquals(0.8381305F, vector3_0.y, 0.01F);
      assertEquals((-0.8381305F), vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals((-1.0F), vector3_2.x, 0.01F);
      assertEquals(0.8381305F, vector3_2.y, 0.01F);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IVector3) vector3_0, (IVector3) vector3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.7024627F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.8381305F, vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertTrue(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(1.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.x, 0.01F);
      assertEquals(0.8381305F, vector3_0.y, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(1.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.IDENTITY.setColumn(3, 0.0F, 0.0F, 1253.129F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertFalse(matrix3_0.isAffine());
      assertEquals(110.67008F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(7.606028F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(7.606028F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(110.67008F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      matrix3_0.setColumn(2, (float) 2, 1045.2964F, 1.0F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(110.67008F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1045.2964F, matrix3_0.m21(), 0.01F);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1045.2964F, matrix3_0.m21, 0.01F);
      assertEquals(110.67008F, matrix3_0.m12, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(7.606028F, matrix3_0.m22(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(110.67008F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(110.67008F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(7.606028F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.IDENTITY.setRow(Integer.MAX_VALUE, vector3_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      matrix3_0.IDENTITY.setRow(2, 0.0F, 110.67008F, 7.606028F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setElement(3570, 2, 3570);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      matrix3_0.setElement(1, 2, 0.0F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      matrix3_0.setElement(0, 2, 2);
      assertEquals(2.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(2.0F, matrix3_0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setElement(204, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      matrix3_0.setElement(2, 1, 1.0F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(1.0F, matrix3_0.m12(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(1.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      matrix3_0.setElement(1, 1, 15);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(15.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(15.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setElement((-329), 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      matrix3_0.setElement(0, 1, 0);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      matrix3_0.setElement(2, 2, 0.0F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      
      Matrix3 matrix3_1 = matrix3_0.transpose(matrix3_0);
      assertNotNull(matrix3_1);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(0.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertFalse(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_1.m02(), 0.01F);
      assertEquals(0.0F, matrix3_1.m20(), 0.01F);
      assertEquals(1.0F, matrix3_1.m00(), 0.01F);
      assertEquals(0.0F, matrix3_1.m22(), 0.01F);
      assertEquals(1.0F, matrix3_1.m11(), 0.01F);
      assertEquals(0.0F, matrix3_1.m01(), 0.01F);
      assertEquals(0.0F, matrix3_1.m12(), 0.01F);
      assertFalse(matrix3_1.isAffine());
      assertEquals(0.0F, matrix3_1.m21(), 0.01F);
      assertEquals(0.0F, matrix3_1.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(0.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_1.m10, 0.01F);
      assertEquals(0.0F, matrix3_1.m21, 0.01F);
      assertEquals(0.0F, matrix3_1.m01, 0.01F);
      assertEquals(0.0F, matrix3_1.m12, 0.01F);
      assertEquals(1.0F, matrix3_1.m00, 0.01F);
      assertEquals(1.0F, matrix3_1.m11, 0.01F);
      assertEquals(0.0F, matrix3_1.m22, 0.01F);
      assertEquals(0.0F, matrix3_1.m02, 0.01F);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertSame(matrix3_0, matrix3_1);
      assertSame(matrix3_1, matrix3_0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      assertNotNull(matrix3_0);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      
      matrix3_0.setElement(1, 0, 0.0F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setToReflection((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertNotNull(matrix3_0);
      assertEquals(0.0F, matrix3_0.m20(), 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m01(), 0.01F);
      assertEquals(0.0F, matrix3_0.m12(), 0.01F);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
      assertEquals(0.0F, matrix3_0.m21(), 0.01F);
      assertEquals(0.0F, matrix3_0.m10(), 0.01F);
      assertEquals(1.0F, matrix3_0.m00(), 0.01F);
      assertEquals(1.0F, matrix3_0.m22(), 0.01F);
      assertEquals(1.0F, matrix3_0.m11(), 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix3_0.setToTransform((IVector) null, 726.22797F, (IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Matrix3 matrix3_0 = null;
      try {
        matrix3_0 = new Matrix3(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      // Undeclared exception!
      try { 
        matrix3_0.transformVectorLocal((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      Vector3 vector3_0 = new Vector3();
      Matrix3 matrix3_1 = matrix3_0.setToRotation((IVector3) vector3_0, (IVector3) vector3_0);
      matrix3_0.equals(matrix3_1);
      assertEquals(Float.NaN, matrix3_0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      Vector vector0 = new Vector((-1.0F), (-752.1668F));
      matrix3_0.setToTranslation((IVector) vector0);
      assertEquals((-1.0F), matrix3_0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      matrix3_0.setToZero();
      // Undeclared exception!
      try { 
        matrix3_0.invertLocal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      // Undeclared exception!
      try { 
        matrix3_0.get((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Matrix3", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      Matrix3 matrix3_1 = new Matrix3(0.017453292F, 1.0E-4F, 0.024999082F, 1.0E-4F, 0.0F, 0.0F, (-999.19F), 0.017453292F, 183867.94F);
      Matrix3 matrix3_2 = matrix3_0.IDENTITY.invert();
      matrix3_2.IDENTITY.invert(matrix3_1);
      Matrix3 matrix3_3 = matrix3_0.mult((IMatrix3) matrix3_1);
      Matrix3 matrix3_4 = matrix3_3.setTranslation((-619.4322F), 0.002190412F);
      Vector vector0 = new Vector(1.0F, (-281.48F));
      matrix3_4.set((-405.16754F), 0.0F, 94.873245F, (-619.4322F), (-7577.8F), 94.873245F, (-4.8505416E-4F), (-4.0F), 0.0010027083F);
      matrix3_1.IDENTITY.m22 = 0.0F;
      Vector vector1 = matrix3_3.extractScale(vector0);
      vector0.cross((IVector) vector1);
      Vector vector2 = new Vector(vector0);
      Vector vector3 = matrix3_1.transformPointLocal(vector2);
      matrix3_4.transformVector((IVector) vector3);
      Matrix3 matrix3_5 = matrix3_0.add((IMatrix3) matrix3_4);
      Matrix3 matrix3_6 = matrix3_4.multAffine((IMatrix3) matrix3_5);
      Matrix3 matrix3_7 = matrix3_5.setToScale((-1980.2104F));
      matrix3_1.lerp((IMatrix3) matrix3_5, (-619.4322F));
      Matrix3 matrix3_8 = matrix3_1.set((IMatrix3) matrix3_7);
      matrix3_8.lerpAffine((IMatrix3) matrix3_6, (-1886.7042F));
      assertEquals((-1980.2104F), matrix3_1.m22, 0.01F);
      assertEquals((-0.97745794F), matrix3_0.m21(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      Vector vector0 = new Vector(0.0F, (-0.97745794F));
      Matrix3 matrix3_1 = matrix3_0.IDENTITY.setTranslation((IVector) vector0);
      assertEquals(0.0F, matrix3_1.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m20, 0.01F);
      assertEquals(0.0F, matrix3_0.m01, 0.01F);
      assertEquals(0.0F, matrix3_0.m12, 0.01F);
      assertEquals(0.0F, matrix3_0.m02, 0.01F);
      assertTrue(matrix3_0.isAffine());
      assertEquals(0.0F, matrix3_0.m10, 0.01F);
      assertEquals(0.0F, matrix3_0.m21, 0.01F);
      assertEquals(1.0F, matrix3_0.m00, 0.01F);
      assertEquals(1.0F, matrix3_0.m11, 0.01F);
      assertEquals((-0.97745794F), matrix3_1.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3(48.87661F, 48.87661F, 48.87661F, 48.87661F, (-1308.111F), (-1308.111F), 48.87661F, (-1308.111F), (-1946.3772F));
      matrix3_0.multLocal(matrix3_0);
      assertEquals((-125483.13F), matrix3_0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      assertEquals(1.0F, matrix3_0.m22, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      Matrix3 matrix3_1 = matrix3_0.setToScale((IVector3) vector3_0);
      matrix3_1.addLocal(matrix3_0);
      assertEquals(0.0F, matrix3_0.m02(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      Vector vector0 = new Vector((-1.0F), (-752.1668F));
      matrix3_0.transformVector((IVector) vector0, vector0);
      assertEquals((-753.1668F), vector0.y, 0.01F);
      assertEquals(Float.NaN, matrix3_0.m20(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      Matrix3 matrix3_1 = new Matrix3(matrix3_0);
      matrix3_1.approximateUniformScale();
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      matrix3_0.m21 = 0.0F;
      floatArray0[3] = (-2137.5298F);
      Matrix3 matrix3_2 = matrix3_1.IDENTITY.multLocal(matrix3_0);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      Vector3 vector3_0 = new Vector3(0.0F, 0.0F, 0.0F);
      Vector3 vector3_1 = matrix3_1.transform((IVector3) vector3_0);
      matrix3_1.transform((IVector3) vector3_0, vector3_1);
      assertTrue(matrix3_1.equals((Object)matrix3_2));
  }
}
