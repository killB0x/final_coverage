/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:20:06 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AffineTransform;
import pythagoras.f.IPoint;
import pythagoras.f.IVector;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Point;
import pythagoras.f.Transform;
import pythagoras.f.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IdentityTransform_ESTest extends IdentityTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        identityTransform0.transform(floatArray0, (-461), floatArray0, 91, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -461 out of bounds for length 7
         //
         verifyException("pythagoras.f.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float[] floatArray0 = new float[7];
      float[] floatArray1 = new float[2];
      // Undeclared exception!
      try { 
        identityTransform0.transform(floatArray0, 846, floatArray1, 846, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 846 out of bounds for length 7
         //
         verifyException("pythagoras.f.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float[] floatArray0 = new float[1];
      identityTransform0.transform(floatArray0, 0, floatArray0, 0, (-461));
      assertEquals(0.0F, identityTransform0.rotation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float[] floatArray0 = new float[7];
      identityTransform0.transform(floatArray0, 2, floatArray0, 2, 2);
      assertEquals("ident", identityTransform0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      IPoint[] iPointArray0 = new IPoint[3];
      Point[] pointArray0 = new Point[9];
      // Undeclared exception!
      try { 
        identityTransform0.transform(iPointArray0, 0, pointArray0, 1583, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1583 out of bounds for length 9
         //
         verifyException("pythagoras.f.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point[] pointArray0 = new Point[8];
      // Undeclared exception!
      try { 
        identityTransform0.transform((IPoint[]) null, 976, pointArray0, 3, 976);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      identityTransform0.transform((IPoint[]) null, 391, (Point[]) null, 10, (-1015));
      assertEquals(0.0F, identityTransform0.rotation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(0.0F, 0.0F);
      IPoint[] iPointArray0 = new IPoint[5];
      iPointArray0[0] = (IPoint) point0;
      Point[] pointArray0 = new Point[5];
      pointArray0[0] = point0;
      // Undeclared exception!
      try { 
        identityTransform0.transform(iPointArray0, 0, pointArray0, 0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float[] floatArray0 = new float[9];
      identityTransform0.get(floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float float0 = identityTransform0.ty();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float float0 = identityTransform0.tx();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector();
      Vector vector1 = identityTransform0.transformPoint(vector0, vector0);
      assertEquals(0.0F, vector1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(0.0F, (-3202.2F));
      Vector vector0 = new Vector(point0);
      Vector vector1 = identityTransform0.transformPoint(vector0, vector0);
      assertSame(vector0, vector1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector((-1986.3246F), 974.3F);
      Vector vector1 = identityTransform0.transformPoint(vector0, vector0);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector((-4402.0366F), (-1.0F));
      Vector vector1 = identityTransform0.transform((IVector) vector0, vector0);
      assertSame(vector0, vector1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.scale();
      Vector vector1 = identityTransform0.transform((IVector) vector0, vector0);
      assertEquals(1.0F, vector1.y, 0.01F);
      assertEquals(1.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(1099.6213F, 525.2F, 1099.6213F, 0.0F);
      Point point0 = new Point(853.865F, 0);
      affineTransform0.transform((IPoint) point0, point0);
      Point point1 = identityTransform0.transform((IPoint) point0, point0);
      assertEquals((-797370.94F), point1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(2790.02F, 3520.2734F);
      Point point1 = identityTransform0.transform((IPoint) point0, point0);
      assertEquals(3520.2734F, point1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector();
      Point point0 = new Point(vector0);
      Point point1 = new Point((-3047.3381F), 0.0F);
      Point point2 = identityTransform0.transform((IPoint) point1, point0);
      assertSame(point0, point2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float float0 = identityTransform0.scaleY();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float float0 = identityTransform0.scaleX();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float float0 = identityTransform0.rotation();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.preConcatenate((Transform) null);
      assertNull(transform0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(878.64F, (-1738.0F), (-4823.7F), 1676.0F, (-817.585F), 57.295776F);
      AffineTransform affineTransform1 = (AffineTransform)identityTransform0.preConcatenate(affineTransform0);
      assertEquals((-817.585F), affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.preConcatenate(identityTransform0);
      assertSame(transform0, identityTransform0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector();
      Vector vector1 = identityTransform0.inverseTransform((IVector) vector0, vector0);
      assertEquals(0.0F, vector1.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(0.0F, (-3202.2F));
      Vector vector0 = new Vector(point0);
      Vector vector1 = identityTransform0.inverseTransform((IVector) vector0, vector0);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.scale();
      Vector vector1 = identityTransform0.inverseTransform((IVector) vector0, vector0);
      assertEquals(1.0F, vector1.y, 0.01F);
      assertEquals(1.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector((-1948.1735F), 5890.515F);
      Vector vector1 = identityTransform0.inverseTransform((IVector) vector0, vector0);
      assertEquals(5890.515F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(878.64F, (-1738.0F), (-4823.7F), 1676.0F, (-817.585F), 57.295776F);
      Point point0 = new Point((-1.0F), 57.295776F);
      Point point1 = affineTransform0.inverseTransform((IPoint) point0, point0);
      Point point2 = identityTransform0.inverseTransform((IPoint) point1, point1);
      assertEquals((-0.19803189F), point2.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point();
      Point point1 = identityTransform0.inverseTransform((IPoint) point0, point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(2790.02F, 3520.2734F);
      Point point1 = identityTransform0.inverseTransform((IPoint) point0, point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.concatenate((Transform) null);
      assertNull(transform0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(1.0F, (-1.0F), 0.017453292F, 2563.9814F, (-3024.0F));
      Transform transform0 = identityTransform0.concatenate(affineTransform0);
      assertEquals(2563.9814F, transform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      IdentityTransform identityTransform1 = (IdentityTransform)identityTransform0.concatenate(identityTransform0);
      assertEquals(0, IdentityTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        identityTransform0.transformPoint((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        identityTransform0.transform((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector();
      Point point0 = new Point(vector0);
      // Undeclared exception!
      try { 
        identityTransform0.transform((IPoint) point0, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.inverseTransform((IPoint) null, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      identityTransform0.transform((IPoint[]) null, 0, (Point[]) null, 0, 0);
      assertEquals(1.0F, identityTransform0.scaleY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.lerp(identityTransform0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      IdentityTransform identityTransform1 = identityTransform0.copy();
      assertSame(identityTransform0, identityTransform1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(878.64F, (-1738.0F), (-4823.7F), 1676.0F, (-817.585F), 57.295776F);
      AffineTransform affineTransform1 = (AffineTransform)identityTransform0.concatenate(affineTransform0);
      assertEquals((-1738.0F), affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.translation();
      // Undeclared exception!
      try { 
        identityTransform0.inverseTransform((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float float0 = identityTransform0.uniformScale();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      String string0 = identityTransform0.toString();
      assertEquals("ident", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(0, 0.0F, 20.0F, 20.0F, (-694.6968F));
      AffineTransform affineTransform1 = (AffineTransform)identityTransform0.preConcatenate(affineTransform0);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        identityTransform0.get(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.scale();
      Vector vector1 = identityTransform0.transformPoint(vector0, vector0);
      assertEquals(1.0F, vector1.x, 0.01F);
      assertEquals(1.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      int int0 = identityTransform0.generality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point();
      Point point1 = identityTransform0.transform((IPoint) point0, point0);
      assertEquals(0.0F, point1.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.translation();
      Vector vector1 = identityTransform0.transform((IVector) vector0, vector0);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.invert();
      assertSame(identityTransform0, transform0);
  }
}
