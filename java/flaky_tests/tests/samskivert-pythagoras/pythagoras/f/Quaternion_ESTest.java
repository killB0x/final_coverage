/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:35:17 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import pythagoras.f.IQuaternion;
import pythagoras.f.IVector3;
import pythagoras.f.Quaternion;
import pythagoras.f.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Quaternion_ESTest extends Quaternion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-378.704F), (-378.704F), (-205.52F), (-205.52F));
      Vector3 vector3_0 = new Vector3((-205.52F), (-205.52F), (-378.704F));
      quaternion0.fromVectors(vector3_0, vector3_0);
      Quaternion quaternion1 = quaternion0.invert();
      Quaternion quaternion2 = quaternion1.integrate((IVector3) vector3_0, 665.6F, quaternion0);
      Vector3 vector3_1 = new Vector3((-3826.3074F), (-0.20534153F), (-205.52F));
      Vector3 vector3_2 = vector3_1.addLocal((IVector3) vector3_0);
      vector3_0.negate(vector3_1);
      Vector3 vector3_3 = quaternion0.transformUnitZ(vector3_0);
      Quaternion quaternion3 = quaternion0.fromAnglesXZ((-0.7136444F), (-0.68305415F));
      vector3_3.z = (-0.31382987F);
      Vector3 vector3_4 = quaternion0.toAngles(vector3_1);
      Quaternion quaternion4 = quaternion3.mult((IQuaternion) quaternion0, quaternion0);
      quaternion4.integrateLocal(vector3_4, (-0.48659384F));
      quaternion0.slerp((IQuaternion) quaternion4, (-0.38482493F));
      quaternion0.invertLocal();
      Random.setNextRandom(Integer.MAX_VALUE);
      quaternion2.fromAngleAxis(-0.0F, 1.1920929E-7F, (-225.273F), (-0.68305415F));
      MockRandom mockRandom0 = new MockRandom(Integer.MAX_VALUE);
      quaternion3.randomize(mockRandom0);
      quaternion4.fromAnglesXZ((-892.34F), Float.NaN);
      quaternion3.transformAndAdd(vector3_2, vector3_0, vector3_1);
      Quaternion quaternion5 = quaternion1.fromAnglesXZ(Float.NaN, (-3661.0F));
      quaternion5.fromAngleAxis(Float.NaN, (IVector3) vector3_4);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      
      Quaternion quaternion1 = new Quaternion((-3.1415927F), 1.0F, 0.0F, 1.0F);
      quaternion0.slerp((IQuaternion) quaternion1, 1.0F);
      Quaternion quaternion2 = quaternion0.set((-2250.2861F), (-2250.2861F), (-2250.2861F), (-2250.2861F));
      Quaternion quaternion3 = quaternion0.fromAngles((-0.6164943F), 1.0F, (-178.16026F));
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = new Vector3();
      vector3_1.subtractLocal(vector3_0);
      quaternion3.fromAxes(vector3_0, vector3_1, vector3_1);
      quaternion2.set(2098.5F, 739.6F, (-2233.0F), 739.6F);
      quaternion0.toString();
      Quaternion quaternion4 = quaternion1.slerpLocal(quaternion2, 3288.6104F);
      Vector3 vector3_2 = (Vector3)Vector3.MAX_VALUE;
      quaternion1.transformScaleAndAdd(vector3_0, (-3.1415927F), vector3_2, vector3_1);
      quaternion1.invert(quaternion4);
      quaternion1.invertLocal();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[23];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = 1447.1273F;
      floatArray0[4] = 1447.1273F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = new Vector3();
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 1447.1273F, 1447.1273F);
      Object object0 = new Object();
      quaternion0.hasNaN();
      Quaternion quaternion2 = new Quaternion(floatArray0);
      Quaternion quaternion3 = quaternion1.slerpLocal(quaternion2, (-3.4028235E38F));
      Vector3 vector3_3 = new Vector3();
      quaternion3.transform((IVector3) vector3_2);
      Quaternion quaternion4 = new Quaternion((-3.4028235E38F), 3.1415827F, (-1.5707964F), Float.POSITIVE_INFINITY);
      quaternion3.hasNaN();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[23];
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = 0.0F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = new Vector3();
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, (-3.4028235E38F), (-3.4028235E38F));
      Object object0 = new Object();
      quaternion0.hasNaN();
      Quaternion quaternion2 = new Quaternion(floatArray0);
      Quaternion quaternion3 = quaternion1.slerpLocal(quaternion2, (-3.4028235E38F));
      Vector3 vector3_3 = new Vector3();
      quaternion3.transform((IVector3) vector3_2);
      Quaternion quaternion4 = new Quaternion((-3.4028235E38F), 3.1415827F, (-1.5707964F), Float.NaN);
      quaternion3.hasNaN();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion1.normalize(quaternion0);
      Random.setNextRandom((-2138794839));
      Quaternion quaternion3 = quaternion1.slerpLocal(quaternion2, (-625.4722F));
      Vector3 vector3_0 = quaternion3.toAngles();
      Vector3 vector3_1 = quaternion3.toAngles(vector3_0);
      quaternion1.hasNaN();
      MockRandom mockRandom0 = new MockRandom((-2138794839));
      quaternion1.randomize(mockRandom0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-0.70710677F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-2138794839);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1.5707964F);
      Vector3 vector3_2 = new Vector3(floatArray0);
      vector3_1.add((-0.70710677F), (-44740.24F), (-3851.0F), vector3_2);
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) (-2138794839);
      quaternion0.set(floatArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = quaternion0.fromAngles((-1270.2954F), (-1270.2954F), (-1270.2954F));
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion2 = quaternion1.integrate((IVector3) vector3_1, (-4731.967F));
      Vector3 vector3_2 = new Vector3();
      Quaternion quaternion3 = quaternion1.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion4 = quaternion1.integrate((IVector3) vector3_2, 0.5F, quaternion3);
      Vector3 vector3_3 = quaternion4.transformUnitZ(vector3_2);
      Vector3 vector3_4 = quaternion4.toAngles(vector3_3);
      vector3_3.addLocal((-27.0F), 0.0F, (-25.429203F));
      quaternion3.normalizeLocal();
      Quaternion quaternion5 = quaternion4.normalizeLocal();
      Vector3 vector3_5 = quaternion5.transformUnitZ(vector3_4);
      Quaternion quaternion6 = quaternion5.normalize(quaternion4);
      Vector3 vector3_6 = quaternion4.transformAndAdd(vector3_4, vector3_4, vector3_0);
      Vector3 vector3_7 = quaternion5.transformUnitX(vector3_6);
      quaternion3.hasNaN();
      quaternion6.fromVectors(vector3_6, vector3_7);
      quaternion2.fromAngleAxis(0.5F, (-2949.9072F), 1.0F, (-830.14F));
      // Undeclared exception!
      try { 
        quaternion3.transformAndAdd((IVector3) null, vector3_5, vector3_2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 0.0F, (-3197.1667F));
      quaternion1.equals(quaternion0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = quaternion0.set((-1562.1F), (-1562.1F), (-1562.1F), (-1562.1F));
      quaternion1.toString();
      quaternion1.toString();
      quaternion1.invert();
      Quaternion quaternion2 = quaternion1.multLocal(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Quaternion quaternion3 = quaternion2.fromAxes(vector3_0, vector3_0, vector3_0);
      Vector3 vector3_1 = new Vector3(vector3_0);
      quaternion3.transformUnitZ(vector3_1);
      Random.setNextRandom((-1950));
      float float0 = 1.1920929E-7F;
      IVector3 iVector3_0 = null;
      // Undeclared exception!
      try { 
        quaternion2.fromAngleAxis(1.1920929E-7F, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-99.0F), (-99.0F), 0.86895084F, 2429.2F);
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = quaternion1.transform((IVector3) vector3_0);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_XYZ;
      Quaternion quaternion2 = quaternion1.fromAxes(vector3_1, vector3_2, vector3_1);
      Quaternion quaternion3 = quaternion2.invert(quaternion0);
      quaternion3.z = Float.NaN;
      quaternion2.fromAngles(Float.NaN, Float.NaN, (-481153.66F));
      Vector3 vector3_3 = quaternion2.transform((IVector3) vector3_2, vector3_1);
      quaternion0.fromAnglesXZ((-99.0F), (-1251.37F));
      MockRandom mockRandom0 = new MockRandom(3369L);
      vector3_1.x = 4133.8F;
      mockRandom0.ints(0L);
      Quaternion quaternion4 = quaternion2.randomize(mockRandom0);
      quaternion1.normalizeLocal();
      Quaternion quaternion5 = quaternion2.randomize(mockRandom0);
      quaternion5.transformUnitZ(vector3_3);
      quaternion2.normalizeLocal();
      Quaternion quaternion6 = quaternion4.fromAngleAxis((-1.0050085E37F), 0.0F, (-3127.4558F), 3.4028235E38F);
      // Undeclared exception!
      try { 
        quaternion6.set((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(853.20874F, 791.0F, (-3794.67F), 6.2831855F);
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      Vector3 vector3_1 = new Vector3(0.7070237F, 1108.9F, 2.4157603E38F);
      quaternion1.transformUnitY(vector3_1);
      // Undeclared exception!
      try { 
        quaternion0.fromAngles((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis((-4.7016144E-4F), (IVector3) vector3_0);
      Vector3 vector3_1 = quaternion1.toAngles();
      quaternion0.transformAndAdd(vector3_1, vector3_0, vector3_0);
      quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      Quaternion quaternion2 = quaternion1.integrateLocal(vector3_1, Float.NaN);
      Quaternion quaternion3 = quaternion2.fromAngles(Float.NaN, 0.99952984F, 0.0F);
      Quaternion quaternion4 = quaternion1.normalizeLocal();
      quaternion2.slerpLocal(quaternion4, 0.0F);
      quaternion0.hasNaN();
      Quaternion quaternion5 = new Quaternion(quaternion1);
      quaternion4.slerp((IQuaternion) quaternion3, Float.NaN, quaternion5);
      quaternion3.transformUnitZ(vector3_1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.fromAxes((IVector3) null, (IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 0.0F, 0.0F);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      Vector3 vector3_0 = new Vector3(1.0F, 1.0F, 0.0F);
      quaternion1.fromVectors(vector3_0, vector3_0);
      floatArray0[2] = 3026.286F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      quaternion1.transformAndAdd(vector3_1, vector3_1, vector3_1);
      quaternion1.equals(quaternion0);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_3 = new Vector3(9.99995E-6F, 0.0F, (-4.371139E-8F));
      quaternion0.transformAndAdd(vector3_2, vector3_2, vector3_3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.transformUnitY((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 943.05F;
      floatArray0[1] = 6.2831855F;
      floatArray0[2] = 1.0E-5F;
      floatArray0[3] = 6.2831855F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      quaternion0.integrateLocal(vector3_0, 1.0E-5F);
      Vector3 vector3_1 = new Vector3(1.0E-5F, 4.3915048E-8F, 943.05F);
      Vector3 vector3_2 = quaternion0.transformUnitY(vector3_1);
      Vector3 vector3_3 = vector3_2.negate();
      Vector3 vector3_4 = new Vector3(536.8785F, 0.0133240605F, 943.05F);
      Vector3 vector3_5 = vector3_4.mult(1.0E-5F, vector3_1);
      vector3_2.mult((IVector3) vector3_4);
      Quaternion quaternion1 = quaternion0.integrate((IVector3) vector3_2, 6.2831855F);
      Quaternion quaternion2 = quaternion1.integrate((IVector3) vector3_1, 0.0053687845F);
      Quaternion quaternion3 = quaternion2.set(0.5F, 1.7753059E-9F, 3.092837E-4F, 0.0094305F);
      quaternion2.fromAxes(vector3_0, vector3_3, vector3_5);
      quaternion0.hasNaN();
      Quaternion quaternion4 = quaternion2.set(floatArray0);
      Vector3 vector3_6 = quaternion4.transformAndAdd(vector3_1, vector3_1, vector3_1);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      Quaternion quaternion5 = quaternion3.randomize(mockRandom0);
      quaternion1.transformUnitX(vector3_5);
      quaternion5.transformAndAdd(vector3_6, vector3_6, vector3_3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.normalize((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F));
      assertEquals((-3.4028235E38F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.x, 0.01F);
      
      Quaternion quaternion1 = quaternion0.normalize();
      quaternion1.set(3.1415827F, (-3.4028235E38F), (-3.4028235E38F), (-0.99999F));
      quaternion0.slerpLocal(quaternion0, Float.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.mult((IQuaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      quaternion0.fromVectorFromNegativeZ((-1.0F), (-1.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion((-3.1415927F), 0.0F, 1.0F, 0.0F);
      Quaternion quaternion2 = new Quaternion();
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3.1415927F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3.1415927F);
      floatArray0[5] = (-3.1415927F);
      Quaternion quaternion3 = new Quaternion(floatArray0);
      quaternion0.equals(quaternion3);
      quaternion0.slerpLocal(quaternion1, 0.0F);
      Vector3 vector3_0 = new Vector3(floatArray0);
      quaternion3.toAngles(vector3_0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.set(0.0F, 749855.6F, 1.0F);
      Vector3 vector3_2 = new Vector3(vector3_1);
      vector3_2.set((IVector3) vector3_0);
      vector3_1.mult((IVector3) vector3_0, vector3_2);
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_1, vector3_0, vector3_1);
      quaternion1.multLocal(quaternion0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.integrateLocal((IVector3) null, (-359.6F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      float[] floatArray0 = new float[4];
      Quaternion quaternion0 = new Quaternion(floatArray0);
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 0.0F, 0.0F);
      Quaternion quaternion2 = new Quaternion();
      quaternion2.equals(quaternion1);
      quaternion1.invertLocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 1.0F, 0.0F);
      quaternion0.equals(quaternion1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      float[] floatArray0 = new float[4];
      Quaternion quaternion0 = new Quaternion(floatArray0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      vector3_0.subtractLocal(vector3_1);
      Quaternion quaternion1 = new Quaternion(floatArray0);
      quaternion0.mult((IQuaternion) quaternion1, quaternion1);
      Quaternion quaternion2 = new Quaternion(floatArray0);
      quaternion2.equals(vector3_0);
      Quaternion quaternion3 = new Quaternion(floatArray0);
      quaternion2.slerpLocal(quaternion3, 3.4028235E38F);
      quaternion3.normalize(quaternion2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.multLocal((IQuaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.mult((IQuaternion) null, quaternion1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.017453292F, 0.017453292F, 0.017453292F, 0.0F);
      Quaternion quaternion1 = new Quaternion(quaternion0);
      quaternion0.slerp((IQuaternion) quaternion1, (-3179.3F));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(1.22914759E16F, (IVector3) vector3_0);
      quaternion0.toAngles();
      quaternion0.slerpLocal(quaternion1, 0.0F);
      quaternion0.normalize(quaternion1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion((-1955.01F), (-664.0F), (-1955.01F), (-664.0F));
      Quaternion quaternion2 = quaternion0.set((IQuaternion) quaternion1);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion3 = quaternion1.integrateLocal(vector3_1, 3.1415927F);
      Quaternion quaternion4 = quaternion3.integrate((IVector3) vector3_1, (-0.92436606F));
      quaternion3.x();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 6.2831855F;
      floatArray0[1] = (-0.9251865F);
      floatArray0[2] = (-0.9251865F);
      floatArray0[3] = (-7.6F);
      floatArray0[4] = (-0.068439886F);
      floatArray0[5] = 3114.9F;
      floatArray0[6] = (-0.31395188F);
      Quaternion quaternion5 = quaternion4.set(floatArray0);
      Quaternion quaternion6 = quaternion5.integrateLocal(vector3_0, (-0.068439886F));
      quaternion6.transform((IVector3) vector3_0);
      Quaternion quaternion7 = new Quaternion(quaternion4);
      quaternion2.mult((IQuaternion) quaternion7, quaternion5);
      Quaternion quaternion8 = quaternion4.set(floatArray0);
      quaternion8.hasNaN();
      Quaternion quaternion9 = new Quaternion(floatArray0);
      quaternion4.set((IQuaternion) quaternion9);
      Quaternion quaternion10 = new Quaternion(floatArray0);
      quaternion6.slerp((IQuaternion) quaternion10, (-112.666F));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = quaternion0.fromAngles(1654.95F, 1654.95F, 1654.95F);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.19112495F;
      quaternion1.w = (-0.39494297F);
      floatArray0[1] = 1654.95F;
      floatArray0[2] = 0.19112495F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      Quaternion quaternion2 = quaternion1.fromAngles(vector3_0);
      Vector3 vector3_1 = new Vector3((-2.0F), (-0.9389039F), 1044.1777F);
      Vector3 vector3_2 = quaternion0.toAngles(vector3_1);
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.66937727F;
      floatArray1[1] = 0.058512315F;
      floatArray1[2] = (-2.0F);
      floatArray1[3] = (-0.33408377F);
      quaternion0.integrate((IVector3) vector3_2, 0.0F, quaternion2);
      floatArray1[4] = (-0.3340838F);
      Vector3 vector3_3 = vector3_2.subtract((IVector3) vector3_1, vector3_1);
      vector3_2.mult((-1309.6431F), vector3_3);
      floatArray1[5] = 3.4028235E38F;
      floatArray1[6] = -0.0F;
      Quaternion quaternion3 = new Quaternion(floatArray1);
      quaternion3.transformUnitY(vector3_1);
      Quaternion quaternion4 = quaternion1.invert(quaternion3);
      Quaternion quaternion5 = quaternion1.set((IQuaternion) quaternion4);
      quaternion5.fromAngleAxis(0.19112495F, (IVector3) vector3_0);
      Quaternion quaternion6 = quaternion1.normalize(quaternion0);
      quaternion6.transformUnitY(vector3_2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      // Undeclared exception!
      try { 
        quaternion0.transformScaleAndAdd(vector3_0, (-0.99999F), vector3_0, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      quaternion0.z = 0.704274F;
      floatArray0[1] = 0.0F;
      quaternion0.set((IQuaternion) quaternion1);
      Quaternion quaternion2 = quaternion0.fromVectors(vector3_0, vector3_0);
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion3 = new Quaternion(quaternion2);
      quaternion2.set(floatArray0);
      Quaternion quaternion4 = new Quaternion(quaternion0);
      Object object0 = new Object();
      quaternion4.equals(object0);
      quaternion3.normalize();
      quaternion0.fromAngleAxis(0.704274F, (IVector3) vector3_0);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Y;
      quaternion3.fromVectors(vector3_2, vector3_2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.toAngles((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.set((IQuaternion) quaternion0);
      Quaternion quaternion2 = new Quaternion(quaternion0);
      Quaternion quaternion3 = (Quaternion)Quaternion.IDENTITY;
      quaternion0.slerpLocal(quaternion1, 0.0F);
      Quaternion quaternion4 = quaternion1.fromAngles(0.0F, 0.0F, 1.0F);
      quaternion4.integrateLocal(vector3_0, 222.45044F);
      quaternion4.toString();
      quaternion4.invert(quaternion2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      float[] floatArray0 = new float[4];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = new Quaternion(quaternion1);
      Quaternion quaternion3 = new Quaternion(quaternion2);
      quaternion3.slerpLocal(quaternion1, (-3.1415927F));
      quaternion1.transform((IVector3) vector3_0, vector3_0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.fromVectors((IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.transformZ((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.slerpLocal((IQuaternion) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F));
      Quaternion quaternion1 = quaternion0.slerpLocal(quaternion0, Float.NaN);
      // Undeclared exception!
      try { 
        quaternion1.integrate((IVector3) null, Float.NaN, quaternion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 0.0F, 0.0F);
      quaternion1.equals(quaternion0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.5708064F, 303.89F, 0.6381966F, (-4.2976634E13F));
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = quaternion0.mult((IQuaternion) quaternion1);
      Quaternion quaternion3 = quaternion2.fromAnglesXZ((-490.0F), (-396.118F));
      Quaternion quaternion4 = quaternion1.fromAnglesXZ((-4.2976634E13F), 0.96863616F);
      float[] floatArray0 = new float[4];
      Quaternion quaternion5 = quaternion0.normalizeLocal();
      quaternion5.x = 0.6381966F;
      quaternion4.x = 2009.46F;
      floatArray0[0] = 0.96863616F;
      floatArray0[1] = (-0.24032578F);
      floatArray0[2] = (-772.22F);
      floatArray0[3] = 1.484985E-14F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      quaternion0.transform((IVector3) vector3_0);
      quaternion0.invertLocal();
      Quaternion quaternion6 = quaternion4.slerp((IQuaternion) quaternion0, (-1.484985E-14F));
      quaternion6.slerp((IQuaternion) quaternion0, (-0.24032578F), quaternion3);
      Vector3 vector3_1 = quaternion1.transformAndAdd(vector3_0, vector3_0, vector3_0);
      quaternion3.integrate((IVector3) vector3_1, (-1638.7727F));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = new Vector3();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      quaternion0.transformZ(vector3_0);
      Quaternion quaternion2 = new Quaternion(3831.0F, 0.0F, (-1161.0961F), 2.7182817F);
      quaternion0.equals(quaternion2);
      Quaternion quaternion3 = new Quaternion((-3381.2444F), 0.0F, 2.7182817F, 0.0F);
      Vector3 vector3_1 = new Vector3();
      quaternion3.transformScaleAndAdd(vector3_0, 1.5707964F, vector3_1, vector3_1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.set((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      boolean boolean0 = quaternion0.equals(quaternion0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        quaternion0.integrate((IVector3) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.nextInt(2380);
      Quaternion quaternion1 = quaternion0.randomize(mockRandom0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (-0.36180344F);
      floatArray0[4] = 0.017453292F;
      floatArray0[5] = (-0.5257311F);
      floatArray0[6] = (-0.26286554F);
      Quaternion quaternion2 = new Quaternion(floatArray0);
      quaternion1.normalize(quaternion2);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Quaternion quaternion3 = quaternion1.fromVectors(vector3_0, vector3_0);
      quaternion3.z = 0.0F;
      quaternion1.w();
      Quaternion quaternion4 = quaternion3.set(floatArray0);
      Vector3 vector3_1 = new Vector3();
      vector3_1.abs();
      Vector3 vector3_2 = quaternion4.transformUnitX(vector3_1);
      Quaternion quaternion5 = quaternion3.integrate((IVector3) vector3_2, (float) (-1L));
      vector3_1.y = (-2006.8958F);
      quaternion2.integrateLocal(vector3_1, 1.5882505F);
      Quaternion quaternion6 = quaternion1.fromAnglesXZ(3.1415927F, (-4.29981E-8F));
      quaternion1.integrate((IVector3) vector3_1, (-2066.872F));
      Random.setNextRandom(2380);
      quaternion5.transform((IVector3) vector3_2);
      quaternion6.fromAngleAxis(0.2619946F, (IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = 0.0F;
      quaternion0.set((IQuaternion) quaternion1);
      Quaternion quaternion2 = quaternion0.fromVectors(vector3_0, vector3_0);
      Quaternion quaternion3 = new Quaternion(quaternion2);
      Quaternion quaternion4 = (Quaternion)Quaternion.IDENTITY;
      quaternion4.fromVectorFromNegativeZ(1.0F, 1.0F, 0.49999997F);
      quaternion0.set(floatArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = 0.0F;
      quaternion0.set((IQuaternion) quaternion1);
      Quaternion quaternion2 = quaternion1.fromVectorFromNegativeZ((-324.6762F), 0.70710677F, 6.036931E-10F);
      Quaternion quaternion3 = new Quaternion(floatArray0);
      quaternion3.hasNaN();
      Quaternion quaternion4 = new Quaternion(quaternion2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion0 = new Quaternion((-2655.3F), 1.0F, (-0.002041965F), 0.0F);
      quaternion0.hasNaN();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-428.1F));
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ(0.50399816F, 2465.36F, (-428.1F));
      quaternion0.hasNaN();
      quaternion1.fromAngleAxis(Float.NaN, (-3.4028235E38F), Float.NaN, 0.50399816F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      quaternion0.set(floatArray0);
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      Quaternion quaternion2 = new Quaternion(1.0F, 0.0F, 0.0F, 0.0F);
      quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion3 = new Quaternion();
      Vector3 vector3_3 = quaternion3.transformAndAdd(vector3_2, vector3_1, vector3_1);
      Quaternion quaternion4 = quaternion2.fromVectorFromNegativeZ((IVector3) vector3_1);
      Vector3 vector3_4 = (Vector3)Vector3.NORMAL_XYZ;
      Quaternion quaternion5 = quaternion0.integrateLocal(vector3_4, 6.2831855F);
      quaternion4.fromAngles((-3263.73F), (-1329.08F), 0.0F);
      quaternion5.normalizeLocal();
      quaternion0.hasNaN();
      quaternion4.slerp((IQuaternion) quaternion2, 1.5707964F, quaternion5);
      quaternion1.transformUnitZ(vector3_3);
      quaternion0.fromAnglesXZ(2040.982F, (-0.19037996F));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      quaternion1.fromVectorFromNegativeZ(0.0F, Float.NaN, 2362.345F);
      quaternion0.hasNaN();
      Quaternion quaternion2 = quaternion1.fromAngleAxis(Float.NaN, Float.NaN, 1.0F, Float.NaN);
      quaternion2.slerp((IQuaternion) quaternion1, 1143.6246F);
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      quaternion2.transform((IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(3.1415927F, (IVector3) vector3_0);
      quaternion1.normalizeLocal();
      Vector3 vector3_1 = new Vector3(0.57735026F, 0.57735026F, 0.57735026F);
      Vector3 vector3_2 = quaternion1.transform((IVector3) vector3_1, vector3_1);
      vector3_2.toString();
      MockRandom mockRandom0 = new MockRandom((-901L));
      quaternion1.randomize(mockRandom0);
      quaternion1.toString();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((-901L), (-1.0), (double) 0.57735026F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      quaternion1.fromVectorFromNegativeZ(0.0F, (-443.3F), 2362.345F);
      quaternion0.hasNaN();
      quaternion1.fromAngleAxis(2362.345F, 2362.345F, (-655.44F), Float.NaN);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-156.63226F);
      floatArray0[1] = 0.9977995F;
      floatArray0[2] = (-655.44F);
      floatArray0[3] = 0.0F;
      quaternion0.set(floatArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = 0.0F;
      Quaternion quaternion2 = quaternion0.set((IQuaternion) quaternion1);
      Quaternion quaternion3 = quaternion0.fromVectors(vector3_0, vector3_0);
      Quaternion quaternion4 = new Quaternion(quaternion3);
      Quaternion quaternion5 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_1 = new Vector3(floatArray0);
      quaternion2.transformUnitZ(vector3_0);
      quaternion5.getRotationZ();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      quaternion1.fromAngleAxis(0.0F, (IVector3) vector3_0);
      Quaternion quaternion2 = new Quaternion(quaternion1);
      quaternion1.equals(vector3_0);
      Vector3 vector3_1 = new Vector3((-16.026756F), 0.0F, 0.0F);
      Quaternion quaternion3 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion4 = (Quaternion)Quaternion.IDENTITY;
      quaternion4.mult((IQuaternion) quaternion2, quaternion0);
      quaternion1.transformScaleAndAdd(vector3_0, 1.0F, vector3_0, vector3_1);
      quaternion2.fromAngleAxis((-980.6416F), 1.5707964F, 1.0F, 1137.9292F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      quaternion1.set((IQuaternion) quaternion0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_0);
      Quaternion quaternion3 = new Quaternion(0.0F, 596.0F, 1366.2F, 0.0F);
      Quaternion quaternion4 = new Quaternion(quaternion3);
      Vector3 vector3_1 = quaternion2.transformAndAdd(vector3_0, vector3_0, vector3_0);
      quaternion2.z();
      quaternion3.transformZ(vector3_1);
      Quaternion quaternion5 = new Quaternion((-0.005792872F), 2850.4421F, (-5.6889234F), 1.3550396F);
      quaternion4.equals(quaternion2);
      Quaternion quaternion6 = new Quaternion((-1410.081F), 1366.2F, (-0.005792872F), 5351.4043F);
      Quaternion quaternion7 = new Quaternion(floatArray0);
      quaternion7.transformUnitZ(vector3_1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_1, vector3_0);
      Vector3 vector3_2 = quaternion2.transformAndAdd(vector3_0, vector3_0, vector3_1);
      Quaternion quaternion3 = quaternion1.fromVectorFromNegativeZ((IVector3) vector3_2);
      Quaternion quaternion4 = quaternion1.integrateLocal(vector3_1, 1.0F);
      quaternion3.fromAngles(1.0F, Float.NaN, Float.NaN);
      Quaternion quaternion5 = quaternion2.normalizeLocal();
      quaternion2.hasNaN();
      quaternion3.slerp((IQuaternion) quaternion5, Float.NaN, quaternion4);
      quaternion4.transformUnitZ(vector3_1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      quaternion1.fromAxes(vector3_0, vector3_0, vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 36.446198F;
      floatArray0[1] = 36.71283F;
      Vector3 vector3_1 = quaternion0.toAngles();
      Vector3 vector3_2 = (Vector3)Vector3.ZERO;
      Vector3 vector3_3 = new Vector3(vector3_1);
      Vector3 vector3_4 = (Vector3)Vector3.MIN_VALUE;
      vector3_3.addScaledLocal(vector3_4, 1.5717598F);
      Quaternion quaternion2 = quaternion0.fromAngles(vector3_0);
      quaternion0.hashCode();
      quaternion2.hasNaN();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-428.1F));
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectorFromNegativeZ(2465.36F, Float.NaN, (-1.5707964F));
      quaternion2.hasNaN();
      quaternion2.fromVectorFromNegativeZ(Float.NaN, Float.NaN, Float.NaN);
      quaternion1.set((IQuaternion) quaternion2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = 3799.049F;
      quaternion0.set((IQuaternion) quaternion1);
      Quaternion quaternion2 = quaternion0.fromVectors(vector3_0, vector3_0);
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion3 = new Quaternion(quaternion2);
      Quaternion quaternion4 = (Quaternion)Quaternion.IDENTITY;
      Object object0 = new Object();
      quaternion4.equals(object0);
      quaternion2.transformUnitZ(vector3_1);
      Quaternion quaternion5 = quaternion3.normalize();
      quaternion5.multLocal(quaternion4);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      quaternion0.z = 0.704274F;
      floatArray0[1] = 3799.049F;
      quaternion0.set((IQuaternion) quaternion1);
      Quaternion quaternion2 = quaternion0.fromVectors(vector3_0, vector3_0);
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion3 = new Quaternion(quaternion2);
      quaternion2.set(floatArray0);
      Quaternion quaternion4 = new Quaternion(quaternion0);
      Object object0 = new Object();
      quaternion4.equals(object0);
      quaternion3.normalize();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      // Undeclared exception!
      try { 
        quaternion0.transform((IVector3) vector3_0, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = (-1.17542676E10F);
      quaternion0.set((IQuaternion) quaternion1);
      quaternion0.fromVectors(vector3_0, vector3_0);
      Quaternion quaternion2 = new Quaternion(quaternion1);
      quaternion2.transformAndAdd(vector3_0, vector3_0, vector3_0);
      quaternion0.z();
      quaternion0.transformZ(vector3_0);
      quaternion2.hashCode();
      Quaternion quaternion3 = new Quaternion((-3.9614081E28F), (-5.5884969E13F), (-2.4758801E27F), (-668.9143F));
      quaternion1.equals(quaternion3);
      Quaternion quaternion4 = new Quaternion(4.0F, 1.0E-5F, (-1.0F), (-668.9143F));
      quaternion4.transformUnitZ(vector3_0);
      Vector3 vector3_1 = new Vector3();
      quaternion2.transform((IVector3) vector3_0, vector3_1);
      quaternion4.transformUnitZ(vector3_0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1374.8884F, 1374.8884F, 1374.8884F, 1374.8884F);
      Quaternion quaternion1 = new Quaternion();
      Quaternion quaternion2 = quaternion1.fromAngles((-572.8F), (-572.8F), (-2636.0137F));
      Vector3 vector3_0 = quaternion0.toAngles();
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion3 = new Quaternion(quaternion2);
      Object object0 = new Object();
      quaternion3.equals(object0);
      quaternion2.transformUnitZ(vector3_0);
      Quaternion quaternion4 = new Quaternion(quaternion2);
      quaternion4.normalize();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = quaternion0.set((IQuaternion) quaternion1);
      Quaternion quaternion3 = quaternion0.slerp((IQuaternion) quaternion2, (-0.99999F), quaternion1);
      Quaternion quaternion4 = new Quaternion();
      Quaternion quaternion5 = quaternion3.invert(quaternion1);
      quaternion5.toString();
      quaternion5.fromAngleAxis(0.0F, -0.0F, 1.0F, -0.0F);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      quaternion3.fromVectorFromNegativeZ((IVector3) vector3_0);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = Float.NaN;
      Vector3 vector3_1 = new Vector3(floatArray0);
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1.0F;
      floatArray1[1] = (-1.65569812E10F);
      floatArray1[2] = 1.0F;
      Vector3 vector3_2 = new Vector3(floatArray1);
      quaternion1.transformUnitZ(vector3_2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = Float.NaN;
      Quaternion quaternion2 = quaternion0.set((IQuaternion) quaternion1);
      quaternion0.fromVectors(vector3_0, vector3_0);
      Quaternion quaternion3 = new Quaternion(quaternion1);
      quaternion3.transformAndAdd(vector3_0, vector3_0, vector3_0);
      quaternion0.z();
      quaternion0.transformZ(vector3_0);
      Quaternion quaternion4 = new Quaternion(6273722.5F, 0.704274F, (-3.1415927F), 1319.55F);
      quaternion4.equals(quaternion2);
      Quaternion quaternion5 = new Quaternion((-0.904051F), 6273722.5F, (-3.1415927F), (-0.904051F));
      quaternion4.transformUnitZ(vector3_0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      quaternion0.set((IQuaternion) quaternion1);
      quaternion0.fromVectors(vector3_0, vector3_0);
      Quaternion quaternion2 = new Quaternion(quaternion1);
      quaternion2.transformAndAdd(vector3_0, vector3_0, vector3_0);
      quaternion0.z();
      quaternion0.transformZ(vector3_0);
      Quaternion quaternion3 = new Quaternion(Float.NaN, 0.0F, Float.NaN, (-668.9143F));
      quaternion1.equals(quaternion3);
      Quaternion quaternion4 = new Quaternion(194.132F, 0.0F, -0.0F, Float.NaN);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.transformUnitZ((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-4829.796F), (-4829.796F), 6273722.5F, 6273722.5F);
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      quaternion1.invert();
      quaternion0.equals((Object) null);
      Quaternion quaternion2 = quaternion1.fromVectorFromNegativeZ(Float.NaN, 6273722.5F, (-1048.5027F));
      quaternion1.getRotationZ();
      float float0 = 3.4526698E-4F;
      Quaternion quaternion3 = quaternion0.set(783.79F, 3.4526698E-4F, Float.NaN, 783.79F);
      Quaternion quaternion4 = quaternion3.mult((IQuaternion) quaternion1, quaternion2);
      quaternion4.normalize();
      float[] floatArray0 = new float[0];
      Vector3 vector3_1 = null;
      try {
        vector3_1 = new Vector3(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.slerp((IQuaternion) null, (-2025.782F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(0.0F, (IVector3) vector3_0);
      quaternion1.toAngles(vector3_0);
      Vector3 vector3_1 = quaternion0.transformUnitZ(vector3_0);
      Quaternion quaternion2 = quaternion0.fromVectorFromNegativeZ(1.0F, 0.0F, 1.0E-5F);
      Vector3 vector3_2 = vector3_0.absLocal();
      quaternion0.y();
      Quaternion quaternion3 = new Quaternion(quaternion0);
      quaternion1.transformUnitY(vector3_0);
      quaternion2.transformScaleAndAdd(vector3_2, (-1.3946491E7F), vector3_1, vector3_2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = 0.0F;
      quaternion0.set((IQuaternion) quaternion1);
      quaternion0.fromVectors(vector3_0, vector3_0);
      Quaternion quaternion2 = new Quaternion(quaternion1);
      quaternion2.transformAndAdd(vector3_0, vector3_0, vector3_0);
      quaternion0.z();
      quaternion0.transformZ(vector3_0);
      Quaternion quaternion3 = new Quaternion(0.0F, 0.7099282F, 2.0F, (-668.9143F));
      quaternion1.equals(quaternion3);
      Quaternion quaternion4 = new Quaternion(4.0F, 1.0E-5F, (-1.0F), (-668.9143F));
      quaternion4.transformUnitZ(vector3_0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 0.0F, 0.0F);
      quaternion0.equals(quaternion1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion();
      quaternion0.z = 1957.0F;
      quaternion0.equals(quaternion1);
      quaternion1.slerpLocal(quaternion0, (-1.5707964F));
      quaternion0.normalizeLocal();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(0.0F, (-212.9F), (-212.9F), 1.0F);
      quaternion1.equals(quaternion0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = 0.0F;
      Quaternion quaternion2 = quaternion0.set((IQuaternion) quaternion1);
      quaternion0.fromVectors(vector3_0, vector3_0);
      Quaternion quaternion3 = new Quaternion(quaternion1);
      Vector3 vector3_1 = quaternion3.transformAndAdd(vector3_0, vector3_0, vector3_0);
      quaternion0.z();
      quaternion0.transformZ(vector3_0);
      quaternion2.transform((IVector3) vector3_1);
      quaternion2.transformUnitZ(vector3_0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = new Vector3(3.1415827F, 2.0943952F, (-910.7F));
      quaternion0.transformUnitX(vector3_0);
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(0.0F, (IVector3) vector3_1);
      Quaternion quaternion2 = new Quaternion(quaternion1);
      quaternion1.equals(quaternion2);
      quaternion1.transformUnitZ(vector3_1);
      quaternion0.mult((IQuaternion) quaternion2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = quaternion1.fromVectorFromNegativeZ(0.0F, (-443.3F), 2362.345F);
      Quaternion quaternion3 = quaternion2.slerpLocal(quaternion0, 3983.0F);
      quaternion0.w();
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 2362.345F;
      floatArray0[5] = 0.0F;
      Quaternion quaternion4 = new Quaternion(floatArray0);
      quaternion4.toString();
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = new Vector3(vector3_0);
      quaternion4.transformLocal(vector3_1);
      Quaternion quaternion5 = new Quaternion(floatArray0);
      Quaternion quaternion6 = new Quaternion(floatArray0);
      Object object0 = new Object();
      Quaternion quaternion7 = new Quaternion(0.0F, 0.0F, 1329.319F, 1.0F);
      quaternion3.equals(quaternion7);
      Quaternion quaternion8 = new Quaternion(quaternion0);
      quaternion2.slerp((IQuaternion) quaternion6, 1.5707864F, quaternion8);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.0E-5F, 1.0E-5F, 1.0E-5F, (-3.4028235E38F));
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = new Quaternion();
      quaternion0.equals(quaternion2);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      quaternion1.integrate((IVector3) vector3_0, 1.0E-5F);
      quaternion2.set(1.0E-5F, 1.0E-5F, (-1358.4487F), 1.0E-5F);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0E-5F;
      floatArray0[1] = 1.0E-5F;
      floatArray0[2] = (-3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.invert((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.slerp((IQuaternion) quaternion1, 0.0F, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.0E-5F, 1.0E-5F, 1.0E-5F, (-3.4028235E38F));
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = quaternion1.invert();
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion0);
      quaternion1.slerp((IQuaternion) quaternion0, 1.0E-5F, quaternion0);
      quaternion3.invertLocal();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = new Vector3((-3.4028235E38F), 0.695548F, 1.0E-5F);
      quaternion3.transformScaleAndAdd(vector3_0, 1.0E-5F, vector3_0, vector3_1);
      quaternion1.invert(quaternion0);
      Quaternion quaternion4 = quaternion1.fromAngleAxis(221.0F, (-1.0E-5F), 2358.106F, (-1.0E-5F));
      float[] floatArray0 = new float[2];
      MockRandom mockRandom0 = new MockRandom();
      quaternion4.randomize(mockRandom0);
      floatArray0[0] = (-147.073F);
      floatArray0[1] = (-3.4028235E38F);
      Vector3 vector3_2 = null;
      try {
        vector3_2 = new Vector3(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromAngleAxis(0.0F, (IVector3) vector3_0);
      Quaternion quaternion2 = new Quaternion(quaternion1);
      quaternion1.equals(quaternion2);
      quaternion1.transformUnitZ(vector3_0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-428.1F));
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      Vector3 vector3_1 = new Vector3(0.0F, 0.0F, 0.0F);
      Vector3 vector3_2 = vector3_1.addScaled((IVector3) vector3_0, (-4341.68F));
      Vector3 vector3_3 = vector3_1.normalize();
      Quaternion quaternion2 = quaternion0.integrateLocal(vector3_1, Float.NaN);
      Quaternion quaternion3 = new Quaternion();
      Quaternion quaternion4 = quaternion0.invert(quaternion3);
      quaternion2.invertLocal();
      quaternion4.invert();
      Quaternion quaternion5 = new Quaternion(2.7182817F, Float.NaN, Float.NaN, 1.5707964F);
      Quaternion quaternion6 = quaternion1.set((IQuaternion) quaternion5);
      quaternion4.fromVectors(vector3_1, vector3_0);
      Vector3 vector3_4 = quaternion4.transformAndAdd(vector3_0, vector3_3, vector3_2);
      quaternion6.z();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2.7182817F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 1.5707964F;
      floatArray0[4] = 1.5707964F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = Float.NaN;
      quaternion2.fromAngles(vector3_4);
      Quaternion quaternion7 = new Quaternion(floatArray0);
      quaternion7.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1374.8884F, 1374.8884F, 1374.8884F, 1374.8884F);
      Quaternion quaternion1 = quaternion0.fromAngles(1374.8884F, 1374.8884F, 1374.8884F);
      Vector3 vector3_0 = quaternion1.toAngles();
      Vector3 vector3_1 = quaternion1.transform((IVector3) vector3_0);
      Quaternion quaternion2 = quaternion1.integrateLocal(vector3_1, 0.5218765F);
      Quaternion quaternion3 = quaternion0.invert(quaternion2);
      Quaternion quaternion4 = quaternion0.invertLocal();
      Quaternion quaternion5 = quaternion4.invert();
      Quaternion quaternion6 = quaternion1.set((IQuaternion) quaternion3);
      Quaternion quaternion7 = quaternion5.fromVectors(vector3_0, vector3_1);
      Vector3 vector3_2 = quaternion6.transformAndAdd(vector3_0, vector3_0, vector3_1);
      Vector3 vector3_3 = (Vector3)Vector3.ZERO;
      quaternion6.transformScaleAndAdd(vector3_3, 0.24275477F, vector3_0, vector3_0);
      quaternion7.z();
      Quaternion quaternion8 = (Quaternion)Quaternion.IDENTITY;
      quaternion8.transformZ(vector3_2);
      quaternion4.transform((IVector3) vector3_0);
      Quaternion quaternion9 = new Quaternion(0.9187F, (-1.9199344F), 0.80056006F, 1.5820506E7F);
      quaternion1.mult((IQuaternion) quaternion0, quaternion6);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Quaternion quaternion1 = quaternion0.integrateLocal(vector3_0, (-2765.89F));
      quaternion1.w = (-2765.89F);
      Quaternion quaternion2 = quaternion1.fromAngleAxis((-2765.89F), (IVector3) vector3_0);
      Vector3 vector3_1 = new Vector3(vector3_0);
      quaternion0.fromVectorFromNegativeZ((-1.0F), Float.NaN, 2.7182817F);
      quaternion2.hasNaN();
      Vector3 vector3_2 = vector3_0.set((IVector3) vector3_1);
      quaternion1.fromAngleAxis(Float.NaN, Float.NaN, 1990.1975F, 1990.1975F);
      quaternion2.transform((IVector3) vector3_1, vector3_2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F));
      quaternion0.hasNaN();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      quaternion0.fromVectorFromNegativeZ(0.0F, (-443.3F), (-0.70710677F));
      quaternion0.hasNaN();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.70710677F;
      floatArray0[1] = 0.70710677F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.70710677F;
      floatArray0[4] = (-0.70710677F);
      floatArray0[6] = -0.0F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      quaternion0.transformUnitZ(vector3_0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Quaternion quaternion1 = quaternion0.integrateLocal(vector3_0, (-2765.89F));
      quaternion1.w = (-2765.89F);
      Quaternion quaternion2 = quaternion1.fromAngleAxis((-2765.89F), (IVector3) vector3_0);
      Vector3 vector3_1 = new Vector3(vector3_0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-0.34672305F);
      floatArray0[1] = (-2765.89F);
      floatArray0[2] = (-0.34672305F);
      floatArray0[3] = 0.57735026F;
      floatArray0[4] = (-0.34672305F);
      Vector3 vector3_2 = vector3_1.set(floatArray0);
      vector3_1.angle(vector3_0);
      Vector3 vector3_3 = quaternion2.transformUnitX(vector3_1);
      quaternion2.hashCode();
      quaternion1.z();
      quaternion2.hasNaN();
      quaternion2.z();
      vector3_2.toString();
      MockRandom mockRandom0 = new MockRandom(83L);
      Quaternion quaternion3 = quaternion1.randomize(mockRandom0);
      mockRandom0.nextGaussian();
      vector3_2.add((IVector3) vector3_1, vector3_1);
      Quaternion quaternion4 = quaternion1.fromAngleAxis(0.0F, (IVector3) vector3_2);
      Quaternion quaternion5 = quaternion2.fromVectorFromNegativeZ(1.0F, (-2765.89F), 0.0F);
      Quaternion quaternion6 = quaternion5.slerpLocal(quaternion3, 2847.6196F);
      quaternion4.w();
      quaternion1.toString();
      Vector3 vector3_4 = quaternion2.transformLocal(vector3_3);
      quaternion5.normalizeLocal();
      Quaternion quaternion7 = new Quaternion(floatArray0);
      quaternion1.equals(quaternion7);
      quaternion6.hashCode();
      quaternion5.integrateLocal(vector3_4, (-0.34672305F));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1252.37F), (-1252.37F), (-1252.37F), (-1252.37F));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1252.37F);
      floatArray0[1] = (-1252.37F);
      floatArray0[2] = 2794.0F;
      floatArray0[3] = (-1252.37F);
      Vector3 vector3_0 = new Vector3(floatArray0);
      Vector3 vector3_1 = quaternion0.transformUnitX(vector3_0);
      Quaternion quaternion1 = new Quaternion(2794.0F, 4.0F, 2494.0F, (-1252.37F));
      quaternion0.transform((IVector3) vector3_1);
      Quaternion quaternion2 = quaternion0.slerpLocal(quaternion1, (-1.0F));
      quaternion2.invertLocal();
      quaternion1.hashCode();
      Quaternion quaternion3 = quaternion0.invertLocal();
      Vector3 vector3_2 = quaternion1.toAngles();
      quaternion1.toString();
      quaternion1.fromAnglesXY(6273722.5F, (-6273721.5F));
      Vector3 vector3_3 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion4 = quaternion2.fromVectors(vector3_1, vector3_3);
      quaternion4.integrate((IVector3) vector3_2, 4.0F, quaternion0);
      quaternion3.fromVectorFromNegativeZ(1235.0F, 2794.0F, 0.99999F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.transformAndAdd((IVector3) null, (IVector3) null, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      quaternion0.fromVectors(vector3_1, vector3_0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      quaternion0.fromAngleAxis((-1.0F), 3.1415827F, 3.1415827F, 3.1415827F);
      Vector3 vector3_1 = quaternion0.transform((IVector3) vector3_0);
      quaternion0.w();
      Quaternion quaternion1 = quaternion0.invertLocal();
      Quaternion quaternion2 = quaternion1.invert(quaternion0);
      quaternion2.transformUnitY(vector3_1);
      quaternion0.fromAngles((-1017.82F), (-1017.82F), 0.0012792256F);
      vector3_1.addScaledLocal(vector3_0, (-5059110.5F));
      Quaternion quaternion3 = quaternion1.invertLocal();
      quaternion2.transformAndAdd(vector3_1, vector3_1, vector3_1);
      quaternion0.normalizeLocal();
      quaternion3.fromAngleAxis(0.9343949F, (IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      quaternion0.fromVectors(vector3_0, vector3_0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1374.8884F, 1374.8884F, 1374.8884F, 1374.8884F);
      Quaternion quaternion1 = quaternion0.fromAngles(1374.8884F, 1374.8884F, 1374.8884F);
      Vector3 vector3_0 = quaternion1.toAngles();
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_0.addScaledLocal(vector3_1, 0.0F);
      Quaternion quaternion2 = quaternion0.fromAngles(vector3_0);
      quaternion0.slerp((IQuaternion) quaternion2, 0.022659123F, quaternion1);
      quaternion0.slerpLocal(quaternion2, 57.295776F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = quaternion0.set(0.0F, 0.0F, (-3977.5F), 0.0F);
      quaternion1.y();
      quaternion1.slerpLocal(quaternion0, 24.319315F);
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = new Vector3(vector3_0);
      quaternion1.transformAndAdd(vector3_0, vector3_0, vector3_1);
      Quaternion quaternion2 = quaternion0.fromAnglesXY((-3.4028235E38F), 4.0F);
      Quaternion quaternion3 = new Quaternion(484.0F, 2.4157603E38F, 3.4028235E38F, 3.4028235E38F);
      quaternion3.fromAnglesXZ(133.28F, (-0.875248F));
      quaternion2.y();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), 0.0F, 0.0F, 0.0F);
      Vector3 vector3_0 = new Vector3(0.0F, 0.0F, 0.0F);
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      vector3_0.set((IVector3) vector3_1);
      quaternion0.transformUnitY(vector3_0);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion2 = quaternion0.fromAnglesXZ(0.0F, 0.0F);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.5707964F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      quaternion2.getRotationZ();
      vector3_2.multLocal((IVector3) vector3_2);
      quaternion2.transformAndAdd(vector3_2, vector3_2, vector3_1);
      Quaternion quaternion3 = quaternion0.invertLocal();
      quaternion3.z();
      quaternion2.integrate((IVector3) vector3_2, 1972.0F);
      quaternion1.fromAngles(0.0F, 1.5707964F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), 0.0F, 0.0F, 0.0F);
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      quaternion0.fromAngleAxis(0.0F, (IVector3) vector3_0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      Quaternion quaternion1 = null;
      try {
        quaternion1 = new Quaternion(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.0F, 0.0F, (-1175.97F), (-178.16026F));
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = new Quaternion(quaternion1);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion1.mult((IQuaternion) quaternion2);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.set((-178.16026F), (-1.0F), (-178.16026F), 0.0F);
      assertEquals((-178.16026F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-1.0F), quaternion1.y, 0.01F);
      assertEquals((-178.16026F), quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals((-178.16026F), quaternion4.x, 0.01F);
      assertEquals((-178.16026F), quaternion4.z, 0.01F);
      assertEquals((-1.0F), quaternion4.y, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-178.16026F), quaternion1.x(), 0.01F);
      assertEquals((-178.16026F), quaternion1.z(), 0.01F);
      assertEquals((-1.0F), quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals((-178.16026F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-178.16026F), quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals((-1.0F), quaternion4.y(), 0.01F);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = new Quaternion();
      assertEquals(1.0F, quaternion5.w, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertEquals(1.0F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertNotNull(quaternion5);
      
      String string0 = quaternion5.toString();
      assertEquals(1.0F, quaternion5.w, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertEquals(1.0F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertNotNull(string0);
      assertEquals("[0.0, 0.0, 0.0, 1.0]", string0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion5.transform((IVector3) vector3_0);
      assertEquals(1.0F, quaternion5.w, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertEquals(1.0F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Quaternion quaternion6 = quaternion4.integrateLocal(vector3_0, (-1175.97F));
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-0.003968905F), quaternion1.y, 0.01F);
      assertEquals((-0.70710117F), quaternion1.x, 0.01F);
      assertEquals((-0.70710117F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals((-0.003968905F), quaternion4.y, 0.01F);
      assertEquals((-0.70710117F), quaternion4.x, 0.01F);
      assertEquals((-0.70710117F), quaternion4.z, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals((-0.003968905F), quaternion6.y, 0.01F);
      assertEquals((-0.70710117F), quaternion6.z, 0.01F);
      assertEquals(0.0F, quaternion6.w, 0.01F);
      assertEquals((-0.70710117F), quaternion6.x, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.003968905F), quaternion1.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.003968905F), quaternion4.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.70710117F), quaternion6.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion6.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.w(), 0.01F);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion0);
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion3.invert(quaternion0);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-0.003968905F), quaternion1.y, 0.01F);
      assertEquals((-0.70710117F), quaternion1.x, 0.01F);
      assertEquals((-0.70710117F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(-0.0F, quaternion7.y, 0.01F);
      assertEquals(-0.0F, quaternion7.z, 0.01F);
      assertEquals(1.0F, quaternion7.w, 0.01F);
      assertEquals(-0.0F, quaternion7.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.003968905F), quaternion1.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertEquals(-0.0F, quaternion7.z(), 0.01F);
      assertEquals(-0.0F, quaternion7.x(), 0.01F);
      assertEquals(-0.0F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.0F, quaternion7.w(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion5);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion5));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion0.invertLocal();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion8.w, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(0.0F, quaternion8.y, 0.01F);
      assertEquals(0.0F, quaternion8.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion8.w(), 0.01F);
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertEquals(0.0F, quaternion8.y(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.0F, quaternion8.x(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertTrue(quaternion8.equals((Object)quaternion3));
      assertTrue(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertTrue(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertNotNull(quaternion8);
      
      Quaternion quaternion9 = quaternion7.invert();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-0.003968905F), quaternion1.y, 0.01F);
      assertEquals((-0.70710117F), quaternion1.x, 0.01F);
      assertEquals((-0.70710117F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion7.y, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals(1.0F, quaternion7.w, 0.01F);
      assertEquals(0.0F, quaternion7.x, 0.01F);
      assertEquals(1.0F, quaternion9.w, 0.01F);
      assertEquals(-0.0F, quaternion9.y, 0.01F);
      assertEquals(-0.0F, quaternion9.z, 0.01F);
      assertEquals(-0.0F, quaternion9.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.003968905F), quaternion1.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertEquals(0.0F, quaternion7.x(), 0.01F);
      assertEquals(0.0F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.0F, quaternion7.w(), 0.01F);
      assertEquals(-0.0F, quaternion9.x(), 0.01F);
      assertEquals(-0.0F, quaternion9.y(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals(-0.0F, quaternion9.z(), 0.01F);
      assertEquals(1.0F, quaternion9.w(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion9);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion6);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion2.equals((Object)quaternion7));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertTrue(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion5));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion7));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertTrue(quaternion3.equals((Object)quaternion8));
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertTrue(quaternion9.equals((Object)quaternion8));
      assertTrue(quaternion9.equals((Object)quaternion2));
      assertTrue(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertTrue(quaternion9.equals((Object)quaternion3));
      assertTrue(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertTrue(quaternion9.equals((Object)quaternion0));
      assertNotNull(quaternion9);
      
      Quaternion quaternion10 = quaternion0.set((IQuaternion) quaternion4);
      assertEquals((-0.70710117F), quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals((-0.70710117F), quaternion0.z, 0.01F);
      assertEquals((-0.003968905F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-0.003968905F), quaternion1.y, 0.01F);
      assertEquals((-0.70710117F), quaternion1.x, 0.01F);
      assertEquals((-0.70710117F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals((-0.003968905F), quaternion4.y, 0.01F);
      assertEquals((-0.70710117F), quaternion4.x, 0.01F);
      assertEquals((-0.70710117F), quaternion4.z, 0.01F);
      assertEquals((-0.70710117F), quaternion10.z, 0.01F);
      assertEquals((-0.70710117F), quaternion10.x, 0.01F);
      assertEquals((-0.003968905F), quaternion10.y, 0.01F);
      assertEquals(0.0F, quaternion10.w, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion0.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion0.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.003968905F), quaternion1.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.003968905F), quaternion4.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion10.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion10.y(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion10.x(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion0);
      assertSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion6);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertTrue(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertTrue(quaternion10.equals((Object)quaternion4));
      assertTrue(quaternion10.equals((Object)quaternion1));
      assertNotNull(quaternion10);
      
      Quaternion quaternion11 = quaternion5.fromVectors(vector3_0, vector3_1);
      assertEquals((-4.371139E-8F), quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion11.w, 0.01F);
      assertEquals(Float.NaN, quaternion11.x, 0.01F);
      assertEquals(Float.NaN, quaternion11.y, 0.01F);
      assertEquals(Float.NaN, quaternion11.z, 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion5.w(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion11.w(), 0.01F);
      assertTrue(quaternion11.hasNaN());
      assertEquals(Float.NaN, quaternion11.x(), 0.01F);
      assertEquals(Float.NaN, quaternion11.y(), 0.01F);
      assertEquals(Float.NaN, quaternion11.z(), 0.01F);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion11);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion10);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion0);
      assertSame(quaternion11, quaternion5);
      assertNotSame(quaternion11, quaternion4);
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertNotNull(quaternion11);
      
      Vector3 vector3_2 = quaternion6.transformAndAdd(vector3_0, vector3_0, vector3_1);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-0.003968905F), quaternion1.y, 0.01F);
      assertEquals((-0.70710117F), quaternion1.x, 0.01F);
      assertEquals((-0.70710117F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals((-0.003968905F), quaternion4.y, 0.01F);
      assertEquals((-0.70710117F), quaternion4.x, 0.01F);
      assertEquals((-0.70710117F), quaternion4.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals((-0.003968905F), quaternion6.y, 0.01F);
      assertEquals((-0.70710117F), quaternion6.z, 0.01F);
      assertEquals(0.0F, quaternion6.w, 0.01F);
      assertEquals((-0.70710117F), quaternion6.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.003968905F), quaternion1.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.003968905F), quaternion4.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.z(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion5.w(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.70710117F), quaternion6.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion6.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.w(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion11);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion10);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion11);
      assertNotSame(quaternion6, quaternion10);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertTrue(quaternion4.equals((Object)quaternion10));
      assertTrue(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(quaternion6.equals((Object)quaternion10));
      assertTrue(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion9));
      assertTrue(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion11));
      assertTrue(quaternion6.equals((Object)quaternion7));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertNotNull(vector3_2);
      
      float float0 = quaternion1.z();
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-0.003968905F), quaternion1.y, 0.01F);
      assertEquals((-0.70710117F), quaternion1.x, 0.01F);
      assertEquals((-0.70710117F), quaternion1.z, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.003968905F), quaternion1.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion11);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertEquals((-0.70710117F), float0, 0.01F);
      
      float float1 = quaternion10.transformZ(vector3_2);
      assertEquals((-0.70710117F), quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals((-0.70710117F), quaternion0.z, 0.01F);
      assertEquals((-0.003968905F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-0.003968905F), quaternion1.y, 0.01F);
      assertEquals((-0.70710117F), quaternion1.x, 0.01F);
      assertEquals((-0.70710117F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals((-0.003968905F), quaternion4.y, 0.01F);
      assertEquals((-0.70710117F), quaternion4.x, 0.01F);
      assertEquals((-0.70710117F), quaternion4.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals((-0.003968905F), quaternion6.y, 0.01F);
      assertEquals((-0.70710117F), quaternion6.z, 0.01F);
      assertEquals(0.0F, quaternion6.w, 0.01F);
      assertEquals((-0.70710117F), quaternion6.x, 0.01F);
      assertEquals((-0.70710117F), quaternion10.z, 0.01F);
      assertEquals((-0.70710117F), quaternion10.x, 0.01F);
      assertEquals((-0.003968905F), quaternion10.y, 0.01F);
      assertEquals(0.0F, quaternion10.w, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion0.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion0.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.003968905F), quaternion1.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.003968905F), quaternion4.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.z(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion5.w(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.70710117F), quaternion6.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion6.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion10.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion10.y(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion10.x(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion11);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion10);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion11);
      assertNotSame(quaternion6, quaternion10);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion0);
      assertSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion11);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertNotEquals(float1, float0, 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertTrue(quaternion4.equals((Object)quaternion10));
      assertTrue(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(quaternion6.equals((Object)quaternion10));
      assertTrue(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion9));
      assertTrue(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion11));
      assertTrue(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertTrue(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertTrue(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion11));
      assertTrue(quaternion10.equals((Object)quaternion1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0F, float1, 0.01F);
      
      Vector3 vector3_3 = quaternion10.transform((IVector3) vector3_0);
      assertEquals((-0.70710117F), quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals((-0.70710117F), quaternion0.z, 0.01F);
      assertEquals((-0.003968905F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-0.003968905F), quaternion1.y, 0.01F);
      assertEquals((-0.70710117F), quaternion1.x, 0.01F);
      assertEquals((-0.70710117F), quaternion1.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals((-0.003968905F), quaternion4.y, 0.01F);
      assertEquals((-0.70710117F), quaternion4.x, 0.01F);
      assertEquals((-0.70710117F), quaternion4.z, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals((-0.70710117F), quaternion10.z, 0.01F);
      assertEquals((-0.70710117F), quaternion10.x, 0.01F);
      assertEquals((-0.003968905F), quaternion10.y, 0.01F);
      assertEquals(0.0F, quaternion10.w, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion0.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion0.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.003968905F), quaternion1.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.003968905F), quaternion4.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion10.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion10.y(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion10.x(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion0);
      assertSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion11);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertTrue(quaternion4.equals((Object)quaternion10));
      assertTrue(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertTrue(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertTrue(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion11));
      assertTrue(quaternion10.equals((Object)quaternion1));
      assertNotNull(vector3_3);
      
      Quaternion quaternion12 = new Quaternion(0.99999F, 1.0F, 0.0F, 6555657.5F);
      assertEquals(6555657.5F, quaternion12.w, 0.01F);
      assertEquals(0.99999F, quaternion12.x, 0.01F);
      assertEquals(1.0F, quaternion12.y, 0.01F);
      assertEquals(0.0F, quaternion12.z, 0.01F);
      assertEquals(6555657.5F, quaternion12.w(), 0.01F);
      assertEquals(0.99999F, quaternion12.x(), 0.01F);
      assertFalse(quaternion12.hasNaN());
      assertEquals(0.0F, quaternion12.z(), 0.01F);
      assertEquals(1.0F, quaternion12.y(), 0.01F);
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion1));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion0));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion10));
      assertNotNull(quaternion12);
      
      Quaternion quaternion13 = quaternion2.mult((IQuaternion) quaternion10, quaternion4);
      assertEquals((-0.70710117F), quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals((-0.70710117F), quaternion0.z, 0.01F);
      assertEquals((-0.003968905F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-0.003968905F), quaternion1.y, 0.01F);
      assertEquals((-0.70710117F), quaternion1.x, 0.01F);
      assertEquals((-0.70710117F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion13.w, 0.01F);
      assertEquals((-0.70710117F), quaternion13.z, 0.01F);
      assertEquals((-0.70710117F), quaternion13.x, 0.01F);
      assertEquals((-0.003968905F), quaternion13.y, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals((-0.003968905F), quaternion4.y, 0.01F);
      assertEquals((-0.70710117F), quaternion4.x, 0.01F);
      assertEquals((-0.70710117F), quaternion4.z, 0.01F);
      assertEquals((-0.70710117F), quaternion10.z, 0.01F);
      assertEquals((-0.70710117F), quaternion10.x, 0.01F);
      assertEquals((-0.003968905F), quaternion10.y, 0.01F);
      assertEquals(0.0F, quaternion10.w, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion0.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion0.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.003968905F), quaternion1.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion13.hasNaN());
      assertEquals((-0.003968905F), quaternion13.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion13.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion13.x(), 0.01F);
      assertEquals(0.0F, quaternion13.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.003968905F), quaternion4.y(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion4.z(), 0.01F);
      assertEquals((-0.70710117F), quaternion10.z(), 0.01F);
      assertEquals((-0.003968905F), quaternion10.y(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.w(), 0.01F);
      assertEquals((-0.70710117F), quaternion10.x(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion13);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion13, quaternion0);
      assertNotSame(quaternion13, quaternion10);
      assertSame(quaternion13, quaternion4);
      assertNotSame(quaternion13, quaternion2);
      assertNotSame(quaternion13, quaternion7);
      assertNotSame(quaternion13, quaternion5);
      assertNotSame(quaternion13, quaternion8);
      assertSame(quaternion13, quaternion6);
      assertNotSame(quaternion13, quaternion12);
      assertNotSame(quaternion13, quaternion9);
      assertSame(quaternion13, quaternion1);
      assertNotSame(quaternion13, quaternion3);
      assertNotSame(quaternion13, quaternion11);
      assertSame(quaternion4, quaternion13);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion11);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion12);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion12);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion1);
      assertSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion13);
      assertSame(quaternion10, quaternion0);
      assertSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion11);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertFalse(quaternion1.equals((Object)quaternion12));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion13.equals((Object)quaternion12));
      assertTrue(quaternion13.equals((Object)quaternion10));
      assertTrue(quaternion13.equals((Object)quaternion8));
      assertTrue(quaternion13.equals((Object)quaternion7));
      assertFalse(quaternion13.equals((Object)quaternion9));
      assertFalse(quaternion13.equals((Object)quaternion2));
      assertFalse(quaternion13.equals((Object)quaternion3));
      assertFalse(quaternion13.equals((Object)quaternion5));
      assertFalse(quaternion13.equals((Object)quaternion11));
      assertTrue(quaternion13.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertTrue(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertTrue(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertTrue(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion12));
      assertFalse(quaternion10.equals((Object)quaternion11));
      assertTrue(quaternion10.equals((Object)quaternion1));
      assertNotNull(quaternion13);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1252.37F);
      floatArray0[2] = 2032.0024F;
      floatArray0[3] = 3622.04F;
      floatArray0[4] = 767.7515F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion0);
      
      float float0 = quaternion0.getRotationZ();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(2.2295518F, float0, 0.01F);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(3622.04F, quaternion1.w, 0.01F);
      assertEquals(2032.0024F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-1252.37F), quaternion1.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(3622.04F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1252.37F), quaternion1.y(), 0.01F);
      assertEquals(2032.0024F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.multLocal(quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals(1.4719988E7F, quaternion2.z, 0.01F);
      assertEquals((-9072269.0F), quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(7421709.0F, quaternion2.w, 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1.4719988E7F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(7421709.0F, quaternion2.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion2.y(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion1.slerp((IQuaternion) quaternion0, (-1252.37F));
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals((-1.13693409E10F), quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(9.2976108E9F, quaternion3.w, 0.01F);
      assertEquals(1.84470446E10F, quaternion3.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-1.13693409E10F), quaternion3.y(), 0.01F);
      assertEquals(9.2976108E9F, quaternion3.w(), 0.01F);
      assertEquals(1.84470446E10F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion3);
      
      Vector3 vector3_0 = new Vector3(2032.0024F, 3622.04F, (-2990.2F));
      assertEquals(3622.04F, vector3_0.y, 0.01F);
      assertEquals(2032.0024F, vector3_0.x, 0.01F);
      assertEquals((-2990.2F), vector3_0.z, 0.01F);
      assertEquals(2.6189504E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3622.04F, vector3_0.y(), 0.01F);
      assertEquals(2032.0024F, vector3_0.x(), 0.01F);
      assertEquals((-2990.2F), vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_0.addScaled((IVector3) vector3_1, (-1.5820505E7F));
      assertEquals(3622.04F, vector3_0.y, 0.01F);
      assertEquals(2032.0024F, vector3_0.x, 0.01F);
      assertEquals((-2990.2F), vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(2032.0024F, vector3_2.x, 0.01F);
      assertEquals((-2990.2F), vector3_2.z, 0.01F);
      assertEquals(3622.04F, vector3_2.y, 0.01F);
      assertEquals(2.6189504E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3622.04F, vector3_0.y(), 0.01F);
      assertEquals(2032.0024F, vector3_0.x(), 0.01F);
      assertEquals((-2990.2F), vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals((-2990.2F), vector3_2.z(), 0.01F);
      assertEquals(2032.0024F, vector3_2.x(), 0.01F);
      assertEquals(2.6189504E7F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(3622.04F, vector3_2.y(), 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = quaternion1.transformLocal(vector3_0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals((-2.01541547E17F), vector3_0.z, 0.01F);
      assertEquals((-1.60379961E18F), vector3_0.x, 0.01F);
      assertEquals((-3.27006166E17F), vector3_0.y, 0.01F);
      assertEquals((-1.60379961E18F), vector3_3.x, 0.01F);
      assertEquals((-3.27006166E17F), vector3_3.y, 0.01F);
      assertEquals((-2.01541547E17F), vector3_3.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-3.27006166E17F), vector3_0.y(), 0.01F);
      assertEquals((-1.60379961E18F), vector3_0.x(), 0.01F);
      assertEquals((-2.01541547E17F), vector3_0.z(), 0.01F);
      assertEquals(2.7197253E36F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-2.01541547E17F), vector3_3.z(), 0.01F);
      assertEquals((-3.27006166E17F), vector3_3.y(), 0.01F);
      assertEquals((-1.60379961E18F), vector3_3.x(), 0.01F);
      assertEquals(2.7197253E36F, vector3_3.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_3);
      
      boolean boolean0 = quaternion1.hasNaN();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      
      Quaternion quaternion4 = quaternion3.normalize(quaternion2);
      assertEquals(0.39430618F, quaternion4.w, 0.01F);
      assertEquals(0.78232825F, quaternion4.z, 0.01F);
      assertEquals((-0.48216704F), quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-0.48216704F), quaternion1.y, 0.01F);
      assertEquals(0.39430618F, quaternion1.w, 0.01F);
      assertEquals(0.78232825F, quaternion1.z, 0.01F);
      assertEquals(0.78232825F, quaternion2.z, 0.01F);
      assertEquals(0.39430618F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-0.48216704F), quaternion2.y, 0.01F);
      assertEquals((-1.13693409E10F), quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(9.2976108E9F, quaternion3.w, 0.01F);
      assertEquals(1.84470446E10F, quaternion3.z, 0.01F);
      assertEquals(0.78232825F, quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.39430618F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals((-0.48216704F), quaternion4.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.78232825F, quaternion1.z(), 0.01F);
      assertEquals((-0.48216704F), quaternion1.y(), 0.01F);
      assertEquals(0.39430618F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals((-0.48216704F), quaternion2.y(), 0.01F);
      assertEquals(0.78232825F, quaternion2.z(), 0.01F);
      assertEquals(0.39430618F, quaternion2.w(), 0.01F);
      assertEquals((-1.13693409E10F), quaternion3.y(), 0.01F);
      assertEquals(9.2976108E9F, quaternion3.w(), 0.01F);
      assertEquals(1.84470446E10F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion0.mult((IQuaternion) quaternion3, quaternion1);
      assertEquals(4194304.0F, quaternion5.x, 0.01F);
      assertEquals(8.5708706E13F, quaternion5.z, 0.01F);
      assertEquals((-1.80467437E13F), quaternion5.w, 0.01F);
      assertEquals((-5.2824256E13F), quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(4194304.0F, quaternion1.x, 0.01F);
      assertEquals((-1.80467437E13F), quaternion1.w, 0.01F);
      assertEquals((-5.2824256E13F), quaternion1.y, 0.01F);
      assertEquals(8.5708706E13F, quaternion1.z, 0.01F);
      assertEquals((-1.13693409E10F), quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(9.2976108E9F, quaternion3.w, 0.01F);
      assertEquals(1.84470446E10F, quaternion3.z, 0.01F);
      assertEquals((-5.2824256E13F), quaternion5.y(), 0.01F);
      assertEquals(4194304.0F, quaternion5.x(), 0.01F);
      assertEquals((-1.80467437E13F), quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(8.5708706E13F, quaternion5.z(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(8.5708706E13F, quaternion1.z(), 0.01F);
      assertEquals((-5.2824256E13F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(4194304.0F, quaternion1.x(), 0.01F);
      assertEquals((-1.80467437E13F), quaternion1.w(), 0.01F);
      assertEquals((-1.13693409E10F), quaternion3.y(), 0.01F);
      assertEquals(9.2976108E9F, quaternion3.w(), 0.01F);
      assertEquals(1.84470446E10F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion5);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3622.04F;
      floatArray1[1] = 4194304.0F;
      floatArray1[2] = (-1.80467437E13F);
      floatArray1[3] = 767.7515F;
      floatArray1[4] = (-1252.37F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = 1.84470446E10F;
      quaternion5.get(floatArray1);
      assertEquals(4194304.0F, quaternion5.x, 0.01F);
      assertEquals(8.5708706E13F, quaternion5.z, 0.01F);
      assertEquals((-1.80467437E13F), quaternion5.w, 0.01F);
      assertEquals((-5.2824256E13F), quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(4194304.0F, quaternion1.x, 0.01F);
      assertEquals((-1.80467437E13F), quaternion1.w, 0.01F);
      assertEquals((-5.2824256E13F), quaternion1.y, 0.01F);
      assertEquals(8.5708706E13F, quaternion1.z, 0.01F);
      assertEquals((-1.13693409E10F), quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(9.2976108E9F, quaternion3.w, 0.01F);
      assertEquals(1.84470446E10F, quaternion3.z, 0.01F);
      assertEquals((-5.2824256E13F), quaternion5.y(), 0.01F);
      assertEquals(4194304.0F, quaternion5.x(), 0.01F);
      assertEquals((-1.80467437E13F), quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(8.5708706E13F, quaternion5.z(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(8.5708706E13F, quaternion1.z(), 0.01F);
      assertEquals((-5.2824256E13F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(4194304.0F, quaternion1.x(), 0.01F);
      assertEquals((-1.80467437E13F), quaternion1.w(), 0.01F);
      assertEquals((-1.13693409E10F), quaternion3.y(), 0.01F);
      assertEquals(9.2976108E9F, quaternion3.w(), 0.01F);
      assertEquals(1.84470446E10F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertNotSame(floatArray0, floatArray1);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4194304.0F, (-5.2824256E13F), 8.5708706E13F, (-1.80467437E13F), (-1252.37F), 0.0F, 1.84470446E10F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(5, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1252.37F);
      floatArray0[2] = 2032.0024F;
      floatArray0[3] = 3622.04F;
      floatArray0[4] = 767.7515F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion0);
      
      float float0 = quaternion0.getRotationZ();
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(2.2295518F, float0, 0.01F);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(3622.04F, quaternion1.w, 0.01F);
      assertEquals((-1252.37F), quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-1252.37F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3622.04F, quaternion1.w(), 0.01F);
      assertEquals(2032.0024F, quaternion1.z(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.multLocal(quaternion0);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals(7421709.0F, quaternion2.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion2.z, 0.01F);
      assertEquals((-9072269.0F), quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(7421709.0F, quaternion2.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.4719988E7F, quaternion2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion0.mult((IQuaternion) quaternion1);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y, 0.01F);
      assertEquals(6.8397318E10F, quaternion3.z, 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w, 0.01F);
      assertEquals(2048.0F, quaternion3.x, 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y(), 0.01F);
      assertEquals(2048.0F, quaternion3.x(), 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(6.8397318E10F, quaternion3.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.set(0.0F, (-3555.261F), 0.0F, 0.0F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-3555.261F), quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals((-3555.261F), quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals((-3555.261F), quaternion1.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals((-3555.261F), quaternion4.y(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion4);
      
      quaternion4.y = 0.0F;
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      
      quaternion4.w = 2032.0024F;
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertEquals(2032.0024F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      
      String string0 = quaternion4.toString();
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion4.y, 0.01F);
      assertEquals(2032.0024F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertEquals(2032.0024F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("[0.0, 0.0, 0.0, 2032.0024]", string0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion2.transform((IVector3) vector3_0);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(2032.0024F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(2032.0024F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_1);
      
      Quaternion quaternion5 = quaternion0.normalize(quaternion4);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.8349919F, quaternion5.w, 0.01F);
      assertEquals(0.4684392F, quaternion5.z, 0.01F);
      assertEquals((-0.28870988F), quaternion5.y, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-0.28870988F), quaternion1.y, 0.01F);
      assertEquals(0.4684392F, quaternion1.z, 0.01F);
      assertEquals(0.8349919F, quaternion1.w, 0.01F);
      assertEquals((-0.28870988F), quaternion4.y, 0.01F);
      assertEquals(0.4684392F, quaternion4.z, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.8349919F, quaternion4.w, 0.01F);
      assertEquals(0.4684392F, quaternion5.z(), 0.01F);
      assertEquals((-0.28870988F), quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.8349919F, quaternion5.w(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-0.28870988F), quaternion1.y(), 0.01F);
      assertEquals(0.8349919F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.4684392F, quaternion1.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.28870988F), quaternion4.y(), 0.01F);
      assertEquals(0.8349919F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.4684392F, quaternion4.z(), 0.01F);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion0.mult((IQuaternion) quaternion5, quaternion3);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.8349919F, quaternion5.w, 0.01F);
      assertEquals(0.4684392F, quaternion5.z, 0.01F);
      assertEquals((-0.28870988F), quaternion5.y, 0.01F);
      assertEquals(3393.4111F, quaternion6.z, 0.01F);
      assertEquals(0.0F, quaternion6.x, 0.01F);
      assertEquals((-2091.4375F), quaternion6.y, 0.01F);
      assertEquals(1710.9329F, quaternion6.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-0.28870988F), quaternion1.y, 0.01F);
      assertEquals(0.4684392F, quaternion1.z, 0.01F);
      assertEquals(0.8349919F, quaternion1.w, 0.01F);
      assertEquals((-2091.4375F), quaternion3.y, 0.01F);
      assertEquals(3393.4111F, quaternion3.z, 0.01F);
      assertEquals(1710.9329F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals((-0.28870988F), quaternion4.y, 0.01F);
      assertEquals(0.4684392F, quaternion4.z, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.8349919F, quaternion4.w, 0.01F);
      assertEquals(0.4684392F, quaternion5.z(), 0.01F);
      assertEquals((-0.28870988F), quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.8349919F, quaternion5.w(), 0.01F);
      assertEquals(0.0F, quaternion6.x(), 0.01F);
      assertEquals((-2091.4375F), quaternion6.y(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(1710.9329F, quaternion6.w(), 0.01F);
      assertEquals(3393.4111F, quaternion6.z(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-0.28870988F), quaternion1.y(), 0.01F);
      assertEquals(0.8349919F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.4684392F, quaternion1.z(), 0.01F);
      assertEquals((-2091.4375F), quaternion3.y(), 0.01F);
      assertEquals(3393.4111F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(1710.9329F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.28870988F), quaternion4.y(), 0.01F);
      assertEquals(0.8349919F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.4684392F, quaternion4.z(), 0.01F);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion6);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion6);
      
      quaternion4.get(floatArray0);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-0.28870988F), quaternion1.y, 0.01F);
      assertEquals(0.4684392F, quaternion1.z, 0.01F);
      assertEquals(0.8349919F, quaternion1.w, 0.01F);
      assertEquals((-0.28870988F), quaternion4.y, 0.01F);
      assertEquals(0.4684392F, quaternion4.z, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.8349919F, quaternion4.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-0.28870988F), quaternion1.y(), 0.01F);
      assertEquals(0.8349919F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.4684392F, quaternion1.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.28870988F), quaternion4.y(), 0.01F);
      assertEquals(0.8349919F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.4684392F, quaternion4.z(), 0.01F);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion6);
      assertArrayEquals(new float[] {0.0F, (-0.28870988F), 0.4684392F, 0.8349919F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.0F, 0.0F, (-1175.97F), (-178.16026F));
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.slerp((IQuaternion) quaternion1, (-178.16026F));
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Vector3 vector3_0 = new Vector3((-1175.97F), 0.0F, 179.16026F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(179.16026F, vector3_0.z, 0.01F);
      assertEquals((-1175.97F), vector3_0.x, 0.01F);
      assertEquals((-1175.97F), vector3_0.x(), 0.01F);
      assertEquals(1415003.8F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(179.16026F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion2.transformLocal(vector3_0);
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z, 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x, 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z, 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y, 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x, 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y(), 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x(), 0.01F);
      assertEquals(1.1143945E28F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y(), 0.01F);
      assertEquals(1.1143945E28F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x(), 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(vector3_1);
      
      boolean boolean0 = quaternion2.hasNaN();
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(boolean0);
      
      Quaternion quaternion3 = quaternion1.integrateLocal(vector3_1, (-1.5820505E7F));
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z, 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x, 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z, 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y, 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x, 0.01F);
      assertEquals(-0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(-0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.w, 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y(), 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x(), 0.01F);
      assertEquals(1.1143945E28F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y(), 0.01F);
      assertEquals(1.1143945E28F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x(), 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(-0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion3.w(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.invertLocal();
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(-0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(-0.0F, quaternion4.y(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion3);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion3.invert();
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z, 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x, 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z, 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y, 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion5.w, 0.01F);
      assertEquals(-0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(-0.0F, quaternion5.z, 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y(), 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x(), 0.01F);
      assertEquals(1.1143945E28F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y(), 0.01F);
      assertEquals(1.1143945E28F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x(), 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion3.w(), 0.01F);
      assertEquals(0.0F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(-0.0F, quaternion5.z(), 0.01F);
      assertEquals(-0.0F, quaternion5.x(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion4.set((IQuaternion) quaternion2);
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(179.16026F, quaternion1.x, 0.01F);
      assertEquals((-31741.08F), quaternion1.w, 0.01F);
      assertEquals((-210687.1F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals((-210687.1F), quaternion4.z, 0.01F);
      assertEquals(179.16026F, quaternion4.x, 0.01F);
      assertEquals((-31741.08F), quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion6.y, 0.01F);
      assertEquals(179.16026F, quaternion6.x, 0.01F);
      assertEquals((-31741.08F), quaternion6.w, 0.01F);
      assertEquals((-210687.1F), quaternion6.z, 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(179.16026F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals((-210687.1F), quaternion1.z(), 0.01F);
      assertEquals((-31741.08F), quaternion1.w(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertEquals((-210687.1F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-31741.08F), quaternion4.w(), 0.01F);
      assertEquals(179.16026F, quaternion4.x(), 0.01F);
      assertEquals(179.16026F, quaternion6.x(), 0.01F);
      assertEquals((-31741.08F), quaternion6.w(), 0.01F);
      assertEquals((-210687.1F), quaternion6.z(), 0.01F);
      assertEquals(0.0F, quaternion6.y(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion4));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertTrue(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion3.fromVectors(vector3_1, vector3_0);
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(179.16026F, quaternion1.x, 0.01F);
      assertEquals((-31741.08F), quaternion1.w, 0.01F);
      assertEquals((-210687.1F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z, 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x, 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z, 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y, 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x, 0.01F);
      assertEquals((-210687.1F), quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals((-31741.08F), quaternion3.w, 0.01F);
      assertEquals(179.16026F, quaternion3.x, 0.01F);
      assertEquals(179.16026F, quaternion7.x, 0.01F);
      assertEquals((-31741.08F), quaternion7.w, 0.01F);
      assertEquals((-210687.1F), quaternion7.z, 0.01F);
      assertEquals(0.0F, quaternion7.y, 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(179.16026F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals((-210687.1F), quaternion1.z(), 0.01F);
      assertEquals((-31741.08F), quaternion1.w(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y(), 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x(), 0.01F);
      assertEquals(1.1143945E28F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y(), 0.01F);
      assertEquals(1.1143945E28F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x(), 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(179.16026F, quaternion3.x(), 0.01F);
      assertEquals((-210687.1F), quaternion3.z(), 0.01F);
      assertEquals((-31741.08F), quaternion3.w(), 0.01F);
      assertEquals((-31741.08F), quaternion7.w(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(179.16026F, quaternion7.x(), 0.01F);
      assertEquals(0.0F, quaternion7.y(), 0.01F);
      assertEquals((-210687.1F), quaternion7.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion7);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion6);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion6));
      assertTrue(quaternion2.equals((Object)quaternion4));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertNotNull(quaternion7);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Quaternion quaternion8 = null;
      try {
        quaternion8 = new Quaternion(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion((IQuaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      assertEquals(2.4157603E38F, quaternion0.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2.4157603E38F, quaternion0.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y(), 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2.4157603E38F, quaternion1.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = new Quaternion(quaternion1);
      assertEquals(2.4157603E38F, quaternion0.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x, 0.01F);
      assertEquals(0.704274F, quaternion2.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2.4157603E38F, quaternion0.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y(), 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2.4157603E38F, quaternion1.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y(), 0.01F);
      assertEquals(0.704274F, quaternion2.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(2.4157603E38F, quaternion2.z(), 0.01F);
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion1.equals(quaternion2);
      assertEquals(2.4157603E38F, quaternion0.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x, 0.01F);
      assertEquals(0.704274F, quaternion2.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2.4157603E38F, quaternion0.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y(), 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2.4157603E38F, quaternion1.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y(), 0.01F);
      assertEquals(0.704274F, quaternion2.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(2.4157603E38F, quaternion2.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      Quaternion quaternion3 = quaternion0.normalizeLocal();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.w(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertNotNull(quaternion3);
      
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028235E38F, vector3_1.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x(), 0.01F);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_X;
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = new Vector3(vector3_2);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(1.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(1.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(1.0F, vector3_3.lengthSquared(), 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = quaternion2.transformUnitX(vector3_0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_0.x, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x, 0.01F);
      assertEquals(0.704274F, quaternion2.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_4.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_4.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_4.y, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y(), 0.01F);
      assertEquals(0.704274F, quaternion2.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(2.4157603E38F, quaternion2.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_4.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_4.y(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_4.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_4.lengthSquared(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertNotNull(vector3_4);
      
      Quaternion quaternion4 = quaternion0.integrate((IVector3) vector3_3, 2153.0F, quaternion1);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(1.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(1.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(1.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion4.normalizeLocal();
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(1.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals(Float.NaN, quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(1.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(1.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Float.NaN, quaternion5.w(), 0.01F);
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertNotNull(quaternion5);
      
      quaternion1.hashCode();
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Quaternion quaternion6 = quaternion3.randomize(mockRandom0);
      assertEquals((-0.5257311F), quaternion6.x, 0.01F);
      assertEquals((-0.26286554F), quaternion6.z, 0.01F);
      assertEquals(0.7236068F, quaternion6.y, 0.01F);
      assertEquals((-0.36180344F), quaternion6.w, 0.01F);
      assertEquals((-0.26286554F), quaternion0.z, 0.01F);
      assertEquals(0.7236068F, quaternion0.y, 0.01F);
      assertEquals((-0.36180344F), quaternion0.w, 0.01F);
      assertEquals((-0.5257311F), quaternion0.x, 0.01F);
      assertEquals(0.7236068F, quaternion3.y, 0.01F);
      assertEquals((-0.5257311F), quaternion3.x, 0.01F);
      assertEquals((-0.26286554F), quaternion3.z, 0.01F);
      assertEquals((-0.36180344F), quaternion3.w, 0.01F);
      assertEquals((-0.5257311F), quaternion6.x(), 0.01F);
      assertEquals((-0.36180344F), quaternion6.w(), 0.01F);
      assertEquals((-0.26286554F), quaternion6.z(), 0.01F);
      assertEquals(0.7236068F, quaternion6.y(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.36180344F), quaternion0.w(), 0.01F);
      assertEquals((-0.5257311F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.26286554F), quaternion0.z(), 0.01F);
      assertEquals(0.7236068F, quaternion0.y(), 0.01F);
      assertEquals(0.7236068F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-0.36180344F), quaternion3.w(), 0.01F);
      assertEquals((-0.5257311F), quaternion3.x(), 0.01F);
      assertEquals((-0.26286554F), quaternion3.z(), 0.01F);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertNotNull(quaternion6);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-0.1981157F), 0.0F, (-1175.97F), (-178.16026F));
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.1981157F), quaternion0.x, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertEquals((-0.1981157F), quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.fromAngleAxis((-178.16026F), (-0.1981157F), (-178.16026F), 1031.1514F);
      assertEquals(160.01413F, quaternion0.y, 0.01F);
      assertEquals(0.43969503F, quaternion0.w, 0.01F);
      assertEquals((-926.1256F), quaternion0.z, 0.01F);
      assertEquals(0.17793705F, quaternion0.x, 0.01F);
      assertEquals((-926.1256F), quaternion2.z, 0.01F);
      assertEquals(0.17793705F, quaternion2.x, 0.01F);
      assertEquals(160.01413F, quaternion2.y, 0.01F);
      assertEquals(0.43969503F, quaternion2.w, 0.01F);
      assertEquals(160.01413F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-926.1256F), quaternion0.z(), 0.01F);
      assertEquals(0.17793705F, quaternion0.x(), 0.01F);
      assertEquals(0.43969503F, quaternion0.w(), 0.01F);
      assertEquals(0.43969503F, quaternion2.w(), 0.01F);
      assertEquals(0.17793705F, quaternion2.x(), 0.01F);
      assertEquals((-926.1256F), quaternion2.z(), 0.01F);
      assertEquals(160.01413F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.normalizeLocal();
      assertEquals(4.6783657E-4F, quaternion0.w, 0.01F);
      assertEquals((-0.98539984F), quaternion0.z, 0.01F);
      assertEquals(1.8932544E-4F, quaternion0.x, 0.01F);
      assertEquals(0.17025542F, quaternion0.y, 0.01F);
      assertEquals(1.8932544E-4F, quaternion2.x, 0.01F);
      assertEquals(0.17025542F, quaternion2.y, 0.01F);
      assertEquals((-0.98539984F), quaternion2.z, 0.01F);
      assertEquals(4.6783657E-4F, quaternion2.w, 0.01F);
      assertEquals(4.6783657E-4F, quaternion3.w, 0.01F);
      assertEquals(0.17025542F, quaternion3.y, 0.01F);
      assertEquals(1.8932544E-4F, quaternion3.x, 0.01F);
      assertEquals((-0.98539984F), quaternion3.z, 0.01F);
      assertEquals(0.17025542F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.98539984F), quaternion0.z(), 0.01F);
      assertEquals(1.8932544E-4F, quaternion0.x(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion0.w(), 0.01F);
      assertEquals(1.8932544E-4F, quaternion2.x(), 0.01F);
      assertEquals((-0.98539984F), quaternion2.z(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.17025542F, quaternion2.y(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion3.w(), 0.01F);
      assertEquals((-0.98539984F), quaternion3.z(), 0.01F);
      assertEquals(0.17025542F, quaternion3.y(), 0.01F);
      assertEquals(1.8932544E-4F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertNotNull(quaternion3);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.z(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.99999F;
      floatArray0[1] = 2358.106F;
      floatArray0[2] = 4.6783657E-4F;
      floatArray0[3] = (-1175.97F);
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = (-0.1981157F);
      floatArray0[6] = 3.4028235E38F;
      floatArray0[7] = 1.8932544E-4F;
      Quaternion quaternion4 = new Quaternion(floatArray0);
      assertEquals(4.6783657E-4F, quaternion4.z, 0.01F);
      assertEquals(2358.106F, quaternion4.y, 0.01F);
      assertEquals(0.99999F, quaternion4.x, 0.01F);
      assertEquals((-1175.97F), quaternion4.w, 0.01F);
      assertEquals(2358.106F, quaternion4.y(), 0.01F);
      assertEquals(0.99999F, quaternion4.x(), 0.01F);
      assertEquals((-1175.97F), quaternion4.w(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertArrayEquals(new float[] {0.99999F, 2358.106F, 4.6783657E-4F, (-1175.97F), 3.4028235E38F, (-0.1981157F), 3.4028235E38F, 1.8932544E-4F}, floatArray0, 0.01F);
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(8, floatArray0.length);
      assertNotNull(quaternion4);
      
      Vector3 vector3_2 = quaternion4.transformUnitX(vector3_1);
      assertEquals((-1.1121326E7F), vector3_2.x, 0.01F);
      assertEquals(4715.0645F, vector3_2.y, 0.01F);
      assertEquals(5546123.5F, vector3_2.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals((-1.1121326E7F), vector3_1.x, 0.01F);
      assertEquals(5546123.5F, vector3_1.z, 0.01F);
      assertEquals(4715.0645F, vector3_1.y, 0.01F);
      assertEquals(4.6783657E-4F, quaternion4.z, 0.01F);
      assertEquals(2358.106F, quaternion4.y, 0.01F);
      assertEquals(0.99999F, quaternion4.x, 0.01F);
      assertEquals((-1175.97F), quaternion4.w, 0.01F);
      assertEquals(4715.0645F, vector3_2.y(), 0.01F);
      assertEquals(5546123.5F, vector3_2.z(), 0.01F);
      assertEquals(1.544434E14F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-1.1121326E7F), vector3_2.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.544434E14F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(4715.0645F, vector3_1.y(), 0.01F);
      assertEquals(5546123.5F, vector3_1.z(), 0.01F);
      assertEquals((-1.1121326E7F), vector3_1.x(), 0.01F);
      assertEquals(2358.106F, quaternion4.y(), 0.01F);
      assertEquals(0.99999F, quaternion4.x(), 0.01F);
      assertEquals((-1175.97F), quaternion4.w(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertArrayEquals(new float[] {0.99999F, 2358.106F, 4.6783657E-4F, (-1175.97F), 3.4028235E38F, (-0.1981157F), 3.4028235E38F, 1.8932544E-4F}, floatArray0, 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(8, floatArray0.length);
      assertNotNull(vector3_2);
      
      Quaternion quaternion5 = new Quaternion(4715.0645F, 0.99999F, 0.17025542F, 3229.019F);
      assertEquals(4715.0645F, quaternion5.x, 0.01F);
      assertEquals(0.99999F, quaternion5.y, 0.01F);
      assertEquals(3229.019F, quaternion5.w, 0.01F);
      assertEquals(0.17025542F, quaternion5.z, 0.01F);
      assertEquals(0.17025542F, quaternion5.z(), 0.01F);
      assertEquals(4715.0645F, quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.99999F, quaternion5.y(), 0.01F);
      assertEquals(3229.019F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion2.integrate((IVector3) vector3_0, 0.99999F, quaternion5);
      assertEquals(4.6783657E-4F, quaternion0.w, 0.01F);
      assertEquals((-0.98539984F), quaternion0.z, 0.01F);
      assertEquals(1.8932544E-4F, quaternion0.x, 0.01F);
      assertEquals(0.17025542F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.w, 0.01F);
      assertEquals(-0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion6.w, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(-0.0F, quaternion6.x, 0.01F);
      assertEquals(0.0F, quaternion6.y, 0.01F);
      assertEquals(1.8932544E-4F, quaternion2.x, 0.01F);
      assertEquals(0.17025542F, quaternion2.y, 0.01F);
      assertEquals((-0.98539984F), quaternion2.z, 0.01F);
      assertEquals(4.6783657E-4F, quaternion2.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(0.17025542F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.98539984F), quaternion0.z(), 0.01F);
      assertEquals(1.8932544E-4F, quaternion0.x(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(-0.0F, quaternion5.x(), 0.01F);
      assertEquals(0.0F, quaternion5.w(), 0.01F);
      assertEquals(0.0F, quaternion6.w(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(-0.0F, quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.y(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals(1.8932544E-4F, quaternion2.x(), 0.01F);
      assertEquals((-0.98539984F), quaternion2.z(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.17025542F, quaternion2.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertTrue(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertTrue(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertNotNull(quaternion6);
      
      Vector3 vector3_3 = quaternion6.toAngles();
      assertEquals(4.6783657E-4F, quaternion0.w, 0.01F);
      assertEquals((-0.98539984F), quaternion0.z, 0.01F);
      assertEquals(1.8932544E-4F, quaternion0.x, 0.01F);
      assertEquals(0.17025542F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.w, 0.01F);
      assertEquals(-0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion6.w, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(-0.0F, quaternion6.x, 0.01F);
      assertEquals(0.0F, quaternion6.y, 0.01F);
      assertEquals(1.8932544E-4F, quaternion2.x, 0.01F);
      assertEquals(0.17025542F, quaternion2.y, 0.01F);
      assertEquals((-0.98539984F), quaternion2.z, 0.01F);
      assertEquals(4.6783657E-4F, quaternion2.w, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(0.17025542F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.98539984F), quaternion0.z(), 0.01F);
      assertEquals(1.8932544E-4F, quaternion0.x(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(-0.0F, quaternion5.x(), 0.01F);
      assertEquals(0.0F, quaternion5.w(), 0.01F);
      assertEquals(0.0F, quaternion6.w(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(-0.0F, quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.y(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals(1.8932544E-4F, quaternion2.x(), 0.01F);
      assertEquals((-0.98539984F), quaternion2.z(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.17025542F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertTrue(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertTrue(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertNotNull(vector3_3);
      
      quaternion1.hashCode();
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion4));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Quaternion quaternion7 = quaternion2.randomize(mockRandom0);
      assertEquals((-0.5257311F), quaternion0.x, 0.01F);
      assertEquals(0.7236068F, quaternion0.y, 0.01F);
      assertEquals((-0.36180344F), quaternion0.w, 0.01F);
      assertEquals((-0.26286554F), quaternion0.z, 0.01F);
      assertEquals((-0.36180344F), quaternion2.w, 0.01F);
      assertEquals((-0.5257311F), quaternion2.x, 0.01F);
      assertEquals((-0.26286554F), quaternion2.z, 0.01F);
      assertEquals(0.7236068F, quaternion2.y, 0.01F);
      assertEquals((-0.5257311F), quaternion7.x, 0.01F);
      assertEquals((-0.36180344F), quaternion7.w, 0.01F);
      assertEquals((-0.26286554F), quaternion7.z, 0.01F);
      assertEquals(0.7236068F, quaternion7.y, 0.01F);
      assertEquals((-0.5257311F), quaternion0.x(), 0.01F);
      assertEquals(0.7236068F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.26286554F), quaternion0.z(), 0.01F);
      assertEquals((-0.36180344F), quaternion0.w(), 0.01F);
      assertEquals((-0.36180344F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.7236068F, quaternion2.y(), 0.01F);
      assertEquals((-0.5257311F), quaternion2.x(), 0.01F);
      assertEquals((-0.26286554F), quaternion2.z(), 0.01F);
      assertEquals(0.7236068F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-0.36180344F), quaternion7.w(), 0.01F);
      assertEquals((-0.26286554F), quaternion7.z(), 0.01F);
      assertEquals((-0.5257311F), quaternion7.x(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion5);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertNotNull(quaternion7);
      
      float float0 = quaternion4.x();
      assertEquals(4.6783657E-4F, quaternion4.z, 0.01F);
      assertEquals(2358.106F, quaternion4.y, 0.01F);
      assertEquals(0.99999F, quaternion4.x, 0.01F);
      assertEquals((-1175.97F), quaternion4.w, 0.01F);
      assertEquals(2358.106F, quaternion4.y(), 0.01F);
      assertEquals(0.99999F, quaternion4.x(), 0.01F);
      assertEquals((-1175.97F), quaternion4.w(), 0.01F);
      assertEquals(4.6783657E-4F, quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertArrayEquals(new float[] {0.99999F, 2358.106F, 4.6783657E-4F, (-1175.97F), 3.4028235E38F, (-0.1981157F), 3.4028235E38F, 1.8932544E-4F}, floatArray0, 0.01F);
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(8, floatArray0.length);
      assertEquals(0.99999F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.0E-5F, 1.0E-5F, 1.0E-5F, (-3.4028235E38F));
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.invert();
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.y, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.x, 0.01F);
      assertEquals((-3.4028235E38F), quaternion2.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.z(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-3.4028235E38F), quaternion2.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion0);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(1.0E-5F, quaternion2.y, 0.01F);
      assertEquals(1.0E-5F, quaternion2.z, 0.01F);
      assertEquals(1.0E-5F, quaternion2.x, 0.01F);
      assertEquals((-3.4028235E38F), quaternion2.w, 0.01F);
      assertEquals((-3.4028235E38F), quaternion3.w, 0.01F);
      assertEquals(1.0E-5F, quaternion3.x, 0.01F);
      assertEquals(1.0E-5F, quaternion3.y, 0.01F);
      assertEquals(1.0E-5F, quaternion3.z, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion2.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion2.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-3.4028235E38F), quaternion2.w(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion3.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion3.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion3.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion3.z(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.slerp((IQuaternion) quaternion0, 1.0E-5F, quaternion0);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(1.0E-5F, quaternion4.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion4.w, 0.01F);
      assertEquals(1.0E-5F, quaternion4.z, 0.01F);
      assertEquals(1.0E-5F, quaternion4.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(1.0E-5F, quaternion4.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion4.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion4.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion4.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion1));
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion3.invertLocal();
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.y, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.x, 0.01F);
      assertEquals((-3.4028235E38F), quaternion2.w, 0.01F);
      assertEquals((-3.4028235E38F), quaternion3.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion3.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion3.y, 0.01F);
      assertEquals((-1.0E-5F), quaternion3.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion5.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion5.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion5.y, 0.01F);
      assertEquals((-1.0E-5F), quaternion5.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.z(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-3.4028235E38F), quaternion2.w(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion3.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion3.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion3.y(), 0.01F);
      assertEquals((-1.0E-5F), quaternion3.z(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-3.4028235E38F), quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-1.0E-5F), quaternion5.z(), 0.01F);
      assertEquals((-1.0E-5F), quaternion5.y(), 0.01F);
      assertEquals((-1.0E-5F), quaternion5.x(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion1.invert(quaternion0);
      assertEquals((-1.0E-5F), quaternion0.y, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals((-3.4028235E38F), quaternion6.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion6.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion6.y, 0.01F);
      assertEquals((-1.0E-5F), quaternion6.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0E-5F), quaternion0.z(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-3.4028235E38F), quaternion6.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion6.z(), 0.01F);
      assertEquals((-1.0E-5F), quaternion6.y(), 0.01F);
      assertEquals((-1.0E-5F), quaternion6.x(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertTrue(quaternion6.equals((Object)quaternion2));
      assertTrue(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion6.slerp((IQuaternion) quaternion0, (-1.5820505E7F));
      assertEquals((-1.0E-5F), quaternion0.y, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals((-3.4028235E38F), quaternion6.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion6.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion6.y, 0.01F);
      assertEquals((-1.0E-5F), quaternion6.x, 0.01F);
      assertEquals(Float.NaN, quaternion7.w, 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.z, 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.x, 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.y, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0E-5F), quaternion0.z(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-3.4028235E38F), quaternion6.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion6.z(), 0.01F);
      assertEquals((-1.0E-5F), quaternion6.y(), 0.01F);
      assertEquals((-1.0E-5F), quaternion6.x(), 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.x(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals((-1.5258789E-5F), quaternion7.z(), 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.y(), 0.01F);
      assertEquals(Float.NaN, quaternion7.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertTrue(quaternion6.equals((Object)quaternion2));
      assertTrue(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertNotNull(quaternion7);
      
      Vector3 vector3_0 = new Vector3((-1.0E-5F), (-1.0E-5F), 26.21918F);
      assertEquals((-1.0E-5F), vector3_0.y, 0.01F);
      assertEquals((-1.0E-5F), vector3_0.x, 0.01F);
      assertEquals(26.21918F, vector3_0.z, 0.01F);
      assertEquals((-1.0E-5F), vector3_0.x(), 0.01F);
      assertEquals(687.4454F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-1.0E-5F), vector3_0.y(), 0.01F);
      assertEquals(26.21918F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 26.21918F;
      Quaternion quaternion8 = quaternion6.fromVectorFromNegativeZ((-1.0E-5F), 2191.99F, (-1.0E-5F));
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.70710325F, quaternion0.x, 0.01F);
      assertEquals(3.2258507E-9F, quaternion0.y, 0.01F);
      assertEquals(0.7071103F, quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(0.70710325F, quaternion6.x, 0.01F);
      assertEquals(3.2258507E-9F, quaternion6.y, 0.01F);
      assertEquals(0.7071103F, quaternion6.w, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(0.7071103F, quaternion8.w, 0.01F);
      assertEquals(0.70710325F, quaternion8.x, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(3.2258507E-9F, quaternion8.y, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.70710325F, quaternion0.x(), 0.01F);
      assertEquals(3.2258507E-9F, quaternion0.y(), 0.01F);
      assertEquals(0.7071103F, quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(3.2258507E-9F, quaternion6.y(), 0.01F);
      assertEquals(0.7071103F, quaternion6.w(), 0.01F);
      assertEquals(0.70710325F, quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(3.2258507E-9F, quaternion8.y(), 0.01F);
      assertEquals(0.7071103F, quaternion8.w(), 0.01F);
      assertEquals(0.70710325F, quaternion8.x(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion6);
      assertSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertNotNull(quaternion8);
      
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.5820505E7F);
      floatArray0[3] = Float.NaN;
      Vector3 vector3_1 = new Vector3(floatArray0);
      assertEquals(26.21918F, vector3_1.x, 0.01F);
      assertEquals((-1.5820505E7F), vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(2.5028838E14F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(26.21918F, vector3_1.x(), 0.01F);
      assertEquals((-1.5820505E7F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertArrayEquals(new float[] {26.21918F, 0.0F, (-1.5820505E7F), Float.NaN}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(4, floatArray0.length);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion7.transformLocal(vector3_1);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.70710325F, quaternion0.x, 0.01F);
      assertEquals(3.2258507E-9F, quaternion0.y, 0.01F);
      assertEquals(0.7071103F, quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(0.70710325F, quaternion6.x, 0.01F);
      assertEquals(3.2258507E-9F, quaternion6.y, 0.01F);
      assertEquals(0.7071103F, quaternion6.w, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(Float.NaN, quaternion7.w, 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.z, 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.x, 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.70710325F, quaternion0.x(), 0.01F);
      assertEquals(3.2258507E-9F, quaternion0.y(), 0.01F);
      assertEquals(0.7071103F, quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(3.2258507E-9F, quaternion6.y(), 0.01F);
      assertEquals(0.7071103F, quaternion6.w(), 0.01F);
      assertEquals(0.70710325F, quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.x(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals((-1.5258789E-5F), quaternion7.z(), 0.01F);
      assertEquals((-1.5258789E-5F), quaternion7.y(), 0.01F);
      assertEquals(Float.NaN, quaternion7.w(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertArrayEquals(new float[] {26.21918F, 0.0F, (-1.5820505E7F), Float.NaN}, floatArray0, 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(4, floatArray0.length);
      assertNotNull(vector3_2);
      
      boolean boolean0 = quaternion0.hasNaN();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.70710325F, quaternion0.x, 0.01F);
      assertEquals(3.2258507E-9F, quaternion0.y, 0.01F);
      assertEquals(0.7071103F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.70710325F, quaternion0.x(), 0.01F);
      assertEquals(3.2258507E-9F, quaternion0.y(), 0.01F);
      assertEquals(0.7071103F, quaternion0.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(boolean0);
      
      Quaternion quaternion9 = quaternion6.normalize(quaternion0);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.70710325F, quaternion0.x, 0.01F);
      assertEquals(3.2258507E-9F, quaternion0.y, 0.01F);
      assertEquals(0.7071103F, quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(0.70710325F, quaternion9.x, 0.01F);
      assertEquals(0.0F, quaternion9.z, 0.01F);
      assertEquals(3.2258507E-9F, quaternion9.y, 0.01F);
      assertEquals(0.7071103F, quaternion9.w, 0.01F);
      assertEquals(0.70710325F, quaternion6.x, 0.01F);
      assertEquals(3.2258507E-9F, quaternion6.y, 0.01F);
      assertEquals(0.7071103F, quaternion6.w, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.70710325F, quaternion0.x(), 0.01F);
      assertEquals(3.2258507E-9F, quaternion0.y(), 0.01F);
      assertEquals(0.7071103F, quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertEquals(0.70710325F, quaternion9.x(), 0.01F);
      assertEquals(0.7071103F, quaternion9.w(), 0.01F);
      assertEquals(3.2258507E-9F, quaternion9.y(), 0.01F);
      assertEquals(0.0F, quaternion9.z(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertFalse(quaternion6.hasNaN());
      assertEquals(3.2258507E-9F, quaternion6.y(), 0.01F);
      assertEquals(0.7071103F, quaternion6.w(), 0.01F);
      assertEquals(0.70710325F, quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion6);
      assertSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertNotNull(quaternion9);
      
      Quaternion quaternion10 = quaternion9.mult((IQuaternion) quaternion0, quaternion6);
      assertEquals(0.99999994F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(4.5620645E-9F, quaternion0.y, 0.01F);
      assertEquals(9.924173E-6F, quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(9.924173E-6F, quaternion9.w, 0.01F);
      assertEquals(0.99999994F, quaternion9.x, 0.01F);
      assertEquals(0.0F, quaternion9.z, 0.01F);
      assertEquals(4.5620645E-9F, quaternion9.y, 0.01F);
      assertEquals(9.924173E-6F, quaternion10.w, 0.01F);
      assertEquals(4.5620645E-9F, quaternion10.y, 0.01F);
      assertEquals(0.99999994F, quaternion10.x, 0.01F);
      assertEquals(0.0F, quaternion10.z, 0.01F);
      assertEquals(0.99999994F, quaternion6.x, 0.01F);
      assertEquals(9.924173E-6F, quaternion6.w, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(4.5620645E-9F, quaternion6.y, 0.01F);
      assertEquals(0.99999994F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(4.5620645E-9F, quaternion0.y(), 0.01F);
      assertEquals(9.924173E-6F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertEquals(4.5620645E-9F, quaternion9.y(), 0.01F);
      assertEquals(0.0F, quaternion9.z(), 0.01F);
      assertEquals(0.99999994F, quaternion9.x(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals(9.924173E-6F, quaternion9.w(), 0.01F);
      assertEquals(9.924173E-6F, quaternion10.w(), 0.01F);
      assertEquals(4.5620645E-9F, quaternion10.y(), 0.01F);
      assertEquals(0.99999994F, quaternion10.x(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.z(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(9.924173E-6F, quaternion6.w(), 0.01F);
      assertEquals(4.5620645E-9F, quaternion6.y(), 0.01F);
      assertEquals(0.99999994F, quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion10);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion6);
      assertSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion7);
      assertSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion6);
      assertSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion9);
      assertSame(quaternion6, quaternion10);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertNotNull(quaternion10);
      
      quaternion1.get(floatArray0);
      assertEquals(0.99999994F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(4.5620645E-9F, quaternion0.y, 0.01F);
      assertEquals(9.924173E-6F, quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(0.99999994F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(4.5620645E-9F, quaternion0.y(), 0.01F);
      assertEquals(9.924173E-6F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion8);
      assertArrayEquals(new float[] {1.0E-5F, 1.0E-5F, 1.0E-5F, (-3.4028235E38F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      assertEquals(2.4157603E38F, quaternion0.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.z, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2.4157603E38F, quaternion0.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y(), 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = new Quaternion(quaternion1);
      assertEquals(2.4157603E38F, quaternion0.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.z, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x, 0.01F);
      assertEquals(0.704274F, quaternion2.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2.4157603E38F, quaternion0.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y(), 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.704274F, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion1.equals(quaternion2);
      assertEquals(2.4157603E38F, quaternion0.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.z, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x, 0.01F);
      assertEquals(0.704274F, quaternion2.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y, 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2.4157603E38F, quaternion0.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.y(), 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.y(), 0.01F);
      assertEquals(2.4157603E38F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.y(), 0.01F);
      assertEquals(2.4157603E38F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.704274F, quaternion2.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = 2.4157603E38F;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = new Vector3();
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = vector3_0.add((IVector3) vector3_1, vector3_2);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_2.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_2.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_2.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_3.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_3.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_3.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_2.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_2.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_2.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_3.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_3.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_3.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_3.z(), 0.01F);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertNotNull(vector3_3);
      
      Quaternion quaternion3 = quaternion1.fromAngleAxis(0.42656958F, (IVector3) vector3_3);
      assertEquals(7.202804E37F, quaternion0.x, 0.01F);
      assertEquals(7.202804E37F, quaternion0.y, 0.01F);
      assertEquals(7.202804E37F, quaternion0.z, 0.01F);
      assertEquals(0.9773409F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(0.9773409F, quaternion1.w, 0.01F);
      assertEquals(7.202804E37F, quaternion1.x, 0.01F);
      assertEquals(7.202804E37F, quaternion1.y, 0.01F);
      assertEquals(7.202804E37F, quaternion1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_2.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_2.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_2.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_3.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_3.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_3.z, 0.01F);
      assertEquals(7.202804E37F, quaternion3.x, 0.01F);
      assertEquals(7.202804E37F, quaternion3.y, 0.01F);
      assertEquals(7.202804E37F, quaternion3.z, 0.01F);
      assertEquals(0.9773409F, quaternion3.w, 0.01F);
      assertEquals(7.202804E37F, quaternion0.x(), 0.01F);
      assertEquals(7.202804E37F, quaternion0.y(), 0.01F);
      assertEquals(7.202804E37F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.9773409F, quaternion0.w(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(7.202804E37F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(7.202804E37F, quaternion1.y(), 0.01F);
      assertEquals(0.9773409F, quaternion1.w(), 0.01F);
      assertEquals(7.202804E37F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_2.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_2.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_2.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_3.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_3.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_3.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_3.z(), 0.01F);
      assertEquals(0.9773409F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(7.202804E37F, quaternion3.y(), 0.01F);
      assertEquals(7.202804E37F, quaternion3.z(), 0.01F);
      assertEquals(7.202804E37F, quaternion3.x(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion2.fromVectorFromNegativeZ(1.0E-5F, 0.5F, 7.202804E37F);
      assertEquals(7.202804E37F, quaternion0.x, 0.01F);
      assertEquals(7.202804E37F, quaternion0.y, 0.01F);
      assertEquals(7.202804E37F, quaternion0.z, 0.01F);
      assertEquals(0.9773409F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(0.9773409F, quaternion1.w, 0.01F);
      assertEquals(7.202804E37F, quaternion1.x, 0.01F);
      assertEquals(7.202804E37F, quaternion1.y, 0.01F);
      assertEquals(7.202804E37F, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(7.202804E37F, quaternion0.x(), 0.01F);
      assertEquals(7.202804E37F, quaternion0.y(), 0.01F);
      assertEquals(7.202804E37F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.9773409F, quaternion0.w(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(7.202804E37F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(7.202804E37F, quaternion1.y(), 0.01F);
      assertEquals(0.9773409F, quaternion1.w(), 0.01F);
      assertEquals(7.202804E37F, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = new Quaternion();
      assertEquals(1.0F, quaternion5.w, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(1.0F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion1.slerpLocal(quaternion5, 1.0F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(1.0F, quaternion5.w, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(1.0F, quaternion6.w, 0.01F);
      assertEquals(0.0F, quaternion6.y, 0.01F);
      assertEquals(0.0F, quaternion6.x, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1.0F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertEquals(0.0F, quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals(0.0F, quaternion6.y(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(1.0F, quaternion6.w(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion5.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion0));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertNotNull(quaternion6);
      
      float float0 = quaternion2.w();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(Float.NaN, float0, 0.01F);
      
      Quaternion quaternion7 = new Quaternion(floatArray0);
      assertEquals(2.4157603E38F, quaternion7.y, 0.01F);
      assertEquals(0.0F, quaternion7.w, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals(0.704274F, quaternion7.x, 0.01F);
      assertEquals(2.4157603E38F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.0F, quaternion7.w(), 0.01F);
      assertEquals(0.704274F, quaternion7.x(), 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertArrayEquals(new float[] {0.704274F, 2.4157603E38F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion7);
      
      String string0 = quaternion7.toString();
      assertEquals(2.4157603E38F, quaternion7.y, 0.01F);
      assertEquals(0.0F, quaternion7.w, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals(0.704274F, quaternion7.x, 0.01F);
      assertEquals(2.4157603E38F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.0F, quaternion7.w(), 0.01F);
      assertEquals(0.704274F, quaternion7.x(), 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion4);
      assertArrayEquals(new float[] {0.704274F, 2.4157603E38F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("[0.704274, 2.4157603E38, 0.0, 0.0]", string0);
      
      Vector3 vector3_4 = quaternion0.transformLocal(vector3_0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertNotNull(vector3_4);
      
      Quaternion quaternion8 = new Quaternion(floatArray0);
      assertEquals(0.0F, quaternion8.w, 0.01F);
      assertEquals(2.4157603E38F, quaternion8.y, 0.01F);
      assertEquals(0.704274F, quaternion8.x, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertEquals(2.4157603E38F, quaternion8.y(), 0.01F);
      assertEquals(0.704274F, quaternion8.x(), 0.01F);
      assertEquals(0.0F, quaternion8.w(), 0.01F);
      assertArrayEquals(new float[] {0.704274F, 2.4157603E38F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertTrue(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion8);
      
      Quaternion quaternion9 = new Quaternion(floatArray0);
      assertEquals(0.0F, quaternion9.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion9.y, 0.01F);
      assertEquals(0.704274F, quaternion9.x, 0.01F);
      assertEquals(0.0F, quaternion9.w, 0.01F);
      assertEquals(0.0F, quaternion9.z(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals(0.704274F, quaternion9.x(), 0.01F);
      assertEquals(2.4157603E38F, quaternion9.y(), 0.01F);
      assertEquals(0.0F, quaternion9.w(), 0.01F);
      assertArrayEquals(new float[] {0.704274F, 2.4157603E38F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertTrue(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion9);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = quaternion9.equals(object0);
      assertEquals(0.0F, quaternion9.z, 0.01F);
      assertEquals(2.4157603E38F, quaternion9.y, 0.01F);
      assertEquals(0.704274F, quaternion9.x, 0.01F);
      assertEquals(0.0F, quaternion9.w, 0.01F);
      assertEquals(0.0F, quaternion9.z(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals(0.704274F, quaternion9.x(), 0.01F);
      assertEquals(2.4157603E38F, quaternion9.y(), 0.01F);
      assertEquals(0.0F, quaternion9.w(), 0.01F);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion1);
      assertArrayEquals(new float[] {0.704274F, 2.4157603E38F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertTrue(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(boolean1 == boolean0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1);
      
      Quaternion quaternion10 = quaternion4.slerp((IQuaternion) quaternion7, 0.0F, quaternion6);
      assertEquals(2.4157603E38F, quaternion7.y, 0.01F);
      assertEquals(0.0F, quaternion7.w, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals(0.704274F, quaternion7.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion10.x, 0.01F);
      assertEquals(Float.NaN, quaternion10.y, 0.01F);
      assertEquals(Float.NaN, quaternion10.w, 0.01F);
      assertEquals(Float.NaN, quaternion10.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(1.0F, quaternion5.w, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion6.z, 0.01F);
      assertEquals(Float.NaN, quaternion6.w, 0.01F);
      assertEquals(Float.NaN, quaternion6.y, 0.01F);
      assertEquals(Float.NaN, quaternion6.x, 0.01F);
      assertEquals(2.4157603E38F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.0F, quaternion7.w(), 0.01F);
      assertEquals(0.704274F, quaternion7.x(), 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion10.x(), 0.01F);
      assertEquals(Float.NaN, quaternion10.y(), 0.01F);
      assertEquals(Float.NaN, quaternion10.z(), 0.01F);
      assertTrue(quaternion10.hasNaN());
      assertEquals(Float.NaN, quaternion10.w(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(1.0F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion6.x(), 0.01F);
      assertEquals(Float.NaN, quaternion6.z(), 0.01F);
      assertEquals(Float.NaN, quaternion6.y(), 0.01F);
      assertTrue(quaternion6.hasNaN());
      assertEquals(Float.NaN, quaternion6.w(), 0.01F);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_4);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion4);
      assertSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion0);
      assertSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion9);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion10);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion10);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion8);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion3);
      assertArrayEquals(new float[] {0.704274F, 2.4157603E38F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertTrue(quaternion7.equals((Object)quaternion9));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertTrue(quaternion7.equals((Object)quaternion8));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion9));
      assertFalse(quaternion6.equals((Object)quaternion8));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion10);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = new Quaternion(quaternion1);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(0.704274F, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(0.704274F, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion1.equals(quaternion2);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(0.704274F, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(0.704274F, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      float float0 = quaternion0.getRotationZ();
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertEquals(Float.NaN, float0, 0.01F);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NaN;
      floatArray1[1] = Float.NaN;
      floatArray1[2] = Float.NaN;
      floatArray1[3] = Float.NaN;
      floatArray1[4] = 516.8F;
      floatArray1[5] = Float.NaN;
      Vector3 vector3_1 = new Vector3(floatArray1);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, Float.NaN, 516.8F, Float.NaN}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(6, floatArray1.length);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_0.multLocal((IVector3) vector3_1);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, Float.NaN, 516.8F, Float.NaN}, floatArray1, 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(6, floatArray1.length);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = quaternion0.transformAndAdd(vector3_1, vector3_1, vector3_1);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_3.y, 0.01F);
      assertEquals(Float.NaN, vector3_3.x, 0.01F);
      assertEquals(Float.NaN, vector3_3.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_3.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_3.z(), 0.01F);
      assertEquals(Float.NaN, vector3_3.y(), 0.01F);
      assertEquals(Float.NaN, vector3_3.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, Float.NaN, 516.8F, Float.NaN}, floatArray1, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(6, floatArray1.length);
      assertNotNull(vector3_3);
      
      Quaternion quaternion3 = quaternion1.invertLocal();
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(0.704274F, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(0.704274F, quaternion3.w(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertNotNull(quaternion3);
      
      float float1 = quaternion0.z();
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      Quaternion quaternion4 = quaternion1.integrate((IVector3) vector3_1, (-2764.89F));
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, Float.NaN, 516.8F, Float.NaN}, floatArray1, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(6, floatArray1.length);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion2.fromAnglesXY(Float.NaN, 523.4191F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals(Float.NaN, quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertTrue(quaternion5.hasNaN());
      assertEquals(Float.NaN, quaternion5.w(), 0.01F);
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion3.fromAnglesXZ((-1276.229F), Float.NaN);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion6.w, 0.01F);
      assertEquals(Float.NaN, quaternion6.y, 0.01F);
      assertEquals(Float.NaN, quaternion6.x, 0.01F);
      assertEquals(Float.NaN, quaternion6.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion6.x(), 0.01F);
      assertTrue(quaternion6.hasNaN());
      assertEquals(Float.NaN, quaternion6.z(), 0.01F);
      assertEquals(Float.NaN, quaternion6.y(), 0.01F);
      assertEquals(Float.NaN, quaternion6.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertNotNull(quaternion6);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-428.1F));
      assertEquals((-428.1F), quaternion0.w, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.x, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.x(), 0.01F);
      assertEquals((-428.1F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028235E38F), quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.70710677F, quaternion0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(0.70710677F, quaternion1.w, 0.01F);
      assertEquals(0.70710677F, quaternion1.y, 0.01F);
      assertEquals(0.70710677F, quaternion0.w(), 0.01F);
      assertEquals(0.70710677F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.70710677F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.70710677F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Vector3 vector3_1 = new Vector3(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_1.addScaled((IVector3) vector3_0, (-4341.68F));
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals((-4341.68F), vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.8850186E7F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals((-4341.68F), vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = vector3_1.normalize();
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_3.y, 0.01F);
      assertEquals(Float.NaN, vector3_3.z, 0.01F);
      assertEquals(Float.NaN, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_3.x(), 0.01F);
      assertEquals(Float.NaN, vector3_3.y(), 0.01F);
      assertEquals(Float.NaN, vector3_3.z(), 0.01F);
      assertEquals(Float.NaN, vector3_3.lengthSquared(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertNotNull(vector3_3);
      
      Quaternion quaternion2 = quaternion0.integrateLocal(vector3_1, Float.NaN);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = new Quaternion();
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion0.invert(quaternion3);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion2.invertLocal();
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion5.w(), 0.01F);
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion4.invert();
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion6.x, 0.01F);
      assertEquals(Float.NaN, quaternion6.z, 0.01F);
      assertEquals(Float.NaN, quaternion6.y, 0.01F);
      assertEquals(Float.NaN, quaternion6.w, 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion6.y(), 0.01F);
      assertTrue(quaternion6.hasNaN());
      assertEquals(Float.NaN, quaternion6.x(), 0.01F);
      assertEquals(Float.NaN, quaternion6.w(), 0.01F);
      assertEquals(Float.NaN, quaternion6.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = new Quaternion(2.7182817F, Float.NaN, Float.NaN, 1.5707964F);
      assertEquals(Float.NaN, quaternion7.y, 0.01F);
      assertEquals(1.5707964F, quaternion7.w, 0.01F);
      assertEquals(Float.NaN, quaternion7.z, 0.01F);
      assertEquals(2.7182817F, quaternion7.x, 0.01F);
      assertEquals(Float.NaN, quaternion7.y(), 0.01F);
      assertEquals(Float.NaN, quaternion7.z(), 0.01F);
      assertEquals(2.7182817F, quaternion7.x(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals(1.5707964F, quaternion7.w(), 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion1.set((IQuaternion) quaternion7);
      assertEquals(2.7182817F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(1.5707964F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(2.7182817F, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(1.5707964F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion7.y, 0.01F);
      assertEquals(1.5707964F, quaternion7.w, 0.01F);
      assertEquals(Float.NaN, quaternion7.z, 0.01F);
      assertEquals(2.7182817F, quaternion7.x, 0.01F);
      assertEquals(2.7182817F, quaternion8.x, 0.01F);
      assertEquals(1.5707964F, quaternion8.w, 0.01F);
      assertEquals(Float.NaN, quaternion8.z, 0.01F);
      assertEquals(Float.NaN, quaternion8.y, 0.01F);
      assertEquals(2.7182817F, quaternion0.x(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(1.5707964F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(2.7182817F, quaternion1.x(), 0.01F);
      assertEquals(1.5707964F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion7.y(), 0.01F);
      assertEquals(Float.NaN, quaternion7.z(), 0.01F);
      assertEquals(2.7182817F, quaternion7.x(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals(1.5707964F, quaternion7.w(), 0.01F);
      assertTrue(quaternion8.hasNaN());
      assertEquals(2.7182817F, quaternion8.x(), 0.01F);
      assertEquals(Float.NaN, quaternion8.y(), 0.01F);
      assertEquals(Float.NaN, quaternion8.z(), 0.01F);
      assertEquals(1.5707964F, quaternion8.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion8);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertNotNull(quaternion8);
      
      Quaternion quaternion9 = quaternion4.fromVectors(vector3_1, vector3_0);
      assertEquals(2.7182817F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(1.5707964F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion9.z, 0.01F);
      assertEquals(Float.NaN, quaternion9.y, 0.01F);
      assertEquals(Float.NaN, quaternion9.x, 0.01F);
      assertEquals((-4.371139E-8F), quaternion9.w, 0.01F);
      assertEquals(2.7182817F, quaternion0.x(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(1.5707964F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion4.w(), 0.01F);
      assertTrue(quaternion9.hasNaN());
      assertEquals((-4.371139E-8F), quaternion9.w(), 0.01F);
      assertEquals(Float.NaN, quaternion9.z(), 0.01F);
      assertEquals(Float.NaN, quaternion9.y(), 0.01F);
      assertEquals(Float.NaN, quaternion9.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertNotNull(quaternion9);
      
      Vector3 vector3_4 = quaternion4.transformAndAdd(vector3_0, vector3_3, vector3_2);
      assertEquals(2.7182817F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(1.5707964F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, vector3_3.y, 0.01F);
      assertEquals(Float.NaN, vector3_3.z, 0.01F);
      assertEquals(Float.NaN, vector3_3.x, 0.01F);
      assertEquals((-4.371139E-8F), quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(2.7182817F, quaternion0.x(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(1.5707964F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_3.x(), 0.01F);
      assertEquals(Float.NaN, vector3_3.y(), 0.01F);
      assertEquals(Float.NaN, vector3_3.z(), 0.01F);
      assertEquals(Float.NaN, vector3_3.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion4.w(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertNotNull(vector3_4);
      
      float float0 = quaternion8.z();
      assertEquals(2.7182817F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(1.5707964F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(2.7182817F, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(1.5707964F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion7.y, 0.01F);
      assertEquals(1.5707964F, quaternion7.w, 0.01F);
      assertEquals(Float.NaN, quaternion7.z, 0.01F);
      assertEquals(2.7182817F, quaternion7.x, 0.01F);
      assertEquals(2.7182817F, quaternion8.x, 0.01F);
      assertEquals(1.5707964F, quaternion8.w, 0.01F);
      assertEquals(Float.NaN, quaternion8.z, 0.01F);
      assertEquals(Float.NaN, quaternion8.y, 0.01F);
      assertEquals(2.7182817F, quaternion0.x(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(1.5707964F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(2.7182817F, quaternion1.x(), 0.01F);
      assertEquals(1.5707964F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion7.y(), 0.01F);
      assertEquals(Float.NaN, quaternion7.z(), 0.01F);
      assertEquals(2.7182817F, quaternion7.x(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals(1.5707964F, quaternion7.w(), 0.01F);
      assertTrue(quaternion8.hasNaN());
      assertEquals(2.7182817F, quaternion8.x(), 0.01F);
      assertEquals(Float.NaN, quaternion8.y(), 0.01F);
      assertEquals(Float.NaN, quaternion8.z(), 0.01F);
      assertEquals(1.5707964F, quaternion8.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion9);
      assertSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion9);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion9));
      assertFalse(quaternion8.equals((Object)quaternion9));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertEquals(Float.NaN, float0, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2.7182817F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 1.5707964F;
      floatArray0[4] = 1.5707964F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = Float.NaN;
      Quaternion quaternion10 = new Quaternion(floatArray0);
      assertEquals(2.7182817F, quaternion10.x, 0.01F);
      assertEquals(Float.NaN, quaternion10.z, 0.01F);
      assertEquals(Float.NaN, quaternion10.y, 0.01F);
      assertEquals(1.5707964F, quaternion10.w, 0.01F);
      assertEquals(2.7182817F, quaternion10.x(), 0.01F);
      assertTrue(quaternion10.hasNaN());
      assertEquals(Float.NaN, quaternion10.y(), 0.01F);
      assertEquals(1.5707964F, quaternion10.w(), 0.01F);
      assertEquals(Float.NaN, quaternion10.z(), 0.01F);
      assertArrayEquals(new float[] {2.7182817F, Float.NaN, Float.NaN, 1.5707964F, 1.5707964F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertEquals(7, floatArray0.length);
      assertNotNull(quaternion10);
      
      float float1 = quaternion10.transformZ(vector3_2);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(2.7182817F, quaternion10.x, 0.01F);
      assertEquals(Float.NaN, quaternion10.z, 0.01F);
      assertEquals(Float.NaN, quaternion10.y, 0.01F);
      assertEquals(1.5707964F, quaternion10.w, 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(2.7182817F, quaternion10.x(), 0.01F);
      assertTrue(quaternion10.hasNaN());
      assertEquals(Float.NaN, quaternion10.y(), 0.01F);
      assertEquals(1.5707964F, quaternion10.w(), 0.01F);
      assertEquals(Float.NaN, quaternion10.z(), 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion7);
      assertArrayEquals(new float[] {2.7182817F, Float.NaN, Float.NaN, 1.5707964F, 1.5707964F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertEquals(float1, float0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(Float.NaN, float1, 0.01F);
      
      Vector3 vector3_5 = quaternion8.transform((IVector3) vector3_2);
      assertEquals(2.7182817F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(1.5707964F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(2.7182817F, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(1.5707964F, quaternion1.w, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, vector3_5.x, 0.01F);
      assertEquals(Float.NaN, vector3_5.y, 0.01F);
      assertEquals(Float.NaN, vector3_5.z, 0.01F);
      assertEquals(Float.NaN, quaternion7.y, 0.01F);
      assertEquals(1.5707964F, quaternion7.w, 0.01F);
      assertEquals(Float.NaN, quaternion7.z, 0.01F);
      assertEquals(2.7182817F, quaternion7.x, 0.01F);
      assertEquals(2.7182817F, quaternion8.x, 0.01F);
      assertEquals(1.5707964F, quaternion8.w, 0.01F);
      assertEquals(Float.NaN, quaternion8.z, 0.01F);
      assertEquals(Float.NaN, quaternion8.y, 0.01F);
      assertEquals(2.7182817F, quaternion0.x(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(1.5707964F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(2.7182817F, quaternion1.x(), 0.01F);
      assertEquals(1.5707964F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_5.y(), 0.01F);
      assertEquals(Float.NaN, vector3_5.x(), 0.01F);
      assertEquals(Float.NaN, vector3_5.z(), 0.01F);
      assertEquals(Float.NaN, vector3_5.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion7.y(), 0.01F);
      assertEquals(Float.NaN, quaternion7.z(), 0.01F);
      assertEquals(2.7182817F, quaternion7.x(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals(1.5707964F, quaternion7.w(), 0.01F);
      assertTrue(quaternion8.hasNaN());
      assertEquals(2.7182817F, quaternion8.x(), 0.01F);
      assertEquals(Float.NaN, quaternion8.y(), 0.01F);
      assertEquals(Float.NaN, quaternion8.z(), 0.01F);
      assertEquals(1.5707964F, quaternion8.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion9);
      assertSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion9);
      assertNotSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion9));
      assertFalse(quaternion8.equals((Object)quaternion9));
      assertFalse(quaternion8.equals((Object)quaternion10));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertNotNull(vector3_5);
      
      Quaternion quaternion11 = new Quaternion(0.0F, Float.NaN, (-2431.0F), Float.NaN);
      assertEquals(Float.NaN, quaternion11.w, 0.01F);
      assertEquals(Float.NaN, quaternion11.y, 0.01F);
      assertEquals((-2431.0F), quaternion11.z, 0.01F);
      assertEquals(0.0F, quaternion11.x, 0.01F);
      assertEquals(Float.NaN, quaternion11.w(), 0.01F);
      assertTrue(quaternion11.hasNaN());
      assertEquals((-2431.0F), quaternion11.z(), 0.01F);
      assertEquals(0.0F, quaternion11.x(), 0.01F);
      assertEquals(Float.NaN, quaternion11.y(), 0.01F);
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertNotNull(quaternion11);
      
      Quaternion quaternion12 = quaternion6.mult((IQuaternion) quaternion9, quaternion3);
      assertEquals(2.7182817F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(1.5707964F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion6.x, 0.01F);
      assertEquals(Float.NaN, quaternion6.z, 0.01F);
      assertEquals(Float.NaN, quaternion6.y, 0.01F);
      assertEquals(Float.NaN, quaternion6.w, 0.01F);
      assertEquals(Float.NaN, quaternion12.y, 0.01F);
      assertEquals(Float.NaN, quaternion12.x, 0.01F);
      assertEquals(Float.NaN, quaternion12.w, 0.01F);
      assertEquals(Float.NaN, quaternion12.z, 0.01F);
      assertEquals(Float.NaN, quaternion9.w, 0.01F);
      assertEquals(Float.NaN, quaternion9.z, 0.01F);
      assertEquals(Float.NaN, quaternion9.y, 0.01F);
      assertEquals(Float.NaN, quaternion9.x, 0.01F);
      assertEquals(2.7182817F, quaternion0.x(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(1.5707964F, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion6.y(), 0.01F);
      assertTrue(quaternion6.hasNaN());
      assertEquals(Float.NaN, quaternion6.x(), 0.01F);
      assertEquals(Float.NaN, quaternion6.w(), 0.01F);
      assertEquals(Float.NaN, quaternion6.z(), 0.01F);
      assertEquals(Float.NaN, quaternion12.z(), 0.01F);
      assertEquals(Float.NaN, quaternion12.y(), 0.01F);
      assertEquals(Float.NaN, quaternion12.x(), 0.01F);
      assertEquals(Float.NaN, quaternion12.w(), 0.01F);
      assertTrue(quaternion12.hasNaN());
      assertTrue(quaternion9.hasNaN());
      assertEquals(Float.NaN, quaternion9.w(), 0.01F);
      assertEquals(Float.NaN, quaternion9.z(), 0.01F);
      assertEquals(Float.NaN, quaternion9.y(), 0.01F);
      assertEquals(Float.NaN, quaternion9.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion10);
      assertSame(quaternion3, quaternion12);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion12);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion11);
      assertNotSame(quaternion6, quaternion10);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion12);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion9);
      assertNotSame(quaternion12, quaternion11);
      assertNotSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion6);
      assertNotSame(quaternion12, quaternion1);
      assertNotSame(quaternion12, quaternion7);
      assertNotSame(quaternion12, quaternion0);
      assertNotSame(quaternion12, quaternion2);
      assertSame(quaternion12, quaternion3);
      assertNotSame(quaternion12, quaternion5);
      assertSame(quaternion12, quaternion9);
      assertNotSame(quaternion12, quaternion8);
      assertSame(quaternion12, quaternion4);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion11);
      assertNotSame(quaternion9, quaternion10);
      assertSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion12);
      assertNotSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion10));
      assertFalse(quaternion6.equals((Object)quaternion11));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion10));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion1));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion0));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion11));
      assertFalse(quaternion9.equals((Object)quaternion10));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertNotNull(quaternion12);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1252.37F);
      floatArray0[2] = 2032.0024F;
      floatArray0[3] = 3622.04F;
      floatArray0[4] = 767.7515F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion0);
      
      float float0 = quaternion0.getRotationZ();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(2.2295518F, float0, 0.01F);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-1252.37F), quaternion1.y, 0.01F);
      assertEquals(3622.04F, quaternion1.w, 0.01F);
      assertEquals(2032.0024F, quaternion1.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(2032.0024F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-1252.37F), quaternion1.y(), 0.01F);
      assertEquals(3622.04F, quaternion1.w(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.multLocal(quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals((-9072269.0F), quaternion2.y, 0.01F);
      assertEquals(7421709.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.4719988E7F, quaternion2.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.4719988E7F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-9072269.0F), quaternion2.y(), 0.01F);
      assertEquals(7421709.0F, quaternion2.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion0.mult((IQuaternion) quaternion1);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y, 0.01F);
      assertEquals(2048.0F, quaternion3.x, 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w, 0.01F);
      assertEquals(6.8397318E10F, quaternion3.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2048.0F, quaternion3.x(), 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(6.8397318E10F, quaternion3.z(), 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.set(0.0F, (-3555.261F), 0.0F, 0.0F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-3555.261F), quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals((-3555.261F), quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals((-3555.261F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals((-3555.261F), quaternion4.y(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion4);
      
      quaternion4.y = 0.0F;
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      
      quaternion4.w = 2032.0024F;
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertEquals(2032.0024F, quaternion4.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      
      String string0 = quaternion4.toString();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(2032.0024F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertEquals(2032.0024F, quaternion4.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("[0.0, 0.0, 0.0, 2032.0024]", string0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion2.transform((IVector3) vector3_0);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(2032.0024F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(2032.0024F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion0.toAngles(vector3_1);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(2.5892572F, vector3_1.z, 0.01F);
      assertEquals((-1.5707964F), vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(2.5892572F, vector3_2.z, 0.01F);
      assertEquals((-1.5707964F), vector3_2.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(2032.0024F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-1.5707964F), vector3_1.y(), 0.01F);
      assertEquals(2.5892572F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(9.171655F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals((-1.5707964F), vector3_2.y(), 0.01F);
      assertEquals(2.5892572F, vector3_2.z(), 0.01F);
      assertEquals(9.171655F, vector3_2.lengthSquared(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(2032.0024F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = new Vector3(1851.0F, 3.1415927F, 960.1F);
      assertEquals(3.1415927F, vector3_3.y, 0.01F);
      assertEquals(1851.0F, vector3_3.x, 0.01F);
      assertEquals(960.1F, vector3_3.z, 0.01F);
      assertEquals(1851.0F, vector3_3.x(), 0.01F);
      assertEquals(960.1F, vector3_3.z(), 0.01F);
      assertEquals(4348002.5F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(3.1415927F, vector3_3.y(), 0.01F);
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = quaternion0.transformUnitZ(vector3_3);
      assertEquals((-3136860.2F), vector3_3.z, 0.01F);
      assertEquals((-9072269.0F), vector3_3.x, 0.01F);
      assertEquals((-5089638.0F), vector3_3.y, 0.01F);
      assertEquals((-9072269.0F), vector3_4.x, 0.01F);
      assertEquals((-3136860.2F), vector3_4.z, 0.01F);
      assertEquals((-5089638.0F), vector3_4.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals((-5089638.0F), vector3_3.y(), 0.01F);
      assertEquals(1.18050381E14F, vector3_3.lengthSquared(), 0.01F);
      assertEquals((-9072269.0F), vector3_3.x(), 0.01F);
      assertEquals((-3136860.2F), vector3_3.z(), 0.01F);
      assertEquals(1.18050381E14F, vector3_4.lengthSquared(), 0.01F);
      assertEquals((-3136860.2F), vector3_4.z(), 0.01F);
      assertEquals((-9072269.0F), vector3_4.x(), 0.01F);
      assertEquals((-5089638.0F), vector3_4.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_4);
      
      Quaternion quaternion5 = new Quaternion(quaternion3);
      assertEquals(6.8397318E10F, quaternion5.z, 0.01F);
      assertEquals((-1.43911629E10F), quaternion5.w, 0.01F);
      assertEquals(2048.0F, quaternion5.x, 0.01F);
      assertEquals((-4.2154848E10F), quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y, 0.01F);
      assertEquals(2048.0F, quaternion3.x, 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w, 0.01F);
      assertEquals(6.8397318E10F, quaternion3.z, 0.01F);
      assertEquals(6.8397318E10F, quaternion5.z(), 0.01F);
      assertEquals((-1.43911629E10F), quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-4.2154848E10F), quaternion5.y(), 0.01F);
      assertEquals(2048.0F, quaternion5.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2048.0F, quaternion3.x(), 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(6.8397318E10F, quaternion3.z(), 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion4.fromAnglesXY((-3136860.2F), 0.0F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals((-0.55013573F), quaternion6.x, 0.01F);
      assertEquals((-0.83507526F), quaternion6.w, 0.01F);
      assertEquals(-0.0F, quaternion6.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals((-0.83507526F), quaternion1.w, 0.01F);
      assertEquals((-0.55013573F), quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals((-0.55013573F), quaternion4.x, 0.01F);
      assertEquals((-0.83507526F), quaternion4.w, 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(-0.0F, quaternion6.y(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals((-0.55013573F), quaternion6.x(), 0.01F);
      assertEquals((-0.83507526F), quaternion6.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.55013573F), quaternion1.x(), 0.01F);
      assertEquals((-0.83507526F), quaternion1.w(), 0.01F);
      assertEquals((-0.55013573F), quaternion4.x(), 0.01F);
      assertEquals((-0.83507526F), quaternion4.w(), 0.01F);
      assertEquals(-0.0F, quaternion4.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion6);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion6);
      
      quaternion4.hashCode();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals((-0.83507526F), quaternion1.w, 0.01F);
      assertEquals((-0.55013573F), quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals((-0.55013573F), quaternion4.x, 0.01F);
      assertEquals((-0.83507526F), quaternion4.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.55013573F), quaternion1.x(), 0.01F);
      assertEquals((-0.83507526F), quaternion1.w(), 0.01F);
      assertEquals((-0.55013573F), quaternion4.x(), 0.01F);
      assertEquals((-0.83507526F), quaternion4.w(), 0.01F);
      assertEquals(-0.0F, quaternion4.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion6);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      
      Quaternion quaternion7 = quaternion5.invert();
      assertEquals(6.8397318E10F, quaternion5.z, 0.01F);
      assertEquals((-1.43911629E10F), quaternion5.w, 0.01F);
      assertEquals(2048.0F, quaternion5.x, 0.01F);
      assertEquals((-4.2154848E10F), quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(4.2154848E10F, quaternion7.y, 0.01F);
      assertEquals((-2048.0F), quaternion7.x, 0.01F);
      assertEquals((-6.8397318E10F), quaternion7.z, 0.01F);
      assertEquals((-1.43911629E10F), quaternion7.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals((-0.83507526F), quaternion1.w, 0.01F);
      assertEquals((-0.55013573F), quaternion1.x, 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y, 0.01F);
      assertEquals(2048.0F, quaternion3.x, 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w, 0.01F);
      assertEquals(6.8397318E10F, quaternion3.z, 0.01F);
      assertEquals(6.8397318E10F, quaternion5.z(), 0.01F);
      assertEquals((-1.43911629E10F), quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-4.2154848E10F), quaternion5.y(), 0.01F);
      assertEquals(2048.0F, quaternion5.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-1.43911629E10F), quaternion7.w(), 0.01F);
      assertEquals((-2048.0F), quaternion7.x(), 0.01F);
      assertEquals((-6.8397318E10F), quaternion7.z(), 0.01F);
      assertEquals(4.2154848E10F, quaternion7.y(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.55013573F), quaternion1.x(), 0.01F);
      assertEquals((-0.83507526F), quaternion1.w(), 0.01F);
      assertEquals(2048.0F, quaternion3.x(), 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(6.8397318E10F, quaternion3.z(), 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y(), 0.01F);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertTrue(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion7);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_1.x, 0.01F);
      assertEquals(0.57735026F, vector3_1.z, 0.01F);
      assertEquals(0.57735026F, vector3_1.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_1.x(), 0.01F);
      assertEquals(0.57735026F, vector3_1.y(), 0.01F);
      assertEquals(0.57735026F, vector3_1.z(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      float[] floatArray0 = new float[5];
      floatArray0[3] = 0.57735026F;
      Vector3 vector3_2 = vector3_1.set(floatArray0);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.57735026F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_2);
      
      float float0 = vector3_1.angle(vector3_0);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(Float.NaN, float0, 0.01F);
      
      String string0 = vector3_2.toString();
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.57735026F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("[0.0, 0.0, 0.0]", string0);
      
      MockRandom mockRandom0 = new MockRandom(83L);
      assertNotNull(mockRandom0);
      
      Vector3 vector3_3 = vector3_2.add((IVector3) vector3_1, vector3_1);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.57735026F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = (Vector3)Vector3.UNIT_X;
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(1.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertNotNull(vector3_4);
      
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAngleAxis(760.5F, (IVector3) vector3_1);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.99312955F), quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals((-0.99312955F), quaternion1.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals((-0.99312955F), quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals((-0.99312955F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(quaternion1);
      
      float float1 = quaternion1.y();
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.99312955F), quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals((-0.99312955F), quaternion1.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals((-0.99312955F), quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals((-0.99312955F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(-0.0F, float1, 0.01F);
      
      float float2 = quaternion1.getRotationZ();
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.99312955F), quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals((-0.99312955F), quaternion1.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals((-0.99312955F), quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals((-0.99312955F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromVectors(vector3_0, vector3_0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.invert();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.mult((IQuaternion) quaternion0, quaternion0);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      quaternion2.x = 3154.3628F;
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(3154.3628F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(3154.3628F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      
      float float0 = 1721.0853F;
      Quaternion quaternion3 = new Quaternion(0.0F, 1.0F, 1721.0853F, 1721.0853F);
      assertEquals(1.0F, quaternion3.y, 0.01F);
      assertEquals(1721.0853F, quaternion3.w, 0.01F);
      assertEquals(1721.0853F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(1721.0853F, quaternion3.z(), 0.01F);
      assertEquals(1721.0853F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion0.mult((IQuaternion) quaternion3, quaternion3);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(3154.3628F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(5428927.5F, quaternion3.x, 0.01F);
      assertEquals((-5428926.5F), quaternion3.y, 0.01F);
      assertEquals(1721.0853F, quaternion3.w, 0.01F);
      assertEquals(4875.448F, quaternion3.z, 0.01F);
      assertEquals((-5428926.5F), quaternion4.y, 0.01F);
      assertEquals(1721.0853F, quaternion4.w, 0.01F);
      assertEquals(4875.448F, quaternion4.z, 0.01F);
      assertEquals(5428927.5F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(3154.3628F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-5428926.5F), quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(4875.448F, quaternion3.z(), 0.01F);
      assertEquals(5428927.5F, quaternion3.x(), 0.01F);
      assertEquals(1721.0853F, quaternion3.w(), 0.01F);
      assertEquals(4875.448F, quaternion4.z(), 0.01F);
      assertEquals((-5428926.5F), quaternion4.y(), 0.01F);
      assertEquals(5428927.5F, quaternion4.x(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(1721.0853F, quaternion4.w(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion4.normalizeLocal();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(3154.3628F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(6.350172E-4F, quaternion3.z, 0.01F);
      assertEquals(0.7071067F, quaternion3.x, 0.01F);
      assertEquals(2.2416784E-4F, quaternion3.w, 0.01F);
      assertEquals((-0.7071066F), quaternion3.y, 0.01F);
      assertEquals(2.2416784E-4F, quaternion4.w, 0.01F);
      assertEquals((-0.7071066F), quaternion4.y, 0.01F);
      assertEquals(0.7071067F, quaternion4.x, 0.01F);
      assertEquals(6.350172E-4F, quaternion4.z, 0.01F);
      assertEquals(6.350172E-4F, quaternion5.z, 0.01F);
      assertEquals(0.7071067F, quaternion5.x, 0.01F);
      assertEquals(2.2416784E-4F, quaternion5.w, 0.01F);
      assertEquals((-0.7071066F), quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(3154.3628F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.7071067F, quaternion3.x(), 0.01F);
      assertEquals(6.350172E-4F, quaternion3.z(), 0.01F);
      assertEquals((-0.7071066F), quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(2.2416784E-4F, quaternion3.w(), 0.01F);
      assertEquals((-0.7071066F), quaternion4.y(), 0.01F);
      assertEquals(2.2416784E-4F, quaternion4.w(), 0.01F);
      assertEquals(6.350172E-4F, quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.7071067F, quaternion4.x(), 0.01F);
      assertEquals(6.350172E-4F, quaternion5.z(), 0.01F);
      assertEquals(0.7071067F, quaternion5.x(), 0.01F);
      assertEquals((-0.7071066F), quaternion5.y(), 0.01F);
      assertEquals(2.2416784E-4F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertNotNull(quaternion5);
      
      // Undeclared exception!
      try { 
        quaternion4.randomize((java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1374.8884F, 1374.8884F, 1374.8884F, 1374.8884F);
      assertEquals(1374.8884F, quaternion0.w, 0.01F);
      assertEquals(1374.8884F, quaternion0.x, 0.01F);
      assertEquals(1374.8884F, quaternion0.z, 0.01F);
      assertEquals(1374.8884F, quaternion0.y, 0.01F);
      assertEquals(1374.8884F, quaternion0.w(), 0.01F);
      assertEquals(1374.8884F, quaternion0.y(), 0.01F);
      assertEquals(1374.8884F, quaternion0.x(), 0.01F);
      assertEquals(1374.8884F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAngles(1374.8884F, 1374.8884F, 1374.8884F);
      assertEquals(0.14001767F, quaternion0.y, 0.01F);
      assertEquals(0.6237381F, quaternion0.z, 0.01F);
      assertEquals((-0.44977376F), quaternion0.w, 0.01F);
      assertEquals(0.6237381F, quaternion0.x, 0.01F);
      assertEquals(0.14001767F, quaternion1.y, 0.01F);
      assertEquals(0.6237381F, quaternion1.z, 0.01F);
      assertEquals((-0.44977376F), quaternion1.w, 0.01F);
      assertEquals(0.6237381F, quaternion1.x, 0.01F);
      assertEquals(0.14001767F, quaternion0.y(), 0.01F);
      assertEquals(0.6237381F, quaternion0.z(), 0.01F);
      assertEquals(0.6237381F, quaternion0.x(), 0.01F);
      assertEquals((-0.44977376F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.6237381F, quaternion1.z(), 0.01F);
      assertEquals(0.6237381F, quaternion1.x(), 0.01F);
      assertEquals((-0.44977376F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.14001767F, quaternion1.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = quaternion1.toAngles();
      assertEquals(0.14001767F, quaternion0.y, 0.01F);
      assertEquals(0.6237381F, quaternion0.z, 0.01F);
      assertEquals((-0.44977376F), quaternion0.w, 0.01F);
      assertEquals(0.6237381F, quaternion0.x, 0.01F);
      assertEquals(0.14001767F, quaternion1.y, 0.01F);
      assertEquals(0.6237381F, quaternion1.z, 0.01F);
      assertEquals((-0.44977376F), quaternion1.w, 0.01F);
      assertEquals(0.6237381F, quaternion1.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.y, 0.01F);
      assertEquals((-1.1291542F), vector3_0.z, 0.01F);
      assertEquals(0.14001767F, quaternion0.y(), 0.01F);
      assertEquals(0.6237381F, quaternion0.z(), 0.01F);
      assertEquals(0.6237381F, quaternion0.x(), 0.01F);
      assertEquals((-0.44977376F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.6237381F, quaternion1.z(), 0.01F);
      assertEquals(0.6237381F, quaternion1.x(), 0.01F);
      assertEquals((-0.44977376F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.14001767F, quaternion1.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.z(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.x(), 0.01F);
      assertEquals(3.8249679F, vector3_0.lengthSquared(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(0.14001767F, quaternion0.y, 0.01F);
      assertEquals(0.6237381F, quaternion0.z, 0.01F);
      assertEquals((-0.44977376F), quaternion0.w, 0.01F);
      assertEquals(0.6237381F, quaternion0.x, 0.01F);
      assertEquals(0.14001767F, quaternion1.y, 0.01F);
      assertEquals(0.6237381F, quaternion1.z, 0.01F);
      assertEquals((-0.44977376F), quaternion1.w, 0.01F);
      assertEquals(0.6237381F, quaternion1.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.y, 0.01F);
      assertEquals((-1.1291542F), vector3_0.z, 0.01F);
      assertEquals((-1.1291542F), vector3_1.z, 0.01F);
      assertEquals((-1.1291542F), vector3_1.y, 0.01F);
      assertEquals((-1.1291542F), vector3_1.x, 0.01F);
      assertEquals(0.14001767F, quaternion0.y(), 0.01F);
      assertEquals(0.6237381F, quaternion0.z(), 0.01F);
      assertEquals(0.6237381F, quaternion0.x(), 0.01F);
      assertEquals((-0.44977376F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.6237381F, quaternion1.z(), 0.01F);
      assertEquals(0.6237381F, quaternion1.x(), 0.01F);
      assertEquals((-0.44977376F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.14001767F, quaternion1.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.z(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.x(), 0.01F);
      assertEquals(3.8249679F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.8249679F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-1.1291542F), vector3_1.x(), 0.01F);
      assertEquals((-1.1291542F), vector3_1.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_1.z(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_0.addScaledLocal(vector3_1, 0.0F);
      assertEquals(0.14001767F, quaternion0.y, 0.01F);
      assertEquals(0.6237381F, quaternion0.z, 0.01F);
      assertEquals((-0.44977376F), quaternion0.w, 0.01F);
      assertEquals(0.6237381F, quaternion0.x, 0.01F);
      assertEquals(0.14001767F, quaternion1.y, 0.01F);
      assertEquals(0.6237381F, quaternion1.z, 0.01F);
      assertEquals((-0.44977376F), quaternion1.w, 0.01F);
      assertEquals(0.6237381F, quaternion1.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.y, 0.01F);
      assertEquals((-1.1291542F), vector3_0.z, 0.01F);
      assertEquals((-1.1291542F), vector3_1.z, 0.01F);
      assertEquals((-1.1291542F), vector3_1.y, 0.01F);
      assertEquals((-1.1291542F), vector3_1.x, 0.01F);
      assertEquals((-1.1291542F), vector3_2.x, 0.01F);
      assertEquals((-1.1291542F), vector3_2.y, 0.01F);
      assertEquals((-1.1291542F), vector3_2.z, 0.01F);
      assertEquals(0.14001767F, quaternion0.y(), 0.01F);
      assertEquals(0.6237381F, quaternion0.z(), 0.01F);
      assertEquals(0.6237381F, quaternion0.x(), 0.01F);
      assertEquals((-0.44977376F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.6237381F, quaternion1.z(), 0.01F);
      assertEquals(0.6237381F, quaternion1.x(), 0.01F);
      assertEquals((-0.44977376F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.14001767F, quaternion1.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.z(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.x(), 0.01F);
      assertEquals(3.8249679F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.8249679F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-1.1291542F), vector3_1.x(), 0.01F);
      assertEquals((-1.1291542F), vector3_1.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_1.z(), 0.01F);
      assertEquals((-1.1291542F), vector3_2.x(), 0.01F);
      assertEquals((-1.1291542F), vector3_2.y(), 0.01F);
      assertEquals(3.8249679F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-1.1291542F), vector3_2.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      
      Quaternion quaternion2 = quaternion0.fromAngles(vector3_0);
      assertEquals(0.44977415F, quaternion0.w, 0.01F);
      assertEquals((-0.14001778F), quaternion0.y, 0.01F);
      assertEquals((-0.62373805F), quaternion0.z, 0.01F);
      assertEquals((-0.62373805F), quaternion0.x, 0.01F);
      assertEquals((-0.14001778F), quaternion1.y, 0.01F);
      assertEquals((-0.62373805F), quaternion1.z, 0.01F);
      assertEquals(0.44977415F, quaternion1.w, 0.01F);
      assertEquals((-0.62373805F), quaternion1.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.y, 0.01F);
      assertEquals((-1.1291542F), vector3_0.z, 0.01F);
      assertEquals(0.44977415F, quaternion2.w, 0.01F);
      assertEquals((-0.62373805F), quaternion2.x, 0.01F);
      assertEquals((-0.14001778F), quaternion2.y, 0.01F);
      assertEquals((-0.62373805F), quaternion2.z, 0.01F);
      assertEquals((-0.62373805F), quaternion0.x(), 0.01F);
      assertEquals((-0.62373805F), quaternion0.z(), 0.01F);
      assertEquals((-0.14001778F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.44977415F, quaternion0.w(), 0.01F);
      assertEquals((-0.14001778F), quaternion1.y(), 0.01F);
      assertEquals((-0.62373805F), quaternion1.z(), 0.01F);
      assertEquals((-0.62373805F), quaternion1.x(), 0.01F);
      assertEquals(0.44977415F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.1291542F), vector3_0.z(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.x(), 0.01F);
      assertEquals(3.8249679F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.44977415F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.14001778F), quaternion2.y(), 0.01F);
      assertEquals((-0.62373805F), quaternion2.z(), 0.01F);
      assertEquals((-0.62373805F), quaternion2.x(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertNotNull(quaternion2);
      
      quaternion2.hashCode();
      assertEquals(0.44977415F, quaternion0.w, 0.01F);
      assertEquals((-0.14001778F), quaternion0.y, 0.01F);
      assertEquals((-0.62373805F), quaternion0.z, 0.01F);
      assertEquals((-0.62373805F), quaternion0.x, 0.01F);
      assertEquals((-0.14001778F), quaternion1.y, 0.01F);
      assertEquals((-0.62373805F), quaternion1.z, 0.01F);
      assertEquals(0.44977415F, quaternion1.w, 0.01F);
      assertEquals((-0.62373805F), quaternion1.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.x, 0.01F);
      assertEquals((-1.1291542F), vector3_0.y, 0.01F);
      assertEquals((-1.1291542F), vector3_0.z, 0.01F);
      assertEquals(0.44977415F, quaternion2.w, 0.01F);
      assertEquals((-0.62373805F), quaternion2.x, 0.01F);
      assertEquals((-0.14001778F), quaternion2.y, 0.01F);
      assertEquals((-0.62373805F), quaternion2.z, 0.01F);
      assertEquals((-0.62373805F), quaternion0.x(), 0.01F);
      assertEquals((-0.62373805F), quaternion0.z(), 0.01F);
      assertEquals((-0.14001778F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.44977415F, quaternion0.w(), 0.01F);
      assertEquals((-0.14001778F), quaternion1.y(), 0.01F);
      assertEquals((-0.62373805F), quaternion1.z(), 0.01F);
      assertEquals((-0.62373805F), quaternion1.x(), 0.01F);
      assertEquals(0.44977415F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.1291542F), vector3_0.z(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.y(), 0.01F);
      assertEquals((-1.1291542F), vector3_0.x(), 0.01F);
      assertEquals(3.8249679F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.44977415F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.14001778F), quaternion2.y(), 0.01F);
      assertEquals((-0.62373805F), quaternion2.z(), 0.01F);
      assertEquals((-0.62373805F), quaternion2.x(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertTrue(vector3_0.equals((Object)vector3_1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.fromAngleAxis((-137.24F), (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3(3.4028235E38F, 0.0F, 0.5F);
      assertEquals(0.5F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.5F, vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = vector3_0.absLocal();
      assertEquals(0.5F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.5F, vector3_1.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.5F, vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.5F, vector3_1.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
      
      Quaternion quaternion1 = quaternion0.integrateLocal(vector3_0, 1.5707964F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.5F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.5F, vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.mult((IQuaternion) quaternion1, quaternion1);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.5F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.5F, vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion1.multLocal(quaternion2);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.5F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.5F, vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.w(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertNotNull(quaternion3);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ(0.0F, 0.0F, 0.0F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(0.70710677F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(0.70710677F, quaternion0.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(0.70710677F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(1.0F, 1.0F, 1.0F, 0.0F);
      assertEquals(1.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.y, 0.01F);
      assertEquals(1.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.y(), 0.01F);
      assertEquals(1.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      boolean boolean0 = quaternion1.equals(quaternion0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.y, 0.01F);
      assertEquals(1.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.y(), 0.01F);
      assertEquals(1.0F, quaternion1.x(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.integrateLocal(vector3_0, (-2765.89F));
      assertEquals((-0.57735014F), quaternion0.x, 0.01F);
      assertEquals((-0.57735014F), quaternion0.y, 0.01F);
      assertEquals((-0.57735014F), quaternion0.z, 0.01F);
      assertEquals(7.2309445E-4F, quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-0.57735014F), quaternion1.z, 0.01F);
      assertEquals((-0.57735014F), quaternion1.x, 0.01F);
      assertEquals(7.2309445E-4F, quaternion1.w, 0.01F);
      assertEquals((-0.57735014F), quaternion1.y, 0.01F);
      assertEquals((-0.57735014F), quaternion0.x(), 0.01F);
      assertEquals(7.2309445E-4F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.57735014F), quaternion0.y(), 0.01F);
      assertEquals((-0.57735014F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.57735014F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.57735014F), quaternion1.z(), 0.01F);
      assertEquals(7.2309445E-4F, quaternion1.w(), 0.01F);
      assertEquals((-0.57735014F), quaternion1.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      quaternion1.w = (-2765.89F);
      assertEquals((-0.57735014F), quaternion0.x(), 0.01F);
      assertEquals((-2765.89F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.57735014F), quaternion0.y(), 0.01F);
      assertEquals((-0.57735014F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-2765.89F), quaternion1.w(), 0.01F);
      assertEquals((-0.57735014F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.57735014F), quaternion1.z(), 0.01F);
      assertEquals((-0.57735014F), quaternion1.x(), 0.01F);
      
      Quaternion quaternion2 = quaternion1.fromAngleAxis((-2765.89F), (IVector3) vector3_0);
      assertEquals((-0.34672305F), quaternion0.y, 0.01F);
      assertEquals((-0.34672305F), quaternion0.z, 0.01F);
      assertEquals((-0.34672305F), quaternion0.x, 0.01F);
      assertEquals(0.79959327F, quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.79959327F, quaternion1.w, 0.01F);
      assertEquals((-0.34672305F), quaternion1.x, 0.01F);
      assertEquals((-0.34672305F), quaternion1.y, 0.01F);
      assertEquals((-0.34672305F), quaternion1.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.x, 0.01F);
      assertEquals(0.79959327F, quaternion2.w, 0.01F);
      assertEquals((-0.34672305F), quaternion2.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.79959327F, quaternion0.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.x(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.34672305F), quaternion1.x(), 0.01F);
      assertEquals(0.79959327F, quaternion1.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.79959327F, quaternion2.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotNull(quaternion2);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_1.z, 0.01F);
      assertEquals(0.57735026F, vector3_1.y, 0.01F);
      assertEquals(0.57735026F, vector3_1.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_1.x(), 0.01F);
      assertEquals(0.57735026F, vector3_1.y(), 0.01F);
      assertEquals(0.99999994F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_1.z(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-0.34672305F);
      floatArray0[1] = (-2765.89F);
      floatArray0[2] = (-0.34672305F);
      floatArray0[3] = 0.57735026F;
      floatArray0[4] = (-0.34672305F);
      Vector3 vector3_2 = vector3_1.set(floatArray0);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-0.34672305F), vector3_1.x, 0.01F);
      assertEquals((-0.34672305F), vector3_1.z, 0.01F);
      assertEquals((-2765.89F), vector3_1.y, 0.01F);
      assertEquals((-2765.89F), vector3_2.y, 0.01F);
      assertEquals((-0.34672305F), vector3_2.x, 0.01F);
      assertEquals((-0.34672305F), vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(7650147.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.34672305F), vector3_1.z(), 0.01F);
      assertEquals((-0.34672305F), vector3_1.x(), 0.01F);
      assertEquals((-2765.89F), vector3_1.y(), 0.01F);
      assertEquals((-0.34672305F), vector3_2.x(), 0.01F);
      assertEquals((-0.34672305F), vector3_2.z(), 0.01F);
      assertEquals((-2765.89F), vector3_2.y(), 0.01F);
      assertEquals(7650147.0F, vector3_2.lengthSquared(), 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertArrayEquals(new float[] {(-0.34672305F), (-2765.89F), (-0.34672305F), 0.57735026F, (-0.34672305F)}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_2);
      
      float float0 = vector3_1.angle(vector3_0);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-0.34672305F), vector3_1.x, 0.01F);
      assertEquals((-0.34672305F), vector3_1.z, 0.01F);
      assertEquals((-2765.89F), vector3_1.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(7650147.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.34672305F), vector3_1.z(), 0.01F);
      assertEquals((-0.34672305F), vector3_1.x(), 0.01F);
      assertEquals((-2765.89F), vector3_1.y(), 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(2.1864533F, float0, 0.01F);
      
      Vector3 vector3_3 = quaternion2.transformUnitX(vector3_1);
      assertEquals((-0.34672305F), quaternion0.y, 0.01F);
      assertEquals((-0.34672305F), quaternion0.z, 0.01F);
      assertEquals((-0.34672305F), quaternion0.x, 0.01F);
      assertEquals(0.79959327F, quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.79959327F, quaternion1.w, 0.01F);
      assertEquals((-0.34672305F), quaternion1.x, 0.01F);
      assertEquals((-0.34672305F), quaternion1.y, 0.01F);
      assertEquals((-0.34672305F), quaternion1.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.x, 0.01F);
      assertEquals(0.79959327F, quaternion2.w, 0.01F);
      assertEquals((-0.34672305F), quaternion2.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.y, 0.01F);
      assertEquals((-0.31404108F), vector3_1.y, 0.01F);
      assertEquals(0.5191325F, vector3_1.x, 0.01F);
      assertEquals(0.7949086F, vector3_1.z, 0.01F);
      assertEquals(0.5191325F, vector3_3.x, 0.01F);
      assertEquals((-0.31404108F), vector3_3.y, 0.01F);
      assertEquals(0.7949086F, vector3_3.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.79959327F, quaternion0.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.x(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.34672305F), quaternion1.x(), 0.01F);
      assertEquals(0.79959327F, quaternion1.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.79959327F, quaternion2.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.x(), 0.01F);
      assertEquals(0.7949086F, vector3_1.z(), 0.01F);
      assertEquals((-0.31404108F), vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.5191325F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals((-0.31404108F), vector3_3.y(), 0.01F);
      assertEquals(0.7949086F, vector3_3.z(), 0.01F);
      assertEquals(0.5191325F, vector3_3.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertNotNull(vector3_3);
      
      quaternion2.hashCode();
      assertEquals((-0.34672305F), quaternion0.y, 0.01F);
      assertEquals((-0.34672305F), quaternion0.z, 0.01F);
      assertEquals((-0.34672305F), quaternion0.x, 0.01F);
      assertEquals(0.79959327F, quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.79959327F, quaternion1.w, 0.01F);
      assertEquals((-0.34672305F), quaternion1.x, 0.01F);
      assertEquals((-0.34672305F), quaternion1.y, 0.01F);
      assertEquals((-0.34672305F), quaternion1.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.x, 0.01F);
      assertEquals(0.79959327F, quaternion2.w, 0.01F);
      assertEquals((-0.34672305F), quaternion2.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.79959327F, quaternion0.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.x(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.34672305F), quaternion1.x(), 0.01F);
      assertEquals(0.79959327F, quaternion1.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.79959327F, quaternion2.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      
      float float1 = quaternion1.z();
      assertEquals((-0.34672305F), quaternion0.y, 0.01F);
      assertEquals((-0.34672305F), quaternion0.z, 0.01F);
      assertEquals((-0.34672305F), quaternion0.x, 0.01F);
      assertEquals(0.79959327F, quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.79959327F, quaternion1.w, 0.01F);
      assertEquals((-0.34672305F), quaternion1.x, 0.01F);
      assertEquals((-0.34672305F), quaternion1.y, 0.01F);
      assertEquals((-0.34672305F), quaternion1.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.79959327F, quaternion0.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.x(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.34672305F), quaternion1.x(), 0.01F);
      assertEquals(0.79959327F, quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals((-0.34672305F), float1, 0.01F);
      
      boolean boolean0 = quaternion2.hasNaN();
      assertEquals((-0.34672305F), quaternion0.y, 0.01F);
      assertEquals((-0.34672305F), quaternion0.z, 0.01F);
      assertEquals((-0.34672305F), quaternion0.x, 0.01F);
      assertEquals(0.79959327F, quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.79959327F, quaternion1.w, 0.01F);
      assertEquals((-0.34672305F), quaternion1.x, 0.01F);
      assertEquals((-0.34672305F), quaternion1.y, 0.01F);
      assertEquals((-0.34672305F), quaternion1.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.x, 0.01F);
      assertEquals(0.79959327F, quaternion2.w, 0.01F);
      assertEquals((-0.34672305F), quaternion2.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.79959327F, quaternion0.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.x(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.34672305F), quaternion1.x(), 0.01F);
      assertEquals(0.79959327F, quaternion1.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.79959327F, quaternion2.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(boolean0);
      
      float float2 = quaternion2.z();
      assertEquals((-0.34672305F), quaternion0.y, 0.01F);
      assertEquals((-0.34672305F), quaternion0.z, 0.01F);
      assertEquals((-0.34672305F), quaternion0.x, 0.01F);
      assertEquals(0.79959327F, quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.79959327F, quaternion1.w, 0.01F);
      assertEquals((-0.34672305F), quaternion1.x, 0.01F);
      assertEquals((-0.34672305F), quaternion1.y, 0.01F);
      assertEquals((-0.34672305F), quaternion1.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.x, 0.01F);
      assertEquals(0.79959327F, quaternion2.w, 0.01F);
      assertEquals((-0.34672305F), quaternion2.z, 0.01F);
      assertEquals((-0.34672305F), quaternion2.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.79959327F, quaternion0.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.x(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.34672305F), quaternion1.x(), 0.01F);
      assertEquals(0.79959327F, quaternion1.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.79959327F, quaternion2.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-0.34672305F), float2, 0.01F);
      
      String string0 = vector3_2.toString();
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-0.31404108F), vector3_1.y, 0.01F);
      assertEquals(0.5191325F, vector3_1.x, 0.01F);
      assertEquals(0.7949086F, vector3_1.z, 0.01F);
      assertEquals(0.5191325F, vector3_2.x, 0.01F);
      assertEquals((-0.31404108F), vector3_2.y, 0.01F);
      assertEquals(0.7949086F, vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.7949086F, vector3_1.z(), 0.01F);
      assertEquals((-0.31404108F), vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.5191325F, vector3_1.x(), 0.01F);
      assertEquals(0.5191325F, vector3_2.x(), 0.01F);
      assertEquals((-0.31404108F), vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.7949086F, vector3_2.z(), 0.01F);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {(-0.34672305F), (-2765.89F), (-0.34672305F), 0.57735026F, (-0.34672305F)}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("[0.5191325, -0.31404108, 0.7949086]", string0);
      
      MockRandom mockRandom0 = new MockRandom(83L);
      assertNotNull(mockRandom0);
      
      Quaternion quaternion3 = quaternion1.randomize(mockRandom0);
      assertEquals(0.7236068F, quaternion0.y, 0.01F);
      assertEquals((-0.26286554F), quaternion0.z, 0.01F);
      assertEquals((-0.5257311F), quaternion0.x, 0.01F);
      assertEquals((-0.36180344F), quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-0.36180344F), quaternion1.w, 0.01F);
      assertEquals((-0.5257311F), quaternion1.x, 0.01F);
      assertEquals((-0.26286554F), quaternion1.z, 0.01F);
      assertEquals(0.7236068F, quaternion1.y, 0.01F);
      assertEquals((-0.5257311F), quaternion3.x, 0.01F);
      assertEquals((-0.26286554F), quaternion3.z, 0.01F);
      assertEquals(0.7236068F, quaternion3.y, 0.01F);
      assertEquals((-0.36180344F), quaternion3.w, 0.01F);
      assertEquals((-0.36180344F), quaternion0.w(), 0.01F);
      assertEquals((-0.5257311F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7236068F, quaternion0.y(), 0.01F);
      assertEquals((-0.26286554F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.36180344F), quaternion1.w(), 0.01F);
      assertEquals(0.7236068F, quaternion1.y(), 0.01F);
      assertEquals((-0.26286554F), quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.5257311F), quaternion1.x(), 0.01F);
      assertEquals((-0.5257311F), quaternion3.x(), 0.01F);
      assertEquals((-0.36180344F), quaternion3.w(), 0.01F);
      assertEquals(0.7236068F, quaternion3.y(), 0.01F);
      assertEquals((-0.26286554F), quaternion3.z(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertNotNull(quaternion3);
      
      Vector3 vector3_4 = vector3_2.add((IVector3) vector3_1, vector3_1);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-0.62808216F), vector3_1.y, 0.01F);
      assertEquals(1.038265F, vector3_1.x, 0.01F);
      assertEquals(1.5898172F, vector3_1.z, 0.01F);
      assertEquals(1.038265F, vector3_4.x, 0.01F);
      assertEquals(1.5898172F, vector3_4.z, 0.01F);
      assertEquals((-0.62808216F), vector3_4.y, 0.01F);
      assertEquals(1.038265F, vector3_2.x, 0.01F);
      assertEquals((-0.62808216F), vector3_2.y, 0.01F);
      assertEquals(1.5898172F, vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.5898172F, vector3_1.z(), 0.01F);
      assertEquals((-0.62808216F), vector3_1.y(), 0.01F);
      assertEquals(4.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.038265F, vector3_1.x(), 0.01F);
      assertEquals(1.5898172F, vector3_4.z(), 0.01F);
      assertEquals(1.038265F, vector3_4.x(), 0.01F);
      assertEquals(4.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals((-0.62808216F), vector3_4.y(), 0.01F);
      assertEquals(1.038265F, vector3_2.x(), 0.01F);
      assertEquals((-0.62808216F), vector3_2.y(), 0.01F);
      assertEquals(4.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.5898172F, vector3_2.z(), 0.01F);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {(-0.34672305F), (-2765.89F), (-0.34672305F), 0.57735026F, (-0.34672305F)}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_4);
      
      Quaternion quaternion4 = quaternion1.fromAngleAxis(0.0F, (IVector3) vector3_2);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-0.62808216F), vector3_1.y, 0.01F);
      assertEquals(1.038265F, vector3_1.x, 0.01F);
      assertEquals(1.5898172F, vector3_1.z, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(-0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(1.0F, quaternion4.w, 0.01F);
      assertEquals(1.038265F, vector3_2.x, 0.01F);
      assertEquals((-0.62808216F), vector3_2.y, 0.01F);
      assertEquals(1.5898172F, vector3_2.z, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.5898172F, vector3_1.z(), 0.01F);
      assertEquals((-0.62808216F), vector3_1.y(), 0.01F);
      assertEquals(4.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.038265F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, quaternion4.w(), 0.01F);
      assertEquals(-0.0F, quaternion4.y(), 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(1.038265F, vector3_2.x(), 0.01F);
      assertEquals((-0.62808216F), vector3_2.y(), 0.01F);
      assertEquals(4.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.5898172F, vector3_2.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {(-0.34672305F), (-2765.89F), (-0.34672305F), 0.57735026F, (-0.34672305F)}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion2.fromVectorFromNegativeZ(1.0F, (-2765.89F), 0.0F);
      assertEquals((-2.556525E-4F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals((-0.7071067F), quaternion0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-0.7071067F), quaternion1.x, 0.01F);
      assertEquals(0.70710677F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-2.556525E-4F), quaternion1.y, 0.01F);
      assertEquals((-2.556525E-4F), quaternion2.y, 0.01F);
      assertEquals((-0.7071067F), quaternion2.x, 0.01F);
      assertEquals(0.70710677F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals((-0.7071067F), quaternion5.x, 0.01F);
      assertEquals((-2.556525E-4F), quaternion5.y, 0.01F);
      assertEquals(0.70710677F, quaternion5.w, 0.01F);
      assertEquals((-0.7071067F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.70710677F, quaternion0.w(), 0.01F);
      assertEquals((-2.556525E-4F), quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-2.556525E-4F), quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.70710677F, quaternion1.w(), 0.01F);
      assertEquals((-0.7071067F), quaternion1.x(), 0.01F);
      assertEquals((-2.556525E-4F), quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals((-0.7071067F), quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.70710677F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertEquals((-0.7071067F), quaternion5.x(), 0.01F);
      assertEquals(0.70710677F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-2.556525E-4F), quaternion5.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion3);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion5.slerpLocal(quaternion3, 2847.6196F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.7071533F, quaternion0.w, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion0.y, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion1.y, 0.01F);
      assertEquals((-0.70703125F), quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.7071533F, quaternion1.w, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion2.y, 0.01F);
      assertEquals((-0.70703125F), quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.7071533F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion3.y, 0.01F);
      assertEquals((-0.70703125F), quaternion3.x, 0.01F);
      assertEquals(0.7071533F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(0.7071533F, quaternion5.w, 0.01F);
      assertEquals((-0.70703125F), quaternion5.x, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(0.7071533F, quaternion6.w, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion6.y, 0.01F);
      assertEquals((-0.70703125F), quaternion6.x, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion0.y(), 0.01F);
      assertEquals(0.7071533F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.7071533F, quaternion1.w(), 0.01F);
      assertEquals((-0.70703125F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.7071533F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion2.y(), 0.01F);
      assertEquals((-0.70703125F), quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals((-0.70703125F), quaternion3.x(), 0.01F);
      assertEquals(0.7071533F, quaternion3.w(), 0.01F);
      assertEquals((-2.5564432E-4F), quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertEquals((-2.5564432E-4F), quaternion5.y(), 0.01F);
      assertEquals((-0.70703125F), quaternion5.x(), 0.01F);
      assertEquals(0.7071533F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals((-0.70703125F), quaternion6.x(), 0.01F);
      assertEquals((-2.5564432E-4F), quaternion6.y(), 0.01F);
      assertEquals(0.7071533F, quaternion6.w(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion5);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertNotNull(quaternion6);
      
      float float3 = quaternion4.w();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.7071533F, quaternion0.w, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion0.y, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion1.y, 0.01F);
      assertEquals((-0.70703125F), quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.7071533F, quaternion1.w, 0.01F);
      assertEquals((-0.62808216F), vector3_1.y, 0.01F);
      assertEquals(1.038265F, vector3_1.x, 0.01F);
      assertEquals(1.5898172F, vector3_1.z, 0.01F);
      assertEquals(0.7071533F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion4.y, 0.01F);
      assertEquals((-0.70703125F), quaternion4.x, 0.01F);
      assertEquals(1.038265F, vector3_2.x, 0.01F);
      assertEquals((-0.62808216F), vector3_2.y, 0.01F);
      assertEquals(1.5898172F, vector3_2.z, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion0.y(), 0.01F);
      assertEquals(0.7071533F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.7071533F, quaternion1.w(), 0.01F);
      assertEquals((-0.70703125F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion1.y(), 0.01F);
      assertEquals(1.5898172F, vector3_1.z(), 0.01F);
      assertEquals((-0.62808216F), vector3_1.y(), 0.01F);
      assertEquals(4.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.038265F, vector3_1.x(), 0.01F);
      assertEquals(0.7071533F, quaternion4.w(), 0.01F);
      assertEquals((-0.70703125F), quaternion4.x(), 0.01F);
      assertEquals((-2.5564432E-4F), quaternion4.y(), 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(1.038265F, vector3_2.x(), 0.01F);
      assertEquals((-0.62808216F), vector3_2.y(), 0.01F);
      assertEquals(4.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.5898172F, vector3_2.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {(-0.34672305F), (-2765.89F), (-0.34672305F), 0.57735026F, (-0.34672305F)}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertEquals(0.7071533F, float3, 0.01F);
      
      String string1 = quaternion1.toString();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.7071533F, quaternion0.w, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion0.y, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion1.y, 0.01F);
      assertEquals((-0.70703125F), quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.7071533F, quaternion1.w, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion0.y(), 0.01F);
      assertEquals(0.7071533F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.7071533F, quaternion1.w(), 0.01F);
      assertEquals((-0.70703125F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion1.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[-0.70703125, -2.5564432E-4, 0.0, 0.7071533]", string1);
      
      Vector3 vector3_5 = quaternion2.transformLocal(vector3_3);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.7071533F, quaternion0.w, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion0.y, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion1.y, 0.01F);
      assertEquals((-0.70703125F), quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.7071533F, quaternion1.w, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion2.y, 0.01F);
      assertEquals((-0.70703125F), quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.7071533F, quaternion2.w, 0.01F);
      assertEquals(1.037463F, vector3_1.x, 0.01F);
      assertEquals(0.62877107F, vector3_1.z, 0.01F);
      assertEquals(1.5899931F, vector3_1.y, 0.01F);
      assertEquals(0.62877107F, vector3_5.z, 0.01F);
      assertEquals(1.5899931F, vector3_5.y, 0.01F);
      assertEquals(1.037463F, vector3_5.x, 0.01F);
      assertEquals(0.62877107F, vector3_3.z, 0.01F);
      assertEquals(1.037463F, vector3_3.x, 0.01F);
      assertEquals(1.5899931F, vector3_3.y, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion0.y(), 0.01F);
      assertEquals(0.7071533F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.7071533F, quaternion1.w(), 0.01F);
      assertEquals((-0.70703125F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.7071533F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion2.y(), 0.01F);
      assertEquals((-0.70703125F), quaternion2.x(), 0.01F);
      assertEquals(3.9997604F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.5899931F, vector3_1.y(), 0.01F);
      assertEquals(1.037463F, vector3_1.x(), 0.01F);
      assertEquals(0.62877107F, vector3_1.z(), 0.01F);
      assertEquals(0.62877107F, vector3_5.z(), 0.01F);
      assertEquals(1.5899931F, vector3_5.y(), 0.01F);
      assertEquals(3.9997604F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(1.037463F, vector3_5.x(), 0.01F);
      assertEquals(0.62877107F, vector3_3.z(), 0.01F);
      assertEquals(3.9997604F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.5899931F, vector3_3.y(), 0.01F);
      assertEquals(1.037463F, vector3_3.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_4);
      assertSame(vector3_5, vector3_2);
      assertSame(vector3_5, vector3_1);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertNotNull(vector3_5);
      
      Quaternion quaternion7 = new Quaternion(floatArray0);
      assertEquals((-0.34672305F), quaternion7.x, 0.01F);
      assertEquals((-0.34672305F), quaternion7.z, 0.01F);
      assertEquals((-2765.89F), quaternion7.y, 0.01F);
      assertEquals(0.57735026F, quaternion7.w, 0.01F);
      assertEquals((-0.34672305F), quaternion7.x(), 0.01F);
      assertEquals((-0.34672305F), quaternion7.z(), 0.01F);
      assertEquals(0.57735026F, quaternion7.w(), 0.01F);
      assertEquals((-2765.89F), quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertArrayEquals(new float[] {(-0.34672305F), (-2765.89F), (-0.34672305F), 0.57735026F, (-0.34672305F)}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion7);
      
      boolean boolean1 = quaternion1.equals(quaternion7);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.7071533F, quaternion0.w, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion0.y, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-2.5564432E-4F), quaternion1.y, 0.01F);
      assertEquals((-0.70703125F), quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.7071533F, quaternion1.w, 0.01F);
      assertEquals((-0.34672305F), quaternion7.x, 0.01F);
      assertEquals((-0.34672305F), quaternion7.z, 0.01F);
      assertEquals((-2765.89F), quaternion7.y, 0.01F);
      assertEquals(0.57735026F, quaternion7.w, 0.01F);
      assertEquals((-0.70703125F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion0.y(), 0.01F);
      assertEquals(0.7071533F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.7071533F, quaternion1.w(), 0.01F);
      assertEquals((-0.70703125F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-2.5564432E-4F), quaternion1.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion7.x(), 0.01F);
      assertEquals((-0.34672305F), quaternion7.z(), 0.01F);
      assertEquals(0.57735026F, quaternion7.w(), 0.01F);
      assertEquals((-2765.89F), quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertArrayEquals(new float[] {(-0.34672305F), (-2765.89F), (-0.34672305F), 0.57735026F, (-0.34672305F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1);
      
      Quaternion quaternion8 = quaternion7.slerp((IQuaternion) quaternion4, 0.0F, quaternion2);
      assertEquals((-0.34672305F), quaternion0.z, 0.01F);
      assertEquals((-0.34672305F), quaternion0.x, 0.01F);
      assertEquals((-2765.89F), quaternion0.y, 0.01F);
      assertEquals(0.57735026F, quaternion0.w, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals((-0.34672305F), quaternion1.x, 0.01F);
      assertEquals((-0.34672305F), quaternion1.z, 0.01F);
      assertEquals((-2765.89F), quaternion1.y, 0.01F);
      assertEquals(0.57735026F, quaternion1.w, 0.01F);
      assertEquals((-0.34672305F), quaternion2.x, 0.01F);
      assertEquals((-2765.89F), quaternion2.y, 0.01F);
      assertEquals(0.57735026F, quaternion2.w, 0.01F);
      assertEquals((-0.34672305F), quaternion2.z, 0.01F);
      assertEquals(1.037463F, vector3_1.x, 0.01F);
      assertEquals(0.62877107F, vector3_1.z, 0.01F);
      assertEquals(1.5899931F, vector3_1.y, 0.01F);
      assertEquals((-0.34672305F), quaternion4.x, 0.01F);
      assertEquals((-0.34672305F), quaternion4.z, 0.01F);
      assertEquals((-2765.89F), quaternion4.y, 0.01F);
      assertEquals(0.57735026F, quaternion4.w, 0.01F);
      assertEquals(1.5899931F, vector3_2.y, 0.01F);
      assertEquals(0.62877107F, vector3_2.z, 0.01F);
      assertEquals(1.037463F, vector3_2.x, 0.01F);
      assertEquals((-0.34672305F), quaternion7.x, 0.01F);
      assertEquals((-0.34672305F), quaternion7.z, 0.01F);
      assertEquals((-2765.89F), quaternion7.y, 0.01F);
      assertEquals(0.57735026F, quaternion7.w, 0.01F);
      assertEquals((-2765.89F), quaternion8.y, 0.01F);
      assertEquals((-0.34672305F), quaternion8.z, 0.01F);
      assertEquals(0.57735026F, quaternion8.w, 0.01F);
      assertEquals((-0.34672305F), quaternion8.x, 0.01F);
      assertEquals(0.57735026F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.34672305F), quaternion0.x(), 0.01F);
      assertEquals((-2765.89F), quaternion0.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, quaternion1.w(), 0.01F);
      assertEquals((-2765.89F), quaternion1.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.34672305F), quaternion1.x(), 0.01F);
      assertEquals(0.57735026F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-2765.89F), quaternion2.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion2.x(), 0.01F);
      assertEquals(3.9997604F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.5899931F, vector3_1.y(), 0.01F);
      assertEquals(1.037463F, vector3_1.x(), 0.01F);
      assertEquals(0.62877107F, vector3_1.z(), 0.01F);
      assertEquals((-2765.89F), quaternion4.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion4.z(), 0.01F);
      assertEquals(0.57735026F, quaternion4.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.34672305F), quaternion4.x(), 0.01F);
      assertEquals(1.037463F, vector3_2.x(), 0.01F);
      assertEquals(3.9997604F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.62877107F, vector3_2.z(), 0.01F);
      assertEquals(1.5899931F, vector3_2.y(), 0.01F);
      assertEquals((-0.34672305F), quaternion7.x(), 0.01F);
      assertEquals((-0.34672305F), quaternion7.z(), 0.01F);
      assertEquals(0.57735026F, quaternion7.w(), 0.01F);
      assertEquals((-2765.89F), quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-2765.89F), quaternion8.y(), 0.01F);
      assertEquals(0.57735026F, quaternion8.w(), 0.01F);
      assertEquals((-0.34672305F), quaternion8.z(), 0.01F);
      assertEquals((-0.34672305F), quaternion8.x(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion8);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion0);
      assertSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion8);
      assertSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertSame(quaternion8, quaternion6);
      assertSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion3);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion4);
      assertArrayEquals(new float[] {(-0.34672305F), (-2765.89F), (-0.34672305F), 0.57735026F, (-0.34672305F)}, floatArray0, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion7));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion2.equals((Object)quaternion7));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(quaternion4.equals((Object)quaternion7));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion4));
      assertTrue(quaternion7.equals((Object)quaternion0));
      assertTrue(quaternion7.equals((Object)quaternion3));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion8.equals((Object)quaternion7));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion8);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.transform((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.randomize((java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAngles((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F));
      assertEquals((-0.91173875F), quaternion0.w, 0.01F);
      assertEquals((-0.18042961F), quaternion0.x, 0.01F);
      assertEquals((-0.3219048F), quaternion0.y, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z, 0.01F);
      assertEquals((-0.18042961F), quaternion1.z, 0.01F);
      assertEquals((-0.3219048F), quaternion1.y, 0.01F);
      assertEquals((-0.91173875F), quaternion1.w, 0.01F);
      assertEquals((-0.18042961F), quaternion1.x, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.91173875F), quaternion0.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion0.x(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.x(), 0.01F);
      assertEquals((-0.91173875F), quaternion1.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = quaternion1.toAngles();
      assertEquals((-0.91173875F), quaternion0.w, 0.01F);
      assertEquals((-0.18042961F), quaternion0.x, 0.01F);
      assertEquals((-0.3219048F), quaternion0.y, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z, 0.01F);
      assertEquals((-0.18042961F), quaternion1.z, 0.01F);
      assertEquals((-0.3219048F), quaternion1.y, 0.01F);
      assertEquals((-0.91173875F), quaternion1.w, 0.01F);
      assertEquals((-0.18042961F), quaternion1.x, 0.01F);
      assertEquals(0.5490493F, vector3_0.y, 0.01F);
      assertEquals(0.5490493F, vector3_0.x, 0.01F);
      assertEquals(0.5490493F, vector3_0.z, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.91173875F), quaternion0.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion0.x(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.x(), 0.01F);
      assertEquals((-0.91173875F), quaternion1.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.9043654F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.5490493F, vector3_0.z(), 0.01F);
      assertEquals(0.5490493F, vector3_0.x(), 0.01F);
      assertEquals(0.5490493F, vector3_0.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(vector3_0);
      
      Quaternion quaternion2 = quaternion1.invert();
      assertEquals((-0.91173875F), quaternion0.w, 0.01F);
      assertEquals((-0.18042961F), quaternion0.x, 0.01F);
      assertEquals((-0.3219048F), quaternion0.y, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z, 0.01F);
      assertEquals((-0.18042961F), quaternion1.z, 0.01F);
      assertEquals((-0.3219048F), quaternion1.y, 0.01F);
      assertEquals((-0.91173875F), quaternion1.w, 0.01F);
      assertEquals((-0.18042961F), quaternion1.x, 0.01F);
      assertEquals(0.3219048F, quaternion2.y, 0.01F);
      assertEquals((-0.91173875F), quaternion2.w, 0.01F);
      assertEquals(0.18042961F, quaternion2.z, 0.01F);
      assertEquals(0.18042961F, quaternion2.x, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.91173875F), quaternion0.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion0.x(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.x(), 0.01F);
      assertEquals((-0.91173875F), quaternion1.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.18042961F, quaternion2.x(), 0.01F);
      assertEquals(0.18042961F, quaternion2.z(), 0.01F);
      assertEquals((-0.91173875F), quaternion2.w(), 0.01F);
      assertEquals(0.3219048F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion1.integrate((IVector3) vector3_0, 0.5490493F);
      assertEquals((-0.91173875F), quaternion0.w, 0.01F);
      assertEquals((-0.18042961F), quaternion0.x, 0.01F);
      assertEquals((-0.3219048F), quaternion0.y, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z, 0.01F);
      assertEquals((-0.18042961F), quaternion1.z, 0.01F);
      assertEquals((-0.3219048F), quaternion1.y, 0.01F);
      assertEquals((-0.91173875F), quaternion1.w, 0.01F);
      assertEquals((-0.18042961F), quaternion1.x, 0.01F);
      assertEquals(0.5490493F, vector3_0.y, 0.01F);
      assertEquals(0.5490493F, vector3_0.x, 0.01F);
      assertEquals(0.5490493F, vector3_0.z, 0.01F);
      assertEquals((-0.32817858F), quaternion3.z, 0.01F);
      assertEquals((-0.44443312F), quaternion3.y, 0.01F);
      assertEquals((-0.7825975F), quaternion3.w, 0.01F);
      assertEquals((-0.28691328F), quaternion3.x, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.91173875F), quaternion0.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion0.x(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.x(), 0.01F);
      assertEquals((-0.91173875F), quaternion1.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.9043654F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.5490493F, vector3_0.z(), 0.01F);
      assertEquals(0.5490493F, vector3_0.x(), 0.01F);
      assertEquals(0.5490493F, vector3_0.y(), 0.01F);
      assertEquals((-0.28691328F), quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-0.44443312F), quaternion3.y(), 0.01F);
      assertEquals((-0.7825975F), quaternion3.w(), 0.01F);
      assertEquals((-0.32817858F), quaternion3.z(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertNotNull(quaternion3);
      
      Vector3 vector3_1 = vector3_0.abs();
      assertEquals((-0.91173875F), quaternion0.w, 0.01F);
      assertEquals((-0.18042961F), quaternion0.x, 0.01F);
      assertEquals((-0.3219048F), quaternion0.y, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z, 0.01F);
      assertEquals((-0.18042961F), quaternion1.z, 0.01F);
      assertEquals((-0.3219048F), quaternion1.y, 0.01F);
      assertEquals((-0.91173875F), quaternion1.w, 0.01F);
      assertEquals((-0.18042961F), quaternion1.x, 0.01F);
      assertEquals(0.5490493F, vector3_0.y, 0.01F);
      assertEquals(0.5490493F, vector3_0.x, 0.01F);
      assertEquals(0.5490493F, vector3_0.z, 0.01F);
      assertEquals(0.5490493F, vector3_1.y, 0.01F);
      assertEquals(0.5490493F, vector3_1.x, 0.01F);
      assertEquals(0.5490493F, vector3_1.z, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.91173875F), quaternion0.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion0.x(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.x(), 0.01F);
      assertEquals((-0.91173875F), quaternion1.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.9043654F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.5490493F, vector3_0.z(), 0.01F);
      assertEquals(0.5490493F, vector3_0.x(), 0.01F);
      assertEquals(0.5490493F, vector3_0.y(), 0.01F);
      assertEquals(0.5490493F, vector3_1.y(), 0.01F);
      assertEquals(0.5490493F, vector3_1.x(), 0.01F);
      assertEquals(0.9043654F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.5490493F, vector3_1.z(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      java.util.Random random0 = null;
      Quaternion quaternion4 = quaternion2.normalize();
      assertEquals((-0.91173875F), quaternion0.w, 0.01F);
      assertEquals((-0.18042961F), quaternion0.x, 0.01F);
      assertEquals((-0.3219048F), quaternion0.y, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z, 0.01F);
      assertEquals((-0.18042961F), quaternion1.z, 0.01F);
      assertEquals((-0.3219048F), quaternion1.y, 0.01F);
      assertEquals((-0.91173875F), quaternion1.w, 0.01F);
      assertEquals((-0.18042961F), quaternion1.x, 0.01F);
      assertEquals(0.3219048F, quaternion2.y, 0.01F);
      assertEquals((-0.91173875F), quaternion2.w, 0.01F);
      assertEquals(0.18042961F, quaternion2.z, 0.01F);
      assertEquals(0.18042961F, quaternion2.x, 0.01F);
      assertEquals(0.18042962F, quaternion4.z, 0.01F);
      assertEquals(0.32190484F, quaternion4.y, 0.01F);
      assertEquals((-0.9117389F), quaternion4.w, 0.01F);
      assertEquals(0.18042962F, quaternion4.x, 0.01F);
      assertEquals((-0.18042961F), quaternion0.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.91173875F), quaternion0.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion0.x(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.x(), 0.01F);
      assertEquals((-0.91173875F), quaternion1.w(), 0.01F);
      assertEquals((-0.18042961F), quaternion1.z(), 0.01F);
      assertEquals((-0.3219048F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.18042961F, quaternion2.x(), 0.01F);
      assertEquals(0.18042961F, quaternion2.z(), 0.01F);
      assertEquals((-0.91173875F), quaternion2.w(), 0.01F);
      assertEquals(0.3219048F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.9117389F), quaternion4.w(), 0.01F);
      assertEquals(0.18042962F, quaternion4.x(), 0.01F);
      assertEquals(0.18042962F, quaternion4.z(), 0.01F);
      assertEquals(0.32190484F, quaternion4.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertNotNull(quaternion4);
      
      // Undeclared exception!
      try { 
        quaternion2.randomize((java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1459.385F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1945.0F);
      floatArray0[3] = 2100.0F;
      floatArray0[4] = (-1510.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-568.98834F);
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals((-1459.385F), quaternion0.x, 0.01F);
      assertEquals(2100.0F, quaternion0.w, 0.01F);
      assertEquals((-1945.0F), quaternion0.z, 0.01F);
      assertEquals((-1.0F), quaternion0.y, 0.01F);
      assertEquals((-1459.385F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0F), quaternion0.y(), 0.01F);
      assertEquals((-1945.0F), quaternion0.z(), 0.01F);
      assertEquals(2100.0F, quaternion0.w(), 0.01F);
      assertArrayEquals(new float[] {(-1459.385F), (-1.0F), (-1945.0F), 2100.0F, (-1510.0F), 0.0F, 0.0F, (-568.98834F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.normalizeLocal();
      assertEquals((-0.6053691F), quaternion0.z, 0.01F);
      assertEquals(0.6536119F, quaternion0.w, 0.01F);
      assertEquals((-0.45422447F), quaternion0.x, 0.01F);
      assertEquals((-3.1124376E-4F), quaternion0.y, 0.01F);
      assertEquals((-0.45422447F), quaternion1.x, 0.01F);
      assertEquals((-3.1124376E-4F), quaternion1.y, 0.01F);
      assertEquals((-0.6053691F), quaternion1.z, 0.01F);
      assertEquals(0.6536119F, quaternion1.w, 0.01F);
      assertEquals((-0.6053691F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.6536119F, quaternion0.w(), 0.01F);
      assertEquals((-3.1124376E-4F), quaternion0.y(), 0.01F);
      assertEquals((-0.45422447F), quaternion0.x(), 0.01F);
      assertEquals((-0.45422447F), quaternion1.x(), 0.01F);
      assertEquals(0.6536119F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.6053691F), quaternion1.z(), 0.01F);
      assertEquals((-3.1124376E-4F), quaternion1.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertArrayEquals(new float[] {(-1459.385F), (-1.0F), (-1945.0F), 2100.0F, (-1510.0F), 0.0F, 0.0F, (-568.98834F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion0.transformLocal(vector3_1);
      assertEquals((-0.6053691F), quaternion0.z, 0.01F);
      assertEquals(0.6536119F, quaternion0.w, 0.01F);
      assertEquals((-0.45422447F), quaternion0.x, 0.01F);
      assertEquals((-3.1124376E-4F), quaternion0.y, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals((-0.6053691F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.6536119F, quaternion0.w(), 0.01F);
      assertEquals((-3.1124376E-4F), quaternion0.y(), 0.01F);
      assertEquals((-0.45422447F), quaternion0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertArrayEquals(new float[] {(-1459.385F), (-1.0F), (-1945.0F), 2100.0F, (-1510.0F), 0.0F, 0.0F, (-568.98834F)}, floatArray0, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertEquals(8, floatArray0.length);
      assertNotNull(vector3_2);
      
      MockRandom mockRandom0 = new MockRandom(744L);
      assertNotNull(mockRandom0);
      
      Quaternion quaternion2 = quaternion1.randomize(mockRandom0);
      assertEquals((-0.5257311F), quaternion0.x, 0.01F);
      assertEquals((-0.26286554F), quaternion0.z, 0.01F);
      assertEquals((-0.36180344F), quaternion0.w, 0.01F);
      assertEquals(0.7236068F, quaternion0.y, 0.01F);
      assertEquals((-0.36180344F), quaternion1.w, 0.01F);
      assertEquals((-0.5257311F), quaternion1.x, 0.01F);
      assertEquals(0.7236068F, quaternion1.y, 0.01F);
      assertEquals((-0.26286554F), quaternion1.z, 0.01F);
      assertEquals((-0.36180344F), quaternion2.w, 0.01F);
      assertEquals(0.7236068F, quaternion2.y, 0.01F);
      assertEquals((-0.26286554F), quaternion2.z, 0.01F);
      assertEquals((-0.5257311F), quaternion2.x, 0.01F);
      assertEquals((-0.26286554F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7236068F, quaternion0.y(), 0.01F);
      assertEquals((-0.36180344F), quaternion0.w(), 0.01F);
      assertEquals((-0.5257311F), quaternion0.x(), 0.01F);
      assertEquals((-0.36180344F), quaternion1.w(), 0.01F);
      assertEquals(0.7236068F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.5257311F), quaternion1.x(), 0.01F);
      assertEquals((-0.26286554F), quaternion1.z(), 0.01F);
      assertEquals((-0.36180344F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.26286554F), quaternion2.z(), 0.01F);
      assertEquals((-0.5257311F), quaternion2.x(), 0.01F);
      assertEquals(0.7236068F, quaternion2.y(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertArrayEquals(new float[] {(-1459.385F), (-1.0F), (-1945.0F), 2100.0F, (-1510.0F), 0.0F, 0.0F, (-568.98834F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2.0F;
      floatArray0[1] = 516.413F;
      floatArray0[2] = (-3743.8098F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1453.0066F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals(2.0F, quaternion0.x, 0.01F);
      assertEquals((-3743.8098F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(516.413F, quaternion0.y, 0.01F);
      assertEquals((-3743.8098F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(516.413F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2.0F, quaternion0.x(), 0.01F);
      assertArrayEquals(new float[] {2.0F, 516.413F, (-3743.8098F), 0.0F, (-1453.0066F), 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3((-1198.7999F), 0.0F, 0.0F);
      assertEquals((-1198.7999F), vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals((-1198.7999F), vector3_0.x(), 0.01F);
      assertEquals(1437121.2F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = vector3_0.set(3.4028235E38F, 2.0F, (-116.47731F));
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(2.0F, vector3_0.y, 0.01F);
      assertEquals((-116.47731F), vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x, 0.01F);
      assertEquals(2.0F, vector3_1.y, 0.01F);
      assertEquals((-116.47731F), vector3_1.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-116.47731F), vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(2.0F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x(), 0.01F);
      assertEquals(2.0F, vector3_1.y(), 0.01F);
      assertEquals((-116.47731F), vector3_1.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = new Vector3();
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = quaternion0.transformScaleAndAdd(vector3_0, 2.0F, vector3_0, vector3_2);
      assertEquals(2.0F, quaternion0.x, 0.01F);
      assertEquals((-3743.8098F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(516.413F, quaternion0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(2.0F, vector3_0.y, 0.01F);
      assertEquals((-116.47731F), vector3_0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_2.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_2.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_3.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_3.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_3.x, 0.01F);
      assertEquals((-3743.8098F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(516.413F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2.0F, quaternion0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-116.47731F), vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(2.0F, vector3_0.y(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_2.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.y(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_2.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_3.lengthSquared(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_3.z(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3_3.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_3.y(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertArrayEquals(new float[] {2.0F, 516.413F, (-3743.8098F), 0.0F, (-1453.0066F), 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(9, floatArray0.length);
      assertNotNull(vector3_3);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAngleAxis((-685.249F), 676.24805F, 676.24805F, 676.24805F);
      assertEquals(128.32137F, quaternion0.z, 0.01F);
      assertEquals((-0.9818315F), quaternion0.w, 0.01F);
      assertEquals(128.32137F, quaternion0.y, 0.01F);
      assertEquals(128.32137F, quaternion0.x, 0.01F);
      assertEquals((-0.9818315F), quaternion1.w, 0.01F);
      assertEquals(128.32137F, quaternion1.z, 0.01F);
      assertEquals(128.32137F, quaternion1.y, 0.01F);
      assertEquals(128.32137F, quaternion1.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(128.32137F, quaternion0.x(), 0.01F);
      assertEquals((-0.9818315F), quaternion0.w(), 0.01F);
      assertEquals(128.32137F, quaternion0.z(), 0.01F);
      assertEquals(128.32137F, quaternion0.y(), 0.01F);
      assertEquals(128.32137F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(128.32137F, quaternion1.z(), 0.01F);
      assertEquals(128.32137F, quaternion1.y(), 0.01F);
      assertEquals((-0.9818315F), quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion2 = quaternion1.fromAngleAxis(0.0F, (IVector3) vector3_0);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.normalizeLocal();
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertNotNull(quaternion3);
      
      Vector3 vector3_1 = quaternion3.toAngles();
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(1.5707964F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.5707964F, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Quaternion quaternion4 = quaternion2.fromAnglesXZ(1.5707964F, 1.5707964F);
      assertEquals(0.49999997F, quaternion0.z, 0.01F);
      assertEquals(0.49999997F, quaternion0.y, 0.01F);
      assertEquals(0.49999997F, quaternion0.x, 0.01F);
      assertEquals(0.49999997F, quaternion0.w, 0.01F);
      assertEquals(0.49999997F, quaternion1.w, 0.01F);
      assertEquals(0.49999997F, quaternion1.z, 0.01F);
      assertEquals(0.49999997F, quaternion1.y, 0.01F);
      assertEquals(0.49999997F, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(0.49999997F, quaternion2.w, 0.01F);
      assertEquals(0.49999997F, quaternion2.y, 0.01F);
      assertEquals(0.49999997F, quaternion2.x, 0.01F);
      assertEquals(0.49999997F, quaternion2.z, 0.01F);
      assertEquals(0.49999997F, quaternion4.w, 0.01F);
      assertEquals(0.49999997F, quaternion4.y, 0.01F);
      assertEquals(0.49999997F, quaternion4.x, 0.01F);
      assertEquals(0.49999997F, quaternion4.z, 0.01F);
      assertEquals(0.49999997F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.49999997F, quaternion0.y(), 0.01F);
      assertEquals(0.49999997F, quaternion0.x(), 0.01F);
      assertEquals(0.49999997F, quaternion0.w(), 0.01F);
      assertEquals(0.49999997F, quaternion1.x(), 0.01F);
      assertEquals(0.49999997F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.49999997F, quaternion1.y(), 0.01F);
      assertEquals(0.49999997F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(0.49999997F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.49999997F, quaternion2.x(), 0.01F);
      assertEquals(0.49999997F, quaternion2.z(), 0.01F);
      assertEquals(0.49999997F, quaternion2.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.49999997F, quaternion4.w(), 0.01F);
      assertEquals(0.49999997F, quaternion4.x(), 0.01F);
      assertEquals(0.49999997F, quaternion4.z(), 0.01F);
      assertEquals(0.49999997F, quaternion4.y(), 0.01F);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion1);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertNotNull(quaternion4);
      
      Vector3 vector3_2 = vector3_1.mult((IVector3) vector3_0);
      assertEquals(0.49999997F, quaternion0.z, 0.01F);
      assertEquals(0.49999997F, quaternion0.y, 0.01F);
      assertEquals(0.49999997F, quaternion0.x, 0.01F);
      assertEquals(0.49999997F, quaternion0.w, 0.01F);
      assertEquals(0.49999997F, quaternion1.w, 0.01F);
      assertEquals(0.49999997F, quaternion1.z, 0.01F);
      assertEquals(0.49999997F, quaternion1.y, 0.01F);
      assertEquals(0.49999997F, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(0.49999997F, quaternion2.w, 0.01F);
      assertEquals(0.49999997F, quaternion2.y, 0.01F);
      assertEquals(0.49999997F, quaternion2.x, 0.01F);
      assertEquals(0.49999997F, quaternion2.z, 0.01F);
      assertEquals(0.49999997F, quaternion3.w, 0.01F);
      assertEquals(0.49999997F, quaternion3.z, 0.01F);
      assertEquals(0.49999997F, quaternion3.y, 0.01F);
      assertEquals(0.49999997F, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(1.5707964F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(0.49999997F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.49999997F, quaternion0.y(), 0.01F);
      assertEquals(0.49999997F, quaternion0.x(), 0.01F);
      assertEquals(0.49999997F, quaternion0.w(), 0.01F);
      assertEquals(0.49999997F, quaternion1.x(), 0.01F);
      assertEquals(0.49999997F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.49999997F, quaternion1.y(), 0.01F);
      assertEquals(0.49999997F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(0.49999997F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.49999997F, quaternion2.x(), 0.01F);
      assertEquals(0.49999997F, quaternion2.z(), 0.01F);
      assertEquals(0.49999997F, quaternion2.y(), 0.01F);
      assertEquals(0.49999997F, quaternion3.x(), 0.01F);
      assertEquals(0.49999997F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.49999997F, quaternion3.z(), 0.01F);
      assertEquals(0.49999997F, quaternion3.w(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.5707964F, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertNotNull(vector3_2);
      
      Quaternion quaternion5 = quaternion2.fromAngles((-1380.8763F), 0.024788186F, 0.7505884F);
      assertEquals(0.70715106F, quaternion0.w, 0.01F);
      assertEquals(0.6045403F, quaternion0.x, 0.01F);
      assertEquals(0.2698884F, quaternion0.z, 0.01F);
      assertEquals(0.2482514F, quaternion0.y, 0.01F);
      assertEquals(0.2482514F, quaternion1.y, 0.01F);
      assertEquals(0.6045403F, quaternion1.x, 0.01F);
      assertEquals(0.70715106F, quaternion1.w, 0.01F);
      assertEquals(0.2698884F, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(0.2482514F, quaternion2.y, 0.01F);
      assertEquals(0.2698884F, quaternion2.z, 0.01F);
      assertEquals(0.70715106F, quaternion2.w, 0.01F);
      assertEquals(0.6045403F, quaternion2.x, 0.01F);
      assertEquals(0.2482514F, quaternion5.y, 0.01F);
      assertEquals(0.2698884F, quaternion5.z, 0.01F);
      assertEquals(0.70715106F, quaternion5.w, 0.01F);
      assertEquals(0.6045403F, quaternion5.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.2482514F, quaternion0.y(), 0.01F);
      assertEquals(0.2698884F, quaternion0.z(), 0.01F);
      assertEquals(0.70715106F, quaternion0.w(), 0.01F);
      assertEquals(0.6045403F, quaternion0.x(), 0.01F);
      assertEquals(0.2482514F, quaternion1.y(), 0.01F);
      assertEquals(0.6045403F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.2698884F, quaternion1.z(), 0.01F);
      assertEquals(0.70715106F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.6045403F, quaternion2.x(), 0.01F);
      assertEquals(0.70715106F, quaternion2.w(), 0.01F);
      assertEquals(0.2482514F, quaternion2.y(), 0.01F);
      assertEquals(0.2698884F, quaternion2.z(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.6045403F, quaternion5.x(), 0.01F);
      assertEquals(0.70715106F, quaternion5.w(), 0.01F);
      assertEquals(0.2482514F, quaternion5.y(), 0.01F);
      assertEquals(0.2698884F, quaternion5.z(), 0.01F);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion3);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertNotNull(quaternion5);
      
      Vector3 vector3_3 = quaternion5.toAngles();
      assertEquals(0.70715106F, quaternion0.w, 0.01F);
      assertEquals(0.6045403F, quaternion0.x, 0.01F);
      assertEquals(0.2698884F, quaternion0.z, 0.01F);
      assertEquals(0.2482514F, quaternion0.y, 0.01F);
      assertEquals(0.2482514F, quaternion1.y, 0.01F);
      assertEquals(0.6045403F, quaternion1.x, 0.01F);
      assertEquals(0.70715106F, quaternion1.w, 0.01F);
      assertEquals(0.2698884F, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(0.2482514F, quaternion2.y, 0.01F);
      assertEquals(0.2698884F, quaternion2.z, 0.01F);
      assertEquals(0.70715106F, quaternion2.w, 0.01F);
      assertEquals(0.6045403F, quaternion2.x, 0.01F);
      assertEquals(0.2482514F, quaternion5.y, 0.01F);
      assertEquals(0.2698884F, quaternion5.z, 0.01F);
      assertEquals(0.70715106F, quaternion5.w, 0.01F);
      assertEquals(0.6045403F, quaternion5.x, 0.01F);
      assertEquals(0.7505884F, vector3_3.z, 0.01F);
      assertEquals(0.024788177F, vector3_3.y, 0.01F);
      assertEquals(1.4244249F, vector3_3.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.2482514F, quaternion0.y(), 0.01F);
      assertEquals(0.2698884F, quaternion0.z(), 0.01F);
      assertEquals(0.70715106F, quaternion0.w(), 0.01F);
      assertEquals(0.6045403F, quaternion0.x(), 0.01F);
      assertEquals(0.2482514F, quaternion1.y(), 0.01F);
      assertEquals(0.6045403F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.2698884F, quaternion1.z(), 0.01F);
      assertEquals(0.70715106F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.6045403F, quaternion2.x(), 0.01F);
      assertEquals(0.70715106F, quaternion2.w(), 0.01F);
      assertEquals(0.2482514F, quaternion2.y(), 0.01F);
      assertEquals(0.2698884F, quaternion2.z(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.6045403F, quaternion5.x(), 0.01F);
      assertEquals(0.70715106F, quaternion5.w(), 0.01F);
      assertEquals(0.2482514F, quaternion5.y(), 0.01F);
      assertEquals(0.2698884F, quaternion5.z(), 0.01F);
      assertEquals(2.5929837F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.4244249F, vector3_3.x(), 0.01F);
      assertEquals(0.024788177F, vector3_3.y(), 0.01F);
      assertEquals(0.7505884F, vector3_3.z(), 0.01F);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion3);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertNotNull(vector3_3);
      
      float float0 = quaternion1.y();
      assertEquals(0.70715106F, quaternion0.w, 0.01F);
      assertEquals(0.6045403F, quaternion0.x, 0.01F);
      assertEquals(0.2698884F, quaternion0.z, 0.01F);
      assertEquals(0.2482514F, quaternion0.y, 0.01F);
      assertEquals(0.2482514F, quaternion1.y, 0.01F);
      assertEquals(0.6045403F, quaternion1.x, 0.01F);
      assertEquals(0.70715106F, quaternion1.w, 0.01F);
      assertEquals(0.2698884F, quaternion1.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.2482514F, quaternion0.y(), 0.01F);
      assertEquals(0.2698884F, quaternion0.z(), 0.01F);
      assertEquals(0.70715106F, quaternion0.w(), 0.01F);
      assertEquals(0.6045403F, quaternion0.x(), 0.01F);
      assertEquals(0.2482514F, quaternion1.y(), 0.01F);
      assertEquals(0.6045403F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.2698884F, quaternion1.z(), 0.01F);
      assertEquals(0.70715106F, quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertEquals(0.2482514F, float0, 0.01F);
      
      vector3_3.z = 0.7505884F;
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.2482514F, quaternion0.y(), 0.01F);
      assertEquals(0.2698884F, quaternion0.z(), 0.01F);
      assertEquals(0.70715106F, quaternion0.w(), 0.01F);
      assertEquals(0.6045403F, quaternion0.x(), 0.01F);
      assertEquals(0.2482514F, quaternion1.y(), 0.01F);
      assertEquals(0.6045403F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.2698884F, quaternion1.z(), 0.01F);
      assertEquals(0.70715106F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.6045403F, quaternion2.x(), 0.01F);
      assertEquals(0.70715106F, quaternion2.w(), 0.01F);
      assertEquals(0.2482514F, quaternion2.y(), 0.01F);
      assertEquals(0.2698884F, quaternion2.z(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.6045403F, quaternion5.x(), 0.01F);
      assertEquals(0.70715106F, quaternion5.w(), 0.01F);
      assertEquals(0.2482514F, quaternion5.y(), 0.01F);
      assertEquals(0.2698884F, quaternion5.z(), 0.01F);
      assertEquals(2.5929837F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.4244249F, vector3_3.x(), 0.01F);
      assertEquals(0.024788177F, vector3_3.y(), 0.01F);
      assertEquals(0.7505884F, vector3_3.z(), 0.01F);
      
      float float1 = quaternion5.z();
      assertEquals(0.70715106F, quaternion0.w, 0.01F);
      assertEquals(0.6045403F, quaternion0.x, 0.01F);
      assertEquals(0.2698884F, quaternion0.z, 0.01F);
      assertEquals(0.2482514F, quaternion0.y, 0.01F);
      assertEquals(0.2482514F, quaternion1.y, 0.01F);
      assertEquals(0.6045403F, quaternion1.x, 0.01F);
      assertEquals(0.70715106F, quaternion1.w, 0.01F);
      assertEquals(0.2698884F, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(0.2482514F, quaternion2.y, 0.01F);
      assertEquals(0.2698884F, quaternion2.z, 0.01F);
      assertEquals(0.70715106F, quaternion2.w, 0.01F);
      assertEquals(0.6045403F, quaternion2.x, 0.01F);
      assertEquals(0.2482514F, quaternion5.y, 0.01F);
      assertEquals(0.2698884F, quaternion5.z, 0.01F);
      assertEquals(0.70715106F, quaternion5.w, 0.01F);
      assertEquals(0.6045403F, quaternion5.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.2482514F, quaternion0.y(), 0.01F);
      assertEquals(0.2698884F, quaternion0.z(), 0.01F);
      assertEquals(0.70715106F, quaternion0.w(), 0.01F);
      assertEquals(0.6045403F, quaternion0.x(), 0.01F);
      assertEquals(0.2482514F, quaternion1.y(), 0.01F);
      assertEquals(0.6045403F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.2698884F, quaternion1.z(), 0.01F);
      assertEquals(0.70715106F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.6045403F, quaternion2.x(), 0.01F);
      assertEquals(0.70715106F, quaternion2.w(), 0.01F);
      assertEquals(0.2482514F, quaternion2.y(), 0.01F);
      assertEquals(0.2698884F, quaternion2.z(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.6045403F, quaternion5.x(), 0.01F);
      assertEquals(0.70715106F, quaternion5.w(), 0.01F);
      assertEquals(0.2482514F, quaternion5.y(), 0.01F);
      assertEquals(0.2698884F, quaternion5.z(), 0.01F);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion3);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.2698884F, float1, 0.01F);
      
      Vector3 vector3_4 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_0);
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertNotNull(vector3_4);
      
      Vector3 vector3_5 = quaternion2.transform((IVector3) vector3_4);
      assertEquals(0.70715106F, quaternion0.w, 0.01F);
      assertEquals(0.6045403F, quaternion0.x, 0.01F);
      assertEquals(0.2698884F, quaternion0.z, 0.01F);
      assertEquals(0.2482514F, quaternion0.y, 0.01F);
      assertEquals(0.2482514F, quaternion1.y, 0.01F);
      assertEquals(0.6045403F, quaternion1.x, 0.01F);
      assertEquals(0.70715106F, quaternion1.w, 0.01F);
      assertEquals(0.2698884F, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(0.2482514F, quaternion2.y, 0.01F);
      assertEquals(0.2698884F, quaternion2.z, 0.01F);
      assertEquals(0.70715106F, quaternion2.w, 0.01F);
      assertEquals(0.6045403F, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(Float.NaN, vector3_5.y, 0.01F);
      assertEquals(Float.NaN, vector3_5.x, 0.01F);
      assertEquals(Float.NaN, vector3_5.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.2482514F, quaternion0.y(), 0.01F);
      assertEquals(0.2698884F, quaternion0.z(), 0.01F);
      assertEquals(0.70715106F, quaternion0.w(), 0.01F);
      assertEquals(0.6045403F, quaternion0.x(), 0.01F);
      assertEquals(0.2482514F, quaternion1.y(), 0.01F);
      assertEquals(0.6045403F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.2698884F, quaternion1.z(), 0.01F);
      assertEquals(0.70715106F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.6045403F, quaternion2.x(), 0.01F);
      assertEquals(0.70715106F, quaternion2.w(), 0.01F);
      assertEquals(0.2482514F, quaternion2.y(), 0.01F);
      assertEquals(0.2698884F, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_5.x(), 0.01F);
      assertEquals(Float.NaN, vector3_5.z(), 0.01F);
      assertEquals(Float.NaN, vector3_5.y(), 0.01F);
      assertEquals(Float.NaN, vector3_5.lengthSquared(), 0.01F);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_1);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertNotNull(vector3_5);
      
      Vector3 vector3_6 = quaternion1.transformUnitX(vector3_1);
      assertEquals(0.70715106F, quaternion0.w, 0.01F);
      assertEquals(0.6045403F, quaternion0.x, 0.01F);
      assertEquals(0.2698884F, quaternion0.z, 0.01F);
      assertEquals(0.2482514F, quaternion0.y, 0.01F);
      assertEquals(0.2482514F, quaternion1.y, 0.01F);
      assertEquals(0.6045403F, quaternion1.x, 0.01F);
      assertEquals(0.70715106F, quaternion1.w, 0.01F);
      assertEquals(0.2698884F, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(0.2482514F, quaternion2.y, 0.01F);
      assertEquals(0.2698884F, quaternion2.z, 0.01F);
      assertEquals(0.70715106F, quaternion2.w, 0.01F);
      assertEquals(0.6045403F, quaternion2.x, 0.01F);
      assertEquals(0.2482514F, quaternion3.y, 0.01F);
      assertEquals(0.70715106F, quaternion3.w, 0.01F);
      assertEquals(0.6045403F, quaternion3.x, 0.01F);
      assertEquals(0.2698884F, quaternion3.z, 0.01F);
      assertEquals((-0.024785638F), vector3_1.z, 0.01F);
      assertEquals(0.731063F, vector3_1.x, 0.01F);
      assertEquals(0.6818597F, vector3_1.y, 0.01F);
      assertEquals(0.6818597F, vector3_6.y, 0.01F);
      assertEquals(0.731063F, vector3_6.x, 0.01F);
      assertEquals((-0.024785638F), vector3_6.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.2482514F, quaternion0.y(), 0.01F);
      assertEquals(0.2698884F, quaternion0.z(), 0.01F);
      assertEquals(0.70715106F, quaternion0.w(), 0.01F);
      assertEquals(0.6045403F, quaternion0.x(), 0.01F);
      assertEquals(0.2482514F, quaternion1.y(), 0.01F);
      assertEquals(0.6045403F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.2698884F, quaternion1.z(), 0.01F);
      assertEquals(0.70715106F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.6045403F, quaternion2.x(), 0.01F);
      assertEquals(0.70715106F, quaternion2.w(), 0.01F);
      assertEquals(0.2482514F, quaternion2.y(), 0.01F);
      assertEquals(0.2698884F, quaternion2.z(), 0.01F);
      assertEquals(0.2482514F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.2698884F, quaternion3.z(), 0.01F);
      assertEquals(0.70715106F, quaternion3.w(), 0.01F);
      assertEquals(0.6045403F, quaternion3.x(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.6818597F, vector3_1.y(), 0.01F);
      assertEquals(0.731063F, vector3_1.x(), 0.01F);
      assertEquals((-0.024785638F), vector3_1.z(), 0.01F);
      assertEquals(0.6818597F, vector3_6.y(), 0.01F);
      assertEquals(0.731063F, vector3_6.x(), 0.01F);
      assertEquals(1.0F, vector3_6.lengthSquared(), 0.01F);
      assertEquals((-0.024785638F), vector3_6.z(), 0.01F);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_0);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertNotNull(vector3_6);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.7505884F;
      // Undeclared exception!
      try { 
        quaternion5.set(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0F, 2137.633F, 2682.301F, 2137.633F);
      assertEquals(2137.633F, quaternion0.w, 0.01F);
      assertEquals(2682.301F, quaternion0.z, 0.01F);
      assertEquals(2137.633F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2137.633F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2682.301F, quaternion0.z(), 0.01F);
      assertEquals(2137.633F, quaternion0.y(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAnglesXY(2682.301F, 2137.633F);
      assertEquals((-0.19036894F), quaternion0.z, 0.01F);
      assertEquals((-0.74358493F), quaternion0.w, 0.01F);
      assertEquals(0.23782213F, quaternion0.x, 0.01F);
      assertEquals((-0.59521574F), quaternion0.y, 0.01F);
      assertEquals((-0.19036894F), quaternion1.z, 0.01F);
      assertEquals((-0.74358493F), quaternion1.w, 0.01F);
      assertEquals(0.23782213F, quaternion1.x, 0.01F);
      assertEquals((-0.59521574F), quaternion1.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.19036894F), quaternion0.z(), 0.01F);
      assertEquals(0.23782213F, quaternion0.x(), 0.01F);
      assertEquals((-0.59521574F), quaternion0.y(), 0.01F);
      assertEquals((-0.74358493F), quaternion0.w(), 0.01F);
      assertEquals((-0.19036894F), quaternion1.z(), 0.01F);
      assertEquals((-0.59521574F), quaternion1.y(), 0.01F);
      assertEquals(0.23782213F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.74358493F), quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.transformLocal((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAngleAxis(4115.9087F, 4115.9087F, 0.0F, 1953.97F);
      assertEquals((-0.9777889F), quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-409.53632F), quaternion0.z, 0.01F);
      assertEquals((-862.66125F), quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals((-862.66125F), quaternion1.x, 0.01F);
      assertEquals((-409.53632F), quaternion1.z, 0.01F);
      assertEquals((-0.9777889F), quaternion1.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.9777889F), quaternion0.w(), 0.01F);
      assertEquals((-409.53632F), quaternion0.z(), 0.01F);
      assertEquals((-862.66125F), quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals((-0.9777889F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-409.53632F), quaternion1.z(), 0.01F);
      assertEquals((-862.66125F), quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = new Vector3(2268.0F, (-403.0F), (-1.0F));
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals(2268.0F, vector3_0.x, 0.01F);
      assertEquals((-403.0F), vector3_0.y, 0.01F);
      assertEquals(5306234.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-403.0F), vector3_0.y(), 0.01F);
      assertEquals(2268.0F, vector3_0.x(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = vector3_0.mult(0.0F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals(2268.0F, vector3_0.x, 0.01F);
      assertEquals((-403.0F), vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(-0.0F, vector3_1.y, 0.01F);
      assertEquals(-0.0F, vector3_1.z, 0.01F);
      assertEquals(5306234.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-403.0F), vector3_0.y(), 0.01F);
      assertEquals(2268.0F, vector3_0.x(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(-0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(-0.0F, vector3_1.z(), 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion1.transformUnitX(vector3_0);
      assertEquals((-0.9777889F), quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-409.53632F), quaternion0.z, 0.01F);
      assertEquals((-862.66125F), quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals((-862.66125F), quaternion1.x, 0.01F);
      assertEquals((-409.53632F), quaternion1.z, 0.01F);
      assertEquals((-0.9777889F), quaternion1.w, 0.01F);
      assertEquals(800.8801F, vector3_0.y, 0.01F);
      assertEquals(706582.25F, vector3_0.z, 0.01F);
      assertEquals((-335439.0F), vector3_0.x, 0.01F);
      assertEquals(800.8801F, vector3_2.y, 0.01F);
      assertEquals(706582.25F, vector3_2.z, 0.01F);
      assertEquals((-335439.0F), vector3_2.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.9777889F), quaternion0.w(), 0.01F);
      assertEquals((-409.53632F), quaternion0.z(), 0.01F);
      assertEquals((-862.66125F), quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals((-0.9777889F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-409.53632F), quaternion1.z(), 0.01F);
      assertEquals((-862.66125F), quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals((-335439.0F), vector3_0.x(), 0.01F);
      assertEquals(800.8801F, vector3_0.y(), 0.01F);
      assertEquals(6.1177843E11F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(706582.25F, vector3_0.z(), 0.01F);
      assertEquals((-335439.0F), vector3_2.x(), 0.01F);
      assertEquals(6.1177843E11F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(800.8801F, vector3_2.y(), 0.01F);
      assertEquals(706582.25F, vector3_2.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = null;
      // Undeclared exception!
      try { 
        quaternion0.transformLocal((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = new Quaternion(1.0F, 5750.4497F, 1.0F, Float.NaN);
      assertEquals(1.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(5750.4497F, quaternion1.y, 0.01F);
      assertEquals(1.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.x(), 0.01F);
      assertEquals(5750.4497F, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      boolean boolean0 = quaternion1.hasNaN();
      assertEquals(1.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(5750.4497F, quaternion1.y, 0.01F);
      assertEquals(1.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.x(), 0.01F);
      assertEquals(5750.4497F, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      boolean boolean0 = quaternion0.hasNaN();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(1.0F, 0.0F, 0.0F, (-4505.3F));
      assertEquals((-4505.3F), quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.x, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-4505.3F), quaternion1.w(), 0.01F);
      assertEquals(1.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.slerpLocal(quaternion0, 1.0F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals((-1.0F), quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-1.0F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.0F), quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.0F), quaternion2.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformLocal(vector3_0);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.0F, 0.0F, (-1175.97F), (-178.16026F));
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.slerp((IQuaternion) quaternion1, (-178.16026F));
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Vector3 vector3_0 = new Vector3((-1175.97F), 0.0F, 179.16026F);
      assertEquals(179.16026F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-1175.97F), vector3_0.x, 0.01F);
      assertEquals(179.16026F, vector3_0.z(), 0.01F);
      assertEquals((-1175.97F), vector3_0.x(), 0.01F);
      assertEquals(1415003.8F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion2.transformLocal(vector3_0);
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x, 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z, 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y, 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z, 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertEquals(1.1143945E28F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(8.8766603E10F, vector3_0.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_0.y(), 0.01F);
      assertEquals(1.04386865E14F, vector3_0.x(), 0.01F);
      assertEquals(1.04386865E14F, vector3_1.x(), 0.01F);
      assertEquals(1.1143945E28F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(8.8766603E10F, vector3_1.z(), 0.01F);
      assertEquals((-1.57264097E13F), vector3_1.y(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(vector3_1);
      
      boolean boolean0 = quaternion2.hasNaN();
      assertEquals((-178.16026F), quaternion0.w, 0.01F);
      assertEquals((-1175.97F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1175.97F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals((-178.16026F), quaternion0.w(), 0.01F);
      assertEquals(1.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(boolean0);
      
      Quaternion quaternion3 = quaternion2.normalize(quaternion0);
      assertEquals((-0.98884076F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(8.408724E-4F, quaternion0.x, 0.01F);
      assertEquals((-0.14897388F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-210687.1F), quaternion2.z, 0.01F);
      assertEquals((-31741.08F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(179.16026F, quaternion2.x, 0.01F);
      assertEquals((-0.14897388F), quaternion3.w, 0.01F);
      assertEquals(8.408724E-4F, quaternion3.x, 0.01F);
      assertEquals((-0.98884076F), quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.14897388F), quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(8.408724E-4F, quaternion0.x(), 0.01F);
      assertEquals((-0.98884076F), quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(179.16026F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-31741.08F), quaternion2.w(), 0.01F);
      assertEquals((-210687.1F), quaternion2.z(), 0.01F);
      assertEquals((-0.98884076F), quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(8.408724E-4F, quaternion3.x(), 0.01F);
      assertEquals((-0.14897388F), quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion3.mult((IQuaternion) quaternion1, quaternion2);
      assertEquals((-0.98884076F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(8.408724E-4F, quaternion0.x, 0.01F);
      assertEquals((-0.14897388F), quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(8.408724E-4F, quaternion2.x, 0.01F);
      assertEquals((-0.14897388F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals((-0.98884076F), quaternion2.z, 0.01F);
      assertEquals((-0.14897388F), quaternion3.w, 0.01F);
      assertEquals(8.408724E-4F, quaternion3.x, 0.01F);
      assertEquals((-0.98884076F), quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion4.y, 0.01F);
      assertEquals(8.408724E-4F, quaternion4.x, 0.01F);
      assertEquals((-0.14897388F), quaternion4.w, 0.01F);
      assertEquals((-0.98884076F), quaternion4.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.14897388F), quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(8.408724E-4F, quaternion0.x(), 0.01F);
      assertEquals((-0.98884076F), quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals((-0.98884076F), quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(8.408724E-4F, quaternion2.x(), 0.01F);
      assertEquals((-0.14897388F), quaternion2.w(), 0.01F);
      assertEquals((-0.98884076F), quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(8.408724E-4F, quaternion3.x(), 0.01F);
      assertEquals((-0.14897388F), quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-0.14897388F), quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertEquals((-0.98884076F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(8.408724E-4F, quaternion4.x(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertTrue(quaternion4.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertNotNull(quaternion4);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      // Undeclared exception!
      try { 
        quaternion4.get(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0F, 3215.0F, 2452.494F, 0.0F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(3215.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(2452.494F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2452.494F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(3215.0F, quaternion0.y(), 0.01F);
      assertNotNull(quaternion0);
      
      quaternion0.x = 3215.0F;
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2452.494F, quaternion0.z(), 0.01F);
      assertEquals(3215.0F, quaternion0.y(), 0.01F);
      assertEquals(3215.0F, quaternion0.x(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.fromAnglesXY(0.0F, (-2499.191F));
      assertEquals(0.6877733F, quaternion0.y, 0.01F);
      assertEquals(0.72592556F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.6877733F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.72592556F, quaternion1.w, 0.01F);
      assertEquals(0.6877733F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.72592556F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.72592556F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.6877733F, quaternion1.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      float float0 = quaternion1.w();
      assertEquals(0.6877733F, quaternion0.y, 0.01F);
      assertEquals(0.72592556F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.6877733F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.72592556F, quaternion1.w, 0.01F);
      assertEquals(0.6877733F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.72592556F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.72592556F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.6877733F, quaternion1.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.72592556F, float0, 0.01F);
      
      Quaternion quaternion2 = quaternion0.mult((IQuaternion) quaternion1, quaternion1);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.053935856F, quaternion0.w, 0.01F);
      assertEquals(0.9985444F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.9985444F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.053935856F, quaternion1.w, 0.01F);
      assertEquals(0.9985444F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.053935856F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.9985444F, quaternion0.y(), 0.01F);
      assertEquals(0.053935856F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.9985444F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.053935856F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.053935856F, quaternion2.w(), 0.01F);
      assertEquals(0.9985444F, quaternion2.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotNull(quaternion2);
      
      float float1 = (-742.62445F);
      Quaternion quaternion3 = quaternion1.fromAngleAxis((-2499.191F), 0.0F, 1480.8F, 0.0F);
      assertEquals(0.72592556F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1018.4547F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1018.4547F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.72592556F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(1018.4547F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.72592556F, quaternion3.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1018.4547F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.72592556F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.72592556F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1018.4547F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(1018.4547F, quaternion3.y(), 0.01F);
      assertEquals(0.72592556F, quaternion3.w(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertNotNull(quaternion3);
      
      // Undeclared exception!
      try { 
        quaternion2.transformUnitX((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.set((IQuaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.invertLocal();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion2.x, 0.01F);
      assertEquals(-0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(-0.0F, quaternion2.z(), 0.01F);
      assertEquals(-0.0F, quaternion2.y(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion0.set(-0.0F, -0.0F, 0.0F, -0.0F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(-0.0F, quaternion3.w, 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(-0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(-0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion0.slerp((IQuaternion) quaternion3, 0.0F, quaternion1);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(-0.0F, quaternion3.w, 0.01F);
      assertEquals(-0.0F, quaternion4.w, 0.01F);
      assertEquals(-0.0F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(-0.0F, quaternion4.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(-0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(-0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(-0.0F, quaternion4.y(), 0.01F);
      assertEquals(-0.0F, quaternion4.x(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(-0.0F, quaternion4.w(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion2);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion3));
      assertNotNull(quaternion4);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Quaternion quaternion1 = quaternion0.randomize(mockRandom0);
      assertEquals((-0.26286554F), quaternion0.z, 0.01F);
      assertEquals(0.7236068F, quaternion0.y, 0.01F);
      assertEquals((-0.5257311F), quaternion0.x, 0.01F);
      assertEquals((-0.36180344F), quaternion0.w, 0.01F);
      assertEquals((-0.36180344F), quaternion1.w, 0.01F);
      assertEquals((-0.5257311F), quaternion1.x, 0.01F);
      assertEquals(0.7236068F, quaternion1.y, 0.01F);
      assertEquals((-0.26286554F), quaternion1.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7236068F, quaternion0.y(), 0.01F);
      assertEquals((-0.26286554F), quaternion0.z(), 0.01F);
      assertEquals((-0.36180344F), quaternion0.w(), 0.01F);
      assertEquals((-0.5257311F), quaternion0.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.26286554F), quaternion1.z(), 0.01F);
      assertEquals(0.7236068F, quaternion1.y(), 0.01F);
      assertEquals((-0.5257311F), quaternion1.x(), 0.01F);
      assertEquals((-0.36180344F), quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.0E-5F, 1.0E-5F, 1.0E-5F, (-3.4028235E38F));
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.invert();
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion2.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.0E-5F), quaternion2.y(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.x(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion0);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(1.0E-5F, quaternion2.z, 0.01F);
      assertEquals(1.0E-5F, quaternion2.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion2.w, 0.01F);
      assertEquals(1.0E-5F, quaternion2.x, 0.01F);
      assertEquals(1.0E-5F, quaternion3.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion3.w, 0.01F);
      assertEquals(1.0E-5F, quaternion3.z, 0.01F);
      assertEquals(1.0E-5F, quaternion3.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion2.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0E-5F, quaternion2.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion2.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0E-5F, quaternion3.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion3.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion3.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion3.w(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.slerp((IQuaternion) quaternion0, 1.0E-5F, quaternion0);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals(1.0E-5F, quaternion4.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion4.w, 0.01F);
      assertEquals(1.0E-5F, quaternion4.x, 0.01F);
      assertEquals(1.0E-5F, quaternion4.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(1.0E-5F, quaternion4.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion4.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion4.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion4.z(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion1));
      assertTrue(quaternion4.equals((Object)quaternion3));
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion3.invertLocal();
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion2.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion2.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion3.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion3.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion3.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion3.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion5.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion5.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion5.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion5.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0E-5F, quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.0E-5F), quaternion2.y(), 0.01F);
      assertEquals((-1.0E-5F), quaternion2.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-1.0E-5F), quaternion3.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion3.y(), 0.01F);
      assertEquals((-1.0E-5F), quaternion3.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion3.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-1.0E-5F), quaternion5.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion5.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion5.z(), 0.01F);
      assertEquals((-1.0E-5F), quaternion5.x(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion2);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion1.invert(quaternion0);
      assertEquals((-1.0E-5F), quaternion0.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.x, 0.01F);
      assertEquals(1.0E-5F, quaternion1.z, 0.01F);
      assertEquals(1.0E-5F, quaternion1.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion6.z, 0.01F);
      assertEquals((-1.0E-5F), quaternion6.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion6.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion6.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0E-5F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0E-5F, quaternion1.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion1.x(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-1.0E-5F), quaternion6.y(), 0.01F);
      assertEquals((-1.0E-5F), quaternion6.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion6.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion6.w(), 0.01F);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion3);
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertTrue(quaternion6.equals((Object)quaternion3));
      assertTrue(quaternion6.equals((Object)quaternion2));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion1.fromAngleAxis(221.0F, (-1.0E-5F), 2358.106F, (-1.0E-5F));
      assertEquals((-1.0E-5F), quaternion0.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.z, 0.01F);
      assertEquals((-0.8555122F), quaternion1.w, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z, 0.01F);
      assertEquals((-1220.9865F), quaternion1.y, 0.01F);
      assertEquals((-1220.9865F), quaternion7.y, 0.01F);
      assertEquals(5.1778266E-6F, quaternion7.x, 0.01F);
      assertEquals((-0.8555122F), quaternion7.w, 0.01F);
      assertEquals(5.1778266E-6F, quaternion7.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0E-5F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y(), 0.01F);
      assertEquals((-1220.9865F), quaternion1.y(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.8555122F), quaternion1.w(), 0.01F);
      assertEquals((-1220.9865F), quaternion7.y(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion7.x(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(5.1778266E-6F, quaternion7.z(), 0.01F);
      assertEquals((-0.8555122F), quaternion7.w(), 0.01F);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion2.normalizeLocal();
      assertEquals((-1.0E-5F), quaternion0.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.z, 0.01F);
      assertEquals((-0.8555122F), quaternion1.w, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z, 0.01F);
      assertEquals((-1220.9865F), quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion2.w, 0.01F);
      assertEquals(-0.0F, quaternion2.z, 0.01F);
      assertEquals(-0.0F, quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion2.x, 0.01F);
      assertEquals(-0.0F, quaternion8.y, 0.01F);
      assertEquals(-0.0F, quaternion8.z, 0.01F);
      assertEquals(-0.0F, quaternion8.x, 0.01F);
      assertEquals(-0.0F, quaternion8.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0E-5F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y(), 0.01F);
      assertEquals((-1220.9865F), quaternion1.y(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.8555122F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0F, quaternion2.y(), 0.01F);
      assertEquals(-0.0F, quaternion2.x(), 0.01F);
      assertEquals(-0.0F, quaternion2.z(), 0.01F);
      assertEquals(-0.0F, quaternion8.z(), 0.01F);
      assertEquals(-0.0F, quaternion8.x(), 0.01F);
      assertEquals(-0.0F, quaternion8.y(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(-0.0F, quaternion8.w(), 0.01F);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertNotNull(quaternion8);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion7.transformUnitX(vector3_1);
      assertEquals((-1.0E-5F), quaternion0.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.z, 0.01F);
      assertEquals((-0.8555122F), quaternion1.w, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z, 0.01F);
      assertEquals((-1220.9865F), quaternion1.y, 0.01F);
      assertEquals((-1220.9865F), quaternion7.y, 0.01F);
      assertEquals(5.1778266E-6F, quaternion7.x, 0.01F);
      assertEquals((-0.8555122F), quaternion7.w, 0.01F);
      assertEquals(5.1778266E-6F, quaternion7.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals((-2981614.8F), vector3_1.x, 0.01F);
      assertEquals((-0.012652972F), vector3_1.y, 0.01F);
      assertEquals((-2089.1377F), vector3_1.z, 0.01F);
      assertEquals((-0.012652972F), vector3_2.y, 0.01F);
      assertEquals((-2981614.8F), vector3_2.x, 0.01F);
      assertEquals((-2089.1377F), vector3_2.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0E-5F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y(), 0.01F);
      assertEquals((-1220.9865F), quaternion1.y(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.8555122F), quaternion1.w(), 0.01F);
      assertEquals((-1220.9865F), quaternion7.y(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion7.x(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(5.1778266E-6F, quaternion7.z(), 0.01F);
      assertEquals((-0.8555122F), quaternion7.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals((-2089.1377F), vector3_1.z(), 0.01F);
      assertEquals((-2981614.8F), vector3_1.x(), 0.01F);
      assertEquals((-0.012652972F), vector3_1.y(), 0.01F);
      assertEquals(8.8900308E12F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-2981614.8F), vector3_2.x(), 0.01F);
      assertEquals((-2089.1377F), vector3_2.z(), 0.01F);
      assertEquals(8.8900308E12F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-0.012652972F), vector3_2.y(), 0.01F);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertNotNull(vector3_2);
      
      Quaternion quaternion9 = quaternion2.integrate((IVector3) vector3_2, (-460.46F), quaternion5);
      assertEquals((-1.0E-5F), quaternion0.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.z, 0.01F);
      assertEquals((-0.8555122F), quaternion1.w, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z, 0.01F);
      assertEquals((-1220.9865F), quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals((-1220.9865F), quaternion7.y, 0.01F);
      assertEquals(5.1778266E-6F, quaternion7.x, 0.01F);
      assertEquals((-0.8555122F), quaternion7.w, 0.01F);
      assertEquals(5.1778266E-6F, quaternion7.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals((-2981614.8F), vector3_1.x, 0.01F);
      assertEquals((-0.012652972F), vector3_1.y, 0.01F);
      assertEquals((-2089.1377F), vector3_1.z, 0.01F);
      assertEquals((-0.012652972F), vector3_2.y, 0.01F);
      assertEquals((-2981614.8F), vector3_2.x, 0.01F);
      assertEquals((-2089.1377F), vector3_2.z, 0.01F);
      assertEquals(Float.NaN, quaternion9.x, 0.01F);
      assertEquals(Float.NaN, quaternion9.y, 0.01F);
      assertEquals(Float.NaN, quaternion9.z, 0.01F);
      assertEquals(Float.NaN, quaternion9.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0E-5F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y(), 0.01F);
      assertEquals((-1220.9865F), quaternion1.y(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.8555122F), quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion5.w(), 0.01F);
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertEquals((-1220.9865F), quaternion7.y(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion7.x(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(5.1778266E-6F, quaternion7.z(), 0.01F);
      assertEquals((-0.8555122F), quaternion7.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals((-2089.1377F), vector3_1.z(), 0.01F);
      assertEquals((-2981614.8F), vector3_1.x(), 0.01F);
      assertEquals((-0.012652972F), vector3_1.y(), 0.01F);
      assertEquals(8.8900308E12F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-2981614.8F), vector3_2.x(), 0.01F);
      assertEquals((-2089.1377F), vector3_2.z(), 0.01F);
      assertEquals(8.8900308E12F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-0.012652972F), vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion9.w(), 0.01F);
      assertTrue(quaternion9.hasNaN());
      assertEquals(Float.NaN, quaternion9.z(), 0.01F);
      assertEquals(Float.NaN, quaternion9.x(), 0.01F);
      assertEquals(Float.NaN, quaternion9.y(), 0.01F);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(quaternion9, quaternion4);
      assertSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion6);
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertNotNull(quaternion9);
      
      quaternion5.hashCode();
      assertEquals((-1.0E-5F), quaternion0.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.z, 0.01F);
      assertEquals((-0.8555122F), quaternion1.w, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z, 0.01F);
      assertEquals((-1220.9865F), quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0E-5F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y(), 0.01F);
      assertEquals((-1220.9865F), quaternion1.y(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.8555122F), quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion5.w(), 0.01F);
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion4));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Quaternion quaternion10 = quaternion3.randomize(mockRandom0);
      assertEquals((-1.0E-5F), quaternion0.x, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-1.0E-5F), quaternion0.z, 0.01F);
      assertEquals((-0.8555122F), quaternion1.w, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x, 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z, 0.01F);
      assertEquals((-1220.9865F), quaternion1.y, 0.01F);
      assertEquals((-0.26286554F), quaternion2.z, 0.01F);
      assertEquals(0.7236068F, quaternion2.y, 0.01F);
      assertEquals((-0.36180344F), quaternion2.w, 0.01F);
      assertEquals((-0.5257311F), quaternion2.x, 0.01F);
      assertEquals((-0.36180344F), quaternion3.w, 0.01F);
      assertEquals(0.7236068F, quaternion3.y, 0.01F);
      assertEquals((-0.5257311F), quaternion3.x, 0.01F);
      assertEquals((-0.26286554F), quaternion3.z, 0.01F);
      assertEquals(0.7236068F, quaternion10.y, 0.01F);
      assertEquals((-0.26286554F), quaternion10.z, 0.01F);
      assertEquals((-0.36180344F), quaternion10.w, 0.01F);
      assertEquals((-0.5257311F), quaternion10.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0E-5F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.x(), 0.01F);
      assertEquals((-1.0E-5F), quaternion0.y(), 0.01F);
      assertEquals((-1220.9865F), quaternion1.y(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.z(), 0.01F);
      assertEquals(5.1778266E-6F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.8555122F), quaternion1.w(), 0.01F);
      assertEquals(0.7236068F, quaternion2.y(), 0.01F);
      assertEquals((-0.26286554F), quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.5257311F), quaternion2.x(), 0.01F);
      assertEquals((-0.36180344F), quaternion2.w(), 0.01F);
      assertEquals((-0.36180344F), quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-0.26286554F), quaternion3.z(), 0.01F);
      assertEquals(0.7236068F, quaternion3.y(), 0.01F);
      assertEquals((-0.5257311F), quaternion3.x(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.7236068F, quaternion10.y(), 0.01F);
      assertEquals((-0.5257311F), quaternion10.x(), 0.01F);
      assertEquals((-0.26286554F), quaternion10.z(), 0.01F);
      assertEquals((-0.36180344F), quaternion10.w(), 0.01F);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion6);
      assertSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion4);
      assertSame(quaternion10, quaternion8);
      assertSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertNotNull(quaternion10);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3(0.0F, 0.0F, 1.0F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformScaleAndAdd(vector3_0, 0.0F, vector3_0, vector3_0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3();
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_1.addScaledLocal(vector3_0, 2.0F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(2.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(2.0F, vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(2.0F, vector3_1.z(), 0.01F);
      assertEquals(4.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(2.0F, vector3_2.z(), 0.01F);
      assertEquals(4.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = quaternion0.transformScaleAndAdd(vector3_0, (-1183.043F), vector3_0, vector3_1);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1182.043F), vector3_1.z, 0.01F);
      assertEquals((-1182.043F), vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1182.043F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1397225.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-1182.043F), vector3_3.z(), 0.01F);
      assertEquals(1397225.6F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertNotNull(vector3_3);
      
      Quaternion quaternion1 = new Quaternion();
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Vector3 vector3_4 = quaternion1.toAngles();
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertNotNull(vector3_4);
      
      quaternion1.hashCode();
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      
      float float0 = quaternion1.getRotationZ();
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0F, float0, 0.01F);
      
      Quaternion quaternion2 = quaternion1.mult((IQuaternion) quaternion0);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion2.multLocal(quaternion3);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1.0F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(1.0F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion1));
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion1.fromAnglesXZ(0.0F, (-1335.27F));
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion5.x, 0.01F);
      assertEquals(-0.0F, quaternion5.y, 0.01F);
      assertEquals((-0.9989158F), quaternion5.z, 0.01F);
      assertEquals((-0.046554044F), quaternion5.w, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertEquals(-0.0F, quaternion5.y(), 0.01F);
      assertEquals(-0.0F, quaternion5.x(), 0.01F);
      assertEquals((-0.046554044F), quaternion5.w(), 0.01F);
      assertEquals((-0.9989158F), quaternion5.z(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertNotNull(quaternion5);
      
      boolean boolean0 = quaternion2.equals(vector3_1);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1182.043F), vector3_1.z, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1182.043F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1397225.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertFalse(boolean0);
      
      float float1 = quaternion1.x();
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertEquals(float1, float0, 0.01F);
      assertEquals(-0.0F, float1, 0.01F);
      
      float float2 = quaternion1.y();
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(-0.0F, float2, 0.01F);
      
      float float3 = vector3_3.length();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1182.043F), vector3_1.z, 0.01F);
      assertEquals((-1182.043F), vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1182.043F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1397225.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-1182.043F), vector3_3.z(), 0.01F);
      assertEquals(1397225.6F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(1182.043F, float3, 0.01F);
      
      Quaternion quaternion6 = quaternion1.integrate((IVector3) vector3_2, 0.0F);
      assertEquals((-0.9989158F), quaternion6.z, 0.01F);
      assertEquals((-0.046554044F), quaternion6.w, 0.01F);
      assertEquals(0.0F, quaternion6.y, 0.01F);
      assertEquals(-0.0F, quaternion6.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1182.043F), vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals((-1182.043F), vector3_2.z, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.9989158F), quaternion6.z(), 0.01F);
      assertEquals(0.0F, quaternion6.y(), 0.01F);
      assertEquals(-0.0F, quaternion6.x(), 0.01F);
      assertEquals((-0.046554044F), quaternion6.w(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1182.043F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1397225.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(1397225.6F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals((-1182.043F), vector3_2.z(), 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertTrue(quaternion6.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion1.normalize();
      assertEquals(-0.0F, quaternion7.x, 0.01F);
      assertEquals(-0.0F, quaternion7.y, 0.01F);
      assertEquals((-0.9989158F), quaternion7.z, 0.01F);
      assertEquals((-0.046554044F), quaternion7.w, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion7.y(), 0.01F);
      assertEquals(-0.0F, quaternion7.x(), 0.01F);
      assertEquals((-0.046554044F), quaternion7.w(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-0.9989158F), quaternion7.z(), 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertTrue(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertNotNull(quaternion7);
      
      Vector3 vector3_5 = quaternion1.transformAndAdd(vector3_3, vector3_3, vector3_4);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1182.043F), vector3_1.z, 0.01F);
      assertEquals((-2364.086F), vector3_5.z, 0.01F);
      assertEquals(0.0F, vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals((-1182.043F), vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals((-2364.086F), vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1182.043F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1397225.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(5588902.5F, vector3_5.lengthSquared(), 0.01F);
      assertEquals((-2364.086F), vector3_5.z(), 0.01F);
      assertEquals((-1182.043F), vector3_3.z(), 0.01F);
      assertEquals(1397225.6F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertEquals((-2364.086F), vector3_4.z(), 0.01F);
      assertEquals(5588902.5F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_4);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_0);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertNotNull(vector3_5);
      
      float float4 = quaternion1.getRotationZ();
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertEquals(3.048451F, float4, 0.01F);
      
      Quaternion quaternion8 = quaternion7.fromVectorFromNegativeZ((-2364.086F), 0.0F, 3.048451F);
      assertEquals(Float.NaN, quaternion7.x, 0.01F);
      assertEquals(Float.NaN, quaternion7.z, 0.01F);
      assertEquals(Float.NaN, quaternion7.y, 0.01F);
      assertEquals(Float.NaN, quaternion7.w, 0.01F);
      assertEquals(Float.NaN, quaternion8.w, 0.01F);
      assertEquals(Float.NaN, quaternion8.y, 0.01F);
      assertEquals(Float.NaN, quaternion8.z, 0.01F);
      assertEquals(Float.NaN, quaternion8.x, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion7.y(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Float.NaN, quaternion7.x(), 0.01F);
      assertEquals(Float.NaN, quaternion7.w(), 0.01F);
      assertEquals(Float.NaN, quaternion7.z(), 0.01F);
      assertEquals(Float.NaN, quaternion8.x(), 0.01F);
      assertEquals(Float.NaN, quaternion8.y(), 0.01F);
      assertEquals(Float.NaN, quaternion8.z(), 0.01F);
      assertEquals(Float.NaN, quaternion8.w(), 0.01F);
      assertTrue(quaternion8.hasNaN());
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertNotNull(quaternion8);
      
      String string0 = quaternion8.toString();
      assertEquals(Float.NaN, quaternion7.x, 0.01F);
      assertEquals(Float.NaN, quaternion7.z, 0.01F);
      assertEquals(Float.NaN, quaternion7.y, 0.01F);
      assertEquals(Float.NaN, quaternion7.w, 0.01F);
      assertEquals(Float.NaN, quaternion8.w, 0.01F);
      assertEquals(Float.NaN, quaternion8.y, 0.01F);
      assertEquals(Float.NaN, quaternion8.z, 0.01F);
      assertEquals(Float.NaN, quaternion8.x, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion7.y(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Float.NaN, quaternion7.x(), 0.01F);
      assertEquals(Float.NaN, quaternion7.w(), 0.01F);
      assertEquals(Float.NaN, quaternion7.z(), 0.01F);
      assertEquals(Float.NaN, quaternion8.x(), 0.01F);
      assertEquals(Float.NaN, quaternion8.y(), 0.01F);
      assertEquals(Float.NaN, quaternion8.z(), 0.01F);
      assertEquals(Float.NaN, quaternion8.w(), 0.01F);
      assertTrue(quaternion8.hasNaN());
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertNotNull(string0);
      assertEquals("[NaN, NaN, NaN, NaN]", string0);
      
      Quaternion quaternion9 = quaternion7.integrate((IVector3) vector3_1, 163.0F, quaternion8);
      assertEquals(Float.NaN, quaternion7.x, 0.01F);
      assertEquals(Float.NaN, quaternion7.z, 0.01F);
      assertEquals(Float.NaN, quaternion7.y, 0.01F);
      assertEquals(Float.NaN, quaternion7.w, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1182.043F), vector3_1.z, 0.01F);
      assertEquals(Float.NaN, quaternion8.w, 0.01F);
      assertEquals(Float.NaN, quaternion8.y, 0.01F);
      assertEquals(Float.NaN, quaternion8.z, 0.01F);
      assertEquals(Float.NaN, quaternion8.x, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion9.w, 0.01F);
      assertEquals(Float.NaN, quaternion9.x, 0.01F);
      assertEquals(Float.NaN, quaternion9.z, 0.01F);
      assertEquals(Float.NaN, quaternion9.y, 0.01F);
      assertEquals(Float.NaN, quaternion7.y(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Float.NaN, quaternion7.x(), 0.01F);
      assertEquals(Float.NaN, quaternion7.w(), 0.01F);
      assertEquals(Float.NaN, quaternion7.z(), 0.01F);
      assertEquals((-1182.043F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1397225.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion8.x(), 0.01F);
      assertEquals(Float.NaN, quaternion8.y(), 0.01F);
      assertEquals(Float.NaN, quaternion8.z(), 0.01F);
      assertEquals(Float.NaN, quaternion8.w(), 0.01F);
      assertTrue(quaternion8.hasNaN());
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion9.y(), 0.01F);
      assertEquals(Float.NaN, quaternion9.x(), 0.01F);
      assertEquals(Float.NaN, quaternion9.z(), 0.01F);
      assertTrue(quaternion9.hasNaN());
      assertEquals(Float.NaN, quaternion9.w(), 0.01F);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion9, quaternion0);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion6);
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertNotNull(quaternion9);
      
      Quaternion quaternion10 = quaternion9.fromAnglesXY(0.0F, 0.0F);
      assertEquals(0.0F, quaternion7.x, 0.01F);
      assertEquals(-0.0F, quaternion7.z, 0.01F);
      assertEquals(0.0F, quaternion7.y, 0.01F);
      assertEquals(1.0F, quaternion7.w, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1182.043F), vector3_1.z, 0.01F);
      assertEquals(1.0F, quaternion8.w, 0.01F);
      assertEquals(0.0F, quaternion8.y, 0.01F);
      assertEquals(-0.0F, quaternion8.z, 0.01F);
      assertEquals(0.0F, quaternion8.x, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion9.w, 0.01F);
      assertEquals(0.0F, quaternion9.x, 0.01F);
      assertEquals(-0.0F, quaternion9.z, 0.01F);
      assertEquals(0.0F, quaternion9.y, 0.01F);
      assertEquals(-0.0F, quaternion10.z, 0.01F);
      assertEquals(1.0F, quaternion10.w, 0.01F);
      assertEquals(0.0F, quaternion10.x, 0.01F);
      assertEquals(0.0F, quaternion10.y, 0.01F);
      assertEquals(0.0F, quaternion7.y(), 0.01F);
      assertEquals(0.0F, quaternion7.x(), 0.01F);
      assertEquals(1.0F, quaternion7.w(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(-0.0F, quaternion7.z(), 0.01F);
      assertEquals((-1182.043F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1397225.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion8.x(), 0.01F);
      assertEquals(0.0F, quaternion8.y(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(-0.0F, quaternion8.z(), 0.01F);
      assertEquals(1.0F, quaternion8.w(), 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals(0.0F, quaternion9.y(), 0.01F);
      assertEquals(0.0F, quaternion9.x(), 0.01F);
      assertEquals(-0.0F, quaternion9.z(), 0.01F);
      assertEquals(1.0F, quaternion9.w(), 0.01F);
      assertEquals(0.0F, quaternion10.y(), 0.01F);
      assertEquals(-0.0F, quaternion10.z(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.x(), 0.01F);
      assertEquals(1.0F, quaternion10.w(), 0.01F);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion10);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion6);
      assertSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion9, quaternion0);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion6);
      assertSame(quaternion9, quaternion10);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion6);
      assertSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion3);
      assertSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion4);
      assertSame(quaternion10, quaternion9);
      assertTrue(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion7.equals((Object)quaternion4));
      assertTrue(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertTrue(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertTrue(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertTrue(quaternion8.equals((Object)quaternion2));
      assertTrue(quaternion8.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion9.equals((Object)quaternion3));
      assertTrue(quaternion9.equals((Object)quaternion2));
      assertTrue(quaternion9.equals((Object)quaternion4));
      assertTrue(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertTrue(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertTrue(quaternion10.equals((Object)quaternion0));
      assertTrue(quaternion10.equals((Object)quaternion4));
      assertTrue(quaternion10.equals((Object)quaternion3));
      assertNotNull(quaternion10);
      
      Quaternion quaternion11 = quaternion1.normalize(quaternion8);
      assertEquals(-0.0F, quaternion7.x, 0.01F);
      assertEquals(-0.0F, quaternion7.y, 0.01F);
      assertEquals((-0.9989158F), quaternion7.z, 0.01F);
      assertEquals((-0.046554044F), quaternion7.w, 0.01F);
      assertEquals((-0.046554044F), quaternion8.w, 0.01F);
      assertEquals((-0.9989158F), quaternion8.z, 0.01F);
      assertEquals(-0.0F, quaternion8.y, 0.01F);
      assertEquals(-0.0F, quaternion8.x, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion11.y, 0.01F);
      assertEquals(-0.0F, quaternion11.x, 0.01F);
      assertEquals((-0.046554044F), quaternion11.w, 0.01F);
      assertEquals((-0.9989158F), quaternion11.z, 0.01F);
      assertEquals(-0.0F, quaternion7.y(), 0.01F);
      assertEquals(-0.0F, quaternion7.x(), 0.01F);
      assertEquals((-0.046554044F), quaternion7.w(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-0.9989158F), quaternion7.z(), 0.01F);
      assertEquals((-0.046554044F), quaternion8.w(), 0.01F);
      assertEquals(-0.0F, quaternion8.x(), 0.01F);
      assertEquals(-0.0F, quaternion8.y(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals((-0.9989158F), quaternion8.z(), 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertFalse(quaternion11.hasNaN());
      assertEquals((-0.046554044F), quaternion11.w(), 0.01F);
      assertEquals((-0.9989158F), quaternion11.z(), 0.01F);
      assertEquals(-0.0F, quaternion11.y(), 0.01F);
      assertEquals(-0.0F, quaternion11.x(), 0.01F);
      assertSame(quaternion7, quaternion11);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion10);
      assertSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion11);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion6);
      assertSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion9);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion6);
      assertSame(quaternion11, quaternion7);
      assertSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion0);
      assertSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion4);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion5);
      assertSame(quaternion11, quaternion8);
      assertTrue(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion8.equals((Object)quaternion6));
      assertTrue(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertTrue(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion10));
      assertTrue(quaternion11.equals((Object)quaternion1));
      assertTrue(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertTrue(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertNotNull(quaternion11);
      
      Vector3 vector3_6 = quaternion4.transform((IVector3) vector3_1);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1182.043F), vector3_1.z, 0.01F);
      assertEquals((-0.046554044F), quaternion1.w, 0.01F);
      assertEquals((-0.9989158F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-1182.043F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(0.0F, vector3_6.y, 0.01F);
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1.0F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1182.043F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1397225.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.046554044F), quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9989158F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(1397225.6F, vector3_6.lengthSquared(), 0.01F);
      assertEquals((-1182.043F), vector3_6.z(), 0.01F);
      assertEquals(0.0F, vector3_6.y(), 0.01F);
      assertEquals(0.0F, vector3_6.x(), 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(1.0F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion8);
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertTrue(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertTrue(vector3_6.equals((Object)vector3_2));
      assertTrue(vector3_6.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertTrue(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertNotNull(vector3_6);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-679.54755F);
      floatArray0[1] = 4580.8F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = (-665.43F);
      floatArray0[7] = 159.0F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals((-679.54755F), quaternion0.x, 0.01F);
      assertEquals(4580.8F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(4580.8F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals((-679.54755F), quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertArrayEquals(new float[] {(-679.54755F), 4580.8F, 0.0F, 1.0F, 0.0F, 3.4028235E38F, (-665.43F), 159.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3((-1383.9208F), 0.0F, (-0.99999F));
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-1383.9208F), vector3_0.x, 0.01F);
      assertEquals((-0.99999F), vector3_0.z, 0.01F);
      assertEquals((-1383.9208F), vector3_0.x(), 0.01F);
      assertEquals(1915237.8F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.99999F), vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAngles(vector3_0);
      assertEquals(0.6050907F, quaternion0.w, 0.01F);
      assertEquals((-0.3305586F), quaternion0.z, 0.01F);
      assertEquals(0.34724003F, quaternion0.y, 0.01F);
      assertEquals((-0.63562614F), quaternion0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-1383.9208F), vector3_0.x, 0.01F);
      assertEquals((-0.99999F), vector3_0.z, 0.01F);
      assertEquals(0.34724003F, quaternion1.y, 0.01F);
      assertEquals((-0.63562614F), quaternion1.x, 0.01F);
      assertEquals((-0.3305586F), quaternion1.z, 0.01F);
      assertEquals(0.6050907F, quaternion1.w, 0.01F);
      assertEquals(0.6050907F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.63562614F), quaternion0.x(), 0.01F);
      assertEquals(0.34724003F, quaternion0.y(), 0.01F);
      assertEquals((-0.3305586F), quaternion0.z(), 0.01F);
      assertEquals((-1383.9208F), vector3_0.x(), 0.01F);
      assertEquals(1915237.8F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-0.99999F), vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.63562614F), quaternion1.x(), 0.01F);
      assertEquals((-0.3305586F), quaternion1.z(), 0.01F);
      assertEquals(0.34724003F, quaternion1.y(), 0.01F);
      assertEquals(0.6050907F, quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertArrayEquals(new float[] {(-679.54755F), 4580.8F, 0.0F, 1.0F, 0.0F, 3.4028235E38F, (-665.43F), 159.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-4178.8896F);
      floatArray0[1] = (-1787.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2692.127F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals((-1.0F), quaternion0.z, 0.01F);
      assertEquals((-4178.8896F), quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals((-1787.0F), quaternion0.y, 0.01F);
      assertEquals((-1.0F), quaternion0.z(), 0.01F);
      assertEquals((-4178.8896F), quaternion0.x(), 0.01F);
      assertEquals((-1787.0F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertArrayEquals(new float[] {(-4178.8896F), (-1787.0F), (-1.0F), 1.0F, 0.0F, 2692.127F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals((-1.0F), quaternion0.z, 0.01F);
      assertEquals((-4178.8896F), quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals((-1787.0F), quaternion0.y, 0.01F);
      assertEquals((-1.0F), quaternion1.z, 0.01F);
      assertEquals((-4178.8896F), quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals((-1787.0F), quaternion1.y, 0.01F);
      assertEquals((-1.0F), quaternion0.z(), 0.01F);
      assertEquals((-4178.8896F), quaternion0.x(), 0.01F);
      assertEquals((-1787.0F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-1.0F), quaternion1.z(), 0.01F);
      assertEquals((-4178.8896F), quaternion1.x(), 0.01F);
      assertEquals((-1787.0F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertArrayEquals(new float[] {(-4178.8896F), (-1787.0F), (-1.0F), 1.0F, 0.0F, 2692.127F}, floatArray0, 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(6, floatArray0.length);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.fromAnglesXZ(1.0F, (-1.0F));
      assertEquals((-1.0F), quaternion0.z, 0.01F);
      assertEquals((-4178.8896F), quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals((-1787.0F), quaternion0.y, 0.01F);
      assertEquals((-0.22984886F), quaternion1.y, 0.01F);
      assertEquals(0.77015114F, quaternion1.w, 0.01F);
      assertEquals((-0.4207355F), quaternion1.z, 0.01F);
      assertEquals(0.4207355F, quaternion1.x, 0.01F);
      assertEquals(0.77015114F, quaternion2.w, 0.01F);
      assertEquals((-0.22984886F), quaternion2.y, 0.01F);
      assertEquals(0.4207355F, quaternion2.x, 0.01F);
      assertEquals((-0.4207355F), quaternion2.z, 0.01F);
      assertEquals((-1.0F), quaternion0.z(), 0.01F);
      assertEquals((-4178.8896F), quaternion0.x(), 0.01F);
      assertEquals((-1787.0F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-0.4207355F), quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.22984886F), quaternion1.y(), 0.01F);
      assertEquals(0.4207355F, quaternion1.x(), 0.01F);
      assertEquals(0.77015114F, quaternion1.w(), 0.01F);
      assertEquals(0.77015114F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.4207355F, quaternion2.x(), 0.01F);
      assertEquals((-0.4207355F), quaternion2.z(), 0.01F);
      assertEquals((-0.22984886F), quaternion2.y(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertArrayEquals(new float[] {(-4178.8896F), (-1787.0F), (-1.0F), 1.0F, 0.0F, 2692.127F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(6, floatArray0.length);
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.set((IQuaternion) quaternion0);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertNotNull(quaternion2);
      
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      float float0 = 2633.239F;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3.4028235E38F;
      Vector3 vector3_1 = null;
      try {
        vector3_1 = new Vector3(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.transformUnitX((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.slerpLocal(quaternion1, 0.0F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.fromVectorFromNegativeZ((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      
      Quaternion quaternion1 = new Quaternion();
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertTrue(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.slerpLocal(quaternion1, (-1.0F));
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      
      Quaternion quaternion3 = quaternion0.integrate((IVector3) vector3_0, 1322.9F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0015118284F, quaternion3.w, 0.01F);
      assertEquals(0.9999989F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0015118284F, quaternion3.w(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.9999989F, quaternion3.y(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0015118284F;
      Quaternion quaternion4 = quaternion2.integrate((IVector3) vector3_0, 0.0F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertEquals(1.0F, quaternion4.w(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion0));
      
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 1.0F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0015118284F, vector3_1.x, 0.01F);
      assertEquals(2.285625E-6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0015118284F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      
      Vector3 vector3_2 = quaternion3.transformAndAdd(vector3_0, vector3_0, vector3_1);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0015118284F, quaternion3.w, 0.01F);
      assertEquals(0.9999989F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(2.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(2.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0015118284F, quaternion3.w(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.9999989F, quaternion3.y(), 0.01F);
      assertEquals(4.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(2.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(2.0F, vector3_2.y(), 0.01F);
      assertEquals(4.0F, vector3_2.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion4);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      
      Quaternion quaternion5 = quaternion0.normalize();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion5.y, 0.01F);
      assertEquals(0.0F, quaternion5.z, 0.01F);
      assertEquals(1.0F, quaternion5.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, quaternion5.z(), 0.01F);
      assertEquals(1.0F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion2));
      assertTrue(quaternion5.equals((Object)quaternion0));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion3));
      
      Quaternion quaternion6 = quaternion1.slerp((IQuaternion) quaternion0, 0.0F, quaternion0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(0.0F, quaternion6.y, 0.01F);
      assertEquals(0.0F, quaternion6.x, 0.01F);
      assertEquals(1.0F, quaternion6.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion6.w(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals(0.0F, quaternion6.y(), 0.01F);
      assertEquals(0.0F, quaternion6.x(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion6.equals((Object)quaternion4));
      assertTrue(quaternion6.equals((Object)quaternion1));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      
      Quaternion quaternion7 = quaternion1.invert();
      assertEquals(-0.0F, quaternion7.y, 0.01F);
      assertEquals(-0.0F, quaternion7.z, 0.01F);
      assertEquals(-0.0F, quaternion7.x, 0.01F);
      assertEquals(1.0F, quaternion7.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion7.z(), 0.01F);
      assertEquals(1.0F, quaternion7.w(), 0.01F);
      assertEquals(-0.0F, quaternion7.x(), 0.01F);
      assertEquals(-0.0F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion7.equals((Object)quaternion4));
      assertTrue(quaternion7.equals((Object)quaternion0));
      assertTrue(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion2));
      
      Quaternion quaternion8 = quaternion3.fromVectorFromNegativeZ((IVector3) vector3_2);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion8.y, 0.01F);
      assertEquals(0.70710677F, quaternion8.x, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(0.70710677F, quaternion8.w, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.70710677F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.70710677F, quaternion3.w, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(2.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(2.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion8.y(), 0.01F);
      assertEquals(0.70710677F, quaternion8.x(), 0.01F);
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.70710677F, quaternion8.w(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.70710677F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.70710677F, quaternion3.x(), 0.01F);
      assertEquals(4.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(2.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(2.0F, vector3_2.y(), 0.01F);
      assertEquals(4.0F, vector3_2.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion7);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      
      Quaternion quaternion9 = quaternion7.normalize();
      assertEquals(-0.0F, quaternion7.y, 0.01F);
      assertEquals(-0.0F, quaternion7.z, 0.01F);
      assertEquals(-0.0F, quaternion7.x, 0.01F);
      assertEquals(1.0F, quaternion7.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion9.w, 0.01F);
      assertEquals(-0.0F, quaternion9.x, 0.01F);
      assertEquals(-0.0F, quaternion9.y, 0.01F);
      assertEquals(-0.0F, quaternion9.z, 0.01F);
      assertEquals(-0.0F, quaternion7.z(), 0.01F);
      assertEquals(1.0F, quaternion7.w(), 0.01F);
      assertEquals(-0.0F, quaternion7.x(), 0.01F);
      assertEquals(-0.0F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion9.w(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals(-0.0F, quaternion9.y(), 0.01F);
      assertEquals(-0.0F, quaternion9.z(), 0.01F);
      assertEquals(-0.0F, quaternion9.x(), 0.01F);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion5);
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion7.equals((Object)quaternion4));
      assertTrue(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertTrue(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion9.equals((Object)quaternion1));
      assertTrue(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertTrue(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertTrue(quaternion9.equals((Object)quaternion0));
      assertTrue(quaternion9.equals((Object)quaternion4));
      assertTrue(quaternion9.equals((Object)quaternion7));
      assertTrue(quaternion9.equals((Object)quaternion2));
      
      Vector3 vector3_3 = quaternion3.transformAndAdd(vector3_2, vector3_1, vector3_1);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(2.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(1.9999999F, vector3_3.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.70710677F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.70710677F, quaternion3.w, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(1.9999999F, vector3_1.z, 0.01F);
      assertEquals(2.0F, vector3_1.y, 0.01F);
      assertEquals(1.9999999F, vector3_2.z, 0.01F);
      assertEquals(2.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.9999999F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(7.9999995F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(2.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.70710677F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.70710677F, quaternion3.x(), 0.01F);
      assertEquals(7.9999995F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.9999999F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(2.0F, vector3_1.y(), 0.01F);
      assertEquals(1.9999999F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(2.0F, vector3_2.y(), 0.01F);
      assertEquals(7.9999995F, vector3_2.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion7);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion7));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      
      Quaternion quaternion10 = quaternion3.mult((IQuaternion) quaternion8);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion8.y, 0.01F);
      assertEquals(0.70710677F, quaternion8.x, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(0.70710677F, quaternion8.w, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, quaternion10.w, 0.01F);
      assertEquals(0.0F, quaternion10.y, 0.01F);
      assertEquals(0.99999994F, quaternion10.x, 0.01F);
      assertEquals(0.0F, quaternion10.z, 0.01F);
      assertEquals(0.70710677F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.70710677F, quaternion3.w, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(1.9999999F, vector3_1.z, 0.01F);
      assertEquals(2.0F, vector3_1.y, 0.01F);
      assertEquals(1.9999999F, vector3_2.z, 0.01F);
      assertEquals(2.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion8.y(), 0.01F);
      assertEquals(0.70710677F, quaternion8.x(), 0.01F);
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.70710677F, quaternion8.w(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, quaternion10.y(), 0.01F);
      assertEquals(0.99999994F, quaternion10.x(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.z(), 0.01F);
      assertEquals(0.0F, quaternion10.w(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.70710677F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.70710677F, quaternion3.x(), 0.01F);
      assertEquals(7.9999995F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.9999999F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(2.0F, vector3_1.y(), 0.01F);
      assertEquals(1.9999999F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(2.0F, vector3_2.y(), 0.01F);
      assertEquals(7.9999995F, vector3_2.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion9);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion7);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion9));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      
      Quaternion quaternion11 = quaternion2.slerp((IQuaternion) quaternion3, 723.47723F, quaternion7);
      assertEquals(-0.0F, quaternion7.y, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals(0.39912093F, quaternion7.x, 0.01F);
      assertEquals((-0.91689944F), quaternion7.w, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.70710677F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.70710677F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion11.z, 0.01F);
      assertEquals(-0.0F, quaternion11.y, 0.01F);
      assertEquals((-0.91689944F), quaternion11.w, 0.01F);
      assertEquals(0.39912093F, quaternion11.x, 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertEquals((-0.91689944F), quaternion7.w(), 0.01F);
      assertEquals(0.39912093F, quaternion7.x(), 0.01F);
      assertEquals(-0.0F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.70710677F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.70710677F, quaternion3.x(), 0.01F);
      assertFalse(quaternion11.hasNaN());
      assertEquals(0.39912093F, quaternion11.x(), 0.01F);
      assertEquals(-0.0F, quaternion11.y(), 0.01F);
      assertEquals(0.0F, quaternion11.z(), 0.01F);
      assertEquals((-0.91689944F), quaternion11.w(), 0.01F);
      assertSame(quaternion7, quaternion11);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion11);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion6);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion11);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion11, quaternion4);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion5);
      assertSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion2);
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion9));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertTrue(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertTrue(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion2));
      
      Vector3 vector3_4 = quaternion11.transformUnitY(vector3_3);
      assertEquals(-0.0F, quaternion7.y, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals(0.39912093F, quaternion7.x, 0.01F);
      assertEquals((-0.91689944F), quaternion7.w, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals((-0.7319075F), vector3_3.z, 0.01F);
      assertEquals(0.68140495F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.70710677F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.70710677F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion11.z, 0.01F);
      assertEquals(-0.0F, quaternion11.y, 0.01F);
      assertEquals((-0.91689944F), quaternion11.w, 0.01F);
      assertEquals(0.39912093F, quaternion11.x, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.68140495F, vector3_4.y, 0.01F);
      assertEquals((-0.7319075F), vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.68140495F, vector3_1.y, 0.01F);
      assertEquals((-0.7319075F), vector3_1.z, 0.01F);
      assertEquals(0.68140495F, vector3_2.y, 0.01F);
      assertEquals((-0.7319075F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertEquals((-0.91689944F), quaternion7.w(), 0.01F);
      assertEquals(0.39912093F, quaternion7.x(), 0.01F);
      assertEquals(-0.0F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0000013F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.68140495F, vector3_3.y(), 0.01F);
      assertEquals((-0.7319075F), vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.70710677F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.70710677F, quaternion3.x(), 0.01F);
      assertFalse(quaternion11.hasNaN());
      assertEquals(0.39912093F, quaternion11.x(), 0.01F);
      assertEquals(-0.0F, quaternion11.y(), 0.01F);
      assertEquals(0.0F, quaternion11.z(), 0.01F);
      assertEquals((-0.91689944F), quaternion11.w(), 0.01F);
      assertEquals((-0.7319075F), vector3_4.z(), 0.01F);
      assertEquals(0.68140495F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(1.0000013F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.0000013F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.7319075F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.68140495F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(1.0000013F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.68140495F, vector3_2.y(), 0.01F);
      assertEquals((-0.7319075F), vector3_2.z(), 0.01F);
      assertSame(quaternion7, quaternion11);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion11);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion6);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion11);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion11, quaternion4);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion5);
      assertSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion2);
      assertSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion9));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertTrue(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertTrue(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      
      Quaternion quaternion12 = quaternion10.multLocal(quaternion7);
      assertEquals(-0.0F, quaternion7.y, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals(0.39912093F, quaternion7.x, 0.01F);
      assertEquals((-0.91689944F), quaternion7.w, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion8.y, 0.01F);
      assertEquals(0.70710677F, quaternion8.x, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(0.70710677F, quaternion8.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals((-0.9168994F), quaternion10.x, 0.01F);
      assertEquals(0.0F, quaternion10.y, 0.01F);
      assertEquals(0.0F, quaternion10.z, 0.01F);
      assertEquals((-0.3991209F), quaternion10.w, 0.01F);
      assertEquals(0.70710677F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.70710677F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion12.y, 0.01F);
      assertEquals(0.0F, quaternion12.z, 0.01F);
      assertEquals((-0.3991209F), quaternion12.w, 0.01F);
      assertEquals((-0.9168994F), quaternion12.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.68140495F, vector3_1.y, 0.01F);
      assertEquals((-0.7319075F), vector3_1.z, 0.01F);
      assertEquals(0.68140495F, vector3_2.y, 0.01F);
      assertEquals((-0.7319075F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertEquals((-0.91689944F), quaternion7.w(), 0.01F);
      assertEquals(0.39912093F, quaternion7.x(), 0.01F);
      assertEquals(-0.0F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion8.y(), 0.01F);
      assertEquals(0.70710677F, quaternion8.x(), 0.01F);
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.70710677F, quaternion8.w(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals((-0.3991209F), quaternion10.w(), 0.01F);
      assertEquals((-0.9168994F), quaternion10.x(), 0.01F);
      assertEquals(0.0F, quaternion10.y(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.z(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.70710677F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.70710677F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, quaternion12.y(), 0.01F);
      assertEquals(0.0F, quaternion12.z(), 0.01F);
      assertEquals((-0.9168994F), quaternion12.x(), 0.01F);
      assertFalse(quaternion12.hasNaN());
      assertEquals((-0.3991209F), quaternion12.w(), 0.01F);
      assertEquals(1.0000013F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.7319075F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.68140495F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(1.0000013F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.68140495F, vector3_2.y(), 0.01F);
      assertEquals((-0.7319075F), vector3_2.z(), 0.01F);
      assertSame(quaternion7, quaternion11);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion12);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion12);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion12);
      assertNotSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion11);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion9);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion11);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion12);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion12);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion11);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion12, quaternion2);
      assertNotSame(quaternion12, quaternion1);
      assertNotSame(quaternion12, quaternion6);
      assertNotSame(quaternion12, quaternion5);
      assertNotSame(quaternion12, quaternion8);
      assertNotSame(quaternion12, quaternion3);
      assertNotSame(quaternion12, quaternion11);
      assertNotSame(quaternion12, quaternion0);
      assertSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion9);
      assertNotSame(quaternion12, quaternion4);
      assertNotSame(quaternion12, quaternion7);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion9));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion10));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion11));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion9));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion11));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion1));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion0));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      
      Quaternion quaternion13 = quaternion1.normalizeLocal();
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion13.w, 0.01F);
      assertEquals(0.0F, quaternion13.x, 0.01F);
      assertEquals(0.0F, quaternion13.y, 0.01F);
      assertEquals(0.0F, quaternion13.z, 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion13.w(), 0.01F);
      assertFalse(quaternion13.hasNaN());
      assertEquals(0.0F, quaternion13.x(), 0.01F);
      assertEquals(0.0F, quaternion13.y(), 0.01F);
      assertEquals(0.0F, quaternion13.z(), 0.01F);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion13);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion13, quaternion3);
      assertNotSame(quaternion13, quaternion5);
      assertNotSame(quaternion13, quaternion8);
      assertNotSame(quaternion13, quaternion11);
      assertNotSame(quaternion13, quaternion6);
      assertNotSame(quaternion13, quaternion12);
      assertNotSame(quaternion13, quaternion0);
      assertSame(quaternion13, quaternion1);
      assertNotSame(quaternion13, quaternion4);
      assertNotSame(quaternion13, quaternion7);
      assertNotSame(quaternion13, quaternion2);
      assertNotSame(quaternion13, quaternion10);
      assertNotSame(quaternion13, quaternion9);
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion12));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion13.equals((Object)quaternion6));
      assertFalse(quaternion13.equals((Object)quaternion3));
      assertTrue(quaternion13.equals((Object)quaternion5));
      assertFalse(quaternion13.equals((Object)quaternion7));
      assertFalse(quaternion13.equals((Object)quaternion10));
      assertTrue(quaternion13.equals((Object)quaternion4));
      assertFalse(quaternion13.equals((Object)quaternion8));
      assertFalse(quaternion13.equals((Object)quaternion11));
      assertTrue(quaternion13.equals((Object)quaternion0));
      assertTrue(quaternion13.equals((Object)quaternion9));
      assertFalse(quaternion13.equals((Object)quaternion12));
      assertTrue(quaternion13.equals((Object)quaternion2));
      
      Vector3 vector3_5 = quaternion8.toAngles();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion8.y, 0.01F);
      assertEquals(0.70710677F, quaternion8.x, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(0.70710677F, quaternion8.w, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.70710677F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.70710677F, quaternion3.w, 0.01F);
      assertEquals(1.5707963F, vector3_5.x, 0.01F);
      assertEquals(0.0F, vector3_5.z, 0.01F);
      assertEquals(-0.0F, vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.68140495F, vector3_1.y, 0.01F);
      assertEquals((-0.7319075F), vector3_1.z, 0.01F);
      assertEquals(0.68140495F, vector3_2.y, 0.01F);
      assertEquals((-0.7319075F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion8.y(), 0.01F);
      assertEquals(0.70710677F, quaternion8.x(), 0.01F);
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.70710677F, quaternion8.w(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.70710677F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.70710677F, quaternion3.x(), 0.01F);
      assertEquals(-0.0F, vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.z(), 0.01F);
      assertEquals(1.5707963F, vector3_5.x(), 0.01F);
      assertEquals(2.4674008F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(1.0000013F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.7319075F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.68140495F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(1.0000013F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.68140495F, vector3_2.y(), 0.01F);
      assertEquals((-0.7319075F), vector3_2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion9);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion12);
      assertNotSame(quaternion8, quaternion11);
      assertNotSame(quaternion8, quaternion13);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion12);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion11);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion12));
      assertFalse(quaternion8.equals((Object)quaternion10));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion11));
      assertFalse(quaternion8.equals((Object)quaternion13));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion9));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      
      Quaternion quaternion14 = quaternion10.set(2888.6F, 0.70710677F, 0.70710677F, -0.0F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion8.y, 0.01F);
      assertEquals(0.70710677F, quaternion8.x, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(0.70710677F, quaternion8.w, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(2888.6F, quaternion10.x, 0.01F);
      assertEquals(-0.0F, quaternion10.w, 0.01F);
      assertEquals(0.70710677F, quaternion10.y, 0.01F);
      assertEquals(0.70710677F, quaternion10.z, 0.01F);
      assertEquals(0.70710677F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.70710677F, quaternion3.w, 0.01F);
      assertEquals(2888.6F, quaternion14.x, 0.01F);
      assertEquals(-0.0F, quaternion14.w, 0.01F);
      assertEquals(0.70710677F, quaternion14.z, 0.01F);
      assertEquals(0.70710677F, quaternion14.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.68140495F, vector3_1.y, 0.01F);
      assertEquals((-0.7319075F), vector3_1.z, 0.01F);
      assertEquals(0.68140495F, vector3_2.y, 0.01F);
      assertEquals((-0.7319075F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion8.y(), 0.01F);
      assertEquals(0.70710677F, quaternion8.x(), 0.01F);
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.70710677F, quaternion8.w(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(2888.6F, quaternion10.x(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.70710677F, quaternion10.y(), 0.01F);
      assertEquals(0.70710677F, quaternion10.z(), 0.01F);
      assertEquals(-0.0F, quaternion10.w(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.70710677F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.70710677F, quaternion3.x(), 0.01F);
      assertEquals(2888.6F, quaternion14.x(), 0.01F);
      assertFalse(quaternion14.hasNaN());
      assertEquals(0.70710677F, quaternion14.z(), 0.01F);
      assertEquals(-0.0F, quaternion14.w(), 0.01F);
      assertEquals(0.70710677F, quaternion14.y(), 0.01F);
      assertEquals(1.0000013F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.7319075F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.68140495F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(1.0000013F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.68140495F, vector3_2.y(), 0.01F);
      assertEquals((-0.7319075F), vector3_2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion9);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion12);
      assertNotSame(quaternion8, quaternion11);
      assertNotSame(quaternion8, quaternion13);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion14);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion11);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion3);
      assertSame(quaternion10, quaternion14);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion13);
      assertSame(quaternion10, quaternion12);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion14);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion12);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion11);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion14, quaternion2);
      assertNotSame(quaternion14, quaternion9);
      assertNotSame(quaternion14, quaternion0);
      assertNotSame(quaternion14, quaternion4);
      assertNotSame(quaternion14, quaternion11);
      assertSame(quaternion14, quaternion10);
      assertSame(quaternion14, quaternion12);
      assertNotSame(quaternion14, quaternion13);
      assertNotSame(quaternion14, quaternion8);
      assertNotSame(quaternion14, quaternion3);
      assertNotSame(quaternion14, quaternion7);
      assertNotSame(quaternion14, quaternion5);
      assertNotSame(quaternion14, quaternion1);
      assertNotSame(quaternion14, quaternion6);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion12));
      assertFalse(quaternion8.equals((Object)quaternion10));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion11));
      assertFalse(quaternion8.equals((Object)quaternion13));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion9));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion11));
      assertFalse(quaternion10.equals((Object)quaternion13));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion14.equals((Object)quaternion2));
      assertFalse(quaternion14.equals((Object)quaternion9));
      assertFalse(quaternion14.equals((Object)quaternion0));
      assertFalse(quaternion14.equals((Object)quaternion13));
      assertFalse(quaternion14.equals((Object)quaternion4));
      assertFalse(quaternion14.equals((Object)quaternion8));
      assertFalse(quaternion14.equals((Object)quaternion11));
      assertFalse(quaternion14.equals((Object)quaternion3));
      assertFalse(quaternion14.equals((Object)quaternion7));
      assertFalse(quaternion14.equals((Object)quaternion5));
      assertFalse(quaternion14.equals((Object)quaternion1));
      assertFalse(quaternion14.equals((Object)quaternion6));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_5));
      
      Vector3 vector3_6 = quaternion6.toAngles();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.y, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(0.0F, quaternion6.y, 0.01F);
      assertEquals(0.0F, quaternion6.x, 0.01F);
      assertEquals(1.0F, quaternion6.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, vector3_6.y(), 0.01F);
      assertEquals(0.0F, vector3_6.x(), 0.01F);
      assertEquals(0.0F, vector3_6.z(), 0.01F);
      assertEquals(0.0F, vector3_6.lengthSquared(), 0.01F);
      assertEquals(1.0F, quaternion6.w(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals(0.0F, quaternion6.y(), 0.01F);
      assertEquals(0.0F, quaternion6.x(), 0.01F);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion14);
      assertNotSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion13);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion10);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion11);
      assertNotSame(quaternion6, quaternion12);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion13);
      assertNotSame(quaternion6, quaternion14);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertTrue(quaternion0.equals((Object)quaternion13));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion14));
      assertFalse(quaternion1.equals((Object)quaternion12));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion11));
      assertTrue(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion12));
      assertTrue(quaternion6.equals((Object)quaternion13));
      assertTrue(quaternion6.equals((Object)quaternion9));
      assertFalse(quaternion6.equals((Object)quaternion10));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertTrue(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion14));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      
      Vector3 vector3_7 = (Vector3)Vector3.UNIT_X;
      assertEquals(1.0F, vector3_7.x, 0.01F);
      assertEquals(0.0F, vector3_7.y, 0.01F);
      assertEquals(0.0F, vector3_7.z, 0.01F);
      assertEquals(0.0F, vector3_7.y(), 0.01F);
      assertEquals(1.0F, vector3_7.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_7.z(), 0.01F);
      assertEquals(1.0F, vector3_7.x(), 0.01F);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_5);
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_4));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_5));
      
      Quaternion quaternion15 = quaternion6.integrate((IVector3) vector3_7, 48.52767F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, vector3_7.x, 0.01F);
      assertEquals(0.0F, vector3_7.y, 0.01F);
      assertEquals(0.0F, vector3_7.z, 0.01F);
      assertEquals(0.0F, quaternion15.y, 0.01F);
      assertEquals(0.0F, quaternion15.z, 0.01F);
      assertEquals(0.9991518F, quaternion15.x, 0.01F);
      assertEquals(0.041178644F, quaternion15.w, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(0.0F, quaternion6.y, 0.01F);
      assertEquals(0.0F, quaternion6.x, 0.01F);
      assertEquals(1.0F, quaternion6.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, vector3_7.y(), 0.01F);
      assertEquals(1.0F, vector3_7.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_7.z(), 0.01F);
      assertEquals(1.0F, vector3_7.x(), 0.01F);
      assertEquals(0.0F, quaternion15.z(), 0.01F);
      assertEquals(0.9991518F, quaternion15.x(), 0.01F);
      assertEquals(0.041178644F, quaternion15.w(), 0.01F);
      assertEquals(0.0F, quaternion15.y(), 0.01F);
      assertFalse(quaternion15.hasNaN());
      assertEquals(1.0F, quaternion6.w(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals(0.0F, quaternion6.y(), 0.01F);
      assertEquals(0.0F, quaternion6.x(), 0.01F);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion15);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion14);
      assertNotSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion15);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion13);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(quaternion15, quaternion1);
      assertNotSame(quaternion15, quaternion6);
      assertNotSame(quaternion15, quaternion4);
      assertNotSame(quaternion15, quaternion10);
      assertNotSame(quaternion15, quaternion7);
      assertNotSame(quaternion15, quaternion9);
      assertNotSame(quaternion15, quaternion12);
      assertNotSame(quaternion15, quaternion2);
      assertNotSame(quaternion15, quaternion5);
      assertNotSame(quaternion15, quaternion8);
      assertNotSame(quaternion15, quaternion0);
      assertNotSame(quaternion15, quaternion14);
      assertNotSame(quaternion15, quaternion3);
      assertNotSame(quaternion15, quaternion11);
      assertNotSame(quaternion15, quaternion13);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion10);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion15);
      assertNotSame(quaternion6, quaternion11);
      assertNotSame(quaternion6, quaternion12);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion13);
      assertNotSame(quaternion6, quaternion14);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertTrue(quaternion0.equals((Object)quaternion13));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion14));
      assertFalse(quaternion1.equals((Object)quaternion12));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_4));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(quaternion15.equals((Object)quaternion1));
      assertFalse(quaternion15.equals((Object)quaternion6));
      assertFalse(quaternion15.equals((Object)quaternion4));
      assertFalse(quaternion15.equals((Object)quaternion10));
      assertFalse(quaternion15.equals((Object)quaternion7));
      assertFalse(quaternion15.equals((Object)quaternion9));
      assertFalse(quaternion15.equals((Object)quaternion12));
      assertFalse(quaternion15.equals((Object)quaternion2));
      assertFalse(quaternion15.equals((Object)quaternion5));
      assertFalse(quaternion15.equals((Object)quaternion8));
      assertFalse(quaternion15.equals((Object)quaternion0));
      assertFalse(quaternion15.equals((Object)quaternion14));
      assertFalse(quaternion15.equals((Object)quaternion3));
      assertFalse(quaternion15.equals((Object)quaternion11));
      assertFalse(quaternion15.equals((Object)quaternion13));
      assertFalse(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion11));
      assertTrue(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion12));
      assertTrue(quaternion6.equals((Object)quaternion13));
      assertTrue(quaternion6.equals((Object)quaternion9));
      assertFalse(quaternion6.equals((Object)quaternion10));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertTrue(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion14));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      
      Quaternion quaternion16 = quaternion10.set((-0.7319075F), 1322.9F, 0.0F, (-2748.1946F));
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion8.y, 0.01F);
      assertEquals(0.70710677F, quaternion8.x, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(0.70710677F, quaternion8.w, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1322.9F, quaternion10.y, 0.01F);
      assertEquals((-0.7319075F), quaternion10.x, 0.01F);
      assertEquals((-2748.1946F), quaternion10.w, 0.01F);
      assertEquals(0.0F, quaternion10.z, 0.01F);
      assertEquals(0.70710677F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(0.70710677F, quaternion3.w, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.68140495F, vector3_1.y, 0.01F);
      assertEquals((-0.7319075F), vector3_1.z, 0.01F);
      assertEquals(0.68140495F, vector3_2.y, 0.01F);
      assertEquals((-0.7319075F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, quaternion16.z, 0.01F);
      assertEquals(1322.9F, quaternion16.y, 0.01F);
      assertEquals((-0.7319075F), quaternion16.x, 0.01F);
      assertEquals((-2748.1946F), quaternion16.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion8.y(), 0.01F);
      assertEquals(0.70710677F, quaternion8.x(), 0.01F);
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.70710677F, quaternion8.w(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.z(), 0.01F);
      assertEquals(1322.9F, quaternion10.y(), 0.01F);
      assertEquals((-0.7319075F), quaternion10.x(), 0.01F);
      assertEquals((-2748.1946F), quaternion10.w(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.70710677F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.70710677F, quaternion3.x(), 0.01F);
      assertEquals(1.0000013F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.7319075F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.68140495F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(1.0000013F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.68140495F, vector3_2.y(), 0.01F);
      assertEquals((-0.7319075F), vector3_2.z(), 0.01F);
      assertFalse(quaternion16.hasNaN());
      assertEquals((-0.7319075F), quaternion16.x(), 0.01F);
      assertEquals((-2748.1946F), quaternion16.w(), 0.01F);
      assertEquals(1322.9F, quaternion16.y(), 0.01F);
      assertEquals(0.0F, quaternion16.z(), 0.01F);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion15);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion16);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion15);
      assertNotSame(quaternion8, quaternion9);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion12);
      assertNotSame(quaternion8, quaternion16);
      assertNotSame(quaternion8, quaternion11);
      assertNotSame(quaternion8, quaternion13);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion14);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion15);
      assertNotSame(quaternion10, quaternion11);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion16);
      assertNotSame(quaternion10, quaternion3);
      assertSame(quaternion10, quaternion14);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion13);
      assertSame(quaternion10, quaternion12);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion14);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion15);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion12);
      assertNotSame(quaternion3, quaternion16);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion11);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_6);
      assertSame(quaternion16, quaternion12);
      assertNotSame(quaternion16, quaternion13);
      assertNotSame(quaternion16, quaternion5);
      assertNotSame(quaternion16, quaternion8);
      assertNotSame(quaternion16, quaternion11);
      assertNotSame(quaternion16, quaternion1);
      assertNotSame(quaternion16, quaternion6);
      assertNotSame(quaternion16, quaternion2);
      assertSame(quaternion16, quaternion14);
      assertNotSame(quaternion16, quaternion3);
      assertNotSame(quaternion16, quaternion15);
      assertNotSame(quaternion16, quaternion0);
      assertNotSame(quaternion16, quaternion4);
      assertNotSame(quaternion16, quaternion9);
      assertSame(quaternion16, quaternion10);
      assertNotSame(quaternion16, quaternion7);
      assertArrayEquals(new float[] {0.0015118284F, 0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion13));
      assertTrue(quaternion0.equals((Object)quaternion9));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion10));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion15));
      assertFalse(quaternion8.equals((Object)quaternion9));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion12));
      assertFalse(quaternion8.equals((Object)quaternion11));
      assertFalse(quaternion8.equals((Object)quaternion13));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion14));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion15));
      assertFalse(quaternion10.equals((Object)quaternion11));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion8));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 367.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1301.8986F);
      floatArray0[3] = 80.4F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals(367.0F, quaternion0.x, 0.01F);
      assertEquals((-1301.8986F), quaternion0.z, 0.01F);
      assertEquals(80.4F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(80.4F, quaternion0.w(), 0.01F);
      assertEquals(367.0F, quaternion0.x(), 0.01F);
      assertEquals((-1301.8986F), quaternion0.z(), 0.01F);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = new Quaternion((-704.0652F), 3.1415927F, 367.0F, 3.4028235E38F);
      assertEquals(3.4028235E38F, quaternion1.w, 0.01F);
      assertEquals(3.1415927F, quaternion1.y, 0.01F);
      assertEquals((-704.0652F), quaternion1.x, 0.01F);
      assertEquals(367.0F, quaternion1.z, 0.01F);
      assertEquals(3.1415927F, quaternion1.y(), 0.01F);
      assertEquals(3.4028235E38F, quaternion1.w(), 0.01F);
      assertEquals(367.0F, quaternion1.z(), 0.01F);
      assertEquals((-704.0652F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.integrate((IVector3) vector3_0, 0.0F, quaternion1);
      assertEquals(367.0F, quaternion0.x, 0.01F);
      assertEquals((-1301.8986F), quaternion0.z, 0.01F);
      assertEquals(80.4F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(80.4F, quaternion0.w(), 0.01F);
      assertEquals(367.0F, quaternion0.x(), 0.01F);
      assertEquals((-1301.8986F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = new Quaternion(0.0F, 0.0F, 80.4F, 1263.413F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1263.413F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(80.4F, quaternion3.z, 0.01F);
      assertEquals(80.4F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(1263.413F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion0.integrate((IVector3) vector3_0, 0.0F, quaternion3);
      assertEquals(367.0F, quaternion0.x, 0.01F);
      assertEquals((-1301.8986F), quaternion0.z, 0.01F);
      assertEquals(80.4F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(80.4F, quaternion0.w(), 0.01F);
      assertEquals(367.0F, quaternion0.x(), 0.01F);
      assertEquals((-1301.8986F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion4.multLocal(quaternion3);
      assertEquals(367.0F, quaternion0.x, 0.01F);
      assertEquals((-1301.8986F), quaternion0.z, 0.01F);
      assertEquals(80.4F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(80.4F, quaternion0.w(), 0.01F);
      assertEquals(367.0F, quaternion0.x(), 0.01F);
      assertEquals((-1301.8986F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertEquals(Float.NaN, quaternion5.w(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion5);
      
      quaternion4.x = Float.NaN;
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(80.4F, quaternion0.w(), 0.01F);
      assertEquals(367.0F, quaternion0.x(), 0.01F);
      assertEquals((-1301.8986F), quaternion0.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028235E38F), vector3_1.x, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
      
      Quaternion quaternion6 = quaternion0.fromAngleAxis(0.0F, (IVector3) vector3_1);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.x, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals(1.0F, quaternion6.w, 0.01F);
      assertEquals(-0.0F, quaternion6.y, 0.01F);
      assertEquals(-0.0F, quaternion6.z, 0.01F);
      assertEquals(-0.0F, quaternion6.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(-0.0F, quaternion6.z(), 0.01F);
      assertEquals(-0.0F, quaternion6.x(), 0.01F);
      assertEquals(-0.0F, quaternion6.y(), 0.01F);
      assertEquals(1.0F, quaternion6.w(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(vector3_1, vector3_0);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion0);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion6);
      
      float float0 = quaternion6.w();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.x, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals(1.0F, quaternion6.w, 0.01F);
      assertEquals(-0.0F, quaternion6.y, 0.01F);
      assertEquals(-0.0F, quaternion6.z, 0.01F);
      assertEquals(-0.0F, quaternion6.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(-0.0F, quaternion6.z(), 0.01F);
      assertEquals(-0.0F, quaternion6.x(), 0.01F);
      assertEquals(-0.0F, quaternion6.y(), 0.01F);
      assertEquals(1.0F, quaternion6.w(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(vector3_1, vector3_0);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion0);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertEquals(1.0F, float0, 0.01F);
      
      Quaternion quaternion7 = quaternion0.invertLocal();
      assertEquals(0.0F, quaternion7.x, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals(0.0F, quaternion7.y, 0.01F);
      assertEquals(1.0F, quaternion7.w, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion7.y(), 0.01F);
      assertEquals(0.0F, quaternion7.x(), 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.0F, quaternion7.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion7.fromAngles(3.1415927F, 1263.413F, (-1301.8986F));
      assertEquals((-0.1956685F), quaternion7.z, 0.01F);
      assertEquals(0.7781093F, quaternion7.x, 0.01F);
      assertEquals((-0.14556237F), quaternion7.w, 0.01F);
      assertEquals((-0.5788534F), quaternion7.y, 0.01F);
      assertEquals((-0.14556237F), quaternion8.w, 0.01F);
      assertEquals((-0.1956685F), quaternion8.z, 0.01F);
      assertEquals(0.7781093F, quaternion8.x, 0.01F);
      assertEquals((-0.5788534F), quaternion8.y, 0.01F);
      assertEquals((-0.1956685F), quaternion0.z, 0.01F);
      assertEquals((-0.14556237F), quaternion0.w, 0.01F);
      assertEquals(0.7781093F, quaternion0.x, 0.01F);
      assertEquals((-0.5788534F), quaternion0.y, 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-0.1956685F), quaternion7.z(), 0.01F);
      assertEquals(0.7781093F, quaternion7.x(), 0.01F);
      assertEquals((-0.14556237F), quaternion7.w(), 0.01F);
      assertEquals((-0.5788534F), quaternion7.y(), 0.01F);
      assertEquals((-0.1956685F), quaternion8.z(), 0.01F);
      assertEquals((-0.5788534F), quaternion8.y(), 0.01F);
      assertEquals((-0.14556237F), quaternion8.w(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.7781093F, quaternion8.x(), 0.01F);
      assertEquals((-0.1956685F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7781093F, quaternion0.x(), 0.01F);
      assertEquals((-0.14556237F), quaternion0.w(), 0.01F);
      assertEquals((-0.5788534F), quaternion0.y(), 0.01F);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion8);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion8);
      
      Quaternion quaternion9 = quaternion8.multLocal(quaternion0);
      assertEquals((-0.22652687F), quaternion7.x, 0.01F);
      assertEquals(0.16851854F, quaternion7.y, 0.01F);
      assertEquals(0.05696395F, quaternion7.z, 0.01F);
      assertEquals((-0.9576232F), quaternion7.w, 0.01F);
      assertEquals((-0.9576232F), quaternion8.w, 0.01F);
      assertEquals(0.05696395F, quaternion8.z, 0.01F);
      assertEquals((-0.22652687F), quaternion8.x, 0.01F);
      assertEquals(0.16851854F, quaternion8.y, 0.01F);
      assertEquals((-0.9576232F), quaternion9.w, 0.01F);
      assertEquals(0.05696395F, quaternion9.z, 0.01F);
      assertEquals((-0.22652687F), quaternion9.x, 0.01F);
      assertEquals(0.16851854F, quaternion9.y, 0.01F);
      assertEquals(0.16851854F, quaternion0.y, 0.01F);
      assertEquals(0.05696395F, quaternion0.z, 0.01F);
      assertEquals((-0.22652687F), quaternion0.x, 0.01F);
      assertEquals((-0.9576232F), quaternion0.w, 0.01F);
      assertEquals((-0.9576232F), quaternion7.w(), 0.01F);
      assertEquals((-0.22652687F), quaternion7.x(), 0.01F);
      assertEquals(0.05696395F, quaternion7.z(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.16851854F, quaternion7.y(), 0.01F);
      assertEquals((-0.9576232F), quaternion8.w(), 0.01F);
      assertEquals(0.16851854F, quaternion8.y(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.05696395F, quaternion8.z(), 0.01F);
      assertEquals((-0.22652687F), quaternion8.x(), 0.01F);
      assertEquals(0.16851854F, quaternion9.y(), 0.01F);
      assertEquals(0.05696395F, quaternion9.z(), 0.01F);
      assertEquals((-0.9576232F), quaternion9.w(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals((-0.22652687F), quaternion9.x(), 0.01F);
      assertEquals(0.16851854F, quaternion0.y(), 0.01F);
      assertEquals((-0.9576232F), quaternion0.w(), 0.01F);
      assertEquals(0.05696395F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.22652687F), quaternion0.x(), 0.01F);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion9);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion9);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion9, quaternion2);
      assertSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion0);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion9);
      
      Quaternion quaternion10 = quaternion0.fromAnglesXY(980.0F, 1.0F);
      assertEquals((-0.07752447F), quaternion10.x, 0.01F);
      assertEquals(0.47755122F, quaternion10.y, 0.01F);
      assertEquals(0.8741516F, quaternion10.w, 0.01F);
      assertEquals(0.04235181F, quaternion10.z, 0.01F);
      assertEquals((-0.07752447F), quaternion0.x, 0.01F);
      assertEquals(0.47755122F, quaternion0.y, 0.01F);
      assertEquals(0.8741516F, quaternion0.w, 0.01F);
      assertEquals(0.04235181F, quaternion0.z, 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.8741516F, quaternion10.w(), 0.01F);
      assertEquals(0.04235181F, quaternion10.z(), 0.01F);
      assertEquals(0.47755122F, quaternion10.y(), 0.01F);
      assertEquals((-0.07752447F), quaternion10.x(), 0.01F);
      assertEquals(0.8741516F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.04235181F, quaternion0.z(), 0.01F);
      assertEquals((-0.07752447F), quaternion0.x(), 0.01F);
      assertEquals(0.47755122F, quaternion0.y(), 0.01F);
      assertSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion1);
      assertSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion4);
      assertSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion3);
      assertSame(quaternion10, quaternion0);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion10);
      
      String string0 = quaternion5.toString();
      assertEquals((-0.07752447F), quaternion0.x, 0.01F);
      assertEquals(0.47755122F, quaternion0.y, 0.01F);
      assertEquals(0.8741516F, quaternion0.w, 0.01F);
      assertEquals(0.04235181F, quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.w, 0.01F);
      assertEquals(0.8741516F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.04235181F, quaternion0.z(), 0.01F);
      assertEquals((-0.07752447F), quaternion0.x(), 0.01F);
      assertEquals(0.47755122F, quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertEquals(Float.NaN, quaternion5.w(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertSame(vector3_0, vector3_1);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion10);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion5, quaternion7);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion10);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion9);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion8);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertEquals(4, floatArray0.length);
      assertNotNull(string0);
      assertEquals("[NaN, NaN, NaN, NaN]", string0);
      
      Quaternion quaternion11 = quaternion8.set(0.0F, Float.NaN, (-538.581F), 0.8741516F);
      assertEquals(0.0F, quaternion7.x, 0.01F);
      assertEquals(Float.NaN, quaternion7.y, 0.01F);
      assertEquals(0.8741516F, quaternion7.w, 0.01F);
      assertEquals((-538.581F), quaternion7.z, 0.01F);
      assertEquals(0.0F, quaternion8.x, 0.01F);
      assertEquals(Float.NaN, quaternion8.y, 0.01F);
      assertEquals(0.8741516F, quaternion8.w, 0.01F);
      assertEquals((-538.581F), quaternion8.z, 0.01F);
      assertEquals(0.0F, quaternion11.x, 0.01F);
      assertEquals((-538.581F), quaternion11.z, 0.01F);
      assertEquals(Float.NaN, quaternion11.y, 0.01F);
      assertEquals(0.8741516F, quaternion11.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-538.581F), quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.8741516F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion7.y(), 0.01F);
      assertEquals(0.0F, quaternion7.x(), 0.01F);
      assertEquals((-538.581F), quaternion7.z(), 0.01F);
      assertEquals(0.8741516F, quaternion7.w(), 0.01F);
      assertTrue(quaternion7.hasNaN());
      assertEquals(0.0F, quaternion8.x(), 0.01F);
      assertEquals(Float.NaN, quaternion8.y(), 0.01F);
      assertTrue(quaternion8.hasNaN());
      assertEquals((-538.581F), quaternion8.z(), 0.01F);
      assertEquals(0.8741516F, quaternion8.w(), 0.01F);
      assertEquals((-538.581F), quaternion11.z(), 0.01F);
      assertEquals(Float.NaN, quaternion11.y(), 0.01F);
      assertEquals(0.0F, quaternion11.x(), 0.01F);
      assertEquals(0.8741516F, quaternion11.w(), 0.01F);
      assertTrue(quaternion11.hasNaN());
      assertEquals(0.8741516F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-538.581F), quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion10);
      assertSame(quaternion7, quaternion11);
      assertNotSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion9);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion9);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion11);
      assertSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion5);
      assertSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion4);
      assertNotSame(quaternion11, quaternion5);
      assertSame(quaternion11, quaternion6);
      assertSame(quaternion11, quaternion7);
      assertSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion1);
      assertSame(quaternion11, quaternion0);
      assertSame(quaternion11, quaternion9);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertArrayEquals(new float[] {367.0F, 0.0F, (-1301.8986F), 80.4F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion11);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.5707964F;
      floatArray0[2] = 2560.4014F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1861.0F);
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals(2560.4014F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.5707964F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.5707964F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2560.4014F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(2560.4014F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.5707964F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.5707964F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(2560.4014F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(1.5707964F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2560.4014F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(1.5707964F, quaternion1.y(), 0.01F);
      assertEquals(2560.4014F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.invert(quaternion1);
      assertEquals(2560.4014F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.5707964F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.5707964F), quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-2560.4014F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-2560.4014F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.w, 0.01F);
      assertEquals((-1.5707964F), quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion2.x, 0.01F);
      assertEquals(1.5707964F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2560.4014F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals((-1.5707964F), quaternion1.y(), 0.01F);
      assertEquals((-2560.4014F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.5707964F), quaternion2.y(), 0.01F);
      assertEquals(-0.0F, quaternion2.x(), 0.01F);
      assertEquals((-2560.4014F), quaternion2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion2);
      
      float float0 = quaternion0.w();
      assertEquals(2560.4014F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.5707964F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.5707964F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2560.4014F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion1.toAngles();
      assertEquals(2560.4014F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.5707964F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.5707964F), quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-2560.4014F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(1.5712855F, vector3_1.x, 0.01F);
      assertEquals(3.1415927F, vector3_1.z, 0.01F);
      assertEquals(-0.0F, vector3_1.y, 0.01F);
      assertEquals(1.5707964F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2560.4014F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals((-1.5707964F), quaternion1.y(), 0.01F);
      assertEquals((-2560.4014F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.1415927F, vector3_1.z(), 0.01F);
      assertEquals(-0.0F, vector3_1.y(), 0.01F);
      assertEquals(12.338543F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.5712855F, vector3_1.x(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_1, vector3_0);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion2.transformUnitZ(vector3_0);
      assertEquals(2560.4014F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.5707964F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.5707964F), quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-2560.4014F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-2560.4014F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.w, 0.01F);
      assertEquals((-1.5707964F), quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion2.x, 0.01F);
      assertEquals(8043.7383F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals((-3.9348025F), vector3_0.z, 0.01F);
      assertEquals(8043.7383F, vector3_2.y, 0.01F);
      assertEquals((-3.9348025F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(1.5707964F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2560.4014F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals((-1.5707964F), quaternion1.y(), 0.01F);
      assertEquals((-2560.4014F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.5707964F), quaternion2.y(), 0.01F);
      assertEquals(-0.0F, quaternion2.x(), 0.01F);
      assertEquals((-2560.4014F), quaternion2.z(), 0.01F);
      assertEquals(8043.7383F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(6.470174E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.9348025F), vector3_0.z(), 0.01F);
      assertEquals(8043.7383F, vector3_2.y(), 0.01F);
      assertEquals(6.470174E7F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-3.9348025F), vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = quaternion0.transformUnitY(vector3_0);
      assertEquals(2560.4014F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.5707964F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.3111309E7F), vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(8043.7383F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals((-1.3111309E7F), vector3_3.y, 0.01F);
      assertEquals(8043.7383F, vector3_3.z, 0.01F);
      assertEquals(1.5707964F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2560.4014F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(1.71906485E14F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(8043.7383F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals((-1.3111309E7F), vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(8043.7383F, vector3_3.z(), 0.01F);
      assertEquals(1.71906485E14F, vector3_3.lengthSquared(), 0.01F);
      assertEquals((-1.3111309E7F), vector3_3.y(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_3);
      
      Quaternion quaternion3 = quaternion0.fromAngleAxis(0.0F, (IVector3) vector3_3);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.3111309E7F), vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(8043.7383F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals((-1.3111309E7F), vector3_3.y, 0.01F);
      assertEquals(8043.7383F, vector3_3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.y, 0.01F);
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(1.71906485E14F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(8043.7383F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals((-1.3111309E7F), vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(8043.7383F, vector3_3.z(), 0.01F);
      assertEquals(1.71906485E14F, vector3_3.lengthSquared(), 0.01F);
      assertEquals((-1.3111309E7F), vector3_3.y(), 0.01F);
      assertEquals(-0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.slerpLocal(quaternion2, 0.0F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.5707964F), quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-2560.4014F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-2560.4014F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.w, 0.01F);
      assertEquals((-1.5707964F), quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion2.x, 0.01F);
      assertEquals((-1.5707964F), quaternion4.y, 0.01F);
      assertEquals(-0.0F, quaternion4.x, 0.01F);
      assertEquals((-2560.4014F), quaternion4.z, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-1.5707964F), quaternion1.y(), 0.01F);
      assertEquals((-2560.4014F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.5707964F), quaternion2.y(), 0.01F);
      assertEquals(-0.0F, quaternion2.x(), 0.01F);
      assertEquals((-2560.4014F), quaternion2.z(), 0.01F);
      assertEquals(-0.0F, quaternion4.x(), 0.01F);
      assertEquals((-2560.4014F), quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-1.5707964F), quaternion4.y(), 0.01F);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion2);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion4);
      
      Vector3 vector3_4 = quaternion1.transformUnitZ(vector3_0);
      assertEquals((-3.9348025F), vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(8043.7383F, vector3_4.y, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.5707964F), quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-2560.4014F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(8043.7383F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals((-3.9348025F), vector3_0.z, 0.01F);
      assertEquals(6.470174E7F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals((-3.9348025F), vector3_4.z(), 0.01F);
      assertEquals(8043.7383F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-1.5707964F), quaternion1.y(), 0.01F);
      assertEquals((-2560.4014F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(8043.7383F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(6.470174E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.9348025F), vector3_0.z(), 0.01F);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_4);
      
      Vector3 vector3_5 = quaternion4.transformUnitZ(vector3_4);
      assertEquals((-3.9348025F), vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(8043.7383F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals((-3.9348025F), vector3_5.z, 0.01F);
      assertEquals(8043.7383F, vector3_5.y, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.5707964F), quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-2560.4014F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-2560.4014F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.w, 0.01F);
      assertEquals((-1.5707964F), quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion2.x, 0.01F);
      assertEquals(8043.7383F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals((-3.9348025F), vector3_0.z, 0.01F);
      assertEquals((-1.5707964F), quaternion4.y, 0.01F);
      assertEquals(-0.0F, quaternion4.x, 0.01F);
      assertEquals((-2560.4014F), quaternion4.z, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals(6.470174E7F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals((-3.9348025F), vector3_4.z(), 0.01F);
      assertEquals(8043.7383F, vector3_4.y(), 0.01F);
      assertEquals(8043.7383F, vector3_5.y(), 0.01F);
      assertEquals((-3.9348025F), vector3_5.z(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(6.470174E7F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-1.5707964F), quaternion1.y(), 0.01F);
      assertEquals((-2560.4014F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.5707964F), quaternion2.y(), 0.01F);
      assertEquals(-0.0F, quaternion2.x(), 0.01F);
      assertEquals((-2560.4014F), quaternion2.z(), 0.01F);
      assertEquals(8043.7383F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(6.470174E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.9348025F), vector3_0.z(), 0.01F);
      assertEquals(-0.0F, quaternion4.x(), 0.01F);
      assertEquals((-2560.4014F), quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-1.5707964F), quaternion4.y(), 0.01F);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_4);
      assertSame(vector3_5, vector3_2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_2);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion2);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_5);
      
      Quaternion quaternion5 = quaternion1.fromVectorFromNegativeZ(0.0F, 0.0F, Float.NaN);
      assertEquals(Float.NaN, quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.w(), 0.01F);
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion4.fromAngleAxis(Float.NaN, 0.0F, (-1449.4388F), 0.0F);
      assertEquals(Float.NaN, quaternion6.y, 0.01F);
      assertEquals(Float.NaN, quaternion6.x, 0.01F);
      assertEquals(Float.NaN, quaternion6.w, 0.01F);
      assertEquals(Float.NaN, quaternion6.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion6.x(), 0.01F);
      assertEquals(Float.NaN, quaternion6.z(), 0.01F);
      assertEquals(Float.NaN, quaternion6.y(), 0.01F);
      assertTrue(quaternion6.hasNaN());
      assertEquals(Float.NaN, quaternion6.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion2);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion0.fromAngles(vector3_4);
      assertEquals((-3.9348025F), vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(8043.7383F, vector3_4.y, 0.01F);
      assertEquals((-0.22774996F), quaternion7.y, 0.01F);
      assertEquals((-0.74501085F), quaternion7.z, 0.01F);
      assertEquals((-0.31200835F), quaternion7.w, 0.01F);
      assertEquals(0.5438194F, quaternion7.x, 0.01F);
      assertEquals((-0.74501085F), quaternion0.z, 0.01F);
      assertEquals(0.5438194F, quaternion0.x, 0.01F);
      assertEquals((-0.22774996F), quaternion0.y, 0.01F);
      assertEquals((-0.31200835F), quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(8043.7383F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals((-3.9348025F), vector3_0.z, 0.01F);
      assertEquals(6.470174E7F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals((-3.9348025F), vector3_4.z(), 0.01F);
      assertEquals(8043.7383F, vector3_4.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.5438194F, quaternion7.x(), 0.01F);
      assertEquals((-0.74501085F), quaternion7.z(), 0.01F);
      assertEquals((-0.31200835F), quaternion7.w(), 0.01F);
      assertEquals((-0.22774996F), quaternion7.y(), 0.01F);
      assertEquals((-0.74501085F), quaternion0.z(), 0.01F);
      assertEquals(0.5438194F, quaternion0.x(), 0.01F);
      assertEquals((-0.31200835F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.22774996F), quaternion0.y(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(8043.7383F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(6.470174E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.9348025F), vector3_0.z(), 0.01F);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion4);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_2);
      assertArrayEquals(new float[] {0.0F, 1.5707964F, 2560.4014F, 0.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion7);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1311.189F), 2395.98F, 2395.98F, 2395.98F);
      assertEquals(2395.98F, quaternion0.z, 0.01F);
      assertEquals(2395.98F, quaternion0.y, 0.01F);
      assertEquals(2395.98F, quaternion0.w, 0.01F);
      assertEquals((-1311.189F), quaternion0.x, 0.01F);
      assertEquals((-1311.189F), quaternion0.x(), 0.01F);
      assertEquals(2395.98F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2395.98F, quaternion0.y(), 0.01F);
      assertEquals(2395.98F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAngleAxis(0.0F, 0.0F, (-1162.0806F), 0.0F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.fromAngles((-1162.0806F), 3.4028235E38F, 0.99999F);
      assertEquals(0.49255884F, quaternion0.z, 0.01F);
      assertEquals(0.2582931F, quaternion0.x, 0.01F);
      assertEquals((-0.1641267F), quaternion0.y, 0.01F);
      assertEquals(0.81469804F, quaternion0.w, 0.01F);
      assertEquals((-0.1641267F), quaternion2.y, 0.01F);
      assertEquals(0.49255884F, quaternion2.z, 0.01F);
      assertEquals(0.2582931F, quaternion2.x, 0.01F);
      assertEquals(0.81469804F, quaternion2.w, 0.01F);
      assertEquals(0.49255884F, quaternion0.z(), 0.01F);
      assertEquals(0.81469804F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.1641267F), quaternion0.y(), 0.01F);
      assertEquals(0.2582931F, quaternion0.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.1641267F), quaternion2.y(), 0.01F);
      assertEquals(0.81469804F, quaternion2.w(), 0.01F);
      assertEquals(0.2582931F, quaternion2.x(), 0.01F);
      assertEquals(0.49255884F, quaternion2.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotNull(quaternion2);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3();
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion0.transform((IVector3) vector3_0, vector3_1);
      assertEquals(0.49255884F, quaternion0.z, 0.01F);
      assertEquals(0.2582931F, quaternion0.x, 0.01F);
      assertEquals((-0.1641267F), quaternion0.y, 0.01F);
      assertEquals(0.81469804F, quaternion0.w, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.71778786F, vector3_1.y, 0.01F);
      assertEquals(0.46089643F, vector3_1.x, 0.01F);
      assertEquals(0.52187645F, vector3_1.z, 0.01F);
      assertEquals(0.46089643F, vector3_2.x, 0.01F);
      assertEquals(0.52187645F, vector3_2.z, 0.01F);
      assertEquals(0.71778786F, vector3_2.y, 0.01F);
      assertEquals(0.49255884F, quaternion0.z(), 0.01F);
      assertEquals(0.81469804F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.1641267F), quaternion0.y(), 0.01F);
      assertEquals(0.2582931F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.46089643F, vector3_1.x(), 0.01F);
      assertEquals(0.99999994F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.52187645F, vector3_1.z(), 0.01F);
      assertEquals(0.71778786F, vector3_1.y(), 0.01F);
      assertEquals(0.46089643F, vector3_2.x(), 0.01F);
      assertEquals(0.71778786F, vector3_2.y(), 0.01F);
      assertEquals(0.52187645F, vector3_2.z(), 0.01F);
      assertEquals(0.99999994F, vector3_2.lengthSquared(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertNotNull(vector3_2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      boolean boolean0 = quaternion0.equals((Object) null);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        quaternion0.set(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float float0 = 2670.5742F;
      Quaternion quaternion0 = new Quaternion(2670.5742F, 2670.5742F, 3.4028235E38F, 0.0F);
      assertEquals(2670.5742F, quaternion0.y, 0.01F);
      assertEquals(2670.5742F, quaternion0.x, 0.01F);
      assertEquals(3.4028235E38F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(2670.5742F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2670.5742F, quaternion0.x(), 0.01F);
      assertEquals(3.4028235E38F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        quaternion0.set(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F));
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.x, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.x(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = quaternion0.toAngles();
      assertEquals((-3.4028235E38F), quaternion0.w, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.x, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.5707964F, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.x(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028235E38F), quaternion0.w(), 0.01F);
      assertEquals(1.5707964F, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertNotNull(vector3_0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2362.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-2362.0F), vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(5579044.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals((-2362.0F), vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertArrayEquals(new float[] {(-2362.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-2362.0F), vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals((-2362.0F), vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(5579044.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals((-2362.0F), vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(5579044.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals((-2362.0F), vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertArrayEquals(new float[] {(-2362.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(8, floatArray0.length);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion0.transformUnitZ(vector3_1);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-2362.0F), vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(5579044.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals((-2362.0F), vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_2.z(), 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertArrayEquals(new float[] {(-2362.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(8, floatArray0.length);
      assertNotNull(vector3_2);
      
      quaternion0.hashCode();
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-428.1F));
      assertEquals((-428.1F), quaternion0.w, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.x, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.y, 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.z, 0.01F);
      assertEquals((-428.1F), quaternion0.w(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.x(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.y(), 0.01F);
      assertEquals((-3.4028235E38F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertEquals(0.70710677F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.70710677F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(0.70710677F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.70710677F, quaternion0.w(), 0.01F);
      assertEquals(0.70710677F, quaternion0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.70710677F, quaternion1.w(), 0.01F);
      assertEquals(0.70710677F, quaternion1.y(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Vector3 vector3_1 = new Vector3(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Quaternion quaternion2 = quaternion0.fromVectors(vector3_0, vector3_0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion1.fromVectorFromNegativeZ(0.5218765F, (-2624.1777F), 1.0F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(1.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(1.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.w(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertNotNull(quaternion3);
      
      float float0 = quaternion1.y();
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(1.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(1.0F, float0, 0.01F);
      
      Vector3 vector3_2 = quaternion1.transformUnitY(vector3_0);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(1.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.mult((IQuaternion) quaternion1);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1252.37F), (-1252.37F), (-1252.37F), (-1252.37F));
      assertEquals((-1252.37F), quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals((-1252.37F), quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.x, 0.01F);
      assertEquals((-1252.37F), quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals((-1252.37F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1252.37F);
      floatArray0[1] = (-1252.37F);
      floatArray0[2] = 2794.0F;
      floatArray0[3] = (-1252.37F);
      Vector3 vector3_0 = new Vector3(floatArray0);
      assertEquals(2794.0F, vector3_0.z, 0.01F);
      assertEquals((-1252.37F), vector3_0.y, 0.01F);
      assertEquals((-1252.37F), vector3_0.x, 0.01F);
      assertEquals(1.0943297E7F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-1252.37F), vector3_0.y(), 0.01F);
      assertEquals((-1252.37F), vector3_0.x(), 0.01F);
      assertEquals(2794.0F, vector3_0.z(), 0.01F);
      assertArrayEquals(new float[] {(-1252.37F), (-1252.37F), 2794.0F, (-1252.37F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformUnitX(vector3_0);
      assertEquals((-1252.37F), quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals((-1252.37F), quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.x, 0.01F);
      assertEquals((-6273721.5F), vector3_0.x, 0.01F);
      assertEquals(6273722.5F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(6273722.5F, vector3_1.y, 0.01F);
      assertEquals((-6273721.5F), vector3_1.x, 0.01F);
      assertEquals((-1252.37F), quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals((-1252.37F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.w(), 0.01F);
      assertEquals((-6273721.5F), vector3_0.x(), 0.01F);
      assertEquals(7.8719167E13F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(6273722.5F, vector3_0.y(), 0.01F);
      assertEquals((-6273721.5F), vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(7.8719167E13F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6273722.5F, vector3_1.y(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertArrayEquals(new float[] {(-1252.37F), (-1252.37F), 2794.0F, (-1252.37F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(vector3_1);
      
      Quaternion quaternion1 = new Quaternion(2794.0F, 4.0F, 2494.0F, (-1252.37F));
      assertEquals(2494.0F, quaternion1.z, 0.01F);
      assertEquals(4.0F, quaternion1.y, 0.01F);
      assertEquals(2794.0F, quaternion1.x, 0.01F);
      assertEquals((-1252.37F), quaternion1.w, 0.01F);
      assertEquals(4.0F, quaternion1.y(), 0.01F);
      assertEquals(2494.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2794.0F, quaternion1.x(), 0.01F);
      assertEquals((-1252.37F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Vector3 vector3_2 = quaternion0.transform((IVector3) vector3_1);
      assertEquals((-1252.37F), quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals((-1252.37F), quaternion0.z, 0.01F);
      assertEquals((-1252.37F), quaternion0.x, 0.01F);
      assertEquals((-6273721.5F), vector3_0.x, 0.01F);
      assertEquals(6273722.5F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(6273722.5F, vector3_1.y, 0.01F);
      assertEquals((-6273721.5F), vector3_1.x, 0.01F);
      assertEquals(3.9359592E13F, vector3_2.z, 0.01F);
      assertEquals(3.9359584E13F, vector3_2.x, 0.01F);
      assertEquals((-7.8719176E13F), vector3_2.y, 0.01F);
      assertEquals((-1252.37F), quaternion0.x(), 0.01F);
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals((-1252.37F), quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.w(), 0.01F);
      assertEquals((-6273721.5F), vector3_0.x(), 0.01F);
      assertEquals(7.8719167E13F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(6273722.5F, vector3_0.y(), 0.01F);
      assertEquals((-6273721.5F), vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(7.8719167E13F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6273722.5F, vector3_1.y(), 0.01F);
      assertEquals(9.295063E27F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(3.9359584E13F, vector3_2.x(), 0.01F);
      assertEquals((-7.8719176E13F), vector3_2.y(), 0.01F);
      assertEquals(3.9359592E13F, vector3_2.z(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertArrayEquals(new float[] {(-1252.37F), (-1252.37F), 2794.0F, (-1252.37F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(4, floatArray0.length);
      assertNotNull(vector3_2);
      
      Quaternion quaternion2 = quaternion0.slerpLocal(quaternion1, (-1.0F));
      assertEquals((-2500.74F), quaternion0.y, 0.01F);
      assertEquals((-10.73999F), quaternion0.z, 0.01F);
      assertEquals((-3757.1099F), quaternion0.w, 0.01F);
      assertEquals(289.26F, quaternion0.x, 0.01F);
      assertEquals(2494.0F, quaternion1.z, 0.01F);
      assertEquals(4.0F, quaternion1.y, 0.01F);
      assertEquals(2794.0F, quaternion1.x, 0.01F);
      assertEquals((-1252.37F), quaternion1.w, 0.01F);
      assertEquals((-2500.74F), quaternion2.y, 0.01F);
      assertEquals((-10.73999F), quaternion2.z, 0.01F);
      assertEquals((-3757.1099F), quaternion2.w, 0.01F);
      assertEquals(289.26F, quaternion2.x, 0.01F);
      assertEquals((-10.73999F), quaternion0.z(), 0.01F);
      assertEquals(289.26F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-2500.74F), quaternion0.y(), 0.01F);
      assertEquals((-3757.1099F), quaternion0.w(), 0.01F);
      assertEquals(4.0F, quaternion1.y(), 0.01F);
      assertEquals(2494.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2794.0F, quaternion1.x(), 0.01F);
      assertEquals((-1252.37F), quaternion1.w(), 0.01F);
      assertEquals((-2500.74F), quaternion2.y(), 0.01F);
      assertEquals(289.26F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-10.73999F), quaternion2.z(), 0.01F);
      assertEquals((-3757.1099F), quaternion2.w(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.invertLocal();
      assertEquals(2500.74F, quaternion0.y, 0.01F);
      assertEquals(10.73999F, quaternion0.z, 0.01F);
      assertEquals((-3757.1099F), quaternion0.w, 0.01F);
      assertEquals((-289.26F), quaternion0.x, 0.01F);
      assertEquals(2494.0F, quaternion1.z, 0.01F);
      assertEquals(4.0F, quaternion1.y, 0.01F);
      assertEquals(2794.0F, quaternion1.x, 0.01F);
      assertEquals((-1252.37F), quaternion1.w, 0.01F);
      assertEquals(2500.74F, quaternion2.y, 0.01F);
      assertEquals(10.73999F, quaternion2.z, 0.01F);
      assertEquals((-3757.1099F), quaternion2.w, 0.01F);
      assertEquals((-289.26F), quaternion2.x, 0.01F);
      assertEquals(2500.74F, quaternion3.y, 0.01F);
      assertEquals(10.73999F, quaternion3.z, 0.01F);
      assertEquals((-3757.1099F), quaternion3.w, 0.01F);
      assertEquals((-289.26F), quaternion3.x, 0.01F);
      assertEquals(10.73999F, quaternion0.z(), 0.01F);
      assertEquals((-289.26F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2500.74F, quaternion0.y(), 0.01F);
      assertEquals((-3757.1099F), quaternion0.w(), 0.01F);
      assertEquals(4.0F, quaternion1.y(), 0.01F);
      assertEquals(2494.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2794.0F, quaternion1.x(), 0.01F);
      assertEquals((-1252.37F), quaternion1.w(), 0.01F);
      assertEquals(2500.74F, quaternion2.y(), 0.01F);
      assertEquals((-289.26F), quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(10.73999F, quaternion2.z(), 0.01F);
      assertEquals((-3757.1099F), quaternion2.w(), 0.01F);
      assertEquals(10.73999F, quaternion3.z(), 0.01F);
      assertEquals((-289.26F), quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(2500.74F, quaternion3.y(), 0.01F);
      assertEquals((-3757.1099F), quaternion3.w(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertNotNull(quaternion3);
      
      quaternion1.hashCode();
      assertEquals(2494.0F, quaternion1.z, 0.01F);
      assertEquals(4.0F, quaternion1.y, 0.01F);
      assertEquals(2794.0F, quaternion1.x, 0.01F);
      assertEquals((-1252.37F), quaternion1.w, 0.01F);
      assertEquals(4.0F, quaternion1.y(), 0.01F);
      assertEquals(2494.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2794.0F, quaternion1.x(), 0.01F);
      assertEquals((-1252.37F), quaternion1.w(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      
      Quaternion quaternion4 = quaternion0.invertLocal();
      assertEquals((-2500.74F), quaternion0.y, 0.01F);
      assertEquals((-10.73999F), quaternion0.z, 0.01F);
      assertEquals((-3757.1099F), quaternion0.w, 0.01F);
      assertEquals(289.26F, quaternion0.x, 0.01F);
      assertEquals((-3757.1099F), quaternion4.w, 0.01F);
      assertEquals((-10.73999F), quaternion4.z, 0.01F);
      assertEquals((-2500.74F), quaternion4.y, 0.01F);
      assertEquals(289.26F, quaternion4.x, 0.01F);
      assertEquals((-10.73999F), quaternion0.z(), 0.01F);
      assertEquals(289.26F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-2500.74F), quaternion0.y(), 0.01F);
      assertEquals((-3757.1099F), quaternion0.w(), 0.01F);
      assertEquals((-10.73999F), quaternion4.z(), 0.01F);
      assertEquals(289.26F, quaternion4.x(), 0.01F);
      assertEquals((-2500.74F), quaternion4.y(), 0.01F);
      assertEquals((-3757.1099F), quaternion4.w(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertNotNull(quaternion4);
      
      Vector3 vector3_3 = quaternion1.toAngles();
      assertEquals(2494.0F, quaternion1.z, 0.01F);
      assertEquals(4.0F, quaternion1.y, 0.01F);
      assertEquals(2794.0F, quaternion1.x, 0.01F);
      assertEquals((-1252.37F), quaternion1.w, 0.01F);
      assertEquals((-1.5707964F), vector3_3.y, 0.01F);
      assertEquals((-2.8964477F), vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(4.0F, quaternion1.y(), 0.01F);
      assertEquals(2494.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2794.0F, quaternion1.x(), 0.01F);
      assertEquals((-1252.37F), quaternion1.w(), 0.01F);
      assertEquals((-2.8964477F), vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(10.856811F, vector3_3.lengthSquared(), 0.01F);
      assertEquals((-1.5707964F), vector3_3.y(), 0.01F);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertNotNull(vector3_3);
      
      String string0 = quaternion1.toString();
      assertEquals(2494.0F, quaternion1.z, 0.01F);
      assertEquals(4.0F, quaternion1.y, 0.01F);
      assertEquals(2794.0F, quaternion1.x, 0.01F);
      assertEquals((-1252.37F), quaternion1.w, 0.01F);
      assertEquals(4.0F, quaternion1.y(), 0.01F);
      assertEquals(2494.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2794.0F, quaternion1.x(), 0.01F);
      assertEquals((-1252.37F), quaternion1.w(), 0.01F);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertNotNull(string0);
      assertEquals("[2794.0, 4.0, 2494.0, -1252.37]", string0);
      
      Quaternion quaternion5 = quaternion1.fromAnglesXY(6273722.5F, (-6273721.5F));
      assertEquals((-0.12928902F), quaternion5.x, 0.01F);
      assertEquals(0.101392865F, quaternion5.z, 0.01F);
      assertEquals(0.6087145F, quaternion5.y, 0.01F);
      assertEquals(0.7761897F, quaternion5.w, 0.01F);
      assertEquals((-0.12928902F), quaternion1.x, 0.01F);
      assertEquals(0.101392865F, quaternion1.z, 0.01F);
      assertEquals(0.6087145F, quaternion1.y, 0.01F);
      assertEquals(0.7761897F, quaternion1.w, 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.7761897F, quaternion5.w(), 0.01F);
      assertEquals(0.101392865F, quaternion5.z(), 0.01F);
      assertEquals(0.6087145F, quaternion5.y(), 0.01F);
      assertEquals((-0.12928902F), quaternion5.x(), 0.01F);
      assertEquals((-0.12928902F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.6087145F, quaternion1.y(), 0.01F);
      assertEquals(0.7761897F, quaternion1.w(), 0.01F);
      assertEquals(0.101392865F, quaternion1.z(), 0.01F);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertNotNull(quaternion5);
      
      Vector3 vector3_4 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertNotNull(vector3_4);
      
      Quaternion quaternion6 = quaternion2.fromVectors(vector3_1, vector3_4);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.0F), quaternion0.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals((-1.0F), quaternion6.z, 0.01F);
      assertEquals(0.0F, quaternion6.y, 0.01F);
      assertEquals((-4.371139E-8F), quaternion6.w, 0.01F);
      assertEquals(0.0F, quaternion6.x, 0.01F);
      assertEquals((-6273721.5F), vector3_0.x, 0.01F);
      assertEquals(6273722.5F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(6273722.5F, vector3_1.y, 0.01F);
      assertEquals((-6273721.5F), vector3_1.x, 0.01F);
      assertEquals((-0.12928902F), quaternion1.x, 0.01F);
      assertEquals(0.101392865F, quaternion1.z, 0.01F);
      assertEquals(0.6087145F, quaternion1.y, 0.01F);
      assertEquals(0.7761897F, quaternion1.w, 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-1.0F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-1.0F), quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-4.371139E-8F), quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals((-1.0F), quaternion6.z(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.0F, quaternion6.y(), 0.01F);
      assertEquals(0.0F, quaternion6.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion6.w(), 0.01F);
      assertEquals((-6273721.5F), vector3_0.x(), 0.01F);
      assertEquals(7.8719167E13F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(6273722.5F, vector3_0.y(), 0.01F);
      assertEquals((-6273721.5F), vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(7.8719167E13F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6273722.5F, vector3_1.y(), 0.01F);
      assertEquals((-0.12928902F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.6087145F, quaternion1.y(), 0.01F);
      assertEquals(0.7761897F, quaternion1.w(), 0.01F);
      assertEquals(0.101392865F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.0F), quaternion2.z(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertArrayEquals(new float[] {(-1252.37F), (-1252.37F), 2794.0F, (-1252.37F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion6.integrate((IVector3) vector3_3, 4.0F, quaternion0);
      assertEquals((-0.15002902F), quaternion0.z, 0.01F);
      assertEquals((-0.8691026F), quaternion0.w, 0.01F);
      assertEquals(2.0602496E-8F, quaternion0.y, 0.01F);
      assertEquals(0.47133017F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(0.47133017F, quaternion6.x, 0.01F);
      assertEquals((-0.8691026F), quaternion6.w, 0.01F);
      assertEquals((-0.15002902F), quaternion6.z, 0.01F);
      assertEquals(2.0602496E-8F, quaternion6.y, 0.01F);
      assertEquals((-0.8691026F), quaternion7.w, 0.01F);
      assertEquals(2.0602496E-8F, quaternion7.y, 0.01F);
      assertEquals(0.47133017F, quaternion7.x, 0.01F);
      assertEquals((-0.15002902F), quaternion7.z, 0.01F);
      assertEquals((-6273721.5F), vector3_0.x, 0.01F);
      assertEquals(6273722.5F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(6273722.5F, vector3_1.y, 0.01F);
      assertEquals((-6273721.5F), vector3_1.x, 0.01F);
      assertEquals((-0.12928902F), quaternion1.x, 0.01F);
      assertEquals(0.101392865F, quaternion1.z, 0.01F);
      assertEquals(0.6087145F, quaternion1.y, 0.01F);
      assertEquals(0.7761897F, quaternion1.w, 0.01F);
      assertEquals(2.0602496E-8F, quaternion2.y, 0.01F);
      assertEquals(0.47133017F, quaternion2.x, 0.01F);
      assertEquals((-0.8691026F), quaternion2.w, 0.01F);
      assertEquals((-0.15002902F), quaternion2.z, 0.01F);
      assertEquals((-1.5707964F), vector3_3.y, 0.01F);
      assertEquals((-2.8964477F), vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals((-0.15002902F), quaternion0.z(), 0.01F);
      assertEquals(0.47133017F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(2.0602496E-8F, quaternion0.y(), 0.01F);
      assertEquals((-0.8691026F), quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals((-0.15002902F), quaternion6.z(), 0.01F);
      assertEquals((-0.8691026F), quaternion6.w(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(2.0602496E-8F, quaternion6.y(), 0.01F);
      assertEquals(0.47133017F, quaternion6.x(), 0.01F);
      assertEquals(2.0602496E-8F, quaternion7.y(), 0.01F);
      assertEquals((-0.8691026F), quaternion7.w(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-0.15002902F), quaternion7.z(), 0.01F);
      assertEquals(0.47133017F, quaternion7.x(), 0.01F);
      assertEquals((-6273721.5F), vector3_0.x(), 0.01F);
      assertEquals(7.8719167E13F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(6273722.5F, vector3_0.y(), 0.01F);
      assertEquals((-6273721.5F), vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(7.8719167E13F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6273722.5F, vector3_1.y(), 0.01F);
      assertEquals((-0.12928902F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.6087145F, quaternion1.y(), 0.01F);
      assertEquals(0.7761897F, quaternion1.w(), 0.01F);
      assertEquals(0.101392865F, quaternion1.z(), 0.01F);
      assertEquals((-0.15002902F), quaternion2.z(), 0.01F);
      assertEquals(0.47133017F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.8691026F), quaternion2.w(), 0.01F);
      assertEquals(2.0602496E-8F, quaternion2.y(), 0.01F);
      assertEquals((-2.8964477F), vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(10.856811F, vector3_3.lengthSquared(), 0.01F);
      assertEquals((-1.5707964F), vector3_3.y(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion7);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertArrayEquals(new float[] {(-1252.37F), (-1252.37F), 2794.0F, (-1252.37F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion6.fromAngleAxis(1.0F, 3.1415827F, 0.37212518F, 0.7761897F);
      assertEquals(0.37212518F, quaternion0.z, 0.01F);
      assertEquals(1.506155F, quaternion0.x, 0.01F);
      assertEquals(0.17840631F, quaternion0.y, 0.01F);
      assertEquals(0.87758255F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(0.37212518F, quaternion6.z, 0.01F);
      assertEquals(0.87758255F, quaternion6.w, 0.01F);
      assertEquals(1.506155F, quaternion6.x, 0.01F);
      assertEquals(0.17840631F, quaternion6.y, 0.01F);
      assertEquals(1.506155F, quaternion8.x, 0.01F);
      assertEquals(0.37212518F, quaternion8.z, 0.01F);
      assertEquals(0.17840631F, quaternion8.y, 0.01F);
      assertEquals(0.87758255F, quaternion8.w, 0.01F);
      assertEquals((-6273721.5F), vector3_0.x, 0.01F);
      assertEquals(6273722.5F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(6273722.5F, vector3_1.y, 0.01F);
      assertEquals((-6273721.5F), vector3_1.x, 0.01F);
      assertEquals((-0.12928902F), quaternion1.x, 0.01F);
      assertEquals(0.101392865F, quaternion1.z, 0.01F);
      assertEquals(0.6087145F, quaternion1.y, 0.01F);
      assertEquals(0.7761897F, quaternion1.w, 0.01F);
      assertEquals(0.37212518F, quaternion2.z, 0.01F);
      assertEquals(1.506155F, quaternion2.x, 0.01F);
      assertEquals(0.87758255F, quaternion2.w, 0.01F);
      assertEquals(0.17840631F, quaternion2.y, 0.01F);
      assertEquals(0.17840631F, quaternion0.y(), 0.01F);
      assertEquals(0.87758255F, quaternion0.w(), 0.01F);
      assertEquals(1.506155F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.37212518F, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals(0.87758255F, quaternion6.w(), 0.01F);
      assertEquals(0.37212518F, quaternion6.z(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.17840631F, quaternion6.y(), 0.01F);
      assertEquals(1.506155F, quaternion6.x(), 0.01F);
      assertEquals(0.17840631F, quaternion8.y(), 0.01F);
      assertEquals(1.506155F, quaternion8.x(), 0.01F);
      assertEquals(0.37212518F, quaternion8.z(), 0.01F);
      assertEquals(0.87758255F, quaternion8.w(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals((-6273721.5F), vector3_0.x(), 0.01F);
      assertEquals(7.8719167E13F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(6273722.5F, vector3_0.y(), 0.01F);
      assertEquals((-6273721.5F), vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(7.8719167E13F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(6273722.5F, vector3_1.y(), 0.01F);
      assertEquals((-0.12928902F), quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.6087145F, quaternion1.y(), 0.01F);
      assertEquals(0.7761897F, quaternion1.w(), 0.01F);
      assertEquals(0.101392865F, quaternion1.z(), 0.01F);
      assertEquals(0.17840631F, quaternion2.y(), 0.01F);
      assertEquals(0.87758255F, quaternion2.w(), 0.01F);
      assertEquals(1.506155F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.37212518F, quaternion2.z(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion8);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion7);
      assertSame(quaternion6, quaternion8);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion3);
      assertSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion6);
      assertSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertArrayEquals(new float[] {(-1252.37F), (-1252.37F), 2794.0F, (-1252.37F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion8);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertNotSame(quaternion1, quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.multLocal(quaternion1);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.0E-5F, 1.0E-5F, (-680.57056F), 1.0E-5F);
      assertEquals((-680.57056F), quaternion0.z, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals(1.0E-5F, quaternion0.w, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertEquals((-680.57056F), quaternion0.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      
      Quaternion quaternion1 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = new Quaternion(quaternion1);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      
      Quaternion quaternion3 = quaternion0.slerp((IQuaternion) quaternion1, (-3.1415927F), quaternion2);
      assertEquals((-680.57056F), quaternion0.z, 0.01F);
      assertEquals(1.0E-5F, quaternion0.x, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y, 0.01F);
      assertEquals(1.0E-5F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.975377F, quaternion2.w, 0.01F);
      assertEquals((-150.0958F), quaternion2.z, 0.01F);
      assertEquals(2.2054405E-6F, quaternion2.y, 0.01F);
      assertEquals(2.2054405E-6F, quaternion2.x, 0.01F);
      assertEquals(0.975377F, quaternion3.w, 0.01F);
      assertEquals((-150.0958F), quaternion3.z, 0.01F);
      assertEquals(2.2054405E-6F, quaternion3.x, 0.01F);
      assertEquals(2.2054405E-6F, quaternion3.y, 0.01F);
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertEquals((-680.57056F), quaternion0.z(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-150.0958F), quaternion2.z(), 0.01F);
      assertEquals(2.2054405E-6F, quaternion2.y(), 0.01F);
      assertEquals(2.2054405E-6F, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.975377F, quaternion2.w(), 0.01F);
      assertEquals(0.975377F, quaternion3.w(), 0.01F);
      assertEquals(2.2054405E-6F, quaternion3.x(), 0.01F);
      assertEquals(2.2054405E-6F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-150.0958F), quaternion3.z(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      
      quaternion0.z = 2.2054405E-6F;
      assertEquals(1.0E-5F, quaternion0.y(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.x(), 0.01F);
      assertEquals(1.0E-5F, quaternion0.w(), 0.01F);
      assertEquals(2.2054405E-6F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      
      Quaternion quaternion4 = quaternion0.slerpLocal(quaternion1, 216.0F);
      assertEquals(9.999976E-6F, quaternion0.x, 0.01F);
      assertEquals(9.999976E-6F, quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals(2.2054353E-6F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(9.999976E-6F, quaternion4.x, 0.01F);
      assertEquals(9.999976E-6F, quaternion4.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w, 0.01F);
      assertEquals(2.2054353E-6F, quaternion4.z, 0.01F);
      assertEquals(2.2054353E-6F, quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals(9.999976E-6F, quaternion0.x(), 0.01F);
      assertEquals(9.999976E-6F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(9.999976E-6F, quaternion4.x(), 0.01F);
      assertEquals(9.999976E-6F, quaternion4.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w(), 0.01F);
      assertEquals(2.2054353E-6F, quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      
      Vector3 vector3_2 = quaternion4.transformUnitZ(vector3_1);
      assertEquals(9.999976E-6F, quaternion0.x, 0.01F);
      assertEquals(9.999976E-6F, quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals(2.2054353E-6F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(9.999976E-6F, quaternion4.x, 0.01F);
      assertEquals(9.999976E-6F, quaternion4.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w, 0.01F);
      assertEquals(2.2054353E-6F, quaternion4.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(4.285658E-8F, vector3_1.y, 0.01F);
      assertEquals((-4.2768367E-8F), vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(4.285658E-8F, vector3_2.y, 0.01F);
      assertEquals((-4.2768367E-8F), vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.z, 0.01F);
      assertEquals(2.2054353E-6F, quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals(9.999976E-6F, quaternion0.x(), 0.01F);
      assertEquals(9.999976E-6F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(9.999976E-6F, quaternion4.x(), 0.01F);
      assertEquals(9.999976E-6F, quaternion4.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w(), 0.01F);
      assertEquals(2.2054353E-6F, quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(4.285658E-8F, vector3_1.y(), 0.01F);
      assertEquals((-4.2768367E-8F), vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(4.285658E-8F, vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_2.z(), 0.01F);
      assertEquals((-4.2768367E-8F), vector3_2.x(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      
      Quaternion quaternion5 = quaternion0.invertLocal();
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z, 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.y, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-9.999976E-6F), quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-9.999976E-6F), quaternion5.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion2));
      
      Quaternion quaternion6 = quaternion5.mult((IQuaternion) quaternion3, quaternion2);
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-0.0015107129F), quaternion2.y, 0.01F);
      assertEquals(0.0014911959F, quaternion2.x, 0.01F);
      assertEquals(0.32129726F, quaternion2.z, 0.01F);
      assertEquals((-0.0024189467F), quaternion2.w, 0.01F);
      assertEquals((-0.0015107129F), quaternion3.y, 0.01F);
      assertEquals(0.32129726F, quaternion3.z, 0.01F);
      assertEquals((-0.0024189467F), quaternion3.w, 0.01F);
      assertEquals(0.0014911959F, quaternion3.x, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z, 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.y, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x, 0.01F);
      assertEquals(0.0014911959F, quaternion6.x, 0.01F);
      assertEquals(0.32129726F, quaternion6.z, 0.01F);
      assertEquals((-0.0015107129F), quaternion6.y, 0.01F);
      assertEquals((-0.0024189467F), quaternion6.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0014911959F, quaternion2.x(), 0.01F);
      assertEquals((-0.0015107129F), quaternion2.y(), 0.01F);
      assertEquals((-0.0024189467F), quaternion2.w(), 0.01F);
      assertEquals(0.32129726F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.0015107129F), quaternion3.y(), 0.01F);
      assertEquals(0.0014911959F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.32129726F, quaternion3.z(), 0.01F);
      assertEquals((-0.0024189467F), quaternion3.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-9.999976E-6F), quaternion5.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z(), 0.01F);
      assertEquals(0.0014911959F, quaternion6.x(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.0024189467F), quaternion6.w(), 0.01F);
      assertEquals(0.32129726F, quaternion6.z(), 0.01F);
      assertEquals((-0.0015107129F), quaternion6.y(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion1));
      
      Vector3 vector3_3 = vector3_1.addScaled((IVector3) vector3_2, 1295.452F, vector3_2);
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1296.452F, vector3_1.z, 0.01F);
      assertEquals((-5.5447133E-5F), vector3_1.x, 0.01F);
      assertEquals(5.55615E-5F, vector3_1.y, 0.01F);
      assertEquals(1296.452F, vector3_2.z, 0.01F);
      assertEquals(5.55615E-5F, vector3_2.y, 0.01F);
      assertEquals((-5.5447133E-5F), vector3_2.x, 0.01F);
      assertEquals((-5.5447133E-5F), vector3_3.x, 0.01F);
      assertEquals(5.55615E-5F, vector3_3.y, 0.01F);
      assertEquals(1296.452F, vector3_3.z, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(5.55615E-5F, vector3_1.y(), 0.01F);
      assertEquals(1680787.9F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1296.452F, vector3_1.z(), 0.01F);
      assertEquals((-5.5447133E-5F), vector3_1.x(), 0.01F);
      assertEquals(5.55615E-5F, vector3_2.y(), 0.01F);
      assertEquals(1296.452F, vector3_2.z(), 0.01F);
      assertEquals((-5.5447133E-5F), vector3_2.x(), 0.01F);
      assertEquals(1680787.9F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-5.5447133E-5F), vector3_3.x(), 0.01F);
      assertEquals(1296.452F, vector3_3.z(), 0.01F);
      assertEquals(5.55615E-5F, vector3_3.y(), 0.01F);
      assertEquals(1680787.9F, vector3_3.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      
      Vector3 vector3_4 = (Vector3)Vector3.UNIT_Z;
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      
      Vector3 vector3_5 = quaternion3.transform((IVector3) vector3_4);
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-0.0015107129F), quaternion2.y, 0.01F);
      assertEquals(0.0014911959F, quaternion2.x, 0.01F);
      assertEquals(0.32129726F, quaternion2.z, 0.01F);
      assertEquals((-0.0024189467F), quaternion2.w, 0.01F);
      assertEquals((-0.0015107129F), quaternion3.y, 0.01F);
      assertEquals(0.32129726F, quaternion3.z, 0.01F);
      assertEquals((-0.0024189467F), quaternion3.w, 0.01F);
      assertEquals(0.0014911959F, quaternion3.x, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(9.65543E-4F, vector3_5.x, 0.01F);
      assertEquals((-9.635616E-4F), vector3_5.y, 0.01F);
      assertEquals(0.999991F, vector3_5.z, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0014911959F, quaternion2.x(), 0.01F);
      assertEquals((-0.0015107129F), quaternion2.y(), 0.01F);
      assertEquals((-0.0024189467F), quaternion2.w(), 0.01F);
      assertEquals(0.32129726F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.0015107129F), quaternion3.y(), 0.01F);
      assertEquals(0.0014911959F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.32129726F, quaternion3.z(), 0.01F);
      assertEquals((-0.0024189467F), quaternion3.w(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.999991F, vector3_5.z(), 0.01F);
      assertEquals((-9.635616E-4F), vector3_5.y(), 0.01F);
      assertEquals(0.99998385F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(9.65543E-4F, vector3_5.x(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      
      quaternion5.hashCode();
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z, 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.y, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-9.999976E-6F), quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-9.999976E-6F), quaternion5.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion2));
      
      Quaternion quaternion7 = quaternion5.integrate((IVector3) vector3_2, 1.0E-5F, quaternion6);
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-0.007512208F), quaternion2.z, 0.01F);
      assertEquals((-0.0047015916F), quaternion2.y, 0.01F);
      assertEquals((-0.0046410295F), quaternion2.x, 0.01F);
      assertEquals((-0.99995F), quaternion2.w, 0.01F);
      assertEquals((-0.0047015916F), quaternion3.y, 0.01F);
      assertEquals((-0.007512208F), quaternion3.z, 0.01F);
      assertEquals((-0.0046410295F), quaternion3.x, 0.01F);
      assertEquals((-0.99995F), quaternion3.w, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1296.452F, vector3_1.z, 0.01F);
      assertEquals((-5.5447133E-5F), vector3_1.x, 0.01F);
      assertEquals(5.55615E-5F, vector3_1.y, 0.01F);
      assertEquals(1296.452F, vector3_2.z, 0.01F);
      assertEquals(5.55615E-5F, vector3_2.y, 0.01F);
      assertEquals((-5.5447133E-5F), vector3_2.x, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z, 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.y, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x, 0.01F);
      assertEquals((-0.0047015916F), quaternion6.y, 0.01F);
      assertEquals((-0.007512208F), quaternion6.z, 0.01F);
      assertEquals((-0.99995F), quaternion6.w, 0.01F);
      assertEquals((-0.0046410295F), quaternion6.x, 0.01F);
      assertEquals((-0.0047015916F), quaternion7.y, 0.01F);
      assertEquals((-0.007512208F), quaternion7.z, 0.01F);
      assertEquals((-0.0046410295F), quaternion7.x, 0.01F);
      assertEquals((-0.99995F), quaternion7.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-0.0047015916F), quaternion2.y(), 0.01F);
      assertEquals((-0.007512208F), quaternion2.z(), 0.01F);
      assertEquals((-0.99995F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.0046410295F), quaternion2.x(), 0.01F);
      assertEquals((-0.0046410295F), quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-0.99995F), quaternion3.w(), 0.01F);
      assertEquals((-0.007512208F), quaternion3.z(), 0.01F);
      assertEquals((-0.0047015916F), quaternion3.y(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(5.55615E-5F, vector3_1.y(), 0.01F);
      assertEquals(1680787.9F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1296.452F, vector3_1.z(), 0.01F);
      assertEquals((-5.5447133E-5F), vector3_1.x(), 0.01F);
      assertEquals(5.55615E-5F, vector3_2.y(), 0.01F);
      assertEquals(1296.452F, vector3_2.z(), 0.01F);
      assertEquals((-5.5447133E-5F), vector3_2.x(), 0.01F);
      assertEquals(1680787.9F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-9.999976E-6F), quaternion5.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z(), 0.01F);
      assertEquals((-0.007512208F), quaternion6.z(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.0047015916F), quaternion6.y(), 0.01F);
      assertEquals((-0.0046410295F), quaternion6.x(), 0.01F);
      assertEquals((-0.99995F), quaternion6.w(), 0.01F);
      assertEquals((-0.0047015916F), quaternion7.y(), 0.01F);
      assertEquals((-0.99995F), quaternion7.w(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-0.0046410295F), quaternion7.x(), 0.01F);
      assertEquals((-0.007512208F), quaternion7.z(), 0.01F);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion7);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion6, quaternion7);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      
      Quaternion quaternion8 = quaternion3.set(0.0F, 1296.452F, 0.0F, (-9.999976E-6F));
      assertEquals(0.0F, quaternion8.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion8.w, 0.01F);
      assertEquals(1296.452F, quaternion8.y, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1296.452F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals((-9.999976E-6F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion3.w, 0.01F);
      assertEquals(1296.452F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, quaternion8.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion8.w(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertEquals(1296.452F, quaternion8.y(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1296.452F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion3.w(), 0.01F);
      assertEquals(1296.452F, quaternion3.y(), 0.01F);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion0));
      
      Vector3 vector3_6 = quaternion8.transform((IVector3) vector3_1, vector3_1);
      assertEquals(0.0F, quaternion8.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion8.w, 0.01F);
      assertEquals(1296.452F, quaternion8.y, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals((-4.3581199E9F), vector3_6.z, 0.01F);
      assertEquals(5.55615E-5F, vector3_6.y, 0.01F);
      assertEquals(152.774F, vector3_6.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1296.452F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals((-9.999976E-6F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion3.w, 0.01F);
      assertEquals(1296.452F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(5.55615E-5F, vector3_1.y, 0.01F);
      assertEquals(152.774F, vector3_1.x, 0.01F);
      assertEquals((-4.3581199E9F), vector3_1.z, 0.01F);
      assertEquals(0.0F, quaternion8.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion8.w(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertEquals(1296.452F, quaternion8.y(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(152.774F, vector3_6.x(), 0.01F);
      assertEquals((-4.3581199E9F), vector3_6.z(), 0.01F);
      assertEquals(5.55615E-5F, vector3_6.y(), 0.01F);
      assertEquals(1.899321E19F, vector3_6.lengthSquared(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1296.452F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion3.w(), 0.01F);
      assertEquals(1296.452F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(5.55615E-5F, vector3_1.y(), 0.01F);
      assertEquals((-4.3581199E9F), vector3_1.z(), 0.01F);
      assertEquals(1.899321E19F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(152.774F, vector3_1.x(), 0.01F);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_4);
      assertSame(vector3_6, vector3_2);
      assertSame(vector3_6, vector3_1);
      assertSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      
      Quaternion quaternion9 = quaternion8.normalize(quaternion3);
      assertEquals(0.0F, quaternion8.x, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(1.0F, quaternion8.y, 0.01F);
      assertEquals((-7.713341E-9F), quaternion8.w, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion9.x, 0.01F);
      assertEquals(1.0F, quaternion9.y, 0.01F);
      assertEquals((-7.713341E-9F), quaternion9.w, 0.01F);
      assertEquals(0.0F, quaternion9.z, 0.01F);
      assertEquals((-7.713341E-9F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-7.713341E-9F), quaternion3.w, 0.01F);
      assertEquals(1.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1.0F, quaternion8.y(), 0.01F);
      assertEquals(0.0F, quaternion8.x(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertEquals((-7.713341E-9F), quaternion8.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion9.x(), 0.01F);
      assertEquals(1.0F, quaternion9.y(), 0.01F);
      assertEquals((-7.713341E-9F), quaternion9.w(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals(0.0F, quaternion9.z(), 0.01F);
      assertEquals((-7.713341E-9F), quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(1.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertEquals(1.0F, quaternion3.y(), 0.01F);
      assertEquals((-7.713341E-9F), quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion9);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion9, quaternion0);
      assertSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion4);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion0));
      
      Vector3 vector3_7 = quaternion4.transformUnitY(vector3_2);
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(4.285658E-8F, vector3_7.z, 0.01F);
      assertEquals(1.0F, vector3_7.y, 0.01F);
      assertEquals((-9.242038E-9F), vector3_7.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(4.285658E-8F, vector3_7.z(), 0.01F);
      assertEquals(1.0F, vector3_7.y(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_7.x(), 0.01F);
      assertEquals(1.0F, vector3_7.lengthSquared(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x(), 0.01F);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertSame(vector3_7, vector3_1);
      assertSame(vector3_7, vector3_6);
      assertSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_4);
      assertSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      
      Quaternion quaternion10 = quaternion8.multLocal(quaternion7);
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-1.0F), quaternion2.w, 0.01F);
      assertEquals((-1.5426682E-8F), quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-1.0F), quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals((-1.5426682E-8F), quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z, 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.y, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x, 0.01F);
      assertEquals((-1.0F), quaternion6.w, 0.01F);
      assertEquals((-1.5426682E-8F), quaternion6.y, 0.01F);
      assertEquals(0.0F, quaternion6.x, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals((-1.0F), quaternion7.w, 0.01F);
      assertEquals(0.0F, quaternion7.x, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals((-1.5426682E-8F), quaternion7.y, 0.01F);
      assertEquals(0.0F, quaternion8.x, 0.01F);
      assertEquals((-1.5426682E-8F), quaternion8.y, 0.01F);
      assertEquals((-1.0F), quaternion8.w, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(0.0F, quaternion10.x, 0.01F);
      assertEquals(0.0F, quaternion10.z, 0.01F);
      assertEquals((-1.5426682E-8F), quaternion10.y, 0.01F);
      assertEquals((-1.0F), quaternion10.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals((-1.5426682E-8F), quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.0F), quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals((-1.5426682E-8F), quaternion3.y(), 0.01F);
      assertEquals((-1.0F), quaternion3.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-9.999976E-6F), quaternion5.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-1.0F), quaternion6.w(), 0.01F);
      assertEquals(0.0F, quaternion6.x(), 0.01F);
      assertEquals((-1.5426682E-8F), quaternion6.y(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.0F, quaternion7.x(), 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertEquals((-1.5426682E-8F), quaternion7.y(), 0.01F);
      assertEquals((-1.0F), quaternion7.w(), 0.01F);
      assertEquals(0.0F, quaternion8.x(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertEquals((-1.0F), quaternion8.w(), 0.01F);
      assertEquals((-1.5426682E-8F), quaternion8.y(), 0.01F);
      assertEquals(0.0F, quaternion10.x(), 0.01F);
      assertEquals((-1.5426682E-8F), quaternion10.y(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.z(), 0.01F);
      assertEquals((-1.0F), quaternion10.w(), 0.01F);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion10);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion10);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion6, quaternion7);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion10);
      assertSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion10);
      assertSame(quaternion7, quaternion2);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion9);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion0);
      assertSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion0);
      assertSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion4);
      assertSame(quaternion10, quaternion7);
      assertSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion8);
      
      Quaternion quaternion11 = quaternion10.slerpLocal(quaternion9, (-1.5707964F));
      assertEquals((-9.999976E-6F), quaternion0.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-1.0000001F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-1.0000001F), quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x, 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y, 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z, 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.y, 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x, 0.01F);
      assertEquals(0.0F, quaternion6.x, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion6.y, 0.01F);
      assertEquals((-1.0000001F), quaternion6.w, 0.01F);
      assertEquals((-1.0000001F), quaternion7.w, 0.01F);
      assertEquals(0.0F, quaternion7.x, 0.01F);
      assertEquals(0.0F, quaternion7.z, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion7.y, 0.01F);
      assertEquals(0.0F, quaternion8.x, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion8.y, 0.01F);
      assertEquals((-1.0000001F), quaternion8.w, 0.01F);
      assertEquals(0.0F, quaternion8.z, 0.01F);
      assertEquals(0.0F, quaternion9.x, 0.01F);
      assertEquals(0.0F, quaternion9.z, 0.01F);
      assertEquals((-1.0000001F), quaternion9.w, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion9.y, 0.01F);
      assertEquals(0.0F, quaternion10.x, 0.01F);
      assertEquals(0.0F, quaternion10.z, 0.01F);
      assertEquals((-1.0000001F), quaternion10.w, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion10.y, 0.01F);
      assertEquals((-1.0000001F), quaternion11.w, 0.01F);
      assertEquals(0.0F, quaternion11.z, 0.01F);
      assertEquals(0.0F, quaternion11.x, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion11.y, 0.01F);
      assertEquals((-2.2054353E-6F), quaternion0.z(), 0.01F);
      assertEquals((-0.0021406289F), quaternion0.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.0000001F), quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion3.y(), 0.01F);
      assertEquals((-1.0000001F), quaternion3.w(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion4.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion4.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x(), 0.01F);
      assertEquals((-9.999976E-6F), quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-9.999976E-6F), quaternion5.y(), 0.01F);
      assertEquals((-0.0021406289F), quaternion5.w(), 0.01F);
      assertEquals((-2.2054353E-6F), quaternion5.z(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-1.0000001F), quaternion6.w(), 0.01F);
      assertEquals(0.0F, quaternion6.x(), 0.01F);
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion6.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.0F, quaternion7.x(), 0.01F);
      assertEquals(0.0F, quaternion7.z(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion7.y(), 0.01F);
      assertEquals((-1.0000001F), quaternion7.w(), 0.01F);
      assertEquals(0.0F, quaternion8.x(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.0F, quaternion8.z(), 0.01F);
      assertEquals((-1.0000001F), quaternion8.w(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion8.y(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion9.y(), 0.01F);
      assertEquals((-1.0000001F), quaternion9.w(), 0.01F);
      assertEquals(0.0F, quaternion9.x(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals(0.0F, quaternion9.z(), 0.01F);
      assertEquals(0.0F, quaternion10.x(), 0.01F);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.0F, quaternion10.z(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion10.y(), 0.01F);
      assertEquals((-1.0000001F), quaternion10.w(), 0.01F);
      assertEquals((-1.0000001F), quaternion11.w(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion11.y(), 0.01F);
      assertEquals(0.0F, quaternion11.x(), 0.01F);
      assertFalse(quaternion11.hasNaN());
      assertEquals(0.0F, quaternion11.z(), 0.01F);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion11);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion10);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion10);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion11);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion6, quaternion7);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion10);
      assertSame(quaternion6, quaternion11);
      assertSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion7, quaternion11);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion10);
      assertSame(quaternion7, quaternion2);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion11);
      assertNotSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion9);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertSame(quaternion8, quaternion10);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion9, quaternion0);
      assertSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion10);
      assertSame(quaternion9, quaternion11);
      assertSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion4);
      assertSame(quaternion9, quaternion8);
      assertSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion0);
      assertSame(quaternion10, quaternion11);
      assertSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion4);
      assertSame(quaternion10, quaternion7);
      assertSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion8);
      assertSame(quaternion11, quaternion7);
      assertSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion1);
      assertSame(quaternion11, quaternion3);
      assertSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion4);
      assertSame(quaternion11, quaternion2);
      assertSame(quaternion11, quaternion6);
      assertSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion5);
      
      Quaternion quaternion12 = quaternion5.fromVectors(vector3_2, vector3_5);
      assertEquals((-6.830767E-4F), quaternion0.z, 0.01F);
      assertEquals(0.70676607F, quaternion0.w, 0.01F);
      assertEquals(0.70744705F, quaternion0.x, 0.01F);
      assertEquals(6.5675274E-9F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-1.0000001F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals((-1.0000001F), quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals((-1.5426684E-8F), quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(0.70676607F, quaternion4.w, 0.01F);
      assertEquals(6.5675274E-9F, quaternion4.y, 0.01F);
      assertEquals(0.70744705F, quaternion4.x, 0.01F);
      assertEquals((-6.830767E-4F), quaternion4.z, 0.01F);
      assertEquals(6.5675274E-9F, quaternion12.y, 0.01F);
      assertEquals(0.70676607F, quaternion12.w, 0.01F);
      assertEquals((-6.830767E-4F), quaternion12.z, 0.01F);
      assertEquals(0.70744705F, quaternion12.x, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z, 0.01F);
      assertEquals(0.70744705F, quaternion5.x, 0.01F);
      assertEquals(6.5675274E-9F, quaternion5.y, 0.01F);
      assertEquals((-6.830767E-4F), quaternion5.z, 0.01F);
      assertEquals(0.70676607F, quaternion5.w, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(9.65543E-4F, vector3_5.x, 0.01F);
      assertEquals((-9.635616E-4F), vector3_5.y, 0.01F);
      assertEquals(0.999991F, vector3_5.z, 0.01F);
      assertEquals(6.5675274E-9F, quaternion0.y(), 0.01F);
      assertEquals(0.70744705F, quaternion0.x(), 0.01F);
      assertEquals((-6.830767E-4F), quaternion0.z(), 0.01F);
      assertEquals(0.70676607F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.0000001F), quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals((-1.5426684E-8F), quaternion3.y(), 0.01F);
      assertEquals((-1.0000001F), quaternion3.w(), 0.01F);
      assertEquals(0.70676607F, quaternion4.w(), 0.01F);
      assertEquals((-6.830767E-4F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(6.5675274E-9F, quaternion4.y(), 0.01F);
      assertEquals(0.70744705F, quaternion4.x(), 0.01F);
      assertEquals(0.70676607F, quaternion12.w(), 0.01F);
      assertEquals(6.5675274E-9F, quaternion12.y(), 0.01F);
      assertEquals(0.70744705F, quaternion12.x(), 0.01F);
      assertEquals((-6.830767E-4F), quaternion12.z(), 0.01F);
      assertFalse(quaternion12.hasNaN());
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x(), 0.01F);
      assertEquals(0.70676607F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(6.5675274E-9F, quaternion5.y(), 0.01F);
      assertEquals((-6.830767E-4F), quaternion5.z(), 0.01F);
      assertEquals(0.70744705F, quaternion5.x(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.999991F, vector3_5.z(), 0.01F);
      assertEquals((-9.635616E-4F), vector3_5.y(), 0.01F);
      assertEquals(0.99998385F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(9.65543E-4F, vector3_5.x(), 0.01F);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion11);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion12);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion12);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion11);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion10);
      assertSame(quaternion4, quaternion12);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion12, quaternion6);
      assertNotSame(quaternion12, quaternion1);
      assertSame(quaternion12, quaternion5);
      assertNotSame(quaternion12, quaternion8);
      assertNotSame(quaternion12, quaternion11);
      assertNotSame(quaternion12, quaternion3);
      assertNotSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion9);
      assertSame(quaternion12, quaternion4);
      assertNotSame(quaternion12, quaternion7);
      assertSame(quaternion12, quaternion0);
      assertNotSame(quaternion12, quaternion2);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion10);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion11);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion12);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_6);
      
      Vector3 vector3_8 = new Vector3(3.1415927F, (-325.125F), (-2775.86F));
      assertEquals((-325.125F), vector3_8.y, 0.01F);
      assertEquals(3.1415927F, vector3_8.x, 0.01F);
      assertEquals((-2775.86F), vector3_8.z, 0.01F);
      assertEquals((-325.125F), vector3_8.y(), 0.01F);
      assertEquals(7811115.5F, vector3_8.lengthSquared(), 0.01F);
      assertEquals(3.1415927F, vector3_8.x(), 0.01F);
      assertEquals((-2775.86F), vector3_8.z(), 0.01F);
      
      Vector3 vector3_9 = quaternion4.toAngles(vector3_8);
      assertEquals((-6.830767E-4F), quaternion0.z, 0.01F);
      assertEquals(0.70676607F, quaternion0.w, 0.01F);
      assertEquals(0.70744705F, quaternion0.x, 0.01F);
      assertEquals(6.5675274E-9F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.70676607F, quaternion4.w, 0.01F);
      assertEquals(6.5675274E-9F, quaternion4.y, 0.01F);
      assertEquals(0.70744705F, quaternion4.x, 0.01F);
      assertEquals((-6.830767E-4F), quaternion4.z, 0.01F);
      assertEquals(9.664906E-4F, vector3_8.y, 0.01F);
      assertEquals((-9.6554216E-4F), vector3_8.z, 0.01F);
      assertEquals(1.571759F, vector3_8.x, 0.01F);
      assertEquals((-9.6554216E-4F), vector3_9.z, 0.01F);
      assertEquals(1.571759F, vector3_9.x, 0.01F);
      assertEquals(9.664906E-4F, vector3_9.y, 0.01F);
      assertEquals(6.5675274E-9F, quaternion0.y(), 0.01F);
      assertEquals(0.70744705F, quaternion0.x(), 0.01F);
      assertEquals((-6.830767E-4F), quaternion0.z(), 0.01F);
      assertEquals(0.70676607F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.70676607F, quaternion4.w(), 0.01F);
      assertEquals((-6.830767E-4F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(6.5675274E-9F, quaternion4.y(), 0.01F);
      assertEquals(0.70744705F, quaternion4.x(), 0.01F);
      assertEquals(1.571759F, vector3_8.x(), 0.01F);
      assertEquals(9.664906E-4F, vector3_8.y(), 0.01F);
      assertEquals(2.4704282F, vector3_8.lengthSquared(), 0.01F);
      assertEquals((-9.6554216E-4F), vector3_8.z(), 0.01F);
      assertEquals(1.571759F, vector3_9.x(), 0.01F);
      assertEquals(9.664906E-4F, vector3_9.y(), 0.01F);
      assertEquals(2.4704282F, vector3_9.lengthSquared(), 0.01F);
      assertEquals((-9.6554216E-4F), vector3_9.z(), 0.01F);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion11);
      assertSame(quaternion4, quaternion12);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(vector3_8, vector3_5);
      assertSame(vector3_8, vector3_9);
      assertNotSame(vector3_8, vector3_6);
      assertNotSame(vector3_8, vector3_0);
      assertNotSame(vector3_8, vector3_4);
      assertNotSame(vector3_8, vector3_1);
      assertNotSame(vector3_8, vector3_2);
      assertNotSame(vector3_8, vector3_3);
      assertNotSame(vector3_8, vector3_7);
      assertNotSame(vector3_9, vector3_5);
      assertNotSame(vector3_9, vector3_1);
      assertNotSame(vector3_9, vector3_7);
      assertNotSame(vector3_9, vector3_6);
      assertSame(vector3_9, vector3_8);
      assertNotSame(vector3_9, vector3_2);
      assertNotSame(vector3_9, vector3_3);
      assertNotSame(vector3_9, vector3_0);
      assertNotSame(vector3_9, vector3_4);
      
      Quaternion quaternion13 = quaternion7.fromAngleAxis((-323.0F), (IVector3) vector3_1);
      assertEquals((-6.830767E-4F), quaternion0.z, 0.01F);
      assertEquals(0.70676607F, quaternion0.w, 0.01F);
      assertEquals(0.70744705F, quaternion0.x, 0.01F);
      assertEquals(6.5675274E-9F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-0.28788888F), quaternion2.w, 0.01F);
      assertEquals((-8.8507655E-9F), quaternion2.x, 0.01F);
      assertEquals(4.10422E-8F, quaternion2.z, 0.01F);
      assertEquals(0.95766383F, quaternion2.y, 0.01F);
      assertEquals(4.10422E-8F, quaternion3.z, 0.01F);
      assertEquals(0.95766383F, quaternion3.y, 0.01F);
      assertEquals((-8.8507655E-9F), quaternion3.x, 0.01F);
      assertEquals((-0.28788888F), quaternion3.w, 0.01F);
      assertEquals(0.70676607F, quaternion4.w, 0.01F);
      assertEquals(6.5675274E-9F, quaternion4.y, 0.01F);
      assertEquals(0.70744705F, quaternion4.x, 0.01F);
      assertEquals((-6.830767E-4F), quaternion4.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z, 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z, 0.01F);
      assertEquals(0.95766383F, quaternion13.y, 0.01F);
      assertEquals((-0.28788888F), quaternion13.w, 0.01F);
      assertEquals((-8.8507655E-9F), quaternion13.x, 0.01F);
      assertEquals(4.10422E-8F, quaternion13.z, 0.01F);
      assertEquals(0.70744705F, quaternion5.x, 0.01F);
      assertEquals(6.5675274E-9F, quaternion5.y, 0.01F);
      assertEquals((-6.830767E-4F), quaternion5.z, 0.01F);
      assertEquals(0.70676607F, quaternion5.w, 0.01F);
      assertEquals(4.10422E-8F, quaternion6.z, 0.01F);
      assertEquals(0.95766383F, quaternion6.y, 0.01F);
      assertEquals((-8.8507655E-9F), quaternion6.x, 0.01F);
      assertEquals((-0.28788888F), quaternion6.w, 0.01F);
      assertEquals(4.10422E-8F, quaternion7.z, 0.01F);
      assertEquals((-8.8507655E-9F), quaternion7.x, 0.01F);
      assertEquals((-0.28788888F), quaternion7.w, 0.01F);
      assertEquals(0.95766383F, quaternion7.y, 0.01F);
      assertEquals(6.5675274E-9F, quaternion0.y(), 0.01F);
      assertEquals(0.70744705F, quaternion0.x(), 0.01F);
      assertEquals((-6.830767E-4F), quaternion0.z(), 0.01F);
      assertEquals(0.70676607F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.95766383F, quaternion2.y(), 0.01F);
      assertEquals(4.10422E-8F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-8.8507655E-9F), quaternion2.x(), 0.01F);
      assertEquals((-0.28788888F), quaternion2.w(), 0.01F);
      assertEquals(4.10422E-8F, quaternion3.z(), 0.01F);
      assertEquals(0.95766383F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-0.28788888F), quaternion3.w(), 0.01F);
      assertEquals((-8.8507655E-9F), quaternion3.x(), 0.01F);
      assertEquals(0.70676607F, quaternion4.w(), 0.01F);
      assertEquals((-6.830767E-4F), quaternion4.z(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(6.5675274E-9F, quaternion4.y(), 0.01F);
      assertEquals(0.70744705F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(4.285658E-8F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(4.285658E-8F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals((-9.242038E-9F), vector3_2.x(), 0.01F);
      assertEquals((-0.28788888F), quaternion13.w(), 0.01F);
      assertEquals((-8.8507655E-9F), quaternion13.x(), 0.01F);
      assertEquals(0.95766383F, quaternion13.y(), 0.01F);
      assertEquals(4.10422E-8F, quaternion13.z(), 0.01F);
      assertFalse(quaternion13.hasNaN());
      assertEquals(0.70676607F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(6.5675274E-9F, quaternion5.y(), 0.01F);
      assertEquals((-6.830767E-4F), quaternion5.z(), 0.01F);
      assertEquals(0.70744705F, quaternion5.x(), 0.01F);
      assertEquals(4.10422E-8F, quaternion6.z(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-8.8507655E-9F), quaternion6.x(), 0.01F);
      assertEquals((-0.28788888F), quaternion6.w(), 0.01F);
      assertEquals(0.95766383F, quaternion6.y(), 0.01F);
      assertEquals(4.10422E-8F, quaternion7.z(), 0.01F);
      assertEquals(0.95766383F, quaternion7.y(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-0.28788888F), quaternion7.w(), 0.01F);
      assertEquals((-8.8507655E-9F), quaternion7.x(), 0.01F);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion13);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion11);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion12);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion11);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion10);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion13);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion12);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_8);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_9);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion13, quaternion6);
      assertNotSame(quaternion13, quaternion0);
      assertNotSame(quaternion13, quaternion5);
      assertSame(quaternion13, quaternion8);
      assertSame(quaternion13, quaternion2);
      assertNotSame(quaternion13, quaternion4);
      assertSame(quaternion13, quaternion3);
      assertSame(quaternion13, quaternion10);
      assertNotSame(quaternion13, quaternion12);
      assertSame(quaternion13, quaternion7);
      assertSame(quaternion13, quaternion9);
      assertNotSame(quaternion13, quaternion1);
      assertSame(quaternion13, quaternion11);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion8);
      assertSame(quaternion5, quaternion12);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion10);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion11);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion13);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion10);
      assertNotSame(quaternion6, quaternion12);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion13);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion9);
      assertSame(quaternion6, quaternion7);
      assertSame(quaternion6, quaternion11);
      assertSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion12);
      assertSame(quaternion7, quaternion13);
      assertNotSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion10);
      assertSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion11);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      float float0 = quaternion0.transformZ(vector3_0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, (-1161.0961F), 0.0F);
      assertEquals((-1161.0961F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-1161.0961F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      boolean boolean0 = quaternion0.equals(quaternion1);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals((-1161.0961F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals((-1161.0961F), quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(boolean0);
      
      Quaternion quaternion2 = new Quaternion((-3381.2444F), 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals((-3381.2444F), quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.w(), 0.01F);
      assertEquals((-3381.2444F), quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      Vector3 vector3_1 = new Vector3();
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion2.transformScaleAndAdd(vector3_0, 1.5707964F, vector3_1, vector3_1);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals((-3381.2444F), quaternion2.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion2.w(), 0.01F);
      assertEquals((-3381.2444F), quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertNotNull(vector3_2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.integrateLocal(vector3_0, 0.0F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1252.37F);
      floatArray0[2] = 2032.0024F;
      floatArray0[3] = 3622.04F;
      floatArray0[4] = 767.7515F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion0);
      
      float float0 = quaternion0.getRotationZ();
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(2.2295518F, float0, 0.01F);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1252.37F), quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(3622.04F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertEquals((-1252.37F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3622.04F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2032.0024F, quaternion1.z(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.multLocal(quaternion0);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals((-9072269.0F), quaternion2.y, 0.01F);
      assertEquals(7421709.0F, quaternion2.w, 0.01F);
      assertEquals(1.4719988E7F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertEquals(1.4719988E7F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals((-9072269.0F), quaternion2.y(), 0.01F);
      assertEquals(7421709.0F, quaternion2.w(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion0.mult((IQuaternion) quaternion1);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-9072269.0F), quaternion1.y, 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(7421709.0F, quaternion1.w, 0.01F);
      assertEquals(6.8397318E10F, quaternion3.z, 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w, 0.01F);
      assertEquals(2048.0F, quaternion3.x, 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1.4719988E7F, quaternion1.z(), 0.01F);
      assertEquals(7421709.0F, quaternion1.w(), 0.01F);
      assertEquals((-9072269.0F), quaternion1.y(), 0.01F);
      assertEquals((-4.2154848E10F), quaternion3.y(), 0.01F);
      assertEquals(6.8397318E10F, quaternion3.z(), 0.01F);
      assertEquals((-1.43911629E10F), quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(2048.0F, quaternion3.x(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.set(0.0F, (-3555.261F), 0.0F, 0.0F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals((-3555.261F), quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals((-3555.261F), quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-3555.261F), quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals((-3555.261F), quaternion4.y(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion4);
      
      quaternion4.y = 0.0F;
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(0.0F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      
      quaternion4.w = 2032.0024F;
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(2032.0024F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      
      String string0 = quaternion4.toString();
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion4.y, 0.01F);
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(0.0F, quaternion4.x, 0.01F);
      assertEquals(2032.0024F, quaternion4.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals(2032.0024F, quaternion4.w(), 0.01F);
      assertEquals(0.0F, quaternion4.x(), 0.01F);
      assertEquals(0.0F, quaternion4.y(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("[0.0, 0.0, 0.0, 2032.0024]", string0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion2.transform((IVector3) vector3_0);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(3622.04F, quaternion0.w, 0.01F);
      assertEquals((-1252.37F), quaternion0.y, 0.01F);
      assertEquals(2032.0024F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(2032.0024F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(2032.0024F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1252.37F), quaternion0.y(), 0.01F);
      assertEquals(3622.04F, quaternion0.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(2032.0024F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_1);
      
      Quaternion quaternion5 = quaternion0.integrateLocal(vector3_1, 8851.522F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.8349919F, quaternion5.w, 0.01F);
      assertEquals((-0.28870988F), quaternion5.y, 0.01F);
      assertEquals(0.4684392F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals(0.4684392F, quaternion0.z, 0.01F);
      assertEquals((-0.28870988F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(2032.0024F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.8349919F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertEquals((-0.28870988F), quaternion5.y(), 0.01F);
      assertEquals(0.4684392F, quaternion5.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-0.28870988F), quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.4684392F, quaternion0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(2032.0024F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion5.invert(quaternion3);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.8349919F, quaternion5.w, 0.01F);
      assertEquals((-0.28870988F), quaternion5.y, 0.01F);
      assertEquals(0.4684392F, quaternion5.z, 0.01F);
      assertEquals(0.0F, quaternion5.x, 0.01F);
      assertEquals(0.8349919F, quaternion6.w, 0.01F);
      assertEquals(0.28870988F, quaternion6.y, 0.01F);
      assertEquals(-0.0F, quaternion6.x, 0.01F);
      assertEquals((-0.4684392F), quaternion6.z, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals(0.4684392F, quaternion0.z, 0.01F);
      assertEquals((-0.28870988F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(2032.0024F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.28870988F, quaternion3.y, 0.01F);
      assertEquals((-0.4684392F), quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.x, 0.01F);
      assertEquals(0.8349919F, quaternion3.w, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.8349919F, quaternion5.w(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0F, quaternion5.x(), 0.01F);
      assertEquals((-0.28870988F), quaternion5.y(), 0.01F);
      assertEquals(0.4684392F, quaternion5.z(), 0.01F);
      assertEquals((-0.4684392F), quaternion6.z(), 0.01F);
      assertEquals(0.28870988F, quaternion6.y(), 0.01F);
      assertEquals(-0.0F, quaternion6.x(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.8349919F, quaternion6.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-0.28870988F), quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.4684392F, quaternion0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(2032.0024F, quaternion2.w(), 0.01F);
      assertEquals(0.8349919F, quaternion3.w(), 0.01F);
      assertEquals((-0.4684392F), quaternion3.z(), 0.01F);
      assertEquals(0.28870988F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(-0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion0.invertLocal();
      assertEquals(0.8349919F, quaternion7.w, 0.01F);
      assertEquals(0.28870988F, quaternion7.y, 0.01F);
      assertEquals(-0.0F, quaternion7.x, 0.01F);
      assertEquals((-0.4684392F), quaternion7.z, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals((-0.4684392F), quaternion0.z, 0.01F);
      assertEquals(0.28870988F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals((-0.4684392F), quaternion7.z(), 0.01F);
      assertEquals(0.28870988F, quaternion7.y(), 0.01F);
      assertEquals(-0.0F, quaternion7.x(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.8349919F, quaternion7.w(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.28870988F, quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.4684392F), quaternion0.z(), 0.01F);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion2.invert();
      assertEquals(-0.0F, quaternion8.y, 0.01F);
      assertEquals(2032.0024F, quaternion8.w, 0.01F);
      assertEquals(-0.0F, quaternion8.z, 0.01F);
      assertEquals(-0.0F, quaternion8.x, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals((-0.4684392F), quaternion0.z, 0.01F);
      assertEquals(0.28870988F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(2032.0024F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion8.z(), 0.01F);
      assertEquals(-0.0F, quaternion8.x(), 0.01F);
      assertEquals(-0.0F, quaternion8.y(), 0.01F);
      assertFalse(quaternion8.hasNaN());
      assertEquals(2032.0024F, quaternion8.w(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.28870988F, quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.4684392F), quaternion0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(2032.0024F, quaternion2.w(), 0.01F);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertTrue(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertTrue(quaternion8.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion8);
      
      Quaternion quaternion9 = quaternion7.set((IQuaternion) quaternion3);
      assertEquals(0.8349919F, quaternion7.w, 0.01F);
      assertEquals(0.28870988F, quaternion7.y, 0.01F);
      assertEquals(-0.0F, quaternion7.x, 0.01F);
      assertEquals((-0.4684392F), quaternion7.z, 0.01F);
      assertEquals(0.28870988F, quaternion9.y, 0.01F);
      assertEquals((-0.4684392F), quaternion9.z, 0.01F);
      assertEquals(-0.0F, quaternion9.x, 0.01F);
      assertEquals(0.8349919F, quaternion9.w, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals((-0.4684392F), quaternion0.z, 0.01F);
      assertEquals(0.28870988F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(2032.0024F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.28870988F, quaternion3.y, 0.01F);
      assertEquals((-0.4684392F), quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.x, 0.01F);
      assertEquals(0.8349919F, quaternion3.w, 0.01F);
      assertEquals((-0.4684392F), quaternion7.z(), 0.01F);
      assertEquals(0.28870988F, quaternion7.y(), 0.01F);
      assertEquals(-0.0F, quaternion7.x(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.8349919F, quaternion7.w(), 0.01F);
      assertEquals((-0.4684392F), quaternion9.z(), 0.01F);
      assertEquals(0.28870988F, quaternion9.y(), 0.01F);
      assertEquals(0.8349919F, quaternion9.w(), 0.01F);
      assertEquals(-0.0F, quaternion9.x(), 0.01F);
      assertFalse(quaternion9.hasNaN());
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.28870988F, quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.4684392F), quaternion0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(2032.0024F, quaternion1.w(), 0.01F);
      assertEquals(0.8349919F, quaternion3.w(), 0.01F);
      assertEquals((-0.4684392F), quaternion3.z(), 0.01F);
      assertEquals(0.28870988F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(-0.0F, quaternion3.x(), 0.01F);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion9);
      assertSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion9, quaternion4);
      assertSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion8);
      assertSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertTrue(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertTrue(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertTrue(quaternion3.equals((Object)quaternion5));
      assertTrue(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion9);
      
      Quaternion quaternion10 = quaternion2.fromVectors(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, quaternion10.z, 0.01F);
      assertEquals(Float.NaN, quaternion10.y, 0.01F);
      assertEquals(Float.NaN, quaternion10.x, 0.01F);
      assertEquals((-4.371139E-8F), quaternion10.w, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals((-0.4684392F), quaternion0.z, 0.01F);
      assertEquals(0.28870988F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion10.z(), 0.01F);
      assertEquals(Float.NaN, quaternion10.y(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion10.w(), 0.01F);
      assertTrue(quaternion10.hasNaN());
      assertEquals(Float.NaN, quaternion10.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.28870988F, quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.4684392F), quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion10);
      
      Vector3 vector3_2 = quaternion2.transformAndAdd(vector3_0, vector3_1, vector3_1);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals((-0.4684392F), quaternion0.z, 0.01F);
      assertEquals(0.28870988F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.28870988F, quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.4684392F), quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_2);
      
      float float1 = quaternion10.z();
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, quaternion10.z, 0.01F);
      assertEquals(Float.NaN, quaternion10.y, 0.01F);
      assertEquals(Float.NaN, quaternion10.x, 0.01F);
      assertEquals((-4.371139E-8F), quaternion10.w, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals((-0.4684392F), quaternion0.z, 0.01F);
      assertEquals(0.28870988F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion10.z(), 0.01F);
      assertEquals(Float.NaN, quaternion10.y(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion10.w(), 0.01F);
      assertTrue(quaternion10.hasNaN());
      assertEquals(Float.NaN, quaternion10.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.28870988F, quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.4684392F), quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertEquals(5, floatArray0.length);
      assertEquals(Float.NaN, float1, 0.01F);
      
      float float2 = quaternion7.transformZ(vector3_1);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(0.8349919F, quaternion7.w, 0.01F);
      assertEquals(0.28870988F, quaternion7.y, 0.01F);
      assertEquals(-0.0F, quaternion7.x, 0.01F);
      assertEquals((-0.4684392F), quaternion7.z, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals((-0.4684392F), quaternion0.z, 0.01F);
      assertEquals(0.28870988F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals((-0.4684392F), quaternion7.z(), 0.01F);
      assertEquals(0.28870988F, quaternion7.y(), 0.01F);
      assertEquals(-0.0F, quaternion7.x(), 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.8349919F, quaternion7.w(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.28870988F, quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.4684392F), quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion9);
      assertSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion7.equals((Object)quaternion8));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertEquals(5, floatArray0.length);
      assertEquals(Float.NaN, float2, 0.01F);
      
      Vector3 vector3_3 = quaternion3.transform((IVector3) vector3_2);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals((-0.4684392F), quaternion0.z, 0.01F);
      assertEquals(0.28870988F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, vector3_3.z, 0.01F);
      assertEquals(Float.NaN, vector3_3.x, 0.01F);
      assertEquals(Float.NaN, vector3_3.y, 0.01F);
      assertEquals(0.28870988F, quaternion3.y, 0.01F);
      assertEquals((-0.4684392F), quaternion3.z, 0.01F);
      assertEquals(-0.0F, quaternion3.x, 0.01F);
      assertEquals(0.8349919F, quaternion3.w, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.28870988F, quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.4684392F), quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion2.w(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, vector3_3.y(), 0.01F);
      assertEquals(Float.NaN, vector3_3.z(), 0.01F);
      assertEquals(Float.NaN, vector3_3.x(), 0.01F);
      assertEquals(Float.NaN, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.8349919F, quaternion3.w(), 0.01F);
      assertEquals((-0.4684392F), quaternion3.z(), 0.01F);
      assertEquals(0.28870988F, quaternion3.y(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(-0.0F, quaternion3.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_1);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertTrue(quaternion3.equals((Object)quaternion5));
      assertTrue(quaternion3.equals((Object)quaternion9));
      assertTrue(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_3);
      
      Quaternion quaternion11 = new Quaternion(Float.NaN, 3.1415827F, (-2105.9F), 2.2295518F);
      assertEquals(3.1415827F, quaternion11.y, 0.01F);
      assertEquals(2.2295518F, quaternion11.w, 0.01F);
      assertEquals(Float.NaN, quaternion11.x, 0.01F);
      assertEquals((-2105.9F), quaternion11.z, 0.01F);
      assertEquals(2.2295518F, quaternion11.w(), 0.01F);
      assertEquals((-2105.9F), quaternion11.z(), 0.01F);
      assertTrue(quaternion11.hasNaN());
      assertEquals(3.1415827F, quaternion11.y(), 0.01F);
      assertEquals(Float.NaN, quaternion11.x(), 0.01F);
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertNotNull(quaternion11);
      
      Quaternion quaternion12 = quaternion1.mult((IQuaternion) quaternion11, quaternion2);
      assertEquals(0.8349919F, quaternion0.w, 0.01F);
      assertEquals((-0.4684392F), quaternion0.z, 0.01F);
      assertEquals(0.28870988F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(3.1415827F, quaternion11.y, 0.01F);
      assertEquals(2.2295518F, quaternion11.w, 0.01F);
      assertEquals(Float.NaN, quaternion11.x, 0.01F);
      assertEquals((-2105.9F), quaternion11.z, 0.01F);
      assertEquals(Float.NaN, quaternion12.z, 0.01F);
      assertEquals(Float.NaN, quaternion12.x, 0.01F);
      assertEquals(Float.NaN, quaternion12.y, 0.01F);
      assertEquals(Float.NaN, quaternion12.w, 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.28870988F, quaternion0.y(), 0.01F);
      assertEquals(0.8349919F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.4684392F), quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertEquals(2.2295518F, quaternion11.w(), 0.01F);
      assertEquals((-2105.9F), quaternion11.z(), 0.01F);
      assertTrue(quaternion11.hasNaN());
      assertEquals(3.1415827F, quaternion11.y(), 0.01F);
      assertEquals(Float.NaN, quaternion11.x(), 0.01F);
      assertEquals(Float.NaN, quaternion12.w(), 0.01F);
      assertTrue(quaternion12.hasNaN());
      assertEquals(Float.NaN, quaternion12.y(), 0.01F);
      assertEquals(Float.NaN, quaternion12.z(), 0.01F);
      assertEquals(Float.NaN, quaternion12.x(), 0.01F);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion12);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion5);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion12);
      assertNotSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion4);
      assertNotSame(quaternion12, quaternion3);
      assertNotSame(quaternion12, quaternion11);
      assertNotSame(quaternion12, quaternion5);
      assertSame(quaternion12, quaternion1);
      assertSame(quaternion12, quaternion2);
      assertNotSame(quaternion12, quaternion6);
      assertNotSame(quaternion12, quaternion0);
      assertSame(quaternion12, quaternion4);
      assertNotSame(quaternion12, quaternion8);
      assertNotSame(quaternion12, quaternion9);
      assertSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion7);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 3622.04F, 767.7515F}, floatArray0, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion0));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion12);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0F, 1683.71F, 1.0F, (-0.99999F));
      assertEquals((-0.99999F), quaternion0.w, 0.01F);
      assertEquals(1683.71F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.z, 0.01F);
      assertEquals(1683.71F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-0.99999F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      boolean boolean0 = quaternion0.equals((Object) null);
      assertEquals((-0.99999F), quaternion0.w, 0.01F);
      assertEquals(1683.71F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.z, 0.01F);
      assertEquals(1683.71F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-0.99999F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.z(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromVectors(vector3_0, vector3_0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals((-4.371139E-8F), quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals((-4.371139E-8F), quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals((-4.371139E-8F), quaternion1.w(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformUnitZ(vector3_0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAngleAxis(516.8F, (IVector3) vector3_0);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = new Quaternion(quaternion1);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(0.704274F, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(0.704274F, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion1.equals(quaternion2);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(0.704274F, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(0.704274F, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.704274F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 0.704274F;
      floatArray0[3] = 516.8F;
      floatArray0[4] = Float.NaN;
      Vector3 vector3_1 = new Vector3(floatArray0);
      assertEquals(0.704274F, vector3_1.x, 0.01F);
      assertEquals(0.704274F, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(0.704274F, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.704274F, vector3_1.z(), 0.01F);
      assertArrayEquals(new float[] {0.704274F, Float.NaN, 0.704274F, 516.8F, Float.NaN}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion1.transformUnitZ(vector3_1);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(0.704274F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(0.704274F, quaternion0.w(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(0.704274F, quaternion1.w(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(Float.NaN, quaternion1.z(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertArrayEquals(new float[] {0.704274F, Float.NaN, 0.704274F, 516.8F, Float.NaN}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = new Quaternion();
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion0.equals(quaternion2);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      Quaternion quaternion3 = new Quaternion(quaternion2);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertNotNull(quaternion3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      quaternion0.hashCode();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.invertLocal();
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.slerpLocal(quaternion0, 0.0F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion();
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.slerp((IQuaternion) quaternion1, 0.0F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(0.0F, 0.0F, 0.0F, 1.0F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.slerp((IQuaternion) quaternion1, 0.0F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertNotNull(quaternion2);
      
      quaternion2.hashCode();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_0.multLocal((IVector3) vector3_1);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      
      Quaternion quaternion3 = quaternion1.integrate((IVector3) vector3_0, 0.0F, quaternion2);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertNotNull(quaternion3);
      
      Vector3 vector3_3 = new Vector3((-1492.0F), Float.NaN, (-1745.9602F));
      assertEquals(Float.NaN, vector3_3.y, 0.01F);
      assertEquals((-1745.9602F), vector3_3.z, 0.01F);
      assertEquals((-1492.0F), vector3_3.x, 0.01F);
      assertEquals((-1492.0F), vector3_3.x(), 0.01F);
      assertEquals(Float.NaN, vector3_3.lengthSquared(), 0.01F);
      assertEquals((-1745.9602F), vector3_3.z(), 0.01F);
      assertEquals(Float.NaN, vector3_3.y(), 0.01F);
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertNotNull(vector3_3);
      
      Quaternion quaternion4 = quaternion1.integrate((IVector3) vector3_3, (-1745.9602F), quaternion0);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, vector3_3.y, 0.01F);
      assertEquals((-1745.9602F), vector3_3.z, 0.01F);
      assertEquals((-1492.0F), vector3_3.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals((-1492.0F), vector3_3.x(), 0.01F);
      assertEquals(Float.NaN, vector3_3.lengthSquared(), 0.01F);
      assertEquals((-1745.9602F), vector3_3.z(), 0.01F);
      assertEquals(Float.NaN, vector3_3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertNotNull(quaternion4);
      
      Vector3 vector3_4 = new Vector3(vector3_2);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertNotNull(vector3_4);
      
      Quaternion quaternion5 = quaternion3.fromAngles(vector3_4);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.w, 0.01F);
      assertEquals(Float.NaN, quaternion5.x, 0.01F);
      assertEquals(Float.NaN, quaternion5.y, 0.01F);
      assertEquals(Float.NaN, quaternion5.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion5.w(), 0.01F);
      assertEquals(Float.NaN, quaternion5.z(), 0.01F);
      assertEquals(Float.NaN, quaternion5.x(), 0.01F);
      assertEquals(Float.NaN, quaternion5.y(), 0.01F);
      assertTrue(quaternion5.hasNaN());
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertNotNull(quaternion5);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformUnitX(vector3_0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3(3.4028235E38F, 4.0F, 0.0F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(4.0F, vector3_0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(4.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformUnitX(vector3_0);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1067.7008F), (-1067.7008F), (-1067.7008F), (-1067.7008F));
      assertEquals((-1067.7008F), quaternion0.z, 0.01F);
      assertEquals((-1067.7008F), quaternion0.y, 0.01F);
      assertEquals((-1067.7008F), quaternion0.x, 0.01F);
      assertEquals((-1067.7008F), quaternion0.w, 0.01F);
      assertEquals((-1067.7008F), quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1067.7008F), quaternion0.z(), 0.01F);
      assertEquals((-1067.7008F), quaternion0.y(), 0.01F);
      assertEquals((-1067.7008F), quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAngles(1414.49F, (-1067.7008F), 0.5F);
      assertEquals((-0.896079F), quaternion0.w, 0.01F);
      assertEquals((-0.30644634F), quaternion0.x, 0.01F);
      assertEquals((-0.287178F), quaternion0.y, 0.01F);
      assertEquals((-0.14374259F), quaternion0.z, 0.01F);
      assertEquals((-0.30644634F), quaternion1.x, 0.01F);
      assertEquals((-0.14374259F), quaternion1.z, 0.01F);
      assertEquals((-0.287178F), quaternion1.y, 0.01F);
      assertEquals((-0.896079F), quaternion1.w, 0.01F);
      assertEquals((-0.896079F), quaternion0.w(), 0.01F);
      assertEquals((-0.287178F), quaternion0.y(), 0.01F);
      assertEquals((-0.14374259F), quaternion0.z(), 0.01F);
      assertEquals((-0.30644634F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.896079F), quaternion1.w(), 0.01F);
      assertEquals((-0.287178F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.30644634F), quaternion1.x(), 0.01F);
      assertEquals((-0.14374259F), quaternion1.z(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = quaternion0.toAngles();
      assertEquals((-0.896079F), quaternion0.w, 0.01F);
      assertEquals((-0.30644634F), quaternion0.x, 0.01F);
      assertEquals((-0.287178F), quaternion0.y, 0.01F);
      assertEquals((-0.14374259F), quaternion0.z, 0.01F);
      assertEquals(0.5F, vector3_0.z, 0.01F);
      assertEquals(0.44069657F, vector3_0.y, 0.01F);
      assertEquals(0.7732962F, vector3_0.x, 0.01F);
      assertEquals((-0.896079F), quaternion0.w(), 0.01F);
      assertEquals((-0.287178F), quaternion0.y(), 0.01F);
      assertEquals((-0.14374259F), quaternion0.z(), 0.01F);
      assertEquals((-0.30644634F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7732962F, vector3_0.x(), 0.01F);
      assertEquals(0.5F, vector3_0.z(), 0.01F);
      assertEquals(1.0422004F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.44069657F, vector3_0.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertNotNull(vector3_0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ(0.99999F, 0.99999F, (-1.0F));
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      String string0 = quaternion0.toString();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(string0);
      assertEquals("[0.0, 0.0, 0.0, 1.0]", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.normalize();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ(0.0F, Float.NaN, 0.0F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(0.70710677F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.70710677F, quaternion0.w(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Float.NaN, quaternion1.x(), 0.01F);
      assertEquals(Float.NaN, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.70710677F, quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 4.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3.1415927F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-700.101F);
      Quaternion quaternion0 = new Quaternion(floatArray0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(4.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(4.0F, quaternion0.w(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 4.0F, 0.0F, 3.1415927F, 0.0F, 0.0F, (-700.101F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(4.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(4.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(4.0F, quaternion0.w(), 0.01F);
      assertEquals(4.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 4.0F, 0.0F, 3.1415927F, 0.0F, 0.0F, (-700.101F)}, floatArray0, 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(9, floatArray0.length);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = new Vector3(0.0F, 1.0F, 0.0F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      String string0 = quaternion0.toString();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(4.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(4.0F, quaternion0.w(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 4.0F, 0.0F, 3.1415927F, 0.0F, 0.0F, (-700.101F)}, floatArray0, 0.01F);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertEquals(9, floatArray0.length);
      assertNotNull(string0);
      assertEquals("[0.0, 0.0, 0.0, 4.0]", string0);
      
      Quaternion quaternion2 = quaternion1.integrate((IVector3) vector3_0, 0.0F, quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(4.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(4.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, quaternion2.w(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0F, quaternion2.x(), 0.01F);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 4.0F, 0.0F, 3.1415927F, 0.0F, 0.0F, (-700.101F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(9, floatArray0.length);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.fromVectorFromNegativeZ(0.5F, 0.0F, (-186.66F));
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(4.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.w, 0.01F);
      assertEquals(Float.NaN, quaternion3.z, 0.01F);
      assertEquals(Float.NaN, quaternion3.y, 0.01F);
      assertEquals(Float.NaN, quaternion3.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertEquals(4.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Float.NaN, quaternion2.w(), 0.01F);
      assertEquals(Float.NaN, quaternion2.y(), 0.01F);
      assertEquals(Float.NaN, quaternion2.z(), 0.01F);
      assertEquals(Float.NaN, quaternion2.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.z(), 0.01F);
      assertEquals(Float.NaN, quaternion3.y(), 0.01F);
      assertEquals(Float.NaN, quaternion3.x(), 0.01F);
      assertEquals(Float.NaN, quaternion3.w(), 0.01F);
      assertTrue(quaternion3.hasNaN());
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 4.0F, 0.0F, 3.1415927F, 0.0F, 0.0F, (-700.101F)}, floatArray0, 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertEquals(9, floatArray0.length);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion0.normalize();
      assertEquals(Float.NaN, quaternion4.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.x, 0.01F);
      assertEquals(Float.NaN, quaternion4.z, 0.01F);
      assertEquals(Float.NaN, quaternion4.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion4.z(), 0.01F);
      assertEquals(Float.NaN, quaternion4.y(), 0.01F);
      assertEquals(Float.NaN, quaternion4.x(), 0.01F);
      assertEquals(Float.NaN, quaternion4.w(), 0.01F);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Float.NaN, quaternion0.y(), 0.01F);
      assertEquals(Float.NaN, quaternion0.x(), 0.01F);
      assertEquals(Float.NaN, quaternion0.z(), 0.01F);
      assertEquals(Float.NaN, quaternion0.w(), 0.01F);
      assertTrue(quaternion0.hasNaN());
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 4.0F, 0.0F, 3.1415927F, 0.0F, 0.0F, (-700.101F)}, floatArray0, 0.01F);
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(9, floatArray0.length);
      assertNotNull(quaternion4);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      float float0 = quaternion0.getRotationZ();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = quaternion0.hasNaN();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.integrate((IVector3) vector3_0, 0.0F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAnglesXZ((-967.6F), (-967.6F));
      assertEquals(0.9999721F, quaternion0.w, 0.01F);
      assertEquals(2.788722E-5F, quaternion0.y, 0.01F);
      assertEquals(0.0052807615F, quaternion0.z, 0.01F);
      assertEquals(0.0052807615F, quaternion0.x, 0.01F);
      assertEquals(0.0052807615F, quaternion1.x, 0.01F);
      assertEquals(0.0052807615F, quaternion1.z, 0.01F);
      assertEquals(0.9999721F, quaternion1.w, 0.01F);
      assertEquals(2.788722E-5F, quaternion1.y, 0.01F);
      assertEquals(0.9999721F, quaternion0.w(), 0.01F);
      assertEquals(0.0052807615F, quaternion0.z(), 0.01F);
      assertEquals(0.0052807615F, quaternion0.x(), 0.01F);
      assertEquals(2.788722E-5F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0052807615F, quaternion1.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2.788722E-5F, quaternion1.y(), 0.01F);
      assertEquals(0.9999721F, quaternion1.w(), 0.01F);
      assertEquals(0.0052807615F, quaternion1.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformUnitY(vector3_0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1252.37F);
      floatArray0[2] = 2032.0024F;
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(floatArray0);
      assertEquals(2032.0024F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1252.37F), vector3_1.y, 0.01F);
      assertEquals((-1252.37F), vector3_1.y(), 0.01F);
      assertEquals(2032.0024F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(5697464.5F, vector3_1.lengthSquared(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_0.set((IVector3) vector3_1);
      assertEquals((-1252.37F), vector3_0.y, 0.01F);
      assertEquals(2032.0024F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(2032.0024F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1252.37F), vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals((-1252.37F), vector3_2.y, 0.01F);
      assertEquals(2032.0024F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals((-1252.37F), vector3_0.y(), 0.01F);
      assertEquals(2032.0024F, vector3_0.z(), 0.01F);
      assertEquals(5697464.5F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-1252.37F), vector3_1.y(), 0.01F);
      assertEquals(2032.0024F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(5697464.5F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(5697464.5F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(2032.0024F, vector3_2.z(), 0.01F);
      assertEquals((-1252.37F), vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_2);
      
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_3 = quaternion0.transformUnitY(vector3_1);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(1.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(1.0F, vector3_3.y(), 0.01F);
      assertEquals(1.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = (Vector3)Vector3.UNIT_Z;
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertNotNull(vector3_4);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_4, vector3_4);
      assertEquals((-1252.37F), vector3_0.y, 0.01F);
      assertEquals(2032.0024F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals((-0.70710677F), quaternion0.z, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals((-0.70710677F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(0.70710677F, quaternion1.w, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals((-1252.37F), vector3_0.y(), 0.01F);
      assertEquals(2032.0024F, vector3_0.z(), 0.01F);
      assertEquals(5697464.5F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals((-0.70710677F), quaternion0.z(), 0.01F);
      assertEquals(0.70710677F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals((-0.70710677F), quaternion1.z(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(0.70710677F, quaternion1.w(), 0.01F);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.fromAnglesXZ((-1252.37F), 0.0F);
      assertEquals((-1252.37F), vector3_0.y, 0.01F);
      assertEquals(2032.0024F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.533503F), quaternion0.w, 0.01F);
      assertEquals(0.8457982F, quaternion0.x, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals((-0.533503F), quaternion1.w, 0.01F);
      assertEquals(0.8457982F, quaternion1.x, 0.01F);
      assertEquals(0.8457982F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion2.z, 0.01F);
      assertEquals((-0.533503F), quaternion2.w, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals((-1252.37F), vector3_0.y(), 0.01F);
      assertEquals(2032.0024F, vector3_0.z(), 0.01F);
      assertEquals(5697464.5F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.8457982F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.533503F), quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals((-0.533503F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.8457982F, quaternion1.x(), 0.01F);
      assertEquals(0.8457982F, quaternion2.x(), 0.01F);
      assertEquals((-0.533503F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = new Quaternion();
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertNotNull(quaternion3);
      
      Vector3 vector3_5 = new Vector3(floatArray0);
      assertEquals(2032.0024F, vector3_5.z, 0.01F);
      assertEquals((-1252.37F), vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals((-1252.37F), vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(5697464.5F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(2032.0024F, vector3_5.z(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertTrue(vector3_5.equals((Object)vector3_2));
      assertTrue(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_5);
      
      Vector3 vector3_6 = vector3_3.multLocal((IVector3) vector3_5);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1252.37F), vector3_1.y, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.533503F), quaternion0.w, 0.01F);
      assertEquals(0.8457982F, quaternion0.x, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals((-1252.37F), vector3_3.y, 0.01F);
      assertEquals(2032.0024F, vector3_5.z, 0.01F);
      assertEquals((-1252.37F), vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals((-1252.37F), vector3_6.y, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(0.0F, vector3_6.z, 0.01F);
      assertEquals((-1252.37F), vector3_1.y(), 0.01F);
      assertEquals(1568430.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.8457982F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.533503F), quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(1568430.6F, vector3_3.lengthSquared(), 0.01F);
      assertEquals((-1252.37F), vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals((-1252.37F), vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(5697464.5F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(2032.0024F, vector3_5.z(), 0.01F);
      assertEquals(1568430.6F, vector3_6.lengthSquared(), 0.01F);
      assertEquals((-1252.37F), vector3_6.y(), 0.01F);
      assertEquals(0.0F, vector3_6.z(), 0.01F);
      assertEquals(0.0F, vector3_6.x(), 0.01F);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_0);
      assertSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_2);
      assertSame(vector3_6, vector3_1);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertTrue(vector3_5.equals((Object)vector3_2));
      assertTrue(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_6);
      
      Vector3 vector3_7 = quaternion2.transformAndAdd(vector3_4, vector3_4, vector3_2);
      assertEquals(0.9024717F, vector3_0.y, 0.01F);
      assertEquals(0.5692508F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals((-1252.37F), vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.5692508F, vector3_2.z, 0.01F);
      assertEquals(0.9024717F, vector3_2.y, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.533503F), quaternion0.w, 0.01F);
      assertEquals(0.8457982F, quaternion0.x, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals((-0.533503F), quaternion1.w, 0.01F);
      assertEquals(0.8457982F, quaternion1.x, 0.01F);
      assertEquals(0.8457982F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion2.z, 0.01F);
      assertEquals((-0.533503F), quaternion2.w, 0.01F);
      assertEquals(0.5692508F, vector3_7.z, 0.01F);
      assertEquals(0.0F, vector3_7.x, 0.01F);
      assertEquals(0.9024717F, vector3_7.y, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.1385016F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.9024717F, vector3_0.y(), 0.01F);
      assertEquals(0.5692508F, vector3_0.z(), 0.01F);
      assertEquals((-1252.37F), vector3_1.y(), 0.01F);
      assertEquals(1568430.6F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1.1385016F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.9024717F, vector3_2.y(), 0.01F);
      assertEquals(0.5692508F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.8457982F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.533503F), quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals((-0.533503F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.8457982F, quaternion1.x(), 0.01F);
      assertEquals(0.8457982F, quaternion2.x(), 0.01F);
      assertEquals((-0.533503F), quaternion2.w(), 0.01F);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.y(), 0.01F);
      assertEquals(1.1385016F, vector3_7.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_7.x(), 0.01F);
      assertEquals(0.5692508F, vector3_7.z(), 0.01F);
      assertEquals(0.9024717F, vector3_7.y(), 0.01F);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_7);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_7);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_6);
      assertSame(vector3_7, vector3_0);
      assertSame(vector3_7, vector3_2);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_4));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertEquals(5, floatArray0.length);
      assertNotNull(vector3_7);
      
      Quaternion quaternion4 = quaternion1.invertLocal();
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(-0.0F, quaternion4.y, 0.01F);
      assertEquals((-0.8457982F), quaternion4.x, 0.01F);
      assertEquals((-0.533503F), quaternion4.w, 0.01F);
      assertEquals(0.9024717F, vector3_0.y, 0.01F);
      assertEquals(0.5692508F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.533503F), quaternion0.w, 0.01F);
      assertEquals((-0.8457982F), quaternion0.x, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals((-0.533503F), quaternion1.w, 0.01F);
      assertEquals((-0.8457982F), quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals((-0.533503F), quaternion4.w(), 0.01F);
      assertEquals((-0.8457982F), quaternion4.x(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(-0.0F, quaternion4.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.1385016F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.9024717F, vector3_0.y(), 0.01F);
      assertEquals(0.5692508F, vector3_0.z(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals((-0.8457982F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.533503F), quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals((-0.533503F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.8457982F), quaternion1.x(), 0.01F);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_7);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertNotNull(quaternion4);
      
      float float0 = quaternion3.z();
      assertEquals(1.0F, quaternion3.w, 0.01F);
      assertEquals(0.0F, quaternion3.z, 0.01F);
      assertEquals(0.0F, quaternion3.y, 0.01F);
      assertEquals(0.0F, quaternion3.x, 0.01F);
      assertEquals(1.0F, quaternion3.w(), 0.01F);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0F, quaternion3.z(), 0.01F);
      assertEquals(0.0F, quaternion3.y(), 0.01F);
      assertEquals(0.0F, quaternion3.x(), 0.01F);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion2);
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(0.0F, float0, 0.01F);
      
      Quaternion quaternion5 = quaternion4.integrate((IVector3) vector3_5, (-0.66750133F));
      assertEquals(0.0F, quaternion4.z, 0.01F);
      assertEquals(-0.0F, quaternion4.y, 0.01F);
      assertEquals((-0.8457982F), quaternion4.x, 0.01F);
      assertEquals((-0.533503F), quaternion4.w, 0.01F);
      assertEquals(0.89794177F, quaternion5.z, 0.01F);
      assertEquals(0.44011226F, quaternion5.y, 0.01F);
      assertEquals((-6.696896E-4F), quaternion5.w, 0.01F);
      assertEquals((-0.001061704F), quaternion5.x, 0.01F);
      assertEquals(0.9024717F, vector3_0.y, 0.01F);
      assertEquals(0.5692508F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.533503F), quaternion0.w, 0.01F);
      assertEquals((-0.8457982F), quaternion0.x, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals((-0.533503F), quaternion1.w, 0.01F);
      assertEquals((-0.8457982F), quaternion1.x, 0.01F);
      assertEquals(2032.0024F, vector3_5.z, 0.01F);
      assertEquals((-1252.37F), vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(0.0F, quaternion4.z(), 0.01F);
      assertEquals((-0.533503F), quaternion4.w(), 0.01F);
      assertEquals((-0.8457982F), quaternion4.x(), 0.01F);
      assertFalse(quaternion4.hasNaN());
      assertEquals(-0.0F, quaternion4.y(), 0.01F);
      assertEquals((-6.696896E-4F), quaternion5.w(), 0.01F);
      assertEquals((-0.001061704F), quaternion5.x(), 0.01F);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.89794177F, quaternion5.z(), 0.01F);
      assertEquals(0.44011226F, quaternion5.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.1385016F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.9024717F, vector3_0.y(), 0.01F);
      assertEquals(0.5692508F, vector3_0.z(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals((-0.8457982F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.533503F), quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals((-0.533503F), quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.8457982F), quaternion1.x(), 0.01F);
      assertEquals((-1252.37F), vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(5697464.5F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(2032.0024F, vector3_5.z(), 0.01F);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_7);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_0);
      assertArrayEquals(new float[] {0.0F, (-1252.37F), 2032.0024F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion1.fromAnglesXY(0.9646323F, -0.0F);
      assertEquals(0.885923F, quaternion6.w, 0.01F);
      assertEquals(0.46383235F, quaternion6.x, 0.01F);
      assertEquals(0.0F, quaternion6.z, 0.01F);
      assertEquals(-0.0F, quaternion6.y, 0.01F);
      assertEquals(0.9024717F, vector3_0.y, 0.01F);
      assertEquals(0.5692508F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.46383235F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.885923F, quaternion0.w, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(0.885923F, quaternion1.w, 0.01F);
      assertEquals(0.46383235F, quaternion1.x, 0.01F);
      assertEquals(0.885923F, quaternion6.w(), 0.01F);
      assertEquals(0.46383235F, quaternion6.x(), 0.01F);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.0F, quaternion6.z(), 0.01F);
      assertEquals(-0.0F, quaternion6.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.1385016F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.9024717F, vector3_0.y(), 0.01F);
      assertEquals(0.5692508F, vector3_0.z(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.46383235F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.885923F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.46383235F, quaternion1.x(), 0.01F);
      assertEquals(0.885923F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_7);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion2.fromAnglesXZ(0.34672305F, -0.0F);
      assertEquals(-0.0F, quaternion7.z, 0.01F);
      assertEquals(-0.0F, quaternion7.y, 0.01F);
      assertEquals(0.9850105F, quaternion7.w, 0.01F);
      assertEquals(0.17249446F, quaternion7.x, 0.01F);
      assertEquals(0.9024717F, vector3_0.y, 0.01F);
      assertEquals(0.5692508F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(0.9850105F, quaternion0.w, 0.01F);
      assertEquals(0.17249446F, quaternion0.x, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(0.9850105F, quaternion1.w, 0.01F);
      assertEquals(0.17249446F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion2.y, 0.01F);
      assertEquals(0.17249446F, quaternion2.x, 0.01F);
      assertEquals(-0.0F, quaternion2.z, 0.01F);
      assertEquals(0.9850105F, quaternion2.w, 0.01F);
      assertFalse(quaternion7.hasNaN());
      assertEquals(-0.0F, quaternion7.z(), 0.01F);
      assertEquals(0.9850105F, quaternion7.w(), 0.01F);
      assertEquals(-0.0F, quaternion7.y(), 0.01F);
      assertEquals(0.17249446F, quaternion7.x(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.1385016F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.9024717F, vector3_0.y(), 0.01F);
      assertEquals(0.5692508F, vector3_0.z(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.17249446F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.9850105F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.17249446F, quaternion1.x(), 0.01F);
      assertEquals(0.9850105F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.9850105F, quaternion2.w(), 0.01F);
      assertEquals(-0.0F, quaternion2.z(), 0.01F);
      assertEquals(-0.0F, quaternion2.y(), 0.01F);
      assertEquals(0.17249446F, quaternion2.x(), 0.01F);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion7);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_7);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertNotNull(quaternion7);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAnglesXY(939.852F, 939.852F);
      assertEquals((-0.24660951F), quaternion0.x, 0.01F);
      assertEquals(0.06504742F, quaternion0.w, 0.01F);
      assertEquals((-0.93495256F), quaternion0.z, 0.01F);
      assertEquals((-0.24660951F), quaternion0.y, 0.01F);
      assertEquals((-0.24660951F), quaternion1.x, 0.01F);
      assertEquals((-0.93495256F), quaternion1.z, 0.01F);
      assertEquals((-0.24660951F), quaternion1.y, 0.01F);
      assertEquals(0.06504742F, quaternion1.w, 0.01F);
      assertEquals((-0.24660951F), quaternion0.y(), 0.01F);
      assertEquals(0.06504742F, quaternion0.w(), 0.01F);
      assertEquals((-0.93495256F), quaternion0.z(), 0.01F);
      assertEquals((-0.24660951F), quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.24660951F), quaternion1.x(), 0.01F);
      assertEquals((-0.93495256F), quaternion1.z(), 0.01F);
      assertEquals((-0.24660951F), quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.06504742F, quaternion1.w(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.normalizeLocal();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(0.0F, quaternion1.z(), 0.01F);
      assertEquals(0.0F, quaternion1.y(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0F, quaternion1.x(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.invertLocal();
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertEquals(-0.0F, quaternion0.y(), 0.01F);
      assertEquals(-0.0F, quaternion0.x(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0F, quaternion0.z(), 0.01F);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0F, quaternion1.w(), 0.01F);
      assertEquals(-0.0F, quaternion1.z(), 0.01F);
      assertEquals(-0.0F, quaternion1.x(), 0.01F);
      assertEquals(-0.0F, quaternion1.y(), 0.01F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_1 = quaternion0.transformAndAdd(vector3_0, vector3_0, vector3_0);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.y(), 0.01F);
      assertEquals(0.0F, quaternion0.z(), 0.01F);
      assertEquals(0.0F, quaternion0.x(), 0.01F);
      assertEquals(1.0F, quaternion0.w(), 0.01F);
      assertFalse(quaternion0.hasNaN());
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), 0.0F, 0.0F, 0.0F);
      Vector3 vector3_0 = new Vector3(0.0F, 0.0F, 0.0F);
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      vector3_0.set((IVector3) vector3_1);
      quaternion0.transformUnitY(vector3_0);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      quaternion0.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion1 = quaternion0.fromAnglesXZ(0.0F, 0.0F);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.5707964F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      quaternion1.getRotationZ();
      Vector3 vector3_3 = new Vector3(floatArray0);
      vector3_3.multLocal((IVector3) vector3_2);
      quaternion1.transformAndAdd(vector3_2, vector3_2, vector3_3);
      Quaternion quaternion2 = quaternion0.invertLocal();
      quaternion2.z();
      quaternion1.integrate((IVector3) vector3_2, 1972.0F);
      quaternion0.fromAnglesXY(0.0F, -0.0F);
      quaternion0.fromAnglesXZ(Float.NEGATIVE_INFINITY, 617.36053F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = (-2001.75F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-4055.4285F);
      floatArray0[5] = (-2.0F);
      Quaternion quaternion0 = new Quaternion(floatArray0);
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = new Quaternion(quaternion1);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0F, quaternion2.z(), 0.01F);
      assertEquals(0.0F, quaternion2.w(), 0.01F);
      assertEquals((-2001.75F), quaternion2.y, 0.01F);
      assertEquals(3.4028235E38F, quaternion0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F));
      Vector3 vector3_1 = quaternion0.toAngles();
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(1.5707964F, vector3_1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-428.1F));
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      Vector3 vector3_1 = new Vector3(0.0F, 0.0F, 0.0F);
      vector3_1.addScaled((IVector3) vector3_0, (-4341.68F));
      vector3_1.normalize();
      Vector3 vector3_2 = quaternion0.toAngles(vector3_1);
      quaternion0.transformUnitZ(vector3_2);
      Quaternion quaternion1 = new Quaternion(quaternion0);
      quaternion1.fromAnglesXY(0.0F, 0.70710677F);
      quaternion1.hashCode();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.70710677F, quaternion0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.0F, 0.0F, (-1175.97F), 0.0F);
      Quaternion quaternion1 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion2 = quaternion0.slerp((IQuaternion) quaternion1, 0.0F);
      Vector3 vector3_0 = new Vector3((-1175.97F), 0.0F, 1.0F);
      quaternion2.transformLocal(vector3_0);
      quaternion2.hasNaN();
      Quaternion quaternion3 = quaternion2.normalize(quaternion0);
      Quaternion quaternion4 = quaternion3.mult((IQuaternion) quaternion1, quaternion2);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      // Undeclared exception!
      try { 
        quaternion4.get(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.5F, 0.5F, 0.5F, (-1017.32F));
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_2 = new Vector3(vector3_1);
      quaternion0.toAngles(vector3_2);
      quaternion0.transform((IVector3) vector3_0, vector3_2);
      // Undeclared exception!
      try { 
        quaternion0.get((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = quaternion0.toAngles();
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.fromAngles((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = new Vector3();
      Quaternion quaternion1 = quaternion0.fromAngles(vector3_0);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = new Vector3();
      Quaternion quaternion1 = quaternion0.fromAngles(vector3_0);
      quaternion1.toAngles(vector3_0);
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = quaternion1.transform((IVector3) vector3_1);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = new Vector3(0.0F, 1.0F, 0.0F);
      Vector3 vector3_1 = quaternion0.transform((IVector3) vector3_0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
  }
}
