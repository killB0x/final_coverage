/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:01:18 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IVector;
import pythagoras.f.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractVector_ESTest extends AbstractVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector(0.0F, 10.0F);
      boolean boolean0 = vector1.equals(vector0);
      assertFalse(vector0.equals((Object)vector1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector((-1234.046F), 0.0F);
      boolean boolean0 = vector0.equals(vector1);
      assertFalse(boolean0);
      assertFalse(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector vector0 = new Vector(0.8205099F, 0.8205099F);
      float float0 = vector0.angleBetween(vector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector vector0 = new Vector((-289.1F), (-289.1F));
      Vector vector1 = vector0.scale((-289.1F));
      vector1.addLocal((-289.1F), 1682.0F);
      float float0 = vector1.distanceSq(vector0);
      assertEquals(85260.81F, vector1.y, 0.01F);
      assertEquals(1.43042048E10F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.setLength(0.0F);
      vector1.subtract((IVector) vector0, vector0);
      assertEquals(Float.NaN, vector0.x, 0.01F);
      assertEquals(Float.NaN, vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector();
      Vector vector2 = vector1.subtract((-449.2F), (-449.2F), vector0);
      Vector vector3 = vector2.negate(vector0);
      Vector vector4 = vector2.negate();
      Vector vector5 = vector2.subtract((IVector) vector4, vector1);
      vector5.subtract((IVector) vector3);
      assertEquals((-449.2F), vector2.x, 0.01F);
      assertEquals((-449.2F), vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector vector0 = new Vector(5365.926F, 5365.926F);
      vector0.add(1187.8922F, 1187.8922F, vector0);
      vector0.subtract((-699.6415F), 5365.926F, vector0);
      assertEquals(7253.4595F, vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract(0.0F, 0.0F, vector0);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.subtract(1.0E-5F, 10.0F, vector0);
      assertEquals((-10.0F), vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract(0.0F, 0.0F);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector vector0 = new Vector((-1157.4349F), (-1157.4349F));
      Vector vector1 = new Vector((-1157.4349F), (-2121.369F));
      Vector vector2 = vector0.addScaledLocal(vector1, 1.0F);
      Vector vector3 = vector0.subtract((IVector) vector1, vector2);
      vector0.addScaled((IVector) vector3, 1338498.0F, vector3);
      vector0.subtract((-2959.647F), 0.0F);
      assertEquals((-1.54922547E9F), vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      Vector vector1 = new Vector((-1.0F), (-1.0F));
      Vector vector2 = vector1.negateLocal();
      vector0.scale((IVector) vector2, vector1);
      assertEquals((-1.0F), vector2.x, 0.01F);
      assertTrue(vector0.equals((Object)vector1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.scale((IVector) vector0, vector0);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector((-1.0F), 0.0F);
      Vector vector2 = vector0.addLocal((IVector) vector1);
      Vector vector3 = vector1.negateLocal();
      Vector vector4 = vector3.scale((IVector) vector0);
      vector0.scaleLocal((IVector) vector2);
      vector0.scale((IVector) vector4, vector2);
      assertEquals(-0.0F, vector2.y, 0.01F);
      assertTrue(vector0.equals((Object)vector4));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      Vector vector1 = new Vector((-1.0F), (-1.0F));
      Vector vector2 = vector1.negateLocal();
      Vector vector3 = vector2.scale((IVector) vector0);
      assertTrue(vector3.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.scale((IVector) vector0);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract((-815.441F), (-815.441F));
      Vector vector2 = vector1.negate(vector0);
      vector0.scale((IVector) vector2);
      assertEquals((-815.441F), vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector((-1.0F), 0.0F);
      Vector vector2 = vector0.lerpLocal(vector1, 0.0F);
      vector2.addLocal((IVector) vector1);
      Vector vector3 = vector1.negateLocal();
      Vector vector4 = vector3.scale((IVector) vector0);
      assertEquals((-1.0F), vector0.x, 0.01F);
      assertTrue(vector4.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.scale(1.0F, vector0);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector vector0 = new Vector(0.5F, 0.5F);
      vector0.scale((-2386.382F), vector0);
      assertEquals((-1193.191F), vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      Vector vector1 = vector0.scale(1479.0F);
      assertEquals((-1283044.6F), vector1.y, 0.01F);
      assertEquals((-1479.0F), vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector vector0 = new Vector(0.5F, 0.5F);
      Vector vector1 = vector0.rotateScaleAndAdd(0.0F, 0.0F, vector0, vector0);
      assertEquals(0.5F, vector1.y, 0.01F);
      assertEquals(0.5F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.rotateScaleAndAdd(0.0F, 0.0F, vector0, vector0);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      vector0.setAngle((-3467.0327F));
      vector0.rotateScaleAndAdd(3.1669777E20F, 3.1669777E20F, vector0, vector0);
      assertEquals(2.7459218E23F, vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract((-815.441F), (-815.441F));
      Vector vector2 = vector1.negate(vector0);
      vector2.rotateScaleAndAdd((-815.441F), 0.0F, vector0, vector0);
      assertEquals((-815.441F), vector0.y, 0.01F);
      assertEquals((-815.441F), vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector vector0 = new Vector((-1157.4349F), (-1157.4349F));
      Vector vector1 = new Vector((-1157.4349F), (-2121.369F));
      Vector vector2 = vector0.addScaledLocal(vector1, 1.0F);
      Vector vector3 = vector1.clone();
      Vector vector4 = new Vector(vector0);
      vector0.subtract((IVector) vector3, vector2);
      vector2.crossLocal(vector4);
      vector2.rotateAndAdd((-1.29022387E9F), vector1, vector1);
      assertEquals(1115691.0F, vector2.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.rotateAndAdd(0.0F, vector0, vector0);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector vector0 = new Vector(998.3372F, 1531.0588F);
      Vector vector1 = new Vector(vector0);
      vector1.scale(1531.0588F, vector0);
      vector0.lerpLocal(vector1, 1531.0588F);
      vector0.rotateAndAdd(0.0F, vector0, vector0);
      assertEquals((-4.6743726E9F), vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector vector0 = new Vector(998.3372F, 1531.0588F);
      vector0.rotate(998.3372F, vector0);
      assertEquals(1744.127F, vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.set(449.2F, 449.2F);
      vector1.negate(vector1);
      vector0.rotate(0.0F, vector0);
      assertEquals((-449.2F), vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.rotate(312.22F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(-0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector vector0 = new Vector(998.3372F, 1531.0588F);
      Vector vector1 = vector0.rotate(998.3372F);
      assertEquals(546.6619F, vector1.y, 0.01F);
      assertEquals(1744.127F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.set(2319.05F, 0.0F);
      vector0.normalize(vector0);
      assertEquals(1.0F, vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector vector0 = new Vector(1175.55F, 1175.55F);
      Vector vector1 = new Vector(vector0);
      Vector vector2 = vector1.lerpLocal(vector0, 1381917.9F);
      vector2.addLocal((-3751.7659F), 0.0F);
      vector2.cross((IVector) vector0, vector0);
      vector0.normalize(vector2);
      assertFalse(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector(0.0F, (-2375.0532F));
      vector0.lerpLocal(vector1, (-1.0F));
      vector0.normalize(vector0);
      assertEquals(1.0F, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      vector0.setAngle((-3467.0327F));
      Vector vector1 = vector0.rotate((-3467.0327F));
      vector1.normalize(vector0);
      assertEquals((-0.8416617F), vector0.x, 0.01F);
      assertEquals((-0.8416617F), vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector vector0 = new Vector(1.5707964F, -0.0F);
      Vector vector1 = vector0.normalize();
      assertEquals(-0.0F, vector1.y, 0.01F);
      assertEquals(1.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector vector0 = new Vector(0.0F, (-2375.0532F));
      Vector vector1 = vector0.normalize();
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals((-1.0F), vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector vector0 = new Vector(1175.55F, 1175.55F);
      vector0.addLocal((-3751.7659F), 0.0F);
      vector0.normalize();
      assertEquals((-2576.2158F), vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.negate(vector0);
      assertEquals(-0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.set(449.2F, 449.2F);
      Vector vector2 = vector1.negate(vector1);
      Vector vector3 = vector0.negate(vector0);
      assertSame(vector3, vector2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector vector0 = new Vector(3.1415927F, 3.1415927F);
      vector0.negate(vector0);
      vector0.lerp((IVector) vector0, 0.0F, vector0);
      assertEquals((-3.1415927F), vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.lerp((IVector) vector0, 3720.12F, vector0);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector vector0 = new Vector(3.1415927F, 3.1415927F);
      Vector vector1 = vector0.lerp((IVector) vector0, 0.0F, vector0);
      assertEquals(3.1415927F, vector1.x, 0.01F);
      assertEquals(3.1415927F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector vector0 = new Vector((-1805.434F), (-1805.434F));
      vector0.subtract((-3608.6F), 1192.4432F, vector0);
      Vector vector1 = vector0.cross((IVector) vector0);
      vector0.lerp((IVector) vector1, 1.5707964F, vector0);
      assertEquals(1711.1775F, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.lerp((IVector) vector0, 0.0F);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector vector0 = new Vector((-1805.434F), (-1805.434F));
      Vector vector1 = vector0.setLength(0.0F);
      float float0 = vector1.lengthSq();
      assertEquals(-0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector vector0 = new Vector();
      float float0 = vector0.length();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector vector0 = new Vector((-289.1F), (-289.1F));
      float float0 = vector0.length();
      assertEquals(408.84915F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector vector0 = new Vector(5365.926F, 5365.926F);
      boolean boolean0 = vector0.isZero();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector vector0 = new Vector();
      float float0 = vector0.dot(vector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector vector0 = new Vector(998.3372F, 1531.0588F);
      Vector vector1 = new Vector((-4.08428109E9F), (-4.08428109E9F));
      float float0 = vector0.dot(vector1);
      assertEquals((-1.03307647E13F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector vector0 = new Vector();
      float float0 = vector0.distance(vector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract((-815.441F), (-815.441F));
      float float0 = vector1.distance(vector0);
      assertEquals(1153.2076F, float0, 0.01F);
      assertEquals(815.441F, vector1.x, 0.01F);
      assertEquals(815.441F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector vector0 = new Vector(998.3372F, 1531.0588F);
      Vector vector1 = new Vector(vector0);
      vector1.scale(1531.0588F, vector0);
      Vector vector2 = vector0.lerpLocal(vector1, 1531.0588F);
      vector2.cross((IVector) vector1, vector1);
      assertEquals((-3.58432998E9F), vector0.y, 0.01F);
      assertEquals((-262144.0F), vector1.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      Vector vector1 = new Vector((-1.0F), (-1.0F));
      Vector vector2 = vector1.negateLocal();
      Vector vector3 = vector2.cross((IVector) vector0);
      assertEquals((-866.5082F), vector3.y, 0.01F);
      assertEquals(866.5082F, vector3.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.normalizeLocal();
      vector0.clone();
      assertEquals(Float.NaN, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector vector0 = new Vector(998.3372F, 1531.0588F);
      float float0 = vector0.angleBetween(vector0);
      assertEquals(3.4526698E-4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector vector0 = new Vector();
      float float0 = vector0.angle();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector vector0 = new Vector((-289.1F), (-289.1F));
      float float0 = vector0.angle();
      assertEquals((-2.3561945F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      vector0.addScaled((IVector) vector0, (-5127741.5F), vector0);
      assertEquals(4.4483569E9F, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.addScaled((IVector) vector0, 0.0F, vector0);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.addScaled((IVector) vector0, 0.0F);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector vector0 = new Vector(0.5F, 0.5F);
      Vector vector1 = vector0.addScaled((IVector) vector0, 0.0F);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.add((IVector) vector0, vector0);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.normalizeLocal();
      vector0.add((IVector) vector1, vector0);
      assertEquals(Float.NaN, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector((-758.7088F), (-758.7088F));
      Vector vector2 = vector0.subtract((IVector) vector1);
      vector2.negate(vector0);
      vector0.add((IVector) vector0, vector2);
      assertEquals((-1517.4176F), vector2.x, 0.01F);
      assertTrue(vector0.equals((Object)vector1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.add((IVector) vector0);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.normalizeLocal();
      vector1.add((IVector) vector0);
      assertEquals(Float.NaN, vector0.y, 0.01F);
      assertEquals(Float.NaN, vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector vector0 = new Vector(0.0F, 0.0F);
      Vector vector1 = vector0.add(0.0F, 0.0F, vector0);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.add(10.0F, 10.0F, vector0);
      float float0 = vector0.dot(vector0);
      assertEquals(10.0F, vector0.y, 0.01F);
      assertEquals(200.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      vector0.add((-3.1541892E20F), (-5127741.0F), vector0);
      assertEquals((-3.1541892E20F), vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.add(0.0F, 0.0F);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.add(-0.0F, (-1435.9F));
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals((-1435.9F), vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector vector0 = new Vector(100.5F, 100.5F);
      Vector vector1 = vector0.add(0.0F, 853.9141F);
      assertEquals(954.4141F, vector1.y, 0.01F);
      assertEquals(100.5F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.subtract((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.subtract((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.subtract(1.0F, 1.0F, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.scale((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.scale(1.0F, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.rotateAndAdd(0.0F, (IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.rotate(0.0F, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.normalize((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.negate((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.lerp((IVector) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.distanceSq((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.cross((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.angleBetween((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.addScaled((IVector) vector0, -0.0F, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.add((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.add((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.dot((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.lerp((IVector) null, 2201.8875F, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.add(0.0F, 0.0F, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector vector0 = new Vector((-289.1F), (-289.1F));
      float float0 = vector0.lengthSq();
      assertEquals(167157.62F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector vector0 = new Vector(0.5F, 0.5F);
      Vector vector1 = vector0.scale((IVector) vector0, vector0);
      Vector vector2 = vector0.lerp((IVector) vector0, 1.0F);
      vector1.x = 837.21796F;
      vector0.cross((IVector) vector2);
      assertEquals(0.25F, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.cross((IVector) vector0, vector0);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector(0.0F, 1.0F);
      boolean boolean0 = vector0.equals(vector1);
      assertFalse(boolean0);
      assertFalse(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      Vector vector1 = new Vector(vector0);
      assertTrue(vector1.equals((Object)vector0));
      
      vector1.negateLocal();
      boolean boolean0 = vector0.equals(vector1);
      assertFalse(vector1.equals((Object)vector0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector vector0 = new Vector();
      Object object0 = new Object();
      boolean boolean0 = vector0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector vector0 = new Vector();
      boolean boolean0 = vector0.equals(vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      Vector vector1 = new Vector(vector0);
      boolean boolean0 = vector0.equals(vector1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector vector0 = new Vector(1175.55F, 1175.55F);
      float float0 = vector0.angleBetween(vector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector vector0 = new Vector(1175.55F, 1175.55F);
      Vector vector1 = vector0.subtract((IVector) vector0);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector vector0 = new Vector(1175.55F, 1175.55F);
      vector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.clone();
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector vector0 = new Vector(1175.55F, 1175.55F);
      float float0 = vector0.angle();
      assertEquals(0.7853982F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.distance((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector vector0 = new Vector(1175.55F, 1175.55F);
      Vector vector1 = vector0.rotate((-3176.84F));
      assertEquals((-1654.9061F), vector1.x, 0.01F);
      assertEquals((-158.49744F), vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.cross((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      Vector vector1 = vector0.add((IVector) vector0);
      assertEquals((-1735.0164F), vector1.y, 0.01F);
      assertEquals((-2.0F), vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.rotate((-7.5764512E7F), vector0);
      assertEquals(-0.0F, vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.scale((-7.5764512E7F));
      assertEquals(-0.0F, vector1.x, 0.01F);
      assertEquals(-0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.rotateScaleAndAdd((-2431.052F), (-2431.052F), (IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract((IVector) vector0, vector0);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      String string0 = vector0.toString();
      assertEquals("-1.0-867.508", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.add((-3.1415927F), (-3.1415927F));
      assertEquals((-3.1415927F), vector1.x, 0.01F);
      assertEquals((-3.1415927F), vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector vector0 = new Vector();
      float float0 = vector0.distanceSq(vector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.negate();
      assertEquals(-0.0F, vector1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.addScaled((IVector) null, 384.06158F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      vector0.rotateAndAdd(1.0F, vector0, vector0);
      assertEquals((-1337.0663F), vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vector vector0 = new Vector((-1.0F), (-867.5082F));
      Vector vector1 = vector0.lerp((IVector) vector0, (-2972.4F));
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector vector0 = new Vector();
      boolean boolean0 = vector0.isZero();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.scale((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }
}
