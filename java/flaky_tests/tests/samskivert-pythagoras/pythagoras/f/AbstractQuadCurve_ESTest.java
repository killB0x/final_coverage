/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:09:40 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AbstractQuadCurve;
import pythagoras.f.AffineTransform;
import pythagoras.f.Dimension;
import pythagoras.f.FlatteningPathIterator;
import pythagoras.f.IRectangle;
import pythagoras.f.IdentityTransform;
import pythagoras.f.PathIterator;
import pythagoras.f.Point;
import pythagoras.f.QuadCurve;
import pythagoras.f.Rectangle;
import pythagoras.f.Transform;
import pythagoras.f.Vector;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractQuadCurve_ESTest extends AbstractQuadCurve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, (-1.0F), 1275.0F, 1868.745F);
      assertEquals(1275.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1868.745F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1868.745F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1275.0F, affineTransform0.tx, 0.01F);
      
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, affineTransform0);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(1275.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1868.745F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertNotNull(abstractQuadCurve_Iterator0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1868.745F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1275.0F, affineTransform0.tx, 0.01F);
      
      float[] floatArray0 = new float[9];
      abstractQuadCurve_Iterator0.next();
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(1275.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1868.745F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1868.745F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1275.0F, affineTransform0.tx, 0.01F);
      
      int int0 = abstractQuadCurve_Iterator0.currentSegment(floatArray0);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(1275.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1868.745F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertEquals(2, int0);
      assertArrayEquals(new float[] {1275.0F, 1868.745F, 1275.0F, 1868.745F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1868.745F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1275.0F, affineTransform0.tx, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      
      QuadCurve quadCurve1 = new QuadCurve(1275.0F, 1275.0F, 1.0F, 0.0F, 1433.9967F, 0.0F);
      assertEquals(0.0F, quadCurve1.y2(), 0.01F);
      assertEquals(0.0F, quadCurve1.ctrlY(), 0.01F);
      assertTrue(quadCurve1.isEmpty());
      assertEquals(1275.0F, quadCurve1.x1(), 0.01F);
      assertEquals(1433.9967F, quadCurve1.x2(), 0.01F);
      assertEquals(1275.0F, quadCurve1.y1(), 0.01F);
      assertEquals(1.0F, quadCurve1.ctrlX(), 0.01F);
      assertNotNull(quadCurve1);
      assertEquals(0.0F, quadCurve1.y2, 0.01F);
      assertEquals(1433.9967F, quadCurve1.x2, 0.01F);
      assertEquals(1275.0F, quadCurve1.x1, 0.01F);
      assertEquals(1.0F, quadCurve1.ctrlx, 0.01F);
      assertEquals(1275.0F, quadCurve1.y1, 0.01F);
      assertEquals(0.0F, quadCurve1.ctrly, 0.01F);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      
      quadCurve0.subdivide(quadCurve0, quadCurve1);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve1.y1(), 0.01F);
      assertEquals(0.0F, quadCurve1.x1(), 0.01F);
      assertEquals(0.0F, quadCurve1.y2(), 0.01F);
      assertEquals(0.0F, quadCurve1.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve1.x2(), 0.01F);
      assertTrue(quadCurve1.isEmpty());
      assertEquals(0.0F, quadCurve1.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve1.y1, 0.01F);
      assertEquals(0.0F, quadCurve1.x1, 0.01F);
      assertEquals(0.0F, quadCurve1.y2, 0.01F);
      assertEquals(0.0F, quadCurve1.x2, 0.01F);
      assertEquals(0.0F, quadCurve1.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve1.ctrly, 0.01F);
      assertFalse(quadCurve0.equals((Object)quadCurve1));
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)quadCurve0.pathIterator((Transform) affineTransform0, 0.0F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1, flatteningPathIterator0.windingRule());
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertFalse(flatteningPathIterator0.isDone());
      assertEquals(0.0F, flatteningPathIterator0.flatness(), 0.01F);
      assertNotNull(flatteningPathIterator0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1.0F), (-3972.21F), 0.0F, 0.0F, 0.0F, 1.0F);
      assertEquals((-1.0F), quadCurve0.x1(), 0.01F);
      assertEquals(1.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-3972.21F), quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals((-1.0F), quadCurve0.x1, 0.01F);
      assertEquals(1.0F, quadCurve0.y2, 0.01F);
      assertEquals((-3972.21F), quadCurve0.y1, 0.01F);
      
      Point point0 = quadCurve0.p2();
      assertEquals((-1.0F), quadCurve0.x1(), 0.01F);
      assertEquals(1.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-3972.21F), quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(1.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertNotNull(point0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals((-1.0F), quadCurve0.x1, 0.01F);
      assertEquals(1.0F, quadCurve0.y2, 0.01F);
      assertEquals((-3972.21F), quadCurve0.y1, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(1.0F, point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1.0F, 1.0F, 1.0F, (-3914.9277F), 1.0F, (-3914.9277F));
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-3914.9277F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(1.0F, quadCurve0.y1(), 0.01F);
      assertEquals(1.0F, quadCurve0.x1(), 0.01F);
      assertEquals(1.0F, quadCurve0.x2(), 0.01F);
      assertEquals(1.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-3914.9277F), quadCurve0.y2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals((-3914.9277F), quadCurve0.ctrly, 0.01F);
      assertEquals((-3914.9277F), quadCurve0.y2, 0.01F);
      assertEquals(1.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(1.0F, quadCurve0.y1, 0.01F);
      assertEquals(1.0F, quadCurve0.x1, 0.01F);
      assertEquals(1.0F, quadCurve0.x2, 0.01F);
      
      Point point0 = quadCurve0.p2();
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-3914.9277F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(1.0F, quadCurve0.y1(), 0.01F);
      assertEquals(1.0F, quadCurve0.x1(), 0.01F);
      assertEquals(1.0F, quadCurve0.x2(), 0.01F);
      assertEquals(1.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-3914.9277F), quadCurve0.y2(), 0.01F);
      assertEquals(1.0F, point0.x(), 0.01F);
      assertEquals((-3914.9277F), point0.y(), 0.01F);
      assertNotNull(point0);
      assertEquals((-3914.9277F), quadCurve0.ctrly, 0.01F);
      assertEquals((-3914.9277F), quadCurve0.y2, 0.01F);
      assertEquals(1.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(1.0F, quadCurve0.y1, 0.01F);
      assertEquals(1.0F, quadCurve0.x1, 0.01F);
      assertEquals(1.0F, quadCurve0.x2, 0.01F);
      assertEquals((-3914.9277F), point0.y, 0.01F);
      assertEquals(1.0F, point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1.0F, (-2795.4426F), 0.0F, (-3242.0F), (-3354.2F), (-1907.5553F));
      assertEquals((-3242.0F), quadCurve0.ctrlY(), 0.01F);
      assertEquals((-2795.4426F), quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(1.0F, quadCurve0.x1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1907.5553F), quadCurve0.y2(), 0.01F);
      assertEquals((-3354.2F), quadCurve0.x2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals((-3354.2F), quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-1907.5553F), quadCurve0.y2, 0.01F);
      assertEquals(1.0F, quadCurve0.x1, 0.01F);
      assertEquals((-3242.0F), quadCurve0.ctrly, 0.01F);
      assertEquals((-2795.4426F), quadCurve0.y1, 0.01F);
      
      Point point0 = quadCurve0.p2();
      assertEquals((-3242.0F), quadCurve0.ctrlY(), 0.01F);
      assertEquals((-2795.4426F), quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(1.0F, quadCurve0.x1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1907.5553F), quadCurve0.y2(), 0.01F);
      assertEquals((-3354.2F), quadCurve0.x2(), 0.01F);
      assertEquals((-1907.5553F), point0.y(), 0.01F);
      assertEquals((-3354.2F), point0.x(), 0.01F);
      assertNotNull(point0);
      assertEquals((-3354.2F), quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-1907.5553F), quadCurve0.y2, 0.01F);
      assertEquals(1.0F, quadCurve0.x1, 0.01F);
      assertEquals((-3242.0F), quadCurve0.ctrly, 0.01F);
      assertEquals((-2795.4426F), quadCurve0.y1, 0.01F);
      assertEquals((-1907.5553F), point0.y, 0.01F);
      assertEquals((-3354.2F), point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(558.4569F, (-1402.3059F), 2313.0F, 2068.9F, (-1.0F), 558.4569F);
      assertEquals(558.4569F, quadCurve0.x1(), 0.01F);
      assertEquals(558.4569F, quadCurve0.y2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1402.3059F), quadCurve0.y1(), 0.01F);
      assertEquals(2313.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1.0F), quadCurve0.x2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(2313.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.y1, 0.01F);
      assertEquals((-1.0F), quadCurve0.x2, 0.01F);
      assertEquals(558.4569F, quadCurve0.x1, 0.01F);
      assertEquals(558.4569F, quadCurve0.y2, 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrly, 0.01F);
      
      Point point0 = quadCurve0.p1();
      assertEquals(558.4569F, quadCurve0.x1(), 0.01F);
      assertEquals(558.4569F, quadCurve0.y2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1402.3059F), quadCurve0.y1(), 0.01F);
      assertEquals(2313.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1.0F), quadCurve0.x2(), 0.01F);
      assertEquals(558.4569F, point0.x(), 0.01F);
      assertEquals((-1402.3059F), point0.y(), 0.01F);
      assertNotNull(point0);
      assertEquals(2313.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.y1, 0.01F);
      assertEquals((-1.0F), quadCurve0.x2, 0.01F);
      assertEquals(558.4569F, quadCurve0.x1, 0.01F);
      assertEquals(558.4569F, quadCurve0.y2, 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrly, 0.01F);
      assertEquals((-1402.3059F), point0.y, 0.01F);
      assertEquals(558.4569F, point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      
      Point point0 = quadCurve0.p1();
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertNotNull(point0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(2943.75F, 558.4569F, 2943.75F, (-1402.3059F), (-913.557F), 2068.9F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals(2943.75F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals(558.4569F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(2943.75F, quadCurve0.x1(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals(2943.75F, quadCurve0.ctrlx, 0.01F);
      assertEquals(2943.75F, quadCurve0.x1, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals(558.4569F, quadCurve0.y1, 0.01F);
      
      Point point0 = quadCurve0.p1();
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals(2943.75F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals(558.4569F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(2943.75F, quadCurve0.x1(), 0.01F);
      assertEquals(558.4569F, point0.y(), 0.01F);
      assertEquals(2943.75F, point0.x(), 0.01F);
      assertNotNull(point0);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals(2943.75F, quadCurve0.ctrlx, 0.01F);
      assertEquals(2943.75F, quadCurve0.x1, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals(558.4569F, quadCurve0.y1, 0.01F);
      assertEquals(2943.75F, point0.x, 0.01F);
      assertEquals(558.4569F, point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      
      float float0 = quadCurve0.flatnessSq();
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      
      quadCurve0.ctrlx = (-4036.0745F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals((-4036.0745F), quadCurve0.ctrlX(), 0.01F);
      
      float float0 = quadCurve0.flatness();
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals((-4036.0745F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(4036.0745F, float0, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals((-4036.0745F), quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1205.0F), 0.0F, (-1205.0F), (-1205.0F), 1.0F, (-1205.0F));
      assertEquals((-1205.0F), quadCurve0.x1(), 0.01F);
      assertEquals((-1205.0F), quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals((-1205.0F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(1.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1205.0F), quadCurve0.ctrlX(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals((-1205.0F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1205.0F), quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(1.0F, quadCurve0.x2, 0.01F);
      assertEquals((-1205.0F), quadCurve0.x1, 0.01F);
      assertEquals((-1205.0F), quadCurve0.y2, 0.01F);
      
      Point point0 = quadCurve0.ctrlP();
      assertEquals((-1205.0F), quadCurve0.x1(), 0.01F);
      assertEquals((-1205.0F), quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals((-1205.0F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(1.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1205.0F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1205.0F), point0.y(), 0.01F);
      assertEquals((-1205.0F), point0.x(), 0.01F);
      assertNotNull(point0);
      assertEquals((-1205.0F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1205.0F), quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(1.0F, quadCurve0.x2, 0.01F);
      assertEquals((-1205.0F), quadCurve0.x1, 0.01F);
      assertEquals((-1205.0F), quadCurve0.y2, 0.01F);
      assertEquals((-1205.0F), point0.x, 0.01F);
      assertEquals((-1205.0F), point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(2905.029F, 2905.029F, 2905.029F, 2905.029F, 2905.029F, 945.1F);
      assertEquals(2905.029F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(2905.029F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(2905.029F, quadCurve0.x2(), 0.01F);
      assertEquals(2905.029F, quadCurve0.y1(), 0.01F);
      assertEquals(2905.029F, quadCurve0.x1(), 0.01F);
      assertEquals(945.1F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertNotNull(quadCurve0);
      assertEquals(2905.029F, quadCurve0.y1, 0.01F);
      assertEquals(2905.029F, quadCurve0.x1, 0.01F);
      assertEquals(945.1F, quadCurve0.y2, 0.01F);
      assertEquals(2905.029F, quadCurve0.ctrlx, 0.01F);
      assertEquals(2905.029F, quadCurve0.x2, 0.01F);
      assertEquals(2905.029F, quadCurve0.ctrly, 0.01F);
      
      Point point0 = quadCurve0.ctrlP();
      assertEquals(2905.029F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(2905.029F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(2905.029F, quadCurve0.x2(), 0.01F);
      assertEquals(2905.029F, quadCurve0.y1(), 0.01F);
      assertEquals(2905.029F, quadCurve0.x1(), 0.01F);
      assertEquals(945.1F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(2905.029F, point0.y(), 0.01F);
      assertEquals(2905.029F, point0.x(), 0.01F);
      assertNotNull(point0);
      assertEquals(2905.029F, quadCurve0.y1, 0.01F);
      assertEquals(2905.029F, quadCurve0.x1, 0.01F);
      assertEquals(945.1F, quadCurve0.y2, 0.01F);
      assertEquals(2905.029F, quadCurve0.ctrlx, 0.01F);
      assertEquals(2905.029F, quadCurve0.x2, 0.01F);
      assertEquals(2905.029F, quadCurve0.ctrly, 0.01F);
      assertEquals(2905.029F, point0.y, 0.01F);
      assertEquals(2905.029F, point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      
      Point point0 = quadCurve0.ctrlP();
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertNotNull(point0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      
      boolean boolean0 = quadCurve0.contains((XY) point0);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0F, (-913.557F), (-348.795F), 558.14386F, 212.53111F, 2068.9F);
      assertEquals((-348.795F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals(212.53111F, quadCurve0.x2(), 0.01F);
      assertEquals((-913.557F), quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(558.14386F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertNotNull(quadCurve0);
      assertEquals((-348.795F), quadCurve0.ctrlx, 0.01F);
      assertEquals(558.14386F, quadCurve0.ctrly, 0.01F);
      assertEquals(212.53111F, quadCurve0.x2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-913.557F), quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals(0.0F, rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.height(), 0.01F);
      assertNotNull(rectangle0);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
      
      boolean boolean0 = quadCurve0.contains((IRectangle) rectangle0);
      assertEquals((-348.795F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals(212.53111F, quadCurve0.x2(), 0.01F);
      assertEquals((-913.557F), quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(558.14386F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals(0.0F, rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.height(), 0.01F);
      assertTrue(boolean0);
      assertEquals((-348.795F), quadCurve0.ctrlx, 0.01F);
      assertEquals(558.14386F, quadCurve0.ctrly, 0.01F);
      assertEquals(212.53111F, quadCurve0.x2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-913.557F), quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      
      boolean boolean0 = quadCurve0.contains((-1402.3059F), 0.0F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertTrue(boolean0);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1.0F), (-3972.21F), 0.0F, 0.0F, 0.0F, 1.0F);
      assertEquals((-3972.21F), quadCurve0.y1(), 0.01F);
      assertEquals((-1.0F), quadCurve0.x1(), 0.01F);
      assertEquals(1.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals((-3972.21F), quadCurve0.y1, 0.01F);
      assertEquals((-1.0F), quadCurve0.x1, 0.01F);
      assertEquals(1.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      
      QuadCurve quadCurve1 = quadCurve0.clone();
      assertEquals((-3972.21F), quadCurve0.y1(), 0.01F);
      assertEquals((-1.0F), quadCurve0.x1(), 0.01F);
      assertEquals(1.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve1.x2(), 0.01F);
      assertEquals((-1.0F), quadCurve1.x1(), 0.01F);
      assertEquals(1.0F, quadCurve1.y2(), 0.01F);
      assertEquals(0.0F, quadCurve1.ctrlY(), 0.01F);
      assertTrue(quadCurve1.isEmpty());
      assertEquals(0.0F, quadCurve1.ctrlX(), 0.01F);
      assertEquals((-3972.21F), quadCurve1.y1(), 0.01F);
      assertNotNull(quadCurve1);
      assertEquals((-3972.21F), quadCurve0.y1, 0.01F);
      assertEquals((-1.0F), quadCurve0.x1, 0.01F);
      assertEquals(1.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve1.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve1.x2, 0.01F);
      assertEquals((-1.0F), quadCurve1.x1, 0.01F);
      assertEquals(1.0F, quadCurve1.y2, 0.01F);
      assertEquals((-3972.21F), quadCurve1.y1, 0.01F);
      assertEquals(0.0F, quadCurve1.ctrly, 0.01F);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(4356.644F, 4356.644F, (-633.8239F), 4356.644F, 4356.644F, 4356.644F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(4356.644F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(4356.644F, quadCurve0.y1(), 0.01F);
      assertEquals(4356.644F, quadCurve0.x1(), 0.01F);
      assertEquals(4356.644F, quadCurve0.y2(), 0.01F);
      assertEquals(4356.644F, quadCurve0.x2(), 0.01F);
      assertEquals((-633.8239F), quadCurve0.ctrlX(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(4356.644F, quadCurve0.ctrly, 0.01F);
      assertEquals(4356.644F, quadCurve0.y1, 0.01F);
      assertEquals(4356.644F, quadCurve0.x1, 0.01F);
      assertEquals(4356.644F, quadCurve0.y2, 0.01F);
      assertEquals((-633.8239F), quadCurve0.ctrlx, 0.01F);
      assertEquals(4356.644F, quadCurve0.x2, 0.01F);
      
      QuadCurve quadCurve1 = quadCurve0.clone();
      assertTrue(quadCurve0.isEmpty());
      assertEquals(4356.644F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(4356.644F, quadCurve0.y1(), 0.01F);
      assertEquals(4356.644F, quadCurve0.x1(), 0.01F);
      assertEquals(4356.644F, quadCurve0.y2(), 0.01F);
      assertEquals(4356.644F, quadCurve0.x2(), 0.01F);
      assertEquals((-633.8239F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-633.8239F), quadCurve1.ctrlX(), 0.01F);
      assertTrue(quadCurve1.isEmpty());
      assertEquals(4356.644F, quadCurve1.ctrlY(), 0.01F);
      assertEquals(4356.644F, quadCurve1.x1(), 0.01F);
      assertEquals(4356.644F, quadCurve1.y2(), 0.01F);
      assertEquals(4356.644F, quadCurve1.y1(), 0.01F);
      assertEquals(4356.644F, quadCurve1.x2(), 0.01F);
      assertNotNull(quadCurve1);
      assertEquals(4356.644F, quadCurve0.ctrly, 0.01F);
      assertEquals(4356.644F, quadCurve0.y1, 0.01F);
      assertEquals(4356.644F, quadCurve0.x1, 0.01F);
      assertEquals(4356.644F, quadCurve0.y2, 0.01F);
      assertEquals((-633.8239F), quadCurve0.ctrlx, 0.01F);
      assertEquals(4356.644F, quadCurve0.x2, 0.01F);
      assertEquals(4356.644F, quadCurve1.x1, 0.01F);
      assertEquals(4356.644F, quadCurve1.y2, 0.01F);
      assertEquals(4356.644F, quadCurve1.y1, 0.01F);
      assertEquals(4356.644F, quadCurve1.x2, 0.01F);
      assertEquals((-633.8239F), quadCurve1.ctrlx, 0.01F);
      assertEquals(4356.644F, quadCurve1.ctrly, 0.01F);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      
      QuadCurve quadCurve1 = quadCurve0.clone();
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve1.isEmpty());
      assertEquals(0.0F, quadCurve1.x1(), 0.01F);
      assertEquals(0.0F, quadCurve1.y2(), 0.01F);
      assertEquals(0.0F, quadCurve1.y1(), 0.01F);
      assertEquals(0.0F, quadCurve1.x2(), 0.01F);
      assertEquals(0.0F, quadCurve1.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve1.ctrlY(), 0.01F);
      assertNotNull(quadCurve1);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve1.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve1.x2, 0.01F);
      assertEquals(0.0F, quadCurve1.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve1.x1, 0.01F);
      assertEquals(0.0F, quadCurve1.y2, 0.01F);
      assertEquals(0.0F, quadCurve1.y1, 0.01F);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1.0F, 1.0F, 1.0F, (-3914.9277F), 1.0F, (-3914.9277F));
      assertEquals((-3914.9277F), quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(1.0F, quadCurve0.x2(), 0.01F);
      assertEquals(1.0F, quadCurve0.y1(), 0.01F);
      assertEquals(1.0F, quadCurve0.x1(), 0.01F);
      assertEquals((-3914.9277F), quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(1.0F, quadCurve0.y1, 0.01F);
      assertEquals(1.0F, quadCurve0.x1, 0.01F);
      assertEquals((-3914.9277F), quadCurve0.ctrly, 0.01F);
      assertEquals(1.0F, quadCurve0.x2, 0.01F);
      assertEquals((-3914.9277F), quadCurve0.y2, 0.01F);
      assertEquals(1.0F, quadCurve0.ctrlx, 0.01F);
      
      QuadCurve quadCurve1 = quadCurve0.clone();
      assertEquals((-3914.9277F), quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(1.0F, quadCurve0.x2(), 0.01F);
      assertEquals(1.0F, quadCurve0.y1(), 0.01F);
      assertEquals(1.0F, quadCurve0.x1(), 0.01F);
      assertEquals((-3914.9277F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(1.0F, quadCurve1.y1(), 0.01F);
      assertEquals(1.0F, quadCurve1.x1(), 0.01F);
      assertEquals((-3914.9277F), quadCurve1.ctrlY(), 0.01F);
      assertEquals(1.0F, quadCurve1.x2(), 0.01F);
      assertEquals((-3914.9277F), quadCurve1.y2(), 0.01F);
      assertEquals(1.0F, quadCurve1.ctrlX(), 0.01F);
      assertTrue(quadCurve1.isEmpty());
      assertNotNull(quadCurve1);
      assertEquals(1.0F, quadCurve0.y1, 0.01F);
      assertEquals(1.0F, quadCurve0.x1, 0.01F);
      assertEquals((-3914.9277F), quadCurve0.ctrly, 0.01F);
      assertEquals(1.0F, quadCurve0.x2, 0.01F);
      assertEquals((-3914.9277F), quadCurve0.y2, 0.01F);
      assertEquals(1.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-3914.9277F), quadCurve1.ctrly, 0.01F);
      assertEquals(1.0F, quadCurve1.ctrlx, 0.01F);
      assertEquals((-3914.9277F), quadCurve1.y2, 0.01F);
      assertEquals(1.0F, quadCurve1.x2, 0.01F);
      assertEquals(1.0F, quadCurve1.y1, 0.01F);
      assertEquals(1.0F, quadCurve1.x1, 0.01F);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      
      Rectangle rectangle0 = new Rectangle(0.0F, (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), rectangle0.width(), 0.01F);
      assertEquals((-1.0F), rectangle0.height(), 0.01F);
      assertEquals((-1.0F), rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertNotNull(rectangle0);
      assertEquals((-1.0F), rectangle0.width, 0.01F);
      assertEquals((-1.0F), rectangle0.height, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals((-1.0F), rectangle0.y, 0.01F);
      
      Rectangle rectangle1 = quadCurve0.bounds(rectangle0);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.height(), 0.01F);
      assertEquals(0.0F, rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals(0.0F, rectangle1.x(), 0.01F);
      assertEquals(0.0F, rectangle1.width(), 0.01F);
      assertEquals(0.0F, rectangle1.y(), 0.01F);
      assertEquals(0.0F, rectangle1.height(), 0.01F);
      assertNotNull(rectangle1);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertEquals(0.0F, rectangle1.height, 0.01F);
      assertEquals(0.0F, rectangle1.y, 0.01F);
      assertEquals(0.0F, rectangle1.x, 0.01F);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1.0E-5F, (-2261.359F), 1.0E-5F, (-1.0F), 1.0E-5F, (-536.0F));
      assertEquals((-1.0F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(1.0E-5F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(1.0E-5F, quadCurve0.x2(), 0.01F);
      assertEquals(1.0E-5F, quadCurve0.x1(), 0.01F);
      assertEquals((-536.0F), quadCurve0.y2(), 0.01F);
      assertEquals((-2261.359F), quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertNotNull(quadCurve0);
      assertEquals((-1.0F), quadCurve0.ctrly, 0.01F);
      assertEquals((-536.0F), quadCurve0.y2, 0.01F);
      assertEquals(1.0E-5F, quadCurve0.x1, 0.01F);
      assertEquals((-2261.359F), quadCurve0.y1, 0.01F);
      assertEquals(1.0E-5F, quadCurve0.ctrlx, 0.01F);
      assertEquals(1.0E-5F, quadCurve0.x2, 0.01F);
      
      Rectangle rectangle0 = new Rectangle(0.0F, (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), rectangle0.height(), 0.01F);
      assertEquals((-1.0F), rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals((-1.0F), rectangle0.width(), 0.01F);
      assertNotNull(rectangle0);
      assertEquals((-1.0F), rectangle0.height, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals((-1.0F), rectangle0.width, 0.01F);
      assertEquals((-1.0F), rectangle0.y, 0.01F);
      
      Rectangle rectangle1 = quadCurve0.bounds(rectangle0);
      assertEquals((-1.0F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(1.0E-5F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(1.0E-5F, quadCurve0.x2(), 0.01F);
      assertEquals(1.0E-5F, quadCurve0.x1(), 0.01F);
      assertEquals((-536.0F), quadCurve0.y2(), 0.01F);
      assertEquals((-2261.359F), quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-2261.359F), rectangle0.y(), 0.01F);
      assertEquals(1.0E-5F, rectangle0.x(), 0.01F);
      assertEquals(2260.359F, rectangle0.height(), 0.01F);
      assertEquals(0.0F, rectangle0.width(), 0.01F);
      assertEquals(2260.359F, rectangle1.height(), 0.01F);
      assertEquals(1.0E-5F, rectangle1.x(), 0.01F);
      assertEquals((-2261.359F), rectangle1.y(), 0.01F);
      assertEquals(0.0F, rectangle1.width(), 0.01F);
      assertNotNull(rectangle1);
      assertEquals((-1.0F), quadCurve0.ctrly, 0.01F);
      assertEquals((-536.0F), quadCurve0.y2, 0.01F);
      assertEquals(1.0E-5F, quadCurve0.x1, 0.01F);
      assertEquals((-2261.359F), quadCurve0.y1, 0.01F);
      assertEquals(1.0E-5F, quadCurve0.ctrlx, 0.01F);
      assertEquals(1.0E-5F, quadCurve0.x2, 0.01F);
      assertEquals(2260.359F, rectangle0.height, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(1.0E-5F, rectangle0.x, 0.01F);
      assertEquals((-2261.359F), rectangle0.y, 0.01F);
      assertEquals(2260.359F, rectangle1.height, 0.01F);
      assertEquals(1.0E-5F, rectangle1.x, 0.01F);
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertEquals((-2261.359F), rectangle1.y, 0.01F);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      
      Rectangle rectangle0 = quadCurve0.bounds();
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(640.395F, rectangle0.width(), 0.01F);
      assertEquals(3471.2058F, rectangle0.height(), 0.01F);
      assertEquals((-1553.952F), rectangle0.x(), 0.01F);
      assertEquals((-1402.3059F), rectangle0.y(), 0.01F);
      assertNotNull(rectangle0);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-1402.3059F), rectangle0.y, 0.01F);
      assertEquals((-1553.952F), rectangle0.x, 0.01F);
      assertEquals(3471.2058F, rectangle0.height, 0.01F);
      assertEquals(640.395F, rectangle0.width, 0.01F);
      
      Rectangle rectangle1 = quadCurve0.bounds(rectangle0);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(640.395F, rectangle0.width(), 0.01F);
      assertEquals(3471.2058F, rectangle0.height(), 0.01F);
      assertEquals((-1553.952F), rectangle0.x(), 0.01F);
      assertEquals((-1402.3059F), rectangle0.y(), 0.01F);
      assertEquals(3471.2058F, rectangle1.height(), 0.01F);
      assertEquals((-1553.952F), rectangle1.x(), 0.01F);
      assertEquals(640.395F, rectangle1.width(), 0.01F);
      assertEquals((-1402.3059F), rectangle1.y(), 0.01F);
      assertNotNull(rectangle1);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-1402.3059F), rectangle0.y, 0.01F);
      assertEquals((-1553.952F), rectangle0.x, 0.01F);
      assertEquals(3471.2058F, rectangle0.height, 0.01F);
      assertEquals(640.395F, rectangle0.width, 0.01F);
      assertEquals(3471.2058F, rectangle1.height, 0.01F);
      assertEquals((-1553.952F), rectangle1.x, 0.01F);
      assertEquals(640.395F, rectangle1.width, 0.01F);
      assertEquals((-1402.3059F), rectangle1.y, 0.01F);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-924.8907F), 2068.9F, (-924.8907F), 2068.9F);
      assertEquals((-924.8907F), quadCurve0.x2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlY(), 0.01F);
      assertEquals((-924.8907F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(2068.9F, quadCurve0.ctrly, 0.01F);
      assertEquals((-924.8907F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-924.8907F), quadCurve0.x2, 0.01F);
      
      Rectangle rectangle0 = quadCurve0.bounds();
      assertEquals((-924.8907F), quadCurve0.x2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlY(), 0.01F);
      assertEquals((-924.8907F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals((-1553.952F), rectangle0.x(), 0.01F);
      assertEquals(558.14386F, rectangle0.y(), 0.01F);
      assertEquals(1510.7561F, rectangle0.height(), 0.01F);
      assertEquals(629.06134F, rectangle0.width(), 0.01F);
      assertNotNull(rectangle0);
      assertEquals(2068.9F, quadCurve0.ctrly, 0.01F);
      assertEquals((-924.8907F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-924.8907F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), rectangle0.x, 0.01F);
      assertEquals(1510.7561F, rectangle0.height, 0.01F);
      assertEquals(558.14386F, rectangle0.y, 0.01F);
      assertEquals(629.06134F, rectangle0.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(922.0F, 2068.9F, 2068.9F, (-421.096F), 922.0F, (-6915.6284F));
      assertEquals((-6915.6284F), quadCurve0.y2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-421.096F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(922.0F, quadCurve0.x2(), 0.01F);
      assertEquals(922.0F, quadCurve0.x1(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(2068.9F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-6915.6284F), quadCurve0.y2, 0.01F);
      assertEquals(922.0F, quadCurve0.x2, 0.01F);
      assertEquals(922.0F, quadCurve0.x1, 0.01F);
      assertEquals((-421.096F), quadCurve0.ctrly, 0.01F);
      assertEquals(2068.9F, quadCurve0.y1, 0.01F);
      
      Rectangle rectangle0 = quadCurve0.bounds();
      assertEquals((-6915.6284F), quadCurve0.y2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-421.096F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(922.0F, quadCurve0.x2(), 0.01F);
      assertEquals(922.0F, quadCurve0.x1(), 0.01F);
      assertEquals(1146.8999F, rectangle0.width(), 0.01F);
      assertEquals(8984.528F, rectangle0.height(), 0.01F);
      assertEquals(922.0F, rectangle0.x(), 0.01F);
      assertEquals((-6915.6284F), rectangle0.y(), 0.01F);
      assertNotNull(rectangle0);
      assertEquals(2068.9F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-6915.6284F), quadCurve0.y2, 0.01F);
      assertEquals(922.0F, quadCurve0.x2, 0.01F);
      assertEquals(922.0F, quadCurve0.x1, 0.01F);
      assertEquals((-421.096F), quadCurve0.ctrly, 0.01F);
      assertEquals(2068.9F, quadCurve0.y1, 0.01F);
      assertEquals((-6915.6284F), rectangle0.y, 0.01F);
      assertEquals(1146.8999F, rectangle0.width, 0.01F);
      assertEquals(8984.528F, rectangle0.height, 0.01F);
      assertEquals(922.0F, rectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      
      Rectangle rectangle0 = quadCurve0.bounds();
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals(0.0F, rectangle0.height(), 0.01F);
      assertNotNull(rectangle0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
      
      boolean boolean0 = quadCurve0.intersects((IRectangle) rectangle0);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals(0.0F, rectangle0.height(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      
      // Undeclared exception!
      try { 
        quadCurve0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractQuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      
      // Undeclared exception!
      try { 
        quadCurve0.contains((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractQuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      
      // Undeclared exception!
      try { 
        quadCurve0.contains((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractQuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      
      // Undeclared exception!
      try { 
        quadCurve0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractQuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0F, 2068.9F, 0.0F, 2068.9F, 2068.9F, 0.0F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(2068.9F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(2068.9F, quadCurve0.x2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y1(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(2068.9F, quadCurve0.x2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y1, 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      
      boolean boolean0 = quadCurve0.intersects(0.0F, 0.0F, 2068.9F, 2068.9F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(2068.9F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertEquals(2068.9F, quadCurve0.x2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y1(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(2068.9F, quadCurve0.x2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y1, 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(922.0F, 2068.9F, 2068.9F, (-421.096F), 922.0F, (-6915.6284F));
      assertTrue(quadCurve0.isEmpty());
      assertEquals(922.0F, quadCurve0.x2(), 0.01F);
      assertEquals(922.0F, quadCurve0.x1(), 0.01F);
      assertEquals((-421.096F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y1(), 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-6915.6284F), quadCurve0.y2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(922.0F, quadCurve0.x1, 0.01F);
      assertEquals((-421.096F), quadCurve0.ctrly, 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-6915.6284F), quadCurve0.y2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y1, 0.01F);
      assertEquals(922.0F, quadCurve0.x2, 0.01F);
      
      boolean boolean0 = quadCurve0.contains((-313.432F), 0.0F, 2068.9F, 711.84155F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(922.0F, quadCurve0.x2(), 0.01F);
      assertEquals(922.0F, quadCurve0.x1(), 0.01F);
      assertEquals((-421.096F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y1(), 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlX(), 0.01F);
      assertEquals((-6915.6284F), quadCurve0.y2(), 0.01F);
      assertFalse(boolean0);
      assertEquals(922.0F, quadCurve0.x1, 0.01F);
      assertEquals((-421.096F), quadCurve0.ctrly, 0.01F);
      assertEquals(2068.9F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-6915.6284F), quadCurve0.y2, 0.01F);
      assertEquals(2068.9F, quadCurve0.y1, 0.01F);
      assertEquals(922.0F, quadCurve0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(4356.644F, 4356.644F, (-633.8239F), 4356.644F, 4356.644F, 4356.644F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(4356.644F, quadCurve0.x2(), 0.01F);
      assertEquals(4356.644F, quadCurve0.y1(), 0.01F);
      assertEquals(4356.644F, quadCurve0.x1(), 0.01F);
      assertEquals(4356.644F, quadCurve0.y2(), 0.01F);
      assertEquals((-633.8239F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(4356.644F, quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(4356.644F, quadCurve0.ctrly, 0.01F);
      assertEquals(4356.644F, quadCurve0.x1, 0.01F);
      assertEquals(4356.644F, quadCurve0.y2, 0.01F);
      assertEquals((-633.8239F), quadCurve0.ctrlx, 0.01F);
      assertEquals(4356.644F, quadCurve0.x2, 0.01F);
      assertEquals(4356.644F, quadCurve0.y1, 0.01F);
      
      Dimension dimension0 = new Dimension(4356.644F, 4356.644F);
      assertEquals(4356.644F, dimension0.height(), 0.01F);
      assertEquals(4356.644F, dimension0.width(), 0.01F);
      assertNotNull(dimension0);
      assertEquals(4356.644F, dimension0.height, 0.01F);
      assertEquals(4356.644F, dimension0.width, 0.01F);
      
      Rectangle rectangle0 = new Rectangle(dimension0);
      assertEquals(4356.644F, dimension0.height(), 0.01F);
      assertEquals(4356.644F, dimension0.width(), 0.01F);
      assertEquals(4356.644F, rectangle0.height(), 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals(4356.644F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.y(), 0.01F);
      assertNotNull(rectangle0);
      assertEquals(4356.644F, dimension0.height, 0.01F);
      assertEquals(4356.644F, dimension0.width, 0.01F);
      assertEquals(4356.644F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(4356.644F, rectangle0.height, 0.01F);
      
      Rectangle rectangle1 = quadCurve0.bounds(rectangle0);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(4356.644F, quadCurve0.x2(), 0.01F);
      assertEquals(4356.644F, quadCurve0.y1(), 0.01F);
      assertEquals(4356.644F, quadCurve0.x1(), 0.01F);
      assertEquals(4356.644F, quadCurve0.y2(), 0.01F);
      assertEquals((-633.8239F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(4356.644F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(4356.644F, dimension0.height(), 0.01F);
      assertEquals(4356.644F, dimension0.width(), 0.01F);
      assertEquals(4990.468F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.height(), 0.01F);
      assertEquals((-633.8239F), rectangle0.x(), 0.01F);
      assertEquals(4356.644F, rectangle0.y(), 0.01F);
      assertEquals((-633.8239F), rectangle1.x(), 0.01F);
      assertEquals(0.0F, rectangle1.height(), 0.01F);
      assertEquals(4356.644F, rectangle1.y(), 0.01F);
      assertEquals(4990.468F, rectangle1.width(), 0.01F);
      assertNotNull(rectangle1);
      assertEquals(4356.644F, quadCurve0.ctrly, 0.01F);
      assertEquals(4356.644F, quadCurve0.x1, 0.01F);
      assertEquals(4356.644F, quadCurve0.y2, 0.01F);
      assertEquals((-633.8239F), quadCurve0.ctrlx, 0.01F);
      assertEquals(4356.644F, quadCurve0.x2, 0.01F);
      assertEquals(4356.644F, quadCurve0.y1, 0.01F);
      assertEquals(4356.644F, dimension0.height, 0.01F);
      assertEquals(4356.644F, dimension0.width, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
      assertEquals(4356.644F, rectangle0.y, 0.01F);
      assertEquals((-633.8239F), rectangle0.x, 0.01F);
      assertEquals(4990.468F, rectangle0.width, 0.01F);
      assertEquals((-633.8239F), rectangle1.x, 0.01F);
      assertEquals(0.0F, rectangle1.height, 0.01F);
      assertEquals(4356.644F, rectangle1.y, 0.01F);
      assertEquals(4990.468F, rectangle1.width, 0.01F);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      
      boolean boolean0 = quadCurve0.contains(0.0F, 0.0F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      
      IdentityTransform identityTransform0 = new IdentityTransform();
      assertEquals(1.0F, identityTransform0.scaleY(), 0.01F);
      assertEquals(0.0F, identityTransform0.ty(), 0.01F);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0F, identityTransform0.scaleX(), 0.01F);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0F, identityTransform0.rotation(), 0.01F);
      assertEquals(1.0F, identityTransform0.uniformScale(), 0.01F);
      assertEquals(0.0F, identityTransform0.tx(), 0.01F);
      assertNotNull(identityTransform0);
      assertEquals(0, IdentityTransform.GENERALITY);
      
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0);
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleY(), 0.01F);
      assertEquals(0.0F, identityTransform0.ty(), 0.01F);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0F, identityTransform0.scaleX(), 0.01F);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0F, identityTransform0.rotation(), 0.01F);
      assertEquals(1.0F, identityTransform0.uniformScale(), 0.01F);
      assertEquals(0.0F, identityTransform0.tx(), 0.01F);
      assertFalse(pathIterator0.isDone());
      assertEquals(1, pathIterator0.windingRule());
      assertNotNull(pathIterator0);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals(0, IdentityTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertNotNull(quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, (-1.0F), 1275.0F, 1868.745F);
      assertEquals(1275.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1868.745F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertNotNull(affineTransform0);
      assertEquals(1868.745F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1275.0F, affineTransform0.tx, 0.01F);
      
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, affineTransform0);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1275.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1868.745F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertNotNull(abstractQuadCurve_Iterator0);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(1868.745F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1275.0F, affineTransform0.tx, 0.01F);
      
      float[] floatArray0 = new float[9];
      int int0 = abstractQuadCurve_Iterator0.currentSegment(floatArray0);
      assertEquals(0.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1275.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1868.745F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertEquals(0, int0);
      assertArrayEquals(new float[] {1275.0F, 1868.745F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(1868.745F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1275.0F, affineTransform0.tx, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0F, 1835.0F, 0.0F, 1835.0F, 1835.0F, 0.0F);
      assertEquals(1835.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1835.0F, quadCurve0.y1(), 0.01F);
      assertEquals(1835.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(1835.0F, quadCurve0.x2, 0.01F);
      assertEquals(1835.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(1835.0F, quadCurve0.ctrly, 0.01F);
      
      boolean boolean0 = quadCurve0.intersects(895.67F, 895.67F, 0.0F, 0.0F);
      assertEquals(1835.0F, quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1835.0F, quadCurve0.y1(), 0.01F);
      assertEquals(1835.0F, quadCurve0.ctrlY(), 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlX(), 0.01F);
      assertTrue(boolean0);
      assertEquals(1835.0F, quadCurve0.x2, 0.01F);
      assertEquals(1835.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(1835.0F, quadCurve0.ctrly, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      
      boolean boolean0 = quadCurve0.intersects((-3.1415927F), 3.4028235E38F, 435.01627F, 0.0F);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertFalse(boolean0);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(2068.9F, (-913.557F), (-1402.3059F), 435.01627F, (-1553.952F), 3.4028235E38F);
      assertEquals(3.4028235E38F, quadCurve0.y2(), 0.01F);
      assertEquals((-913.557F), quadCurve0.y1(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.x1(), 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(435.01627F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertNotNull(quadCurve0);
      assertEquals(435.01627F, quadCurve0.ctrly, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x2, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlx, 0.01F);
      assertEquals(2068.9F, quadCurve0.x1, 0.01F);
      assertEquals(3.4028235E38F, quadCurve0.y2, 0.01F);
      assertEquals((-913.557F), quadCurve0.y1, 0.01F);
      
      boolean boolean0 = quadCurve0.contains(0.0F, 0.0F, (-1003.0F), 0.0F);
      assertEquals(3.4028235E38F, quadCurve0.y2(), 0.01F);
      assertEquals((-913.557F), quadCurve0.y1(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.x1(), 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlX(), 0.01F);
      assertEquals(435.01627F, quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertTrue(boolean0);
      assertEquals(435.01627F, quadCurve0.ctrly, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x2, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlx, 0.01F);
      assertEquals(2068.9F, quadCurve0.x1, 0.01F);
      assertEquals(3.4028235E38F, quadCurve0.y2, 0.01F);
      assertEquals((-913.557F), quadCurve0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      
      boolean boolean0 = quadCurve0.contains(0.0F, 0.0F, (-1003.0F), 0.0F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertFalse(boolean0);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      
      float float0 = quadCurve0.flatnessSq();
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(3843363.0F, float0, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertNotNull(quadCurve0);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      
      QuadCurve quadCurve1 = quadCurve0.clone();
      assertEquals((-913.557F), quadCurve0.x2(), 0.01F);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1553.952F), quadCurve0.ctrlX(), 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1(), 0.01F);
      assertEquals(2068.9F, quadCurve0.y2(), 0.01F);
      assertEquals(558.14386F, quadCurve0.y1(), 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrlY(), 0.01F);
      assertTrue(quadCurve1.isEmpty());
      assertEquals((-913.557F), quadCurve1.x2(), 0.01F);
      assertEquals((-1553.952F), quadCurve1.x1(), 0.01F);
      assertEquals(2068.9F, quadCurve1.y2(), 0.01F);
      assertEquals(558.14386F, quadCurve1.y1(), 0.01F);
      assertEquals((-1553.952F), quadCurve1.ctrlX(), 0.01F);
      assertEquals((-1402.3059F), quadCurve1.ctrlY(), 0.01F);
      assertNotNull(quadCurve1);
      assertEquals(558.14386F, quadCurve0.y1, 0.01F);
      assertEquals(2068.9F, quadCurve0.y2, 0.01F);
      assertEquals((-913.557F), quadCurve0.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve0.x1, 0.01F);
      assertEquals((-1402.3059F), quadCurve0.ctrly, 0.01F);
      assertEquals((-1553.952F), quadCurve0.ctrlx, 0.01F);
      assertEquals(558.14386F, quadCurve1.y1, 0.01F);
      assertEquals(2068.9F, quadCurve1.y2, 0.01F);
      assertEquals((-1553.952F), quadCurve1.ctrlx, 0.01F);
      assertEquals((-913.557F), quadCurve1.x2, 0.01F);
      assertEquals((-1553.952F), quadCurve1.x1, 0.01F);
      assertEquals((-1402.3059F), quadCurve1.ctrly, 0.01F);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      Rectangle rectangle0 = quadCurve0.bounds();
      boolean boolean0 = quadCurve0.contains((IRectangle) rectangle0);
      assertFalse(boolean0);
      assertEquals((-1553.952F), rectangle0.x, 0.01F);
      assertEquals((-1402.3059F), rectangle0.y, 0.01F);
      assertEquals(3471.2058F, rectangle0.height, 0.01F);
      assertEquals(640.395F, rectangle0.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      Rectangle rectangle0 = quadCurve0.bounds();
      boolean boolean0 = quadCurve0.intersects((IRectangle) rectangle0);
      assertEquals((-1402.3059F), rectangle0.y, 0.01F);
      assertEquals(640.395F, rectangle0.width, 0.01F);
      assertEquals((-1553.952F), rectangle0.x, 0.01F);
      assertEquals(3471.2058F, rectangle0.height, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1553.952F), 558.14386F, (-1553.952F), (-1402.3059F), (-913.557F), 2068.9F);
      Point point0 = quadCurve0.p1();
      assertEquals(558.14386F, point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      float float0 = quadCurve0.flatness();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Point point0 = quadCurve0.p2();
      assertEquals(0.0F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      boolean boolean0 = quadCurve0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      // Undeclared exception!
      try { 
        quadCurve0.pathIterator((Transform) null, (-2315.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Flatness is less then zero
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1.0E-5F, 476.92932F, 1.0F, 1.0E-5F, 476.92932F, (-1313.0F));
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, identityTransform0);
      int int0 = abstractQuadCurve_Iterator0.windingRule();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(2068.9F, (-913.557F), (-1402.3059F), 435.01627F, (-1553.952F), 3.4028235E38F);
      AffineTransform affineTransform0 = new AffineTransform((-1553.952F), 2068.9F, 522.0F, (-1553.952F), 0.0F, 7.0F);
      Vector vector0 = affineTransform0.translation();
      boolean boolean0 = quadCurve0.contains((XY) vector0);
      assertTrue(boolean0);
  }
}
