/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:27:37 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.GeometryUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeometryUtil_ESTest extends GeometryUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GeometryUtil.intersectLineAndQuad(2.0F, 2.0F, 2.0F, 2.0F, (-48.69F), 0.75F, (-14.0F), (-14.0F), 3594768.8F, 10.0F, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[] floatArray0 = new float[6];
      GeometryUtil.intersectLines(1.0E-14F, 0.0F, 0.0F, 9.0F, 0.0F, 1.0E-14F, 0.0F, 0.0F, floatArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[] floatArray0 = new float[4];
      GeometryUtil.intersectLinesWithParams((-3.1415927F), 0.0F, 10.0F, 0.5F, (-3.1415927F), 0.0F, 0.0F, 0.0F, floatArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[] floatArray0 = new float[7];
      GeometryUtil.intersectLinesWithParams(0.0F, 0.0F, 2397.6082F, 2397.6082F, 2397.6082F, 2991.91F, 2397.6082F, 0.0F, floatArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[] floatArray0 = new float[9];
      GeometryUtil.subQuad(floatArray0, 1575.0548F, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[] floatArray0 = new float[8];
      GeometryUtil.subCubic(floatArray0, 2364.0F, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GeometryUtil.quad(0.0F, 0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GeometryUtil.quad((-372.08F), (-1.0F), 828.3F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GeometryUtil.line(0.0F, 2038.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GeometryUtil.line((-14.0F), 6.0F, 2359.6F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GeometryUtil.cubic(1.0E-14F, 1.0E-14F, 922.362F, 922.362F, 2466.0F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GeometryUtil.cubic(3.1415927F, 3.1415927F, 0.0F, 0.0F, (-720.22F));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryUtil.subCubic((float[]) null, 3802.0F, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[5];
      // Undeclared exception!
      GeometryUtil.intersectQuads(0.95829797F, 0.95829797F, 0.95829797F, 0.95829797F, 57.295776F, 920.38F, (-3101.0F), 57.295776F, 920.38F, (-1990.71F), 1.0F, (-14.0F), floatArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryUtil.intersectQuads((-1464.2422F), 1980.2076F, (-1464.2422F), (-2756.8F), (-5345.0093F), 54.0F, 2593.3809F, 54.0F, (-2756.8F), 1.0F, 955.99146F, (-2349.102F), (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectQuads(57.295776F, 0.0F, 0.0F, 0.0F, 57.295776F, 57.295776F, 374.0F, 0.0F, 57.295776F, 0.0F, 0.0F, 1980.2076F, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryUtil.intersectQuadAndCubic(1860.0F, 1860.0F, 535.44F, 535.44F, 535.44F, 1802.173F, 1860.0F, 241.42535F, (-1.0E-10F), 2123.8674F, 1860.0F, 535.44F, (-1.0E-10F), 1802.173F, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectQuadAndCubic((-2079.1516F), (-2079.1516F), (-2079.1516F), (-2079.1516F), 1945.451F, 10.0F, (-2008.89F), (-1374.4F), (-2008.89F), 0.0F, (-2079.1516F), 10.0F, 2.7182817F, 10.0F, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLinesWithParams((-304.66F), (-952.5731F), 613.957F, 1855.254F, 613.957F, (-952.5731F), 0.48460025F, 0.48460025F, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLinesWithParams((-3069.0F), 1.0F, 0.9498397F, 0.9498397F, 2.0F, 2.0F, 2802.9978F, 1986.0F, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLines((-344.0F), (-1.0E-5F), (-1397.9F), (-443.858F), 4.0F, (-304.66F), (-443.858F), (-443.858F), (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLines(0.95086473F, 1081.76F, 1.0E-14F, 1081.76F, 1.0F, 0.020533059F, 943.99F, (-2430.0F), floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLineAndCubic(862.93835F, 0.0F, 223.07736F, 0.0F, 223.07736F, 0.0F, 840.312F, 840.312F, 862.93835F, 0.0F, 840.312F, (-1707.0F), (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLineAndCubic(1010.92F, 10.0F, (-619.94F), (-0.14345689F), (-0.26099026F), 2551.0764F, 0.0F, 3.0F, 6.0F, (-1857.0F), 1010.92F, 2.0F, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      GeometryUtil.intersectCubics((-0.23489924F), (-1.0E-10F), 94.0F, (-0.23489924F), 5.0F, 94.0F, 4435.5F, 441.847F, 204.3F, 204.3F, (-3017.012F), 441.847F, (-3447.3757F), 7779.117F, 3855.667F, 204.3F, floatArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryUtil.intersectCubics(1.0F, 2038.0F, (-2440.1384F), (-867.20123F), 2038.0F, (-4568.376F), 2038.0F, 1166.4436F, 2038.0F, (-2177.0F), 0.0F, (-2.0F), (-2.0F), 0.0F, (-2.0F), (-4568.376F), (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectCubics(0.95086473F, 1.0E-14F, 10.0F, 1.0F, 370.9947F, 725.925F, 326.7224F, 1.0E-14F, 10.0F, 0.9995669F, 10.0F, (-4544.18F), 0.95086473F, 3791.0F, (-2469.626F), 1560.5662F, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try { 
        GeometryUtil.subCubic(floatArray0, (-304.66F), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[] floatArray0 = new float[6];
      GeometryUtil.intersectLines(0.0F, 0.0F, 0.0F, 2320.74F, 1846.2F, 460.6923F, (-1251.5779F), (-2210.457F), floatArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[] floatArray0 = new float[6];
      GeometryUtil.intersectLinesWithParams(0.25F, 10.0F, 9.0F, 10.0F, 0.0F, (-996.3651F), (-996.3651F), 0.0F, floatArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[7];
      GeometryUtil.intersectLinesWithParams((-2067.8271F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2528.0F, floatArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GeometryUtil.cubic(0.0F, 0.0F, 6.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GeometryUtil.line(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[] floatArray0 = new float[4];
      GeometryUtil.subCubic(floatArray0, (-1.7607902E-4F), true);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        GeometryUtil.subQuad(floatArray0, (-893.59F), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[] floatArray0 = new float[6];
      GeometryUtil.subQuad(floatArray0, 493.6F, false);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[] floatArray0 = new float[7];
      GeometryUtil.intersectCubics(0.0F, 1.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 3791.0F, 3791.0F, 943.99F, 10.0F, 0.0F, 0.0F, 0.0F, 1.0F, floatArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[] floatArray0 = new float[7];
      GeometryUtil.intersectQuadAndCubic(3.0F, 3.0F, 1361.5289F, 532.2324F, 1361.5289F, (-342.3269F), Float.NaN, 0.0F, Float.NaN, (-2566.44F), (-342.3269F), (-1.0E-10F), (-4302.8F), 1361.5289F, floatArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      GeometryUtil.intersectQuadAndCubic(0.25F, 1, 1165.3193F, 0, (-1.0E-5F), (-1.0E-10F), 0.25F, 1865.0F, (-1.0E-5F), 0.5F, 27.0F, (-0.5756073F), (-1.0E-10F), (-1.0F), floatArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = GeometryUtil.intersectQuads(464.1F, 4109.531F, 408.5469F, 408.5469F, 408.5469F, (-1.0F), 0.0F, (-2967.5396F), 0.0F, 408.5469F, 6.2831855F, 2320.74F, floatArray0);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {(-0.5169539F), (-2.113119F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int int0 = GeometryUtil.intersectLineAndCubic(10.0F, (-1.0F), 701.9301F, 10.0F, (-304.66F), 10.0F, 8.3404365E9F, 701.9301F, (-1.0F), (-1.0F), (-304.66F), 10.0F, floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = GeometryUtil.intersectLineAndCubic(1.0F, 1.0F, 0.34826508F, 0, (-961.945F), 1.0F, 1119.758F, 1400.284F, 1119.758F, 0.34826508F, (-334.675F), 1.0F, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int int0 = GeometryUtil.intersectLineAndCubic(498.4554F, 1.0F, (-1036.0F), (-1.0F), 10.0F, 970.44104F, 0.40615442F, (-1274.8236F), (-662.50946F), 498.4554F, (-3695.0F), (-2588.0894F), floatArray0);
      assertArrayEquals(new float[] {0.20588969F, 0.38609418F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = GeometryUtil.intersectLineAndQuad((-1.0F), 0.0F, (-1.0F), 615.7733F, (-1.0F), (-1.0F), (-1.0F), 615.7733F, 615.7733F, 6.0F, floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLineAndQuad(1.0E-14F, (-1.0F), 0.25F, 8718.194F, 2.7182817F, 3.0F, (-8.786655F), 1.0F, 0.0F, 349.82773F, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.f.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = GeometryUtil.intersectLineAndQuad((-662.50946F), 2193.0F, (-662.50946F), (-3489.03F), 6.0F, (-14.0F), 2.0F, 2193.0F, (-2627.656F), (-1019.9638F), floatArray0);
      assertArrayEquals(new float[] {0.5030645F, 0.23902103F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = GeometryUtil.intersectLineAndQuad(1.0E-14F, 0.0F, (-14.0F), 0.0F, 0.0F, (-2381.838F), 0.0F, 1.0E-14F, 1712.7219F, (-14.0F), floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int int0 = GeometryUtil.intersectLineAndQuad(4992.5044F, 970.44104F, 1.0F, (-133.797F), (-1321.1226F), (-1036.0F), (-837.8358F), (-1455.3344F), (-2588.0894F), 2549.7F, floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = GeometryUtil.intersectLines(968.338F, 6.0F, 968.338F, 1293.54F, 6881944.5F, 0.0F, 968.338F, 57.295776F, floatArray0);
      assertArrayEquals(new float[] {968.338F, 57.29578F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[] floatArray0 = new float[4];
      GeometryUtil.intersectLines(0.0F, 57.295776F, 0.0F, (-673.878F), 0.0F, 453.61F, 1164.847F, 57.295776F, floatArray0);
      assertArrayEquals(new float[] {0.0F, 453.61F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[] floatArray0 = new float[3];
      GeometryUtil.intersectLines((-3.1415927F), (-2462.584F), (-2462.584F), (-3.1415927F), (-2462.584F), (-3.1415927F), 0.0F, 1782.9722F, floatArray0);
      assertArrayEquals(new float[] {(-2462.5837F), (-3.141647F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float[] floatArray0 = new float[8];
      GeometryUtil.intersectLines(0.0F, 968.338F, (-334.675F), 0.0F, (-334.675F), (-334.675F), 0.0F, (-334.675F), floatArray0);
      assertArrayEquals(new float[] {(-450.34467F), (-334.675F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = GeometryUtil.intersectLines(1.0039278E-14F, (-4126.21F), 0.0F, 1.0E-14F, 0.0F, 0.0F, (-1.0F), 1712.7219F, floatArray0);
      assertArrayEquals(new float[] {2.4330506E-32F, (-4.167139E-29F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float[] floatArray0 = new float[2];
      GeometryUtil.intersectLines((-1016.0F), 2549.7F, 0.0F, 0.40615442F, 453.61F, 10.0F, 57.295776F, 1736.3862F, floatArray0);
      assertArrayEquals(new float[] {1075.0472F, (-2697.046F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = GeometryUtil.intersectLines((-304.66F), (-304.66F), (-304.66F), (-304.66F), (-304.66F), (-304.66F), (-304.66F), (-304.66F), floatArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = GeometryUtil.intersectLines((-304.66F), (-619.94F), (-619.94F), (-304.66F), (-304.66F), (-304.66F), (-304.66F), (-304.66F), floatArray0);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = GeometryUtil.intersectLines((-1.0F), (-619.94F), 0, (-2.0F), 0.0F, (-9.7067F), 0, 54.0F, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-2.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      float[] floatArray0 = new float[4];
      GeometryUtil.intersectLines((-304.66F), (-619.94F), (-619.94F), (-304.66F), (-304.66F), (-304.66F), 0.0F, 0.0F, floatArray0);
      assertArrayEquals(new float[] {(-462.3F), (-462.3F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = GeometryUtil.intersectLinesWithParams(6.0F, 1943.7F, 2364.0F, 0, 1049191.1F, 968.338F, 3013.986F, 1, floatArray0);
      assertArrayEquals(new float[] {0.99979496F, 1.0006218F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = GeometryUtil.intersectLinesWithParams(3.1415927F, (-89.4984F), (-2477.11F), 3.1415927F, 0.25F, (-1.0F), 3907.6855F, (-1.0E-5F), floatArray0);
      assertArrayEquals(new float[] {0.9488008F, (-0.60151297F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = GeometryUtil.intersectLinesWithParams(6881944.5F, (-619.94F), (-879.0F), 0.0F, 0.0F, (-879.0F), (-1252.025F), 0.5F, floatArray0);
      assertArrayEquals(new float[] {1.000054F, 0.9989297F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      float[] floatArray0 = new float[5];
      GeometryUtil.intersectLinesWithParams(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GeometryUtil geometryUtil0 = new GeometryUtil();
      assertEquals(1.0E-14F, GeometryUtil.EPSILON, 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      float float0 = GeometryUtil.quad(0.5F, (-619.94F), 2285.0F, (-619.94F));
      assertEquals(832.53F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = GeometryUtil.intersectLineAndCubic((-3.0F), 1.0E-14F, (-3.0F), 519.5858F, 2.0F, 1.0002459F, 2.0F, 1.0E-14F, 2.0F, 2582.1F, (-3073.6519F), 0.0F, floatArray0);
      assertArrayEquals(new float[] {0.11753199F, 0.18306199F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }
}
