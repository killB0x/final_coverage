/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:06:53 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.CubicCurve;
import pythagoras.f.CubicCurves;
import pythagoras.f.ICubicCurve;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CubicCurves_ESTest extends CubicCurves_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[3] = 1591.622F;
      // Undeclared exception!
      try { 
        CubicCurves.subdivide(floatArray0, 0, floatArray0, (-140), floatArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -140 out of bounds for length 8
         //
         verifyException("pythagoras.f.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (-2434.265F);
      CubicCurves.subdivide(floatArray0, 0, floatArray0, 0, floatArray0, 0);
      assertArrayEquals(new float[] {(-912.84937F), 0.0F, (-608.5662F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[5] = 0.017453292F;
      CubicCurves.subdivide(floatArray0, 0, floatArray0, 0, floatArray0, 0);
      assertArrayEquals(new float[] {0.0F, 0.006544985F, 0.0F, 0.008726646F, 0.0F, 0.008726646F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[4] = 1.0F;
      // Undeclared exception!
      try { 
        CubicCurves.subdivide(floatArray0, 0, floatArray0, (-140), floatArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -140 out of bounds for length 8
         //
         verifyException("pythagoras.f.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1182.9825F, 2.0F, 1182.9825F, 947.573F, 2.0F, 2.0F, 0.0F, 0.0F);
      CubicCurves.subdivide((ICubicCurve) cubicCurve0, cubicCurve0, cubicCurve0);
      assertEquals(1.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(237.89325F, cubicCurve0.ctrlY1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 7994773.0F;
      floatArray0[2] = 0.99999F;
      int int0 = CubicCurves.solveCubic(floatArray0, floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-365.83966F);
      int int0 = CubicCurves.solveCubic(floatArray0, floatArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 54.0F;
      floatArray0[2] = 54.0F;
      int int0 = CubicCurves.solveCubic(floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-365.83966F);
      int int0 = CubicCurves.solveCubic(floatArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (-2434.265F);
      float float0 = CubicCurves.flatnessSq(floatArray0, 0);
      assertEquals(5925645.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float float0 = CubicCurves.flatnessSq((float) 0, (float) 0, (float) 0, (float) 0, (float) 0, (float) 0, (float) 0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) (-278);
      float float0 = CubicCurves.flatness(floatArray0, 0);
      assertEquals(278.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float float0 = CubicCurves.flatness((float) (-1), (float) (-1), (float) (-1), (float) (-1), (float) (-1), (float) (-1), (float) (-1), (float) (-1));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.subdivide((float[]) null, 0, (float[]) null, 0, (float[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      // Undeclared exception!
      try { 
        CubicCurves.subdivide((ICubicCurve) null, cubicCurve0, cubicCurve0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.solveCubic((float[]) null, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        CubicCurves.solveCubic(floatArray0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 1
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.solveCubic((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        CubicCurves.solveCubic(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 0
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.flatnessSq((float[]) null, (-278));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try { 
        CubicCurves.flatnessSq(floatArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.f.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.flatness((float[]) null, (-278));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try { 
        CubicCurves.flatness(floatArray0, (-278));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -278 out of bounds for length 6
         //
         verifyException("pythagoras.f.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = CubicCurves.solveCubic(floatArray0, floatArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float float0 = CubicCurves.flatness(0.0F, 0.0F, (float) 0, 0.5F, 0.0F, (float) 0, 1.0E-5F, 0.0F);
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float float0 = CubicCurves.flatnessSq((float) 0, (float) 0, 0.99999F, 0.99999F, 0.99999F, 2947.0337F, (float) 0, 0.0F);
      assertEquals(8685009.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[] floatArray0 = new float[8];
      CubicCurves.subdivide(floatArray0, 0, (float[]) null, 1, (float[]) null, 229);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      CubicCurves.subdivide((ICubicCurve) cubicCurve0, cubicCurve0, (CubicCurve) null);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      CubicCurves.subdivide((ICubicCurve) cubicCurve0, (CubicCurve) null, cubicCurve0);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = CubicCurves.flatnessSq(floatArray0, 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = CubicCurves.flatness(floatArray0, 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = CubicCurves.solveCubic(floatArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CubicCurves cubicCurves0 = new CubicCurves();
  }
}
