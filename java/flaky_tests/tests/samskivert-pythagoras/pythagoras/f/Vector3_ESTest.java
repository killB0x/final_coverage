/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:52:37 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.FloatBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IVector3;
import pythagoras.f.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3_ESTest extends Vector3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3.1415927F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 42.4807F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      vector3_0.lerpLocal(vector3_1, 0.83994555F);
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-1134.0F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      Vector3 vector3_2 = new Vector3(floatArray1);
      vector3_0.normalize(vector3_2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = 741.2544F;
      floatArray0[3] = 741.2544F;
      floatArray0[4] = (-2638.2917F);
      Vector3 vector3_0 = new Vector3(floatArray0);
      Vector3 vector3_1 = new Vector3(floatArray0);
      vector3_0.normalize(vector3_1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_2 = vector3_0.addLocal((IVector3) vector3_1);
      Vector3 vector3_3 = vector3_2.add((IVector3) vector3_0);
      Vector3 vector3_4 = vector3_3.negateLocal();
      Vector3 vector3_5 = vector3_3.add(1.5773503F, (-1301.45F), (-3.1547005F));
      Vector3 vector3_6 = vector3_3.crossLocal(vector3_5);
      Vector3 vector3_7 = vector3_6.addScaledLocal(vector3_3, 1.690164E7F);
      Vector3 vector3_8 = (Vector3)Vector3.ZERO;
      vector3_6.addLocal((IVector3) vector3_7);
      vector3_3.lerp((IVector3) vector3_8, (-1304.6046F));
      Vector3 vector3_9 = vector3_7.addLocal((-1.60275232E8F), (-3.4028235E38F), (-3.4028235E38F));
      vector3_5.manhattanDistance(vector3_2);
      Vector3 vector3_10 = (Vector3)Vector3.MAX_VALUE;
      vector3_4.cross((IVector3) vector3_10);
      Vector3 vector3_11 = vector3_3.addLocal(0.0F, 0.0F, (-2224.0F));
      vector3_9.negate(vector3_11);
      vector3_9.addLocal(Float.NaN, 1.0F, 3.1415927F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-91.9F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-68.5911F);
      Vector3 vector3_1 = new Vector3(floatArray0);
      Vector3 vector3_2 = vector3_1.normalizeLocal();
      vector3_1.mult((IVector3) vector3_0, vector3_2);
      vector3_2.add(2064.1877F, 3.4028235E38F, (-3447.5244F), vector3_1);
      Vector3 vector3_3 = vector3_2.addScaledLocal(vector3_0, 0.0F);
      vector3_3.cross((IVector3) vector3_1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = vector3_0.subtract((IVector3) vector3_1);
      Vector3 vector3_3 = vector3_2.normalize();
      Vector3 vector3_4 = vector3_2.addLocal((-3.4028235E38F), (-3.4028235E38F), 1174.2294F);
      Vector3 vector3_5 = vector3_3.addLocal((IVector3) vector3_2);
      Vector3 vector3_6 = vector3_3.cross((IVector3) vector3_5);
      Vector3 vector3_7 = (Vector3)Vector3.ZERO;
      Vector3 vector3_8 = vector3_4.mult((IVector3) vector3_3);
      Vector3 vector3_9 = vector3_6.lerp((IVector3) vector3_7, (-2.0F));
      vector3_2.lengthSquared();
      Vector3 vector3_10 = vector3_5.addLocal(Float.POSITIVE_INFINITY, (-3.4028235E38F), Float.NEGATIVE_INFINITY);
      vector3_4.multLocal((-241.985F));
      vector3_9.set((IVector3) vector3_10);
      Vector3 vector3_11 = vector3_2.add(251.64893F, Float.POSITIVE_INFINITY, (-241.985F));
      vector3_9.mult((IVector3) vector3_7, vector3_5);
      Vector3 vector3_12 = vector3_9.cross((IVector3) vector3_1, vector3_11);
      vector3_12.toString();
      vector3_11.normalizeLocal();
      vector3_3.negateLocal();
      vector3_6.toString();
      vector3_5.mult((IVector3) vector3_8);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.lerp((IVector3) null, (-162.534F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.subtract((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      vector3_0.angle(vector3_1);
      Vector3 vector3_2 = new Vector3();
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_4 = vector3_2.addScaled((IVector3) vector3_3, 3638.997F);
      Vector3 vector3_5 = vector3_4.add(741.2544F, 0.0F, 0.0F);
      Vector3 vector3_6 = vector3_2.set((IVector3) vector3_3);
      vector3_5.z = 741.2544F;
      vector3_5.hashCode();
      Vector3 vector3_7 = vector3_6.normalize(vector3_2);
      Vector3 vector3_8 = vector3_5.set((IVector3) vector3_2);
      Vector3 vector3_9 = vector3_8.negate(vector3_4);
      Vector3 vector3_10 = vector3_2.addLocal((-1.0F), 1.0F, (-1.0F));
      Vector3 vector3_11 = vector3_10.normalize(vector3_8);
      Vector3 vector3_12 = (Vector3)Vector3.MIN_VALUE;
      vector3_10.set(3.4028235E38F, (-1.0F), Float.POSITIVE_INFINITY);
      Vector3 vector3_13 = vector3_11.lerp((IVector3) vector3_12, (-1516.463F));
      vector3_4.distanceSquared(vector3_10);
      vector3_2.triple(vector3_0, vector3_3);
      Vector3 vector3_14 = vector3_4.lerpLocal(vector3_3, 0.0F);
      vector3_9.manhattanDistance(vector3_6);
      Vector3 vector3_15 = vector3_14.addLocal(914.7F, 914.7F, 731.0F);
      vector3_2.add((IVector3) vector3_10, vector3_13);
      vector3_15.add(334.0F, (-555.16724F), Float.POSITIVE_INFINITY, vector3_7);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 338.0F;
      floatArray0[1] = 737.0F;
      floatArray0[2] = (-4759.0F);
      floatArray0[3] = 1.0F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      Vector3 vector3_2 = vector3_0.cross((IVector3) vector3_1, vector3_1);
      vector3_2.mult((IVector3) vector3_1, vector3_1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = vector3_0.addLocal((-1747.6628F), (-1747.6628F), 1120.0F);
      Vector3 vector3_2 = vector3_1.negate();
      Vector3 vector3_3 = new Vector3(vector3_0);
      vector3_2.addScaled((IVector3) vector3_0, (-2077.322F), vector3_3);
      Vector3 vector3_4 = vector3_2.mult(2584.5881F, vector3_1);
      vector3_4.subtractLocal(vector3_2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_2 = vector3_0.add((IVector3) vector3_1);
      Vector3 vector3_3 = new Vector3(1.0F, 1390.5F, (-1736.172F));
      Vector3 vector3_4 = vector3_2.normalize(vector3_3);
      Vector3 vector3_5 = vector3_3.multLocal((IVector3) vector3_4);
      Vector3 vector3_6 = vector3_5.set((IVector3) vector3_0);
      Vector3 vector3_7 = new Vector3();
      Vector3 vector3_8 = vector3_2.add((IVector3) vector3_7);
      vector3_8.negate(vector3_4);
      vector3_7.toString();
      vector3_4.add(-0.0F, (-1.0F), 2.0F, vector3_2);
      Vector3 vector3_9 = vector3_8.add(1142.9868F, (-1.0F), (-2.0F), vector3_7);
      vector3_2.triple(vector3_7, vector3_1);
      Vector3 vector3_10 = vector3_6.add((IVector3) vector3_0, vector3_2);
      vector3_8.distance(vector3_2);
      vector3_3.subtract((IVector3) vector3_9, vector3_10);
      Vector3 vector3_11 = vector3_9.normalizeLocal();
      vector3_11.hashCode();
      Vector3 vector3_12 = vector3_6.set(1390.5F, 0.0F, 2.0F);
      vector3_3.mult((IVector3) vector3_11);
      vector3_12.triple(vector3_5, vector3_7);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      // Undeclared exception!
      try { 
        vector3_0.mult((IVector3) vector3_1, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.crossLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-2118.0F), (-1.0F), 0.5F);
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_0.mult((-1.0F), vector3_1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.addScaled((IVector3) null, 3.4028235E38F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      IVector3 iVector3_0 = null;
      // Undeclared exception!
      try { 
        vector3_0.triple((IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.add((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = new Vector3(2.0F, 2.0F, 2.0F);
      Vector3 vector3_2 = vector3_1.negate();
      Vector3 vector3_3 = vector3_0.lerp((IVector3) vector3_1, (-1.0F));
      Vector3 vector3_4 = vector3_1.multLocal((IVector3) vector3_3);
      vector3_4.negateLocal();
      vector3_4.lengthSquared();
      Vector3 vector3_5 = vector3_4.cross((IVector3) vector3_2);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 8.0F;
      vector3_2.negate(vector3_3);
      floatArray0[1] = -0.0F;
      floatArray0[2] = -0.0F;
      floatArray0[3] = 1182.3F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = -0.0F;
      floatArray0[6] = 2.0F;
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0, 3, 3);
      FloatBuffer floatBuffer1 = vector3_1.get(floatBuffer0);
      // Undeclared exception!
      try { 
        vector3_5.get(floatBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      vector3_1.z();
      Vector3 vector3_2 = new Vector3();
      Vector3 vector3_3 = vector3_2.add(2.7182817F, 258.7F, 258.7F);
      vector3_2.set(258.7F, 258.7F, 258.7F);
      Vector3 vector3_4 = vector3_2.lerpLocal(vector3_1, (-3.4028235E38F));
      Vector3 vector3_5 = vector3_4.mult((IVector3) vector3_3, vector3_2);
      Vector3 vector3_6 = vector3_3.negateLocal();
      Vector3 vector3_7 = vector3_4.mult((IVector3) vector3_5, vector3_5);
      vector3_3.crossLocal(vector3_4);
      Vector3 vector3_8 = vector3_4.add(1607.7F, (-82.17F), 2309.7817F, vector3_7);
      vector3_8.add(Float.NaN, 0.83994555F, (-3.4028235E38F));
      Vector3 vector3_9 = vector3_5.addLocal((-3.4028235E38F), Float.NaN, (-3.4028235E38F));
      vector3_9.normalizeLocal();
      vector3_7.lerp((IVector3) vector3_4, 456.77673F, vector3_5);
      Vector3 vector3_10 = vector3_4.normalize(vector3_5);
      vector3_2.add((IVector3) vector3_4);
      Vector3 vector3_11 = (Vector3)Vector3.UNIT_Z;
      vector3_6.distance(vector3_11);
      vector3_5.cross((IVector3) vector3_10, vector3_6);
      Vector3 vector3_12 = vector3_5.abs();
      vector3_7.negate();
      vector3_12.add(0.017453292F, (-2.0F), (-1.0F));
      vector3_6.negate();
      vector3_12.addLocal((IVector3) vector3_8);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      // Undeclared exception!
      try { 
        vector3_0.add((IVector3) vector3_1, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(0.0F, 0.0F, 0.0F);
      vector3_1.add(0.0F, 0.0F, 0.0F, vector3_0);
      vector3_0.length();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      // Undeclared exception!
      try { 
        vector3_0.abs((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      // Undeclared exception!
      try { 
        vector3_0.lerp((IVector3) vector3_1, 352.2F, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      
      Vector3 vector3_2 = vector3_0.subtractLocal(vector3_1);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      
      vector3_2.add(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      // Undeclared exception!
      try { 
        vector3_0.cross((IVector3) vector3_1, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.equals(vector3_0);
      Vector3 vector3_1 = vector3_0.set((-1.0F), (-1.0F), (-1.0F));
      Vector3 vector3_2 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_3 = vector3_2.normalize();
      Vector3 vector3_4 = vector3_0.normalizeLocal();
      Vector3 vector3_5 = (Vector3)Vector3.ZERO;
      vector3_0.addLocal((IVector3) vector3_1);
      vector3_4.normalize();
      vector3_3.mult((-3586.0F));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      // Undeclared exception!
      try { 
        vector3_0.subtract((IVector3) vector3_1, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = vector3_0.multLocal((-690.8F));
      Vector3 vector3_2 = vector3_1.cross((IVector3) vector3_0);
      vector3_2.get(1);
      Vector3 vector3_3 = vector3_1.addScaledLocal(vector3_0, 1875.561F);
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(550);
      FloatBuffer floatBuffer1 = vector3_1.get(floatBuffer0);
      Vector3 vector3_4 = vector3_1.normalize();
      vector3_3.get(floatBuffer1);
      Vector3 vector3_5 = vector3_4.addLocal((float) 550, 821.39F, 3.4028235E38F);
      vector3_5.x = 5410.8F;
      vector3_3.add(-0.0F, 1875.561F, 5410.8F);
      vector3_3.negate(vector3_4);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      Vector3 vector3_2 = new Vector3(vector3_0);
      vector3_2.angle(vector3_0);
      vector3_0.z();
      Vector3 vector3_3 = vector3_2.subtract((IVector3) vector3_1, vector3_0);
      Vector3 vector3_4 = vector3_3.lerpLocal(vector3_2, (-1241.0F));
      Vector3 vector3_5 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_6 = vector3_5.mult(0.0F, vector3_0);
      Vector3 vector3_7 = vector3_2.multLocal(0.0F);
      Vector3 vector3_8 = vector3_0.addScaled((IVector3) vector3_2, 0.0F);
      Vector3 vector3_9 = vector3_0.lerpLocal(vector3_2, 3051.13F);
      Vector3 vector3_10 = vector3_8.add((-1.0F), (-1.0F), (-1.0F), vector3_7);
      vector3_4.distanceSquared(vector3_6);
      vector3_7.lerpLocal(vector3_6, (-2.0F));
      vector3_4.addScaled((IVector3) vector3_9, (-2.0F), vector3_8);
      Object object0 = new Object();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      Vector3 vector3_11 = new Vector3(floatArray0);
      vector3_11.equals(vector3_10);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      vector3_0.distanceSquared(vector3_1);
      float[] floatArray0 = new float[5];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = Float.POSITIVE_INFINITY;
      floatArray0[4] = Float.POSITIVE_INFINITY;
      Vector3 vector3_2 = new Vector3(floatArray0);
      vector3_2.get(2);
      Vector3 vector3_3 = vector3_2.set((IVector3) vector3_1);
      vector3_3.toString();
      vector3_2.length();
      Vector3 vector3_4 = vector3_2.add((IVector3) vector3_3, vector3_3);
      Vector3 vector3_5 = vector3_3.normalize(vector3_2);
      vector3_3.addLocal(3872.4736F, 3872.4736F, 0.0F);
      vector3_5.manhattanDistance(vector3_0);
      Vector3 vector3_6 = vector3_4.add(3872.4736F, 2.7182817F, Float.NaN);
      vector3_5.mult(Float.NaN, vector3_4);
      Vector3 vector3_7 = vector3_2.lerp((IVector3) vector3_1, (-395.75906F), vector3_4);
      Vector3 vector3_8 = vector3_4.negateLocal();
      Vector3 vector3_9 = vector3_6.lerp((IVector3) vector3_7, 3.4028235E38F, vector3_4);
      vector3_8.negate(vector3_4);
      Vector3 vector3_10 = vector3_6.absLocal();
      Vector3 vector3_11 = vector3_10.cross((IVector3) vector3_7, vector3_8);
      vector3_10.mult((IVector3) vector3_9, vector3_3);
      vector3_6.addLocal(Float.POSITIVE_INFINITY, Float.NaN, 326.13885F);
      vector3_3.lerp((IVector3) vector3_10, (-3484.278F));
      vector3_5.subtract((IVector3) vector3_0);
      vector3_11.length();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(vector3_0);
      // Undeclared exception!
      try { 
        vector3_0.addScaled((IVector3) vector3_1, 0.0F, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.angle((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.set((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      Vector3 vector3_2 = vector3_0.addLocal((IVector3) vector3_1);
      vector3_2.angle(vector3_0);
      vector3_0.z();
      Vector3 vector3_3 = vector3_2.subtract((IVector3) vector3_1, vector3_0);
      Vector3 vector3_4 = vector3_3.lerpLocal(vector3_2, (-1241.0F));
      Vector3 vector3_5 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_6 = vector3_5.mult(0.0F, vector3_0);
      Vector3 vector3_7 = vector3_2.multLocal(0.0F);
      Vector3 vector3_8 = vector3_0.addScaled((IVector3) vector3_2, 0.0F);
      Vector3 vector3_9 = vector3_0.lerpLocal(vector3_2, 3051.13F);
      Vector3 vector3_10 = vector3_8.add((-1.0F), (-1.0F), (-1.0F), vector3_7);
      vector3_4.distanceSquared(vector3_6);
      Vector3 vector3_11 = vector3_4.addScaled((IVector3) vector3_9, (-1.0F), vector3_8);
      Object object0 = new Object();
      Vector3 vector3_12 = vector3_10.set(0.0F, (-2530.7F), 0.5F);
      Vector3 vector3_13 = (Vector3)Vector3.UNIT_Y;
      vector3_4.equals(vector3_12);
      Vector3 vector3_14 = (Vector3)Vector3.UNIT_XYZ;
      vector3_6.get(1);
      vector3_5.cross((IVector3) vector3_0);
      vector3_10.absLocal();
      vector3_11.normalizeLocal();
      vector3_0.addLocal((IVector3) vector3_5);
      vector3_10.get(1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      // Undeclared exception!
      try { 
        vector3_0.set((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.negate((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(872);
      vector3_0.get(floatBuffer0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      vector3_0.manhattanDistance(vector3_1);
      vector3_0.lerp((IVector3) vector3_1, (float) 872);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3751.47F);
      floatArray0[1] = (-251.74016F);
      floatArray0[2] = 57.295776F;
      Vector3 vector3_2 = new Vector3(floatArray0);
      vector3_1.distanceSquared(vector3_2);
      vector3_2.dot(vector3_1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_2 = vector3_0.addScaledLocal(vector3_1, 2810.34F);
      Vector3 vector3_3 = vector3_0.addScaled((IVector3) vector3_1, 93.053F, vector3_2);
      vector3_3.dot(vector3_1);
      Vector3 vector3_4 = vector3_0.subtractLocal(vector3_1);
      Vector3 vector3_5 = vector3_4.mult((IVector3) vector3_0);
      Vector3 vector3_6 = vector3_0.addScaled((IVector3) vector3_4, (-1772.78F));
      Vector3 vector3_7 = new Vector3(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, Float.NaN);
      vector3_6.triple(vector3_5, vector3_7);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      vector3_0.negate(vector3_1);
      vector3_1.add((IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.distanceSquared((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = vector3_0.multLocal(3.4028235E38F);
      Vector3 vector3_2 = vector3_1.set(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      Vector3 vector3_3 = vector3_2.lerp((IVector3) vector3_1, (-2193.7F));
      Vector3 vector3_4 = vector3_3.set((IVector3) vector3_2);
      vector3_4.lerp((IVector3) vector3_3, 701.42554F);
      vector3_2.addLocal(Float.POSITIVE_INFINITY, 3.4028235E38F, 3.4028235E38F);
      vector3_2.addLocal((IVector3) vector3_0);
      Vector3 vector3_5 = vector3_2.addScaledLocal(vector3_1, 372.633F);
      vector3_1.multLocal((-1.0F));
      vector3_5.lerpLocal(vector3_2, (-117.5856F));
      Vector3 vector3_6 = new Vector3();
      vector3_1.lerpLocal(vector3_6, (-243.12F));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3019.022F);
      floatArray0[1] = (-2530.7F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 599.48065F;
      floatArray0[4] = 1.5707964F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      vector3_0.lerp((IVector3) vector3_1, 599.48065F, vector3_1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.distance((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.add(0.0F, 3.4028235E38F, 0.0F);
      vector3_0.length();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      vector3_0.subtract((IVector3) vector3_1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      // Undeclared exception!
      try { 
        vector3_0.add(788.08F, 788.08F, 788.08F, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      // Undeclared exception!
      try { 
        vector3_0.mult((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      // Undeclared exception!
      try { 
        vector3_0.subtractLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.mult((-588.60425F));
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_2.set((IVector3) vector3_1);
      Vector3 vector3_4 = vector3_0.abs(vector3_1);
      Vector3 vector3_5 = vector3_4.negate(vector3_2);
      Vector3 vector3_6 = vector3_4.mult(0.0F, vector3_2);
      Vector3 vector3_7 = vector3_6.negateLocal();
      Vector3 vector3_8 = new Vector3();
      Vector3 vector3_9 = vector3_3.set((-4351.2F), (-4351.2F), (-1.0F));
      Vector3 vector3_10 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_11 = vector3_2.cross((IVector3) vector3_10);
      Vector3 vector3_12 = (Vector3)Vector3.ZERO;
      Vector3 vector3_13 = vector3_0.subtract((IVector3) vector3_12);
      Vector3 vector3_14 = (Vector3)Vector3.UNIT_X;
      vector3_14.x();
      vector3_4.hashCode();
      vector3_7.subtract((IVector3) vector3_13, vector3_9);
      Vector3 vector3_15 = vector3_5.absLocal();
      Vector3 vector3_16 = vector3_11.cross((IVector3) vector3_5);
      vector3_9.manhattanDistance(vector3_11);
      vector3_7.subtract((IVector3) vector3_10, vector3_6);
      vector3_15.set(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      Vector3 vector3_17 = (Vector3)Vector3.UNIT_Y;
      vector3_8.equals(vector3_4);
      vector3_7.lerp((IVector3) vector3_16, 2689.5532F);
      vector3_7.add((IVector3) vector3_4);
      vector3_3.cross((IVector3) vector3_5);
      Vector3 vector3_18 = (Vector3)Vector3.ZERO;
      vector3_7.addLocal((IVector3) vector3_18);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2316.5F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = Float.NaN;
      floatArray0[8] = 3.4028235E38F;
      vector3_4.set(floatArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      float[] floatArray0 = new float[3];
      floatArray0[0] = -0.0F;
      floatArray0[1] = 0.83994555F;
      floatArray0[2] = (-1185.9594F);
      Vector3 vector3_1 = new Vector3(floatArray0);
      Vector3 vector3_2 = vector3_0.normalize(vector3_1);
      vector3_1.crossLocal(vector3_2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      Vector3 vector3_2 = vector3_0.addLocal((IVector3) vector3_1);
      vector3_2.angle(vector3_0);
      vector3_0.z();
      Vector3 vector3_3 = vector3_2.subtract((IVector3) vector3_1, vector3_0);
      Vector3 vector3_4 = vector3_3.lerpLocal(vector3_2, (-1241.0F));
      Vector3 vector3_5 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_6 = vector3_5.mult(0.0F, vector3_0);
      Vector3 vector3_7 = vector3_2.multLocal(0.0F);
      Vector3 vector3_8 = vector3_0.addScaled((IVector3) vector3_2, 0.0F);
      Vector3 vector3_9 = vector3_0.lerpLocal(vector3_2, 3051.13F);
      vector3_8.add((-1.0F), (-1.0F), (-1.0F), vector3_7);
      vector3_4.set(3513.126F, 3.4028235E38F, 3513.126F);
      vector3_2.normalize();
      vector3_8.normalizeLocal();
      vector3_9.negate(vector3_6);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.mult((-588.60425F));
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_2.set((IVector3) vector3_1);
      Vector3 vector3_4 = vector3_0.abs(vector3_1);
      Vector3 vector3_5 = vector3_3.subtract((IVector3) vector3_4, vector3_0);
      float[] floatArray0 = new float[17];
      floatArray0[0] = -0.0F;
      floatArray0[1] = 0.83994555F;
      Vector3 vector3_6 = new Vector3(floatArray0);
      Vector3 vector3_7 = vector3_4.lerpLocal(vector3_6, (-2803.1863F));
      Vector3 vector3_8 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_9 = vector3_3.mult(0.0F, vector3_2);
      vector3_3.multLocal(0.0F);
      Vector3 vector3_10 = (Vector3)Vector3.UNIT_X;
      vector3_0.addScaled((IVector3) vector3_10, 1.14F);
      vector3_7.lerpLocal(vector3_4, -0.0F);
      vector3_9.set(0.57735026F, 1921.49F, 0.0F);
      vector3_3.add((-1594.5907F), 3.4028235E38F, 0.017453292F, vector3_1);
      vector3_7.addScaled((IVector3) vector3_9, -0.0F, vector3_2);
      Object object0 = new Object();
      Vector3 vector3_11 = new Vector3(floatArray0);
      Vector3 vector3_12 = new Vector3(vector3_11);
      vector3_5.equals(vector3_12);
      vector3_2.negateLocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      vector3_1.equals(vector3_1);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_XYZ;
      vector3_1.equals(vector3_2);
      Vector3 vector3_3 = new Vector3(vector3_2);
      vector3_1.lengthSquared();
      Vector3 vector3_4 = new Vector3();
      Vector3 vector3_5 = vector3_3.lerpLocal(vector3_2, 0.0F);
      Vector3 vector3_6 = new Vector3();
      vector3_5.addLocal((IVector3) vector3_6);
      // Undeclared exception!
      try { 
        vector3_3.negate((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = vector3_0.mult(281.38168F);
      Vector3 vector3_2 = vector3_1.set(2.0F, 3.4028235E38F, 2.0F);
      Vector3 vector3_3 = vector3_2.negateLocal();
      vector3_1.x();
      Vector3 vector3_4 = vector3_2.normalizeLocal();
      vector3_3.lengthSquared();
      Vector3 vector3_5 = vector3_4.addLocal(-0.0F, -0.0F, 0.0F);
      vector3_2.multLocal((IVector3) vector3_4);
      vector3_1.manhattanDistance(vector3_0);
      vector3_2.lerpLocal(vector3_4, 787.888F);
      vector3_5.z = 2.0F;
      Vector3 vector3_6 = vector3_4.lerpLocal(vector3_1, 0.0F);
      vector3_4.length();
      vector3_4.negateLocal();
      Vector3 vector3_7 = vector3_6.add(-0.0F, (-2.0F), -0.0F, vector3_4);
      vector3_7.addLocal(1438.93F, (-1964.1F), 2.0F);
      vector3_1.normalize();
      Vector3 vector3_8 = vector3_3.addScaled((IVector3) vector3_5, (-2453.0F));
      vector3_8.addScaledLocal(vector3_5, 0.0F);
      // Undeclared exception!
      try { 
        vector3_1.mult((-1212.0042F), (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      vector3_1.add((IVector3) vector3_0, vector3_0);
      float float0 = 1100.1838F;
      Vector3 vector3_2 = vector3_1.addScaledLocal(vector3_0, 1100.1838F);
      Vector3 vector3_3 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_2.equals(vector3_3);
      vector3_2.mult((IVector3) vector3_1, vector3_0);
      Vector3 vector3_4 = null;
      try {
        vector3_4 = new Vector3((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2483.6F);
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = vector3_0.set((-3215.2468F), (-1.0F), (-1.0F));
      Vector3 vector3_2 = new Vector3(0.0F, 0.0F, (-1.0F));
      Vector3 vector3_3 = new Vector3((-1.0F), (-1.0F), 0.0F);
      Vector3 vector3_4 = vector3_0.mult((IVector3) vector3_3, vector3_3);
      Vector3 vector3_5 = vector3_1.abs();
      vector3_5.mult(0.0F);
      vector3_4.add((IVector3) vector3_1, vector3_1);
      Vector3 vector3_6 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_4.lerp((IVector3) vector3_6, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = vector3_0.negateLocal();
      Vector3 vector3_2 = vector3_1.negateLocal();
      Vector3 vector3_3 = vector3_1.cross((IVector3) vector3_2);
      vector3_2.hashCode();
      Vector3 vector3_4 = vector3_3.cross((IVector3) vector3_0, vector3_1);
      vector3_2.dot(vector3_4);
      Vector3 vector3_5 = vector3_2.multLocal((IVector3) vector3_0);
      Vector3 vector3_6 = vector3_5.addScaled((IVector3) vector3_3, 0.0F);
      Vector3 vector3_7 = vector3_4.abs();
      Vector3 vector3_8 = vector3_2.negate(vector3_5);
      vector3_6.y = (-1308.283F);
      Vector3 vector3_9 = vector3_4.absLocal();
      Vector3 vector3_10 = vector3_7.set(1.0F, Float.NaN, 2123.6F);
      Vector3 vector3_11 = vector3_9.cross((IVector3) vector3_2);
      vector3_8.z = Float.NaN;
      vector3_4.subtract((IVector3) vector3_8);
      vector3_8.x();
      vector3_5.hashCode();
      Vector3 vector3_12 = vector3_1.subtract((IVector3) vector3_0, vector3_8);
      Vector3 vector3_13 = vector3_6.absLocal();
      Vector3 vector3_14 = vector3_13.cross((IVector3) vector3_6);
      vector3_7.manhattanDistance(vector3_12);
      Vector3 vector3_15 = vector3_5.subtract((IVector3) vector3_7, vector3_2);
      Vector3 vector3_16 = vector3_5.set(Float.NaN, 23.654F, (-846.849F));
      Vector3 vector3_17 = (Vector3)Vector3.UNIT_Y;
      vector3_11.equals(vector3_17);
      Vector3 vector3_18 = vector3_11.lerp((IVector3) vector3_2, Float.NaN);
      vector3_6.add((IVector3) vector3_10);
      vector3_16.cross((IVector3) vector3_18);
      vector3_7.addLocal((IVector3) vector3_15);
      vector3_14.z();
      vector3_11.crossLocal(vector3_0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      float float0 = 1100.1838F;
      Vector3 vector3_2 = new Vector3(vector3_1);
      Vector3 vector3_3 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_3.multLocal((IVector3) vector3_1);
      vector3_2.equals(vector3_3);
      Vector3 vector3_4 = null;
      try {
        vector3_4 = new Vector3((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      Vector3 vector3_2 = vector3_0.addLocal((IVector3) vector3_1);
      vector3_2.angle(vector3_0);
      vector3_0.z();
      Vector3 vector3_3 = vector3_2.subtract((IVector3) vector3_1, vector3_0);
      Vector3 vector3_4 = vector3_3.lerpLocal(vector3_2, (-1241.0F));
      Vector3 vector3_5 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_6 = vector3_5.mult(0.0F, vector3_0);
      Vector3 vector3_7 = vector3_2.multLocal(0.0F);
      Vector3 vector3_8 = vector3_0.addScaled((IVector3) vector3_2, 0.0F);
      Vector3 vector3_9 = vector3_0.lerpLocal(vector3_2, 3051.13F);
      Vector3 vector3_10 = vector3_8.add((-1.0F), (-1.0F), (-1.0F), vector3_7);
      vector3_4.distanceSquared(vector3_6);
      vector3_7.lerpLocal(vector3_6, (-1.0F));
      vector3_4.addScaled((IVector3) vector3_9, (-1.0F), vector3_8);
      Object object0 = new Object();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      Vector3 vector3_11 = new Vector3(floatArray0);
      vector3_11.equals(vector3_10);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      Vector3 vector3_2 = vector3_0.addLocal((IVector3) vector3_1);
      vector3_2.angle(vector3_0);
      vector3_0.z();
      Vector3 vector3_3 = vector3_2.subtract((IVector3) vector3_1, vector3_0);
      Vector3 vector3_4 = vector3_3.lerpLocal(vector3_2, (-1241.0F));
      Vector3 vector3_5 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_6 = vector3_1.addScaledLocal(vector3_5, 0.0F);
      Vector3 vector3_7 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_8 = vector3_4.lerp((IVector3) vector3_5, 1.0F, vector3_2);
      Vector3 vector3_9 = vector3_8.add((IVector3) vector3_2, vector3_6);
      Vector3 vector3_10 = vector3_0.addScaledLocal(vector3_2, (-692.8F));
      vector3_10.cross((IVector3) vector3_7);
      vector3_9.y();
      vector3_4.subtractLocal(vector3_10);
      vector3_0.lerp((IVector3) vector3_7, 0.0F, vector3_1);
      vector3_2.negateLocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.mult((-588.60425F));
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_2.set((IVector3) vector3_1);
      Vector3 vector3_4 = vector3_0.abs(vector3_1);
      Vector3 vector3_5 = vector3_4.negate(vector3_2);
      Vector3 vector3_6 = vector3_4.mult(0.0F, vector3_2);
      vector3_6.negateLocal();
      vector3_1.cross((IVector3) vector3_2);
      vector3_0.add((IVector3) vector3_6, vector3_3);
      Vector3 vector3_7 = vector3_2.subtractLocal(vector3_0);
      vector3_7.subtract((IVector3) vector3_2);
      vector3_5.get(2);
      Vector3 vector3_8 = vector3_6.addLocal((IVector3) vector3_2);
      vector3_8.add(6.2831855F, 0.0F, (-137.137F));
      vector3_0.cross((IVector3) vector3_7);
      // Undeclared exception!
      FloatBuffer.allocate(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.normalize((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = vector3_0.set(1228.2F, 1228.2F, 0.0F);
      vector3_0.toString();
      Vector3 vector3_2 = vector3_1.addLocal((-1297.8F), 1228.2F, (-2289.0F));
      Vector3 vector3_3 = vector3_2.normalizeLocal();
      Vector3 vector3_4 = vector3_3.normalize(vector3_1);
      vector3_2.lengthSquared();
      vector3_4.x = (-0.020724721F);
      Vector3 vector3_5 = vector3_1.subtract((IVector3) vector3_2);
      vector3_1.negateLocal();
      vector3_2.x();
      vector3_2.toString();
      Vector3 vector3_6 = vector3_2.subtract((IVector3) vector3_4);
      vector3_5.set(177.333F, 1400.185F, 0.0F);
      Vector3 vector3_7 = vector3_5.addLocal(0.0F, (-3.4028235E38F), (-0.7314387F));
      Vector3 vector3_8 = new Vector3(vector3_4);
      vector3_6.lerpLocal(vector3_4, (-3.4028235E38F));
      Vector3 vector3_9 = (Vector3)Vector3.ZERO;
      vector3_7.addScaled((IVector3) vector3_9, (-1297.8F), vector3_1);
      vector3_3.distanceSquared(vector3_7);
      vector3_8.mult((-2.319338E38F));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-217.80899F), (-217.80899F), (-217.80899F));
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_2 = vector3_0.multLocal((IVector3) vector3_1);
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_4 = vector3_0.subtract((IVector3) vector3_3);
      Vector3 vector3_5 = vector3_2.add((IVector3) vector3_3);
      Vector3 vector3_6 = vector3_4.add((IVector3) vector3_3, vector3_2);
      Vector3 vector3_7 = vector3_2.addScaled((IVector3) vector3_3, 1638.6F, vector3_0);
      Vector3 vector3_8 = vector3_4.add((IVector3) vector3_3, vector3_2);
      vector3_4.length();
      Vector3 vector3_9 = vector3_5.negate(vector3_4);
      vector3_9.negate();
      Vector3 vector3_10 = vector3_0.set((IVector3) vector3_7);
      vector3_5.lengthSquared();
      Vector3 vector3_11 = vector3_5.mult((IVector3) vector3_3);
      vector3_8.cross((IVector3) vector3_0, vector3_0);
      Vector3 vector3_12 = vector3_6.mult((IVector3) vector3_11);
      vector3_10.mult((IVector3) vector3_9);
      Vector3 vector3_13 = new Vector3(0.0F, (-1.0F), (-918.5F));
      Vector3 vector3_14 = vector3_12.normalize(vector3_13);
      vector3_14.addLocal((IVector3) vector3_1);
      Vector3 vector3_15 = (Vector3)Vector3.MIN_VALUE;
      vector3_5.manhattanDistance(vector3_15);
      Vector3 vector3_16 = vector3_11.cross((IVector3) vector3_4, vector3_10);
      vector3_16.mult((IVector3) vector3_1);
      Vector3 vector3_17 = vector3_16.multLocal(0.0F);
      vector3_17.x = -0.0F;
      vector3_11.distanceSquared(vector3_5);
      vector3_13.distanceSquared(vector3_11);
      vector3_5.negateLocal();
      vector3_8.dot(vector3_1);
      vector3_12.normalize();
      vector3_9.addScaledLocal(vector3_15, 0.0F);
      vector3_13.negateLocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      vector3_0.x();
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_2 = (Vector3)Vector3.ZERO;
      Vector3 vector3_3 = vector3_1.addScaledLocal(vector3_2, 0.0F);
      vector3_3.y();
      Vector3 vector3_4 = new Vector3((-3.4028235E38F), 0.0F, 0.0F);
      Vector3 vector3_5 = vector3_4.mult((IVector3) vector3_1);
      Vector3 vector3_6 = vector3_3.cross((IVector3) vector3_1);
      Vector3 vector3_7 = (Vector3)Vector3.ZERO;
      vector3_4.distanceSquared(vector3_7);
      Vector3 vector3_8 = vector3_4.addScaled((IVector3) vector3_3, 0.0F, vector3_3);
      Vector3 vector3_9 = vector3_6.addLocal((IVector3) vector3_1);
      Vector3 vector3_10 = vector3_5.mult((-3.4028235E38F));
      Vector3 vector3_11 = (Vector3)Vector3.MIN_VALUE;
      vector3_6.triple(vector3_8, vector3_11);
      Vector3 vector3_12 = vector3_10.subtract((IVector3) vector3_7);
      vector3_8.angle(vector3_3);
      vector3_9.toString();
      vector3_12.normalize(vector3_4);
      vector3_8.addScaled((IVector3) vector3_7, Float.NaN, vector3_9);
      vector3_10.add((-842.055F), 0.0F, Float.NaN, vector3_12);
      Vector3 vector3_13 = new Vector3(Float.NaN, -0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = new Vector3(1.0F, 1.0F, 0.0F);
      Vector3 vector3_2 = vector3_1.normalizeLocal();
      Vector3 vector3_3 = vector3_0.set((IVector3) vector3_1);
      vector3_1.angle(vector3_3);
      Vector3 vector3_4 = vector3_2.mult((IVector3) vector3_3);
      Vector3 vector3_5 = vector3_1.addLocal(1506.146F, 0.70710677F, 0.0F);
      vector3_3.toString();
      Vector3 vector3_6 = vector3_2.cross((IVector3) vector3_5);
      Vector3 vector3_7 = vector3_2.negate();
      vector3_7.z = (-1.0F);
      vector3_4.x();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1506.8531F;
      Vector3 vector3_8 = vector3_6.set(floatArray0);
      Vector3 vector3_9 = vector3_3.mult((IVector3) vector3_8, vector3_8);
      vector3_2.addLocal((IVector3) vector3_1);
      vector3_2.y();
      vector3_0.length();
      Vector3 vector3_10 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_11 = vector3_0.mult((IVector3) vector3_10, vector3_5);
      Vector3 vector3_12 = new Vector3(0.0F, 0.0F, 943.67F);
      vector3_1.subtract((IVector3) vector3_2, vector3_2);
      vector3_11.angle(vector3_9);
      Vector3 vector3_13 = vector3_7.add(0.49999997F, (-1434.656F), (-1445.779F));
      vector3_13.multLocal((-1.0F));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(0.0F, 0.0F, 0.0F);
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.abs();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.cross((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      Vector3 vector3_2 = vector3_0.addLocal((IVector3) vector3_1);
      vector3_2.angle(vector3_0);
      vector3_0.z();
      Vector3 vector3_3 = vector3_2.subtract((IVector3) vector3_1, vector3_0);
      Vector3 vector3_4 = vector3_3.lerpLocal(vector3_2, (-1241.0F));
      Vector3 vector3_5 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_6 = vector3_5.mult(0.0F, vector3_0);
      Vector3 vector3_7 = vector3_2.multLocal(0.0F);
      Vector3 vector3_8 = vector3_0.addScaled((IVector3) vector3_2, 0.0F);
      Vector3 vector3_9 = vector3_0.lerpLocal(vector3_2, 3051.13F);
      Vector3 vector3_10 = vector3_8.add((-1.0F), (-1.0F), (-1.0F), vector3_7);
      vector3_4.distanceSquared(vector3_6);
      vector3_4.addScaled((IVector3) vector3_9, (-1.0F), vector3_8);
      Object object0 = new Object();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      Vector3 vector3_11 = new Vector3(floatArray0);
      vector3_11.equals(vector3_10);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      // Undeclared exception!
      try { 
        vector3_0.addScaledLocal((IVector3) null, (-2228.379F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_2 = vector3_1.addScaledLocal(vector3_0, 1100.1838F);
      Vector3 vector3_3 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_3.lerp((IVector3) vector3_1, Float.POSITIVE_INFINITY, vector3_2);
      vector3_0.add((IVector3) vector3_2, vector3_1);
      vector3_2.addScaledLocal(vector3_0, 0.0F);
      vector3_2.y();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.mult((-588.60425F));
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_2.set((IVector3) vector3_1);
      Vector3 vector3_4 = vector3_0.abs(vector3_1);
      Vector3 vector3_5 = vector3_4.negate(vector3_2);
      Vector3 vector3_6 = vector3_4.mult(0.0F, vector3_2);
      Vector3 vector3_7 = vector3_6.negateLocal();
      Vector3 vector3_8 = vector3_1.cross((IVector3) vector3_2);
      Vector3 vector3_9 = vector3_3.set((-4351.2F), (-4351.2F), (-1.0F));
      Vector3 vector3_10 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_11 = vector3_2.cross((IVector3) vector3_10);
      Vector3 vector3_12 = (Vector3)Vector3.ZERO;
      Vector3 vector3_13 = vector3_0.subtract((IVector3) vector3_12);
      Vector3 vector3_14 = (Vector3)Vector3.UNIT_X;
      vector3_14.x();
      vector3_4.hashCode();
      vector3_7.subtract((IVector3) vector3_13, vector3_9);
      Vector3 vector3_15 = vector3_5.absLocal();
      Vector3 vector3_16 = vector3_11.cross((IVector3) vector3_5);
      vector3_9.manhattanDistance(vector3_11);
      vector3_7.subtract((IVector3) vector3_10, vector3_6);
      vector3_15.set(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      Vector3 vector3_17 = (Vector3)Vector3.UNIT_Y;
      vector3_8.equals(vector3_4);
      vector3_7.lerp((IVector3) vector3_16, 2689.5532F);
      vector3_7.add((IVector3) vector3_4);
      vector3_3.cross((IVector3) vector3_5);
      Vector3 vector3_18 = (Vector3)Vector3.ZERO;
      vector3_7.addLocal((IVector3) vector3_18);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = vector3_0.negateLocal();
      Vector3 vector3_2 = vector3_1.negateLocal();
      Vector3 vector3_3 = vector3_1.cross((IVector3) vector3_2);
      vector3_2.hashCode();
      Vector3 vector3_4 = vector3_3.cross((IVector3) vector3_0, vector3_1);
      vector3_2.dot(vector3_4);
      Vector3 vector3_5 = vector3_2.multLocal((IVector3) vector3_0);
      Vector3 vector3_6 = vector3_5.addScaled((IVector3) vector3_3, 0.0F);
      Vector3 vector3_7 = vector3_4.abs();
      Vector3 vector3_8 = vector3_2.negate(vector3_5);
      vector3_6.y = (-1308.283F);
      vector3_4.absLocal();
      Vector3 vector3_9 = vector3_8.subtractLocal(vector3_7);
      vector3_5.subtract((IVector3) vector3_2);
      int int0 = 2;
      vector3_9.get(2);
      vector3_1.addLocal((IVector3) vector3_4);
      Vector3 vector3_10 = (Vector3)Vector3.UNIT_X;
      vector3_10.cross((IVector3) vector3_5);
      // Undeclared exception!
      FloatBuffer.allocate(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_2 = vector3_0.addScaledLocal(vector3_1, 1.0F);
      Vector3 vector3_3 = new Vector3();
      Vector3 vector3_4 = vector3_3.addLocal((IVector3) vector3_1);
      Vector3 vector3_5 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_6 = (Vector3)Vector3.MAX_VALUE;
      vector3_5.angle(vector3_6);
      vector3_3.z();
      Vector3 vector3_7 = vector3_3.subtract((IVector3) vector3_1, vector3_4);
      vector3_2.lerpLocal(vector3_0, 0.0F);
      Vector3 vector3_8 = vector3_3.mult(0.0F, vector3_7);
      vector3_3.multLocal(1.5707964F);
      Vector3 vector3_9 = vector3_8.addScaled((IVector3) vector3_1, 1.5707964F);
      Vector3 vector3_10 = (Vector3)Vector3.UNIT_Z;
      vector3_10.lerpLocal(vector3_5, 1.5707964F);
      Vector3 vector3_11 = vector3_4.add((-854.0F), (-2174.1782F), 1070.4111F, vector3_8);
      vector3_3.distanceSquared(vector3_9);
      Vector3 vector3_12 = new Vector3();
      vector3_3.addScaled((IVector3) vector3_12, (-1948.31F), vector3_11);
      Object object0 = new Object();
      Object object1 = new Object();
      vector3_7.equals(object1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(0.0F, 0.0F, 553.0F);
      vector3_0.equals(vector3_1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2483.6F);
      floatArray0[2] = 0.0F;
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = vector3_0.set((-3215.2468F), (-1.0F), (-1.0F));
      Vector3 vector3_2 = vector3_1.cross((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_1.subtract((IVector3) vector3_0);
      vector3_3.x();
      vector3_1.hashCode();
      Vector3 vector3_4 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_5 = new Vector3(vector3_0);
      vector3_4.subtract((IVector3) vector3_5, vector3_3);
      Vector3 vector3_6 = vector3_2.absLocal();
      vector3_2.cross((IVector3) vector3_5);
      vector3_6.manhattanDistance(vector3_4);
      Vector3 vector3_7 = new Vector3(vector3_3);
      Vector3 vector3_8 = vector3_2.subtract((IVector3) vector3_4, vector3_7);
      Vector3 vector3_9 = vector3_5.set(0.0F, 1937.233F, (-1143.6F));
      Vector3 vector3_10 = (Vector3)Vector3.UNIT_Y;
      vector3_6.equals(vector3_8);
      vector3_9.lerp((IVector3) vector3_10, 1.0F);
      Vector3 vector3_11 = vector3_2.add((IVector3) vector3_5);
      vector3_11.get(1);
      Vector3 vector3_12 = vector3_11.cross((IVector3) vector3_9);
      Vector3 vector3_13 = vector3_12.absLocal();
      vector3_13.normalizeLocal();
      vector3_3.addLocal((IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = vector3_0.multLocal((-3.4028235E38F));
      Vector3 vector3_2 = vector3_1.mult((-3.4028235E38F));
      Vector3 vector3_3 = vector3_1.add((IVector3) vector3_2);
      vector3_1.manhattanDistance(vector3_0);
      vector3_1.distanceSquared(vector3_0);
      vector3_2.hashCode();
      Vector3 vector3_4 = vector3_1.set((IVector3) vector3_0);
      Vector3 vector3_5 = vector3_2.addScaled((IVector3) vector3_4, Float.POSITIVE_INFINITY, vector3_1);
      Vector3 vector3_6 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_7 = new Vector3(Float.POSITIVE_INFINITY, 0.0F, Float.POSITIVE_INFINITY);
      vector3_5.set((IVector3) vector3_3);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = vector3_0.multLocal((-3.4028235E38F));
      Vector3 vector3_2 = vector3_1.mult((-3.4028235E38F));
      vector3_1.manhattanDistance(vector3_0);
      Vector3 vector3_3 = vector3_0.subtractLocal(vector3_2);
      Vector3 vector3_4 = vector3_0.subtract((IVector3) vector3_2);
      vector3_4.addLocal((IVector3) vector3_3);
      vector3_4.cross((IVector3) vector3_1);
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(2);
      // Undeclared exception!
      try { 
        vector3_3.get(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = vector3_0.multLocal((-3.4028235E38F));
      Vector3 vector3_2 = vector3_1.mult(Float.POSITIVE_INFINITY, vector3_0);
      Vector3 vector3_3 = vector3_1.negateLocal();
      Vector3 vector3_4 = vector3_2.cross((IVector3) vector3_3);
      Vector3 vector3_5 = vector3_3.subtractLocal(vector3_0);
      Vector3 vector3_6 = vector3_5.subtract((IVector3) vector3_4);
      vector3_6.get(2);
      Vector3 vector3_7 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_7.addLocal((IVector3) vector3_5);
      vector3_3.cross((IVector3) vector3_2);
      // Undeclared exception!
      FloatBuffer.allocate(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.mult((-588.60425F));
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_2.set((IVector3) vector3_1);
      Vector3 vector3_4 = vector3_0.abs(vector3_1);
      Vector3 vector3_5 = vector3_4.negate(vector3_2);
      vector3_1.mult(2140.7295F);
      vector3_4.manhattanDistance(vector3_3);
      vector3_2.distanceSquared(vector3_5);
      vector3_5.hashCode();
      vector3_0.set((IVector3) vector3_5);
      Vector3 vector3_6 = (Vector3)Vector3.ZERO;
      vector3_2.addScaled((IVector3) vector3_6, -0.0F, vector3_0);
      vector3_4.get(0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      vector3_1.distance(vector3_0);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_3 = vector3_2.abs();
      vector3_3.set(1.4142135F, 1.4142135F, 1.4142135F);
      Vector3 vector3_4 = vector3_3.set(1.4142135F, 0.0F, 0.0F);
      vector3_3.dot(vector3_2);
      Vector3 vector3_5 = vector3_4.negate(vector3_3);
      vector3_5.multLocal((IVector3) vector3_4);
      Vector3 vector3_6 = vector3_5.normalize();
      vector3_6.set((IVector3) vector3_5);
      vector3_4.mult((IVector3) vector3_1);
      vector3_6.absLocal();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      vector3_3.set(floatArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(0.5F, 0.5F, 0.5F);
      Vector3 vector3_1 = vector3_0.multLocal(0.5F);
      Vector3 vector3_2 = vector3_1.addScaled((IVector3) vector3_0, 0.0F);
      vector3_1.toString();
      vector3_1.angle(vector3_0);
      Vector3 vector3_3 = vector3_0.multLocal((IVector3) vector3_1);
      Vector3 vector3_4 = vector3_1.addScaled((IVector3) vector3_2, 0.0625F);
      Vector3 vector3_5 = vector3_0.negate(vector3_3);
      Vector3 vector3_6 = vector3_5.subtract((IVector3) vector3_4, vector3_1);
      Vector3 vector3_7 = vector3_3.set((IVector3) vector3_1);
      vector3_1.y();
      Vector3 vector3_8 = vector3_1.negateLocal();
      vector3_6.absLocal();
      vector3_8.distance(vector3_7);
      vector3_7.triple(vector3_1, vector3_6);
      vector3_2.hashCode();
      vector3_1.lengthSquared();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.140625F;
      floatArray0[1] = 3.1415927F;
      floatArray0[2] = 0.25F;
      vector3_1.get(floatArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.dot(vector3_0);
      vector3_1.triple(vector3_0, vector3_0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-433.4502F);
      vector3_1.set(floatArray0);
      vector3_1.abs();
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0, 0, 0);
      // Undeclared exception!
      try { 
        floatBuffer0.get();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      vector3_0.crossLocal(vector3_1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 3.4028235E38F;
      // Undeclared exception!
      try { 
        FloatBuffer.wrap(floatArray0, (-2412), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.FloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      vector3_0.x();
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_2 = (Vector3)Vector3.ZERO;
      Vector3 vector3_3 = vector3_1.addScaledLocal(vector3_2, 0.0F);
      vector3_3.y();
      Vector3 vector3_4 = vector3_3.negate();
      Vector3 vector3_5 = vector3_4.mult((IVector3) vector3_1);
      Vector3 vector3_6 = vector3_3.cross((IVector3) vector3_1);
      Vector3 vector3_7 = (Vector3)Vector3.ZERO;
      vector3_4.distanceSquared(vector3_7);
      Vector3 vector3_8 = vector3_4.addScaled((IVector3) vector3_3, 0.0F, vector3_3);
      Vector3 vector3_9 = vector3_6.addLocal((IVector3) vector3_1);
      Vector3 vector3_10 = vector3_5.mult(3.4028235E38F);
      Vector3 vector3_11 = (Vector3)Vector3.MIN_VALUE;
      vector3_6.triple(vector3_8, vector3_11);
      Vector3 vector3_12 = vector3_10.subtract((IVector3) vector3_7);
      vector3_8.angle(vector3_3);
      vector3_9.toString();
      vector3_12.normalize(vector3_4);
      Vector3 vector3_13 = vector3_8.addScaled((IVector3) vector3_7, Float.NaN, vector3_9);
      vector3_10.add((-842.055F), 3.4028235E38F, Float.NaN, vector3_12);
      vector3_13.add(Float.NaN, 1.5707964F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(0.5F, 0.5F, 0.5F);
      Vector3 vector3_1 = vector3_0.multLocal(0.5F);
      vector3_1.toString();
      vector3_1.angle(vector3_0);
      Vector3 vector3_2 = vector3_0.multLocal((IVector3) vector3_1);
      vector3_1.addScaled((IVector3) vector3_1, 0.0625F);
      Vector3 vector3_3 = vector3_0.negate(vector3_2);
      Vector3 vector3_4 = vector3_2.set((IVector3) vector3_1);
      vector3_1.y();
      Vector3 vector3_5 = vector3_1.negateLocal();
      vector3_3.absLocal();
      vector3_5.distance(vector3_4);
      vector3_4.triple(vector3_1, vector3_2);
      vector3_0.hashCode();
      vector3_1.lengthSquared();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0625F;
      floatArray0[1] = 3.1415927F;
      vector3_1.get(floatArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = vector3_0.absLocal();
      vector3_1.mult((IVector3) vector3_0);
      Vector3 vector3_2 = vector3_1.multLocal(0.0F);
      Vector3 vector3_3 = vector3_1.mult(0.0F);
      vector3_2.hashCode();
      vector3_3.z();
      Vector3 vector3_4 = vector3_2.cross((IVector3) vector3_3);
      vector3_3.lengthSquared();
      Vector3 vector3_5 = vector3_1.subtract((IVector3) vector3_3);
      vector3_5.hashCode();
      Vector3 vector3_6 = vector3_1.cross((IVector3) vector3_2);
      Vector3 vector3_7 = vector3_4.mult((IVector3) vector3_3);
      vector3_6.addLocal((IVector3) vector3_1);
      vector3_7.subtractLocal(vector3_1);
      vector3_6.x();
      vector3_6.subtractLocal(vector3_7);
      Vector3 vector3_8 = vector3_1.set((IVector3) vector3_3);
      vector3_1.crossLocal(vector3_7);
      vector3_8.normalize();
      vector3_8.subtractLocal(vector3_3);
      vector3_2.multLocal(0.0F);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      vector3_3.get(floatArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.mult(0.0F, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        vector3_0.set(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.add((IVector3) vector3_0);
      Vector3 vector3_3 = new Vector3(vector3_0);
      vector3_1.mult((IVector3) vector3_3, vector3_2);
      vector3_2.addLocal((IVector3) vector3_3);
      vector3_1.toString();
      Vector3 vector3_4 = vector3_0.subtract((IVector3) vector3_1);
      vector3_4.normalize();
      vector3_4.z();
      vector3_1.length();
      vector3_3.addLocal(68.0F, 2922.389F, 0.0F);
      Vector3 vector3_5 = (Vector3)Vector3.UNIT_XYZ;
      vector3_4.addScaled((IVector3) vector3_5, 2691.0F);
      // Undeclared exception!
      try { 
        FloatBuffer.allocate((-656));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-656 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.5707964F;
      floatArray0[2] = 4055.218F;
      floatArray0[3] = 4055.218F;
      floatArray0[4] = 4055.218F;
      floatArray0[5] = 1.5707964F;
      floatArray0[6] = 447.86F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      vector3_0.add(4055.218F, 1.5707964F, 0.0F, vector3_1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = vector3_0.subtractLocal(vector3_1);
      vector3_2.get(2);
      vector3_0.addLocal((IVector3) vector3_2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.mult((-588.60425F));
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0);
      vector3_2.set((IVector3) vector3_1);
      Vector3 vector3_3 = vector3_0.abs(vector3_1);
      Vector3 vector3_4 = vector3_3.negate(vector3_2);
      Vector3 vector3_5 = vector3_3.mult(0.0F, vector3_2);
      vector3_5.negateLocal();
      vector3_1.cross((IVector3) vector3_2);
      Vector3 vector3_6 = vector3_2.subtractLocal(vector3_0);
      vector3_6.subtract((IVector3) vector3_2);
      vector3_4.get(2);
      vector3_5.addLocal((IVector3) vector3_2);
      vector3_0.cross((IVector3) vector3_6);
      // Undeclared exception!
      FloatBuffer.allocate(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_2 = vector3_1.add((IVector3) vector3_0);
      vector3_2.normalizeLocal();
      vector3_2.dot(vector3_1);
      float[] floatArray0 = new float[0];
      Vector3 vector3_3 = null;
      try {
        vector3_3 = new Vector3(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      vector3_0.length();
      Vector3 vector3_1 = new Vector3();
      Object object0 = new Object();
      vector3_1.equals(object0);
      Vector3 vector3_2 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_3 = vector3_1.crossLocal(vector3_2);
      Vector3 vector3_4 = vector3_3.negate();
      Vector3 vector3_5 = vector3_1.mult((IVector3) vector3_2, vector3_3);
      Vector3 vector3_6 = vector3_4.set(0.0F, 0.0F, (-1.0F));
      Vector3 vector3_7 = vector3_5.addScaled((IVector3) vector3_2, (-1.0F));
      Vector3 vector3_8 = vector3_4.mult(0.0F);
      Vector3 vector3_9 = vector3_4.abs();
      vector3_8.addLocal(1.0F, 0.0F, (-1.0F));
      Vector3 vector3_10 = vector3_5.negate(vector3_6);
      vector3_10.multLocal((IVector3) vector3_1);
      vector3_10.negate();
      Vector3 vector3_11 = vector3_4.negate(vector3_7);
      Vector3 vector3_12 = vector3_10.multLocal((IVector3) vector3_2);
      Vector3 vector3_13 = vector3_4.lerp((IVector3) vector3_2, 1.5707964F, vector3_11);
      vector3_1.lengthSquared();
      vector3_13.lengthSquared();
      vector3_12.hashCode();
      vector3_9.addLocal(-0.0F, Float.POSITIVE_INFINITY, 1738.9144F);
      vector3_13.manhattanDistance(vector3_1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = vector3_0.set(1228.2F, 1228.2F, 0.0F);
      vector3_1.toString();
      Vector3 vector3_2 = vector3_1.addLocal((-1297.8F), 1228.2F, (-2289.0F));
      Vector3 vector3_3 = vector3_2.normalizeLocal();
      Vector3 vector3_4 = vector3_3.normalize(vector3_1);
      vector3_2.lengthSquared();
      vector3_4.x = (-0.020724721F);
      Vector3 vector3_5 = vector3_1.subtract((IVector3) vector3_2);
      vector3_1.negateLocal();
      vector3_2.x();
      vector3_2.toString();
      Vector3 vector3_6 = vector3_2.subtract((IVector3) vector3_4);
      vector3_5.set(177.333F, 1400.185F, 0.0F);
      Vector3 vector3_7 = vector3_5.addLocal(0.0F, (-3.4028235E38F), (-0.7314387F));
      Vector3 vector3_8 = vector3_3.addLocal((-0.7314387F), (-0.710714F), (-0.710714F));
      vector3_6.lerpLocal(vector3_4, (-3.4028235E38F));
      Vector3 vector3_9 = (Vector3)Vector3.ZERO;
      vector3_7.addScaled((IVector3) vector3_9, (-1297.8F), vector3_1);
      vector3_3.distanceSquared(vector3_7);
      vector3_8.mult(1.6961874E37F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.multLocal(627.6371F);
      Vector3 vector3_2 = vector3_1.lerp((IVector3) vector3_0, 0.0F);
      Vector3 vector3_3 = vector3_2.negate();
      vector3_2.toString();
      Vector3 vector3_4 = vector3_3.mult(312.96F, vector3_0);
      Vector3 vector3_5 = vector3_4.absLocal();
      Vector3 vector3_6 = vector3_1.cross((IVector3) vector3_2);
      vector3_0.distanceSquared(vector3_4);
      vector3_3.y();
      Vector3 vector3_7 = vector3_6.mult((IVector3) vector3_3);
      Vector3 vector3_8 = vector3_0.set(0.0F, 0.0F, 0.0F);
      Vector3 vector3_9 = vector3_1.crossLocal(vector3_6);
      vector3_9.normalize(vector3_0);
      Vector3 vector3_10 = vector3_7.addLocal((IVector3) vector3_1);
      vector3_6.angle(vector3_4);
      Vector3 vector3_11 = vector3_6.cross((IVector3) vector3_7, vector3_10);
      Object object0 = new Object();
      vector3_5.equals(object0);
      vector3_1.normalizeLocal();
      vector3_1.equals((Object) null);
      vector3_2.subtract((IVector3) vector3_6);
      vector3_0.mult(-0.0F);
      Vector3 vector3_12 = vector3_11.abs();
      vector3_4.negateLocal();
      Vector3 vector3_13 = vector3_11.negate(vector3_10);
      vector3_13.add(627.6371F, 0.0F, Float.NaN);
      vector3_13.addScaled((IVector3) vector3_12, -0.0F, vector3_8);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector3 vector3_0 = null;
      try {
        vector3_0 = new Vector3((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Object object0 = new Object();
      vector3_0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.multLocal((IVector3) vector3_0);
      vector3_1.toString();
      Vector3 vector3_3 = vector3_1.addLocal(2.7182817F, 3.1415927F, 0.0F);
      Vector3 vector3_4 = vector3_1.subtract((IVector3) vector3_0);
      Vector3 vector3_5 = vector3_1.negate();
      Vector3 vector3_6 = vector3_2.set(1.5707964F, 1792.5164F, 3.1415927F);
      vector3_3.add((IVector3) vector3_0);
      Vector3 vector3_7 = vector3_4.set(2.7182817F, 3.1415927F, 0.017453292F);
      vector3_6.mult((IVector3) vector3_3, vector3_7);
      vector3_5.addLocal((IVector3) vector3_7);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = vector3_0.addLocal((-623.4841F), (-623.4841F), (-2905.18F));
      Vector3 vector3_2 = new Vector3((-1899.0F), 0.0F, (-623.4841F));
      Vector3 vector3_3 = vector3_2.mult((IVector3) vector3_1, vector3_1);
      vector3_3.abs();
      vector3_1.mult((-1899.0F));
      vector3_1.add((IVector3) vector3_0, vector3_2);
      vector3_1.lerp((IVector3) vector3_0, (-623.4841F));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.lerpLocal((IVector3) null, 3.4028235E38F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(816.97766F, 816.97766F, 0.0F);
      Vector3 vector3_1 = vector3_0.absLocal();
      Vector3 vector3_2 = new Vector3(vector3_0);
      vector3_1.set(1893.0F, 938.4272F, 0.0F);
      vector3_1.mult((-775.2774F));
      vector3_2.addScaled((IVector3) vector3_0, 881462.56F, vector3_0);
      vector3_2.mult((IVector3) vector3_1, vector3_1);
      Vector3 vector3_3 = vector3_2.cross((IVector3) vector3_0, vector3_0);
      vector3_2.lerpLocal(vector3_0, (-5.979021E11F));
      vector3_3.add(1512.804F, 1359.657F, 1878.5447F, vector3_2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      vector3_0.equals(vector3_1);
      Vector3 vector3_2 = new Vector3();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_2 = vector3_1.addScaledLocal(vector3_0, 1100.1838F);
      Vector3 vector3_3 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_2.equals(vector3_3);
      Vector3 vector3_4 = null;
      try {
        vector3_4 = new Vector3((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = vector3_0.negateLocal();
      Vector3 vector3_2 = vector3_1.negateLocal();
      Vector3 vector3_3 = vector3_1.cross((IVector3) vector3_2);
      vector3_2.hashCode();
      Vector3 vector3_4 = vector3_3.cross((IVector3) vector3_0, vector3_1);
      vector3_2.dot(vector3_4);
      Vector3 vector3_5 = vector3_2.multLocal((IVector3) vector3_0);
      Vector3 vector3_6 = vector3_5.addScaled((IVector3) vector3_3, 0.0F);
      Vector3 vector3_7 = vector3_4.abs();
      Vector3 vector3_8 = vector3_2.negate(vector3_5);
      vector3_6.y = (-1308.283F);
      Vector3 vector3_9 = vector3_4.absLocal();
      Vector3 vector3_10 = vector3_7.set(1.0F, Float.NaN, 2123.6F);
      Vector3 vector3_11 = vector3_9.cross((IVector3) vector3_2);
      vector3_4.subtract((IVector3) vector3_8);
      vector3_8.x();
      vector3_5.hashCode();
      Vector3 vector3_12 = vector3_1.subtract((IVector3) vector3_0, vector3_8);
      Vector3 vector3_13 = vector3_6.absLocal();
      vector3_13.cross((IVector3) vector3_6);
      vector3_7.manhattanDistance(vector3_12);
      Vector3 vector3_14 = vector3_5.subtract((IVector3) vector3_7, vector3_2);
      Vector3 vector3_15 = vector3_5.set(Float.NaN, 23.654F, (-846.849F));
      Vector3 vector3_16 = (Vector3)Vector3.UNIT_Y;
      vector3_11.equals(vector3_16);
      Vector3 vector3_17 = vector3_11.lerp((IVector3) vector3_2, Float.NaN);
      vector3_6.add((IVector3) vector3_10);
      vector3_15.cross((IVector3) vector3_17);
      vector3_7.addLocal((IVector3) vector3_14);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.multLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.negateLocal();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_0.hashCode();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_2 = vector3_1.mult(1081.7734F);
      vector3_2.length();
      vector3_2.distanceSquared(vector3_1);
      Vector3 vector3_3 = vector3_2.negateLocal();
      Vector3 vector3_4 = vector3_2.mult((IVector3) vector3_3);
      float[] floatArray0 = new float[1];
      IVector3 iVector3_0 = null;
      // Undeclared exception!
      try { 
        vector3_4.multLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      vector3_0.cross((IVector3) vector3_1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.toString();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      float float0 = 1.0F;
      Vector3 vector3_1 = new Vector3(1.0F, 1.0F, 0.0F);
      Vector3 vector3_2 = vector3_1.normalizeLocal();
      Vector3 vector3_3 = vector3_0.set((IVector3) vector3_1);
      vector3_1.angle(vector3_3);
      vector3_2.mult((IVector3) vector3_3);
      Vector3 vector3_4 = vector3_1.addLocal(1506.146F, 0.70710677F, 0.0F);
      vector3_3.toString();
      vector3_2.cross((IVector3) vector3_4);
      Vector3 vector3_5 = vector3_2.negate();
      vector3_5.z = (-1.0F);
      // Undeclared exception!
      try { 
        vector3_5.get(1632);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1632
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      vector3_0.angle(vector3_1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_0.cross((IVector3) vector3_1, vector3_1);
      Vector3 vector3_3 = vector3_2.mult(3554.0F);
      vector3_1.mult((IVector3) vector3_3, vector3_2);
      vector3_1.y = 0.0F;
      Vector3 vector3_4 = vector3_2.addLocal(3.4028235E38F, 0.0F, 1884.0F);
      vector3_4.mult((IVector3) vector3_1, vector3_1);
      Vector3 vector3_5 = vector3_1.mult(Float.POSITIVE_INFINITY);
      vector3_4.y();
      vector3_5.dot(vector3_3);
      vector3_3.subtract((IVector3) vector3_5);
      Vector3 vector3_6 = vector3_4.absLocal();
      vector3_1.add(0.0F, Float.NaN, (-2624.7F), vector3_5);
      vector3_4.mult((IVector3) vector3_0, vector3_1);
      vector3_4.manhattanDistance(vector3_5);
      vector3_4.addScaledLocal(vector3_2, 3554.0F);
      vector3_2.lerp((IVector3) vector3_6, (-2753.7693F));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.abs();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      
      Vector3 vector3_2 = vector3_0.addScaled((IVector3) vector3_1, 0.0F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      vector3_0.distance(vector3_1);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_3 = vector3_2.abs();
      vector3_3.lengthSquared();
      vector3_3.triple(vector3_0, vector3_0);
      vector3_3.y();
      Vector3 vector3_4 = vector3_3.mult((IVector3) vector3_0);
      vector3_3.add((IVector3) vector3_4, vector3_4);
      vector3_4.add(2.7182817F, (-48.83786F), 0.0F, vector3_3);
      vector3_4.add(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 3.4028235E38F);
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(743);
      floatBuffer0.compact();
      // Undeclared exception!
      try { 
        vector3_4.get(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Vector3 vector3_0 = null;
      try {
        vector3_0 = new Vector3(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.addLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.add(786.39F, 786.39F, 786.39F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(0.0F, 0.0F, 0.0F);
      vector3_0.lerpLocal(vector3_1, 0.0F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_0.triple(vector3_1, vector3_1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.negate();
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals((-0.57735026F), vector3_1.x, 0.01F);
      assertEquals((-0.57735026F), vector3_1.y, 0.01F);
      assertEquals((-0.57735026F), vector3_1.z, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals((-0.57735026F), vector3_1.z(), 0.01F);
      assertEquals((-0.57735026F), vector3_1.x(), 0.01F);
      assertEquals(0.99999994F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.57735026F), vector3_1.y(), 0.01F);
      assertEquals(0.99999994F, vector3_1.length(), 0.01F);
      
      Vector3 vector3_2 = vector3_1.lerp((IVector3) vector3_0, (-3754.25F));
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals((-0.57735026F), vector3_1.x, 0.01F);
      assertEquals((-0.57735026F), vector3_1.y, 0.01F);
      assertEquals((-0.57735026F), vector3_1.z, 0.01F);
      assertEquals((-4335.6113F), vector3_2.y, 0.01F);
      assertEquals((-4335.6113F), vector3_2.x, 0.01F);
      assertEquals((-4335.6113F), vector3_2.z, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals((-0.57735026F), vector3_1.z(), 0.01F);
      assertEquals((-0.57735026F), vector3_1.x(), 0.01F);
      assertEquals(0.99999994F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.57735026F), vector3_1.y(), 0.01F);
      assertEquals(0.99999994F, vector3_1.length(), 0.01F);
      assertEquals((-4335.6113F), vector3_2.z(), 0.01F);
      assertEquals((-4335.6113F), vector3_2.y(), 0.01F);
      assertEquals(5.6392576E7F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-4335.6113F), vector3_2.x(), 0.01F);
      assertEquals(7509.499F, vector3_2.length(), 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-4335.6113F);
      floatArray0[1] = (-0.57735026F);
      floatArray0[2] = (-0.57735026F);
      Vector3 vector3_3 = vector3_1.abs(vector3_2);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals((-0.57735026F), vector3_1.x, 0.01F);
      assertEquals((-0.57735026F), vector3_1.y, 0.01F);
      assertEquals((-0.57735026F), vector3_1.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.y, 0.01F);
      assertEquals(0.57735026F, vector3_2.x, 0.01F);
      assertEquals(0.57735026F, vector3_3.y, 0.01F);
      assertEquals(0.57735026F, vector3_3.x, 0.01F);
      assertEquals(0.57735026F, vector3_3.z, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertNotNull(vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals((-0.57735026F), vector3_1.z(), 0.01F);
      assertEquals((-0.57735026F), vector3_1.x(), 0.01F);
      assertEquals(0.99999994F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-0.57735026F), vector3_1.y(), 0.01F);
      assertEquals(0.99999994F, vector3_1.length(), 0.01F);
      assertEquals(0.99999994F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_2.z(), 0.01F);
      assertEquals(0.57735026F, vector3_2.y(), 0.01F);
      assertEquals(0.99999994F, vector3_2.length(), 0.01F);
      assertEquals(0.57735026F, vector3_2.x(), 0.01F);
      assertEquals(0.57735026F, vector3_3.x(), 0.01F);
      assertEquals(0.57735026F, vector3_3.z(), 0.01F);
      assertEquals(0.99999994F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_3.y(), 0.01F);
      assertEquals(0.99999994F, vector3_3.length(), 0.01F);
      
      floatArray0[3] = 0.57735026F;
      floatArray0[4] = 1323.0F;
      Vector3 vector3_4 = vector3_2.set(floatArray0);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals((-0.57735026F), vector3_1.x, 0.01F);
      assertEquals((-0.57735026F), vector3_1.y, 0.01F);
      assertEquals((-0.57735026F), vector3_1.z, 0.01F);
      assertEquals((-4335.6113F), vector3_2.x, 0.01F);
      assertEquals((-0.57735026F), vector3_2.z, 0.01F);
      assertEquals((-0.57735026F), vector3_2.y, 0.01F);
      assertEquals((-0.57735026F), vector3_4.z, 0.01F);
      assertEquals((-0.57735026F), vector3_4.y, 0.01F);
      assertEquals((-4335.6113F), vector3_4.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertNotNull(vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_3);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      
      Vector3 vector3_5 = vector3_2.cross((IVector3) vector3_0);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals((-0.57735026F), vector3_1.x, 0.01F);
      assertEquals((-0.57735026F), vector3_1.y, 0.01F);
      assertEquals((-0.57735026F), vector3_1.z, 0.01F);
      assertEquals((-4335.6113F), vector3_2.x, 0.01F);
      assertEquals((-0.57735026F), vector3_2.z, 0.01F);
      assertEquals((-0.57735026F), vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.833F, vector3_5.y, 0.01F);
      assertEquals((-2502.833F), vector3_5.z, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertNotNull(vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_0);
      
      float float0 = vector3_1.distance(vector3_0);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals((-0.57735026F), vector3_1.x, 0.01F);
      assertEquals((-0.57735026F), vector3_1.y, 0.01F);
      assertEquals((-0.57735026F), vector3_1.z, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertEquals(1.9999999F, float0, 0.01F);
      
      vector3_5.x = 0.0F;
      Vector3 vector3_6 = vector3_5.add(0.0F, (-0.57735026F), 194.03F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals((-0.57735026F), vector3_1.x, 0.01F);
      assertEquals((-0.57735026F), vector3_1.y, 0.01F);
      assertEquals((-0.57735026F), vector3_1.z, 0.01F);
      assertEquals((-4335.6113F), vector3_2.x, 0.01F);
      assertEquals((-0.57735026F), vector3_2.z, 0.01F);
      assertEquals((-0.57735026F), vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.833F, vector3_5.y, 0.01F);
      assertEquals((-2502.833F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertNotNull(vector3_6);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      
      Vector3 vector3_7 = vector3_2.addScaled((IVector3) vector3_6, 1.9999999F, vector3_1);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-4335.6113F), vector3_2.x, 0.01F);
      assertEquals((-0.57735026F), vector3_2.z, 0.01F);
      assertEquals((-0.57735026F), vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.833F, vector3_5.y, 0.01F);
      assertEquals((-2502.833F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(5003.9336F, vector3_7.y, 0.01F);
      assertEquals((-4618.1826F), vector3_7.z, 0.01F);
      assertEquals((-4335.6113F), vector3_7.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_4));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertNotNull(vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      assertSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_6);
      
      Vector3 vector3_8 = vector3_5.lerp((IVector3) vector3_6, (-552.9084F));
      assertEquals(2822.0781F, vector3_8.y, 0.01F);
      assertEquals(0.0F, vector3_8.x, 0.01F);
      assertEquals((-109783.664F), vector3_8.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-4335.6113F), vector3_2.x, 0.01F);
      assertEquals((-0.57735026F), vector3_2.z, 0.01F);
      assertEquals((-0.57735026F), vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.833F, vector3_5.y, 0.01F);
      assertEquals((-2502.833F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertFalse(vector3_8.equals((Object)vector3_7));
      assertFalse(vector3_8.equals((Object)vector3_1));
      assertFalse(vector3_8.equals((Object)vector3_5));
      assertFalse(vector3_8.equals((Object)vector3_0));
      assertFalse(vector3_8.equals((Object)vector3_6));
      assertFalse(vector3_8.equals((Object)vector3_2));
      assertFalse(vector3_8.equals((Object)vector3_4));
      assertFalse(vector3_8.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertNotNull(vector3_8);
      assertNotSame(vector3_8, vector3_7);
      assertNotSame(vector3_8, vector3_1);
      assertNotSame(vector3_8, vector3_5);
      assertNotSame(vector3_8, vector3_0);
      assertNotSame(vector3_8, vector3_6);
      assertNotSame(vector3_8, vector3_2);
      assertNotSame(vector3_8, vector3_4);
      assertNotSame(vector3_8, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      
      Vector3 vector3_9 = vector3_6.negate(vector3_2);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals((-2502.2556F), vector3_9.y, 0.01F);
      assertEquals(2308.803F, vector3_9.z, 0.01F);
      assertEquals(-0.0F, vector3_9.x, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-2502.2556F), vector3_2.y, 0.01F);
      assertEquals(-0.0F, vector3_2.x, 0.01F);
      assertEquals(2308.803F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.833F, vector3_5.y, 0.01F);
      assertEquals((-2502.833F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_9.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_6));
      assertFalse(vector3_9.equals((Object)vector3_0));
      assertFalse(vector3_9.equals((Object)vector3_8));
      assertFalse(vector3_9.equals((Object)vector3_5));
      assertFalse(vector3_9.equals((Object)vector3_7));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertNotNull(vector3_9);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertSame(vector3_9, vector3_3);
      assertNotSame(vector3_9, vector3_1);
      assertNotSame(vector3_9, vector3_6);
      assertNotSame(vector3_9, vector3_0);
      assertSame(vector3_9, vector3_2);
      assertSame(vector3_9, vector3_4);
      assertNotSame(vector3_9, vector3_8);
      assertNotSame(vector3_9, vector3_5);
      assertNotSame(vector3_9, vector3_7);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_9);
      
      float float1 = vector3_6.y();
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-2502.2556F), vector3_2.y, 0.01F);
      assertEquals(-0.0F, vector3_2.x, 0.01F);
      assertEquals(2308.803F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.833F, vector3_5.y, 0.01F);
      assertEquals((-2502.833F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_9));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_9);
      assertEquals(2502.2556F, float1, 0.01F);
      
      Vector3 vector3_10 = vector3_6.addScaled((IVector3) vector3_7, (-0.57735026F), vector3_4);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals(2503.1663F, vector3_2.x, 0.01F);
      assertEquals(357.50586F, vector3_2.z, 0.01F);
      assertEquals((-386.76685F), vector3_2.y, 0.01F);
      assertEquals(2503.1663F, vector3_10.x, 0.01F);
      assertEquals((-386.76685F), vector3_10.y, 0.01F);
      assertEquals(357.50586F, vector3_10.z, 0.01F);
      assertEquals(357.50586F, vector3_4.z, 0.01F);
      assertEquals(2503.1663F, vector3_4.x, 0.01F);
      assertEquals((-386.76685F), vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.833F, vector3_5.y, 0.01F);
      assertEquals((-2502.833F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(5003.9336F, vector3_7.y, 0.01F);
      assertEquals((-4618.1826F), vector3_7.z, 0.01F);
      assertEquals((-4335.6113F), vector3_7.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_10.equals((Object)vector3_1));
      assertFalse(vector3_10.equals((Object)vector3_0));
      assertFalse(vector3_10.equals((Object)vector3_5));
      assertFalse(vector3_10.equals((Object)vector3_8));
      assertFalse(vector3_10.equals((Object)vector3_7));
      assertFalse(vector3_10.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(vector3_4.equals((Object)vector3_8));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_9));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_8));
      assertFalse(vector3_7.equals((Object)vector3_9));
      assertFalse(vector3_7.equals((Object)vector3_4));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertNotNull(vector3_10);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_10);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_10);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_10, vector3_9);
      assertNotSame(vector3_10, vector3_1);
      assertSame(vector3_10, vector3_2);
      assertSame(vector3_10, vector3_4);
      assertNotSame(vector3_10, vector3_0);
      assertSame(vector3_10, vector3_3);
      assertNotSame(vector3_10, vector3_5);
      assertNotSame(vector3_10, vector3_8);
      assertNotSame(vector3_10, vector3_7);
      assertNotSame(vector3_10, vector3_6);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_8);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_6);
      assertSame(vector3_4, vector3_9);
      assertSame(vector3_4, vector3_10);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_10);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_10);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_9);
      assertSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(vector3_7, vector3_8);
      assertNotSame(vector3_7, vector3_9);
      assertNotSame(vector3_7, vector3_10);
      assertNotSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_6);
      
      Vector3 vector3_11 = vector3_6.negate(vector3_2);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-2502.2556F), vector3_2.y, 0.01F);
      assertEquals(-0.0F, vector3_2.x, 0.01F);
      assertEquals(2308.803F, vector3_2.z, 0.01F);
      assertEquals((-2502.2556F), vector3_11.y, 0.01F);
      assertEquals(-0.0F, vector3_11.x, 0.01F);
      assertEquals(2308.803F, vector3_11.z, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.833F, vector3_5.y, 0.01F);
      assertEquals((-2502.833F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_10));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_10));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_11.equals((Object)vector3_7));
      assertFalse(vector3_11.equals((Object)vector3_1));
      assertFalse(vector3_11.equals((Object)vector3_5));
      assertFalse(vector3_11.equals((Object)vector3_8));
      assertFalse(vector3_11.equals((Object)vector3_0));
      assertFalse(vector3_11.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_10));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_10));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_9));
      assertNotNull(vector3_11);
      assertNotSame(vector3_0, vector3_11);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_10);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_11);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_10);
      assertSame(vector3_2, vector3_11);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_11, vector3_7);
      assertNotSame(vector3_11, vector3_1);
      assertSame(vector3_11, vector3_3);
      assertNotSame(vector3_11, vector3_5);
      assertSame(vector3_11, vector3_4);
      assertNotSame(vector3_11, vector3_8);
      assertSame(vector3_11, vector3_2);
      assertNotSame(vector3_11, vector3_0);
      assertNotSame(vector3_11, vector3_6);
      assertSame(vector3_11, vector3_10);
      assertSame(vector3_11, vector3_9);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_11);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_10);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_10);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_11);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_9);
      
      Vector3 vector3_12 = vector3_4.mult(0.57735026F, vector3_5);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-2502.2556F), vector3_2.y, 0.01F);
      assertEquals(-0.0F, vector3_2.x, 0.01F);
      assertEquals(2308.803F, vector3_2.z, 0.01F);
      assertEquals((-1444.678F), vector3_12.y, 0.01F);
      assertEquals(-0.0F, vector3_12.x, 0.01F);
      assertEquals(1332.988F, vector3_12.z, 0.01F);
      assertEquals(2308.803F, vector3_4.z, 0.01F);
      assertEquals((-2502.2556F), vector3_4.y, 0.01F);
      assertEquals(-0.0F, vector3_4.x, 0.01F);
      assertEquals((-1444.678F), vector3_5.y, 0.01F);
      assertEquals(1332.988F, vector3_5.z, 0.01F);
      assertEquals(-0.0F, vector3_5.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_11));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_10));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_10));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_11));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_12.equals((Object)vector3_2));
      assertFalse(vector3_12.equals((Object)vector3_7));
      assertFalse(vector3_12.equals((Object)vector3_9));
      assertFalse(vector3_12.equals((Object)vector3_11));
      assertFalse(vector3_12.equals((Object)vector3_3));
      assertFalse(vector3_12.equals((Object)vector3_4));
      assertFalse(vector3_12.equals((Object)vector3_1));
      assertFalse(vector3_12.equals((Object)vector3_10));
      assertFalse(vector3_12.equals((Object)vector3_6));
      assertFalse(vector3_12.equals((Object)vector3_0));
      assertFalse(vector3_12.equals((Object)vector3_8));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(vector3_4.equals((Object)vector3_8));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_11));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_10));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertNotNull(vector3_12);
      assertNotSame(vector3_0, vector3_11);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_12);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_10);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_11);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_12);
      assertSame(vector3_2, vector3_10);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_11);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_12);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_12, vector3_2);
      assertNotSame(vector3_12, vector3_7);
      assertNotSame(vector3_12, vector3_9);
      assertNotSame(vector3_12, vector3_11);
      assertNotSame(vector3_12, vector3_3);
      assertNotSame(vector3_12, vector3_4);
      assertNotSame(vector3_12, vector3_1);
      assertSame(vector3_12, vector3_5);
      assertNotSame(vector3_12, vector3_10);
      assertNotSame(vector3_12, vector3_6);
      assertNotSame(vector3_12, vector3_0);
      assertNotSame(vector3_12, vector3_8);
      assertSame(vector3_4, vector3_11);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_8);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_6);
      assertSame(vector3_4, vector3_9);
      assertNotSame(vector3_4, vector3_12);
      assertSame(vector3_4, vector3_10);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_12);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_11);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_10);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_0);
      
      float float2 = vector3_5.manhattanDistance(vector3_7);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-2502.2556F), vector3_2.y, 0.01F);
      assertEquals(-0.0F, vector3_2.x, 0.01F);
      assertEquals(2308.803F, vector3_2.z, 0.01F);
      assertEquals((-1444.678F), vector3_5.y, 0.01F);
      assertEquals(1332.988F, vector3_5.z, 0.01F);
      assertEquals(-0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(5003.9336F, vector3_7.y, 0.01F);
      assertEquals((-4618.1826F), vector3_7.z, 0.01F);
      assertEquals((-4335.6113F), vector3_7.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_11));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_10));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_12));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_10));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_11));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_12));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_12));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_11));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_10));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_12));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_10));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_11));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_9));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_12));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_8));
      assertFalse(vector3_7.equals((Object)vector3_9));
      assertFalse(vector3_7.equals((Object)vector3_10));
      assertFalse(vector3_7.equals((Object)vector3_4));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertFalse(vector3_7.equals((Object)vector3_11));
      assertNotSame(vector3_0, vector3_11);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_12);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_10);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_11);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_12);
      assertSame(vector3_2, vector3_10);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_11);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_12);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_12);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_11);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_10);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_12);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_10);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_11);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_9);
      assertSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_12);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(vector3_7, vector3_8);
      assertNotSame(vector3_7, vector3_9);
      assertNotSame(vector3_7, vector3_10);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_11);
      assertEquals(16735.395F, float2, 0.01F);
      
      Vector3 vector3_13 = vector3_11.negate(vector3_4);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals(2502.2556F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals((-2308.803F), vector3_2.z, 0.01F);
      assertEquals(2502.2556F, vector3_11.y, 0.01F);
      assertEquals(0.0F, vector3_11.x, 0.01F);
      assertEquals((-2308.803F), vector3_11.z, 0.01F);
      assertEquals((-2308.803F), vector3_13.z, 0.01F);
      assertEquals(0.0F, vector3_13.x, 0.01F);
      assertEquals(2502.2556F, vector3_13.y, 0.01F);
      assertEquals((-2308.803F), vector3_4.z, 0.01F);
      assertEquals(2502.2556F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals((-1444.678F), vector3_5.y, 0.01F);
      assertEquals(1332.988F, vector3_5.z, 0.01F);
      assertEquals(-0.0F, vector3_5.x, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_11));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_10));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_12));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_10));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_11));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_12));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_12));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_11.equals((Object)vector3_6));
      assertFalse(vector3_11.equals((Object)vector3_7));
      assertFalse(vector3_11.equals((Object)vector3_1));
      assertFalse(vector3_11.equals((Object)vector3_5));
      assertFalse(vector3_11.equals((Object)vector3_8));
      assertFalse(vector3_11.equals((Object)vector3_0));
      assertFalse(vector3_11.equals((Object)vector3_12));
      assertFalse(vector3_13.equals((Object)vector3_12));
      assertFalse(vector3_13.equals((Object)vector3_7));
      assertFalse(vector3_13.equals((Object)vector3_5));
      assertTrue(vector3_13.equals((Object)vector3_6));
      assertFalse(vector3_13.equals((Object)vector3_1));
      assertFalse(vector3_13.equals((Object)vector3_8));
      assertFalse(vector3_13.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(vector3_4.equals((Object)vector3_8));
      assertTrue(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_12));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_11));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_10));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_12));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertTrue(vector3_6.equals((Object)vector3_2));
      assertTrue(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertTrue(vector3_6.equals((Object)vector3_11));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertTrue(vector3_6.equals((Object)vector3_3));
      assertTrue(vector3_6.equals((Object)vector3_10));
      assertTrue(vector3_6.equals((Object)vector3_9));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertNotNull(vector3_13);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_12);
      assertNotSame(vector3_0, vector3_11);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_13);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_11);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_12);
      assertNotSame(vector3_1, vector3_10);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_13);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_10);
      assertSame(vector3_2, vector3_11);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_13);
      assertNotSame(vector3_2, vector3_12);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_11, vector3_5);
      assertSame(vector3_11, vector3_3);
      assertSame(vector3_11, vector3_13);
      assertNotSame(vector3_11, vector3_8);
      assertSame(vector3_11, vector3_9);
      assertNotSame(vector3_11, vector3_1);
      assertNotSame(vector3_11, vector3_7);
      assertSame(vector3_11, vector3_4);
      assertNotSame(vector3_11, vector3_0);
      assertSame(vector3_11, vector3_2);
      assertNotSame(vector3_11, vector3_6);
      assertSame(vector3_11, vector3_10);
      assertNotSame(vector3_11, vector3_12);
      assertNotSame(vector3_13, vector3_12);
      assertNotSame(vector3_13, vector3_5);
      assertSame(vector3_13, vector3_10);
      assertNotSame(vector3_13, vector3_1);
      assertSame(vector3_13, vector3_3);
      assertSame(vector3_13, vector3_9);
      assertSame(vector3_13, vector3_4);
      assertNotSame(vector3_13, vector3_0);
      assertNotSame(vector3_13, vector3_7);
      assertNotSame(vector3_13, vector3_6);
      assertSame(vector3_13, vector3_2);
      assertSame(vector3_13, vector3_11);
      assertNotSame(vector3_13, vector3_8);
      assertSame(vector3_4, vector3_11);
      assertNotSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_13);
      assertNotSame(vector3_4, vector3_8);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_9);
      assertNotSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_12);
      assertSame(vector3_4, vector3_10);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_12);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_13);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_11);
      assertNotSame(vector3_5, vector3_10);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_10);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_11);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_12);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_13);
      assertNotSame(vector3_6, vector3_9);
      
      Vector3 vector3_14 = vector3_5.addLocal((IVector3) vector3_6);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals(2502.2556F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals((-2308.803F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_14.x, 0.01F);
      assertEquals((-975.81494F), vector3_14.z, 0.01F);
      assertEquals(1057.5776F, vector3_14.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(1057.5776F, vector3_5.y, 0.01F);
      assertEquals((-975.81494F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_10));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_12));
      assertFalse(vector3_0.equals((Object)vector3_11));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_13));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_10));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_13));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_11));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_12));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_12));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_14.equals((Object)vector3_0));
      assertFalse(vector3_14.equals((Object)vector3_6));
      assertFalse(vector3_14.equals((Object)vector3_9));
      assertFalse(vector3_14.equals((Object)vector3_3));
      assertFalse(vector3_14.equals((Object)vector3_8));
      assertFalse(vector3_14.equals((Object)vector3_11));
      assertFalse(vector3_14.equals((Object)vector3_2));
      assertFalse(vector3_14.equals((Object)vector3_4));
      assertFalse(vector3_14.equals((Object)vector3_7));
      assertFalse(vector3_14.equals((Object)vector3_13));
      assertFalse(vector3_14.equals((Object)vector3_1));
      assertFalse(vector3_14.equals((Object)vector3_10));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_13));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_11));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_10));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertTrue(vector3_6.equals((Object)vector3_2));
      assertTrue(vector3_6.equals((Object)vector3_4));
      assertTrue(vector3_6.equals((Object)vector3_3));
      assertTrue(vector3_6.equals((Object)vector3_10));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_12));
      assertTrue(vector3_6.equals((Object)vector3_13));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertTrue(vector3_6.equals((Object)vector3_11));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertTrue(vector3_6.equals((Object)vector3_9));
      assertNotNull(vector3_14);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_12);
      assertNotSame(vector3_0, vector3_11);
      assertNotSame(vector3_0, vector3_14);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_13);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_14);
      assertNotSame(vector3_1, vector3_11);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_12);
      assertNotSame(vector3_1, vector3_10);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_13);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_10);
      assertSame(vector3_2, vector3_11);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_13);
      assertNotSame(vector3_2, vector3_12);
      assertNotSame(vector3_2, vector3_14);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_14, vector3_0);
      assertNotSame(vector3_14, vector3_9);
      assertNotSame(vector3_14, vector3_8);
      assertSame(vector3_14, vector3_12);
      assertNotSame(vector3_14, vector3_4);
      assertNotSame(vector3_14, vector3_13);
      assertNotSame(vector3_14, vector3_6);
      assertNotSame(vector3_14, vector3_3);
      assertNotSame(vector3_14, vector3_11);
      assertNotSame(vector3_14, vector3_2);
      assertNotSame(vector3_14, vector3_7);
      assertNotSame(vector3_14, vector3_1);
      assertSame(vector3_14, vector3_5);
      assertNotSame(vector3_14, vector3_10);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_12);
      assertSame(vector3_5, vector3_14);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_13);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_11);
      assertNotSame(vector3_5, vector3_10);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_10);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_11);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_12);
      assertNotSame(vector3_6, vector3_14);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_13);
      assertNotSame(vector3_6, vector3_9);
      
      Vector3 vector3_15 = (Vector3)Vector3.UNIT_Y;
      assertEquals(0.0F, vector3_15.z, 0.01F);
      assertEquals(0.0F, vector3_15.x, 0.01F);
      assertEquals(1.0F, vector3_15.y, 0.01F);
      assertFalse(vector3_15.equals((Object)vector3_9));
      assertFalse(vector3_15.equals((Object)vector3_8));
      assertFalse(vector3_15.equals((Object)vector3_1));
      assertFalse(vector3_15.equals((Object)vector3_5));
      assertFalse(vector3_15.equals((Object)vector3_0));
      assertFalse(vector3_15.equals((Object)vector3_14));
      assertFalse(vector3_15.equals((Object)vector3_13));
      assertFalse(vector3_15.equals((Object)vector3_3));
      assertFalse(vector3_15.equals((Object)vector3_4));
      assertFalse(vector3_15.equals((Object)vector3_10));
      assertFalse(vector3_15.equals((Object)vector3_6));
      assertFalse(vector3_15.equals((Object)vector3_7));
      assertFalse(vector3_15.equals((Object)vector3_12));
      assertFalse(vector3_15.equals((Object)vector3_11));
      assertFalse(vector3_15.equals((Object)vector3_2));
      assertNotNull(vector3_15);
      assertNotSame(vector3_15, vector3_9);
      assertNotSame(vector3_15, vector3_8);
      assertNotSame(vector3_15, vector3_1);
      assertNotSame(vector3_15, vector3_5);
      assertNotSame(vector3_15, vector3_0);
      assertNotSame(vector3_15, vector3_14);
      assertNotSame(vector3_15, vector3_13);
      assertNotSame(vector3_15, vector3_3);
      assertNotSame(vector3_15, vector3_4);
      assertNotSame(vector3_15, vector3_10);
      assertNotSame(vector3_15, vector3_6);
      assertNotSame(vector3_15, vector3_7);
      assertNotSame(vector3_15, vector3_12);
      assertNotSame(vector3_15, vector3_11);
      assertNotSame(vector3_15, vector3_2);
      
      Vector3 vector3_16 = vector3_11.lerpLocal(vector3_15, (-975.81494F));
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-2255273.2F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(2443264.8F, vector3_2.y, 0.01F);
      assertEquals(2443264.8F, vector3_11.y, 0.01F);
      assertEquals(0.0F, vector3_11.x, 0.01F);
      assertEquals((-2255273.2F), vector3_11.z, 0.01F);
      assertEquals(0.0F, vector3_15.z, 0.01F);
      assertEquals(0.0F, vector3_15.x, 0.01F);
      assertEquals(1.0F, vector3_15.y, 0.01F);
      assertEquals(0.0F, vector3_16.x, 0.01F);
      assertEquals((-2255273.2F), vector3_16.z, 0.01F);
      assertEquals(2443264.8F, vector3_16.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(1057.5776F, vector3_5.y, 0.01F);
      assertEquals((-975.81494F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_10));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_12));
      assertFalse(vector3_0.equals((Object)vector3_11));
      assertFalse(vector3_0.equals((Object)vector3_14));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_15));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_13));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_14));
      assertFalse(vector3_1.equals((Object)vector3_11));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_12));
      assertFalse(vector3_1.equals((Object)vector3_10));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_15));
      assertFalse(vector3_1.equals((Object)vector3_13));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_15));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_12));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_14));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_11.equals((Object)vector3_14));
      assertFalse(vector3_11.equals((Object)vector3_7));
      assertFalse(vector3_11.equals((Object)vector3_1));
      assertFalse(vector3_11.equals((Object)vector3_5));
      assertFalse(vector3_11.equals((Object)vector3_8));
      assertFalse(vector3_11.equals((Object)vector3_15));
      assertFalse(vector3_11.equals((Object)vector3_0));
      assertFalse(vector3_11.equals((Object)vector3_6));
      assertFalse(vector3_11.equals((Object)vector3_12));
      assertFalse(vector3_15.equals((Object)vector3_9));
      assertFalse(vector3_15.equals((Object)vector3_8));
      assertFalse(vector3_15.equals((Object)vector3_1));
      assertFalse(vector3_15.equals((Object)vector3_5));
      assertFalse(vector3_15.equals((Object)vector3_0));
      assertFalse(vector3_15.equals((Object)vector3_14));
      assertFalse(vector3_15.equals((Object)vector3_13));
      assertFalse(vector3_15.equals((Object)vector3_3));
      assertFalse(vector3_15.equals((Object)vector3_4));
      assertFalse(vector3_15.equals((Object)vector3_10));
      assertFalse(vector3_15.equals((Object)vector3_6));
      assertFalse(vector3_15.equals((Object)vector3_7));
      assertFalse(vector3_15.equals((Object)vector3_12));
      assertFalse(vector3_15.equals((Object)vector3_11));
      assertFalse(vector3_15.equals((Object)vector3_2));
      assertFalse(vector3_16.equals((Object)vector3_0));
      assertFalse(vector3_16.equals((Object)vector3_6));
      assertFalse(vector3_16.equals((Object)vector3_8));
      assertFalse(vector3_16.equals((Object)vector3_12));
      assertFalse(vector3_16.equals((Object)vector3_7));
      assertFalse(vector3_16.equals((Object)vector3_15));
      assertFalse(vector3_16.equals((Object)vector3_5));
      assertFalse(vector3_16.equals((Object)vector3_14));
      assertFalse(vector3_16.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_13));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_11));
      assertFalse(vector3_5.equals((Object)vector3_10));
      assertFalse(vector3_5.equals((Object)vector3_15));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_10));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_11));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_12));
      assertFalse(vector3_6.equals((Object)vector3_14));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_15));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_13));
      assertFalse(vector3_6.equals((Object)vector3_9));
      assertNotNull(vector3_16);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_12);
      assertNotSame(vector3_0, vector3_11);
      assertNotSame(vector3_0, vector3_14);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_16);
      assertNotSame(vector3_0, vector3_15);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_13);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_16);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_14);
      assertNotSame(vector3_1, vector3_11);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_12);
      assertNotSame(vector3_1, vector3_10);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_15);
      assertNotSame(vector3_1, vector3_13);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_10);
      assertNotSame(vector3_2, vector3_15);
      assertSame(vector3_2, vector3_11);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_16);
      assertSame(vector3_2, vector3_13);
      assertNotSame(vector3_2, vector3_12);
      assertNotSame(vector3_2, vector3_14);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_11, vector3_14);
      assertNotSame(vector3_11, vector3_5);
      assertSame(vector3_11, vector3_3);
      assertSame(vector3_11, vector3_13);
      assertNotSame(vector3_11, vector3_15);
      assertNotSame(vector3_11, vector3_8);
      assertSame(vector3_11, vector3_9);
      assertNotSame(vector3_11, vector3_1);
      assertNotSame(vector3_11, vector3_7);
      assertSame(vector3_11, vector3_4);
      assertNotSame(vector3_11, vector3_0);
      assertSame(vector3_11, vector3_16);
      assertSame(vector3_11, vector3_2);
      assertNotSame(vector3_11, vector3_6);
      assertSame(vector3_11, vector3_10);
      assertNotSame(vector3_11, vector3_12);
      assertNotSame(vector3_15, vector3_9);
      assertNotSame(vector3_15, vector3_8);
      assertNotSame(vector3_15, vector3_1);
      assertNotSame(vector3_15, vector3_5);
      assertNotSame(vector3_15, vector3_16);
      assertNotSame(vector3_15, vector3_0);
      assertNotSame(vector3_15, vector3_14);
      assertNotSame(vector3_15, vector3_13);
      assertNotSame(vector3_15, vector3_3);
      assertNotSame(vector3_15, vector3_4);
      assertNotSame(vector3_15, vector3_10);
      assertNotSame(vector3_15, vector3_6);
      assertNotSame(vector3_15, vector3_7);
      assertNotSame(vector3_15, vector3_12);
      assertNotSame(vector3_15, vector3_11);
      assertNotSame(vector3_15, vector3_2);
      assertSame(vector3_16, vector3_2);
      assertNotSame(vector3_16, vector3_6);
      assertSame(vector3_16, vector3_3);
      assertNotSame(vector3_16, vector3_7);
      assertSame(vector3_16, vector3_10);
      assertSame(vector3_16, vector3_4);
      assertNotSame(vector3_16, vector3_15);
      assertNotSame(vector3_16, vector3_5);
      assertSame(vector3_16, vector3_13);
      assertNotSame(vector3_16, vector3_14);
      assertNotSame(vector3_16, vector3_1);
      assertNotSame(vector3_16, vector3_0);
      assertNotSame(vector3_16, vector3_8);
      assertNotSame(vector3_16, vector3_12);
      assertSame(vector3_16, vector3_9);
      assertSame(vector3_16, vector3_11);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_12);
      assertSame(vector3_5, vector3_14);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_13);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_11);
      assertNotSame(vector3_5, vector3_16);
      assertNotSame(vector3_5, vector3_10);
      assertNotSame(vector3_5, vector3_15);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_10);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_11);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_12);
      assertNotSame(vector3_6, vector3_16);
      assertNotSame(vector3_6, vector3_14);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_15);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_13);
      assertNotSame(vector3_6, vector3_9);
      
      vector3_9.hashCode();
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(2443264.8F, vector3_9.y, 0.01F);
      assertEquals((-2255273.2F), vector3_9.z, 0.01F);
      assertEquals(0.0F, vector3_9.x, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-2255273.2F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(2443264.8F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(1057.5776F, vector3_5.y, 0.01F);
      assertEquals((-975.81494F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_10));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_12));
      assertFalse(vector3_0.equals((Object)vector3_11));
      assertFalse(vector3_0.equals((Object)vector3_14));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_16));
      assertFalse(vector3_0.equals((Object)vector3_15));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_13));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_9.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_6));
      assertFalse(vector3_9.equals((Object)vector3_0));
      assertFalse(vector3_9.equals((Object)vector3_8));
      assertFalse(vector3_9.equals((Object)vector3_15));
      assertFalse(vector3_9.equals((Object)vector3_5));
      assertFalse(vector3_9.equals((Object)vector3_7));
      assertFalse(vector3_9.equals((Object)vector3_14));
      assertFalse(vector3_9.equals((Object)vector3_12));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_16));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_14));
      assertFalse(vector3_1.equals((Object)vector3_11));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_12));
      assertFalse(vector3_1.equals((Object)vector3_10));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_15));
      assertFalse(vector3_1.equals((Object)vector3_13));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_15));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_12));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_14));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_13));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_11));
      assertFalse(vector3_5.equals((Object)vector3_16));
      assertFalse(vector3_5.equals((Object)vector3_10));
      assertFalse(vector3_5.equals((Object)vector3_15));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_10));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_11));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_12));
      assertFalse(vector3_6.equals((Object)vector3_16));
      assertFalse(vector3_6.equals((Object)vector3_14));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_15));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_13));
      assertFalse(vector3_6.equals((Object)vector3_9));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_12);
      assertNotSame(vector3_0, vector3_11);
      assertNotSame(vector3_0, vector3_14);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_16);
      assertNotSame(vector3_0, vector3_15);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_13);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_9, vector3_1);
      assertSame(vector3_9, vector3_13);
      assertNotSame(vector3_9, vector3_0);
      assertSame(vector3_9, vector3_4);
      assertNotSame(vector3_9, vector3_8);
      assertNotSame(vector3_9, vector3_5);
      assertSame(vector3_9, vector3_3);
      assertSame(vector3_9, vector3_10);
      assertNotSame(vector3_9, vector3_6);
      assertSame(vector3_9, vector3_11);
      assertNotSame(vector3_9, vector3_15);
      assertSame(vector3_9, vector3_2);
      assertNotSame(vector3_9, vector3_14);
      assertNotSame(vector3_9, vector3_7);
      assertSame(vector3_9, vector3_16);
      assertNotSame(vector3_9, vector3_12);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_16);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_14);
      assertNotSame(vector3_1, vector3_11);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_12);
      assertNotSame(vector3_1, vector3_10);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_15);
      assertNotSame(vector3_1, vector3_13);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_10);
      assertNotSame(vector3_2, vector3_15);
      assertSame(vector3_2, vector3_11);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_16);
      assertSame(vector3_2, vector3_13);
      assertNotSame(vector3_2, vector3_12);
      assertNotSame(vector3_2, vector3_14);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_12);
      assertSame(vector3_5, vector3_14);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_13);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_11);
      assertNotSame(vector3_5, vector3_16);
      assertNotSame(vector3_5, vector3_10);
      assertNotSame(vector3_5, vector3_15);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_10);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_11);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_12);
      assertNotSame(vector3_6, vector3_16);
      assertNotSame(vector3_6, vector3_14);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_15);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_13);
      assertNotSame(vector3_6, vector3_9);
      
      float float3 = vector3_7.triple(vector3_11, vector3_10);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(5003.9336F, vector3_1.y, 0.01F);
      assertEquals((-4335.6113F), vector3_1.x, 0.01F);
      assertEquals((-4618.1826F), vector3_1.z, 0.01F);
      assertEquals((-2255273.2F), vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(2443264.8F, vector3_2.y, 0.01F);
      assertEquals(2443264.8F, vector3_10.y, 0.01F);
      assertEquals(0.0F, vector3_10.x, 0.01F);
      assertEquals((-2255273.2F), vector3_10.z, 0.01F);
      assertEquals(2443264.8F, vector3_11.y, 0.01F);
      assertEquals(0.0F, vector3_11.x, 0.01F);
      assertEquals((-2255273.2F), vector3_11.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(2443264.8F, vector3_4.y, 0.01F);
      assertEquals((-2255273.2F), vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(1057.5776F, vector3_5.y, 0.01F);
      assertEquals((-975.81494F), vector3_5.z, 0.01F);
      assertEquals(2502.2556F, vector3_6.y, 0.01F);
      assertEquals((-2308.803F), vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(5003.9336F, vector3_7.y, 0.01F);
      assertEquals((-4618.1826F), vector3_7.z, 0.01F);
      assertEquals((-4335.6113F), vector3_7.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_10));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_12));
      assertFalse(vector3_0.equals((Object)vector3_11));
      assertFalse(vector3_0.equals((Object)vector3_14));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_16));
      assertFalse(vector3_0.equals((Object)vector3_15));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_13));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_16));
      assertFalse(vector3_1.equals((Object)vector3_8));
      assertFalse(vector3_1.equals((Object)vector3_14));
      assertFalse(vector3_1.equals((Object)vector3_11));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_12));
      assertFalse(vector3_1.equals((Object)vector3_10));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_15));
      assertFalse(vector3_1.equals((Object)vector3_13));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_15));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_12));
      assertFalse(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_14));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_10.equals((Object)vector3_1));
      assertFalse(vector3_10.equals((Object)vector3_0));
      assertFalse(vector3_10.equals((Object)vector3_14));
      assertFalse(vector3_10.equals((Object)vector3_5));
      assertFalse(vector3_10.equals((Object)vector3_8));
      assertFalse(vector3_10.equals((Object)vector3_15));
      assertFalse(vector3_10.equals((Object)vector3_7));
      assertFalse(vector3_10.equals((Object)vector3_6));
      assertFalse(vector3_10.equals((Object)vector3_12));
      assertFalse(vector3_11.equals((Object)vector3_14));
      assertFalse(vector3_11.equals((Object)vector3_7));
      assertFalse(vector3_11.equals((Object)vector3_1));
      assertFalse(vector3_11.equals((Object)vector3_5));
      assertFalse(vector3_11.equals((Object)vector3_8));
      assertFalse(vector3_11.equals((Object)vector3_15));
      assertFalse(vector3_11.equals((Object)vector3_0));
      assertFalse(vector3_11.equals((Object)vector3_6));
      assertFalse(vector3_11.equals((Object)vector3_12));
      assertFalse(vector3_4.equals((Object)vector3_14));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(vector3_4.equals((Object)vector3_8));
      assertFalse(vector3_4.equals((Object)vector3_15));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_12));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_13));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_11));
      assertFalse(vector3_5.equals((Object)vector3_16));
      assertFalse(vector3_5.equals((Object)vector3_10));
      assertFalse(vector3_5.equals((Object)vector3_15));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_10));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_11));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_12));
      assertFalse(vector3_6.equals((Object)vector3_16));
      assertFalse(vector3_6.equals((Object)vector3_14));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_15));
      assertFalse(vector3_6.equals((Object)vector3_8));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_13));
      assertFalse(vector3_6.equals((Object)vector3_9));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_10));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertFalse(vector3_7.equals((Object)vector3_11));
      assertFalse(vector3_7.equals((Object)vector3_14));
      assertFalse(vector3_7.equals((Object)vector3_16));
      assertFalse(vector3_7.equals((Object)vector3_12));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_15));
      assertFalse(vector3_7.equals((Object)vector3_8));
      assertFalse(vector3_7.equals((Object)vector3_9));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_4));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_13));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_12);
      assertNotSame(vector3_0, vector3_11);
      assertNotSame(vector3_0, vector3_14);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_16);
      assertNotSame(vector3_0, vector3_15);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_13);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_16);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_14);
      assertNotSame(vector3_1, vector3_11);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_12);
      assertNotSame(vector3_1, vector3_10);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_15);
      assertNotSame(vector3_1, vector3_13);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_10);
      assertNotSame(vector3_2, vector3_15);
      assertSame(vector3_2, vector3_11);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_16);
      assertSame(vector3_2, vector3_13);
      assertNotSame(vector3_2, vector3_12);
      assertNotSame(vector3_2, vector3_14);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_10, vector3_9);
      assertNotSame(vector3_10, vector3_1);
      assertNotSame(vector3_10, vector3_0);
      assertSame(vector3_10, vector3_4);
      assertSame(vector3_10, vector3_13);
      assertNotSame(vector3_10, vector3_8);
      assertSame(vector3_10, vector3_2);
      assertNotSame(vector3_10, vector3_14);
      assertSame(vector3_10, vector3_11);
      assertNotSame(vector3_10, vector3_5);
      assertSame(vector3_10, vector3_3);
      assertNotSame(vector3_10, vector3_15);
      assertNotSame(vector3_10, vector3_7);
      assertNotSame(vector3_10, vector3_6);
      assertSame(vector3_10, vector3_16);
      assertNotSame(vector3_10, vector3_12);
      assertNotSame(vector3_11, vector3_14);
      assertNotSame(vector3_11, vector3_5);
      assertSame(vector3_11, vector3_3);
      assertSame(vector3_11, vector3_13);
      assertNotSame(vector3_11, vector3_15);
      assertNotSame(vector3_11, vector3_8);
      assertSame(vector3_11, vector3_9);
      assertNotSame(vector3_11, vector3_1);
      assertNotSame(vector3_11, vector3_7);
      assertSame(vector3_11, vector3_4);
      assertNotSame(vector3_11, vector3_0);
      assertSame(vector3_11, vector3_16);
      assertSame(vector3_11, vector3_2);
      assertNotSame(vector3_11, vector3_6);
      assertSame(vector3_11, vector3_10);
      assertNotSame(vector3_11, vector3_12);
      assertSame(vector3_4, vector3_11);
      assertNotSame(vector3_4, vector3_14);
      assertNotSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_13);
      assertNotSame(vector3_4, vector3_15);
      assertNotSame(vector3_4, vector3_8);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_9);
      assertNotSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_16);
      assertSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_12);
      assertSame(vector3_4, vector3_10);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_12);
      assertSame(vector3_5, vector3_14);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_13);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_11);
      assertNotSame(vector3_5, vector3_16);
      assertNotSame(vector3_5, vector3_10);
      assertNotSame(vector3_5, vector3_15);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_10);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_11);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_12);
      assertNotSame(vector3_6, vector3_16);
      assertNotSame(vector3_6, vector3_14);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_15);
      assertNotSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_13);
      assertNotSame(vector3_6, vector3_9);
      assertSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_10);
      assertNotSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_11);
      assertNotSame(vector3_7, vector3_14);
      assertNotSame(vector3_7, vector3_16);
      assertNotSame(vector3_7, vector3_12);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(vector3_7, vector3_15);
      assertNotSame(vector3_7, vector3_8);
      assertNotSame(vector3_7, vector3_9);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_13);
      assertEquals(0.0F, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      
      Vector3 vector3_2 = vector3_0.subtract((IVector3) vector3_1);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals((-1.0F), vector3_2.z, 0.01F);
      assertEquals((-1.0F), vector3_2.x, 0.01F);
      assertEquals((-1.0F), vector3_2.y, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertNotNull(vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_2.x(), 0.01F);
      assertEquals((-1.0F), vector3_2.y(), 0.01F);
      assertEquals((-1.0F), vector3_2.z(), 0.01F);
      assertEquals(1.7320508F, vector3_2.length(), 0.01F);
      assertEquals(3.0F, vector3_2.lengthSquared(), 0.01F);
      
      vector3_2.x = 0.0F;
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals((-1.0F), vector3_2.y(), 0.01F);
      assertEquals((-1.0F), vector3_2.z(), 0.01F);
      assertEquals(1.4142135F, vector3_2.length(), 0.01F);
      assertEquals(2.0F, vector3_2.lengthSquared(), 0.01F);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      // Undeclared exception!
      try { 
        FloatBuffer.wrap(floatArray0, (-426), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.FloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(0);
      assertNotNull(floatBuffer0);
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=0 cap=0]", floatBuffer0.toString());
      assertEquals(0, floatBuffer0.capacity());
      assertEquals(0, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.position());
      assertFalse(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasArray());
      assertFalse(floatBuffer0.isDirect());
      
      // Undeclared exception!
      try { 
        vector3_0.get(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector3 vector3_0 = null;
      try {
        vector3_0 = new Vector3((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      
      // Undeclared exception!
      try { 
        vector3_0.get((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2483.6F);
      floatArray0[2] = 0.0F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      assertEquals((-2483.6F), vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(6168269.5F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(2483.6F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals((-2483.6F), vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2483.6F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = 3;
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(3);
      assertNotNull(floatBuffer0);
      assertEquals(3, floatBuffer0.capacity());
      assertEquals(3, floatBuffer0.remaining());
      assertEquals(3, floatBuffer0.limit());
      assertFalse(floatBuffer0.isReadOnly());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(0, floatBuffer0.position());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=3 cap=3]", floatBuffer0.toString());
      assertTrue(floatBuffer0.hasRemaining());
      assertTrue(floatBuffer0.hasArray());
      
      FloatBuffer floatBuffer1 = floatBuffer0.compact();
      assertNotNull(floatBuffer1);
      assertSame(floatBuffer0, floatBuffer1);
      assertSame(floatBuffer1, floatBuffer0);
      assertEquals(3, floatBuffer0.capacity());
      assertEquals(3, floatBuffer0.limit());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(3, floatBuffer0.position());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.hasRemaining());
      assertEquals("java.nio.HeapFloatBuffer[pos=3 lim=3 cap=3]", floatBuffer0.toString());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0, floatBuffer0.remaining());
      assertFalse(floatBuffer1.hasRemaining());
      assertTrue(floatBuffer1.hasArray());
      assertEquals(3, floatBuffer1.position());
      assertFalse(floatBuffer1.isReadOnly());
      assertFalse(floatBuffer1.isDirect());
      assertEquals(0, floatBuffer1.arrayOffset());
      assertEquals(3, floatBuffer1.capacity());
      assertEquals("java.nio.HeapFloatBuffer[pos=3 lim=3 cap=3]", floatBuffer1.toString());
      assertEquals(0, floatBuffer1.remaining());
      assertEquals(3, floatBuffer1.limit());
      
      // Undeclared exception!
      try { 
        vector3_0.get(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.addLocal(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.y, 0.01F);
      assertNotNull(vector3_1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.z(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.addLocal(0.5F, 0.5F, 0.5F);
      assertEquals(1.5F, vector3_0.x, 0.01F);
      assertEquals(1.5F, vector3_0.y, 0.01F);
      assertEquals(1.5F, vector3_0.z, 0.01F);
      assertEquals(1.5F, vector3_1.x, 0.01F);
      assertEquals(1.5F, vector3_1.y, 0.01F);
      assertEquals(1.5F, vector3_1.z, 0.01F);
      assertNotNull(vector3_1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(2.598076F, vector3_0.length(), 0.01F);
      assertEquals(1.5F, vector3_0.x(), 0.01F);
      assertEquals(1.5F, vector3_0.y(), 0.01F);
      assertEquals(1.5F, vector3_0.z(), 0.01F);
      assertEquals(6.75F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(2.598076F, vector3_1.length(), 0.01F);
      assertEquals(6.75F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.5F, vector3_1.x(), 0.01F);
      assertEquals(1.5F, vector3_1.y(), 0.01F);
      assertEquals(1.5F, vector3_1.z(), 0.01F);
      
      Vector3 vector3_2 = vector3_1.subtractLocal(vector3_0);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertNotNull(vector3_2);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      
      Vector3 vector3_3 = vector3_1.lerp((IVector3) vector3_0, (-2361.0F));
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertNotNull(vector3_3);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      
      // Undeclared exception!
      try { 
        vector3_0.manhattanDistance((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      
      float float0 = vector3_0.get(1);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      
      // Undeclared exception!
      try { 
        vector3_0.get((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      
      // Undeclared exception!
      try { 
        vector3_0.get(651);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 651
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      
      float float0 = vector3_0.get(0);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.x, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      
      float float1 = vector3_0.angle(vector3_1);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(Float.NaN, float1, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      
      vector3_0.hashCode();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      
      String string0 = vector3_0.toString();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(string0);
      assertEquals("[0.0, 0.0, 0.0]", string0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.multLocal((-3.4028235E38F));
      assertEquals(-0.0F, vector3_0.x, 0.01F);
      assertEquals(-0.0F, vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals(-0.0F, vector3_1.x, 0.01F);
      assertEquals(-0.0F, vector3_1.y, 0.01F);
      assertNotNull(vector3_1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(-0.0F, vector3_0.x(), 0.01F);
      assertEquals(-0.0F, vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals(-0.0F, vector3_1.x(), 0.01F);
      assertEquals(-0.0F, vector3_1.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      
      Vector3 vector3_2 = vector3_1.mult((-3.4028235E38F));
      assertEquals(-0.0F, vector3_0.x, 0.01F);
      assertEquals(-0.0F, vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals(-0.0F, vector3_1.x, 0.01F);
      assertEquals(-0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.z, 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(-0.0F, vector3_0.x(), 0.01F);
      assertEquals(-0.0F, vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals(-0.0F, vector3_1.x(), 0.01F);
      assertEquals(-0.0F, vector3_1.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.lengthSquared(), 0.01F);
      
      float float0 = vector3_1.manhattanDistance(vector3_0);
      assertEquals(-0.0F, vector3_0.x, 0.01F);
      assertEquals(-0.0F, vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals(-0.0F, vector3_1.x, 0.01F);
      assertEquals(-0.0F, vector3_1.y, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(-0.0F, vector3_0.x(), 0.01F);
      assertEquals(-0.0F, vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals(-0.0F, vector3_1.x(), 0.01F);
      assertEquals(-0.0F, vector3_1.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      
      float float1 = vector3_1.distanceSquared(vector3_0);
      assertEquals(-0.0F, vector3_0.x, 0.01F);
      assertEquals(-0.0F, vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals(-0.0F, vector3_1.x, 0.01F);
      assertEquals(-0.0F, vector3_1.y, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertEquals(float1, float0, 0.01F);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(-0.0F, vector3_0.x(), 0.01F);
      assertEquals(-0.0F, vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals(-0.0F, vector3_1.x(), 0.01F);
      assertEquals(-0.0F, vector3_1.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      
      vector3_2.hashCode();
      assertEquals(-0.0F, vector3_0.x, 0.01F);
      assertEquals(-0.0F, vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals(-0.0F, vector3_1.x, 0.01F);
      assertEquals(-0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.z, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(-0.0F, vector3_0.x(), 0.01F);
      assertEquals(-0.0F, vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals(-0.0F, vector3_1.x(), 0.01F);
      assertEquals(-0.0F, vector3_1.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.lengthSquared(), 0.01F);
      
      Vector3 vector3_3 = vector3_1.set((IVector3) vector3_0);
      assertEquals(-0.0F, vector3_0.x, 0.01F);
      assertEquals(-0.0F, vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z, 0.01F);
      assertEquals(-0.0F, vector3_1.x, 0.01F);
      assertEquals(-0.0F, vector3_1.y, 0.01F);
      assertEquals(-0.0F, vector3_3.x, 0.01F);
      assertEquals(-0.0F, vector3_3.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_3.z, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertNotNull(vector3_3);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_0);
      assertEquals(-0.0F, vector3_0.x(), 0.01F);
      assertEquals(-0.0F, vector3_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
      assertEquals(-0.0F, vector3_1.x(), 0.01F);
      assertEquals(-0.0F, vector3_1.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_1.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_3.length(), 0.01F);
      assertEquals(-0.0F, vector3_3.x(), 0.01F);
      assertEquals(-0.0F, vector3_3.y(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_3.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_3.lengthSquared(), 0.01F);
      
      Vector3 vector3_4 = vector3_2.addScaled((IVector3) vector3_3, Float.POSITIVE_INFINITY, vector3_1);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.z, 0.01F);
      assertEquals(Float.NaN, vector3_3.x, 0.01F);
      assertEquals(Float.NaN, vector3_3.y, 0.01F);
      assertEquals(Float.NaN, vector3_3.z, 0.01F);
      assertEquals(Float.NaN, vector3_4.x, 0.01F);
      assertEquals(Float.NaN, vector3_4.z, 0.01F);
      assertEquals(Float.NaN, vector3_4.y, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertNotNull(vector3_4);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_0);
      assertSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.length(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_3.length(), 0.01F);
      assertEquals(Float.NaN, vector3_3.x(), 0.01F);
      assertEquals(Float.NaN, vector3_3.y(), 0.01F);
      assertEquals(Float.NaN, vector3_3.z(), 0.01F);
      assertEquals(Float.NaN, vector3_3.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.z(), 0.01F);
      assertEquals(Float.NaN, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_4.length(), 0.01F);
      assertEquals(Float.NaN, vector3_4.y(), 0.01F);
      assertEquals(Float.NaN, vector3_4.x(), 0.01F);
      
      float float2 = vector3_2.get(0);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.z, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_4);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.length(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_2.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      
      float float0 = vector3_0.distance(vector3_1);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.normalize();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.mult(0.0F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.normalize();
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.5773503F, vector3_1.y, 0.01F);
      assertEquals(0.5773503F, vector3_1.x, 0.01F);
      assertEquals(0.5773503F, vector3_1.z, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.5773503F, vector3_1.z(), 0.01F);
      assertEquals(0.5773503F, vector3_1.y(), 0.01F);
      assertEquals(0.5773503F, vector3_1.x(), 0.01F);
      assertEquals(1.0000001F, vector3_1.length(), 0.01F);
      assertEquals(1.0000002F, vector3_1.lengthSquared(), 0.01F);
      
      Vector3 vector3_2 = vector3_1.add((IVector3) vector3_0);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.5773503F, vector3_1.y, 0.01F);
      assertEquals(0.5773503F, vector3_1.x, 0.01F);
      assertEquals(0.5773503F, vector3_1.z, 0.01F);
      assertEquals(1.1547005F, vector3_2.x, 0.01F);
      assertEquals(1.1547005F, vector3_2.y, 0.01F);
      assertEquals(1.1547005F, vector3_2.z, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.5773503F, vector3_1.z(), 0.01F);
      assertEquals(0.5773503F, vector3_1.y(), 0.01F);
      assertEquals(0.5773503F, vector3_1.x(), 0.01F);
      assertEquals(1.0000001F, vector3_1.length(), 0.01F);
      assertEquals(1.0000002F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.1547005F, vector3_2.z(), 0.01F);
      assertEquals(1.1547005F, vector3_2.x(), 0.01F);
      assertEquals(1.1547005F, vector3_2.y(), 0.01F);
      assertEquals(1.9999999F, vector3_2.length(), 0.01F);
      assertEquals(3.9999998F, vector3_2.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      
      float float0 = vector3_0.distanceSquared(vector3_1);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      
      Vector3 vector3_2 = vector3_0.addScaledLocal(vector3_1, 0.0F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      
      Vector3 vector3_2 = vector3_1.lerp((IVector3) vector3_0, 728.40344F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertNotNull(vector3_2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      
      float float0 = vector3_2.distance(vector3_1);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      
      float float1 = vector3_1.x();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertEquals(float1, float0, 0.01F);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      
      Vector3 vector3_3 = vector3_2.abs(vector3_1);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertNotNull(vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      
      Vector3 vector3_4 = vector3_3.addScaledLocal(vector3_2, 10.0F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_0));
      assertNotNull(vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.length(), 0.01F);
      
      Vector3 vector3_5 = vector3_2.subtractLocal(vector3_1);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(0.0F, vector3_5.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_5.equals((Object)vector3_0));
      assertTrue(vector3_5.equals((Object)vector3_1));
      assertTrue(vector3_5.equals((Object)vector3_4));
      assertTrue(vector3_5.equals((Object)vector3_3));
      assertNotNull(vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(0.0F, vector3_5.length(), 0.01F);
      assertEquals(0.0F, vector3_5.z(), 0.01F);
      assertEquals(0.0F, vector3_5.lengthSquared(), 0.01F);
      
      Vector3 vector3_6 = vector3_4.addScaledLocal(vector3_1, 562.0F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(0.0F, vector3_6.y, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_5));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_0));
      assertTrue(vector3_6.equals((Object)vector3_2));
      assertTrue(vector3_6.equals((Object)vector3_5));
      assertTrue(vector3_6.equals((Object)vector3_0));
      assertNotNull(vector3_6);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_6);
      assertSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_6, vector3_0);
      assertSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_2);
      assertSame(vector3_6, vector3_1);
      assertSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_5);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.length(), 0.01F);
      assertEquals(0.0F, vector3_6.length(), 0.01F);
      assertEquals(0.0F, vector3_6.z(), 0.01F);
      assertEquals(0.0F, vector3_6.x(), 0.01F);
      assertEquals(0.0F, vector3_6.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_6.y(), 0.01F);
      
      Vector3 vector3_7 = vector3_1.add((IVector3) vector3_0, vector3_4);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_7.z, 0.01F);
      assertEquals(0.0F, vector3_7.x, 0.01F);
      assertEquals(0.0F, vector3_7.y, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertTrue(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_5));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_0));
      assertTrue(vector3_7.equals((Object)vector3_0));
      assertTrue(vector3_7.equals((Object)vector3_2));
      assertTrue(vector3_7.equals((Object)vector3_5));
      assertNotNull(vector3_7);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_7);
      assertSame(vector3_4, vector3_6);
      assertSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_5);
      assertSame(vector3_7, vector3_1);
      assertSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_5);
      assertSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_2);
      assertSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.length(), 0.01F);
      assertEquals(0.0F, vector3_7.x(), 0.01F);
      assertEquals(0.0F, vector3_7.length(), 0.01F);
      assertEquals(0.0F, vector3_7.y(), 0.01F);
      assertEquals(0.0F, vector3_7.z(), 0.01F);
      assertEquals(0.0F, vector3_7.lengthSquared(), 0.01F);
      
      Vector3 vector3_8 = vector3_7.mult(0.0F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_7.z, 0.01F);
      assertEquals(0.0F, vector3_7.x, 0.01F);
      assertEquals(0.0F, vector3_7.y, 0.01F);
      assertEquals(0.0F, vector3_8.y, 0.01F);
      assertEquals(0.0F, vector3_8.x, 0.01F);
      assertEquals(0.0F, vector3_8.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_7));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertTrue(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_7));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_5));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_0));
      assertTrue(vector3_7.equals((Object)vector3_0));
      assertTrue(vector3_7.equals((Object)vector3_2));
      assertTrue(vector3_7.equals((Object)vector3_5));
      assertTrue(vector3_8.equals((Object)vector3_5));
      assertTrue(vector3_8.equals((Object)vector3_0));
      assertTrue(vector3_8.equals((Object)vector3_4));
      assertTrue(vector3_8.equals((Object)vector3_1));
      assertTrue(vector3_8.equals((Object)vector3_6));
      assertTrue(vector3_8.equals((Object)vector3_2));
      assertTrue(vector3_8.equals((Object)vector3_7));
      assertTrue(vector3_8.equals((Object)vector3_3));
      assertNotNull(vector3_8);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_8);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_8);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertNotSame(vector3_4, vector3_8);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_7);
      assertSame(vector3_4, vector3_6);
      assertSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_5);
      assertSame(vector3_7, vector3_1);
      assertSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_5);
      assertSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_8);
      assertSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_8, vector3_0);
      assertNotSame(vector3_8, vector3_1);
      assertNotSame(vector3_8, vector3_6);
      assertNotSame(vector3_8, vector3_2);
      assertNotSame(vector3_8, vector3_7);
      assertNotSame(vector3_8, vector3_3);
      assertNotSame(vector3_8, vector3_5);
      assertNotSame(vector3_8, vector3_4);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_4.length(), 0.01F);
      assertEquals(0.0F, vector3_7.x(), 0.01F);
      assertEquals(0.0F, vector3_7.length(), 0.01F);
      assertEquals(0.0F, vector3_7.y(), 0.01F);
      assertEquals(0.0F, vector3_7.z(), 0.01F);
      assertEquals(0.0F, vector3_7.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_8.y(), 0.01F);
      assertEquals(0.0F, vector3_8.x(), 0.01F);
      assertEquals(0.0F, vector3_8.z(), 0.01F);
      assertEquals(0.0F, vector3_8.length(), 0.01F);
      assertEquals(0.0F, vector3_8.lengthSquared(), 0.01F);
      
      Vector3 vector3_9 = vector3_5.subtract((IVector3) vector3_3);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_5.y, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(0.0F, vector3_5.z, 0.01F);
      assertEquals(0.0F, vector3_9.z, 0.01F);
      assertEquals(0.0F, vector3_9.x, 0.01F);
      assertEquals(0.0F, vector3_9.y, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_7));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_8));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_8));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertTrue(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_7));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_8));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_3.equals((Object)vector3_8));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_5.equals((Object)vector3_7));
      assertTrue(vector3_5.equals((Object)vector3_0));
      assertTrue(vector3_5.equals((Object)vector3_1));
      assertTrue(vector3_5.equals((Object)vector3_4));
      assertTrue(vector3_5.equals((Object)vector3_8));
      assertTrue(vector3_5.equals((Object)vector3_3));
      assertTrue(vector3_5.equals((Object)vector3_6));
      assertTrue(vector3_9.equals((Object)vector3_5));
      assertTrue(vector3_9.equals((Object)vector3_0));
      assertTrue(vector3_9.equals((Object)vector3_4));
      assertTrue(vector3_9.equals((Object)vector3_1));
      assertTrue(vector3_9.equals((Object)vector3_3));
      assertTrue(vector3_9.equals((Object)vector3_2));
      assertTrue(vector3_9.equals((Object)vector3_7));
      assertTrue(vector3_9.equals((Object)vector3_6));
      assertTrue(vector3_9.equals((Object)vector3_8));
      assertNotNull(vector3_9);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_8);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_9);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_8);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_9, vector3_8);
      assertNotSame(vector3_9, vector3_0);
      assertNotSame(vector3_9, vector3_6);
      assertNotSame(vector3_9, vector3_1);
      assertNotSame(vector3_9, vector3_3);
      assertNotSame(vector3_9, vector3_2);
      assertNotSame(vector3_9, vector3_7);
      assertNotSame(vector3_9, vector3_5);
      assertNotSame(vector3_9, vector3_4);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_5.y(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(0.0F, vector3_5.length(), 0.01F);
      assertEquals(0.0F, vector3_5.z(), 0.01F);
      assertEquals(0.0F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_9.length(), 0.01F);
      assertEquals(0.0F, vector3_9.z(), 0.01F);
      assertEquals(0.0F, vector3_9.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_9.x(), 0.01F);
      assertEquals(0.0F, vector3_9.y(), 0.01F);
      
      Vector3 vector3_10 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_10.z, 0.01F);
      assertEquals(0.0F, vector3_10.x, 0.01F);
      assertEquals(0.0F, vector3_10.y, 0.01F);
      assertTrue(vector3_10.equals((Object)vector3_5));
      assertTrue(vector3_10.equals((Object)vector3_4));
      assertTrue(vector3_10.equals((Object)vector3_1));
      assertTrue(vector3_10.equals((Object)vector3_9));
      assertTrue(vector3_10.equals((Object)vector3_6));
      assertTrue(vector3_10.equals((Object)vector3_3));
      assertTrue(vector3_10.equals((Object)vector3_2));
      assertTrue(vector3_10.equals((Object)vector3_7));
      assertTrue(vector3_10.equals((Object)vector3_8));
      assertNotNull(vector3_10);
      assertNotSame(vector3_10, vector3_8);
      assertNotSame(vector3_10, vector3_9);
      assertSame(vector3_10, vector3_0);
      assertNotSame(vector3_10, vector3_6);
      assertNotSame(vector3_10, vector3_1);
      assertNotSame(vector3_10, vector3_3);
      assertNotSame(vector3_10, vector3_2);
      assertNotSame(vector3_10, vector3_7);
      assertNotSame(vector3_10, vector3_5);
      assertNotSame(vector3_10, vector3_4);
      assertEquals(0.0F, vector3_10.length(), 0.01F);
      assertEquals(0.0F, vector3_10.z(), 0.01F);
      assertEquals(0.0F, vector3_10.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_10.x(), 0.01F);
      assertEquals(0.0F, vector3_10.y(), 0.01F);
      
      Vector3 vector3_11 = vector3_3.subtractLocal(vector3_10);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_10.z, 0.01F);
      assertEquals(0.0F, vector3_10.x, 0.01F);
      assertEquals(0.0F, vector3_10.y, 0.01F);
      assertEquals(0.0F, vector3_11.y, 0.01F);
      assertEquals(0.0F, vector3_11.x, 0.01F);
      assertEquals(0.0F, vector3_11.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_7));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_8));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertTrue(vector3_0.equals((Object)vector3_9));
      assertTrue(vector3_1.equals((Object)vector3_9));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_10));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_8));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertTrue(vector3_2.equals((Object)vector3_9));
      assertTrue(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_7));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_8));
      assertTrue(vector3_2.equals((Object)vector3_10));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_3.equals((Object)vector3_8));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_10));
      assertTrue(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_9));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_10.equals((Object)vector3_5));
      assertTrue(vector3_10.equals((Object)vector3_4));
      assertTrue(vector3_10.equals((Object)vector3_1));
      assertTrue(vector3_10.equals((Object)vector3_9));
      assertTrue(vector3_10.equals((Object)vector3_6));
      assertTrue(vector3_10.equals((Object)vector3_3));
      assertTrue(vector3_10.equals((Object)vector3_2));
      assertTrue(vector3_10.equals((Object)vector3_7));
      assertTrue(vector3_10.equals((Object)vector3_8));
      assertTrue(vector3_11.equals((Object)vector3_5));
      assertTrue(vector3_11.equals((Object)vector3_9));
      assertTrue(vector3_11.equals((Object)vector3_0));
      assertTrue(vector3_11.equals((Object)vector3_10));
      assertTrue(vector3_11.equals((Object)vector3_2));
      assertTrue(vector3_11.equals((Object)vector3_8));
      assertNotNull(vector3_11);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_11);
      assertSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_10);
      assertSame(vector3_1, vector3_11);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_10);
      assertNotSame(vector3_2, vector3_11);
      assertNotSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_9);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_10);
      assertSame(vector3_3, vector3_11);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_8);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertNotSame(vector3_10, vector3_8);
      assertNotSame(vector3_10, vector3_9);
      assertSame(vector3_10, vector3_0);
      assertNotSame(vector3_10, vector3_6);
      assertNotSame(vector3_10, vector3_1);
      assertNotSame(vector3_10, vector3_3);
      assertNotSame(vector3_10, vector3_2);
      assertNotSame(vector3_10, vector3_7);
      assertNotSame(vector3_10, vector3_5);
      assertNotSame(vector3_10, vector3_11);
      assertNotSame(vector3_10, vector3_4);
      assertNotSame(vector3_11, vector3_8);
      assertNotSame(vector3_11, vector3_0);
      assertNotSame(vector3_11, vector3_10);
      assertSame(vector3_11, vector3_4);
      assertNotSame(vector3_11, vector3_2);
      assertSame(vector3_11, vector3_3);
      assertNotSame(vector3_11, vector3_9);
      assertSame(vector3_11, vector3_1);
      assertNotSame(vector3_11, vector3_5);
      assertSame(vector3_11, vector3_7);
      assertSame(vector3_11, vector3_6);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_10.length(), 0.01F);
      assertEquals(0.0F, vector3_10.z(), 0.01F);
      assertEquals(0.0F, vector3_10.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_10.x(), 0.01F);
      assertEquals(0.0F, vector3_10.y(), 0.01F);
      assertEquals(0.0F, vector3_11.y(), 0.01F);
      assertEquals(0.0F, vector3_11.x(), 0.01F);
      assertEquals(0.0F, vector3_11.z(), 0.01F);
      assertEquals(0.0F, vector3_11.length(), 0.01F);
      assertEquals(0.0F, vector3_11.lengthSquared(), 0.01F);
      
      Vector3 vector3_12 = vector3_3.normalize();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(Float.NaN, vector3_12.z, 0.01F);
      assertEquals(Float.NaN, vector3_12.y, 0.01F);
      assertEquals(Float.NaN, vector3_12.x, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_7));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_8));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertTrue(vector3_0.equals((Object)vector3_9));
      assertTrue(vector3_0.equals((Object)vector3_11));
      assertTrue(vector3_1.equals((Object)vector3_9));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_10));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_8));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertTrue(vector3_2.equals((Object)vector3_11));
      assertTrue(vector3_2.equals((Object)vector3_9));
      assertTrue(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_7));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_8));
      assertTrue(vector3_2.equals((Object)vector3_10));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_3.equals((Object)vector3_8));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_10));
      assertTrue(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_3.equals((Object)vector3_9));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_12.equals((Object)vector3_11));
      assertFalse(vector3_12.equals((Object)vector3_5));
      assertFalse(vector3_12.equals((Object)vector3_7));
      assertFalse(vector3_12.equals((Object)vector3_1));
      assertFalse(vector3_12.equals((Object)vector3_10));
      assertFalse(vector3_12.equals((Object)vector3_6));
      assertFalse(vector3_12.equals((Object)vector3_3));
      assertFalse(vector3_12.equals((Object)vector3_0));
      assertFalse(vector3_12.equals((Object)vector3_8));
      assertFalse(vector3_12.equals((Object)vector3_2));
      assertFalse(vector3_12.equals((Object)vector3_4));
      assertFalse(vector3_12.equals((Object)vector3_9));
      assertNotNull(vector3_12);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_11);
      assertSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_12);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_12);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_10);
      assertSame(vector3_1, vector3_11);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_10);
      assertNotSame(vector3_2, vector3_11);
      assertNotSame(vector3_2, vector3_12);
      assertNotSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_9);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_12);
      assertNotSame(vector3_3, vector3_10);
      assertSame(vector3_3, vector3_11);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_8);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertNotSame(vector3_12, vector3_11);
      assertNotSame(vector3_12, vector3_5);
      assertNotSame(vector3_12, vector3_7);
      assertNotSame(vector3_12, vector3_1);
      assertNotSame(vector3_12, vector3_10);
      assertNotSame(vector3_12, vector3_6);
      assertNotSame(vector3_12, vector3_3);
      assertNotSame(vector3_12, vector3_0);
      assertNotSame(vector3_12, vector3_8);
      assertNotSame(vector3_12, vector3_2);
      assertNotSame(vector3_12, vector3_4);
      assertNotSame(vector3_12, vector3_9);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(Float.NaN, vector3_12.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_12.x(), 0.01F);
      assertEquals(Float.NaN, vector3_12.length(), 0.01F);
      assertEquals(Float.NaN, vector3_12.z(), 0.01F);
      assertEquals(Float.NaN, vector3_12.y(), 0.01F);
      
      Vector3 vector3_13 = vector3_11.lerp((IVector3) vector3_2, 0.0F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_10.z, 0.01F);
      assertEquals(0.0F, vector3_10.x, 0.01F);
      assertEquals(0.0F, vector3_10.y, 0.01F);
      assertEquals(0.0F, vector3_11.y, 0.01F);
      assertEquals(0.0F, vector3_11.x, 0.01F);
      assertEquals(0.0F, vector3_11.z, 0.01F);
      assertEquals(0.0F, vector3_13.y, 0.01F);
      assertEquals(0.0F, vector3_13.x, 0.01F);
      assertEquals(0.0F, vector3_13.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_7));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_8));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_12));
      assertTrue(vector3_0.equals((Object)vector3_9));
      assertTrue(vector3_0.equals((Object)vector3_11));
      assertTrue(vector3_1.equals((Object)vector3_9));
      assertFalse(vector3_1.equals((Object)vector3_12));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_10));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_8));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertTrue(vector3_2.equals((Object)vector3_11));
      assertTrue(vector3_2.equals((Object)vector3_9));
      assertTrue(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_7));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_12));
      assertTrue(vector3_2.equals((Object)vector3_10));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_3.equals((Object)vector3_8));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_10));
      assertTrue(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_12));
      assertTrue(vector3_3.equals((Object)vector3_9));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_10.equals((Object)vector3_5));
      assertTrue(vector3_10.equals((Object)vector3_11));
      assertTrue(vector3_10.equals((Object)vector3_4));
      assertFalse(vector3_10.equals((Object)vector3_12));
      assertTrue(vector3_10.equals((Object)vector3_1));
      assertTrue(vector3_10.equals((Object)vector3_9));
      assertTrue(vector3_10.equals((Object)vector3_6));
      assertTrue(vector3_10.equals((Object)vector3_3));
      assertTrue(vector3_10.equals((Object)vector3_2));
      assertTrue(vector3_10.equals((Object)vector3_7));
      assertTrue(vector3_10.equals((Object)vector3_8));
      assertTrue(vector3_11.equals((Object)vector3_5));
      assertTrue(vector3_11.equals((Object)vector3_9));
      assertFalse(vector3_11.equals((Object)vector3_12));
      assertTrue(vector3_11.equals((Object)vector3_0));
      assertTrue(vector3_11.equals((Object)vector3_10));
      assertTrue(vector3_11.equals((Object)vector3_2));
      assertTrue(vector3_11.equals((Object)vector3_8));
      assertTrue(vector3_13.equals((Object)vector3_10));
      assertTrue(vector3_13.equals((Object)vector3_5));
      assertTrue(vector3_13.equals((Object)vector3_2));
      assertFalse(vector3_13.equals((Object)vector3_12));
      assertTrue(vector3_13.equals((Object)vector3_1));
      assertTrue(vector3_13.equals((Object)vector3_7));
      assertTrue(vector3_13.equals((Object)vector3_3));
      assertTrue(vector3_13.equals((Object)vector3_11));
      assertTrue(vector3_13.equals((Object)vector3_9));
      assertTrue(vector3_13.equals((Object)vector3_0));
      assertTrue(vector3_13.equals((Object)vector3_4));
      assertTrue(vector3_13.equals((Object)vector3_8));
      assertTrue(vector3_13.equals((Object)vector3_6));
      assertNotNull(vector3_13);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_10);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_12);
      assertNotSame(vector3_0, vector3_13);
      assertNotSame(vector3_0, vector3_11);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_1, vector3_13);
      assertNotSame(vector3_1, vector3_12);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_8);
      assertSame(vector3_1, vector3_11);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_7);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_10);
      assertSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_9);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_10);
      assertNotSame(vector3_2, vector3_11);
      assertNotSame(vector3_2, vector3_12);
      assertNotSame(vector3_2, vector3_9);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_13);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_11);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_13);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertNotSame(vector3_3, vector3_9);
      assertNotSame(vector3_3, vector3_12);
      assertNotSame(vector3_3, vector3_10);
      assertNotSame(vector3_3, vector3_8);
      assertNotSame(vector3_10, vector3_9);
      assertNotSame(vector3_10, vector3_1);
      assertNotSame(vector3_10, vector3_3);
      assertNotSame(vector3_10, vector3_12);
      assertNotSame(vector3_10, vector3_2);
      assertNotSame(vector3_10, vector3_13);
      assertNotSame(vector3_10, vector3_5);
      assertNotSame(vector3_10, vector3_8);
      assertSame(vector3_10, vector3_0);
      assertNotSame(vector3_10, vector3_6);
      assertNotSame(vector3_10, vector3_7);
      assertNotSame(vector3_10, vector3_11);
      assertNotSame(vector3_10, vector3_4);
      assertNotSame(vector3_11, vector3_8);
      assertNotSame(vector3_11, vector3_0);
      assertNotSame(vector3_11, vector3_12);
      assertSame(vector3_11, vector3_3);
      assertSame(vector3_11, vector3_1);
      assertNotSame(vector3_11, vector3_5);
      assertSame(vector3_11, vector3_7);
      assertNotSame(vector3_11, vector3_13);
      assertNotSame(vector3_11, vector3_10);
      assertSame(vector3_11, vector3_4);
      assertNotSame(vector3_11, vector3_2);
      assertNotSame(vector3_11, vector3_9);
      assertSame(vector3_11, vector3_6);
      assertNotSame(vector3_13, vector3_2);
      assertNotSame(vector3_13, vector3_1);
      assertNotSame(vector3_13, vector3_3);
      assertNotSame(vector3_13, vector3_12);
      assertNotSame(vector3_13, vector3_5);
      assertNotSame(vector3_13, vector3_0);
      assertNotSame(vector3_13, vector3_7);
      assertNotSame(vector3_13, vector3_8);
      assertNotSame(vector3_13, vector3_6);
      assertNotSame(vector3_13, vector3_10);
      assertNotSame(vector3_13, vector3_11);
      assertNotSame(vector3_13, vector3_9);
      assertNotSame(vector3_13, vector3_4);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_10.length(), 0.01F);
      assertEquals(0.0F, vector3_10.z(), 0.01F);
      assertEquals(0.0F, vector3_10.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_10.x(), 0.01F);
      assertEquals(0.0F, vector3_10.y(), 0.01F);
      assertEquals(0.0F, vector3_11.y(), 0.01F);
      assertEquals(0.0F, vector3_11.x(), 0.01F);
      assertEquals(0.0F, vector3_11.z(), 0.01F);
      assertEquals(0.0F, vector3_11.length(), 0.01F);
      assertEquals(0.0F, vector3_11.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_13.y(), 0.01F);
      assertEquals(0.0F, vector3_13.x(), 0.01F);
      assertEquals(0.0F, vector3_13.length(), 0.01F);
      assertEquals(0.0F, vector3_13.z(), 0.01F);
      assertEquals(0.0F, vector3_13.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.cross((IVector3) vector3_0);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.multLocal(Float.POSITIVE_INFINITY);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertNotNull(vector3_1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      
      float float0 = vector3_0.z();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.mult((IVector3) vector3_0);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.normalizeLocal();
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertNotNull(vector3_1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(Float.NaN, vector3_0.length(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      
      Vector3 vector3_2 = vector3_0.addScaled((IVector3) vector3_1, Float.NaN, vector3_1);
      assertEquals(Float.NaN, vector3_0.z, 0.01F);
      assertEquals(Float.NaN, vector3_0.y, 0.01F);
      assertEquals(Float.NaN, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(Float.NaN, vector3_1.y, 0.01F);
      assertEquals(Float.NaN, vector3_1.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.y, 0.01F);
      assertEquals(Float.NaN, vector3_2.x, 0.01F);
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
      assertNotNull(vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertEquals(Float.NaN, vector3_0.length(), 0.01F);
      assertEquals(Float.NaN, vector3_0.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_0.x(), 0.01F);
      assertEquals(Float.NaN, vector3_0.z(), 0.01F);
      assertEquals(Float.NaN, vector3_0.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(Float.NaN, vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.x(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertEquals(Float.NaN, vector3_2.y(), 0.01F);
      assertEquals(Float.NaN, vector3_2.x(), 0.01F);
      assertEquals(Float.NaN, vector3_2.length(), 0.01F);
      assertEquals(Float.NaN, vector3_2.z(), 0.01F);
      assertEquals(Float.NaN, vector3_2.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_1.y, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.length(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_1.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_1.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      
      float float0 = vector3_0.x();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.absLocal();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertNotNull(vector3_1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.multLocal((IVector3) vector3_0);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertNotNull(vector3_1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.subtract((IVector3) vector3_0);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.lerp((IVector3) vector3_0, 466.765F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      
      Vector3 vector3_1 = vector3_0.negate();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(-0.0F, vector3_1.y, 0.01F);
      assertEquals(-0.0F, vector3_1.x, 0.01F);
      assertEquals(-0.0F, vector3_1.z, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(-0.0F, vector3_1.x(), 0.01F);
      assertEquals(-0.0F, vector3_1.z(), 0.01F);
      assertEquals(-0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertNotNull(vector3_0);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotNull(vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      
      Vector3 vector3_2 = vector3_0.crossLocal(vector3_1);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotNull(vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.length(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.multLocal((-533.859F));
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      vector3_0.absLocal();
      Vector3 vector3_2 = vector3_0.mult((IVector3) vector3_1);
      Vector3 vector3_3 = vector3_2.multLocal(0.0F);
      vector3_3.crossLocal(vector3_0);
      Vector3 vector3_4 = vector3_0.addScaled((IVector3) vector3_2, 648.72F);
      vector3_0.lerp((IVector3) vector3_4, 2930.1F);
      vector3_0.negate(vector3_2);
      vector3_4.set((IVector3) vector3_1);
      Vector3 vector3_5 = vector3_4.normalizeLocal();
      Vector3 vector3_6 = vector3_5.set(-0.0F, -0.0F, (-1.0F));
      Vector3 vector3_7 = vector3_6.subtractLocal(vector3_1);
      vector3_0.normalize(vector3_7);
      // Undeclared exception!
      try { 
        FloatBuffer.wrap((float[]) null, (-311), (-311));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }
}
