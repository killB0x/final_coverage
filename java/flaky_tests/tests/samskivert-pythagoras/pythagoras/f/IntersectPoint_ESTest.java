/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:00:16 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IntersectPoint;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntersectPoint_ESTest extends IntersectPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint((-887), (-887), (-887), 1, 0, 0, 0, 133, 0, 0, 0.0F, 0.0F);
      float float0 = intersectPoint0.y();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, intersectPoint0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(222, 222, (-206), 2219, 0.0F, (-206));
      float float0 = intersectPoint0.y();
      assertEquals((-206.0F), float0, 0.01F);
      assertEquals(0.0F, intersectPoint0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(222, 222, (-206), 2219, 0.0F, (-206));
      float float0 = intersectPoint0.x();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-206.0F), intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, (-1), 0, (-1), 1841, 1841, (-5157), 0, (-1), 1381.6F, (-1), 1841);
      float float0 = intersectPoint0.x();
      assertEquals(1381.6F, intersectPoint0.y(), 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint((-887), (-887), (-887), 1, 0, 0, 0, 133, 0, 0, 0.0F, 0.0F);
      int int0 = intersectPoint0.ruleIndex(false);
      assertEquals(0.0F, intersectPoint0.x(), 0.01F);
      assertEquals(0.0F, intersectPoint0.y(), 0.01F);
      assertEquals(133, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, (-1164), (-104), (-832), (-832), 0, (-1164), (-832), 2095.1F, (-832), (-1164), (-1164));
      int int0 = intersectPoint0.ruleIndex(false);
      assertEquals((-832.0F), intersectPoint0.y(), 0.01F);
      assertEquals(2095.1F, intersectPoint0.x(), 0.01F);
      assertEquals((-832), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, 0, 0, 0, 0, (-2250), 4043, 0, 0, 2332.0F, (-1142.898F), 398.24463F);
      int int0 = intersectPoint0.rule(false);
      assertEquals(0.0F, intersectPoint0.x(), 0.01F);
      assertEquals(4043, int0);
      assertEquals(2332.0F, intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, (-1164), (-104), (-832), (-832), 0, (-1164), (-832), 2095.1F, (-832), (-1164), (-1164));
      int int0 = intersectPoint0.rule(false);
      assertEquals((-832.0F), intersectPoint0.y(), 0.01F);
      assertEquals((-1164), int0);
      assertEquals(2095.1F, intersectPoint0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, 0, 0, 0, (-1117), 0, 1, 0, 399.9F, (-1513.2943F), 1.0F, 1.0F);
      float float0 = intersectPoint0.param(false);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(399.9F, intersectPoint0.x(), 0.01F);
      assertEquals((-1513.2943F), intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, 0, 0, 0, 0, 0);
      int int0 = intersectPoint0.endIndex(true);
      assertEquals(0, int0);
      assertEquals(0.0F, intersectPoint0.x(), 0.01F);
      assertEquals(0.0F, intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(1, 1, 1, (-1201), 1, 1);
      int int0 = intersectPoint0.begIndex(false);
      assertEquals(1.0F, intersectPoint0.y(), 0.01F);
      assertEquals(1.0F, intersectPoint0.x(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(1, 1, 1, (-1201), 1, 1);
      intersectPoint0.setBegIndex2((-1));
      int int0 = intersectPoint0.begIndex(false);
      assertEquals((-1), int0);
      assertEquals(1.0F, intersectPoint0.x(), 0.01F);
      assertEquals(1.0F, intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(1, 1, 1, (-1201), 1, 1);
      int int0 = intersectPoint0.rule(true);
      assertEquals(1.0F, intersectPoint0.x(), 0.01F);
      assertEquals(1.0F, intersectPoint0.y(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(1, 1, 1, 1, 0.0F, (-1.0F));
      float float0 = intersectPoint0.param(true);
      assertEquals(0.0F, intersectPoint0.x(), 0.01F);
      assertEquals((-1.0F), intersectPoint0.y(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, (-1164), (-104), (-832), (-832), 0, (-1164), (-832), 2095.1F, (-832), (-1164), (-1164));
      float float0 = intersectPoint0.param(false);
      assertEquals((-832.0F), intersectPoint0.y(), 0.01F);
      assertEquals(2095.1F, intersectPoint0.x(), 0.01F);
      assertEquals((-1164.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint((-668), (-668), 595, (-1), (-1440.2F), (-1440.2F));
      int int0 = intersectPoint0.ruleIndex(true);
      assertEquals((-1440.2F), intersectPoint0.y(), 0.01F);
      assertEquals((-1440.2F), intersectPoint0.x(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(1, 1, 1, 1, 0.0F, (-1.0F));
      int int0 = intersectPoint0.endIndex(true);
      assertEquals(1, int0);
      assertEquals(0.0F, intersectPoint0.x(), 0.01F);
      assertEquals((-1.0F), intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint((-1), (-1), 0, 0, (-1), (-1), 0, (-2334), (-2334), 4300.0F, 0, 0.0F);
      int int0 = intersectPoint0.endIndex(false);
      assertEquals((-1), int0);
      assertEquals(4300.0F, intersectPoint0.y(), 0.01F);
      assertEquals((-2334.0F), intersectPoint0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, 0, (-1085), 0, (-799), 0, 0, 1, 1, 1, (-751.7499F), 1);
      int int0 = intersectPoint0.begIndex(true);
      assertEquals(0, int0);
      assertEquals(1.0F, intersectPoint0.x(), 0.01F);
      assertEquals(1.0F, intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, 0, 0, 0, 0, 1330, (-1), 81, 0.0F, (-1), 0.0F, (-2505.7F));
      intersectPoint0.setEndIndex2(1330);
      assertEquals((-1.0F), intersectPoint0.y(), 0.01F);
      assertEquals(0.0F, intersectPoint0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(2323, 2323, 2525, 1224, 2525, 0, 0, 2323, 1.0F, 1224, 2323, 0.0F);
      intersectPoint0.setEndIndex1(587);
      assertEquals(1.0F, intersectPoint0.x(), 0.01F);
      assertEquals(1224.0F, intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(2323, 2323, 2525, 1224, 2525, 0, 0, 2323, 1.0F, 1224, 2323, 0.0F);
      float float0 = intersectPoint0.x();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1224.0F, intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint(0, 4, 0, 0, 4, 0);
      intersectPoint0.setBegIndex1(0);
      assertEquals(4.0F, intersectPoint0.x(), 0.01F);
      assertEquals(0.0F, intersectPoint0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntersectPoint intersectPoint0 = new IntersectPoint((-1), (-1), 0, 0, (-1), (-1), 0, (-2334), (-2334), 4300.0F, 0, 0.0F);
      float float0 = intersectPoint0.y();
      assertEquals((-2334.0F), intersectPoint0.x(), 0.01F);
      assertEquals(4300.0F, float0, 0.01F);
  }
}
