/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:08:40 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.Dimension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDimension_ESTest extends AbstractDimension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(0.0F, (-183.64F));
      boolean boolean0 = dimension1.equals(dimension0);
      assertFalse(dimension0.equals((Object)dimension1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      assertTrue(dimension1.equals((Object)dimension0));
      
      dimension1.setSize(1744.4225F, (-1.0F));
      boolean boolean0 = dimension0.equals(dimension1);
      assertFalse(dimension1.equals((Object)dimension0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      dimension0.setSize((-343.6F), (-1.0F));
      dimension0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Dimension dimension0 = new Dimension((-3152.4F), (-3152.4F));
      dimension0.setSize(4099.53F, 0.0F);
      Dimension dimension1 = dimension0.clone();
      assertEquals(0.0F, dimension1.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      dimension0.setSize((-1.0F), 1744.4225F);
      Dimension dimension1 = dimension0.clone();
      assertEquals(1744.4225F, dimension1.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      dimension0.height = (-1029.7F);
      Dimension dimension1 = dimension0.clone();
      assertEquals((-1029.7F), dimension1.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      assertTrue(dimension1.equals((Object)dimension0));
      
      dimension1.height = (-270.0F);
      boolean boolean0 = dimension0.equals(dimension1);
      assertFalse(dimension1.equals((Object)dimension0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      boolean boolean0 = dimension0.equals(dimension1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      boolean boolean0 = dimension0.equals(dimension0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Object object0 = new Object();
      boolean boolean0 = dimension0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      String string0 = dimension0.toString();
      assertEquals("0.0x0.0", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = dimension0.clone();
      assertTrue(dimension1.equals((Object)dimension0));
      
      dimension0.setSize((-343.6F), (-1.0F));
      boolean boolean0 = dimension1.equals(dimension0);
      assertFalse(dimension1.equals((Object)dimension0));
      assertFalse(boolean0);
  }
}
