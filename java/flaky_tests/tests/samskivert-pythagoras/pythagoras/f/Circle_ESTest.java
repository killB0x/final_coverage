/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:42:06 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.Circle;
import pythagoras.f.ICircle;
import pythagoras.f.Vector;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Circle_ESTest extends Circle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Circle circle0 = new Circle(1.0F, 1.0F, 1.0F);
      Circle circle1 = circle0.set((-2654.834F), 0.0F, 1.0F);
      float float0 = circle1.y();
      assertEquals((-2654.834F), circle0.x, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Circle circle0 = new Circle(1.0F, 1.0F, 1.0F);
      float float0 = circle0.y();
      assertEquals(1.0F, circle0.x, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, circle0.radius, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Circle circle0 = new Circle();
      float float0 = circle0.x();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Circle circle0 = new Circle((-1461.0F), (-1461.0F), (-1461.0F));
      Circle circle1 = circle0.offset(1778.41F, (-1461.0F));
      float float0 = circle1.x();
      assertEquals(317.41003F, float0, 0.01F);
      assertEquals((-1461.0F), circle0.radius(), 0.01F);
      assertEquals((-2922.0F), circle1.y(), 0.01F);
      assertEquals((-1461.0F), circle1.radius(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Circle circle0 = new Circle(1.0F, 1.0F, 1.0F);
      Vector vector0 = new Vector(1.0F, (-2655.834F));
      Circle circle1 = new Circle(vector0, 1.0F);
      circle0.set((ICircle) circle1);
      assertEquals((-2655.834F), circle0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Circle circle0 = new Circle(1.0F, 1.0F, 1.0F);
      circle0.set((ICircle) circle0);
      assertEquals(1.0F, circle0.radius, 0.01F);
      assertEquals(1.0F, circle0.y, 0.01F);
      assertEquals(1.0F, circle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.set((-2068.8384F), 0.0F, (-2486.5713F));
      circle1.set((ICircle) circle0);
      assertEquals((-2486.5713F), circle0.radius, 0.01F);
      assertEquals(0.0F, circle0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Circle circle0 = new Circle();
      circle0.set(0.0F, (-843.0F), 0.0F);
      float float0 = circle0.y();
      assertEquals((-843.0F), circle0.y, 0.01F);
      assertEquals((-843.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Circle circle0 = new Circle((-1461.0F), (-1461.0F), (-1461.0F));
      circle0.set(0.0F, 2579.9F, (-1461.0F));
      assertEquals(2579.9F, circle0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Circle circle0 = new Circle(1539.848F, 1539.848F, 1539.848F);
      circle0.set(1283.718F, 0.0F, 0.0F);
      assertEquals(1283.718F, circle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Circle circle0 = new Circle(1.0F, 1.0F, 1.0F);
      circle0.set((-2654.834F), 0.0F, 1.0F);
      float float0 = circle0.x();
      assertEquals((-2654.834F), circle0.x, 0.01F);
      assertEquals((-2654.834F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Circle circle0 = new Circle();
      float float0 = circle0.radius();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Circle circle0 = new Circle(1.0F, 1.0F, 1.0F);
      float float0 = circle0.radius();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, circle0.x, 0.01F);
      assertEquals(1.0F, circle0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Circle circle0 = new Circle(0.0F, (-240.4F), (-1.0F));
      float float0 = circle0.radius();
      assertEquals((-240.4F), circle0.y, 0.01F);
      assertEquals(0.0F, circle0.x, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Circle circle0 = new Circle();
      // Undeclared exception!
      try { 
        circle0.set((ICircle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Circle", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Circle circle0 = null;
      try {
        circle0 = new Circle((XY) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Circle", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Circle circle0 = new Circle(1539.848F, 1539.848F, 1539.848F);
      Circle circle1 = new Circle(circle0);
      assertEquals(1539.848F, circle0.y(), 0.01F);
      assertEquals(1539.848F, circle0.radius(), 0.01F);
      assertEquals(1539.848F, circle0.x(), 0.01F);
      assertTrue(circle1.equals((Object)circle0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Circle circle0 = null;
      try {
        circle0 = new Circle((ICircle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Circle", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.set((ICircle) circle0);
      assertEquals(0.0F, circle1.x, 0.01F);
      assertEquals(0.0F, circle0.radius(), 0.01F);
      assertEquals(0.0F, circle0.y(), 0.01F);
  }
}
