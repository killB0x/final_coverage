/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:37:06 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AffineTransform;
import pythagoras.f.Line;
import pythagoras.f.Point;
import pythagoras.f.Rectangle;
import pythagoras.f.Vector;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Line line0 = new Line((-820.8F), (-820.8F), (-65.78519F), (-65.78519F));
      line0.setLine(2868.3054F, 2868.3054F, (-2372.95F), 1.0F);
      float float0 = line0.x2();
      assertEquals(2868.3054F, line0.y1, 0.01F);
      assertEquals((-2372.95F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0, 0, 1.0E-5F, 0);
      Vector vector0 = affineTransform0.scale();
      Line line0 = new Line(vector0, vector0);
      line0.setLine((-309.04F), 0.0F, 0.0F, 286.99F);
      float float0 = line0.y1();
      assertEquals(286.99F, line0.y2, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.min();
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.5F, 0.0F, 0.0F, 0.0F);
      Vector vector0 = affineTransform0.translation();
      Line line0 = new Line(point0, vector0);
      assertEquals(0.0F, line0.x2, 0.01F);
      assertEquals(0.0F, line0.y1, 0.01F);
      assertEquals(0.0F, line0.x1, 0.01F);
      assertEquals(0.0F, line0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0, 0, 1.0E-5F, 0);
      Vector vector0 = affineTransform0.scale();
      Line line0 = new Line(vector0, vector0);
      float float0 = line0.y2();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, line0.x2, 0.01F);
      assertEquals(0.0F, line0.x1, 0.01F);
      assertEquals(0.0F, line0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Line line0 = new Line((-820.8F), (-820.8F), (-65.78519F), (-65.78519F));
      line0.setLine(2868.3054F, 2868.3054F, (-2372.95F), 1.0F);
      float float0 = line0.y2();
      assertEquals(2868.3054F, line0.y1, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Line line0 = new Line();
      line0.setLine(0.0F, 0.0F, 1.0F, (-1.0F));
      float float0 = line0.y2();
      assertEquals(1.0F, line0.x2, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Line line0 = new Line((-820.8F), (-820.8F), (-65.78519F), (-65.78519F));
      line0.setLine(2868.3054F, 2868.3054F, (-2372.95F), 1.0F);
      float float0 = line0.y1();
      assertEquals(2868.3054F, line0.x1, 0.01F);
      assertEquals(2868.3054F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Line line0 = new Line((-783.0F), (-783.0F), 559.8F, (-1.0F));
      float float0 = line0.y1();
      assertEquals((-783.0F), line0.x1, 0.01F);
      assertEquals(559.8F, line0.x2, 0.01F);
      assertEquals((-1.0F), line0.y2, 0.01F);
      assertEquals((-783.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Line line0 = new Line(0.0F, 0.0F, 3999.61F, 3999.61F);
      float float0 = line0.x2();
      assertEquals(0.0F, line0.x1, 0.01F);
      assertEquals(3999.61F, float0, 0.01F);
      assertEquals(0.0F, line0.y1, 0.01F);
      assertEquals(3999.61F, line0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0, 0, 1.0E-5F, 0);
      Vector vector0 = affineTransform0.scale();
      Line line0 = new Line(vector0, vector0);
      float float0 = line0.x1();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, line0.y2, 0.01F);
      assertEquals(0.0F, line0.y1, 0.01F);
      assertEquals(0.0F, line0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Line line0 = new Line(2515.8F, 2515.8F, 2515.8F, (-1730.8331F));
      Point point0 = line0.p1();
      assertEquals(2515.8F, point0.y, 0.01F);
      
      Rectangle rectangle0 = new Rectangle(1.0F, 0.5F, 2515.8F, 2515.8F);
      Point point1 = rectangle0.location(point0);
      point0.add((-1730.8331F), 2515.8F, point1);
      Line line1 = new Line(point0, point0);
      float float0 = line1.x1();
      assertEquals((-1729.8331F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Line line0 = new Line(0.0F, 0.0F, 0.0F, 0.0F);
      // Undeclared exception!
      try { 
        line0.setLine((XY) null, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Line line0 = new Line((-820.8F), (-820.8F), (-65.78519F), (-65.78519F));
      line0.setLine(2868.3054F, 2868.3054F, (-2372.95F), 1.0F);
      float float0 = line0.x1();
      assertEquals(2868.3054F, line0.y1, 0.01F);
      assertEquals(2868.3054F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((XY) null, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Line line0 = new Line((-820.8F), (-820.8F), (-65.78519F), (-65.78519F));
      Vector vector0 = new Vector(755.0148F, 423.45F);
      line0.setLine((XY) vector0, (XY) vector0);
      assertEquals(423.45F, line0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Line line0 = new Line();
      float float0 = line0.x2();
      assertEquals(0.0F, float0, 0.01F);
  }
}
