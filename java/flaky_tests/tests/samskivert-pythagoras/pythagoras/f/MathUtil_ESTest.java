/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:29:59 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.MathUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtil_ESTest extends MathUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MathUtil.toString(0.0F, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MathUtil.setToStringDecimalPlaces(486);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MathUtil.normalizeAnglePositive(270.0F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MathUtil.normalizeAnglePositive(0.0F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MathUtil.normalizeAngle(3.1415927F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MathUtil.normalizeAngle((-3.1415927F));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MathUtil.epsilonEquals((-338.41074F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MathUtil.lerpa(0.0F, 3, 1.0F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MathUtil.isWithin(837.8427F, 0.0F, 1642.1F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MathUtil.clamp(0.0F, 0.0F, 3518.0295F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MathUtil.ifloor(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MathUtil.roundNearest(0.0F, (-388.03995F));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MathUtil.roundNearest((-3.1415927F), (-3.1415927F));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MathUtil.round(3524.3547F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MathUtil.normalizeAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MathUtil.normal(1.0F, 1948.57F, (-3.1415927F));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MathUtil.normal(10.0F, (-909.6172F), (-202.33585F));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MathUtil.mirrorAngle(3.1415927F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MathUtil.mirrorAngle((-2599.765F));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MathUtil.lerpa(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MathUtil.lerpa(0.0F, (-1933.0F), 3219.0125F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MathUtil.lerp(0.0F, (-476.6F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MathUtil.lerp(2.14748365E9F, 5925.0F, 2.14748365E9F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MathUtil.ifloor(0.0F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MathUtil.iceil(0.0F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MathUtil.exponential(0.0F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MathUtil.exponential((-355.6688F), (-562));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MathUtil.exponential((-1.0F), 1.0F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MathUtil.clamp(863.5579F, 2640.2F, 678.71497F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MathUtil.angularDistance(1049.0966F, 1049.0966F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MathUtil.angularDifference(1.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      MathUtil.toString((float) 2108851781, 2108851781);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      MathUtil.normalizeAnglePositive((-2232579.8F));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = MathUtil.toString((-3844.6465F), 991);
      assertEquals("-3844.646484375", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float float0 = MathUtil.mirrorAngle(0.0F);
      assertEquals((-3.1415927F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = MathUtil.toString(1.0F, (-420));
      assertEquals("+1", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = MathUtil.toString(1051578.4F);
      assertEquals("+1051578.375", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = MathUtil.toString(Float.NaN);
      assertEquals("NaN", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.setToStringDecimalPlaces(Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Decimal places must be >= 0.
         //
         verifyException("pythagoras.f.MathUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MathUtil.setToStringDecimalPlaces(0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float float0 = MathUtil.normalizeAnglePositive(6.2831855F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float float0 = MathUtil.normalizeAngle((-1347.48F));
      assertEquals((-2.8764176F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float float0 = MathUtil.normalizeAngle(57.295776F);
      assertEquals(0.7471113F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float float0 = MathUtil.angularDifference(0.0F, 0.7437208F);
      assertEquals((-0.7437208F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float float0 = MathUtil.angularDifference(1597.0068F, (-264.0F));
      assertEquals(1854.7236F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = MathUtil.epsilonEquals((-4756.451F), (-4756.451F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = MathUtil.epsilonEquals(0.0F, 1.0E-5F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float float0 = MathUtil.lerpa(1390.007F, 1.0F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float float0 = MathUtil.lerpa((-9.457913F), 2924.3044F, 2284.591F);
      assertEquals(6688083.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = MathUtil.isWithin((-4756.451F), (-4756.451F), (-4756.451F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = MathUtil.isWithin(651, 3, 3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = MathUtil.isWithin((-71.991455F), 57.295776F, 3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float float0 = MathUtil.roundNearest(1.5707964F, (-3.1415927F));
      assertEquals(3.1415927F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float float0 = MathUtil.roundNearest((-229.47992F), 0.0F);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      float float0 = MathUtil.clamp((-4756.451F), (-4756.451F), (-4756.451F));
      assertEquals((-4756.451F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float float0 = MathUtil.clamp((-111.0F), (-226.33722F), (-226.33722F));
      assertEquals((-226.33722F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = MathUtil.iceil(9.0905477E9F);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = MathUtil.iceil(3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = MathUtil.iceil(344.3736F);
      assertEquals(345, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = MathUtil.iceil((-1392.336F));
      assertEquals((-1392), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = MathUtil.ifloor((-4.61167337E18F));
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = MathUtil.ifloor((-1.0F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = MathUtil.ifloor(1.0F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = MathUtil.round((-2357292.2F));
      assertEquals((-2357292), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = MathUtil.round(0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      float float0 = MathUtil.normal((-3.1415927F), 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(6.2831855F, MathUtil.TAU, 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      float float0 = MathUtil.angularDistance(57.295776F, (-2702.363F));
      assertEquals(2753.3757F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      float float0 = MathUtil.lerp((-2406.5442F), (-6531397.5F), (-1392.336F));
      assertEquals(9.0905477E9F, float0, 0.01F);
  }
}
