/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:04:06 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.CurveCrossingHelper;
import pythagoras.f.IntersectPoint;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CurveCrossingHelper_ESTest extends CurveCrossingHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1555;
      intArray0[1] = (-1);
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper((float[][]) null, intArray0, intArray1, intArray0, intArray1);
      // Undeclared exception!
      try { 
        curveCrossingHelper0.findCrossing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CurveCrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      int[] intArray0 = new int[7];
      intArray0[0] = (-268);
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(floatArray0, intArray0, (int[][]) null, intArray0, (int[][]) null);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(0, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      float[] floatArray0 = new float[15];
      float[][] floatArray1 = new float[21][0];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      floatArray0[3] = (float) 3;
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = 3;
      int[][] intArray3 = new int[8][7];
      intArray3[1] = intArray2;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(floatArray1, intArray2, intArray1, intArray0, intArray3);
      // Undeclared exception!
      curveCrossingHelper0.findCrossing();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[15];
      float[][] floatArray1 = new float[21][0];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      floatArray0[8] = (float) 4;
      intArray0[2] = 3;
      floatArray0[3] = (float) 3;
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = 3;
      intArray2[1] = 3;
      intArray2[2] = 3;
      int[][] intArray3 = new int[6][7];
      intArray3[1] = intArray2;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(floatArray1, intArray0, intArray1, intArray2, intArray3);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(5, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[15];
      float[][] floatArray1 = new float[2][0];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      int[] intArray0 = new int[7];
      intArray0[0] = 2161;
      intArray0[1] = 4;
      intArray0[2] = 3;
      floatArray0[3] = (float) 3;
      floatArray0[8] = (float) 2161;
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(floatArray1, intArray0, intArray1, intArray0, intArray1);
      // Undeclared exception!
      try { 
        curveCrossingHelper0.findCrossing();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.f.CurveCrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[14];
      float[][] floatArray1 = new float[4][5];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 111;
      intArray0[8] = 1;
      int[][] intArray1 = new int[6][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(floatArray1, intArray0, intArray1, intArray0, intArray1);
      // Undeclared exception!
      try { 
        curveCrossingHelper0.findCrossing();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.f.CurveCrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[][] floatArray1 = new float[8][2];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 2;
      intArray0[3] = 1;
      int[][] intArray1 = new int[5][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(floatArray1, intArray0, intArray1, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(2, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      float[] floatArray0 = new float[15];
      float[][] floatArray1 = new float[2][0];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 4;
      floatArray0[3] = (float) 3;
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      floatArray0[0] = (float) 3;
      int[][] intArray2 = new int[8][7];
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(floatArray1, intArray1[0], intArray1, intArray0, intArray2);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(3, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[15];
      float[][] floatArray1 = new float[21][0];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 4;
      intArray0[2] = 3;
      floatArray0[4] = (float) 3;
      int[][] intArray1 = new int[3][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(floatArray1, intArray0, intArray1, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(4, intersectPointArray0.length);
  }
}
