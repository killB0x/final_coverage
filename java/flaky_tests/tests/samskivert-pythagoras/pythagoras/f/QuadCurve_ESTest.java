/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:25:24 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AffineTransform;
import pythagoras.f.IQuadCurve;
import pythagoras.f.Point;
import pythagoras.f.QuadCurve;
import pythagoras.f.Vector;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuadCurve_ESTest extends QuadCurve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.y2 = 1.0F;
      quadCurve0.intersects((-1.0F), (-195.0F), 2.0F, (-966.3558F));
      assertEquals(1.0F, quadCurve0.y2(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1013.06F, 0.0F, 2294.1162F, 0.0F, 0.0F, 0.0F);
      Vector vector0 = new Vector(0.0F, 2294.1162F);
      Point point0 = new Point();
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector1 = affineTransform0.scale();
      quadCurve0.setCurve((XY) point0, (XY) vector1, (XY) vector0);
      assertEquals(1.0F, quadCurve0.ctrly, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Point point0 = quadCurve0.p2();
      XY[] xYArray0 = new XY[3];
      xYArray0[0] = (XY) point0;
      xYArray0[1] = (XY) point0;
      xYArray0[2] = (XY) point0;
      quadCurve0.setCurve(xYArray0, 0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Point point0 = quadCurve0.p2();
      XY[] xYArray0 = new XY[3];
      xYArray0[0] = (XY) point0;
      xYArray0[1] = (XY) point0;
      // Undeclared exception!
      try { 
        quadCurve0.setCurve(xYArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1013.06F, 0.0F, 2294.1162F, 0.0F, 0.0F, 0.0F);
      assertEquals(1013.06F, quadCurve0.x1, 0.01F);
      
      float[] floatArray0 = new float[6];
      quadCurve0.setCurve(floatArray0, 0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      float float0 = quadCurve0.y2();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1013.06F, 0.0F, 2294.1162F, 0.0F, 0.0F, 0.0F);
      Vector vector0 = new Vector(0.0F, 2294.1162F);
      quadCurve0.setCurve((XY) vector0, (XY) vector0, (XY) vector0);
      float float0 = quadCurve0.y2();
      assertEquals(2294.1162F, quadCurve0.ctrly, 0.01F);
      assertEquals(2294.1162F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      float float0 = quadCurve0.y2();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((-1.0F), quadCurve0.x2, 0.01F);
      assertEquals((-1.0F), quadCurve0.x1, 0.01F);
      assertEquals((-1.0F), quadCurve0.y1, 0.01F);
      assertEquals((-1.0F), quadCurve0.ctrly, 0.01F);
      assertEquals((-1.0F), quadCurve0.ctrlx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      float float0 = quadCurve0.y1();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-990.49F), 913.0F, 3145.0F, (-340.3677F), 1.0F, 0);
      float float0 = quadCurve0.y1();
      assertEquals((-990.49F), quadCurve0.x1, 0.01F);
      assertEquals(1.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(913.0F, float0, 0.01F);
      assertEquals(3145.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals((-340.3677F), quadCurve0.ctrly, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1965.0F), (-1965.0F), 0.0F, 4.0F, 0.0F, 2.0F);
      float float0 = quadCurve0.y1();
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(4.0F, quadCurve0.ctrly, 0.01F);
      assertEquals((-1965.0F), quadCurve0.x1, 0.01F);
      assertEquals(2.0F, quadCurve0.y2, 0.01F);
      assertEquals((-1965.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      float float0 = quadCurve0.x2();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(431.5589F, (-1.0F), (-1.0F), (-1.0F), 431.5589F, 431.5589F);
      float float0 = quadCurve0.x2();
      assertEquals((-1.0F), quadCurve0.ctrlx, 0.01F);
      assertEquals(431.5589F, float0, 0.01F);
      assertEquals((-1.0F), quadCurve0.y1, 0.01F);
      assertEquals((-1.0F), quadCurve0.ctrly, 0.01F);
      assertEquals(431.5589F, quadCurve0.x1, 0.01F);
      assertEquals(431.5589F, quadCurve0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.setCurve(2.0F, 0.0F, (-195.0F), 1.0F, (-195.0F), 2.0F);
      float float0 = quadCurve0.x2();
      assertEquals(2.0F, quadCurve0.x1, 0.01F);
      assertEquals((-195.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      float float0 = quadCurve0.x1();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.setCurve(832.376F, 0.0F, 3839.15F, (-1.0F), 3839.15F, 0.0F);
      float float0 = quadCurve0.x1();
      assertEquals((-1.0F), quadCurve0.ctrly, 0.01F);
      assertEquals(832.376F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-990.49F), (-990.49F), (-990.49F), 1.0E-5F, 1.0E-5F, (-990.49F));
      float float0 = quadCurve0.x1();
      assertEquals(1.0E-5F, quadCurve0.ctrly, 0.01F);
      assertEquals((-990.49F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-990.49F), quadCurve0.y2, 0.01F);
      assertEquals((-990.49F), quadCurve0.y1, 0.01F);
      assertEquals(1.0E-5F, quadCurve0.x2, 0.01F);
      assertEquals((-990.49F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      float float0 = quadCurve0.ctrlY();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.setCurve(832.376F, 0.0F, 3839.15F, (-1.0F), 3839.15F, 0.0F);
      float float0 = quadCurve0.ctrlY();
      assertEquals(3839.15F, quadCurve0.x2, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      float float0 = quadCurve0.ctrlX();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.setCurve(832.376F, 0.0F, 3839.15F, (-1.0F), 3839.15F, 0.0F);
      float float0 = quadCurve0.ctrlX();
      assertEquals(832.376F, quadCurve0.x1, 0.01F);
      assertEquals(3839.15F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(431.5589F, (-1.0F), (-1.0F), (-1.0F), 431.5589F, 431.5589F);
      float float0 = quadCurve0.ctrlX();
      assertEquals(431.5589F, quadCurve0.x2, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(431.5589F, quadCurve0.x1, 0.01F);
      assertEquals(431.5589F, quadCurve0.y2, 0.01F);
      assertEquals((-1.0F), quadCurve0.ctrly, 0.01F);
      assertEquals((-1.0F), quadCurve0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      XY[] xYArray0 = new XY[0];
      // Undeclared exception!
      try { 
        quadCurve0.setCurve(xYArray0, (-1985));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1985 out of bounds for length 0
         //
         verifyException("pythagoras.f.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        quadCurve0.setCurve(floatArray0, (-5161));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -5161 out of bounds for length 0
         //
         verifyException("pythagoras.f.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      // Undeclared exception!
      try { 
        quadCurve0.setCurve((IQuadCurve) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.setCurve((-2722.02F), 0.0F, (-1548.34F), 0.5F, (-2722.02F), 0.0F);
      float float0 = quadCurve0.ctrlY();
      assertEquals(0.5F, quadCurve0.ctrly, 0.01F);
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.setCurve((IQuadCurve) quadCurve0);
      assertEquals(0.0F, quadCurve0.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.x2, 0.01F);
      assertEquals(0.0F, quadCurve0.y2, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve0.x1(), 0.01F);
      assertEquals(0.0F, quadCurve0.ctrly, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      // Undeclared exception!
      try { 
        quadCurve0.setCurve((XY) null, (XY) null, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      // Undeclared exception!
      try { 
        quadCurve0.setCurve((float[]) null, (-5161));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.QuadCurve", e);
      }
  }
}
