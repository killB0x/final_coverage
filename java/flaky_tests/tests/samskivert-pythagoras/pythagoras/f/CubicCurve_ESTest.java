/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:31:19 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AffineTransform;
import pythagoras.f.CubicCurve;
import pythagoras.f.ICubicCurve;
import pythagoras.f.Line;
import pythagoras.f.Point;
import pythagoras.f.Rectangle;
import pythagoras.f.Vector;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CubicCurve_ESTest extends CubicCurve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      CubicCurve cubicCurve1 = new CubicCurve(0.0F, (-892.7685F), 0.0F, (-874.0F), 0.0F, 0.0F, 0.0F, 0.0F);
      cubicCurve0.setCurve((ICubicCurve) cubicCurve1);
      assertEquals((-892.7685F), cubicCurve0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1695.97F), 2416.7F, 2.0F, 1.0F, 2416.7F, 450.793F, (-1845.49F), 2416.7F);
      Vector vector0 = new Vector(2.0F, 2.0F);
      Vector vector1 = new Vector(vector0);
      cubicCurve0.setCurve((XY) vector1, (XY) vector1, (XY) vector0, (XY) vector1);
      assertEquals(2.0F, cubicCurve0.ctrlx2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1695.97F), 2416.7F, 2.0F, 1.0F, 2416.7F, 450.793F, (-1845.49F), 2416.7F);
      Vector vector0 = new Vector(2.0F, 2.0F);
      Vector vector1 = new Vector(vector0);
      cubicCurve0.setCurve((XY) vector0, (XY) vector1, (XY) vector0, (XY) vector0);
      assertEquals(2.0F, cubicCurve0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1523.0F, 0.0F);
      assertEquals(1523.0F, cubicCurve0.x2, 0.01F);
      
      float[] floatArray0 = new float[9];
      cubicCurve0.setCurve(floatArray0, 0);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      float float0 = cubicCurve0.y2();
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-377.47F), 1238.7F, (-820.623F), 0.0F, 0.0F, (-2804.288F), 1238.7F, 1.0F);
      float float0 = cubicCurve0.y2();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals((-820.623F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals((-377.47F), cubicCurve0.x1, 0.01F);
      assertEquals(1238.7F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-2804.288F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(1238.7F, cubicCurve0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-995.6023F), 1.0F, (-2149.5247F), (-772.9F), (-2236.0F), (-2236.0F), 0.0F, (-772.9F));
      float float0 = cubicCurve0.y2();
      assertEquals((-772.9F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-995.6023F), cubicCurve0.x1, 0.01F);
      assertEquals((-2236.0F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-2236.0F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals(1.0F, cubicCurve0.y1, 0.01F);
      assertEquals((-2149.5247F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-772.9F), float0, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 0.0F, (-1343.4F), 0.0F, 0.0F, (-1343.4F), (-2984.819F));
      float float0 = cubicCurve0.y1();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1343.4F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-2984.819F), cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-1343.4F), cubicCurve0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(931.9F, 931.9F, 1.0E-5F, 0.0F, (-3862.0F), 0.0F, (-3862.0F), 0.0F);
      float float0 = cubicCurve0.y1();
      assertEquals((-3862.0F), cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(931.9F, cubicCurve0.x1, 0.01F);
      assertEquals((-3862.0F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(1.0E-5F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(931.9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.5F, 1732.5918F, 0.5F, 1455.8F, 1732.5918F, 606.1F, 606.1F, 0.5F);
      Vector vector0 = new Vector(2620.6355F, (-1722.6351F));
      Line line0 = new Line(vector0, vector0);
      Rectangle rectangle0 = line0.bounds();
      Point point0 = rectangle0.max();
      cubicCurve0.setCurve((XY) point0, (XY) point0, (XY) vector0, (XY) vector0);
      float float0 = cubicCurve0.y1();
      assertEquals((-1722.6351F), cubicCurve0.y2, 0.01F);
      assertEquals((-1722.6351F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      float float0 = cubicCurve0.x2();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      cubicCurve0.x2 = 1047.6F;
      float float0 = cubicCurve0.x2();
      assertEquals(1047.6F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      cubicCurve0.x2 = (-1204.678F);
      float float0 = cubicCurve0.x2();
      assertEquals((-1204.678F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      float float0 = cubicCurve0.x1();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(2077.4102F, 3093.617F, (-624.45416F), 2077.4102F, 0.0F, 3093.617F, 1.0F, (-624.45416F));
      float float0 = cubicCurve0.x1();
      assertEquals((-624.45416F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(1.0F, cubicCurve0.x2, 0.01F);
      assertEquals(2077.4102F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(2077.4102F, float0, 0.01F);
      assertEquals(3093.617F, cubicCurve0.y1, 0.01F);
      assertEquals((-624.45416F), cubicCurve0.y2, 0.01F);
      assertEquals(3093.617F, cubicCurve0.ctrly2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-475.0F), (-475.0F), (-475.0F), (-475.0F), (-475.0F), (-475.0F), 0.0F, (-738.877F));
      float float0 = cubicCurve0.x1();
      assertEquals((-475.0F), float0, 0.01F);
      assertEquals((-738.877F), cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals((-475.0F), cubicCurve0.y1, 0.01F);
      assertEquals((-475.0F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-475.0F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-475.0F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-475.0F), cubicCurve0.ctrly1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 0.0F, (-1343.4F), 0.0F, 0.0F, (-1343.4F), (-2984.819F));
      float float0 = cubicCurve0.ctrlY2();
      assertEquals((-1343.4F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-2984.819F), cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-1343.4F), cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Point point0 = new Point();
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      XY[] xYArray0 = new XY[7];
      xYArray0[0] = (XY) vector0;
      xYArray0[1] = (XY) vector0;
      xYArray0[2] = (XY) vector0;
      xYArray0[3] = (XY) point0;
      cubicCurve0.setCurve(xYArray0, 0);
      float float0 = cubicCurve0.ctrlY2();
      assertEquals(1.0F, cubicCurve0.y1, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-3620.6F), (-3620.6F), 0.0F);
      float float0 = cubicCurve0.ctrlY2();
      assertEquals((-1.0F), cubicCurve0.y1, 0.01F);
      assertEquals((-3620.6F), cubicCurve0.x2, 0.01F);
      assertEquals((-1.0F), cubicCurve0.x1, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-3620.6F), float0, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrly1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-3620.6F), (-3620.6F), 0.0F);
      float float0 = cubicCurve0.ctrlY1();
      assertEquals((-3620.6F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-1.0F), cubicCurve0.y1, 0.01F);
      assertEquals((-1.0F), cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((-3620.6F), cubicCurve0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      float float0 = cubicCurve0.ctrlX2();
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(2289.479F, 2289.479F, 2289.479F, (-1.0F), 54.0F, 54.0F, 54.0F, 9.0F);
      float float0 = cubicCurve0.ctrlX2();
      assertEquals(54.0F, float0, 0.01F);
      assertEquals(54.0F, cubicCurve0.x2, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(54.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(9.0F, cubicCurve0.y2, 0.01F);
      assertEquals(2289.479F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(2289.479F, cubicCurve0.x1, 0.01F);
      assertEquals(2289.479F, cubicCurve0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-58.04454F), (-58.04454F), (-58.04454F), (-1800.4929F), (-1800.4929F), 2336.34F, 0.0F, 0.0F);
      float float0 = cubicCurve0.ctrlX2();
      assertEquals((-58.04454F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-1800.4929F), float0, 0.01F);
      assertEquals(2336.34F, cubicCurve0.ctrly2, 0.01F);
      assertEquals((-58.04454F), cubicCurve0.x1, 0.01F);
      assertEquals((-1800.4929F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-58.04454F), cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-995.6023F), 1.0F, (-2149.5247F), (-772.9F), (-2236.0F), (-2236.0F), 0.0F, (-772.9F));
      cubicCurve0.setCurve((-2236.0F), 1.0F, 0.0F, 1.0F, (-772.9F), 0.0F, 0.0F, (-1680.9144F));
      float float0 = cubicCurve0.ctrlX1();
      assertEquals((-772.9F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.5F, 1732.5918F, 0.5F, 1455.8F, 1732.5918F, 606.1F, 606.1F, 0.5F);
      float float0 = cubicCurve0.ctrlX1();
      assertEquals(0.5F, cubicCurve0.x1, 0.01F);
      assertEquals(0.5F, cubicCurve0.y2, 0.01F);
      assertEquals(1732.5918F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(1455.8F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(1732.5918F, cubicCurve0.y1, 0.01F);
      assertEquals(0.5F, float0, 0.01F);
      assertEquals(606.1F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(606.1F, cubicCurve0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-58.04454F), (-58.04454F), (-58.04454F), (-1800.4929F), (-1800.4929F), 2336.34F, 0.0F, 0.0F);
      float float0 = cubicCurve0.ctrlX1();
      assertEquals(2336.34F, cubicCurve0.ctrly2, 0.01F);
      assertEquals((-1800.4929F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals((-58.04454F), cubicCurve0.x1, 0.01F);
      assertEquals((-1800.4929F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-58.04454F), float0, 0.01F);
      assertEquals((-58.04454F), cubicCurve0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      XY[] xYArray0 = new XY[1];
      // Undeclared exception!
      try { 
        cubicCurve0.setCurve(xYArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 1
         //
         verifyException("pythagoras.f.CubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-995.6023F), 1.0F, (-2149.5247F), (-772.9F), (-2236.0F), (-2236.0F), 0.0F, (-772.9F));
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try { 
        cubicCurve0.setCurve(floatArray0, 1118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1118 out of bounds for length 6
         //
         verifyException("pythagoras.f.CubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      // Undeclared exception!
      try { 
        cubicCurve0.setCurve((ICubicCurve) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      // Undeclared exception!
      try { 
        cubicCurve0.setCurve((XY) null, (XY) null, (XY) null, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      XY[] xYArray0 = new XY[7];
      // Undeclared exception!
      try { 
        cubicCurve0.setCurve(xYArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1.0F, 0.0F, 0.0F, 1.0F, 0.0F, 715.0F, 0.0F, 0.0F);
      float float0 = cubicCurve0.ctrlY1();
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(1.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(715.0F, cubicCurve0.ctrly2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      float float0 = cubicCurve0.ctrlY1();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      // Undeclared exception!
      try { 
        cubicCurve0.setCurve((float[]) null, (-3787));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CubicCurve", e);
      }
  }
}
