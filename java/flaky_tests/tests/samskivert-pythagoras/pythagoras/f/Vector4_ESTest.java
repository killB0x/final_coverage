/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:48:05 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.FloatBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IMatrix4;
import pythagoras.f.IVector4;
import pythagoras.f.Matrix4;
import pythagoras.f.Vector4;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector4_ESTest extends Vector4_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 314.60098F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(314.60098F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(314.60098F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      Vector4 vector4_1 = new Vector4(vector4_0);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(314.60098F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(314.60098F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(314.60098F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(314.60098F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      
      Vector4 vector4_2 = vector4_1.negate(vector4_1);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertFalse(vector4_2.equals((Object)vector4_0));
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(314.60098F, vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_1.y(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals(-0.0F, vector4_1.x(), 0.01F);
      assertEquals((-314.60098F), vector4_1.w(), 0.01F);
      assertEquals(-0.0F, vector4_2.z(), 0.01F);
      assertEquals((-314.60098F), vector4_2.w(), 0.01F);
      assertEquals(-0.0F, vector4_2.y(), 0.01F);
      assertEquals(-0.0F, vector4_2.x(), 0.01F);
      assertNotNull(vector4_2);
      assertNotSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertSame(vector4_1, vector4_2);
      assertNotSame(vector4_2, vector4_0);
      assertSame(vector4_2, vector4_1);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(314.60098F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals((-314.60098F), vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.y, 0.01F);
      assertEquals(-0.0F, vector4_1.x, 0.01F);
      assertEquals((-314.60098F), vector4_2.w, 0.01F);
      assertEquals(-0.0F, vector4_2.x, 0.01F);
      assertEquals(-0.0F, vector4_2.z, 0.01F);
      assertEquals(-0.0F, vector4_2.y, 0.01F);
      
      boolean boolean0 = vector4_0.equals(vector4_1);
      assertFalse(vector4_0.equals((Object)vector4_2));
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(314.60098F, vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_1.y(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals(-0.0F, vector4_1.x(), 0.01F);
      assertEquals((-314.60098F), vector4_1.w(), 0.01F);
      assertNotSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertSame(vector4_1, vector4_2);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(314.60098F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals((-314.60098F), vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.y, 0.01F);
      assertEquals(-0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(3.4028235E38F, 145.0272F, (-1.0F), 145.0272F);
      assertEquals(145.0272F, vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals(145.0272F, vector4_0.w(), 0.01F);
      assertEquals(3.4028235E38F, vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(145.0272F, vector4_0.y, 0.01F);
      assertEquals(145.0272F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.abs();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(145.0272F, vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals(145.0272F, vector4_0.w(), 0.01F);
      assertEquals(3.4028235E38F, vector4_0.x(), 0.01F);
      assertEquals(145.0272F, vector4_1.w(), 0.01F);
      assertEquals(3.4028235E38F, vector4_1.x(), 0.01F);
      assertEquals(145.0272F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertEquals(145.0272F, vector4_0.y, 0.01F);
      assertEquals(145.0272F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector4_0.x, 0.01F);
      assertEquals(145.0272F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.z, 0.01F);
      assertEquals(3.4028235E38F, vector4_1.x, 0.01F);
      assertEquals(145.0272F, vector4_1.w, 0.01F);
      
      boolean boolean0 = vector4_0.equals(vector4_1);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(145.0272F, vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals(145.0272F, vector4_0.w(), 0.01F);
      assertEquals(3.4028235E38F, vector4_0.x(), 0.01F);
      assertEquals(145.0272F, vector4_1.w(), 0.01F);
      assertEquals(3.4028235E38F, vector4_1.x(), 0.01F);
      assertEquals(145.0272F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.z(), 0.01F);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertFalse(boolean0);
      assertEquals(145.0272F, vector4_0.y, 0.01F);
      assertEquals(145.0272F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals(3.4028235E38F, vector4_0.x, 0.01F);
      assertEquals(145.0272F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.z, 0.01F);
      assertEquals(3.4028235E38F, vector4_1.x, 0.01F);
      assertEquals(145.0272F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      boolean boolean0 = vector4_0.equals(vector4_0);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      Vector4 vector4_1 = new Vector4(vector4_0);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.y(), 0.01F);
      assertEquals((-1.0F), vector4_1.x(), 0.01F);
      assertNotNull(vector4_1);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals((-1.0F), vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4(0.0F, (-1.0F), 33.7F, 1.0F, 33.7F, 386.1067F, (-1.0F), 0.0F, (-1.0F), 842.72F, 10.0F, 0.0F, 1.0F, (-637.2405F), 0.0F, (-1.0F));
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(10.0F, matrix4_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m33(), 0.01F);
      assertEquals((-637.2405F), matrix4_0.m13(), 0.01F);
      assertEquals(33.7F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m02(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m10(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(1.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(842.72F, matrix4_0.m12(), 0.01F);
      assertEquals(33.7F, matrix4_0.m20(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m03(), 0.01F);
      assertEquals(386.1067F, matrix4_0.m11(), 0.01F);
      assertNotNull(matrix4_0);
      assertEquals(33.7F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals((-1.0F), matrix4_0.m02, 0.01F);
      assertEquals(33.7F, matrix4_0.m20, 0.01F);
      assertEquals(1.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals((-1.0F), matrix4_0.m10, 0.01F);
      assertEquals((-1.0F), matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals(10.0F, matrix4_0.m22, 0.01F);
      assertEquals((-1.0F), matrix4_0.m33, 0.01F);
      assertEquals((-637.2405F), matrix4_0.m13, 0.01F);
      assertEquals(386.1067F, matrix4_0.m11, 0.01F);
      assertEquals(842.72F, matrix4_0.m12, 0.01F);
      assertEquals(1.0F, matrix4_0.m03, 0.01F);
      
      Vector4 vector4_2 = vector4_1.multLocal((IMatrix4) matrix4_0);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertFalse(vector4_2.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-32.7F), vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.w(), 0.01F);
      assertEquals((-385.1067F), vector4_1.y(), 0.01F);
      assertEquals((-33.7F), vector4_1.x(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(10.0F, matrix4_0.m22(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m33(), 0.01F);
      assertEquals((-637.2405F), matrix4_0.m13(), 0.01F);
      assertEquals(33.7F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m02(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m10(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(1.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(842.72F, matrix4_0.m12(), 0.01F);
      assertEquals(33.7F, matrix4_0.m20(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m03(), 0.01F);
      assertEquals(386.1067F, matrix4_0.m11(), 0.01F);
      assertEquals((-33.7F), vector4_2.x(), 0.01F);
      assertEquals((-32.7F), vector4_2.z(), 0.01F);
      assertEquals((-385.1067F), vector4_2.y(), 0.01F);
      assertEquals((-1.0F), vector4_2.w(), 0.01F);
      assertNotNull(vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertSame(vector4_1, vector4_2);
      assertSame(vector4_2, vector4_1);
      assertNotSame(vector4_2, vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-32.7F), vector4_1.z, 0.01F);
      assertEquals((-33.7F), vector4_1.x, 0.01F);
      assertEquals((-385.1067F), vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.w, 0.01F);
      assertEquals(33.7F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals((-1.0F), matrix4_0.m02, 0.01F);
      assertEquals(33.7F, matrix4_0.m20, 0.01F);
      assertEquals(1.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals((-1.0F), matrix4_0.m10, 0.01F);
      assertEquals((-1.0F), matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals(10.0F, matrix4_0.m22, 0.01F);
      assertEquals((-1.0F), matrix4_0.m33, 0.01F);
      assertEquals((-637.2405F), matrix4_0.m13, 0.01F);
      assertEquals(386.1067F, matrix4_0.m11, 0.01F);
      assertEquals(842.72F, matrix4_0.m12, 0.01F);
      assertEquals(1.0F, matrix4_0.m03, 0.01F);
      assertEquals((-33.7F), vector4_2.x, 0.01F);
      assertEquals((-1.0F), vector4_2.w, 0.01F);
      assertEquals((-385.1067F), vector4_2.y, 0.01F);
      assertEquals((-32.7F), vector4_2.z, 0.01F);
      
      boolean boolean0 = vector4_1.equals(vector4_0);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_0.equals((Object)vector4_2));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-32.7F), vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.w(), 0.01F);
      assertEquals((-385.1067F), vector4_1.y(), 0.01F);
      assertEquals((-33.7F), vector4_1.x(), 0.01F);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertSame(vector4_1, vector4_2);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-32.7F), vector4_1.z, 0.01F);
      assertEquals((-33.7F), vector4_1.x, 0.01F);
      assertEquals((-385.1067F), vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      Vector4 vector4_1 = new Vector4((-1.0F), 0.0F, (-1.0F), (-1.0F));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals((-1.0F), vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.x(), 0.01F);
      assertNotNull(vector4_1);
      assertEquals((-1.0F), vector4_1.w, 0.01F);
      assertEquals((-1.0F), vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.z, 0.01F);
      
      boolean boolean0 = vector4_1.equals(vector4_0);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals((-1.0F), vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.x(), 0.01F);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_1.w, 0.01F);
      assertEquals((-1.0F), vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1755.0F);
      floatArray0[2] = (-255.9129F);
      Vector4 vector4_0 = new Vector4(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals((-1755.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-255.9129F), vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertArrayEquals(new float[] {(-1755.0F), 0.0F, (-255.9129F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1755.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-255.9129F), vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      vector4_0.hashCode();
      assertEquals(7, floatArray0.length);
      assertEquals((-1755.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-255.9129F), vector4_0.z(), 0.01F);
      assertArrayEquals(new float[] {(-1755.0F), 0.0F, (-255.9129F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1755.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-255.9129F), vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      
      vector4_0.hashCode();
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-935.7447F), (-935.7447F), 0.0F, (-935.7447F));
      assertEquals((-935.7447F), vector4_0.y(), 0.01F);
      assertEquals((-935.7447F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-935.7447F), vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-935.7447F), vector4_0.y, 0.01F);
      assertEquals((-935.7447F), vector4_0.x, 0.01F);
      assertEquals((-935.7447F), vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4((-935.7447F), 620.0F, (-807.22F), 1500.4F, (-807.22F), (-3244.0F), (-836.366F), 993.35F, 620.0F, (-3.4028235E38F), 3769.8857F, 0.0F, 620.0F, (-3244.0F), (-531.7F), (-1666.41F));
      assertEquals((-3244.0F), matrix4_0.m13(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(620.0F, matrix4_0.m02(), 0.01F);
      assertEquals(620.0F, matrix4_0.m10(), 0.01F);
      assertEquals(993.35F, matrix4_0.m31(), 0.01F);
      assertEquals((-531.7F), matrix4_0.m23(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-935.7447F), matrix4_0.m00(), 0.01F);
      assertEquals((-3244.0F), matrix4_0.m11(), 0.01F);
      assertEquals(1500.4F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-836.366F), matrix4_0.m21(), 0.01F);
      assertEquals((-807.22F), matrix4_0.m20(), 0.01F);
      assertEquals(620.0F, matrix4_0.m03(), 0.01F);
      assertEquals((-3.4028235E38F), matrix4_0.m12(), 0.01F);
      assertEquals((-807.22F), matrix4_0.m01(), 0.01F);
      assertEquals((-1666.41F), matrix4_0.m33(), 0.01F);
      assertEquals(3769.8857F, matrix4_0.m22(), 0.01F);
      assertNotNull(matrix4_0);
      assertEquals(620.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals((-3244.0F), matrix4_0.m13, 0.01F);
      assertEquals((-807.22F), matrix4_0.m01, 0.01F);
      assertEquals((-531.7F), matrix4_0.m23, 0.01F);
      assertEquals((-3.4028235E38F), matrix4_0.m12, 0.01F);
      assertEquals((-3244.0F), matrix4_0.m11, 0.01F);
      assertEquals((-807.22F), matrix4_0.m20, 0.01F);
      assertEquals((-935.7447F), matrix4_0.m00, 0.01F);
      assertEquals((-836.366F), matrix4_0.m21, 0.01F);
      assertEquals(620.0F, matrix4_0.m02, 0.01F);
      assertEquals(3769.8857F, matrix4_0.m22, 0.01F);
      assertEquals(993.35F, matrix4_0.m31, 0.01F);
      assertEquals(620.0F, matrix4_0.m03, 0.01F);
      assertEquals(1500.4F, matrix4_0.m30, 0.01F);
      assertEquals((-1666.41F), matrix4_0.m33, 0.01F);
      
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-935.7447F), vector4_0.y(), 0.01F);
      assertEquals((-935.7447F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-935.7447F), vector4_0.w(), 0.01F);
      assertEquals((-3244.0F), matrix4_0.m13(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(620.0F, matrix4_0.m02(), 0.01F);
      assertEquals(620.0F, matrix4_0.m10(), 0.01F);
      assertEquals(993.35F, matrix4_0.m31(), 0.01F);
      assertEquals((-531.7F), matrix4_0.m23(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-935.7447F), matrix4_0.m00(), 0.01F);
      assertEquals((-3244.0F), matrix4_0.m11(), 0.01F);
      assertEquals(1500.4F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-836.366F), matrix4_0.m21(), 0.01F);
      assertEquals((-807.22F), matrix4_0.m20(), 0.01F);
      assertEquals(620.0F, matrix4_0.m03(), 0.01F);
      assertEquals((-3.4028235E38F), matrix4_0.m12(), 0.01F);
      assertEquals((-807.22F), matrix4_0.m01(), 0.01F);
      assertEquals((-1666.41F), matrix4_0.m33(), 0.01F);
      assertEquals(3769.8857F, matrix4_0.m22(), 0.01F);
      assertEquals(1050808.2F, vector4_1.x(), 0.01F);
      assertEquals(2035512.4F, vector4_1.z(), 0.01F);
      assertEquals((-774178.9F), vector4_1.w(), 0.01F);
      assertEquals(5490950.0F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertEquals((-935.7447F), vector4_0.y, 0.01F);
      assertEquals((-935.7447F), vector4_0.x, 0.01F);
      assertEquals((-935.7447F), vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(620.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals((-3244.0F), matrix4_0.m13, 0.01F);
      assertEquals((-807.22F), matrix4_0.m01, 0.01F);
      assertEquals((-531.7F), matrix4_0.m23, 0.01F);
      assertEquals((-3.4028235E38F), matrix4_0.m12, 0.01F);
      assertEquals((-3244.0F), matrix4_0.m11, 0.01F);
      assertEquals((-807.22F), matrix4_0.m20, 0.01F);
      assertEquals((-935.7447F), matrix4_0.m00, 0.01F);
      assertEquals((-836.366F), matrix4_0.m21, 0.01F);
      assertEquals(620.0F, matrix4_0.m02, 0.01F);
      assertEquals(3769.8857F, matrix4_0.m22, 0.01F);
      assertEquals(993.35F, matrix4_0.m31, 0.01F);
      assertEquals(620.0F, matrix4_0.m03, 0.01F);
      assertEquals(1500.4F, matrix4_0.m30, 0.01F);
      assertEquals((-1666.41F), matrix4_0.m33, 0.01F);
      assertEquals(5490950.0F, vector4_1.y, 0.01F);
      assertEquals(1050808.2F, vector4_1.x, 0.01F);
      assertEquals(2035512.4F, vector4_1.z, 0.01F);
      assertEquals((-774178.9F), vector4_1.w, 0.01F);
      
      String string0 = vector4_1.toString();
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-935.7447F), vector4_0.y(), 0.01F);
      assertEquals((-935.7447F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-935.7447F), vector4_0.w(), 0.01F);
      assertEquals((-3244.0F), matrix4_0.m13(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(620.0F, matrix4_0.m02(), 0.01F);
      assertEquals(620.0F, matrix4_0.m10(), 0.01F);
      assertEquals(993.35F, matrix4_0.m31(), 0.01F);
      assertEquals((-531.7F), matrix4_0.m23(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-935.7447F), matrix4_0.m00(), 0.01F);
      assertEquals((-3244.0F), matrix4_0.m11(), 0.01F);
      assertEquals(1500.4F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-836.366F), matrix4_0.m21(), 0.01F);
      assertEquals((-807.22F), matrix4_0.m20(), 0.01F);
      assertEquals(620.0F, matrix4_0.m03(), 0.01F);
      assertEquals((-3.4028235E38F), matrix4_0.m12(), 0.01F);
      assertEquals((-807.22F), matrix4_0.m01(), 0.01F);
      assertEquals((-1666.41F), matrix4_0.m33(), 0.01F);
      assertEquals(3769.8857F, matrix4_0.m22(), 0.01F);
      assertEquals(1050808.2F, vector4_1.x(), 0.01F);
      assertEquals(2035512.4F, vector4_1.z(), 0.01F);
      assertEquals((-774178.9F), vector4_1.w(), 0.01F);
      assertEquals(5490950.0F, vector4_1.y(), 0.01F);
      assertNotNull(string0);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertEquals("[1050808.2, 5490950.0, 2035512.4, -774178.9]", string0);
      assertEquals((-935.7447F), vector4_0.y, 0.01F);
      assertEquals((-935.7447F), vector4_0.x, 0.01F);
      assertEquals((-935.7447F), vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(620.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals((-3244.0F), matrix4_0.m13, 0.01F);
      assertEquals((-807.22F), matrix4_0.m01, 0.01F);
      assertEquals((-531.7F), matrix4_0.m23, 0.01F);
      assertEquals((-3.4028235E38F), matrix4_0.m12, 0.01F);
      assertEquals((-3244.0F), matrix4_0.m11, 0.01F);
      assertEquals((-807.22F), matrix4_0.m20, 0.01F);
      assertEquals((-935.7447F), matrix4_0.m00, 0.01F);
      assertEquals((-836.366F), matrix4_0.m21, 0.01F);
      assertEquals(620.0F, matrix4_0.m02, 0.01F);
      assertEquals(3769.8857F, matrix4_0.m22, 0.01F);
      assertEquals(993.35F, matrix4_0.m31, 0.01F);
      assertEquals(620.0F, matrix4_0.m03, 0.01F);
      assertEquals(1500.4F, matrix4_0.m30, 0.01F);
      assertEquals((-1666.41F), matrix4_0.m33, 0.01F);
      assertEquals(5490950.0F, vector4_1.y, 0.01F);
      assertEquals(1050808.2F, vector4_1.x, 0.01F);
      assertEquals(2035512.4F, vector4_1.z, 0.01F);
      assertEquals((-774178.9F), vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(3314);
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(3314, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(3314, floatBuffer0.capacity());
      assertEquals(0, floatBuffer0.position());
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(3314, floatBuffer0.remaining());
      assertTrue(floatBuffer0.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=3314 cap=3314]", floatBuffer0.toString());
      assertNotNull(floatBuffer0);
      
      Matrix4 matrix4_0 = new Matrix4(floatBuffer0);
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(3314, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(3314, floatBuffer0.capacity());
      assertEquals("java.nio.HeapFloatBuffer[pos=16 lim=3314 cap=3314]", floatBuffer0.toString());
      assertEquals(16, floatBuffer0.position());
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(3298, floatBuffer0.remaining());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(0.0F, matrix4_0.m22(), 0.01F);
      assertEquals(0.0F, matrix4_0.m33(), 0.01F);
      assertEquals(0.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertFalse(matrix4_0.isAffine());
      assertNotNull(matrix4_0);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals(0.0F, matrix4_0.m11, 0.01F);
      assertEquals(0.0F, matrix4_0.m22, 0.01F);
      assertEquals(0.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      
      Vector4 vector4_0 = new Vector4(Float.NaN, (-374.0152F), 1.0F, Float.NaN);
      assertEquals((-374.0152F), vector4_0.y(), 0.01F);
      assertEquals(Float.NaN, vector4_0.x(), 0.01F);
      assertEquals(1.0F, vector4_0.z(), 0.01F);
      assertEquals(Float.NaN, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(Float.NaN, vector4_0.w, 0.01F);
      assertEquals((-374.0152F), vector4_0.y, 0.01F);
      assertEquals(1.0F, vector4_0.z, 0.01F);
      assertEquals(Float.NaN, vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0, vector4_0);
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(3314, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(3314, floatBuffer0.capacity());
      assertEquals("java.nio.HeapFloatBuffer[pos=16 lim=3314 cap=3314]", floatBuffer0.toString());
      assertEquals(16, floatBuffer0.position());
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(3298, floatBuffer0.remaining());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(0.0F, matrix4_0.m22(), 0.01F);
      assertEquals(0.0F, matrix4_0.m33(), 0.01F);
      assertEquals(0.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertFalse(matrix4_0.isAffine());
      assertEquals(Float.NaN, vector4_0.x(), 0.01F);
      assertEquals(Float.NaN, vector4_0.z(), 0.01F);
      assertEquals(Float.NaN, vector4_0.y(), 0.01F);
      assertEquals(Float.NaN, vector4_0.w(), 0.01F);
      assertEquals(Float.NaN, vector4_1.x(), 0.01F);
      assertEquals(Float.NaN, vector4_1.y(), 0.01F);
      assertEquals(Float.NaN, vector4_1.z(), 0.01F);
      assertEquals(Float.NaN, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals(0.0F, matrix4_0.m11, 0.01F);
      assertEquals(0.0F, matrix4_0.m22, 0.01F);
      assertEquals(0.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(Float.NaN, vector4_0.w, 0.01F);
      assertEquals(Float.NaN, vector4_0.z, 0.01F);
      assertEquals(Float.NaN, vector4_0.y, 0.01F);
      assertEquals(Float.NaN, vector4_0.x, 0.01F);
      assertEquals(Float.NaN, vector4_1.z, 0.01F);
      assertEquals(Float.NaN, vector4_1.x, 0.01F);
      assertEquals(Float.NaN, vector4_1.y, 0.01F);
      assertEquals(Float.NaN, vector4_1.w, 0.01F);
      
      Vector4 vector4_2 = vector4_1.mult((IMatrix4) matrix4_0);
      assertFalse(vector4_2.equals((Object)vector4_1));
      assertFalse(vector4_2.equals((Object)vector4_0));
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(3314, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(3314, floatBuffer0.capacity());
      assertEquals("java.nio.HeapFloatBuffer[pos=16 lim=3314 cap=3314]", floatBuffer0.toString());
      assertEquals(16, floatBuffer0.position());
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(3298, floatBuffer0.remaining());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(0.0F, matrix4_0.m22(), 0.01F);
      assertEquals(0.0F, matrix4_0.m33(), 0.01F);
      assertEquals(0.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertFalse(matrix4_0.isAffine());
      assertEquals(Float.NaN, vector4_0.x(), 0.01F);
      assertEquals(Float.NaN, vector4_0.z(), 0.01F);
      assertEquals(Float.NaN, vector4_0.y(), 0.01F);
      assertEquals(Float.NaN, vector4_0.w(), 0.01F);
      assertEquals(Float.NaN, vector4_1.x(), 0.01F);
      assertEquals(Float.NaN, vector4_1.y(), 0.01F);
      assertEquals(Float.NaN, vector4_1.z(), 0.01F);
      assertEquals(Float.NaN, vector4_1.w(), 0.01F);
      assertEquals(Float.NaN, vector4_2.w(), 0.01F);
      assertEquals(Float.NaN, vector4_2.z(), 0.01F);
      assertEquals(Float.NaN, vector4_2.y(), 0.01F);
      assertEquals(Float.NaN, vector4_2.x(), 0.01F);
      assertNotNull(vector4_2);
      assertNotSame(vector4_0, vector4_2);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertNotSame(vector4_1, vector4_2);
      assertNotSame(vector4_2, vector4_1);
      assertNotSame(vector4_2, vector4_0);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals(0.0F, matrix4_0.m11, 0.01F);
      assertEquals(0.0F, matrix4_0.m22, 0.01F);
      assertEquals(0.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(Float.NaN, vector4_0.w, 0.01F);
      assertEquals(Float.NaN, vector4_0.z, 0.01F);
      assertEquals(Float.NaN, vector4_0.y, 0.01F);
      assertEquals(Float.NaN, vector4_0.x, 0.01F);
      assertEquals(Float.NaN, vector4_1.z, 0.01F);
      assertEquals(Float.NaN, vector4_1.x, 0.01F);
      assertEquals(Float.NaN, vector4_1.y, 0.01F);
      assertEquals(Float.NaN, vector4_1.w, 0.01F);
      assertEquals(Float.NaN, vector4_2.y, 0.01F);
      assertEquals(Float.NaN, vector4_2.x, 0.01F);
      assertEquals(Float.NaN, vector4_2.z, 0.01F);
      assertEquals(Float.NaN, vector4_2.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      
      Vector4 vector4_1 = new Vector4(vector4_0);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(310.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertNotNull(vector4_1);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(310.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      
      Vector4 vector4_2 = vector4_0.multLocal(0.0F);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_2.equals((Object)vector4_1));
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_2.y(), 0.01F);
      assertEquals(0.0F, vector4_2.z(), 0.01F);
      assertEquals(0.0F, vector4_2.x(), 0.01F);
      assertEquals(0.0F, vector4_2.w(), 0.01F);
      assertNotNull(vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_2, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_2.z, 0.01F);
      assertEquals(0.0F, vector4_2.w, 0.01F);
      assertEquals(0.0F, vector4_2.x, 0.01F);
      assertEquals(0.0F, vector4_2.y, 0.01F);
      
      boolean boolean0 = vector4_1.epsilonEquals(vector4_0, 1.0F);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_2));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(310.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(310.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = new Vector4(0.0F, 0.0F, 1502.4216F, 0.0F);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(1502.4216F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertEquals(1502.4216F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 1502.4216F);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(1502.4216F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(1502.4216F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(3674.4F, 3.4028235E38F, 3674.4F, (-1804.814F));
      assertEquals(3674.4F, vector4_0.x(), 0.01F);
      assertEquals(3674.4F, vector4_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector4_0.y(), 0.01F);
      assertEquals((-1804.814F), vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(3674.4F, vector4_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector4_0.y, 0.01F);
      assertEquals((-1804.814F), vector4_0.w, 0.01F);
      assertEquals(3674.4F, vector4_0.z, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3674.4F;
      Vector4 vector4_1 = new Vector4(floatArray0);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(3674.4F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertArrayEquals(new float[] {3674.4F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(3674.4F, vector4_1.x, 0.01F);
      
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 950.9773F);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(9, floatArray0.length);
      assertEquals(3674.4F, vector4_0.x(), 0.01F);
      assertEquals(3674.4F, vector4_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector4_0.y(), 0.01F);
      assertEquals((-1804.814F), vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(3674.4F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {3674.4F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3674.4F, vector4_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector4_0.y, 0.01F);
      assertEquals((-1804.814F), vector4_0.w, 0.01F);
      assertEquals(3674.4F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(3674.4F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = new Vector4(vector4_0);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals((-1.0F), vector4_1.x(), 0.01F);
      assertEquals((-1.0F), vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals((-1.0F), vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      
      Vector4 vector4_2 = vector4_0.set(1167.6635F, 1.0F, 1.0F, (-1877.65F));
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_2.equals((Object)vector4_1));
      assertEquals(1.0F, vector4_0.z(), 0.01F);
      assertEquals((-1877.65F), vector4_0.w(), 0.01F);
      assertEquals(1167.6635F, vector4_0.x(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals((-1877.65F), vector4_2.w(), 0.01F);
      assertEquals(1.0F, vector4_2.z(), 0.01F);
      assertEquals(1.0F, vector4_2.y(), 0.01F);
      assertEquals(1167.6635F, vector4_2.x(), 0.01F);
      assertNotNull(vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_2, vector4_1);
      assertSame(vector4_2, vector4_0);
      assertEquals((-1877.65F), vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(1.0F, vector4_0.z, 0.01F);
      assertEquals(1167.6635F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_2.z, 0.01F);
      assertEquals(1167.6635F, vector4_2.x, 0.01F);
      assertEquals(1.0F, vector4_2.y, 0.01F);
      assertEquals((-1877.65F), vector4_2.w, 0.01F);
      
      boolean boolean0 = vector4_1.epsilonEquals(vector4_0, 2.7182817F);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertFalse(vector4_1.equals((Object)vector4_2));
      assertEquals(1.0F, vector4_0.z(), 0.01F);
      assertEquals((-1877.65F), vector4_0.w(), 0.01F);
      assertEquals(1167.6635F, vector4_0.x(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals((-1.0F), vector4_1.x(), 0.01F);
      assertEquals((-1.0F), vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertNotSame(vector4_1, vector4_2);
      assertFalse(boolean0);
      assertEquals((-1877.65F), vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(1.0F, vector4_0.z, 0.01F);
      assertEquals(1167.6635F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals((-1.0F), vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(1167.6635F, 1.0F, 1.0F, (-1877.65F));
      assertEquals(1.0F, vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1167.6635F, vector4_0.x(), 0.01F);
      assertEquals((-1877.65F), vector4_0.w(), 0.01F);
      assertEquals(1167.6635F, vector4_1.x(), 0.01F);
      assertEquals((-1877.65F), vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals((-1877.65F), vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_0.z, 0.01F);
      assertEquals(1167.6635F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.z, 0.01F);
      assertEquals((-1877.65F), vector4_1.w, 0.01F);
      assertEquals(1167.6635F, vector4_1.x, 0.01F);
      
      boolean boolean0 = vector4_0.epsilonEquals(vector4_0, 2.7182817F);
      assertEquals(1.0F, vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1167.6635F, vector4_0.x(), 0.01F);
      assertEquals((-1877.65F), vector4_0.w(), 0.01F);
      assertSame(vector4_0, vector4_1);
      assertTrue(boolean0);
      assertEquals((-1877.65F), vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_0.z, 0.01F);
      assertEquals(1167.6635F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[3];
      Vector4 vector4_1 = vector4_0.set((-70.6825F), (-5195.0F), 0.0F, (-4013.6008F));
      assertEquals((-4013.6008F), vector4_0.w(), 0.01F);
      assertEquals((-5195.0F), vector4_0.y(), 0.01F);
      assertEquals((-70.6825F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-5195.0F), vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals((-4013.6008F), vector4_1.w(), 0.01F);
      assertEquals((-70.6825F), vector4_1.x(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-4013.6008F), vector4_0.w, 0.01F);
      assertEquals((-70.6825F), vector4_0.x, 0.01F);
      assertEquals((-5195.0F), vector4_0.y, 0.01F);
      assertEquals((-4013.6008F), vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals((-70.6825F), vector4_1.x, 0.01F);
      assertEquals((-5195.0F), vector4_1.y, 0.01F);
      
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(3, floatArray0.length);
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(3, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.position());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(3, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=3 cap=3]", floatBuffer0.toString());
      assertEquals(3, floatBuffer0.remaining());
      assertTrue(floatBuffer0.hasArray());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        vector4_0.get(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      
      float float0 = vector4_0.z();
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = new Vector4(0.0F, 0.0F, 3795.7F, (-3.1415927F));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(3795.7F, vector4_1.z(), 0.01F);
      assertEquals((-3.1415927F), vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertEquals(3795.7F, vector4_1.z, 0.01F);
      assertEquals((-3.1415927F), vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      
      Vector4 vector4_2 = vector4_0.set((IVector4) vector4_1);
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertTrue(vector4_2.equals((Object)vector4_1));
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(3795.7F, vector4_0.z(), 0.01F);
      assertEquals((-3.1415927F), vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(3795.7F, vector4_1.z(), 0.01F);
      assertEquals((-3.1415927F), vector4_1.w(), 0.01F);
      assertEquals(3795.7F, vector4_2.z(), 0.01F);
      assertEquals((-3.1415927F), vector4_2.w(), 0.01F);
      assertEquals(0.0F, vector4_2.y(), 0.01F);
      assertEquals(0.0F, vector4_2.x(), 0.01F);
      assertNotNull(vector4_2);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertNotSame(vector4_1, vector4_2);
      assertSame(vector4_2, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(3795.7F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-3.1415927F), vector4_0.w, 0.01F);
      assertEquals(3795.7F, vector4_1.z, 0.01F);
      assertEquals((-3.1415927F), vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals((-3.1415927F), vector4_2.w, 0.01F);
      assertEquals(0.0F, vector4_2.y, 0.01F);
      assertEquals(0.0F, vector4_2.x, 0.01F);
      assertEquals(3795.7F, vector4_2.z, 0.01F);
      
      float float0 = vector4_0.z();
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(3795.7F, vector4_0.z(), 0.01F);
      assertEquals((-3.1415927F), vector4_0.w(), 0.01F);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertEquals(3795.7F, float0, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(3795.7F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-3.1415927F), vector4_0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(-0.0F, (-2844.482F), (-2844.482F), (-2844.482F));
      assertEquals((-2844.482F), vector4_0.y(), 0.01F);
      assertEquals((-2844.482F), vector4_0.z(), 0.01F);
      assertEquals(-0.0F, vector4_0.x(), 0.01F);
      assertEquals((-2844.482F), vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-2844.482F), vector4_0.w, 0.01F);
      assertEquals((-2844.482F), vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_0.x, 0.01F);
      assertEquals((-2844.482F), vector4_0.z, 0.01F);
      
      float float0 = vector4_0.z();
      assertEquals((-2844.482F), vector4_0.y(), 0.01F);
      assertEquals((-2844.482F), vector4_0.z(), 0.01F);
      assertEquals(-0.0F, vector4_0.x(), 0.01F);
      assertEquals((-2844.482F), vector4_0.w(), 0.01F);
      assertEquals((-2844.482F), float0, 0.01F);
      assertEquals((-2844.482F), vector4_0.w, 0.01F);
      assertEquals((-2844.482F), vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_0.x, 0.01F);
      assertEquals((-2844.482F), vector4_0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.negateLocal();
      assertEquals(-0.0F, vector4_0.z(), 0.01F);
      assertEquals(-0.0F, vector4_0.w(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_0.w, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      
      float float0 = vector4_0.y();
      assertEquals(-0.0F, vector4_0.z(), 0.01F);
      assertEquals(-0.0F, vector4_0.w(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertSame(vector4_0, vector4_1);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-166.55305F);
      Vector4 vector4_1 = vector4_0.set(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals((-166.55305F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals((-166.55305F), vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, (-166.55305F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-166.55305F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals((-166.55305F), vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      
      float float0 = vector4_1.y();
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals((-166.55305F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals((-166.55305F), vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals((-166.55305F), float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-166.55305F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-166.55305F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals((-166.55305F), vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[9];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(9, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.position());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(9, floatBuffer0.remaining());
      assertEquals(9, floatBuffer0.capacity());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=9 cap=9]", floatBuffer0.toString());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Vector4 vector4_0 = new Vector4(floatBuffer0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=9 cap=9]", floatBuffer0.toString());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(9, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(5, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(9, floatBuffer0.capacity());
      assertEquals(4, floatBuffer0.position());
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float float0 = vector4_0.x();
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=9 cap=9]", floatBuffer0.toString());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(9, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(5, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(9, floatBuffer0.capacity());
      assertEquals(4, floatBuffer0.position());
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.abs();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      
      Vector4 vector4_2 = vector4_1.negateLocal();
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertTrue(vector4_2.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.x(), 0.01F);
      assertEquals((-1.0F), vector4_1.y(), 0.01F);
      assertEquals(-0.0F, vector4_2.w(), 0.01F);
      assertEquals((-1.0F), vector4_2.y(), 0.01F);
      assertEquals(-0.0F, vector4_2.z(), 0.01F);
      assertEquals((-1.0F), vector4_2.x(), 0.01F);
      assertNotNull(vector4_2);
      assertNotSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertNotSame(vector4_2, vector4_0);
      assertSame(vector4_2, vector4_1);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
      assertEquals((-1.0F), vector4_1.x, 0.01F);
      assertEquals((-1.0F), vector4_1.y, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(-0.0F, vector4_2.z, 0.01F);
      assertEquals((-1.0F), vector4_2.y, 0.01F);
      assertEquals((-1.0F), vector4_2.x, 0.01F);
      assertEquals(-0.0F, vector4_2.w, 0.01F);
      
      float float0 = vector4_2.x();
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertTrue(vector4_0.equals((Object)vector4_2));
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertTrue(vector4_2.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.x(), 0.01F);
      assertEquals((-1.0F), vector4_1.y(), 0.01F);
      assertEquals(-0.0F, vector4_2.w(), 0.01F);
      assertEquals((-1.0F), vector4_2.y(), 0.01F);
      assertEquals(-0.0F, vector4_2.z(), 0.01F);
      assertEquals((-1.0F), vector4_2.x(), 0.01F);
      assertNotSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertNotSame(vector4_2, vector4_0);
      assertSame(vector4_2, vector4_1);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
      assertEquals((-1.0F), vector4_1.x, 0.01F);
      assertEquals((-1.0F), vector4_1.y, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(-0.0F, vector4_2.z, 0.01F);
      assertEquals((-1.0F), vector4_2.y, 0.01F);
      assertEquals((-1.0F), vector4_2.x, 0.01F);
      assertEquals(-0.0F, vector4_2.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float float0 = vector4_0.w();
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      
      float float0 = vector4_0.w();
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(310.0F, float0, 0.01F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      
      Vector4 vector4_1 = new Vector4(1.0F, 1.0F, 2407.1F, (-1.0F));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(2407.1F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertEquals((-1.0F), vector4_1.w, 0.01F);
      assertEquals(2407.1F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      
      Vector4 vector4_2 = vector4_0.set((IVector4) vector4_1);
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertTrue(vector4_2.equals((Object)vector4_1));
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals(2407.1F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(2407.1F, vector4_1.z(), 0.01F);
      assertEquals(1.0F, vector4_2.y(), 0.01F);
      assertEquals(1.0F, vector4_2.x(), 0.01F);
      assertEquals((-1.0F), vector4_2.w(), 0.01F);
      assertEquals(2407.1F, vector4_2.z(), 0.01F);
      assertNotNull(vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertSame(vector4_2, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals(2407.1F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_1.w, 0.01F);
      assertEquals(2407.1F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals(1.0F, vector4_2.y, 0.01F);
      assertEquals(1.0F, vector4_2.x, 0.01F);
      assertEquals(2407.1F, vector4_2.z, 0.01F);
      assertEquals((-1.0F), vector4_2.w, 0.01F);
      
      float float0 = vector4_0.w();
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals(2407.1F, vector4_0.z(), 0.01F);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals(2407.1F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = 4.0F;
      Vector4 vector4_1 = vector4_0.set(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(4.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(4.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 4.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(4.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(4.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[4];
      floatArray0[2] = (-1.0F);
      Vector4 vector4_1 = vector4_0.set(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals((-1.0F), vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      Vector4 vector4_1 = vector4_0.set(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      Vector4 vector4_1 = vector4_0.set(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(-0.0F, (-2844.482F), (-2844.482F), (-2844.482F));
      assertEquals((-2844.482F), vector4_0.w(), 0.01F);
      assertEquals((-2844.482F), vector4_0.z(), 0.01F);
      assertEquals(-0.0F, vector4_0.x(), 0.01F);
      assertEquals((-2844.482F), vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(-0.0F, vector4_0.x, 0.01F);
      assertEquals((-2844.482F), vector4_0.y, 0.01F);
      assertEquals((-2844.482F), vector4_0.z, 0.01F);
      assertEquals((-2844.482F), vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2844.482F);
      Vector4 vector4_1 = vector4_0.set(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-2844.482F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals((-2844.482F), vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {(-2844.482F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-2844.482F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals((-2844.482F), vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[3] = 1.0F;
      Vector4 vector4_1 = vector4_0.set(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(1.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(1.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set((IVector4) vector4_0);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.x(), 0.01F);
      assertEquals((-1.0F), vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals((-1.0F), vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set((IVector4) vector4_0);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(310.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(310.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[2] = 1.0F;
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(floatBuffer0.isReadOnly());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(9, floatBuffer0.remaining());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(0, floatBuffer0.position());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=9 cap=9]", floatBuffer0.toString());
      assertEquals(9, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasRemaining());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(9, floatBuffer0.capacity());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(floatBuffer0);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=9 cap=9]", floatBuffer0.toString());
      assertEquals(5, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(4, floatBuffer0.position());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(9, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasRemaining());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(9, floatBuffer0.capacity());
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (-2858.7798F);
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(7, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertTrue(floatBuffer0.hasArray());
      assertFalse(floatBuffer0.isDirect());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=7 cap=7]", floatBuffer0.toString());
      assertEquals(7, floatBuffer0.remaining());
      assertEquals(7, floatBuffer0.capacity());
      assertEquals(0, floatBuffer0.position());
      assertTrue(floatBuffer0.hasRemaining());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2858.7798F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(floatBuffer0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-2858.7798F), vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(4, floatBuffer0.position());
      assertEquals(7, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertTrue(floatBuffer0.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=7 cap=7]", floatBuffer0.toString());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(7, floatBuffer0.capacity());
      assertEquals(3, floatBuffer0.remaining());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals((-2858.7798F), vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2858.7798F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals((-2858.7798F), vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals((-2858.7798F), vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(1.0F, (-3934.62F), (-1688.5457F), (-3934.62F));
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals((-3934.62F), vector4_0.y(), 0.01F);
      assertEquals((-1688.5457F), vector4_0.z(), 0.01F);
      assertEquals((-3934.62F), vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1688.5457F), vector4_0.z, 0.01F);
      assertEquals((-3934.62F), vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals((-3934.62F), vector4_0.y, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatBuffer0.position());
      assertTrue(floatBuffer0.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=5 cap=5]", floatBuffer0.toString());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(5, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(5, floatBuffer0.capacity());
      assertEquals(5, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasRemaining());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(floatBuffer0);
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertTrue(floatBuffer0.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=5 cap=5]", floatBuffer0.toString());
      assertEquals(4, floatBuffer0.position());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(5, floatBuffer0.capacity());
      assertEquals(5, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(1, floatBuffer0.remaining());
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-1.0F);
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatBuffer0.remaining());
      assertEquals(9, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.position());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(9, floatBuffer0.limit());
      assertFalse(floatBuffer0.isDirect());
      assertTrue(floatBuffer0.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=9 cap=9]", floatBuffer0.toString());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(floatBuffer0);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(9, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(5, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=9 cap=9]", floatBuffer0.toString());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(9, floatBuffer0.limit());
      assertEquals(4, floatBuffer0.position());
      assertFalse(floatBuffer0.isDirect());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals((-1.0F), vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1678.7018F;
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(floatBuffer0.isDirect());
      assertEquals(6, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(6, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", floatBuffer0.toString());
      assertEquals(0, floatBuffer0.position());
      assertEquals(6, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {1678.7018F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(floatBuffer0);
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(1678.7018F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertFalse(floatBuffer0.isDirect());
      assertEquals(6, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(2, floatBuffer0.remaining());
      assertEquals(6, floatBuffer0.limit());
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=6 cap=6]", floatBuffer0.toString());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(4, floatBuffer0.position());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(1678.7018F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {1678.7018F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(1678.7018F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(1678.7018F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(1.0F, (-3934.62F), (-1688.5457F), (-3934.62F));
      assertEquals((-1688.5457F), vector4_0.z(), 0.01F);
      assertEquals((-3934.62F), vector4_0.w(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals((-3934.62F), vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-3934.62F), vector4_0.y, 0.01F);
      assertEquals((-1688.5457F), vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals((-3934.62F), vector4_0.w, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1688.5457F);
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(5, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=5 cap=5]", floatBuffer0.toString());
      assertEquals(5, floatBuffer0.remaining());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.position());
      assertTrue(floatBuffer0.hasArray());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(5, floatBuffer0.capacity());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {(-1688.5457F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(floatBuffer0);
      assertEquals(5, floatArray0.length);
      assertEquals((-1688.5457F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(1, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(5, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=5 cap=5]", floatBuffer0.toString());
      assertTrue(floatBuffer0.hasArray());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(5, floatBuffer0.capacity());
      assertEquals(4, floatBuffer0.position());
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals((-1688.5457F), vector4_1.x(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {(-1688.5457F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1688.5457F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals((-1688.5457F), vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[3] = 1883.0F;
      Vector4 vector4_0 = new Vector4(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(1883.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1883.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1883.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(6, floatBuffer0.remaining());
      assertEquals(6, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", floatBuffer0.toString());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0, floatBuffer0.position());
      assertFalse(floatBuffer0.isDirect());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1883.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(floatBuffer0);
      assertEquals(6, floatArray0.length);
      assertEquals(1883.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(6, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(6, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(2, floatBuffer0.remaining());
      assertTrue(floatBuffer0.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=6 cap=6]", floatBuffer0.toString());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(4, floatBuffer0.position());
      assertEquals(1883.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1883.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1883.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(1883.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(1.0F, (-3934.62F), (-1688.5457F), (-3934.62F));
      assertEquals((-3934.62F), vector4_0.w(), 0.01F);
      assertEquals((-1688.5457F), vector4_0.z(), 0.01F);
      assertEquals((-3934.62F), vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1688.5457F), vector4_0.z, 0.01F);
      assertEquals((-3934.62F), vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals((-3934.62F), vector4_0.y, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[3] = (-1.0F);
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(5, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.position());
      assertTrue(floatBuffer0.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=5 cap=5]", floatBuffer0.toString());
      assertEquals(5, floatBuffer0.limit());
      assertNotNull(floatBuffer0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(floatBuffer0);
      assertEquals(5, floatArray0.length);
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertFalse(floatBuffer0.isDirect());
      assertEquals(5, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals("java.nio.HeapFloatBuffer[pos=4 lim=5 cap=5]", floatBuffer0.toString());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(4, floatBuffer0.position());
      assertEquals(1, floatBuffer0.remaining());
      assertEquals(5, floatBuffer0.limit());
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals((-1.0F), vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set(0.0F, 0.0F, 0.0F, 2460.759F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(2460.759F, vector4_0.w(), 0.01F);
      assertEquals(2460.759F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(2460.759F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(2460.759F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.set((-36.320198F), 0.0F, (-36.320198F), 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-36.320198F), vector4_0.x(), 0.01F);
      assertEquals((-36.320198F), vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals((-36.320198F), vector4_1.x(), 0.01F);
      assertEquals((-36.320198F), vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-36.320198F), vector4_0.z, 0.01F);
      assertEquals((-36.320198F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-36.320198F), vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals((-36.320198F), vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, (-1.0F));
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.negateLocal();
      assertEquals(1.0F, vector4_0.w(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(-0.0F, vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(1.0F, vector4_0.w, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals(1.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), 1.0F, (-1.0F), 1.0F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(1.0F, vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      
      Vector4 vector4_1 = vector4_0.negate(vector4_0);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(1.0F, vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_1.w, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals((-1.0F), vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = new Vector4(10.0F, 33.7F, 10.0F, 0.0F);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(10.0F, vector4_1.x(), 0.01F);
      assertEquals(10.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(33.7F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(33.7F, vector4_1.y, 0.01F);
      assertEquals(10.0F, vector4_1.z, 0.01F);
      assertEquals(10.0F, vector4_1.x, 0.01F);
      
      Vector4 vector4_2 = vector4_1.negate(vector4_0);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertFalse(vector4_2.equals((Object)vector4_1));
      assertEquals(-0.0F, vector4_0.w(), 0.01F);
      assertEquals((-33.7F), vector4_0.y(), 0.01F);
      assertEquals((-10.0F), vector4_0.z(), 0.01F);
      assertEquals((-10.0F), vector4_0.x(), 0.01F);
      assertEquals(10.0F, vector4_1.x(), 0.01F);
      assertEquals(10.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(33.7F, vector4_1.y(), 0.01F);
      assertEquals((-10.0F), vector4_2.z(), 0.01F);
      assertEquals((-10.0F), vector4_2.x(), 0.01F);
      assertEquals((-33.7F), vector4_2.y(), 0.01F);
      assertEquals(-0.0F, vector4_2.w(), 0.01F);
      assertNotNull(vector4_2);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertSame(vector4_2, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      assertEquals(-0.0F, vector4_0.w, 0.01F);
      assertEquals((-10.0F), vector4_0.z, 0.01F);
      assertEquals((-10.0F), vector4_0.x, 0.01F);
      assertEquals((-33.7F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(33.7F, vector4_1.y, 0.01F);
      assertEquals(10.0F, vector4_1.z, 0.01F);
      assertEquals(10.0F, vector4_1.x, 0.01F);
      assertEquals(-0.0F, vector4_2.w, 0.01F);
      assertEquals((-10.0F), vector4_2.z, 0.01F);
      assertEquals((-33.7F), vector4_2.y, 0.01F);
      assertEquals((-10.0F), vector4_2.x, 0.01F);
      
      Vector4 vector4_3 = vector4_1.set((IVector4) vector4_0);
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertTrue(vector4_1.equals((Object)vector4_2));
      assertTrue(vector4_3.equals((Object)vector4_0));
      assertTrue(vector4_3.equals((Object)vector4_2));
      assertEquals(-0.0F, vector4_0.w(), 0.01F);
      assertEquals((-33.7F), vector4_0.y(), 0.01F);
      assertEquals((-10.0F), vector4_0.z(), 0.01F);
      assertEquals((-10.0F), vector4_0.x(), 0.01F);
      assertEquals((-10.0F), vector4_1.x(), 0.01F);
      assertEquals((-10.0F), vector4_1.z(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertEquals((-33.7F), vector4_1.y(), 0.01F);
      assertEquals(-0.0F, vector4_3.w(), 0.01F);
      assertEquals((-10.0F), vector4_3.z(), 0.01F);
      assertEquals((-10.0F), vector4_3.x(), 0.01F);
      assertEquals((-33.7F), vector4_3.y(), 0.01F);
      assertNotNull(vector4_3);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_3);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_2);
      assertSame(vector4_1, vector4_3);
      assertNotSame(vector4_1, vector4_0);
      assertNotSame(vector4_3, vector4_2);
      assertSame(vector4_3, vector4_1);
      assertNotSame(vector4_3, vector4_0);
      assertEquals(-0.0F, vector4_0.w, 0.01F);
      assertEquals((-10.0F), vector4_0.z, 0.01F);
      assertEquals((-10.0F), vector4_0.x, 0.01F);
      assertEquals((-33.7F), vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
      assertEquals((-33.7F), vector4_1.y, 0.01F);
      assertEquals((-10.0F), vector4_1.z, 0.01F);
      assertEquals((-10.0F), vector4_1.x, 0.01F);
      assertEquals(-0.0F, vector4_3.w, 0.01F);
      assertEquals((-33.7F), vector4_3.y, 0.01F);
      assertEquals((-10.0F), vector4_3.x, 0.01F);
      assertEquals((-10.0F), vector4_3.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.negate(vector4_0);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals(-0.0F, vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[3] = (-1.0F);
      Vector4 vector4_1 = vector4_0.set(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals((-1.0F), vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      
      Vector4 vector4_2 = vector4_0.negate(vector4_1);
      assertEquals(7, floatArray0.length);
      assertEquals(-0.0F, vector4_0.y(), 0.01F);
      assertEquals(-0.0F, vector4_0.z(), 0.01F);
      assertEquals(-0.0F, vector4_0.x(), 0.01F);
      assertEquals(1.0F, vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_1.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals(-0.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_2.w(), 0.01F);
      assertEquals(-0.0F, vector4_2.z(), 0.01F);
      assertEquals(-0.0F, vector4_2.x(), 0.01F);
      assertEquals(-0.0F, vector4_2.y(), 0.01F);
      assertNotNull(vector4_2);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_2);
      assertSame(vector4_1, vector4_0);
      assertSame(vector4_2, vector4_0);
      assertSame(vector4_2, vector4_1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.w, 0.01F);
      assertEquals(-0.0F, vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_0.y, 0.01F);
      assertEquals(1.0F, vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.y, 0.01F);
      assertEquals(-0.0F, vector4_1.x, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(-0.0F, vector4_2.x, 0.01F);
      assertEquals(-0.0F, vector4_2.y, 0.01F);
      assertEquals(-0.0F, vector4_2.z, 0.01F);
      assertEquals(1.0F, vector4_2.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(1.0F, 1.0F, 2407.1F, (-1.0F));
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals(2407.1F, vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(2407.1F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.negate();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals(2407.1F, vector4_0.z(), 0.01F);
      assertEquals((-2407.1F), vector4_1.z(), 0.01F);
      assertEquals((-1.0F), vector4_1.y(), 0.01F);
      assertEquals((-1.0F), vector4_1.x(), 0.01F);
      assertEquals(1.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(2407.1F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals((-2407.1F), vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.w, 0.01F);
      assertEquals((-1.0F), vector4_1.x, 0.01F);
      assertEquals((-1.0F), vector4_1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.negateLocal();
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals(-0.0F, vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_0.w, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      
      Vector4 vector4_2 = vector4_1.negate();
      assertFalse(vector4_2.equals((Object)vector4_1));
      assertFalse(vector4_2.equals((Object)vector4_0));
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals(-0.0F, vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertEquals((-1.0F), vector4_2.x(), 0.01F);
      assertEquals((-1.0F), vector4_2.y(), 0.01F);
      assertEquals(0.0F, vector4_2.z(), 0.01F);
      assertEquals(0.0F, vector4_2.w(), 0.01F);
      assertNotNull(vector4_2);
      assertSame(vector4_0, vector4_1);
      assertNotSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_2);
      assertSame(vector4_1, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      assertNotSame(vector4_2, vector4_0);
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_0.w, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_2.w, 0.01F);
      assertEquals((-1.0F), vector4_2.y, 0.01F);
      assertEquals(0.0F, vector4_2.z, 0.01F);
      assertEquals((-1.0F), vector4_2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      Vector4 vector4_1 = vector4_0.negate();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.negate();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals((-1.0F), vector4_0.w(), 0.01F);
      assertEquals(1.0F, vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(1.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals(1.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      vector4_0.z = 1681.9F;
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(1681.9F, vector4_0.z(), 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertNotNull(matrix4_0);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      
      Vector4 vector4_1 = vector4_0.multLocal((IMatrix4) matrix4_0);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(1681.9F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1681.9F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(1681.9F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(1681.9F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertNotNull(matrix4_0);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      
      Vector4 vector4_0 = new Vector4(310.0F, 1.0F, 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(310.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(310.0F, vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.multLocal((IMatrix4) matrix4_0);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(310.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(310.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(310.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(310.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertNotNull(matrix4_0);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      
      Vector4 vector4_1 = vector4_0.multLocal((IMatrix4) matrix4_0);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(310.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(310.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = 875.15015F;
      Vector4 vector4_0 = new Vector4(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(875.15015F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 875.15015F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(875.15015F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.multLocal(1995.101F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(1746012.9F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(1746012.9F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 875.15015F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(1746012.9F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(1746012.9F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-507.0F), 0.0F, 1.0F, 0.0F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals((-507.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(1.0F, vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(1.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-507.0F), vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.multLocal((-987.2F));
      assertEquals(-0.0F, vector4_0.y(), 0.01F);
      assertEquals((-987.2F), vector4_0.z(), 0.01F);
      assertEquals(-0.0F, vector4_0.w(), 0.01F);
      assertEquals(500510.4F, vector4_0.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.y(), 0.01F);
      assertEquals(500510.4F, vector4_1.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertEquals((-987.2F), vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(-0.0F, vector4_0.y, 0.01F);
      assertEquals(500510.4F, vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_0.w, 0.01F);
      assertEquals((-987.2F), vector4_0.z, 0.01F);
      assertEquals(-0.0F, vector4_1.y, 0.01F);
      assertEquals((-987.2F), vector4_1.z, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
      assertEquals(500510.4F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.multLocal(1943.6879F);
      assertEquals((-1943.6879F), vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1943.6879F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals((-1943.6879F), vector4_1.y(), 0.01F);
      assertEquals((-1943.6879F), vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals((-1943.6879F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1943.6879F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1943.6879F), vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals((-1943.6879F), vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.multLocal((-3715.0F));
      assertEquals(-0.0F, vector4_0.w(), 0.01F);
      assertEquals(3715.0F, vector4_0.y(), 0.01F);
      assertEquals(3715.0F, vector4_0.x(), 0.01F);
      assertEquals(-0.0F, vector4_0.z(), 0.01F);
      assertEquals(3715.0F, vector4_1.y(), 0.01F);
      assertEquals(3715.0F, vector4_1.x(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertEquals(-0.0F, vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(-0.0F, vector4_0.w, 0.01F);
      assertEquals(3715.0F, vector4_0.x, 0.01F);
      assertEquals(3715.0F, vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals(3715.0F, vector4_1.x, 0.01F);
      assertEquals(3715.0F, vector4_1.y, 0.01F);
      assertEquals(-0.0F, vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      Vector4 vector4_1 = vector4_0.multLocal((-3502.0F));
      assertEquals(-0.0F, vector4_0.z(), 0.01F);
      assertEquals((-1085620.0F), vector4_0.w(), 0.01F);
      assertEquals(-0.0F, vector4_0.x(), 0.01F);
      assertEquals(-0.0F, vector4_0.y(), 0.01F);
      assertEquals(-0.0F, vector4_1.y(), 0.01F);
      assertEquals(-0.0F, vector4_1.x(), 0.01F);
      assertEquals((-1085620.0F), vector4_1.w(), 0.01F);
      assertEquals(-0.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(-0.0F, vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_0.y, 0.01F);
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals((-1085620.0F), vector4_0.w, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(-0.0F, vector4_1.y, 0.01F);
      assertEquals((-1085620.0F), vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[2] = (-255.9129F);
      Vector4 vector4_0 = new Vector4(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals((-255.9129F), vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertNotNull(vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-255.9129F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-255.9129F), vector4_0.z, 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4((-1755.0F), (-3.4028235E38F), 0.0F, (-1755.0F), (-3750.502F), (-2784.0F), 387.877F, (-892.9F), 1.0F, 0.0F, (-1201.5028F), 1.0F, (-1.0F), 0.0F, 2.0F, (-1487.3234F));
      assertEquals((-3.4028235E38F), matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(1.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-1487.3234F), matrix4_0.m33(), 0.01F);
      assertEquals((-892.9F), matrix4_0.m31(), 0.01F);
      assertEquals(387.877F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(2.0F, matrix4_0.m23(), 0.01F);
      assertEquals((-1201.5028F), matrix4_0.m22(), 0.01F);
      assertEquals((-3750.502F), matrix4_0.m01(), 0.01F);
      assertEquals((-1755.0F), matrix4_0.m30(), 0.01F);
      assertEquals((-2784.0F), matrix4_0.m11(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m03(), 0.01F);
      assertEquals((-1755.0F), matrix4_0.m00(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertNotNull(matrix4_0);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals((-1.0F), matrix4_0.m03, 0.01F);
      assertEquals(387.877F, matrix4_0.m21, 0.01F);
      assertEquals((-1487.3234F), matrix4_0.m33, 0.01F);
      assertEquals((-892.9F), matrix4_0.m31, 0.01F);
      assertEquals((-1755.0F), matrix4_0.m00, 0.01F);
      assertEquals((-2784.0F), matrix4_0.m11, 0.01F);
      assertEquals((-1201.5028F), matrix4_0.m22, 0.01F);
      assertEquals((-3750.502F), matrix4_0.m01, 0.01F);
      assertEquals((-1755.0F), matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(2.0F, matrix4_0.m23, 0.01F);
      assertEquals((-3.4028235E38F), matrix4_0.m10, 0.01F);
      assertEquals(1.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0, vector4_0);
      assertEquals(7, floatArray0.length);
      assertEquals(307480.06F, vector4_0.z(), 0.01F);
      assertEquals((-255.9129F), vector4_0.x(), 0.01F);
      assertEquals((-255.9129F), vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals((-3.4028235E38F), matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(1.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-1487.3234F), matrix4_0.m33(), 0.01F);
      assertEquals((-892.9F), matrix4_0.m31(), 0.01F);
      assertEquals(387.877F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(2.0F, matrix4_0.m23(), 0.01F);
      assertEquals((-1201.5028F), matrix4_0.m22(), 0.01F);
      assertEquals((-3750.502F), matrix4_0.m01(), 0.01F);
      assertEquals((-1755.0F), matrix4_0.m30(), 0.01F);
      assertEquals((-2784.0F), matrix4_0.m11(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m03(), 0.01F);
      assertEquals((-1755.0F), matrix4_0.m00(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(307480.06F, vector4_1.z(), 0.01F);
      assertEquals((-255.9129F), vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals((-255.9129F), vector4_1.w(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-255.9129F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-255.9129F), vector4_0.x, 0.01F);
      assertEquals(307480.06F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-255.9129F), vector4_0.w, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals((-1.0F), matrix4_0.m03, 0.01F);
      assertEquals(387.877F, matrix4_0.m21, 0.01F);
      assertEquals((-1487.3234F), matrix4_0.m33, 0.01F);
      assertEquals((-892.9F), matrix4_0.m31, 0.01F);
      assertEquals((-1755.0F), matrix4_0.m00, 0.01F);
      assertEquals((-2784.0F), matrix4_0.m11, 0.01F);
      assertEquals((-1201.5028F), matrix4_0.m22, 0.01F);
      assertEquals((-3750.502F), matrix4_0.m01, 0.01F);
      assertEquals((-1755.0F), matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(2.0F, matrix4_0.m23, 0.01F);
      assertEquals((-3.4028235E38F), matrix4_0.m10, 0.01F);
      assertEquals(1.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals((-255.9129F), vector4_1.x, 0.01F);
      assertEquals(307480.06F, vector4_1.z, 0.01F);
      assertEquals((-255.9129F), vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4(0.0F, (-2699.1694F), 0.0F, 0.0F, 1678.7018F, 0.0F, 0.0F, (-1.0F), (-2376.6418F), (-1.0F), 0.0F, 1739.932F, 0.0F, 0.0F, (-2.0F), 1739.932F);
      assertEquals(1739.932F, matrix4_0.m33(), 0.01F);
      assertEquals(1739.932F, matrix4_0.m32(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m31(), 0.01F);
      assertEquals(1678.7018F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(0.0F, matrix4_0.m22(), 0.01F);
      assertEquals(0.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals((-2699.1694F), matrix4_0.m10(), 0.01F);
      assertEquals((-2376.6418F), matrix4_0.m02(), 0.01F);
      assertNotNull(matrix4_0);
      assertEquals((-2699.1694F), matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals(0.0F, matrix4_0.m11, 0.01F);
      assertEquals(0.0F, matrix4_0.m22, 0.01F);
      assertEquals((-2376.6418F), matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals((-1.0F), matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1739.932F, matrix4_0.m33, 0.01F);
      assertEquals((-1.0F), matrix4_0.m12, 0.01F);
      assertEquals((-2.0F), matrix4_0.m23, 0.01F);
      assertEquals(1739.932F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(1678.7018F, matrix4_0.m01, 0.01F);
      
      Vector4 vector4_1 = vector4_0.mult(0.0F, vector4_0);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      
      vector4_1.z = 2076.2083F;
      assertEquals(2076.2083F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(2076.2083F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      
      Vector4 vector4_2 = vector4_0.mult((IMatrix4) matrix4_0, vector4_0);
      assertEquals(3612461.2F, vector4_0.w(), 0.01F);
      assertEquals((-2076.2083F), vector4_0.y(), 0.01F);
      assertEquals((-4934403.5F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(1739.932F, matrix4_0.m33(), 0.01F);
      assertEquals(1739.932F, matrix4_0.m32(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m31(), 0.01F);
      assertEquals(1678.7018F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m12(), 0.01F);
      assertEquals((-2.0F), matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(0.0F, matrix4_0.m22(), 0.01F);
      assertEquals(0.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals((-2699.1694F), matrix4_0.m10(), 0.01F);
      assertEquals((-2376.6418F), matrix4_0.m02(), 0.01F);
      assertEquals(3612461.2F, vector4_2.w(), 0.01F);
      assertEquals((-2076.2083F), vector4_2.y(), 0.01F);
      assertEquals(0.0F, vector4_2.z(), 0.01F);
      assertEquals((-4934403.5F), vector4_2.x(), 0.01F);
      assertNotNull(vector4_2);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_2, vector4_1);
      assertSame(vector4_2, vector4_0);
      assertEquals((-2076.2083F), vector4_0.y, 0.01F);
      assertEquals((-4934403.5F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(3612461.2F, vector4_0.w, 0.01F);
      assertEquals((-2699.1694F), matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals(0.0F, matrix4_0.m11, 0.01F);
      assertEquals(0.0F, matrix4_0.m22, 0.01F);
      assertEquals((-2376.6418F), matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals((-1.0F), matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1739.932F, matrix4_0.m33, 0.01F);
      assertEquals((-1.0F), matrix4_0.m12, 0.01F);
      assertEquals((-2.0F), matrix4_0.m23, 0.01F);
      assertEquals(1739.932F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(1678.7018F, matrix4_0.m01, 0.01F);
      assertEquals((-2076.2083F), vector4_2.y, 0.01F);
      assertEquals(3612461.2F, vector4_2.w, 0.01F);
      assertEquals((-4934403.5F), vector4_2.x, 0.01F);
      assertEquals(0.0F, vector4_2.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      
      Vector4 vector4_1 = vector4_0.abs();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertNotNull(matrix4_0);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      
      Vector4 vector4_2 = vector4_1.mult((IMatrix4) matrix4_0, vector4_0);
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertTrue(vector4_2.equals((Object)vector4_1));
      assertEquals(1.0F, vector4_0.y(), 0.01F);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(1.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(1.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, vector4_2.z(), 0.01F);
      assertEquals(1.0F, vector4_2.y(), 0.01F);
      assertEquals(1.0F, vector4_2.x(), 0.01F);
      assertEquals(0.0F, vector4_2.w(), 0.01F);
      assertNotNull(vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertSame(vector4_2, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(1.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(1.0F, vector4_0.y, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, vector4_2.z, 0.01F);
      assertEquals(0.0F, vector4_2.w, 0.01F);
      assertEquals(1.0F, vector4_2.x, 0.01F);
      assertEquals(1.0F, vector4_2.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertNotNull(matrix4_0);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0, vector4_0);
      assertEquals(310.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(310.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(310.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4(3622.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 1.0F, 629.4F, 2042.0F, (-1.0F), (-1.0F), 2042.0F, 0.0F, 0.0F, 2447.54F, 2300.0F, (-1.0F));
      assertEquals(2042.0F, matrix4_0.m31(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(2300.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(3622.0F, matrix4_0.m00(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(2042.0F, matrix4_0.m22(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m10(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m12(), 0.01F);
      assertEquals(2447.54F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(629.4F, matrix4_0.m21(), 0.01F);
      assertNotNull(matrix4_0);
      assertEquals((-1.0F), matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals((-1.0F), matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals((-1.0F), matrix4_0.m33, 0.01F);
      assertEquals((-1.0F), matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(3622.0F, matrix4_0.m00, 0.01F);
      assertEquals(2447.54F, matrix4_0.m13, 0.01F);
      assertEquals(2042.0F, matrix4_0.m22, 0.01F);
      assertEquals(629.4F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(2300.0F, matrix4_0.m23, 0.01F);
      assertEquals(2042.0F, matrix4_0.m31, 0.01F);
      
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0, vector4_0);
      assertEquals((-3622.0F), vector4_0.x(), 0.01F);
      assertEquals((-2042.0F), vector4_0.w(), 0.01F);
      assertEquals((-629.4F), vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals(2042.0F, matrix4_0.m31(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(2300.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(3622.0F, matrix4_0.m00(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(2042.0F, matrix4_0.m22(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m10(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m12(), 0.01F);
      assertEquals(2447.54F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(629.4F, matrix4_0.m21(), 0.01F);
      assertEquals((-3622.0F), vector4_1.x(), 0.01F);
      assertEquals((-2042.0F), vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals((-629.4F), vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      assertEquals((-3622.0F), vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-2042.0F), vector4_0.w, 0.01F);
      assertEquals((-629.4F), vector4_0.z, 0.01F);
      assertEquals((-1.0F), matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals((-1.0F), matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals((-1.0F), matrix4_0.m33, 0.01F);
      assertEquals((-1.0F), matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(3622.0F, matrix4_0.m00, 0.01F);
      assertEquals(2447.54F, matrix4_0.m13, 0.01F);
      assertEquals(2042.0F, matrix4_0.m22, 0.01F);
      assertEquals(629.4F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(2300.0F, matrix4_0.m23, 0.01F);
      assertEquals(2042.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals((-2042.0F), vector4_1.w, 0.01F);
      assertEquals((-629.4F), vector4_1.z, 0.01F);
      assertEquals((-3622.0F), vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertNotNull(matrix4_0);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (-1.0F);
      Vector4 vector4_0 = new Vector4(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertNotNull(vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y(), 0.01F);
      assertEquals((-1.0F), vector4_0.z(), 0.01F);
      assertEquals(0.0F, vector4_0.w(), 0.01F);
      assertEquals(0.0F, vector4_1.w(), 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertEquals((-1.0F), vector4_1.z(), 0.01F);
      assertNotNull(vector4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals((-1.0F), vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = 2634.4019F;
      Vector4 vector4_0 = new Vector4(floatArray0);
      Matrix4 matrix4_0 = new Matrix4(0.0F, (-4090.9106F), 0.0F, 0.0F, (-4090.9106F), (-883.14F), 0.0F, (-1725.8507F), 3.1415927F, (-1.5707964F), 0.0F, 1411.1227F, 1.0F, 1411.1227F, 0.0F, (-1725.8507F));
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      assertEquals((-4546584.5F), vector4_1.w, 0.01F);
      assertEquals((-1.0777103E7F), vector4_1.x, 0.01F);
      assertEquals((-2326545.8F), vector4_1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-935.7447F), (-935.7447F), 0.0F, (-935.7447F));
      Matrix4 matrix4_0 = new Matrix4((-935.7447F), 620.0F, (-807.22F), 1500.4F, (-807.22F), (-3244.0F), (-836.366F), 993.35F, 620.0F, (-3.4028235E38F), 3769.8857F, 0.0F, 620.0F, (-3244.0F), (-531.7F), (-1666.41F));
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      vector4_1.abs(vector4_0);
      vector4_0.negateLocal();
      assertEquals((-774178.9F), vector4_0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(620.0F, 620.0F, (-1.0F), 3.1415927F);
      Vector4 vector4_1 = vector4_0.negateLocal();
      vector4_0.mult(3.1415927F, vector4_1);
      assertEquals((-9.869605F), vector4_1.w, 0.01F);
      assertEquals(3.1415927F, vector4_0.z(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), 1.0F, 0.0F, (-2.0F));
      assertEquals((-2.0F), vector4_0.w, 0.01F);
      
      Vector4 vector4_1 = vector4_0.absLocal();
      vector4_1.mult(1.0F, vector4_0);
      assertEquals(1.0F, vector4_0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      vector4_0.mult(319.2523F, vector4_0);
      assertEquals((-319.2523F), vector4_0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = 875.15015F;
      Vector4 vector4_0 = new Vector4(floatArray0);
      Vector4 vector4_1 = vector4_0.mult(3.1415927F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(2749.3652F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(875.15015F, vector4_0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      Vector4 vector4_1 = vector4_0.set(1167.6635F, 1.0F, 1.0F, (-1877.65F));
      Vector4 vector4_2 = vector4_1.mult((-1877.65F));
      assertEquals(1.0F, vector4_0.z, 0.01F);
      assertEquals(3525569.5F, vector4_2.w(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      Vector4 vector4_1 = vector4_0.mult((-3195.0F));
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals((-990450.0F), vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = vector4_0.absLocal();
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      
      vector4_0.absLocal();
      float float0 = vector4_0.x();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      
      vector4_0.abs(vector4_0);
      assertEquals(1.0F, vector4_0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), 0.0F, (-1.0F), (-1.0F));
      Vector4 vector4_1 = vector4_0.abs();
      assertEquals(1.0F, vector4_1.w, 0.01F);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_1.y, 0.01F);
      assertEquals(1.0F, vector4_1.z, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      Vector4 vector4_1 = vector4_0.abs();
      Vector4 vector4_2 = vector4_1.mult(4331.692F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_2.z, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(4331.692F, vector4_2.x, 0.01F);
      assertEquals(4331.692F, vector4_2.y, 0.01F);
      assertEquals(0.0F, vector4_2.w, 0.01F);
      assertEquals(1.0F, vector4_1.x, 0.01F);
      assertEquals(0.0F, vector4_0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      Vector4 vector4_1 = vector4_0.abs();
      assertEquals(310.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertNotSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.set((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        vector4_0.set(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.set((IVector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.set((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.negate((Vector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.multLocal((IMatrix4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Matrix4 matrix4_0 = new Matrix4();
      // Undeclared exception!
      try { 
        vector4_0.mult((IMatrix4) matrix4_0, (Vector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.mult((IMatrix4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.mult(1238.7F, (Vector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.get((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.epsilonEquals((IVector4) null, 10720.639F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.abs((Vector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4((IVector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(0);
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4(floatBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), 0.0F, 0.0F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      
      float[] floatArray0 = new float[4];
      vector4_0.set(floatArray0);
      float float0 = vector4_0.y();
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      vector4_0.abs(vector4_0);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Matrix4 matrix4_0 = new Matrix4(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2699.1694F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2699.1694F), 0.0F, 1678.7018F);
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      Vector4 vector4_2 = vector4_0.mult(0.0F, vector4_1);
      assertTrue(vector4_1.equals((Object)vector4_0));
      
      vector4_2.z = 2076.2083F;
      vector4_1.equals(vector4_0);
      assertFalse(vector4_0.equals((Object)vector4_2));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = new Vector4(0.0F, 1.0F, 2368.8313F, 0.0F);
      boolean boolean0 = vector4_0.equals(vector4_1);
      assertEquals(0.0F, vector4_1.w, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4_1.x, 0.01F);
      assertEquals(1.0F, vector4_1.y, 0.01F);
      assertEquals(2368.8313F, vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Vector4 vector4_1 = new Vector4();
      boolean boolean0 = vector4_1.equals(vector4_0);
      assertEquals((-1.0F), vector4_0.w, 0.01F);
      assertEquals((-1.0F), vector4_0.x, 0.01F);
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      assertEquals((-1.0F), vector4_0.z, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Matrix4 matrix4_0 = new Matrix4(0.0F, 0.0F, 0.0F, 5359.134F, 0.0F, (-2699.1694F), 0.0F, 0.0F, 5359.134F, 0.0F, 0.0F, 5359.134F, 0.0F, (-2699.1694F), 0.0F, 1678.7018F);
      boolean boolean0 = vector4_0.equals(matrix4_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = new Vector4(0.0F, 0.0F, 0.0F, 1.0E-5F);
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 1.0E-5F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertEquals(0.0F, vector4_1.y(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4_1.z(), 0.01F);
      assertEquals(1.0E-5F, vector4_1.w(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = new Vector4(0.0F, 1477.0F, 0.0F, 1477.0F);
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 1477.0F);
      assertEquals(0.0F, vector4_1.z, 0.01F);
      assertEquals(1477.0F, vector4_1.w, 0.01F);
      assertEquals(0.0F, vector4_1.x(), 0.01F);
      assertFalse(boolean0);
      assertEquals(1477.0F, vector4_1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 314.60098F);
      boolean boolean0 = vector4_0.epsilonEquals(vector4_0, 0.0F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertFalse(boolean0);
      assertEquals(314.60098F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x(), 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      vector4_0.negateLocal();
      assertEquals(-0.0F, vector4_0.z, 0.01F);
      assertEquals((-310.0F), vector4_0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(3216);
      FloatBuffer floatBuffer1 = vector4_0.get(floatBuffer0);
      assertEquals(4, floatBuffer1.position());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Matrix4 matrix4_0 = new Matrix4(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2699.1694F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2699.1694F), 0.0F, 1678.7018F);
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      Vector4 vector4_2 = vector4_0.mult(0.0F, vector4_1);
      vector4_2.z = 2076.2083F;
      vector4_1.epsilonEquals(vector4_0, 1.0E-5F);
      assertEquals(2076.2083F, vector4_1.z(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      Vector4 vector4_1 = vector4_0.negate();
      boolean boolean0 = vector4_1.equals(vector4_0);
      assertEquals((-310.0F), vector4_1.w, 0.01F);
      assertEquals(-0.0F, vector4_1.x, 0.01F);
      assertFalse(boolean0);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(-0.0F, vector4_1.y, 0.01F);
      assertEquals(-0.0F, vector4_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      vector4_0.hashCode();
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0F, 0.0F, 0.0F, 310.0F);
      vector4_0.multLocal(1.0F);
      assertEquals(310.0F, vector4_0.w, 0.01F);
      assertEquals(0.0F, vector4_0.x, 0.01F);
      assertEquals(0.0F, vector4_0.y, 0.01F);
      assertEquals(0.0F, vector4_0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), vector4_0.y, 0.01F);
      
      vector4_0.absLocal();
      assertEquals(1.0F, vector4_0.z(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(3);
      // Undeclared exception!
      try { 
        vector4_0.set(floatBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
