/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 02:56:59 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AffineTransform;
import pythagoras.f.Area;
import pythagoras.f.CubicCurve;
import pythagoras.f.Dimension;
import pythagoras.f.IRectangle;
import pythagoras.f.IShape;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Line;
import pythagoras.f.Path;
import pythagoras.f.PathIterator;
import pythagoras.f.Point;
import pythagoras.f.QuadCurve;
import pythagoras.f.Rectangle;
import pythagoras.f.RoundRectangle;
import pythagoras.f.Transform;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Area_ESTest extends Area_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(825.8567F, (-1189.578F), 825.8567F, 0.0F, (-1189.578F), 825.8567F, (-1189.578F), (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      area1.exclusiveOr(area0);
      boolean boolean0 = area0.equals(area1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(825.8567F, (-1189.578F), 825.8567F, 3533.4397F, (-1189.578F), (-3.0F), (-1189.578F), (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      Area area2 = area0.clone();
      area1.subtract(area2);
      boolean boolean0 = area1.equals(area0);
      assertFalse(area0.equals((Object)area1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.add((-1655.8193F), (-1655.8193F));
      Area area0 = new Area(rectangle0);
      area0.exclusiveOr(area0);
      assertFalse(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      boolean boolean0 = area0.intersects(0.0F, (-1469.3F), 54.0F, (-799.245F));
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.intersects(1318.0F, 3379.659F, (-3452.3462F), 0.0F);
      assertTrue(area0.isRectangular());
      assertFalse(boolean0);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      boolean boolean0 = area0.isSingular();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1189.578F), (-1189.578F), (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      boolean boolean0 = area1.isRectangular();
      assertFalse(area0.equals((Object)area1));
      assertFalse(boolean0);
      assertTrue(area1.isSingular());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-3.0F), 3084.0427F, 1653.689F, 3084.0427F, (-533.61F), 3326.6968F, 0.0F, 0.0F);
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      boolean boolean0 = area1.isRectangular();
      assertFalse(boolean0);
      assertTrue(area1.isSingular());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 494.0F, 447.36877F, 92.0F, 0.0F, (-1186.3291F), (-1186.3291F), 0.0F);
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      boolean boolean0 = area1.isRectangular();
      assertTrue(area1.isSingular());
      assertFalse(area0.equals((Object)area1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0F, 0.0F, (-907.3665F), 1.0F, 0.0F, 0.0F);
      Rectangle rectangle0 = quadCurve0.bounds();
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.isRectangular();
      assertTrue(boolean0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Area area0 = new Area();
      PathIterator pathIterator0 = area0.pathIterator((Transform) identityTransform0, (float) 0);
      assertTrue(pathIterator0.isDone());
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(825.8567F, (-1189.578F), 825.8567F, 3533.4397F, (-1189.578F), (-3.0F), (-1189.578F), (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      AffineTransform affineTransform0 = new AffineTransform();
      area0.pathIterator((Transform) affineTransform0, 825.8567F);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Area area0 = new Area(cubicCurve0);
      boolean boolean0 = area0.isPolygonal();
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Area area0 = new Area();
      Area area1 = area0.createTransformedArea((Transform) null);
      assertTrue(area1.isEmpty());
      assertTrue(area0.isPolygonal());
      assertTrue(area1.isRectangular());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1189.578F), 825.8567F, (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      area0.subtract(area0);
      QuadCurve quadCurve0 = new QuadCurve(0.0F, 0.0F, (-907.3665F), 1.0F, 0.0F, 0.0F);
      Point point0 = quadCurve0.p1();
      boolean boolean0 = area0.contains((XY) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Point point0 = new Point(0.0F, (-786.13043F));
      Area area0 = new Area(quadCurve0);
      boolean boolean0 = area0.contains((XY) point0);
      assertFalse(area0.isEmpty());
      assertFalse(boolean0);
      assertFalse(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Area area0 = new Area();
      Path path0 = new Path(area0);
      Rectangle rectangle0 = path0.bounds();
      boolean boolean0 = area0.contains((IRectangle) rectangle0);
      assertEquals(0, path0.windingRule());
      assertTrue(area0.isEmpty());
      assertFalse(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Area area0 = new Area();
      Area area1 = area0.clone();
      assertTrue(area1.isRectangular());
      assertTrue(area1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1189.578F), 825.8567F, (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      area0.subtract(area0);
      Rectangle rectangle0 = new Rectangle(0.0F, 3432.0635F, (-1799.7F), 0.0F);
      Rectangle rectangle1 = area0.bounds(rectangle0);
      assertEquals(Float.NaN, rectangle1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.grow(1547.5F, 1547.5F);
      Area area0 = new Area(rectangle0);
      Rectangle rectangle1 = area0.bounds(rectangle0);
      assertTrue(area0.isRectangular());
      assertTrue(area0.isSingular());
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, (-175.9F), 318.4245F, 0.0F, 0.0F, 0.0F, 6.2831855F, 1226.0F);
      Area area0 = new Area(cubicCurve0);
      area0.subtract(area0);
      Rectangle rectangle0 = area0.bounds();
      assertEquals(Float.NaN, rectangle0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1854.5829F), 982420.94F, 360.1008F, (-3.0F), (-3.0F), (-1854.5829F), (-14.0F), 0.0F);
      Area area0 = new Area(cubicCurve0);
      Rectangle rectangle0 = area0.bounds();
      assertTrue(area0.isSingular());
      assertEquals(2214.6836F, rectangle0.width, 0.01F);
      assertEquals(984275.5F, rectangle0.height, 0.01F);
      assertEquals((-1854.5829F), rectangle0.y, 0.01F);
      assertEquals((-1854.5829F), rectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setRoundRect((-298.75385F), (-298.75385F), (-298.75385F), (-298.75385F), (-298.75385F), (-148.2F));
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      try { 
        area0.transform((Transform) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // First segment must be a SEG_MOVETO
         //
         verifyException("pythagoras.f.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2592.608F, 2592.608F, 2592.608F, 2592.608F, 2592.608F, 2592.608F);
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      area0.subtract(area0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Area area0 = new Area();
      // Undeclared exception!
      try { 
        area0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1282.2788F, 1282.2788F, 1282.2788F, 1282.2788F, 3.2991593F, 3.2991593F);
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      area0.intersect(area0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      Area area0 = new Area(roundRectangle0);
      area0.subtract(area0);
      // Undeclared exception!
      try { 
        area0.intersect(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(888.70386F, 888.70386F, 888.70386F, 888.70386F, 888.70386F, 888.70386F);
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      area0.exclusiveOr(area0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1282.2788F, 1282.2788F, 1282.2788F, 1282.2788F, 1282.2788F, 1282.2788F);
      Area area0 = new Area(roundRectangle0);
      Area area1 = new Area(roundRectangle0);
      // Undeclared exception!
      area0.equals(area1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      area1.exclusiveOr(area0);
      // Undeclared exception!
      try { 
        area1.equals(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-146.17F), (-146.17F), (-146.17F), (-146.17F), (-146.17F), (-146.17F));
      Area area0 = new Area(roundRectangle0);
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        area0.createTransformedArea(identityTransform0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // First segment must be a SEG_MOVETO
         //
         verifyException("pythagoras.f.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Area area0 = new Area();
      // Undeclared exception!
      try { 
        area0.contains((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(21.31867F, 888.70386F, 888.70386F, 888.70386F, 21.31867F, 21.31867F);
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      area0.add(area0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      try { 
        area0.add(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 29
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Area area0 = null;
      try {
        area0 = new Area((IShape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Path path0 = new Path(rectangle0);
      int[] intArray0 = new int[0];
      Path.pointShift = intArray0;
      Area area0 = null;
      try {
        area0 = new Area(path0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      area1.intersect(area0);
      area0.exclusiveOr(area1);
      assertFalse(area1.isRectangular());
      assertFalse(area0.equals((Object)area1));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setFrameFromDiagonal(1067.782F, 1067.782F, 0.0F, 1600.3522F);
      Area area0 = new Area(rectangle0);
      // Undeclared exception!
      try { 
        area0.subtract(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 36 out of bounds for length 36
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      Rectangle rectangle0 = area0.bounds();
      Rectangle rectangle1 = area0.bounds(rectangle0);
      assertEquals(0.0F, rectangle1.height, 0.01F);
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2592.6487F, 2592.6487F, 2592.6487F, 2592.6487F, 2580.2246F, 2592.6487F);
      Area area0 = new Area(roundRectangle0);
      boolean boolean0 = area0.intersects(2592.6487F, 2592.6487F, 2580.2246F, 2592.6487F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      boolean boolean0 = area0.intersects(0.0F, 0.0F, 0.0F, 0.0F);
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(825.8567F, (-648.61774F), 3.0F, 825.8567F);
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.contains(3.0F, 3.0F, 1226.0F, -0.0F);
      assertFalse(boolean0);
      assertTrue(area0.isSingular());
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(2592.6487F, 2592.6487F, 2592.6487F, 2592.6487F, 2580.2246F, 2592.6487F);
      Area area0 = new Area(roundRectangle0);
      boolean boolean0 = area0.contains(2592.6487F, (-267.1849F), 947.0F, 2580.2246F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      boolean boolean0 = area0.contains(0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.isEmpty();
      assertTrue(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.isEmpty();
      assertTrue(area0.isRectangular());
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Area area0 = new Area(rectangle0);
      area0.subtract(area0);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      Area area1 = new Area();
      assertTrue(area1.isEmpty());
      
      area0.subtract(area1);
      assertTrue(area0.isSingular());
      assertFalse(area0.isEmpty());
      assertTrue(area1.isRectangular());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(825.8567F, (-1189.578F), 825.8567F, 3533.4397F, (-1189.578F), (-3.0F), (-1189.578F), (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      Area area1 = new Area();
      assertTrue(area1.isEmpty());
      
      area1.intersect(area0);
      assertTrue(area0.isSingular());
      assertTrue(area1.isRectangular());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 3513.087F, 0.0F, 0.0F);
      Area area1 = area0.createTransformedArea(affineTransform0);
      assertFalse(area1.isEmpty());
      
      area0.reset();
      area1.intersect(area0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Area area0 = new Area();
      area0.intersect((Area) null);
      assertTrue(area0.isRectangular());
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(825.8567F, (-1189.578F), 825.8567F, 3533.4397F, (-1189.578F), (-3.0F), (-1189.578F), (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      area1.add(area0);
      assertFalse(area0.equals((Object)area1));
      assertFalse(area1.equals((Object)area0));
      assertTrue(area1.isSingular());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 825.8567F, 0.0F, 1670.0F);
      Area area0 = new Area(rectangle0);
      Area area1 = area0.clone();
      area0.add(area1);
      assertTrue(area0.isEmpty());
      
      area0.add(area1);
      assertTrue(area0.equals((Object)area1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Area area0 = new Area();
      assertTrue(area0.isEmpty());
      
      area0.add(area0);
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      area0.add((Area) null);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.isPolygonal();
      assertTrue(boolean0);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1189.578F), (-1189.578F), (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      area0.reset();
      assertTrue(area0.isEmpty());
      
      area0.subtract(area0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      area0.pathIterator((Transform) null);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      Area area0 = new Area(roundRectangle0);
      AffineTransform affineTransform0 = new AffineTransform((-8.2101F), (-1318.51F), 0.0F, (-8.2101F), 0.0F);
      Area area1 = area0.createTransformedArea(affineTransform0);
      area0.subtract(area1);
      Area area2 = new Area(area0);
      assertFalse(area2.isPolygonal());
      assertTrue(area2.isSingular());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(888.70386F, 888.70386F, (-1.0F), (-1.0F), 27.0F, (-1.0F));
      Area area0 = new Area(quadCurve0);
      area0.subtract(area0);
      assertFalse(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.ctrlx = (-2043.76F);
      quadCurve0.y1 = (-2043.76F);
      Area area0 = new Area(quadCurve0);
      // Undeclared exception!
      try { 
        area0.exclusiveOr(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(3534.3071F, 3146.8774F, 3534.3071F, 3534.3071F, 3534.3071F, 1425.6758F, 1425.6758F, 1425.6758F);
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      Area area2 = area0.clone();
      area2.exclusiveOr(area1);
      // Undeclared exception!
      try { 
        area0.exclusiveOr(area2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2 out of bounds for length 42
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(825.8567F, (-3.9858317F), 825.8567F, 825.8567F, (-3.9858317F), 825.8567F, (-3.9858317F), (-3.9858317F));
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      area1.exclusiveOr(area0);
      assertTrue(area1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1.0F), (-1189.578F), (-1.0F), 0.0F, (-1189.578F), (-1.0F), (-1189.578F), (-1189.578F));
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      area1.exclusiveOr(area0);
      area1.subtract(area0);
      assertFalse(area1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Dimension dimension0 = new Dimension((-1.0F), 0.0F);
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.setFrameFromDiagonal(249.87303F, 1029.6F, (-1.0F), (-1808.247F));
      Area area0 = new Area(rectangle0);
      Area area1 = new Area(quadCurve0);
      area0.subtract(area1);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(3533.4397F, 3145.714F, 3533.4397F, 3533.4397F, 3533.4397F, 1425.6758F, 1425.6758F, 1425.6758F);
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      area1.subtract(area0);
      // Undeclared exception!
      try { 
        area0.exclusiveOr(area1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(735.0F, 735.0F, 735.0F, 735.0F);
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      try { 
        area0.exclusiveOr(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 88 out of bounds for length 88
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 7.5E-11F, 7.5E-11F, (-3150.7F), (-248.54062F), (-1714.6F), 418.8F, 180.0F);
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = cubicCurve0.bounds(rectangle0);
      Area area1 = new Area(rectangle1);
      area0.intersect(area1);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(3533.4397F, 3146.8774F, 3533.4397F, 3533.4397F, 3533.4397F, 1425.6758F, 1425.6758F, 1425.6758F);
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      Area area2 = area0.clone();
      // Undeclared exception!
      try { 
        area2.exclusiveOr(area1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.grow(599.21F, 599.21F);
      Area area0 = new Area(rectangle0);
      AffineTransform affineTransform0 = new AffineTransform((-599.21F), 1198.42F, 1747.0F, 1747.0F, 1662.119F);
      Area area1 = area0.createTransformedArea(affineTransform0);
      area1.exclusiveOr(area0);
      assertTrue(area1.isRectangular());
      assertFalse(area1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Area area0 = new Area(rectangle0);
      rectangle0.setBounds((-1810.0F), (-1810.0F), 5129.976F, 2374.9448F);
      Area area1 = new Area(rectangle0);
      assertTrue(area1.equals((Object)area0));
      
      area0.exclusiveOr(area1);
      assertFalse(area1.equals((Object)area0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      area0.intersect(area0);
      area0.exclusiveOr(area0);
      assertFalse(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      Area area0 = new Area(roundRectangle0);
      assertFalse(area0.isPolygonal());
      
      CubicCurve cubicCurve0 = new CubicCurve((-3938.343F), 270.0F, 0.0F, (-799.245F), 270.0F, 0.0F, 0.0F, 547.64F);
      Rectangle rectangle0 = cubicCurve0.bounds();
      Area area1 = new Area(rectangle0);
      area1.exclusiveOr(area0);
      assertTrue(area1.isRectangular());
      assertTrue(area0.equals((Object)area1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Rectangle rectangle0 = quadCurve0.bounds();
      rectangle0.grow(2.7182817F, 7818101.0F);
      Area area0 = new Area(rectangle0);
      Area area1 = new Area(quadCurve0);
      assertTrue(area1.equals((Object)area0));
      
      area1.exclusiveOr(area0);
      assertFalse(area1.equals((Object)area0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      area0.add(area0);
      area0.exclusiveOr(area0);
      AffineTransform affineTransform0 = new AffineTransform();
      Area area1 = area0.createTransformedArea(affineTransform0);
      Area area2 = area1.clone();
      assertFalse(area2.isRectangular());
      assertFalse(area2.isSingular());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area();
      boolean boolean0 = area0.equals(quadCurve0);
      assertFalse(boolean0);
      assertTrue(area0.isRectangular());
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.equals(area0);
      assertTrue(area0.isEmpty());
      assertTrue(boolean0);
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.add((-2150.0F), (-2150.0F));
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.intersects((IRectangle) rectangle0);
      assertTrue(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      boolean boolean0 = area0.intersects(0.0F, 0.0F, 2097.363F, 0.0F);
      assertFalse(boolean0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.intersects(1733.4023F, 1733.4023F, 1733.4023F, 1733.4023F);
      assertFalse(boolean0);
      assertTrue(area0.isEmpty());
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(825.8567F, (-3.6552515F), 825.8567F, 0.0F, (-3.6552515F), 825.8567F, (-3.6552515F), (-3.6552515F));
      Area area0 = new Area(cubicCurve0);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      boolean boolean0 = area0.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      boolean boolean0 = area0.contains(0.0F, 0.0F);
      assertFalse(boolean0);
      assertTrue(area0.isSingular());
      assertFalse(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.contains(0.0F, 0.0F);
      assertTrue(area0.isEmpty());
      assertFalse(boolean0);
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Area area0 = new Area();
      area0.subtract((Area) null);
      assertTrue(area0.isPolygonal());
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      area0.intersect(area0);
      boolean boolean0 = area0.contains(0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Area area0 = new Area(rectangle0);
      area0.intersect(area0);
      area0.exclusiveOr(area0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Line line0 = new Line();
      line0.x2 = 9.0F;
      Area area0 = new Area(line0);
      boolean boolean0 = area0.isRectangular();
      assertFalse(boolean0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Line line0 = new Line((-3630.57F), (-3630.57F), 0.75F, (-3630.57F));
      Area area0 = new Area(line0);
      boolean boolean0 = area0.isRectangular();
      assertTrue(area0.isPolygonal());
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      cubicCurve0.y2 = 910.0F;
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      boolean boolean0 = area1.isRectangular();
      assertFalse(boolean0);
      assertTrue(area1.isSingular());
      assertTrue(area1.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      assertTrue(area1.isRectangular());
      
      area1.intersect(area0);
      boolean boolean0 = area1.isRectangular();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      Area area0 = new Area(roundRectangle0);
      Area area1 = area0.clone();
      area1.subtract(area0);
      area1.isRectangular();
      assertTrue(area0.equals((Object)area1));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      Area area0 = new Area(roundRectangle0);
      Area area1 = area0.clone();
      boolean boolean0 = area1.isRectangular();
      assertTrue(area1.isPolygonal());
      assertTrue(area1.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Area area0 = new Area();
      Area area1 = new Area(area0);
      assertTrue(area1.isPolygonal());
      assertTrue(area0.isEmpty());
      assertTrue(area1.isEmpty());
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setSize(899.36316F, 0.5F);
      Area area0 = new Area(rectangle0);
      area0.exclusiveOr(area0);
      assertFalse(area0.isEmpty());
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      boolean boolean0 = area0.isRectangular();
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      Area area0 = new Area(roundRectangle0);
      area0.transform((Transform) null);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(825.8567F, 0.0F, 1590.3F, 0.0F, 0.0F, 1.64563728E8F, 0.0F, 825.8567F);
      Area area0 = new Area(cubicCurve0);
      String string0 = area0.toString();
      assertEquals("Area[coords=8, rules=3, isPoly=false]", string0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Area area0 = new Area();
      // Undeclared exception!
      try { 
        area0.contains((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.intersects((IRectangle) rectangle0);
      assertTrue(area0.isRectangular());
      assertFalse(area0.isEmpty());
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(3533.4397F, 3146.8774F, 3533.4397F, 3533.4397F, 3533.4397F, 1425.6758F, 1425.6758F, 1425.6758F);
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      Area area2 = area0.clone();
      area1.subtract(area0);
      area2.exclusiveOr(area1);
      assertTrue(area1.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Area area0 = new Area();
      AffineTransform affineTransform0 = new AffineTransform();
      // Undeclared exception!
      try { 
        area0.pathIterator((Transform) affineTransform0, (-1466.3F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Flatness is less then zero
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(825.8567F, (-3.9858317F), 825.8567F, 0.0F, (-3.9858317F), 825.8567F, (-3.9858317F), (-3.9858317F));
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      area1.exclusiveOr(area0);
      assertTrue(area1.isEmpty());
  }
}
