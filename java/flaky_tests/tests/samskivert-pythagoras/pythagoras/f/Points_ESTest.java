/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:17:40 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IPoint;
import pythagoras.f.MathUtil;
import pythagoras.f.Point;
import pythagoras.f.Points;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Points_ESTest extends Points_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.clone();
      point1.set(3.1415927F, 392.44495F);
      boolean boolean0 = Points.epsilonEquals((IPoint) point0, (IPoint) point1, 392.44495F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float float0 = Points.distance(0.0F, 0.0F, 1466.912F, 2492.8418F);
      assertEquals(2892.4197F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float float0 = Points.distance(4304.4707F, 3459.4888F, 3459.4888F, 0.0F);
      assertEquals(3561.1875F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = Points.transform(1920.1F, 3543.2708F, (-390.7F), 3.4028235E38F, (-1695.314F), (-1695.314F), (-390.7F), (-1762.3278F), point0);
      float float0 = point0.distanceSq((XY) point1);
      assertEquals((-1.07512256E9F), point0.x, 0.01F);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point point0 = new Point(415.188F, (-1273.8855F));
      Points.transform((-1650.897F), 0.0F, 0.0F, 1892.18F, 177.6F, 0.0F, 1.0F, point0);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals((-3108180.8F), point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = Points.transform(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, point0);
      assertEquals(0.0F, point1.y, 0.01F);
      assertEquals(0.0F, point1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point point0 = new Point(0.0F, 3298.6F);
      Points.transform(0.0F, 1688.0F, 387.8F, 0.0F, (-1828.569F), (-1695.314F), 0.0F, point0);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(103916.96F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point point0 = new Point(0.0F, 3298.6F);
      Points.transform(1688.0F, (-1.0F), 4881.781F, 0.0F, 10.0F, 1.0E-5F, 10.0F, point0);
      assertEquals((-6916979.0F), point0.x, 0.01F);
      assertEquals(10.0F, point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point point0 = new Point();
      Points.transform(1121.7974F, 1112.2532F, 3733.514F, 0.0F, 1.0F, (-259.75415F), 0.0F, 0.0F, point0);
      assertEquals((-1.09206694E9F), point0.x, 0.01F);
      assertEquals((-1.09206694E9F), point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = new Point();
      Points.transform(0.0F, (-533.2099F), 0.0F, 755.79F, 0.0F, (-533.2099F), 0.0F, (-2123.9F), point0);
      assertEquals(2.1487864E8F, point0.y, 0.01F);
      assertEquals(2.1487864E8F, point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point point0 = new Point(0.0F, 3298.6F);
      Points.transform(3543.2708F, 0.0F, 3543.2708F, 3.8553489E10F, (-1695.314F), 3298.6F, 3.8553489E10F, 3543.2708F, point0);
      assertEquals(7.996665E10F, point0.x, 0.01F);
      assertEquals((-2.31589138E17F), point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Points.pointToString(0.0F, 125.857F);
      assertEquals("+0.0+125.857", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point point0 = (Point)Points.ZERO;
      assertEquals(0.015418449F, point0.x, 0.01F);
      
      Points.inverseTransform((-669.3279F), 0.0F, 2710.9043F, (-3.1415927F), (-3.1415927F), (-600.603F), 1886.851F, point0);
      assertEquals(0.025351204F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point point0 = new Point(1779.9596F, 20.438885F);
      Points.inverseTransform(1.0F, 1.0F, 3459.4888F, 1692.09F, 1.0F, 1.0F, 1.0F, point0);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point point0 = (Point)Points.ZERO;
      assertEquals(0.0F, point0.x, 0.01F);
      
      Points.inverseTransform(0.0F, 1.0F, 4691.178F, 0.0F, (-9812.199F), 135.0F, 1.0F, point0);
      assertEquals(Float.POSITIVE_INFINITY, point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point point0 = new Point((-523.803F), 2398.6584F);
      Points.inverseTransform(2348.3F, 2348.3F, 3.1415927F, 1387.2609F, 1387.2609F, (-1440.4846F), 0.0F, point0);
      assertEquals((-428.97983F), point0.x, 0.01F);
      assertEquals(3.0627992F, point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float float0 = Points.distanceSq(6.2831855F, 6.2831855F, 6.2831855F, 6.2831855F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float float0 = Points.distanceSq(1719.705F, 1.0F, 1.0F, 1.0E-5F);
      assertEquals(2953947.8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float float0 = Points.distance(354.79F, 354.79F, 354.79F, 354.79F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.transform(65.1433F, 65.1433F, 65.1433F, 65.1433F, 65.1433F, 65.1433F, 65.1433F, 65.1433F, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Points", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MathUtil.setToStringDecimalPlaces(2147053527);
      // Undeclared exception!
      Points.pointToString(2147053527, (-45.9F));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.epsilonEquals((IPoint) null, (IPoint) null, (-2783.606F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Points", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.epsilonEquals((IPoint) null, (IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Points", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point point0 = (Point)Points.ZERO;
      boolean boolean0 = Points.epsilonEquals((IPoint) point0, (IPoint) point0, 1.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point point0 = (Point)Points.ZERO;
      boolean boolean0 = Points.epsilonEquals((IPoint) point0, (IPoint) point0, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(0.0F, 392.44495F);
      boolean boolean0 = Points.epsilonEquals((IPoint) point0, (IPoint) point1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.clone();
      point0.set(3.1415927F, 392.44495F);
      boolean boolean0 = Points.epsilonEquals((IPoint) point0, (IPoint) point1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point point0 = new Point();
      boolean boolean0 = Points.epsilonEquals((IPoint) point0, (IPoint) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.transform(65.1433F, 65.1433F, 65.1433F, 65.1433F, 65.1433F, 65.1433F, 65.1433F, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Points", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Points points0 = new Points();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.inverseTransform(255.3476F, 255.3476F, 255.3476F, 255.3476F, 255.3476F, 255.3476F, 255.3476F, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Points", e);
      }
  }
}
