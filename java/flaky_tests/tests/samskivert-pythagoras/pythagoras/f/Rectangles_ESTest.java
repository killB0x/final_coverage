/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:34:43 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.Dimension;
import pythagoras.f.IPoint;
import pythagoras.f.IRectangle;
import pythagoras.f.Line;
import pythagoras.f.Point;
import pythagoras.f.Rectangle;
import pythagoras.f.Rectangles;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rectangles_ESTest extends Rectangles_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1946.3528F, (-436.3F), 1.0F, 1.0F);
      Rectangles.union(rectangle0, rectangle0, rectangle0);
      assertEquals(1.0F, rectangle0.width, 0.01F);
      assertEquals(1946.3528F, rectangle0.x, 0.01F);
      assertEquals(1.0F, rectangle0.height, 0.01F);
      assertEquals((-436.3F), rectangle0.y, 0.01F);
      assertEquals(1.0F, rectangle0.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, 0.0F);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      Rectangles.union(rectangle1, rectangle0, rectangle1);
      assertEquals(0.0F, rectangle1.y, 0.01F);
      assertEquals(0.0F, rectangle1.x, 0.01F);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertEquals(0.0F, rectangle1.height, 0.01F);
      assertTrue(rectangle0.equals((Object)rectangle1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1946.3528F, (-436.3F), 1.0F, 1.0F);
      Rectangles.intersect(rectangle0, rectangle0, rectangle0);
      assertEquals((-436.3F), rectangle0.y, 0.01F);
      assertEquals(1.0F, rectangle0.width, 0.01F);
      assertEquals(1946.3528F, rectangle0.x, 0.01F);
      assertEquals(1.0F, rectangle0.height, 0.01F);
      assertEquals(1.0F, rectangle0.width(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point point0 = new Point();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      Rectangle rectangle1 = new Rectangle(point0);
      Rectangles.intersect(rectangle0, rectangle1, rectangle0);
      assertEquals(0.0F, rectangle0.height, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle0.equals((Object)rectangle1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, 0.0F);
      Point point0 = new Point(0.0F, 0.0F);
      float float0 = Rectangles.pointRectDistanceSq(rectangle0, point0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point point0 = new Point();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      float float0 = Rectangles.pointRectDistance(rectangle0, point0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1946.3528F, (-436.3F), 1.0F, 1.0F);
      Point point0 = new Point((-436.3F), 0.0F);
      float float0 = Rectangles.pointRectDistance(rectangle0, point0);
      assertEquals(2422.09F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Line line0 = new Line(422.881F, 422.881F, 422.881F, 2317.456F);
      Point point0 = line0.p2();
      Rectangle rectangle0 = line0.bounds();
      Point point1 = Rectangles.closestInteriorPoint((IRectangle) rectangle0, (IPoint) point0, point0);
      assertEquals(422.881F, point1.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, 0.0F);
      Point point0 = new Point(0.0F, 0.0F);
      Point point1 = Rectangles.closestInteriorPoint((IRectangle) rectangle0, (IPoint) point0, point0);
      assertEquals(0.0F, point1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-2926.484F), (-2926.484F));
      Point point0 = new Point();
      Point point1 = rectangle0.location(point0);
      Point point2 = Rectangles.closestInteriorPoint((IRectangle) rectangle0, (IPoint) point1, point0);
      assertSame(point2, point1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-2926.484F), (-2926.484F));
      Point point0 = new Point();
      Point point1 = Rectangles.closestInteriorPoint((IRectangle) rectangle0, (IPoint) point0);
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, 0.0F);
      Point point0 = new Point(0.0F, 0.0F);
      Point point1 = Rectangles.closestInteriorPoint((IRectangle) rectangle0, (IPoint) point0);
      assertTrue(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, 0.0F);
      rectangle0.setBounds(0.0F, 0.0F, (-1134.162F), 0.0F);
      Point point0 = new Point(0.0F, (-2372.3962F));
      Point point1 = Rectangles.closestInteriorPoint((IRectangle) rectangle0, (IPoint) point0);
      assertEquals(0.0F, point1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Rectangles.union((IRectangle) null, (IRectangle) null, (Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Rectangles", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Rectangles.pointRectDistanceSq((IRectangle) null, (IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Rectangles", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        Rectangles.intersect((IRectangle) null, rectangle0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Rectangles", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Line line0 = new Line(422.881F, 422.881F, 422.881F, 2317.456F);
      Point point0 = line0.p2();
      Rectangle rectangle0 = line0.bounds();
      // Undeclared exception!
      try { 
        Rectangles.closestInteriorPoint((IRectangle) rectangle0, (IPoint) null, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Rectangles", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point point0 = new Point((-436.3F), 0.0F);
      // Undeclared exception!
      try { 
        Rectangles.closestInteriorPoint((IRectangle) null, (IPoint) point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Rectangles", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1946.3528F, (-436.3F), 1.0F, 1.0F);
      Point point0 = new Point((-436.3F), 0.0F);
      float float0 = Rectangles.pointRectDistanceSq(rectangle0, point0);
      assertEquals(5866520.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1946.3528F, (-436.3F), 1.0F, 1.0F);
      Point point0 = new Point((-436.3F), 0.0F);
      Point point1 = Rectangles.closestInteriorPoint((IRectangle) rectangle0, (IPoint) point0);
      assertEquals(1946.3528F, point1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rectangles rectangles0 = new Rectangles();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        Rectangles.pointRectDistance((IRectangle) null, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Rectangles", e);
      }
  }
}
