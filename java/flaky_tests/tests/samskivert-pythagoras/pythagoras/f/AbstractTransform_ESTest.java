/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:32:26 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AffineTransform;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Transform;
import pythagoras.f.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractTransform_ESTest extends AbstractTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.shear(1325.5713F, 2345.0F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.translate((-429.3846F), 1184.909F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.scale(0.0F, 3028.263F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.setTranslation(1.0F, (-2980.0F));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F);
      AffineTransform affineTransform1 = affineTransform0.setTy(0.0F);
      Transform transform0 = affineTransform0.uniformScale(1.0E-5F);
      assertSame(transform0, affineTransform1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.uniformScale(1.0E-5F);
      assertEquals(9.999999E-16F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3661.1F), (-3661.1F), (-1881.58F), (-3661.1F), (-1881.58F));
      Transform transform0 = affineTransform0.uniformScale(0.0F);
      assertEquals((-1881.58F), transform0.ty(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(357.0F, (-2425.422F), (-2425.422F), 57.295776F, 0.0F, 357.0F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.uniformScale((-1470.305F));
      assertEquals(3566110.5F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.translation();
      assertEquals(0.0F, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3684.068F, 3684.068F, 2288.5742F, 3684.068F);
      Vector vector0 = affineTransform0.translation();
      assertEquals(3684.068F, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-443.0F), (-443.0F), (-443.0F));
      Vector vector0 = affineTransform0.translation();
      assertEquals((-443.0F), vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.translateY(0.0F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(258.82F, 0.0F, 258.82F, 4);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.translateY(0.0F);
      assertEquals(4.0F, affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-449.0F), 0.0F, 0.0F, (-449.0F));
      affineTransform0.setTx((-449.0F));
      Transform transform0 = affineTransform0.translateY(0.0F);
      assertSame(affineTransform0, transform0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transform transform0 = affineTransform0.translateX(0.0F);
      assertEquals(0.0F, transform0.ty(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 1311.019F, 0.0F, 0.0F, 0.0F, (-195.656F));
      Transform transform0 = affineTransform0.translateX(0.0F);
      assertEquals(0.0F, transform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, 0.0F, 0.0F);
      AffineTransform affineTransform1 = affineTransform0.rotate((-1304.4802F));
      Transform transform0 = affineTransform1.translateX(790.98804F);
      assertSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, 0.0F, 0.0F);
      Transform transform0 = affineTransform0.translateX(790.98804F);
      assertEquals(427.37265F, transform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.translate(0, 0.0F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3.4028235E38F), (-3.4028235E38F), 0.0F, 0.0F, 57.295776F);
      affineTransform0.setScaleY((-3.4028235E38F));
      affineTransform0.setScaleY(0.0F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.translate(915.0872F, 696.0F);
      assertEquals(Float.NaN, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3.4028235E38F), (-3.4028235E38F), 0.0F, 0.0F, 57.295776F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.translate(915.0872F, 696.0F);
      assertEquals((-3.4028235E38F), affineTransform1.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transform transform0 = affineTransform0.shearY(0.0F);
      assertSame(affineTransform0, transform0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3684.068F, 3684.068F, 2288.5742F, 3684.068F);
      affineTransform0.translate((-2963.35F), 3684.068F);
      Transform transform0 = affineTransform0.shearY((-1.0F));
      assertSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3684.068F, 3684.068F, 2288.5742F, 3684.068F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.shearY((-1.0F));
      assertEquals(5067.2583F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(36.79F, 1828.0F, 0.0F, (-1040.2054F));
      Transform transform0 = affineTransform0.shearX(1281.0F);
      assertSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3752.014F), 0.5F, 1983.301F, 0.0F, 0.0F, 0.5F);
      affineTransform0.setTranslation(789.5F, 0.5F);
      Transform transform0 = affineTransform0.shearX(1281.0F);
      assertEquals(789.5F, transform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, (-2401.0F), 1.0E-5F);
      Transform transform0 = affineTransform0.shearX(2826.3823F);
      assertEquals((-2401.0F), transform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transform transform0 = affineTransform0.shearX(0.0F);
      assertEquals(0.0F, transform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, (-2401.0F), 1.0E-5F);
      Transform transform0 = affineTransform0.shear(4650.619F, 0.0F);
      assertSame(affineTransform0, transform0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, 0.0F, 0.0F);
      Transform transform0 = affineTransform0.shear(1513.6024F, 580.0043F);
      assertSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0, 10.0F, 10.0F, (-1264.9384F));
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.shear(0.0F, (-502.0F));
      assertEquals((-1264.9384F), affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-63.842F), 0.0F, 2711.9558F, (-3015.0F));
      affineTransform0.setUniformScale((-3219.0198F));
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, (-2401.0F), 1.0E-5F);
      affineTransform0.setUniformScale(0.0F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setUniformScale(0.5F);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 1311.019F, 0.0F, 0.0F, 0.0F, (-195.656F));
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setTy(0.0F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3298.1323F), (-1747.0F), 7.7020826F, (-3298.1323F));
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setTy(6.2831855F);
      assertEquals(7.7020826F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, 1233.98F, 0.0F, 63.3F);
      affineTransform0.translate(4, 63.3F);
      Transform transform0 = affineTransform0.setTy((-1802.716F));
      assertEquals(4, transform0.generality());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2823.1F, 0.0F, 0.0F, 2823.1F, 0.0F, 2823.1F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setTx(0.0F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setTx(64.7517F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3411.6F), (-3411.6F), 10.0F, (-294.57373F));
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setTx((-217.386F));
      assertEquals((-294.57373F), affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transform transform0 = affineTransform0.setTranslation(0.0F, 0.0F);
      assertSame(affineTransform0, transform0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.5F, 1983.301F, 0.5F, 0.0F, 0.0F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setTranslation(Float.NaN, Float.NaN);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setTranslation((-273.4381F), (-273.4381F));
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setTransform((-1290.7109F), 2614.4004F, (-1290.7109F), 0.0F, 0.0F, 4);
      assertEquals(2614.4004F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, 561.254F);
      Transform transform0 = affineTransform0.setTransform((-2010.0F), 0.0F, (-1281.6F), (-2010.0F), (-1281.6F), (-2010.0F));
      assertSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setTransform(237.167F, 191.15889F, 0.0F, 1.0F, 0.0F, 0.0F);
      assertEquals(191.15889F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(36.79F, 1828.0F, 0.0F, (-1040.2054F));
      Transform transform0 = affineTransform0.setScaleY(0.0F);
      assertSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transform transform0 = affineTransform0.setScaleY((-979.221F));
      assertEquals(0.0F, transform0.ty(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3752.014F), 0.5F, 1983.301F, 0.0F, 0.0F, 0.5F);
      affineTransform0.setTranslation(789.5F, 0.5F);
      Transform transform0 = affineTransform0.setScaleY((-2243.3F));
      assertSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, (-1701.1168F), 0.0F);
      Transform transform0 = affineTransform0.setScaleY(0.0F);
      assertSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2447.4F, 2447.4F, (-335.71F), (-335.71F));
      AffineTransform affineTransform1 = affineTransform0.setTranslation(0.0F, (-1664.68F));
      Transform transform0 = affineTransform1.setScaleX(2421.3003F);
      assertEquals(0.0F, transform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3752.014F), 0.5F, 1983.301F, 0.0F, 0.0F, 0.5F);
      AffineTransform affineTransform1 = affineTransform0.setTransform((-3752.014F), 0.0F, (-2243.3F), 0.0F, (-2243.3F), 3588.2F);
      AffineTransform affineTransform2 = (AffineTransform)affineTransform1.setScaleX(3752.014F);
      assertEquals(0.0F, affineTransform2.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(908.0F, 57.295776F, 57.295776F, 1.0F, 0.0F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setScaleX(4);
      assertEquals(42.03543F, affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 4727.1F, 1.0F, 1697.6F, 1697.6F, 1697.6F);
      affineTransform0.setScale(1697.6F, 1697.6F);
      assertEquals(1697.6001F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-616.9194F), (-616.9194F), 306.0F, (-616.9194F));
      affineTransform0.setScale(306.0F, 306.0F);
      assertEquals(281.41583F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-443.0F), (-443.0F), (-443.0F));
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setScale(0.0F, 0.0F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Transform transform0 = affineTransform0.setScale(0.0F, (-4626.1265F));
      assertEquals(0.0F, transform0.ty(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, 0.0F, 0.0F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setRotation(1520.029F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.5F, 0.0F, 0.5F, 1.0E-5F);
      Transform transform0 = affineTransform0.setRotation((-1.0F));
      assertEquals(4, transform0.generality());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-2414.895F), (-2414.895F), (-2414.895F), (-2414.895F), 10.0F);
      Transform transform0 = affineTransform0.setRotation(0.0F);
      assertEquals(4, transform0.generality());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, 0.0F, (-1194.2833F));
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setRotation(1520.029F);
      assertEquals((-1194.2833F), affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 1311.019F, 0.0F, 0.0F, 0.0F, (-195.656F));
      AffineTransform affineTransform1 = new AffineTransform(0.0F, (-751.4F), 0.0F, (-751.4F), 0.0F, 169.56133F);
      affineTransform0.set(affineTransform1);
      AffineTransform affineTransform2 = (AffineTransform)affineTransform0.scaleY((-1244.4353F));
      assertEquals(0.0F, affineTransform2.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(908.0F, 57.295776F, 57.295776F, 1.0F, 0.0F);
      Transform transform0 = affineTransform0.scaleY(0.0F);
      assertEquals(0.0F, transform0.ty(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3078.5F, 0.0F, 3.1415927F, (-963.0F), (-96.6792F));
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.scaleY((-1.0F));
      assertEquals((-3078.5F), affineTransform1.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 863.6436F, 863.6436F, 1.0E-5F, 0.0F, 0.0F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.scaleX((-1038.4827F));
      assertEquals(1.0E-5F, affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, (-969.0F), (-1.0F), (-1.0F), 1.0F, 1.0F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.scaleX(398.6F);
      assertEquals(398.6F, affineTransform1.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0F), (-1561.4802F), (-553.3553F), (-1995.41F));
      Transform transform0 = affineTransform0.scaleX(0.0F);
      assertSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-63.842F), 0.0F, 2711.9558F, (-3015.0F));
      Transform transform0 = affineTransform0.scale((float) 4, 3741.1782F);
      assertSame(affineTransform0, transform0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1504.0F, 1504.0F, (-1.0F), 1504.0F);
      Transform transform0 = affineTransform0.scale(1504.0F, 4079.658F);
      assertEquals(4, transform0.generality());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.scale(0.0F, 0.054665726F);
      assertEquals(0.054665726F, affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0, 3051.036F, 0, 2364.29F);
      Vector vector0 = affineTransform0.scale();
      assertEquals(0.0F, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.translateY(1.0F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.rotate(850.0368F);
      assertEquals(0.972283F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 1.0F, (-764.9F), (-1.0F), 850.0368F, (-1.0F));
      Transform transform0 = affineTransform0.rotate(0.0F);
      assertSame(affineTransform0, transform0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0, 323.4272F, 0, 1106.6613F, (-3.4028235E38F), (-1222.08F));
      Transform transform0 = affineTransform0.rotate((-1222.08F));
      assertEquals((-3.4028235E38F), transform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.rotate(850.0368F);
      assertEquals((-0.972283F), affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2407.051F, 3969.1F, 2407.051F, 1805.3285F, 0.0F);
      Transform transform0 = affineTransform0.copy();
      assertNotSame(affineTransform0, transform0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-443.0F), (-443.0F), (-443.0F));
      Transform transform0 = affineTransform0.copy();
      assertNotSame(affineTransform0, transform0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.copy();
      assertSame(transform0, identityTransform0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3.4028235E38F), (-3.4028235E38F), 0, 6.2831855F);
      Transform transform0 = affineTransform0.copy();
      assertNotSame(transform0, affineTransform0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-475.0F), (-475.0F), (-475.0F), (-1.0F));
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.clone();
      assertEquals((-275.80197F), affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3684.068F, 3684.068F, 2288.5742F, 3684.068F);
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.clone();
      assertEquals(2288.5742F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.translateX(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.scaleX(1565.3419F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.setTx(0.0F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.shearX(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.setScaleX(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.scaleY(1697.6F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.setUniformScale(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.setTransform(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.7182817F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-616.9194F), (-616.9194F), 306.0F, (-616.9194F));
      Vector vector0 = affineTransform0.scale();
      assertEquals(616.9193F, vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.uniformScale((float) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.rotate(0.0F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.setRotation(0.0F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.setTy(1735.0F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.shearY(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.translateY(2964.0F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.setScale(5.084F, 5.084F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.setScaleY(0.0F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      IdentityTransform identityTransform1 = (IdentityTransform)identityTransform0.clone();
      assertEquals(0, IdentityTransform.GENERALITY);
  }
}
