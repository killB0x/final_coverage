/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:44:19 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.CrossingHelper;
import pythagoras.f.IntersectPoint;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CrossingHelper_ESTest extends CrossingHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 6;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 6;
      float[][] floatArray1 = new float[6][4];
      floatArray1[0] = floatArray0;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (float) 6;
      floatArray2[4] = (float) 6;
      floatArray2[5] = (float) 6;
      floatArray1[1] = floatArray2;
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray1, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(2, intersectPointArray0.length);
      
      boolean boolean0 = crossingHelper0.containsPoint(floatArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (-3936.0F);
      floatArray0[1] = floatArray1;
      int[] intArray0 = new int[5];
      intArray0[1] = 2813;
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray0, intArray0);
      // Undeclared exception!
      try { 
        crossingHelper0.findCrossing();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.f.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      int[] intArray0 = new int[9];
      intArray0[0] = (-252);
      intArray0[1] = 5542;
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray0, intArray0);
      // Undeclared exception!
      try { 
        crossingHelper0.findCrossing();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 252 out of bounds for length 8
         //
         verifyException("pythagoras.f.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      int[] intArray0 = new int[2];
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(0, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      int[] intArray0 = new int[3];
      intArray0[0] = (-2144499549);
      intArray0[1] = 2146226456;
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray0, intArray0);
      // Undeclared exception!
      crossingHelper0.findCrossing();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray0, (int[]) null);
      // Undeclared exception!
      try { 
        crossingHelper0.findCrossing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      int[] intArray0 = new int[27];
      intArray0[1] = (-3028);
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray0, intArray0);
      // Undeclared exception!
      try { 
        crossingHelper0.findCrossing();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1514
         //
         verifyException("pythagoras.f.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 6;
      intArray0[1] = 6;
      float[] floatArray0 = new float[18];
      floatArray0[5] = (float) 6;
      floatArray0[2] = (float) 6;
      float[][] floatArray1 = new float[2][0];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray1, intArray0);
      crossingHelper0.findCrossing();
      float[] floatArray2 = new float[0];
      // Undeclared exception!
      try { 
        crossingHelper0.containsPoint(floatArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = CrossingHelper.compare((-528.48F), (-528.48F), (-528.48F), (-1262.63F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = CrossingHelper.compare((-2275.0283F), (-2275.0283F), (-2275.0283F), 3688.3928F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = CrossingHelper.compare((-1.6226338F), 0.0F, 0.0F, (-1.6226338F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = CrossingHelper.compare((-177.1F), (-3936.0F), (-3936.0F), (-177.1F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = CrossingHelper.compare((-1.6226338F), (-1.6226338F), (-1.6226338F), (-1.6226338F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 6;
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) 6;
      float[][] floatArray1 = new float[2][6];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray1, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(3, intersectPointArray0.length);
      
      boolean boolean0 = crossingHelper0.containsPoint(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 6;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 6;
      float[][] floatArray1 = new float[4][0];
      float[] floatArray2 = new float[6];
      floatArray2[1] = (float) 6;
      floatArray1[0] = floatArray2;
      floatArray1[1] = floatArray0;
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray1, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(1, intersectPointArray0.length);
      
      boolean boolean0 = crossingHelper0.containsPoint(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 6;
      intArray0[1] = 6;
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 6;
      floatArray1[1] = (float) 6;
      floatArray1[2] = (float) 6;
      floatArray1[3] = (float) 6;
      floatArray1[4] = 3775.0F;
      floatArray1[5] = 123.3F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[0] = 3775.0F;
      floatArray2[1] = (float) 6;
      floatArray2[2] = (float) 6;
      floatArray2[3] = (float) 6;
      floatArray2[4] = (float) 6;
      floatArray2[5] = 3775.0F;
      floatArray0[1] = floatArray2;
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(3, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 6;
      intArray0[1] = 6;
      float[] floatArray0 = new float[16];
      floatArray0[1] = (float) 6;
      floatArray0[4] = (float) 6;
      float[][] floatArray1 = new float[2][6];
      floatArray1[0] = floatArray0;
      floatArray1[1] = floatArray0;
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray1, intArray0);
      crossingHelper0.findCrossing();
      // Undeclared exception!
      try { 
        crossingHelper0.containsPoint((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 6;
      float[][] floatArray0 = new float[2][6];
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(0, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 6;
      float[][] floatArray0 = new float[2][6];
      CrossingHelper crossingHelper0 = new CrossingHelper(floatArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(0, intersectPointArray0.length);
  }
}
