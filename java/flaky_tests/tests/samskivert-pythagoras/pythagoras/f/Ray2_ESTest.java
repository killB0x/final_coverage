/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:16:32 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AffineTransform;
import pythagoras.f.IRay2;
import pythagoras.f.IVector;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Ray2;
import pythagoras.f.Transform;
import pythagoras.f.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Ray2_ESTest extends Ray2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-1867.9F), (-1867.9F), 0.0F, 0.0F, 1.0E-5F);
      affineTransform0.rotate(1059.0F);
      Vector vector0 = affineTransform0.translation();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Ray2 ray2_1 = ray2_0.transformLocal(affineTransform0);
      vector0.normalize(ray2_1.direction);
      boolean boolean0 = ray2_1.getIntersection((IVector) ray2_0.direction, (IVector) vector0, vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector vector0 = new Vector();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      AffineTransform affineTransform0 = new AffineTransform((-893.64F), (-1277.954F), (-893.64F), 2598.69F, 0.0F);
      Vector vector1 = affineTransform0.translation();
      boolean boolean0 = ray2_0.getIntersection((IVector) vector1, (IVector) ray2_0.origin, 0.0F, ray2_0.origin);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_0.origin, (IVector) ray2_0.direction, (-277.87103F), ray2_0.direction);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-1867.9F), (-1867.9F), 0.0F, 0.0F, 1.0E-5F);
      Vector vector0 = affineTransform0.translation();
      Vector vector1 = new Vector(vector0);
      vector1.addLocal((IVector) vector0);
      Ray2 ray2_0 = new Ray2();
      boolean boolean0 = ray2_0.getIntersection((IVector) vector1, (IVector) vector0, (-2809.491F), ray2_0.direction);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform(2086.842F, 2086.842F, (-3747.198F), 810650.0F);
      affineTransform0.transformPoint(ray2_0.direction, ray2_0.direction);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_0.direction, (IVector) ray2_0.direction, ray2_0.origin);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-1867.9F), (-1867.9F), 0.0F, 0.0F, 1.0E-5F);
      Vector vector0 = affineTransform0.translation();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_0.direction, (IVector) vector0, vector0);
      assertTrue(boolean0);
      assertEquals(1.0E-5F, vector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-1867.9F), (-1867.9F), 0.0F, 0.0F, 1.0E-5F);
      affineTransform0.rotate(1059.0F);
      Vector vector0 = affineTransform0.translation();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Ray2 ray2_1 = ray2_0.transformLocal(affineTransform0);
      vector0.normalize(ray2_1.direction);
      boolean boolean0 = ray2_0.intersects(vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F));
      Vector vector0 = new Vector((-3966.6523F), (-3966.6523F));
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      Vector vector2 = new Vector(1514.0116F, (-3966.6523F));
      Ray2 ray2_1 = new Ray2(ray2_0);
      Ray2 ray2_2 = ray2_1.set((IVector) vector2, (IVector) vector2);
      boolean boolean0 = ray2_2.intersects(ray2_0.direction);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-1867.9F), (-1867.9F), 0.0F, 0.0F, 1.0E-5F);
      affineTransform0.rotate(1059.0F);
      Vector vector0 = affineTransform0.translation();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Ray2 ray2_1 = ray2_0.transformLocal(affineTransform0);
      affineTransform0.inverseTransform((IVector) vector0, ray2_1.origin);
      Vector vector1 = new Vector(2.0E-5F, (-4005.0F));
      boolean boolean0 = ray2_0.intersects(vector1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector vector0 = new Vector((-3966.6523F), (-3966.6523F));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = new Vector(1514.0116F, (-3966.6523F));
      Ray2 ray2_1 = ray2_0.set((IVector) vector1, (IVector) vector1);
      boolean boolean0 = ray2_1.intersects(ray2_0.direction);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-904.2531F), 0.0F, 0.0F, 6.6F);
      Vector vector0 = affineTransform0.translation();
      Vector vector1 = affineTransform0.transform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      Vector vector2 = (Vector)ray2_0.origin();
      assertEquals((-5968.0703F), vector2.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = (Vector)ray2_0.origin();
      assertEquals(0.0F, vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1378.7446F), (-1378.7446F), 0.0F, (-1378.7446F), 0.5F);
      Vector vector0 = new Vector();
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      Vector vector2 = (Vector)ray2_0.origin();
      assertEquals(0.5F, vector2.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-1867.9F), (-1867.9F), 0.0F, 0.0F, 1.0E-5F);
      Vector vector0 = affineTransform0.translation();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = ray2_0.getNearestPoint(vector0, vector0);
      assertEquals(1.0E-5F, vector1.y, 0.01F);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-904.2531F), 0.0F, 0.0F, 6.6F);
      Vector vector0 = affineTransform0.translation();
      Vector vector1 = affineTransform0.transform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      ray2_0.getNearestPoint(vector1, vector0);
      assertEquals((-5968.0703F), vector0.y, 0.01F);
      assertEquals((-5968.0703F), vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = ray2_0.origin.subtract((-1.0F), 0.0F, ray2_0.origin);
      Vector vector1 = ray2_0.getNearestPoint(ray2_0.direction, ray2_0.direction);
      assertNotSame(vector1, vector0);
      assertEquals(1.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 0.0F, 0.0F, 1.0E-5F, 1.0E-5F);
      Vector vector0 = affineTransform0.transform((IVector) ray2_0.origin, ray2_0.direction);
      vector0.x = (-3693.0F);
      ray2_0.getNearestPoint(vector0, vector0);
      assertEquals((-5.0366054E10F), vector0.x, 0.01F);
      assertEquals((-5.0366054E10F), vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector(4, (-3.1415927F));
      vector0.subtract((IVector) ray2_0.direction, ray2_0.direction);
      Vector vector1 = (Vector)ray2_0.direction();
      assertEquals((-3.1415927F), vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      IVector iVector0 = ray2_0.direction();
      assertEquals(0.0F, iVector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      ray2_0.direction.set((-1.0F), 640.1024F);
      Vector vector0 = (Vector)ray2_0.direction();
      assertEquals((-1.0F), vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.transformLocal((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.transform((Transform) null, (Ray2) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.transform((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.set((IVector) null, (IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.set((IRay2) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.intersects((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.getIntersection((IVector) null, (IVector) null, ray2_0.direction);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.getIntersection((IVector) null, (IVector) null, 0.0F, ray2_0.direction);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.getIntersection((IVector) null, (-2358.8062F), ray2_0.direction);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.getIntersection((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Ray2 ray2_0 = null;
      try {
        ray2_0 = new Ray2((Vector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Ray2 ray2_0 = null;
      try {
        ray2_0 = new Ray2((Ray2) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      float float0 = ray2_0.getIntersection((IVector) vector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      float float0 = ray2_0.getIntersection((IVector) vector0);
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3966.6523F), (-3966.6523F), (-3966.6523F), 0.5F);
      Vector vector0 = affineTransform0.scale();
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      vector1.scaleLocal((-3966.6523F));
      affineTransform0.transform((IVector) vector1, ray2_0.origin);
      float float0 = ray2_0.getIntersection((IVector) ray2_0.direction);
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector((-1111.4841F), (-1111.4841F));
      Vector vector1 = vector0.addScaled((IVector) ray2_0.origin, (-1111.4841F), ray2_0.direction);
      vector1.setAngle(5107.477F);
      float float0 = ray2_0.getIntersection((IVector) vector0);
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.5F, 0.5F, (-3966.6523F), (-3966.6523F));
      Vector vector0 = affineTransform0.scale();
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      float float0 = ray2_0.getIntersection((IVector) vector1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.5F, 0.5F, (-3966.6523F), (-3966.6523F));
      Vector vector0 = affineTransform0.scale();
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      Ray2 ray2_1 = ray2_0.transform((Transform) affineTransform0, ray2_0);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_1.direction, 214.973F, ray2_0.origin);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3966.6523F), (-3966.6523F), (-3966.6523F), 0.5F);
      Vector vector0 = affineTransform0.scale();
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      Ray2 ray2_1 = ray2_0.transform((Transform) affineTransform0);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_1.origin, (-128.0F), ray2_1.origin);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_0.origin, 0.0F, ray2_0.direction);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.5F, 0.5F, (-3966.6523F), (-3966.6523F));
      Vector vector0 = affineTransform0.scale();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = (Vector)ray2_0.origin();
      assertEquals(0.5F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.5F, 0.5F, (-3966.6523F), (-3966.6523F));
      Vector vector0 = affineTransform0.scale();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Ray2 ray2_1 = ray2_0.set((IRay2) ray2_0);
      assertSame(ray2_0, ray2_1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector(1297784.1F, 1297784.1F);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) vector0, vector0);
      assertEquals(1297784.1F, vector0.y, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F));
      Vector vector0 = affineTransform0.scale();
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      Vector vector2 = new Vector(1514.0116F, (-3966.6523F));
      boolean boolean0 = ray2_0.getIntersection((IVector) vector2, (IVector) vector2, ray2_0.origin);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      float float0 = ray2_0.getIntersection((IVector) ray2_0.origin);
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.getNearestPoint((IVector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = ray2_0.getNearestPoint(ray2_0.origin, ray2_0.direction);
      vector0.x = 1.0F;
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, 0.0F, vector0);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector(9068541.0F, 9068541.0F);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) vector0, 9068541.0F, vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector((-1111.4841F), (-1111.4841F));
      Vector vector1 = vector0.addScaled((IVector) ray2_0.origin, (-1111.4841F), ray2_0.direction);
      vector1.setAngle(5107.477F);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) vector1, (-268.6107F), vector1);
      assertEquals((-537.2214F), vector1.y, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform(2086.842F, 2086.842F, (-3747.198F), 810650.0F);
      Vector vector0 = affineTransform0.transformPoint(ray2_0.direction, ray2_0.direction);
      Vector vector1 = new Vector(4, (-978.8F));
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) vector1, (-1.0F), vector1);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.transformPoint(ray2_0.origin, ray2_0.origin);
      ray2_0.origin.set(640.1024F, 640.1024F);
      Ray2 ray2_1 = ray2_0.set((IVector) vector0, (IVector) vector0);
      Vector vector1 = new Vector(640.1024F, 0.0F);
      boolean boolean0 = ray2_1.getIntersection((IVector) ray2_1.direction, (IVector) vector1, (-1798.1627F), ray2_1.direction);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform();
      Ray2 ray2_1 = ray2_0.transformLocal(affineTransform0);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_1.origin, (IVector) ray2_1.direction, 1.0F, ray2_1.direction);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector(0, 4104076.5F);
      Vector vector1 = identityTransform0.transform((IVector) vector0, vector0);
      AffineTransform affineTransform0 = new AffineTransform((-1475.9F), 10.0F, 4104076.5F, 0.0F);
      Vector vector2 = affineTransform0.inverseTransform((IVector) vector0, ray2_0.direction);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector1, (IVector) vector2, (-802.9208F), vector1);
      assertEquals(2315.2395F, vector1.x, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_0.origin, (IVector) ray2_0.origin, 640.1024F, ray2_0.origin);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = ray2_0.origin.setLength(0.0F);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) vector0, vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform((-5520.818F), (-5520.818F), (-3767.0F), (-5520.818F), 355.5F);
      Vector vector0 = affineTransform0.scale();
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, ray2_0.direction);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) vector1, vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3435.162F), 767.37F, (-3435.162F), 767.37F, (-3435.162F));
      Vector vector0 = affineTransform0.scale();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Ray2 ray2_1 = new Ray2(ray2_0);
      affineTransform0.transformPoint(ray2_1.origin, vector0);
      Vector vector1 = affineTransform0.transform((IVector) ray2_0.direction, ray2_0.origin);
      boolean boolean0 = ray2_1.getIntersection((IVector) vector1, (IVector) vector0, ray2_0.direction);
      assertEquals(1.2025809E7F, vector0.x, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3435.162F), 767.37F, (-3435.162F), 767.37F, (-3435.162F));
      Vector vector0 = affineTransform0.scale();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = affineTransform0.transform((IVector) ray2_0.direction, ray2_0.origin);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector1, (IVector) vector0, ray2_0.direction);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector(900.361F, 900.361F);
      boolean boolean0 = ray2_0.intersects(vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 647.0F, 1.0E-5F);
      Vector vector0 = new Vector(4, (-3.1415927F));
      vector0.subtract((IVector) ray2_0.direction, ray2_0.direction);
      Vector vector1 = affineTransform0.transformPoint(ray2_0.origin, vector0);
      boolean boolean0 = ray2_0.intersects(vector1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F));
      Vector vector0 = new Vector((-3966.6523F), (-3966.6523F));
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      Vector vector2 = new Vector(5732.0F, 1012639.7F);
      boolean boolean0 = ray2_0.intersects(vector2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F));
      Vector vector0 = affineTransform0.scale();
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      boolean boolean0 = ray2_0.intersects(vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ray2 ray2_1 = ray2_0.transform((Transform) identityTransform0);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_1.direction, 0.017453292F, ray2_0.origin);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F), (-3966.6523F));
      Vector vector0 = affineTransform0.scale();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      String string0 = ray2_0.toString();
      assertEquals("[origin=+3966.652+3966.652, direction=+3966.652+3966.652]", string0);
  }
}
