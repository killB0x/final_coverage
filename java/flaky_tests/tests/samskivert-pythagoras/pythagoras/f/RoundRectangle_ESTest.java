/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:35:40 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IRoundRectangle;
import pythagoras.f.Rectangle;
import pythagoras.f.RoundRectangle;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RoundRectangle_ESTest extends RoundRectangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setRoundRect(0.0F, 0.0F, 0.0F, 2705.0F, (-1702.0F), (-1702.0F));
      roundRectangle0.setFrame(0.0F, 0.0F, 2705.0F, 289.94452F);
      assertEquals((-1702.0F), roundRectangle0.arcwidth, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      float float0 = roundRectangle0.y();
      assertEquals(0.0F, roundRectangle0.width, 0.01F);
      assertEquals(0.0F, roundRectangle0.height, 0.01F);
      assertEquals(0.0F, roundRectangle0.arcwidth, 0.01F);
      assertEquals(0.0F, roundRectangle0.archeight, 0.01F);
      assertEquals(0.0F, roundRectangle0.x, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(1632.0166F, 2.7182817F, (-5166.0F), 0.0F);
      float float0 = roundRectangle0.y();
      assertEquals((-5166.0F), roundRectangle0.width, 0.01F);
      assertEquals(2.7182817F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setRoundRect((-1612.428F), (-1295.3F), 3.1415927F, (-2775.8743F), 0.0F, (-2775.8743F));
      float float0 = roundRectangle0.y();
      assertEquals((-2775.8743F), roundRectangle0.archeight, 0.01F);
      assertEquals((-1295.3F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      float float0 = roundRectangle0.x();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-2015.687F), (-2015.687F), (-2015.687F), 1.0F, 1.0F, 667.0F);
      roundRectangle0.setFrame(1.0F, (-2015.687F), 1.0F, 2538.826F);
      float float0 = roundRectangle0.x();
      assertEquals(1.0F, roundRectangle0.x, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-4453.0F), (-1.0F));
      float float0 = roundRectangle0.x();
      assertEquals((-1.0F), roundRectangle0.height, 0.01F);
      assertEquals((-1.0F), roundRectangle0.archeight, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((-4453.0F), roundRectangle0.arcwidth, 0.01F);
      assertEquals((-1.0F), roundRectangle0.width, 0.01F);
      assertEquals((-1.0F), roundRectangle0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0F, 1222.781F, 0.0F, 60.0F, 1222.781F, 1222.781F);
      float float0 = roundRectangle0.width();
      assertEquals(1222.781F, roundRectangle0.y, 0.01F);
      assertEquals(0.0F, roundRectangle0.x, 0.01F);
      assertEquals(1222.781F, roundRectangle0.arcwidth, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(60.0F, roundRectangle0.height, 0.01F);
      assertEquals(1222.781F, roundRectangle0.archeight, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrameFromCenter(46.0434F, 46.0434F, (-1.0F), (-1.0F));
      float float0 = roundRectangle0.width();
      assertEquals(94.0868F, roundRectangle0.height, 0.01F);
      assertEquals(94.0868F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(0.0F, 0.0F, (-1.0F), (-669.1794F));
      float float0 = roundRectangle0.width();
      assertEquals((-669.1794F), roundRectangle0.height, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      float float0 = roundRectangle0.height();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrameFromCenter(46.0434F, 46.0434F, (-1.0F), (-1.0F));
      float float0 = roundRectangle0.height();
      assertEquals((-1.0F), roundRectangle0.y, 0.01F);
      assertEquals(94.0868F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(0.0F, 0.0F, (-1.0F), (-669.1794F));
      float float0 = roundRectangle0.height();
      assertEquals((-669.1794F), roundRectangle0.height, 0.01F);
      assertEquals((-669.1794F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0F, 1222.781F, 0.0F, 60.0F, 1222.781F, 1222.781F);
      float float0 = roundRectangle0.arcWidth();
      assertEquals(1222.781F, float0, 0.01F);
      assertEquals(60.0F, roundRectangle0.height, 0.01F);
      assertEquals(1222.781F, roundRectangle0.archeight, 0.01F);
      assertEquals(0.0F, roundRectangle0.width, 0.01F);
      assertEquals(1222.781F, roundRectangle0.y, 0.01F);
      assertEquals(0.0F, roundRectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      float float0 = roundRectangle0.arcHeight();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setRoundRect(0.0F, 0.0F, 0.0F, 2705.0F, (-1702.0F), (-1702.0F));
      float float0 = roundRectangle0.arcHeight();
      assertEquals(2705.0F, roundRectangle0.height, 0.01F);
      assertEquals((-1702.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-4453.0F), (-1.0F));
      // Undeclared exception!
      try { 
        roundRectangle0.setRoundRect((IRoundRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.RoundRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setRoundRect((-3.1415927F), 0.0F, 0.0F, 0.0F, (-966.882F), 0.0F);
      float float0 = roundRectangle0.arcWidth();
      assertEquals((-3.1415927F), roundRectangle0.x, 0.01F);
      assertEquals((-966.882F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setRoundRect((IRoundRectangle) roundRectangle0);
      assertEquals(0.0F, roundRectangle0.y(), 0.01F);
      assertEquals(0.0F, roundRectangle0.x, 0.01F);
      assertEquals(0.0F, roundRectangle0.arcWidth(), 0.01F);
      assertEquals(0.0F, roundRectangle0.height(), 0.01F);
      assertEquals(0.0F, roundRectangle0.width(), 0.01F);
      assertEquals(0.0F, roundRectangle0.arcHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1672.36F, 1672.36F, (-1.0F), (-1.0F), 0.0F, 551.811F);
      float float0 = roundRectangle0.arcHeight();
      assertEquals((-1.0F), roundRectangle0.width, 0.01F);
      assertEquals(1672.36F, roundRectangle0.y, 0.01F);
      assertEquals((-1.0F), roundRectangle0.height, 0.01F);
      assertEquals(0.0F, roundRectangle0.arcwidth, 0.01F);
      assertEquals(551.811F, float0, 0.01F);
      assertEquals(1672.36F, roundRectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      float float0 = roundRectangle0.arcWidth();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1672.36F, 1672.36F, (-1.0F), (-1.0F), 0.0F, 551.811F);
      Rectangle rectangle0 = new Rectangle(2292.0F, (-87.2784F), 2.0F, 2292.0F);
      roundRectangle0.bounds(rectangle0);
      assertEquals((-1.0F), rectangle0.height, 0.01F);
      assertEquals(0.0F, roundRectangle0.arcWidth(), 0.01F);
  }
}
