/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:20:25 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AbstractEllipse;
import pythagoras.f.AbstractLine;
import pythagoras.f.AbstractRoundRectangle;
import pythagoras.f.AffineTransform;
import pythagoras.f.Area;
import pythagoras.f.Crossing;
import pythagoras.f.CubicCurve;
import pythagoras.f.Ellipse;
import pythagoras.f.FlatteningPathIterator;
import pythagoras.f.IShape;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Line;
import pythagoras.f.Path;
import pythagoras.f.PathIterator;
import pythagoras.f.Point;
import pythagoras.f.QuadCurve;
import pythagoras.f.Rectangle;
import pythagoras.f.RoundRectangle;
import pythagoras.f.Transform;
import pythagoras.f.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Crossing_ESTest extends Crossing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = (float) 7;
      int int0 = Crossing.crossBound(floatArray0, 10, 6.0F, Float.NEGATIVE_INFINITY);
      assertEquals(254, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-1411.831F), (-1411.831F), (-1411.831F), 1.0153825F, 1.0153825F, (-1411.831F), 1.0153825F, 1.0153825F, (-1411.831F), 1.0153825F, 1.0153825F, (-1411.831F));
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = Crossing.crossBound(floatArray0, 2, (-0.33334336F), 9.0194285E-13F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = Crossing.crossBound((float[]) null, (-142), (-89.44F), 2.4845976E7F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = Crossing.isInsideNonZero((-275));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = Crossing.intersectCubic(3621.4058F, (-875.3402F), (-2593149.8F), (-1140.566F), 2.0000029F, (-344.96933F), 0, 2841.0F, 3621.4058F, 2202.5F, 3224.4348F, 1345.6543F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = Crossing.intersectCubic(2.0F, 2.0F, 339.253F, (-2696.9668F), 2.0F, 397.8F, (-1229.9F), (-2971.5F), 7.0F, 7.0F, 0.99999F, (-1229.9F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = Crossing.intersectCubic(517.0F, 517.0F, 0.0F, (-1153.046F), 517.0F, 517.0F, (-1153.046F), 517.0F, 517.0F, (-1153.046F), (-1153.046F), 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-2.0F), (-2.0F), 1227.156F, (-2.0F), (-2712.966F), (-969.4926F), (-0.5F), (-2712.966F), (-3681.0F), (-3681.0F), (-2.72F), (-1505.256F));
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-0.1550542F), (-875.3402F), (-1581.0F), 0.0F, 2.0000029F, 270.0F, 1.0F, (-1113.878F), 1.0F, (-0.1550542F), (-875.3402F), (-1993.72F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-22.5194F), 363.9041F, 0.99999F, 516.4F, 1936.4521F, 0.33333334F, 1093.0F, (-22.5194F), 516.4F, 1.00001F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0.5991175F, 0.5991175F, (-471.0844F), 1, 0, 3109.0F, (-3531.0F), 1717.5803F, 270.0F, (-2509.508F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-2738.89F), 5.0F, (-2712.966F), 255, 7.0F, (-2712.966F), 0.0F, (-552.0F), 1491.856F, 2886.735F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = Crossing.intersectQuad(6266.3096F, 6266.3096F, 0.071863465F, (-5503.509F), (-771.37085F), 0.071863465F, 54.0F, 4959.17F, (-676.8746F), 54.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = Crossing.intersectLine(255, 255, (-250.52881F), 255, 255, 255, 255, 255);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = Crossing.intersectLine(1.0000005F, 2.0F, 9.0F, 0.9994804F, 4.0F, 0, 9.0F, 4.0F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = Crossing.intersectLine((-2.0F), (-329.3F), 90.0F, 713.95F, (-2143.49F), (-656.0511F), 1.0E-5F, 1.0E-10F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = Crossing.intersectLine(1.0F, 1997.2F, (-718.901F), (-246.6F), (-6163.822F), 460.9F, 0.0F, 743.12F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0E-5F;
      // Undeclared exception!
      try { 
        Crossing.fixRoots(floatArray0, 2146488982);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = Crossing.crossCubic((-1887.3408F), 2811.1F, (-2073.5674F), 2106.7231F, (-1887.3408F), 27.0F, 555.95996F, (-2073.5674F), (-1.0E-5F), 2.0943952F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = Crossing.crossCubic((-2921.6636F), 0.5F, 0.5F, 0.5F, 0.5F, (-2921.6636F), 0.5F, (-2921.6636F), (-2921.6636F), (-2921.6636F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = Crossing.crossCubic(1.0F, (-2433.9F), 1, 0.0F, 3083.9104F, (-2433.9F), 54.0F, 2210.3606F, 1.0F, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = Crossing.crossCubic((-1644.6F), 7.0F, (-0.701909F), 2614.7056F, 2614.7056F, (-0.701909F), 7.0F, 742.9547F, 816.052F, (-417.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = Crossing.crossCubic(2165.4595F, (-2288.9702F), 2165.4595F, 490.49802F, 2165.4595F, 3, 3, 490.49802F, 858.23F, 0.58168036F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = Crossing.crossCubic((-165.647F), (-625.03F), (-165.647F), (-1094.9663F), (-559.0F), 1.00001F, 1.0F, (-248.939F), (-403.57477F), (-2.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = Crossing.crossCubic((-2.0F), 0.99999F, (-2712.966F), 449.0F, (-718.901F), (-2712.966F), 460.9F, (-7.157942E-18F), (-1634.494F), (-5040.292F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = Crossing.crossQuad(254, 5.0F, (-2526.2087F), (-0.3562787F), 703.36F, (-3542.92F), 0.8200036F, (-1268.7175F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = Crossing.crossQuad((-424.0F), 555.95996F, 7.0F, 0.017453292F, 310.65683F, (-0.701909F), 2.0F, 6.2831855F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = Crossing.crossQuad(6, 1.5707964F, 6, 6, 1.5707964F, 6, 6, 6);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = Crossing.crossQuad((-420.12F), 0.0F, (-10.431856F), (-2386.8704F), 2291.148F, 0.0F, 0.0F, 859.43506F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = Crossing.crossLine(54.0F, 255, 255, 54.0F, 255, 54.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = Crossing.crossLine(2137.819F, 2137.819F, 0.0F, 0.0F, 0.0F, 1.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(1588.0796F, 0.0F, 1588.0796F, 0.0F, 1.00001F, 511.47025F, 0.0F, 1588.0796F);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.00001F;
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(floatArray0, (-879), floatArray0, 255, 5.0F, 0.0F, true, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-681.53F), 2.0943952F, 2.0F, 180.0F, (-1.0E-5F), 2.0943952F, (-1.0F), 8.3266F);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0E-5F);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(floatArray0, Integer.MAX_VALUE, floatArray0, 254, 2.0F, 8.3266F, false, (-388685527));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-1704.7708F), 1.0E-5F, 301.805F, 301.805F, 54.0F, 301.805F, (-16.447874F), 4.712389F);
      float[] floatArray0 = new float[7];
      floatArray0[2] = 1.0E-5F;
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(floatArray0, 255, 957.17114F, 0.017453292F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(4.712389F, (-1.0E-5F), 3.4028235E38F, 3.4028235E38F, 0.0F, 4.712389F, 2.0F, (-1.0E-5F));
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-1.0E-5F);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(floatArray0, 1948656259, (-1558.2773F), (-2136.819F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(2386.0F, 0.0F, 10.0F, 1466.23F, 0.0F, (-428.774F), 0.25F, 0);
      int int0 = crossing_CubicCurveH0.cross((float[]) null, (-1680267990), 2137273545, 0.25F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-3508.5F), (-3508.5F), (-6287.66F), 508.4F, (-6287.66F), (-3508.5F), (-6287.66F), 54.0F, (-6287.66F), 508.4F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[3] = 1.00001F;
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-762.25635F), 1.00001F, 1.0F, 2462.0974F, (-1665.1715F), 3724.5972F);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.addBound((float[]) null, (-544), floatArray0, 255, (-520.9F), (-3354.14F), false, 674);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.0F, 991.53F, 0.0F, 4.712389F, 270.0F, (-1842.0F));
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0E-5F);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.addBound(floatArray0, 255, floatArray0, 16, (-1.0E-5F), (-1.0E-10F), false, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-2842.0F), 254, (-2842.0F), 508.4F, 1705.7708F, 508.4F, (-2842.0F), 254, 2334.0F, (-6287.66F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-253.99998F), 255, 375.2509F, 1.0E-10F, 1.0E-10F, (-656.0511F));
      float[] floatArray0 = new float[8];
      floatArray0[6] = 1.0E-5F;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 255, (-2.0F), 1227.156F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0, (-1279.02F), 1355.72F, (-1311.78F), 3.4028235E38F, (-1883.0109F));
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0E-5F);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 693, (-2372.4F), (-1889.9752F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-2128.444F), 0.6438533F, 0.94829786F, 4, 10.0F, (-1167.2828F));
      int int0 = crossing_QuadCurve0.cross(floatArray0, (-501), (-2128.444F), 0.0014406962F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = Crossing.intersectCubic(9.0F, 0.5F, 0.5F, 9.0F, 9.0F, 9.0F, 9.0F, 0.5F, 9.0F, 0.5F, 0.5F, 9.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[6];
      Crossing.sortBound(floatArray0, (-2146905932));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(0.33333334F, 2227.0F, 2227.0F, 255, 0.0F, 0.0F, 0.0F, (-2.4F));
      crossing_CubicCurveH0.solvePoint(floatArray0, 2);
      crossing_CubicCurveH0.solveExtremeY(floatArray0);
      int int0 = Crossing.solveCubic(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.004818F, 1.3401699F, 0.98113304F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1, 0.0F, 0.0F, 1574.44F, 0.09987492F, 1);
      int int0 = Crossing.intersectShape(quadCurve0, (-1318.7F), 1.0F, 1823.653F, 255);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0, (-23.320864F), (-1853.6007F), 6.0F, 3.0F, (-1494.45F), 1196.98F, 10.0F);
      int int0 = Crossing.intersectShape(cubicCurve0, 426.43F, 1.0002F, 1.0002F, (-1179.4036F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1), 0.99999F, 4.712389F, 464.8285F, 54.0F, 360.0F);
      AffineTransform affineTransform0 = new AffineTransform((-2300.294F), 0.0F, 0.0F, (-1), 0.99999F);
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) affineTransform0);
      int int0 = Crossing.intersectPath(pathIterator0, 2.0F, (-1.0E-5F), 254, 0.6666667F);
      assertTrue(pathIterator0.isDone());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = Crossing.fixRoots(floatArray0, (-4012));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = Crossing.fixRoots(floatArray0, 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-4974.122F), (-2756.466F), (-2756.466F), 0.0F, 255, 27.0F, (-4974.122F), 255);
      Rectangle rectangle0 = cubicCurve0.bounds();
      int int0 = Crossing.crossShape(rectangle0, 255, (-628.2681F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse(22.00825F, 2580.901F, 2580.901F, 4.712389F);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractEllipse.Iterator abstractEllipse_Iterator0 = new AbstractEllipse.Iterator(ellipse0, identityTransform0);
      int int0 = Crossing.crossPath(abstractEllipse_Iterator0, 22.00825F, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      Crossing.sortBound(floatArray0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.sortBound((float[]) null, 1434);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        Crossing.sortBound(floatArray0, 514777563);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.solveQuad((float[]) null, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        Crossing.solveQuad(floatArray0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 1
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.solveCubic((float[]) null, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        Crossing.solveCubic(floatArray0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 0
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.intersectShape((IShape) null, 254, (-1.0E-5F), 255, 254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1410.0894F, (-1306.7634F), (-1306.7634F), 33.187637F, 255, (-612.2F));
      AffineTransform affineTransform0 = new AffineTransform(1.3333334F, (-612.2F), (-1306.7634F), 254, (-327.0154F));
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F, 2146880110);
      // Undeclared exception!
      Crossing.intersectPath(flatteningPathIterator0, (-612.2F), 1.0E-5F, 6.0F, 255);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.intersectPath((PathIterator) null, (-2396.02F), (-2396.02F), (-2396.02F), (-2396.02F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      QuadCurve quadCurve0 = new QuadCurve();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F, 0);
      // Undeclared exception!
      try { 
        Crossing.intersectPath(flatteningPathIterator0, 1247.2F, (-839.8218F), 0.0F, 1531.513F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.fixRoots((float[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.crossShape((IShape) null, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Path path0 = new Path(0, 0);
      path0.pointSize = 8;
      // Undeclared exception!
      try { 
        Crossing.crossShape(path0, 600.7987F, (-1.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 0
         //
         verifyException("pythagoras.f.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.crossPath((PathIterator) null, 11.824786F, 11.824786F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      AffineTransform affineTransform0 = new AffineTransform();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F, 4);
      // Undeclared exception!
      try { 
        Crossing.crossPath(flatteningPathIterator0, 0.0F, (-2.085F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.crossBound((float[]) null, 1073741824, 1073741824, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[10];
      // Undeclared exception!
      try { 
        Crossing.crossBound(floatArray0, 22, 22, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 10 out of bounds for length 10
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = Crossing.intersectCubic(41.51511F, 41.51511F, Float.NEGATIVE_INFINITY, 41.51511F, 41.51511F, 41.51511F, 41.51511F, 41.51511F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = Crossing.intersectLine(1402.0F, 254, 254, 255, 0, 0, 255, 254);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = Crossing.isZero((-1.0E-5F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = Crossing.isZero(13535.553F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = Crossing.isZero(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = Crossing.crossQuad(0, 306.1975F, 0, 0, 0, 306.1975F, 306.1975F, 306.1975F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = Crossing.crossLine(408.81638F, 0.7496654F, 0.7496654F, 0.7496654F, 408.81638F, 408.81638F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(254.0F, 3391.1487F, 620.40094F, 5.0F, 0.0F, 254.0F, 449.0F, 254.0F);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(floatArray0, 0, floatArray0, 1693, (-1268.7175F), 1.00001F, false, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(254.0F, 3391.1487F, 620.40094F, 5.0F, (-2.9802322E-8F), 254.0F, 449.0F, 254.0F);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(floatArray0, 0, floatArray0, 1693, (-1268.7175F), 1.00001F, true, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = 1272.2F;
      floatArray0[2] = (-1530.9974F);
      int int0 = Crossing.solveQuad(floatArray0, floatArray0);
      assertEquals(2, int0);
      
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-3792.2717F), (-1.0174533F), 1.00001F, 0, 2533.7566F, 1.0F, 360.0F, 1.0F);
      int int1 = crossing_CubicCurveH0.addBound(floatArray0, 0, floatArray0, 2, 360.0F, 472.27F, false, (-3880));
      assertEquals(0, int1);
      assertArrayEquals(new float[] {-0.0F, 0.8309615F, (-1530.9974F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 360.0F;
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(3612.19F, 806.1487F, 3216.01F, 9.0F, 9.0F, (-1444.9711F), (-248.939F), 4405.41F);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(floatArray0, 1072499132, floatArray0, 1072499132, 0.0F, 4405.41F, true, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1072499132 out of bounds for length 6
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[2];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(0.061073396F, (-1.0F), (-1.0F), 1076.467F, 4.0F, (-1.0F), 0.061073396F, 0.5F);
      int int0 = crossing_CubicCurveH0.solveExtremeX(floatArray0);
      assertEquals(2, int0);
      
      int int1 = crossing_CubicCurveH0.cross(floatArray0, 2, 0.5F, (-1.0F));
      assertArrayEquals(new float[] {0.09987492F, 0.70826817F}, floatArray0, 0.01F);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[5] = 3.68484E-4F;
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(2.0F, 1.0F, 1605.8844F, 2175.33F, (-2377.218F), (-2288.9702F), (-2288.9702F), (-0.701909F));
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(floatArray0, 1628967274, (-1.0E-5F), 2.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(428.8F, 1751.8958F, 102.619995F, 1394.4545F, (-2288.9702F), 0.99999F, (-424.172F), 1410.0283F);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.99999F;
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(floatArray0, 6, 428.8F, 415.085F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(960.28F, (-1085.34F), (-1085.34F), 131.37439F, (-124.42382F), 2448.0718F, (-124.42382F), 1503.1293F);
      float[] floatArray0 = new float[6];
      crossing_CubicCurveH0.solveExtremeX(floatArray0);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(floatArray0, 576, 1503.1293F, 396.4651F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(255, 254, 9.0F, 380.0F, 0.061073396F, 254, 0.061073396F, 254);
      float[] floatArray0 = new float[9];
      crossing_CubicCurveH0.solveExtremeX(floatArray0);
      Crossing.CubicCurveH crossing_CubicCurveH1 = new Crossing.CubicCurveH(9.0F, 0.061073396F, 2, 255, 2, (-1390.5F), 2, 0.061073396F);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH1.cross(floatArray0, 255, (-1390.5F), 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(1629.0328F, (-3508.5F), 489.9294F, 489.9294F, 389.92212F, 1.00001F, 54.0F, 1.3333334F);
      float[] floatArray0 = new float[6];
      floatArray0[4] = 1.00001F;
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(floatArray0, 7, 7, (-3683.21F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[2];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(5.74754585E17F, (-0.5F), (-0.5F), 0.0F, 0.08086641F, 0.0F, 0.08086641F, (-1268.431F));
      crossing_CubicCurveH0.solveExtremeX(floatArray0);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(floatArray0, 3, 3762.0F, (-1558.2773F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[2];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-0.5F), (-0.5F), (-0.5F), (-0.5F), (-0.5F), (-1.0F), (-0.5F), (-0.3349775F));
      int int0 = crossing_CubicCurveH0.cross(floatArray0, 1, (-0.3349775F), (-0.5F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(1.5707964F, 1415.637F, 1.5707964F, 1415.637F, (-0.5F), 3183.031F, 1415.637F, (-1.0E-10F));
      float[] floatArray0 = new float[8];
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(floatArray0, 3391, (-0.5F), (-0.5F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 4.712389F;
      floatArray0[3] = 4.712389F;
      Crossing.solveCubic(floatArray0, floatArray0);
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(4.712389F, 0.99999F, 1.0F, 4.712389F, 2224.4797F, (-2377.218F), 1116.0F, (-509.67426F));
      int int0 = crossing_CubicCurveH0.cross(floatArray0, 2, 1.0F, 2280.2F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 4.712389F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[5];
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(2295.0F, 255, (-528.0651F), 255.0F, 255.0F, 255.0F);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.addBound(floatArray0, 0, floatArray0, 254, (-784.3163F), 1.0E-5F, false, 254);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-308.61F), 6.0F, (-1360.3507F), (-3.305F), (-4125.9336F), (-2274.49F));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-4125.9336F);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.addBound(floatArray0, 2801, floatArray0, 912, 1698.105F, 877.1642F, true, 912);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 255;
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(2295.0F, 255, (-528.0651F), 0.0F, 255.0F, 255.0F);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.addBound(floatArray0, 0, floatArray0, 254, (-0.34432873F), 1.0E-5F, true, 254);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-0.5F), (-0.5F), (-0.5F), (-0.5F), (-0.5F), (-0.5F));
      float[] floatArray0 = new float[2];
      int int0 = crossing_QuadCurve0.addBound(floatArray0, 16, floatArray0, (-1), (-3059.6128F), 547.389F, false, 1183);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(1415.6965F, 418.06F, 0.0F, 0.33333334F, 0.0F, (-1522.431F));
      float[] floatArray0 = new float[8];
      int int0 = crossing_QuadCurve0.solveExtreme(floatArray0);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {1.0F, (-0.37802032F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-0.5F), (-0.5F), (-0.5F), (-0.5F), (-0.5F), (-0.5F));
      float[] floatArray0 = new float[2];
      int int0 = crossing_QuadCurve0.solveExtreme(floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-0.5F), (-0.5F), (-0.5F), (-0.5F), (-0.5F), (-0.5F));
      float[] floatArray0 = new float[2];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(6.2831855F, (-552.0F), (-0.5F), (-1595.0F), 6.2831855F, 7.0F, (-1595.0F), (-1595.0F));
      crossing_CubicCurveH0.solveExtremeY(floatArray0);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 255, 0.99999F, (-2331.54F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 910.9F;
      floatArray0[2] = (-926.3845F);
      Crossing.solveCubic(floatArray0, floatArray0);
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(868.0F, 4, 0.983285F, 2, (-1352.106F), (-250.00002F));
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 28, (-926.3845F), (-926.3845F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(1341.0F, (-1.0E-5F), 2384.3499F, 54.0F, (-1568.509F), (-3625.701F), 1670.9423F, (-1.0E-5F));
      int int0 = crossing_CubicCurveH0.solveExtremeY(floatArray0);
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-1568.509F), (-3150.94F), 54.0F, 2, 2, 0.99999F);
      int int1 = crossing_QuadCurve0.cross(floatArray0, 2, (-0.18211085F), (-1.0F));
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.66913956F, 0.0073104533F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[4] = 1.0F;
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(1.3309895F, (-1.0F), (-294.3F), (-3718.78F), 2326.536F, 1.3309895F);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 1049, (-700.2283F), 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[3] = 1.0F;
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(1.0F, 1.0E-5F, 1.0F, 1070, 1.0F, (-2452.02F));
      crossing_QuadCurve0.ay = (float) 1070;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 1070, (-2452.02F), 2.0943952F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.6415544F, 0.0F, 381.14706F, (-1168.2485F), (-2162.871F), 2222.2756F);
      float[] floatArray0 = new float[8];
      floatArray0[4] = 1.00001F;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 2318, 0.6415544F, 1.0E-10F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1.0F;
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(1.3333334F, 1.0E-5F, 1.0F, 1070, 1.3333334F, (-2452.02F));
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 1499, (-2409.91F), 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.99999F;
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.33333334F, 1355.72F, (-1.0E-5F), 254, 1355.72F, 0.99999F);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 21347, (-2293.4F), 0.99999F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = (float) 254;
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.33333334F, 1355.72F, (-1.0E-5F), 254, 1355.72F, 0.99999F);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(floatArray0, 21347, (-2293.4F), 0.99999F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.f.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      int int0 = Crossing.solveCubic(floatArray0, floatArray0);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 255;
      floatArray0[3] = (-920.3579F);
      int int0 = Crossing.solveCubic(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.65192026F, 0.0F, 0.0F, (-920.3579F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = (float) 254;
      floatArray0[3] = (float) 254;
      Crossing.solveCubic(floatArray0, floatArray0);
      int int0 = Crossing.solveCubic(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-0.99603164F), 0.060917526F, (-0.064885885F), 254.0F}, floatArray0, 0.01F);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = (float) 254;
      int int0 = Crossing.solveCubic(floatArray0, floatArray0);
      assertArrayEquals(new float[] {-0.0F, 0.0F, 0.0F, 254.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = Crossing.solveCubic(floatArray0, floatArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-762.0F);
      floatArray0[2] = (-1074.9606F);
      int int0 = Crossing.solveQuad(floatArray0, floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = 5.0F;
      int int0 = Crossing.solveQuad(floatArray0, floatArray0);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {-0.0F, 5.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = Crossing.solveQuad(floatArray0, floatArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = (-1.0E-10F);
      int int0 = Crossing.solveQuad(floatArray0, floatArray0);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {-0.0F, 0.0F, (-1.0E-10F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(3512.3372F, (-2142.342F), 270.20428F, 6.0F, (-2142.342F), 3512.3372F);
      float[] floatArray0 = new float[3];
      int int0 = crossing_QuadCurve0.solvePoint(floatArray0, (-2775.0F));
      assertArrayEquals(new float[] {7.3618903F, 0.45437238F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = Crossing.isInsideEvenOdd((-3801));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = Crossing.isInsideEvenOdd(2147284836);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = Crossing.isInsideNonZero(254);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = Crossing.isInsideNonZero(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Area area0 = new Area();
      int int0 = Crossing.intersectShape(area0, 254, 767.66F, 767.66F, 767.66F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(255, 254, 255, 255, (-2339.6875F), 255);
      boolean boolean0 = quadCurve0.contains((float) 254, 2.0F, (float) 255, (float) 254);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      AffineTransform affineTransform0 = new AffineTransform(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) affineTransform0);
      int int0 = Crossing.intersectPath(pathIterator0, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NaN);
      assertTrue(pathIterator0.isDone());
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      AbstractEllipse.Iterator abstractEllipse_Iterator0 = new AbstractEllipse.Iterator(ellipse0, identityTransform0);
      Crossing.intersectPath(abstractEllipse_Iterator0, 0, 0.0F, 0.0F, 0.0F);
      assertTrue(abstractEllipse_Iterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      AffineTransform affineTransform0 = new AffineTransform(0.0F, Float.NEGATIVE_INFINITY, 0.0F, 0.0F, 0.0F);
      AbstractEllipse.Iterator abstractEllipse_Iterator0 = new AbstractEllipse.Iterator(ellipse0, affineTransform0);
      int int0 = Crossing.intersectPath(abstractEllipse_Iterator0, 0.0F, (-3257.0F), 0.0F, 0.0F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Line line0 = new Line(0, 0, 0, 0);
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, identityTransform0);
      int int0 = Crossing.intersectPath(abstractLine_Iterator0, 0, 0.0F, 0, 0.0F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = Crossing.intersectCubic(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 255, 255, 255, 0.0F, 255, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 255, Float.NEGATIVE_INFINITY);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = Crossing.intersectCubic(869.4896F, 869.4896F, 869.4896F, 869.4896F, 3.1415927F, 3.1415927F, 3.1415927F, 869.4896F, 3.1415927F, 869.4896F, 2842.6711F, 869.4896F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0, 3706.1594F, 3706.1594F, 3706.1594F, 450.0F, 3706.1594F, 3706.1594F, 3706.1594F, 450.0F, 3706.1594F, 450.0F, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0, 20.834831F, 20.834831F, 20.834831F, 862.5436F, 20.834831F, 20.834831F, 20.834831F, 862.5436F, 20.834831F, 862.5436F, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0, 20.511547F, 20.511547F, 20.511547F, Float.NEGATIVE_INFINITY, 20.511547F, 20.511547F, 20.511547F, Float.NEGATIVE_INFINITY, 20.511547F, Float.NEGATIVE_INFINITY, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0, 2127.0F, 2127.0F, 2127.0F, 2127.0F, 2127.0F, 2127.0F, 2127.0F, 2127.0F, 2127.0F, 2127.0F, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = Crossing.intersectCubic(2.0F, 10.551114F, 10.551114F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = Crossing.intersectCubic(869.1037F, 869.1037F, 869.1037F, 869.1037F, 2964.562F, 869.1037F, 2964.562F, 869.1037F, 869.1037F, 2964.562F, 869.1037F, 869.1037F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = Crossing.intersectCubic(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 33.84F, 33.84F, 33.84F, 33.84F, 33.84F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-125), (-2201.5F), (-125), (-125), (-1730.0941F), (-125), (-125), 7.0F, (-125), (-125), (-125), (-125));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = Crossing.intersectCubic(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 9.7294285E8F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = Crossing.intersectCubic(Float.NEGATIVE_INFINITY, (-548.8711F), (-548.8711F), (-548.8711F), (-548.8711F), (-548.8711F), Float.NEGATIVE_INFINITY, (-548.8711F), (-548.8711F), (-548.8711F), Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = Crossing.intersectCubic(11.494213F, (-115.6F), 11.494213F, 11.494213F, 11.494213F, (-115.6F), (-3928.8606F), (-115.6F), (-912.5433F), (-115.6F), (-115.6F), (-912.5433F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-1.4666909F), 65.554756F, (-2876.526F), 65.554756F, (-2876.526F), (-2876.526F), (-1.4666909F), (-2876.526F), (-2876.526F), (-2876.526F), (-2876.526F), (-2876.526F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = Crossing.intersectCubic(206.2448F, Float.NEGATIVE_INFINITY, 206.2448F, 206.2448F, 206.2448F, Float.NEGATIVE_INFINITY, 206.2448F, 206.2448F, 206.2448F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 206.2448F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, (-3059.6191F), (-3059.6191F), (-3059.6191F), Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0, 0);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = Crossing.intersectQuad(6.0F, 6.0F, 6.0F, 6.0F, (-1008.54F), 9.0F, (-1008.54F), 6.0F, 818.87F, 9.0F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = Crossing.intersectQuad(17.53F, (-175), (-175), 17.53F, 17.53F, 17.53F, (-175), (-175), 17.53F, (-175));
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = Crossing.intersectQuad(2326.536F, (-1231.821F), (-1974.4F), 2326.536F, (-1974.4F), 2326.536F, (-1231.821F), (-1974.4F), (-1974.4F), (-1974.4F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = Crossing.intersectQuad(254, 255, 255, 255, 254, 254, 255, 255, 255, (-926.3845F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = Crossing.intersectQuad(Float.NEGATIVE_INFINITY, (-1849.96F), 1776.336F, (-4120.4155F), (-4120.4155F), (-4120.4155F), 4.0F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-548.0F), (-548.0F), (-548.0F), (-548.0F), Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, (-1768.782F), (-1768.782F), (-548.0F), (-1768.782F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = Crossing.intersectQuad(Float.NEGATIVE_INFINITY, (-3624.41F), (-3624.41F), 6.0F, 6.0F, (-3624.41F), (-3624.41F), (-3624.41F), (-3850.52F), (-3850.52F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = Crossing.intersectQuad(254, 255, 255, 255, 254, 254, 255, 255, 255, 254);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-798), (-798), (-798), (-798), (-1.0F), (-798), (-798), (-1.0F), (-798), (-1.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0, Float.NEGATIVE_INFINITY, 0, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0, Float.NEGATIVE_INFINITY, 0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = Crossing.intersectQuad(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.69036646E9F, 1.0E-5F, 1.69036646E9F, 1.69036646E9F, 1.0E-5F, 1.0E-5F, 1.0E-5F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = Crossing.intersectQuad(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 206.37819F, 206.37819F, Float.NEGATIVE_INFINITY, 206.37819F, 206.37819F, Float.NEGATIVE_INFINITY, 206.37819F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0, Float.NEGATIVE_INFINITY, 0, 0, 0, 0, Float.NEGATIVE_INFINITY, 0, Float.NEGATIVE_INFINITY, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-830.0F), (-830.0F), (-830.0F), (-830.0F), (-3.4028235E38F), (-830.0F), (-3.4028235E38F), (-830.0F), (-3.4028235E38F), (-3.4028235E38F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      AffineTransform affineTransform0 = new AffineTransform(Float.NEGATIVE_INFINITY, 0.0F, 255, 2.0943952F, 0.0F, (-1593.0F));
      PathIterator pathIterator0 = ellipse0.pathIterator((Transform) affineTransform0);
      int int0 = Crossing.intersectPath(pathIterator0, 0.0F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0F);
      assertTrue(pathIterator0.isDone());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = Crossing.intersectLine(Float.NEGATIVE_INFINITY, 1.0E-5F, 1.0E-5F, 0, 0, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = Crossing.intersectLine(8.72E-4F, 8.72E-4F, 18.404661F, 8.72E-4F, 0, 8.72E-4F, 8.72E-4F, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = Crossing.intersectLine(8.72E-4F, 8.72E-4F, 0, 8.72E-4F, 0, 8.72E-4F, 8.72E-4F, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = Crossing.intersectLine(254, 254, (-119.32F), 254, 254, 254, 254, (-126.185104F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = Crossing.intersectLine(Float.NEGATIVE_INFINITY, 254, Float.NEGATIVE_INFINITY, 254, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = Crossing.intersectLine((-1663.5748F), (-1663.5748F), 254, 254, 254, (-1663.5748F), (-1663.5748F), (-1663.5748F));
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = Crossing.intersectLine(254, 254, 0.67709637F, 0.67709637F, 0.67709637F, 0.67709637F, 2185.0F, 0.67709637F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = Crossing.intersectLine(255, 255, 1536, 1536, 255, 1536, 255, 1536);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = Crossing.intersectLine(254, 2.32F, (-248.9931F), 254, 2.32F, 2.32F, 2.32F, 2.32F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = Crossing.intersectLine(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, (-3.0F), Float.NEGATIVE_INFINITY, (-3.0F), Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = Crossing.intersectLine(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = Crossing.intersectLine((-1411.831F), 10.551114F, 10.551114F, (-1411.831F), (-1411.831F), (-1411.831F), (-1411.831F), (-1411.831F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = Crossing.intersectLine(1.5707964F, 1.5707964F, 3201.8289F, 1.5707964F, 3201.8289F, 3201.8289F, 3201.8289F, 1.5707964F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = Crossing.intersectLine(Float.NaN, (-1), (-1.0E-10F), (-1.0E-10F), 1, (-0.5321822F), (-1), (-2854.9473F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = Crossing.intersectLine(254, 3034.6123F, 254, 3034.6123F, 3034.6123F, 254, 254, 254);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = Crossing.intersectLine((-2146.32F), (-14.0F), (-1383.6829F), (-14.0F), (-1383.6829F), (-14.0F), (-1383.6829F), (-2146.32F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = Crossing.intersectLine(254, Float.NEGATIVE_INFINITY, 254, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = Crossing.intersectLine(255, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Rectangle rectangle0 = new Rectangle(vector0);
      int int0 = Crossing.crossShape(rectangle0, 0.0F, 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Line line0 = new Line();
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, identityTransform0);
      int int0 = Crossing.crossPath(abstractLine_Iterator0, 0, 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      AbstractEllipse.Iterator abstractEllipse_Iterator0 = new AbstractEllipse.Iterator(ellipse0, identityTransform0);
      int int0 = Crossing.crossPath(abstractEllipse_Iterator0, 2779.8008F, 0.0F);
      assertTrue(abstractEllipse_Iterator0.isDone());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      AffineTransform affineTransform0 = new AffineTransform((-733.2F), 0.0F, 0.0F, Float.NEGATIVE_INFINITY, 0.0F, 0.0F);
      AbstractEllipse.Iterator abstractEllipse_Iterator0 = new AbstractEllipse.Iterator(ellipse0, affineTransform0);
      int int0 = Crossing.crossPath(abstractEllipse_Iterator0, Float.NEGATIVE_INFINITY, 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2.0943952F, Float.NEGATIVE_INFINITY, 1774.28F, 1);
      AffineTransform affineTransform0 = new AffineTransform(Float.NEGATIVE_INFINITY, 1578.7551F, 1578.7551F, 1);
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) affineTransform0, (-575.259F));
      int int0 = Crossing.crossPath(pathIterator0, (-221.563F), 2.0943952F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-459.7F), (-755.0F), (-755.0F), (-459.7F), (-755.0F), 9770622.0F, 1829.7788F, (-271.345F));
      int int0 = Crossing.crossShape(cubicCurve0, 1.00001F, (-271.345F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = Crossing.crossCubic(531.1775F, 531.1775F, 531.1775F, 45747.32F, 45747.32F, 531.1775F, (-4029.92F), 45747.32F, 45747.32F, (-4029.92F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = Crossing.crossCubic(52.074287F, 52.074287F, 2.316F, 52.074287F, 255, 255, 52.074287F, 255, 2.316F, 2.316F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = Crossing.crossCubic(3324.763F, 3324.763F, 3324.763F, (-295.33997F), (-295.33997F), (-105), (-1714.6631F), 3324.763F, (-295.33997F), (-1714.6631F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = Crossing.crossCubic(Float.NEGATIVE_INFINITY, 2.0943952F, 255, 2.0943952F, Float.NEGATIVE_INFINITY, 2.0943952F, 255, 255, 2.0943952F, Float.NEGATIVE_INFINITY);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = Crossing.crossCubic(868.902F, 868.902F, 868.902F, 868.902F, 868.902F, 868.902F, (-1424.48F), (-1424.48F), 868.902F, (-1424.48F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = Crossing.crossCubic((-1411.543F), (-1411.543F), (-1411.543F), (-1411.543F), (-1411.543F), (-1411.543F), (-1411.543F), (-1411.543F), (-1411.543F), (-1411.543F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = Crossing.crossCubic((-2.0F), (-105), (-2.0F), (-105), (-2.0F), (-105), (-105), (-105), (-2.0F), (-2.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = Crossing.crossCubic((-1401.1687F), (-1401.1687F), (-1401.1687F), 20.511547F, 20.511547F, 20.511547F, (-1401.1687F), 20.511547F, 20.511547F, 20.511547F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = Crossing.crossCubic(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0, Float.NEGATIVE_INFINITY, 0, Float.NEGATIVE_INFINITY, 0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = Crossing.crossCubic(10.0F, 255, 254, 254, 254, 254, 255, 10.0F, (-143.0F), 255);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = Crossing.crossCubic(3105.1267F, 3105.1267F, 3105.1267F, 3105.1267F, 3105.1267F, (-1.0E-10F), (-1.0E-10F), 642.98F, (-1.0E-10F), 642.98F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = Crossing.crossCubic(2126.233F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 2126.233F, Float.NEGATIVE_INFINITY, 2126.233F, 2126.233F, Float.NEGATIVE_INFINITY, 2126.233F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = Crossing.crossQuad(254, 255, 255, 255, Float.NEGATIVE_INFINITY, 255, 0, 254);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = Crossing.crossQuad(Float.NEGATIVE_INFINITY, 0, 0, 0, Float.NEGATIVE_INFINITY, 0, 0, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = Crossing.crossQuad(Float.NEGATIVE_INFINITY, 0, 0, 0, 2542.3413F, 0, 0, Float.NEGATIVE_INFINITY);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = Crossing.crossQuad(Float.NEGATIVE_INFINITY, 0, 0, 0, (-893.55457F), 0, 0, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = Crossing.crossQuad(6.1F, 6.1F, (-1383.6829F), 6.1F, 6.1F, 6.1F, (-1383.6829F), (-1383.6829F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = Crossing.crossQuad(1.0E-10F, 1.8402593F, (-361.01596F), (-0.7414275F), 1.8402593F, (-0.7414275F), (-0.7414275F), (-361.01596F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = Crossing.crossQuad(Float.NEGATIVE_INFINITY, 2107.6472F, Float.NEGATIVE_INFINITY, 2107.6472F, 2107.6472F, Float.NEGATIVE_INFINITY, 2107.6472F, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = Crossing.crossQuad(0, 739.0003F, 0, 0, 739.0003F, 0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = Crossing.crossQuad((-2908.376F), (-2908.376F), (-2908.376F), 1.3200498F, (-2908.376F), (-2908.376F), (-2908.376F), 1.3200498F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      AffineTransform affineTransform0 = new AffineTransform();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) affineTransform0);
      int int0 = Crossing.crossPath(pathIterator0, 4, 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = Crossing.crossQuad(254, 255, 255, 255, 255, 255, 0, 254);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = Crossing.crossQuad(270.0F, 0.0F, 270.0F, 0.0F, 0.0F, 0.0F, 0.0F, 270.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = Crossing.crossLine((-2077.1619F), 0.78521556F, 10547.08F, (-2077.1619F), 0.78521556F, (-2077.1619F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = Crossing.crossLine((-1637.7599F), (-1637.7599F), Float.NEGATIVE_INFINITY, (-1637.7599F), Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = Crossing.crossLine(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 4191.053F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = Crossing.crossLine(913.67816F, 913.67816F, 87.798134F, 913.67816F, 913.67816F, 87.798134F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = Crossing.crossLine(0.0F, 0.0F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, (-1.0E-10F), Float.NEGATIVE_INFINITY);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = Crossing.crossLine((-1714.6631F), (-1714.6631F), (-1714.6631F), 992.0F, (-1714.6631F), 992.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, (Transform) null);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractRoundRectangle_Iterator0, 0.0F, 1311067282);
      // Undeclared exception!
      Crossing.crossPath(flatteningPathIterator0, 0.0F, 180.0F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = Crossing.crossLine(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, (-1714.6631F), (-1714.6631F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = Crossing.crossLine((-1411.831F), (-1411.831F), 10.551114F, 10.551114F, 10.551114F, (-1411.831F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = Crossing.crossLine(3490.019F, 1, 3490.019F, 3002.41F, 1123.37F, 6.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-1411.831F), (-1411.831F), (-1411.831F), (-1411.831F), (-1411.831F), (-1411.831F), (-546.2813F), (-546.2813F), (-546.2813F), (-546.2813F), (-1411.831F), (-546.2813F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-539.0F), (-2.0F), (-2681.706F), 254, (-539.0F), (-2681.706F), (-2681.706F), (-539.0F));
      float[] floatArray0 = new float[9];
      crossing_CubicCurveH0.solveExtremeX(floatArray0);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(floatArray0, 1090, 2747.119F, (-1637.7599F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.f.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = Crossing.crossCubic((-315.50797F), (-135), (-315.50797F), (-135), (-135), (-135), (-135), (-135), (-135), (-315.50797F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = Crossing.crossCubic(1.5345207F, Float.NEGATIVE_INFINITY, 1.5345207F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 1.5345207F, Float.NEGATIVE_INFINITY, 1.5345207F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-1384.2367F), (-5.3624854F), (-5.3624854F), (-5.3624854F), (-1384.2367F), (-5.3624854F), (-1384.2367F), 1.0E-5F, (-1384.2367F), (-1384.2367F), (-5.3624854F), (-1384.2367F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = Crossing.crossCubic((-738.2615F), 3490.019F, 1.0F, (-738.2615F), 1.0F, 6.0F, 1.0F, 6.0F, 1.0F, 1.0F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = Crossing.crossCubic((-59.1751F), 105.63725F, (-59.1751F), (-59.1751F), 105.63725F, 13.73757F, (-59.1751F), (-59.1751F), (-59.1751F), (-59.1751F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = Crossing.crossCubic(5.9604645E-8F, (-233.818F), 0.0F, (-233.818F), 1.0E-10F, 5.9604645E-8F, 266.84F, 266.84F, 5.9604645E-8F, (-1601.034F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = Crossing.crossQuad(1284.7952F, 7, 0, 0, 0.015698569F, 1284.7952F, 0.015698569F, 36.5632F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = Crossing.crossQuad((-1414.0F), (-1414.0F), 9.0F, 9.0F, (-1414.0F), 9.0F, (-1155.0F), (-1155.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = Crossing.crossQuad((-1.0E-10F), 0, 0, 0, 0, 0, 0, (-1.0E-10F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = Crossing.crossQuad((-2905.36F), (-2905.36F), (-2905.36F), 0.5F, 0.5F, (-2905.36F), 0.5F, (-2905.36F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = Crossing.crossQuad(2458.92F, 2458.92F, 1.45512528E8F, 1.45512528E8F, 2458.92F, 2458.92F, 2458.92F, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0, 0, 0, (-949.1F), (-949.1F), 0, 0, (-949.1F), 0, (-949.1F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = Crossing.crossQuad(1.28F, 0.5F, 0.5F, 0.5F, 0.5F, 1.28F, 1.28F, 1.28F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      AffineTransform affineTransform0 = new AffineTransform(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) affineTransform0);
      int int0 = Crossing.crossPath(pathIterator0, Float.NaN, Float.NaN);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = Crossing.crossCubic((-1889), (-1889), (-1889), (-1889), (-1889), (-817.981F), (-817.981F), (-817.981F), (-817.981F), (-817.981F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = Crossing.intersectCubic(Float.NEGATIVE_INFINITY, 2126.233F, Float.NEGATIVE_INFINITY, 2126.233F, 2126.233F, 2126.233F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 2126.233F, 2126.233F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = Crossing.intersectCubic(2249.057F, 1410.089F, 1410.089F, 1410.089F, 1410.089F, 1410.089F, 2249.057F, 1410.089F, 1410.089F, 1410.089F, 2249.057F, 2249.057F);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-745.3505F), (-745.3505F), Float.NEGATIVE_INFINITY, 0.0F, (-2.0F), Float.NEGATIVE_INFINITY);
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-2.0F), 0.0F, (-745.3505F), (-745.3505F));
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) affineTransform0);
      int int0 = Crossing.intersectPath(pathIterator0, 559.5795F, Float.NEGATIVE_INFINITY, (-2773.0F), 0.0F);
      assertTrue(pathIterator0.isDone());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Crossing crossing0 = new Crossing();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = Crossing.intersectCubic(185.02504F, 185.02504F, 0.5F, 185.02504F, 185.02504F, 0.5F, 0.5F, 185.02504F, 185.02504F, 185.02504F, 185.02504F, 0.5F);
      assertEquals(0, int0);
  }
}
