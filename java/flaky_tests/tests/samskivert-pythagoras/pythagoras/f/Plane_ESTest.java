/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:54:42 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.FloatBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IRay3;
import pythagoras.f.IVector3;
import pythagoras.f.Plane;
import pythagoras.f.Ray3;
import pythagoras.f.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Plane_ESTest extends Plane_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Plane plane1 = plane0.fromPoints(vector3_0, vector3_0, vector3_0);
      plane1.equals(plane1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Plane plane0 = Plane.YZ_PLANE;
      plane0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      plane0.set((IVector3) ray3_0.direction, (-1066.0F));
      plane0.intersection(ray3_0, ray3_0.direction);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[] floatArray0 = new float[5];
      Plane plane0 = new Plane(floatArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      float[] floatArray0 = new float[5];
      floatArray0[3] = 1.0F;
      plane0.set(floatArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Plane plane0 = new Plane(vector3_0, (-335.479F));
      Plane plane1 = plane0.fromPoints(vector3_0, vector3_0, vector3_0);
      plane1.set(plane0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Plane plane0 = new Plane(1.0F, 1.0F, 1.0F, 2498.0F);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Plane plane1 = plane0.fromPointNormal(vector3_0, vector3_0);
      plane1.XY_PLANE.set(plane0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Plane plane0 = new Plane(3.4028235E38F, (-2893.26F), 1172.24F, 1172.24F);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      plane0.XY_PLANE.set((IVector3) vector3_0, 1.0F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      plane0.XY_PLANE.set(0.0F, (-1419.3464F), (-3.1415927F), 1434.0F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Plane plane0 = Plane.YZ_PLANE;
      float[] floatArray0 = new float[4];
      floatArray0[2] = (-3650.4111F);
      plane0.set(floatArray0);
      plane0.normal();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Plane plane0 = Plane.YZ_PLANE;
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-3650.4111F);
      Plane plane1 = plane0.set(floatArray0);
      plane1.normal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Plane plane0 = new Plane(1.0F, 1.0F, 1.0F, 2498.0F);
      plane0.normal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Plane plane0 = Plane.YZ_PLANE;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3650.4111F);
      Plane plane1 = plane0.set(floatArray0);
      plane1.normal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      plane0.fromPoints(vector3_0, vector3_0, vector3_0);
      plane0.negateLocal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Plane plane0 = new Plane(0.0F, 881.3F, 0.0F, 1296.0F);
      plane0.negateLocal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Plane plane1 = plane0.fromPointNormal(vector3_0, vector3_0);
      plane0.negate(plane1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Plane plane0 = new Plane();
      Ray3 ray3_0 = new Ray3();
      Plane plane1 = Plane.YZ_PLANE;
      Plane plane2 = plane0.set(plane1);
      Vector3 vector3_0 = plane2._normal;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      plane0.fromPoints(ray3_0.origin, vector3_0, vector3_1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3((-94.5F), (-727.0F), (-2813.046F));
      Vector3 vector3_2 = plane0._normal;
      plane0.fromPoints(vector3_2, vector3_0, vector3_1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-474.4F), (-474.4F), (-474.4F));
      Plane plane0 = new Plane(vector3_0, (-474.4F));
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      plane0.fromPointNormal(vector3_0, vector3_1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Plane plane0 = new Plane(2839.2903F, 0.0F, 2839.2903F, 0.0F);
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      plane0.distance((IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = new Vector3((-94.5F), (-727.0F), (-2813.046F));
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      plane0.distance((IVector3) ray3_0.origin);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Plane plane0 = new Plane((-2785.5F), (-2785.5F), (-2785.5F), 1038.392F);
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1038.392F;
      floatArray0[3] = (-2785.5F);
      Plane plane1 = plane0.YZ_PLANE.set(floatArray0);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      plane1.distance((IRay3) ray3_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Plane plane0 = new Plane(0.0F, (-2865.18F), 1188.9578F, 1280.0F);
      plane0.constant();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.set((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Plane plane0 = new Plane();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        plane0.set(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.set((Plane) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.set((IVector3) null, 1560.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.negate((Plane) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Plane plane0 = new Plane();
      Vector3 vector3_0 = plane0._v1;
      // Undeclared exception!
      try { 
        plane0.intersection((IRay3) null, vector3_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Plane plane0 = new Plane();
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(0);
      // Undeclared exception!
      try { 
        plane0.get(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.get((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.fromPoints((IVector3) null, (IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.fromPointNormal((IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.distance((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.distance((IRay3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Plane plane0 = null;
      try {
        plane0 = new Plane((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Plane plane0 = null;
      try {
        plane0 = new Plane((Plane) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      Plane plane1 = plane0.set(floatArray0);
      floatArray0[2] = 0.0F;
      Plane plane2 = plane0.XY_PLANE.negate();
      floatArray0[3] = 0.0F;
      Plane plane3 = plane0.set(floatArray0);
      Vector3 vector3_0 = new Vector3(floatArray0);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      plane3.XZ_PLANE.set(floatArray0);
      ray3_0.toString();
      plane0.XZ_PLANE.intersection(ray3_0, vector3_0);
      Vector3 vector3_1 = new Vector3();
      Ray3 ray3_1 = new Ray3(vector3_0, vector3_1);
      Ray3 ray3_2 = new Ray3(ray3_1);
      plane2.distance((IRay3) ray3_2);
      plane3.normal();
      Plane plane4 = plane0.XY_PLANE.negate();
      Plane plane5 = plane4.set(plane0);
      plane5.XY_PLANE.negate(plane3);
      plane3.constant();
      Vector3 vector3_2 = plane3._v2;
      vector3_2.normalize(ray3_1.origin);
      Plane plane6 = plane2.fromPointNormal(ray3_2.direction, vector3_2);
      Plane plane7 = plane6.set(plane2);
      plane7.YZ_PLANE.set((-1298.8F), Float.NaN, 4617.4F, -0.0F);
      plane7.hashCode();
      assertEquals(-0.0F, plane0.constant, 0.01F);
      
      Plane plane8 = plane1.set((IVector3) ray3_2.direction, 0.0F);
      plane8.constant();
      boolean boolean0 = plane5.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Plane plane0 = new Plane(0.0F, 39.495F, (-4309.135F), 0.0F);
      plane0.set(0.0F, 0.0F, 0.0F, (-191.0F));
      assertEquals((-191.0F), plane0.constant, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-474.4F), (-474.4F), (-474.4F));
      Plane plane0 = new Plane(vector3_0, (-474.4F));
      float float0 = plane0.distance((IVector3) vector3_0);
      assertEquals(674691.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Plane plane0 = new Plane();
      Plane plane1 = new Plane(0.0F, 1.0E-5F, 0.0F, 0.0F);
      boolean boolean0 = plane0.equals(plane1);
      assertFalse(boolean0);
      assertFalse(plane1.equals((Object)plane0));
      assertEquals(0.0F, plane1.constant, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Plane plane1 = plane0.YZ_PLANE.set((IVector3) vector3_0, 0.0F);
      boolean boolean0 = plane0.equals(plane1);
      assertEquals(0.0F, plane1.constant, 0.01F);
      assertFalse(boolean0);
      assertFalse(plane1.equals((Object)plane0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Plane plane0 = new Plane();
      boolean boolean0 = plane0.equals(plane0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Ray3 ray3_0 = new Ray3();
      boolean boolean0 = plane0.YZ_PLANE.intersection(ray3_0, ray3_0.direction);
      assertTrue(boolean0);
      
      Plane plane1 = plane0.negate();
      assertEquals(-0.0F, plane1.constant, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      boolean boolean0 = plane0.XY_PLANE.intersection(ray3_0, ray3_0.origin);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Plane plane0 = new Plane((-2785.5F), (-2785.5F), (-2785.5F), 1038.392F);
      float[] floatArray0 = new float[6];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      plane0.get(floatBuffer0);
      assertArrayEquals(new float[] {(-2785.5F), (-2785.5F), (-2785.5F), 1038.392F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Plane plane0 = new Plane((-2785.5F), (-2785.5F), (-2785.5F), 1038.392F);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      float float0 = plane0.distance((IRay3) ray3_0);
      assertEquals((-0.6272152F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      plane0.fromPoints(vector3_0, vector3_0, vector3_0);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      boolean boolean0 = plane0.intersection(ray3_0, vector3_0);
      assertEquals(Float.NaN, plane0.constant, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Plane plane0 = null;
      try {
        plane0 = new Plane(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      plane0.negateLocal();
      assertEquals(-0.0F, plane0.constant, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Plane plane1 = new Plane(plane0);
      assertTrue(plane1.equals((Object)plane0));
      assertEquals(0.0F, plane1.constant, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Plane plane0 = null;
      try {
        plane0 = new Plane((IVector3) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Plane", e);
      }
  }
}
