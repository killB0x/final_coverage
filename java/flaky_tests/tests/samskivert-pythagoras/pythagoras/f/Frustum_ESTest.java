/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:43:16 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.Box;
import pythagoras.f.Frustum;
import pythagoras.f.IVector3;
import pythagoras.f.Matrix3;
import pythagoras.f.Plane;
import pythagoras.f.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Frustum_ESTest extends Frustum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Box box0 = Box.MAX_VALUE;
      Frustum.IntersectionType frustum_IntersectionType0 = frustum0.intersectionType(box0);
      assertEquals(Frustum.IntersectionType.NONE, frustum_IntersectionType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0._vertices = null;
      IVector3[] iVector3Array0 = frustum0.vertices();
      assertNull(iVector3Array0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Frustum frustum1 = frustum0.setToFrustum(980.68756F, (-4021.2246F), (-1.0F), (-3.4028235E38F), 1.0F, 1.0F);
      Vector3[] vector3Array0 = new Vector3[0];
      frustum1._vertices = vector3Array0;
      IVector3[] iVector3Array0 = frustum1.vertices();
      assertEquals(0, iVector3Array0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0.setToPerspective(57.295776F, 57.295776F, (-352.09003F), 57.295776F);
      Vector3 vector3_0 = new Vector3(1, (-3.4028235E38F), 0.0F);
      float float0 = frustum0.distance(vector3_0);
      assertEquals(3.1681517E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3 vector3_0 = Frustum._vertex;
      frustum0.setToProjection(1.0F, 3.0F, 3.1415827F, 0.0F, 2122747.8F, (-782.8628F), vector3_0, false, false);
      float float0 = frustum0.distance(vector3_0);
      assertEquals(2398.6494F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Frustum frustum1 = frustum0.setToOrtho(0.0F, (-431.2655F), 2725.67F, (-2398.6494F), (-305.73F), 1.0F);
      Box box0 = frustum1._bounds;
      Matrix3 matrix3_0 = new Matrix3();
      Box box1 = frustum0.boundsUnderRotation(matrix3_0, box0);
      assertEquals(5151.5747F, box1.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3[] vector3Array0 = new Vector3[0];
      frustum0._vertices = vector3Array0;
      Matrix3 matrix3_0 = new Matrix3((-780.0F), 2388.279F, 2388.279F, 1.0E-5F, (-5129.4297F), (-1567.9471F), (-114.92F), (-2.8292211E38F), 1587.1F);
      Box box0 = Box.MAX_VALUE;
      Box box1 = frustum0.boundsUnderRotation(matrix3_0, box0);
      assertSame(box1, box0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Frustum frustum1 = frustum0.setToPerspective((-432.2655F), (-2.3218781E38F), 1144.0F, (-1503.205F));
      frustum1._bounds = null;
      Box box0 = frustum1.bounds();
      assertNull(box0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0.setToFrustum((-2299.4F), 2.7182817F, (-352.09003F), (-352.09003F), 2.7182817F, 2.7182817F);
      Box box0 = frustum0.bounds();
      assertEquals(2302.1182F, box0.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0.updateDerivedState();
      Box box0 = frustum0.bounds();
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0._bounds = null;
      // Undeclared exception!
      try { 
        frustum0.updateDerivedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3[] vector3Array0 = new Vector3[0];
      frustum0._vertices = vector3Array0;
      // Undeclared exception!
      try { 
        frustum0.updateDerivedState();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      // Undeclared exception!
      try { 
        frustum0.setToProjection(4615.3F, 4615.3F, 4615.3F, 4615.3F, 4615.3F, 4615.3F, (IVector3) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3 vector3_0 = new Vector3();
      Vector3[] vector3Array0 = new Vector3[0];
      frustum0._vertices = vector3Array0;
      // Undeclared exception!
      try { 
        frustum0.setToProjection(0.0F, 0.0F, 0.0F, 452.36F, 0.0F, 452.36F, vector3_0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0._vertices = null;
      // Undeclared exception!
      try { 
        frustum0.setToPerspective(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3[] vector3Array0 = new Vector3[0];
      frustum0._vertices = vector3Array0;
      // Undeclared exception!
      try { 
        frustum0.setToPerspective(55.381F, 0.0F, 55.381F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0._vertices = null;
      // Undeclared exception!
      try { 
        frustum0.setToOrtho(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[0];
      frustum0._planes = planeArray0;
      // Undeclared exception!
      try { 
        frustum0.setToOrtho(1339.72F, 1339.72F, 1339.72F, 2122747.8F, 1339.72F, 2122747.8F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0._vertices = null;
      // Undeclared exception!
      try { 
        frustum0.setToFrustum(3952.701F, 3.1415827F, 3.1415827F, 3.1415827F, 3.1415827F, 3.1415827F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3[] vector3Array0 = new Vector3[0];
      frustum0._vertices = vector3Array0;
      // Undeclared exception!
      try { 
        frustum0.setToFrustum((-3.4028235E38F), 3.4028235E38F, 0.0F, 3.4028235E38F, 3.4028235E38F, 2081.8782F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      // Undeclared exception!
      try { 
        frustum0.intersectionType((Box) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[0];
      frustum0._planes = planeArray0;
      Box box0 = Box.MAX_VALUE;
      Frustum.IntersectionType frustum_IntersectionType0 = frustum0.intersectionType(box0);
      assertEquals(Frustum.IntersectionType.NONE, frustum_IntersectionType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      // Undeclared exception!
      try { 
        frustum0.distance((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Box box0 = Box.MAX_VALUE;
      // Undeclared exception!
      try { 
        frustum0.boundsUnderRotation((Matrix3) null, box0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Frustum frustum1 = frustum0.setToProjection(0.0F, (-130.77293F), 2.0F, 2426.2F, (-130.77293F), 3114.8062F, vector3_0, true, false);
      assertSame(frustum0, frustum1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Box box0 = frustum0._bounds;
      Matrix3 matrix3_0 = new Matrix3();
      frustum0.boundsUnderRotation(matrix3_0, box0);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Frustum frustum1 = frustum0.setToOrtho(1.0F, 0.0F, 1.0F, 0.0F, 1.0F, 1.0F);
      Box box0 = frustum1._bounds;
      Frustum.IntersectionType frustum_IntersectionType0 = frustum1.intersectionType(box0);
      assertEquals(Frustum.IntersectionType.NONE, frustum_IntersectionType0);
      assertEquals(1.4142135F, box0.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Box box0 = frustum0._bounds;
      Vector3 vector3_0 = Frustum._vertex;
      Frustum frustum1 = frustum0.setToProjection(1.0F, 3.0F, 3.1415827F, 0.0F, 2122747.8F, (-782.8628F), vector3_0, false, false);
      frustum1.intersectionType(box0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3 vector3_0 = Frustum._vertex;
      float float0 = frustum0.distance(vector3_0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Frustum frustum1 = frustum0.setToProjection((-1.0F), (-1.0F), (-1.0F), 26.4F, 26.4F, 26.4F, vector3_0, false, true);
      assertSame(frustum0, frustum1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Frustum frustum1 = frustum0.setToProjection((-2696.19F), (-2696.19F), (-2696.19F), (-2696.19F), (-2696.19F), (-2696.19F), vector3_0, true, true);
      assertSame(frustum0, frustum1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Box box0 = frustum0.bounds();
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      IVector3[] iVector3Array0 = frustum0.vertices();
      assertEquals(8, iVector3Array0.length);
  }
}
