/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:57:47 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IVector;
import pythagoras.f.MathUtil;
import pythagoras.f.Point;
import pythagoras.f.Vector;
import pythagoras.f.Vectors;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vectors_ESTest extends Vectors_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = Vectors.vectorToString((-1470.8F), 0.0F);
      assertEquals("-1470.8+0.0", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector vector0 = (Vector)Vectors.UNIT_X;
      boolean boolean0 = Vectors.epsilonEquals((IVector) vector0, (IVector) vector0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = Vectors.isEpsilonZero(0.0F, 1.0E-5F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = Vectors.isEpsilonZero(1.0E-5F, 0.89205927F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Vectors.isZero(0.0F, (-1937.4F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Vectors.isZero((-1012.54663F), (-1012.54663F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float float0 = Vectors.length(0.0F, 1117.7311F);
      assertEquals(1117.7311F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Vector vector1 = Vectors.inverseTransform(2524.9153F, 2457.3792F, 0.0F, 2524.9153F, 1.0E-5F, vector0);
      Vectors.from(vector1, vector0);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x, 0.01F);
      assertEquals(0.97324216F, vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector vector0 = Vectors.fromPolar((-2593.3936F), 0.0F);
      Vectors.transform(0.0F, 6421571.5F, (-1.66536622E10F), (-2593.3936F), 0.0F, vector0);
      assertEquals((-1.66536622E10F), vector0.y, 0.01F);
      assertEquals(-0.0F, vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = Vectors.transform(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, vector0);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector vector0 = Vectors.fromPolar((-2593.3936F), 0.0F);
      Vector vector1 = Vectors.transform(Float.NaN, Float.NaN, 1.5707964F, 0.0F, 1.0E-5F, vector0);
      assertEquals(Float.NaN, vector1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector vector0 = new Vector(0.0F, 1341.179F);
      Vectors.transform(1913.7994F, 1.0F, (-14.500826F), 0.0F, 1.0E-5F, vector0);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals((-27751.672F), vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector vector0 = new Vector(1254.2664F, 10.0F);
      Vectors.transform(0.0F, (-1835542.8F), 0.0F, (-97.0F), (-3528.506F), 1892.312F, vector0);
      assertEquals(-0.0F, vector0.x, 0.01F);
      assertEquals(3.3692169E11F, vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector vector0 = Vectors.fromPolar(0.0F, 2171.5251F);
      assertEquals(-0.0F, vector0.x, 0.01F);
      
      Vectors.transform(0.0F, 0.0F, 0.0F, (-4073.6921F), 159.81F, 749.9774F, vector0);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(-0.0F, vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector vector0 = Vectors.fromPolar(1.5707964F, 1.5707964F);
      Vectors.transform(1.8660672E7F, (-2155.0F), (-93.05506F), 1.0E-5F, (-93.05506F), (-1141.0F), vector0);
      assertEquals(1.98133101E12F, vector0.x, 0.01F);
      assertEquals((-17340.111F), vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector vector0 = new Vector(3206.808F, 1416.0F);
      Vectors.transform(0.0F, (-3.1415927F), (-3.1415927F), 0.0F, 3.4028235E38F, (-1752.0F), vector0);
      assertEquals(Float.NEGATIVE_INFINITY, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector vector0 = new Vector(1368.6398F, 0.0F);
      Vectors.transform(1368.6398F, 0.0F, 0.0F, 0.0F, 1.0E-5F, 0.0F, 1.0E-5F, vector0);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(1.0E-5F, vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = Vectors.transform(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, vector0);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector vector0 = (Vector)Vectors.ZERO;
      assertEquals((-1.9050015F), vector0.x, 0.01F);
      
      Vectors.transform(3545.2878F, 0.0F, 3.4028235E38F, (-965.9282F), 0.0F, 0.0F, 0.0F, vector0);
      assertEquals(Float.POSITIVE_INFINITY, vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector vector0 = new Vector(3206.808F, 1416.0F);
      Vectors.transform((-3.1415927F), 0.0F, (-677.4779F), (-1752.0F), (-3.1415927F), (-1752.0F), (-677.4779F), vector0);
      assertEquals((-677.4774F), vector0.y, 0.01F);
      assertEquals((-3880.3596F), vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector vector0 = new Vector(1254.2664F, 10.0F);
      Vectors.transform(1892.312F, (-1.0F), (-3.1415927F), 73.6098F, 1472.486F, 1202.21F, 1202.21F, 1472.486F, vector0);
      assertEquals(2.05019536E8F, vector0.y, 0.01F);
      assertEquals((-7150410.0F), vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector vector0 = new Vector(1254.2664F, 10.0F);
      Vectors.transform(1.5707964F, 0.0F, 0.0F, 1202.21F, (-430.47397F), 2867.0654F, 3968.0F, 73.6098F, vector0);
      assertEquals(3968.0F, vector0.x, 0.01F);
      assertEquals((-812845.06F), vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float float0 = Vectors.lengthSq(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float float0 = Vectors.length(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector vector0 = Vectors.fromPolar(0.0F, 2171.5251F);
      Vectors.inverseTransform(0.0F, -0.0F, (-4073.6921F), 191.20001F, 0.0F, vector0);
      assertEquals(-0.0F, vector0.y, 0.01F);
      assertEquals(-0.0F, vector0.x, 0.01F);
      assertEquals(-0.0F, vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector vector0 = Vectors.fromPolar(0.0F, 2171.5251F);
      Vectors.inverseTransform(0.0F, (-4073.6921F), (-567.06F), 2171.5251F, 0.0F, vector0);
      assertEquals((-1.875959F), vector0.y, 0.01F);
      assertEquals(-0.0F, vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = Vectors.inverseTransform(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, vector0);
      assertEquals(Float.NaN, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector vector0 = (Vector)Vectors.ZERO;
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Vectors.inverseTransform(3090.56F, 5110.7F, 1.0F, 3090.56F, 1983.5408F, vector0);
      assertEquals((-5887.5215F), vector0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector vector0 = Vectors.fromPolar(3965.0F, 24.588549F);
      assertEquals((-2052.7896F), vector0.y, 0.01F);
      assertEquals(3392.2383F, vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector vector0 = (Vector)Vectors.UNIT_X;
      Vector vector1 = Vectors.fromPolar(1.0E-5F, 1.0E-5F);
      vector1.rotateScaleAndAdd(1.0F, (-2309.0F), vector1, vector1);
      Vector vector2 = Vectors.from(vector0, vector1);
      assertEquals((-0.019429687F), vector1.y, 0.01F);
      assertEquals((-1.0124654F), vector2.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector vector0 = (Vector)Vectors.ZERO;
      Vector vector1 = Vectors.from(vector0, vector0);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector vector0 = (Vector)Vectors.UNIT_X;
      Vector vector1 = Vectors.fromPolar(1.0E-5F, 1.0E-5F);
      Vector vector2 = Vectors.from(vector0, vector1);
      assertEquals((-0.99999F), vector2.x, 0.01F);
      assertEquals(9.9999994E-11F, vector2.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MathUtil.TO_STRING_DECIMAL_PLACES = 1628967274;
      // Undeclared exception!
      Vectors.vectorToString(1628967274, 1628967274);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vectors.transform(381.1277F, 381.1277F, 381.1277F, 381.1277F, 381.1277F, 381.1277F, 381.1277F, 381.1277F, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vectors vectors0 = new Vectors();
      // Undeclared exception!
      try { 
        Vectors.epsilonEquals((IVector) null, vectors0.UNIT_Y, 1.0E-5F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vectors vectors0 = new Vectors();
      // Undeclared exception!
      try { 
        Vectors.epsilonEquals(vectors0.UNIT_X, (IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector vector0 = (Vector)Vectors.MAX_VALUE;
      boolean boolean0 = Vectors.epsilonEquals((IVector) vector0, (IVector) vector0, Float.POSITIVE_INFINITY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector vector0 = Vectors.fromPolar(0.0F, 2171.5251F);
      boolean boolean0 = Vectors.epsilonEquals((IVector) vector0, (IVector) vector0, 381.85193F);
      assertTrue(boolean0);
      assertEquals(-0.0F, vector0.y, 0.01F);
      assertEquals(-0.0F, vector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vectors vectors0 = new Vectors();
      Vector vector0 = new Vector(1254.2664F, 10.0F);
      boolean boolean0 = Vectors.epsilonEquals(vectors0.UNIT_X, (IVector) vector0, (-1524.9503F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = Vectors.isEpsilonZero(1182.0F, 0.0F, 2943.355F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = Vectors.isEpsilonZero(0.0F, 0.0F, (-1362.53F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = Vectors.isEpsilonZero(0.0F, (-1470.8F), 1.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector vector0 = (Vector)Vectors.ZERO;
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vectors.transform((-1623.9F), (-1623.9F), 0.0F, 0.0F, (-1756.0F), (-1623.9F), (-3875.2666F), 0.0F, vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vectors.transform(381.85193F, 381.85193F, 381.85193F, 381.85193F, 381.85193F, 381.85193F, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float float0 = Vectors.lengthSq(0.0F, (-2534.082F));
      assertEquals(6421571.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector vector0 = (Vector)Vectors.ZERO;
      boolean boolean0 = Vectors.epsilonEquals((IVector) vector0, (IVector) vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = Vectors.isZero(0.0F, 3.4028235E38F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vectors.isZero(0.0F, 0.0F);
      Vector vector0 = (Vector)Vectors.MAX_VALUE;
      Vector vector1 = new Vector(vector0);
      Vectors.transform(0.0F, 0.0F, (-413.57F), (-1937.4F), (-2446.579F), (-1470.8F), 0.0F, (-413.57F), vector1);
      Vectors.from(vector1, vector0);
      assertEquals((-413.57F), vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = Vectors.isZero(1115.9617F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vectors vectors0 = new Vectors();
      boolean boolean0 = Vectors.epsilonEquals(vectors0.UNIT_Y, vectors0.UNIT_X);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vectors.inverseTransform(1518.4F, 224.5F, 1518.4F, 1518.4F, 224.5F, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float float0 = Vectors.length((-1.0F), (-1.0F));
      assertEquals(1.4142135F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vectors.from((XY) null, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vectors.transform((-41.72157F), (-41.72157F), (-41.72157F), (-41.72157F), (-41.72157F), (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vectors.transform((-4971.87F), (-4971.87F), (-4971.87F), (-4971.87F), (-4971.87F), (-4971.87F), (-4971.87F), (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vectors", e);
      }
  }
}
