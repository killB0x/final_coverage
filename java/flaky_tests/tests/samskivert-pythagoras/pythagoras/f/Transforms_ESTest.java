/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:19:19 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AffineTransform;
import pythagoras.f.Ellipse;
import pythagoras.f.IShape;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Path;
import pythagoras.f.RoundRectangle;
import pythagoras.f.Transform;
import pythagoras.f.Transforms;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Transforms_ESTest extends Transforms_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(identityTransform0);
      AffineTransform affineTransform1 = new AffineTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply(affineTransform1, affineTransform0, identityTransform0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      IdentityTransform identityTransform0 = new IdentityTransform();
      Path path0 = (Path)Transforms.createTransformedShape(identityTransform0, ellipse0);
      assertEquals(0, Path.WIND_EVEN_ODD);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)Transforms.multiply(affineTransform0, affineTransform0, (Transform) affineTransform0);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 4, 0.0F, 1.0F);
      Transforms.multiply(affineTransform0, affineTransform0, (Transform) affineTransform0);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0F), 225.9F, 12.0F, 1755.0F);
      Transforms.multiply(affineTransform0, affineTransform0, (Transform) affineTransform0);
      assertEquals(0.55582434F, affineTransform0.m10, 0.01F);
      assertEquals(0.8312997F, affineTransform0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(12.0F, 225.9F, 12.0F, 0.0F);
      Transforms.multiply(affineTransform0, affineTransform0, (Transform) affineTransform0);
      assertEquals(119.70717F, affineTransform0.m00, 0.01F);
      assertEquals(80.03871F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.6666667F, 0.0F, 1415.051F, 0.0F);
      Transforms.multiply(affineTransform0, 1528.0632F, 0.0F, 1.0F, 0.0F, 54.0F, 0.0F, (Transform) affineTransform0);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, (-763.93F));
      Transforms.multiply(affineTransform0, 0.0F, 0.0F, 388.8503F, 1472.98F, 0.0F, 0.0F, (Transform) affineTransform0);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-986.66003F), (-986.66003F), (-986.66003F), 4.712389F);
      Transforms.multiply(affineTransform0, 973201.56F, (-194.44891F), (-803.7402F), 0.0F, 777220.06F, (-1.0F), (Transform) affineTransform0);
      assertEquals((-7.5157574E8F), affineTransform0.tx, 0.01F);
      assertEquals(777220.06F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transforms.multiply(0.0F, 262.1284F, 0.0F, 0.0F, 0.0F, (-3730.7852F), affineTransform0, (Transform) affineTransform0);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2887.7332F, 207.3545F, 0.0F, 2565.373F, 4.0F, (-4536.65F));
      Transforms.multiply(444.0F, 0.0F, 2565.373F, 0.0F, (-259.5528F), 2565.373F, affineTransform0, (Transform) affineTransform0);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals((-1.1636683E7F), affineTransform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transforms.multiply(57.295776F, 0.0F, 0.0F, 3644.3474F, 3644.3474F, 0.0F, affineTransform0, (Transform) affineTransform0);
      assertEquals(3644.3474F, affineTransform0.tx, 0.01F);
      assertEquals(57.295776F, affineTransform0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transforms.multiply(0.0F, 0.0F, 3644.3474F, 0.0F, (-3.1415927F), 0.0F, (-2.0F), (-0.5F), (-0.5F), 0.0F, 0.0F, 572.2103F, (Transform) affineTransform0);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-5099.025F), 0.0F, 12.0F, 225.9F);
      Transforms.multiply((-5099.025F), (-5099.025F), 1.0F, 1.0F, 1.0E-5F, (-5099.025F), (-5099.025F), 0.0F, (-5099.025F), (-5099.025F), (-240.8354F), 1082.9F, (Transform) affineTransform0);
      assertEquals(1224009.6F, affineTransform0.ty, 0.01F);
      assertEquals(1229108.6F, affineTransform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, (-2946.1396F), (-2946.1396F), (-2946.1396F), 1.0F);
      Transforms.multiply(2965.565F, 1.0F, 0.0F, 0.0F, 2965.565F, (-819.22F), 0.0F, (-2946.1396F), (-2946.1396F), 3.4028235E38F, 0.0F, 0.0F, (Transform) affineTransform0);
      assertEquals((-8736968.0F), affineTransform0.m10, 0.01F);
      assertEquals((-2946.1396F), affineTransform0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0F), 225.9F, 12.0F, 1755.0F);
      Transforms.multiply(225.9F, 962198.5F, 0.6666667F, 1962.8817F, (-580168.5F), 1962.8817F, 225.9F, 0.0F, 4250.0F, 3185.2358F, (-2559.9802F), (-2039.7F), (Transform) affineTransform0);
      assertEquals(2.1736064E8F, affineTransform0.m01, 0.01F);
      assertEquals(51030.81F, affineTransform0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply((AffineTransform) null, (AffineTransform) null, identityTransform0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Transforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply(affineTransform0, 0.0F, (float) 4, 1.0F, 0.0F, 0.0F, 0.0F, (IdentityTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Transforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), affineTransform0, identityTransform0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply(1786.8F, 1786.8F, 1786.8F, 1786.8F, 1786.8F, 1786.8F, 1786.8F, 1786.8F, 1786.8F, 1786.8F, 1786.8F, 1786.8F, identityTransform0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Transforms.multiply(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (-880.2F), (IdentityTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Transforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(12.0F, 225.9F, 12.0F, 0.0F);
      Transforms.multiply(0.0F, (-85364.76F), 0.0F, (-569.8847F), 0.0F, (-2624.0117F), 0.0F, 0.0F, 225.9F, 1282.6F, 1818.1854F, 0.0F, (Transform) affineTransform0);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-1.55211584E8F), affineTransform0.ty(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      RoundRectangle roundRectangle0 = new RoundRectangle(0, 0, 0, 0, 0, (-2283.1284F));
      // Undeclared exception!
      try { 
        Transforms.createTransformedShape(identityTransform0, roundRectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // First segment must be a SEG_MOVETO
         //
         verifyException("pythagoras.f.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IShape iShape0 = Transforms.createTransformedShape((Transform) null, (IShape) null);
      assertNull(iShape0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Path path0 = new Path();
      Path path1 = (Path)Transforms.createTransformedShape(identityTransform0, path0);
      assertEquals(1, Path.WIND_NON_ZERO);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transforms transforms0 = new Transforms();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply(affineTransform0, 0.0F, 0.0F, (float) 4, 1.0F, 0.0F, (float) 4, identityTransform0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply(2394.3F, 2394.3F, 2394.3F, 54.0F, 2394.3F, 54.0F, affineTransform0, (IdentityTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Transforms", e);
      }
  }
}
