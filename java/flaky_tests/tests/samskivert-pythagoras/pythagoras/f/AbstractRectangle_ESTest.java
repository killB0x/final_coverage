/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:24:49 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AbstractRectangle;
import pythagoras.f.AffineTransform;
import pythagoras.f.Dimension;
import pythagoras.f.ILine;
import pythagoras.f.IRectangle;
import pythagoras.f.IVector;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Line;
import pythagoras.f.PathIterator;
import pythagoras.f.Point;
import pythagoras.f.Rectangle;
import pythagoras.f.Transform;
import pythagoras.f.Vector;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractRectangle_ESTest extends AbstractRectangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point point0 = new Point(1.0F, 1.0F);
      Rectangle rectangle0 = new Rectangle(point0);
      rectangle0.setFrame(1.0F, (-1433.001F), 1.0F, (-509.466F));
      rectangle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1.0F), 2636.5742F);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = new Rectangle();
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 821.6318F, 0.0F, 0.0F);
      Rectangle rectangle1 = new Rectangle(0.0F, (-910.69F), 0.0F, 308.729F);
      boolean boolean0 = rectangle1.equals(rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, (-99.1F), 240.0376F);
      Vector vector0 = new Vector();
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle1 = new Rectangle(vector1, dimension0);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point point0 = new Point(1.0F, 1.0F);
      Rectangle rectangle0 = new Rectangle(point0);
      point0.set((-3.1415927F), (-1087.1F));
      rectangle0.add((-1087.1F), 725.0F);
      rectangle0.setLocation((XY) point0);
      boolean boolean0 = rectangle0.intersects((float) 0, 1.0F, 2482.2664F, 1.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Line line0 = new Line();
      line0.setLine(420.313F, 420.313F, 0.0F, 671479.1F);
      Rectangle rectangle0 = line0.bounds();
      boolean boolean0 = rectangle0.intersects(0.0F, 420.313F, 671479.1F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1173.0F, 1173.0F, 1173.0F, 2674.9636F);
      boolean boolean0 = rectangle0.intersects(5085.59F, 0.0F, 3586.0F, 1623.39F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0, 0.0F, 15, 3100.8215F);
      boolean boolean0 = rectangle0.intersects(0.0F, 0.0F, (float) 0, 2589.182F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1173.0F, 476.0F, 313.69F, 3847.9636F);
      boolean boolean0 = rectangle0.intersects(1.0F, 2346.0F, 1173.0F, 514.03925F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = new Point(1.0F, 1.0F);
      point0.addLocal((-3.1415927F), 1.0F);
      Rectangle rectangle0 = new Rectangle(point0);
      rectangle0.setFrame(1.0F, 1.0F, 1.0F, (-509.466F));
      rectangle0.add((XY) point0);
      boolean boolean0 = rectangle0.contains(2.0F, 3260.247F, (float) 0, 2482.2664F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Line line0 = new Line(0.0F, 310.24835F, (-1433.001F), 0.0F);
      Rectangle rectangle0 = line0.bounds();
      boolean boolean0 = rectangle0.contains(3852.9294F, (-1433.001F), 0.0F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point point0 = new Point(1.0F, 1.0F);
      Point point1 = new Point(point0);
      point0.addLocal((-3.1415927F), 1.0F);
      Rectangle rectangle0 = new Rectangle(point1);
      rectangle0.add((XY) point0);
      boolean boolean0 = rectangle0.contains((XY) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1.0F), 1173.0F);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Point point0 = rectangle0.min();
      Rectangle rectangle1 = new Rectangle(1173.0F, 1173.0F, 1173.0F, 2674.9636F);
      Line line0 = new Line();
      Point point1 = line0.p2(point0);
      point1.x = 3586.0F;
      int int0 = rectangle1.outcode((XY) point0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(382.7983F, 2331.19F, (-4100.0F), (-5148.9F));
      Vector vector0 = new Vector();
      int int0 = rectangle0.outcode((XY) vector0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, (-467.92F));
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, (Transform) null);
      boolean boolean0 = abstractRectangle_Iterator0.isDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Rectangle rectangle0 = new Rectangle();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, affineTransform0);
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      float[] floatArray0 = new float[1];
      abstractRectangle_Iterator0.next();
      // Undeclared exception!
      try { 
        abstractRectangle_Iterator0.currentSegment(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.f.AbstractRectangle$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point point0 = new Point(1.0F, 1.0F);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1.0F), 2636.5742F);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Line line0 = new Line();
      line0.setLine(420.313F, 420.313F, 0.0F, 671479.1F);
      Rectangle rectangle0 = line0.bounds();
      Dimension dimension0 = new Dimension((-988.4F), 671479.1F);
      Dimension dimension1 = rectangle0.size(dimension0);
      assertEquals(671058.8F, dimension1.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Line line0 = new Line(0.0F, (-3982.719F), 0.0F, 0.0F);
      Rectangle rectangle0 = line0.bounds();
      Dimension dimension0 = new Dimension((-2092.0F), (-1359.2405F));
      Dimension dimension1 = rectangle0.size(dimension0);
      assertEquals(3982.719F, dimension1.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.translation();
      Rectangle rectangle0 = new Rectangle(vector0);
      Rectangle rectangle1 = rectangle0.intersection(1.0F, (-568.155F), (-568.155F), 1.0F);
      Dimension dimension0 = new Dimension();
      rectangle1.size(dimension0);
      assertEquals((-568.155F), dimension0.width, 0.01F);
      assertEquals(0.0F, rectangle1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3521.1838F, 4473.352F, (-1599.4642F), 0.0F);
      Dimension dimension0 = rectangle0.size();
      assertEquals((-1599.4642F), dimension0.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = rectangle0.size();
      assertEquals(0.0F, dimension0.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-202.0F), (-496.0F), 4, (-1369.0F));
      Dimension dimension0 = rectangle0.size();
      assertEquals((-1369.0F), dimension0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Rectangle rectangle0 = new Rectangle((-1054.0072F), 531010.56F, 728.7047F, (-1200.1F));
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) affineTransform0, (-1262.8479F));
      assertTrue(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1.0F), 1173.0F);
      Rectangle rectangle0 = new Rectangle(dimension0);
      AffineTransform affineTransform0 = new AffineTransform((-826.7401F), 584.8331F, 0.0F, 536721.3F);
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) affineTransform0);
      assertTrue(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Line line0 = new Line((-1573.0889F), (-1573.0889F), 0.0F, (-3.1415927F));
      Rectangle rectangle0 = line0.bounds();
      Vector vector0 = new Vector(1569.9473F, 57.295776F);
      Point point0 = rectangle0.max();
      rectangle0.setFrameFromDiagonal((XY) vector0, (XY) point0);
      int int0 = rectangle0.outcode((XY) vector0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      int int0 = rectangle0.outcode((float) 4, (float) 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point point0 = new Point(1.0F, 1.0F);
      Rectangle rectangle0 = new Rectangle(point0);
      rectangle0.setFrame(1.0F, (-1433.001F), 1.0F, (-509.466F));
      Point point1 = rectangle0.location(point0);
      assertEquals((-1433.001F), point1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1.0F), 2636.5742F);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Point point0 = rectangle0.min();
      Point point1 = rectangle0.location(point0);
      assertEquals(0.0F, point1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point point0 = new Point(1485.58F, 814.387F);
      Vector vector0 = new Vector(point0);
      Rectangle rectangle0 = new Rectangle(vector0);
      Point point1 = rectangle0.location(point0);
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 3150.9636F, 4676.147F, 3150.9636F);
      Line line0 = new Line(531010.56F, 1167.9043F, (-4831.8584F), 4676.147F);
      Point point0 = line0.p2();
      rectangle0.setFrameFromCenter((XY) point0, (XY) point0);
      Point point1 = rectangle0.location(point0);
      assertEquals(4676.147F, point1.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.grow(1690.5802F, 1.0F);
      Point point0 = rectangle0.location();
      assertEquals((-1.0F), point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point point0 = new Point(1.0F, 1.0F);
      Rectangle rectangle0 = new Rectangle(point0);
      Line line0 = new Line(926.1288F, 0.0F, 0.0F, 0.0F);
      boolean boolean0 = rectangle0.intersectsLine((ILine) line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.intersectsLine((-337.0F), (-590.6169F), 0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point point0 = new Point(1.0F, 1.0F);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.grow(1690.5802F, 1.0F);
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 3150.9636F, 4676.147F, 3150.9636F);
      Rectangle rectangle1 = rectangle0.clone();
      Line line0 = new Line(531010.56F, 1167.9043F, (-4831.8584F), 4676.147F);
      Point point0 = line0.p2();
      rectangle0.setFrameFromCenter((XY) point0, (XY) point0);
      Rectangle rectangle2 = rectangle1.intersection((IRectangle) rectangle0);
      assertEquals(0.0F, rectangle2.height, 0.01F);
      assertEquals((-4831.8584F), rectangle2.width, 0.01F);
      assertEquals(4676.147F, rectangle2.y, 0.01F);
      assertEquals(0.0F, rectangle2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = new Rectangle();
      rectangle1.setFrameFromDiagonal(1711.6367F, 1375.5415F, (-462.74463F), 62.9346F);
      Rectangle rectangle2 = rectangle0.intersection((IRectangle) rectangle1);
      assertEquals((-62.9346F), rectangle2.height, 0.01F);
      assertEquals(0.0F, rectangle2.width, 0.01F);
      assertEquals(62.9346F, rectangle2.y, 0.01F);
      assertEquals(0.0F, rectangle2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 3150.9636F, 4676.147F, 3150.9636F);
      Line line0 = new Line(531010.56F, 1167.9043F, (-4831.8584F), 4676.147F);
      Point point0 = line0.p2();
      rectangle0.setFrameFromCenter((XY) point0, (XY) point0);
      Rectangle rectangle1 = rectangle0.intersection((-5345.8975F), 1.0F, 1.0F, (-1566.2699F));
      assertEquals((-513.03906F), rectangle1.width, 0.01F);
      assertEquals((-6241.417F), rectangle1.height, 0.01F);
      assertEquals(4676.147F, rectangle1.y, 0.01F);
      assertEquals((-4831.8584F), rectangle1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.grow(1690.5802F, 1.0F);
      Rectangle rectangle1 = rectangle0.intersection(0.0F, (-462.74463F), 217.67496F, 0.0F);
      assertEquals((-1.0F), rectangle1.y, 0.01F);
      assertEquals((-461.74463F), rectangle1.height, 0.01F);
      assertEquals(0.0F, rectangle1.x, 0.01F);
      assertEquals(217.67496F, rectangle1.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Line line0 = new Line();
      Point point0 = line0.p1();
      Dimension dimension0 = new Dimension(10.0F, 1556.5984F);
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      line0.bounds(rectangle0);
      Rectangle rectangle1 = rectangle0.intersection(1556.5984F, 0.0F, 1.0F, 68.79F);
      assertEquals((-1556.5984F), rectangle1.width, 0.01F);
      assertEquals(1556.5984F, rectangle1.x, 0.01F);
      assertEquals(0.0F, rectangle1.y, 0.01F);
      assertEquals(0.0F, rectangle1.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1.0F), 2636.5742F);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = new Rectangle(2636.5742F, 2636.5742F, 2636.5742F, 2674.9636F);
      rectangle0.add((IRectangle) rectangle1);
      Rectangle rectangle2 = rectangle0.intersection(1.0F, 2636.5742F, (-1652.67F), 2636.5742F);
      assertEquals(1.0F, rectangle2.x, 0.01F);
      assertEquals((-1652.67F), rectangle2.width, 0.01F);
      assertEquals(2636.5742F, rectangle2.y, 0.01F);
      assertEquals(2636.5742F, rectangle2.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector vector0 = new Vector(728.7047F, (-3872.0F));
      Rectangle rectangle0 = new Rectangle();
      rectangle0.add((-2276.0F), 2.81972212E11F);
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector1 = new Vector();
      identityTransform0.inverseTransform((IVector) vector1, vector0);
      rectangle0.setLocation((XY) vector0);
      boolean boolean0 = rectangle0.contains(0.017453292F, 386.7725F, 0.0F, 5085.59F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1.0F), 1173.0F);
      dimension0.setSize(431.79706F, 431.79706F);
      Rectangle rectangle0 = new Rectangle(dimension0);
      boolean boolean0 = rectangle0.contains(431.79706F, 159.1368F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Line line0 = new Line((-1573.0889F), (-1573.0889F), 0.0F, (-3.1415927F));
      Rectangle rectangle0 = line0.bounds();
      Rectangle rectangle1 = rectangle0.clone();
      assertNotSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      rectangle0.setSize((-1416.28F), (float) 4);
      Rectangle rectangle1 = rectangle0.clone();
      assertNotSame(rectangle0, rectangle1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.clone();
      assertEquals(0.0F, rectangle1.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 4, (-1820.0F));
      Rectangle rectangle1 = rectangle0.clone();
      assertEquals((-1820.0F), rectangle1.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.union((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.size((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.outcode((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.intersectsLine((ILine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 1.0F, 1.0F);
      int int0 = rectangle0.outcode((float) 4, 1.0F);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.intersectsLine(1167.92F, 1167.92F, 1167.92F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.intersection(0.0F, 0.0F, 0.0F, (-2231.99F));
      boolean boolean0 = rectangle1.equals(rectangle0);
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertEquals(0.0F, rectangle1.y, 0.01F);
      assertEquals(0.0F, rectangle1.x, 0.01F);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertEquals((-2231.99F), rectangle1.height, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = new Dimension((-1949.5F), 0.5F);
      Dimension dimension1 = rectangle0.size(dimension0);
      assertEquals(0.0F, dimension1.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, (Transform) null);
      float[] floatArray0 = new float[7];
      int int0 = abstractRectangle_Iterator0.currentSegment(floatArray0);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Rectangle rectangle0 = new Rectangle(4, 0.0F, 1.0F, 1.0F);
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, affineTransform0);
      abstractRectangle_Iterator0.next();
      float[] floatArray0 = new float[4];
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      int int0 = abstractRectangle_Iterator0.currentSegment(floatArray0);
      assertArrayEquals(new float[] {4.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Rectangle rectangle0 = new Rectangle(4, 0.0F, 1.0F, 1.0F);
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, affineTransform0);
      abstractRectangle_Iterator0.next();
      float[] floatArray0 = new float[4];
      abstractRectangle_Iterator0.next();
      int int0 = abstractRectangle_Iterator0.currentSegment(floatArray0);
      assertArrayEquals(new float[] {5.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, 0.0F);
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, affineTransform0);
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      assertFalse(abstractRectangle_Iterator0.isDone());
      
      int int0 = abstractRectangle_Iterator0.currentSegment((float[]) null);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Rectangle rectangle0 = new Rectangle(4, 4, 4, (-1820.0F));
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, affineTransform0);
      // Undeclared exception!
      try { 
        abstractRectangle_Iterator0.currentSegment((float[]) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.f.AbstractRectangle$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0.0F, 0.0F, 0.0F, 0.0F);
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      Point point0 = new Point(0.0F, 5311.538F);
      rectangle0.add((XY) point0);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.translate((-1416.7516F), (-1416.7516F));
      Rectangle rectangle1 = new Rectangle((-1416.7516F), (-1416.7516F), (-1416.7516F), (-1416.7516F));
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Point point0 = rectangle0.min();
      Line line0 = new Line(point0, point0);
      Rectangle rectangle1 = line0.bounds();
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      rectangle1.grow(0.0F, (-2064.2F));
      boolean boolean0 = rectangle1.equals(rectangle0);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-2817.0F), (-1.0F), 1.0F, 0.0F);
      Rectangle rectangle1 = new Rectangle();
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      boolean boolean0 = rectangle0.equals(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.equals(rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0.0F, 0.0F, 0.0F, 0.0F);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      Line line0 = new Line();
      Point point0 = line0.p2();
      Dimension dimension0 = rectangle0.size();
      Rectangle rectangle1 = new Rectangle(point0, dimension0);
      boolean boolean0 = rectangle1.intersects(0.0F, 1.0F, 4378.5913F, (float) 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.intersects(1.0F, (float) 4, 933.0F, (-545.25F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.intersects(1.0F, 0.0F, 1802.5F, (float) 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      Rectangle rectangle1 = new Rectangle();
      boolean boolean0 = rectangle0.intersects((IRectangle) rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.intersects((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.contains(0.0F, 0.0F, 0.0F, 281.8F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.contains(1.0F, (-3.4028235E38F), (-3.4028235E38F), 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.contains(1.0F, 1.0F, (float) 4, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.contains(4007.5286F, 4007.5286F, 4007.5286F, 4007.5286F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      Point point0 = rectangle0.location();
      boolean boolean0 = rectangle0.contains((XY) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.contains(6.2831855F, (float) 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.contains((float) 4, 1.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.contains(1.0F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.contains(0.0F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 1.0F, 1.0F);
      boolean boolean0 = rectangle0.contains(0.0F, 1173.4377F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 1.0F, 1.0F);
      int int0 = rectangle0.outcode(0.0F, 1.0F);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 1.0F, 1.0F);
      int int0 = rectangle0.outcode(1.0F, (float) 4);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      int int0 = rectangle0.outcode(0.0F, 0.0F);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-202.0F), (-496.0F), 4, (-1369.0F));
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 0.0F, 1.0F, 1.0F);
      String string0 = rectangle0.toString();
      assertEquals("1.0x1.0+4.0+0.0", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Rectangle rectangle0 = new Rectangle();
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) affineTransform0, 0.0F);
      assertFalse(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.location();
      assertEquals(0.0F, point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      AffineTransform affineTransform0 = new AffineTransform();
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) affineTransform0);
      assertFalse(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertEquals(0.0F, rectangle1.x, 0.01F);
      assertEquals(0.0F, rectangle1.y, 0.01F);
      assertEquals(0.0F, rectangle1.height, 0.01F);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.intersection((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Line line0 = new Line();
      boolean boolean0 = rectangle0.intersectsLine((ILine) line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.location((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Rectangle rectangle0 = new Rectangle(4, 0.0F, 1.0F, 1.0F);
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, affineTransform0);
      abstractRectangle_Iterator0.next();
      assertFalse(abstractRectangle_Iterator0.isDone());
      
      float[] floatArray0 = new float[4];
      int int0 = abstractRectangle_Iterator0.currentSegment(floatArray0);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {5.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Rectangle rectangle0 = new Rectangle();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, affineTransform0);
      int int0 = abstractRectangle_Iterator0.windingRule();
      assertEquals(1, int0);
      assertFalse(abstractRectangle_Iterator0.isDone());
  }
}
