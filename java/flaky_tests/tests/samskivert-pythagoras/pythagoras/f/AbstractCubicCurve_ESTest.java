/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:16:04 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AbstractCubicCurve;
import pythagoras.f.AffineTransform;
import pythagoras.f.CubicCurve;
import pythagoras.f.IRectangle;
import pythagoras.f.IdentityTransform;
import pythagoras.f.PathIterator;
import pythagoras.f.Point;
import pythagoras.f.Rectangle;
import pythagoras.f.Transform;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCubicCurve_ESTest extends AbstractCubicCurve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      
      AffineTransform affineTransform0 = new AffineTransform(644.0555F, (-1183.153F), (-1.0F), 1.0F, (-1183.153F), 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(644.0555F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1183.153F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals((-1183.153F), affineTransform0.m01, 0.01F);
      assertEquals((-1.0F), affineTransform0.m10, 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, affineTransform0);
      assertNotNull(abstractCubicCurve_Iterator0);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(644.0555F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1183.153F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals((-1183.153F), affineTransform0.m01, 0.01F);
      assertEquals((-1.0F), affineTransform0.m10, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
      
      float[] floatArray0 = new float[6];
      abstractCubicCurve_Iterator0.next();
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(644.0555F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1183.153F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals((-1183.153F), affineTransform0.m01, 0.01F);
      assertEquals((-1.0F), affineTransform0.m10, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
      
      int int0 = abstractCubicCurve_Iterator0.currentSegment(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1183.153F), 0.0F, (-1183.153F), 0.0F, (-1183.153F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(644.0555F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1183.153F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals((-1183.153F), affineTransform0.m01, 0.01F);
      assertEquals((-1.0F), affineTransform0.m10, 0.01F);
      assertEquals(3, int0);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(3189.6921F, 0.0F, 0.0F, 3189.6921F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(3189.6921F, cubicCurve0.x1, 0.01F);
      assertEquals(3189.6921F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(3189.6921F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(3189.6921F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertNotNull(cubicCurve1);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(3189.6921F, cubicCurve0.x1, 0.01F);
      assertEquals(3189.6921F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(3189.6921F, cubicCurve1.x1, 0.01F);
      assertEquals(3189.6921F, cubicCurve1.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve1.y2, 0.01F);
      assertEquals(0.0F, cubicCurve1.y1, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve1.x2, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrly2, 0.01F);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(3189.6921F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(3189.6921F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlX2(), 0.01F);
      assertEquals(3189.6921F, cubicCurve1.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.y1(), 0.01F);
      assertEquals(3189.6921F, cubicCurve1.x1(), 0.01F);
      assertTrue(cubicCurve1.isEmpty());
      
      cubicCurve0.subdivide(cubicCurve0, cubicCurve1);
      assertFalse(cubicCurve0.equals((Object)cubicCurve1));
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertEquals(797.42303F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(1594.8461F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(1594.8461F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(1196.1345F, cubicCurve0.y2, 0.01F);
      assertEquals(398.71152F, cubicCurve0.x2, 0.01F);
      assertEquals(3189.6921F, cubicCurve0.x1, 0.01F);
      assertEquals(1594.8461F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(1196.1345F, cubicCurve1.y1, 0.01F);
      assertEquals(398.71152F, cubicCurve1.x1, 0.01F);
      assertEquals(797.42303F, cubicCurve1.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve1.y2, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve1.x2, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrly2, 0.01F);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(1594.8461F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(398.71152F, cubicCurve0.x2(), 0.01F);
      assertEquals(3189.6921F, cubicCurve0.x1(), 0.01F);
      assertEquals(1196.1345F, cubicCurve0.y2(), 0.01F);
      assertEquals(1594.8461F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(1594.8461F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(797.42303F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(1196.1345F, cubicCurve1.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlX2(), 0.01F);
      assertEquals(797.42303F, cubicCurve1.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.y2(), 0.01F);
      assertEquals(398.71152F, cubicCurve1.x1(), 0.01F);
      assertTrue(cubicCurve1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      
      IdentityTransform identityTransform0 = new IdentityTransform();
      assertNotNull(identityTransform0);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(0.0F, identityTransform0.tx(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleX(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleY(), 0.01F);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0F, identityTransform0.uniformScale(), 0.01F);
      assertEquals(0.0F, identityTransform0.rotation(), 0.01F);
      assertEquals(0.0F, identityTransform0.ty(), 0.01F);
      assertEquals("ident", identityTransform0.toString());
      
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, identityTransform0);
      assertNotNull(abstractCubicCurve_Iterator0);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, identityTransform0.tx(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleX(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleY(), 0.01F);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0F, identityTransform0.uniformScale(), 0.01F);
      assertEquals(0.0F, identityTransform0.rotation(), 0.01F);
      assertEquals(0.0F, identityTransform0.ty(), 0.01F);
      assertEquals("ident", identityTransform0.toString());
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
      
      boolean boolean0 = abstractCubicCurve_Iterator0.isDone();
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertFalse(boolean0);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, identityTransform0.tx(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleX(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleY(), 0.01F);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0F, identityTransform0.uniformScale(), 0.01F);
      assertEquals(0.0F, identityTransform0.rotation(), 0.01F);
      assertEquals(0.0F, identityTransform0.ty(), 0.01F);
      assertEquals("ident", identityTransform0.toString());
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-2000.69F), 0.0F, 1681.6406F, (-2000.69F), 0.0F, 3657.1707F, 0.0F, (-816.0576F));
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(3657.1707F, cubicCurve0.ctrly2, 0.01F);
      assertEquals((-2000.69F), cubicCurve0.x1, 0.01F);
      assertEquals((-816.0576F), cubicCurve0.y2, 0.01F);
      assertEquals(1681.6406F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-2000.69F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(3657.1707F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-2000.69F), cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-2000.69F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-816.0576F), cubicCurve0.y2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(1681.6406F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      
      Point point0 = cubicCurve0.p2();
      assertNotNull(point0);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(3657.1707F, cubicCurve0.ctrly2, 0.01F);
      assertEquals((-2000.69F), cubicCurve0.x1, 0.01F);
      assertEquals((-816.0576F), cubicCurve0.y2, 0.01F);
      assertEquals(1681.6406F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-2000.69F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals((-816.0576F), point0.y, 0.01F);
      assertEquals(3657.1707F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-2000.69F), cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-2000.69F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-816.0576F), cubicCurve0.y2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(1681.6406F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals((-816.0576F), point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      
      Point point0 = cubicCurve0.p2();
      assertNotNull(point0);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.5F, 0.5F, 0.5F, 0.5F, (-157.86588F), (-157.86588F), 0.5F, 0.5F);
      assertNotNull(cubicCurve0);
      assertEquals(0.5F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.5F, cubicCurve0.y1, 0.01F);
      assertEquals(0.5F, cubicCurve0.x2, 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.5F, cubicCurve0.x1, 0.01F);
      assertEquals(0.5F, cubicCurve0.y2, 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrly1, 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.5F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.y2(), 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.5F, cubicCurve0.y1(), 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.5F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrlX1(), 0.01F);
      
      Point point0 = cubicCurve0.p2();
      assertNotNull(point0);
      assertEquals(0.5F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.5F, cubicCurve0.y1, 0.01F);
      assertEquals(0.5F, cubicCurve0.x2, 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.5F, cubicCurve0.x1, 0.01F);
      assertEquals(0.5F, cubicCurve0.y2, 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrly1, 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.5F, point0.y, 0.01F);
      assertEquals(0.5F, point0.x, 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.5F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.y2(), 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.5F, cubicCurve0.y1(), 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.5F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.5F, point0.y(), 0.01F);
      assertEquals(0.5F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 1550.13F, 4398.8193F, 0.0F, 1550.13F, 0.0F, 0.0F, 4367.015F);
      assertNotNull(cubicCurve0);
      assertEquals(1550.13F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(4367.015F, cubicCurve0.y2, 0.01F);
      assertEquals(4398.8193F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(1550.13F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(1550.13F, cubicCurve0.y1(), 0.01F);
      assertEquals(1550.13F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(4367.015F, cubicCurve0.y2(), 0.01F);
      assertEquals(4398.8193F, cubicCurve0.ctrlX1(), 0.01F);
      
      Point point0 = cubicCurve0.p1();
      assertNotNull(point0);
      assertEquals(1550.13F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(4367.015F, cubicCurve0.y2, 0.01F);
      assertEquals(4398.8193F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(1550.13F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(1550.13F, point0.y, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(1550.13F, cubicCurve0.y1(), 0.01F);
      assertEquals(1550.13F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(4367.015F, cubicCurve0.y2(), 0.01F);
      assertEquals(4398.8193F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(1550.13F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(97.0F, (-3.1415927F), (-3.1415927F), (-3.1415927F), 1195.4F, (-3.1415927F), 3883.0F, 26.491333F);
      assertNotNull(cubicCurve0);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(26.491333F, cubicCurve0.y2(), 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY2(), 0.01F);
      
      Point point0 = cubicCurve0.p1();
      assertNotNull(point0);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-3.1415927F), point0.y, 0.01F);
      assertEquals(97.0F, point0.x, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(26.491333F, cubicCurve0.y2(), 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(97.0F, point0.x(), 0.01F);
      assertEquals((-3.1415927F), point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-4081.6367F), (-755.747F), 266.21512F, (-4081.6367F), 266.21512F, (-4081.6367F), (-4081.6367F), 266.21512F);
      assertNotNull(cubicCurve0);
      assertEquals(266.21512F, cubicCurve0.y2, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x2, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(266.21512F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-755.747F), cubicCurve0.y1, 0.01F);
      assertEquals(266.21512F, cubicCurve0.ctrlx2, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-4081.6367F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(266.21512F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x2(), 0.01F);
      assertEquals((-755.747F), cubicCurve0.y1(), 0.01F);
      assertEquals(266.21512F, cubicCurve0.y2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x1(), 0.01F);
      assertEquals(266.21512F, cubicCurve0.ctrlX1(), 0.01F);
      
      Point point0 = cubicCurve0.p1();
      assertNotNull(point0);
      assertEquals(266.21512F, cubicCurve0.y2, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x2, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(266.21512F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-755.747F), cubicCurve0.y1, 0.01F);
      assertEquals(266.21512F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-4081.6367F), point0.x, 0.01F);
      assertEquals((-755.747F), point0.y, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-4081.6367F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(266.21512F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x2(), 0.01F);
      assertEquals((-755.747F), cubicCurve0.y1(), 0.01F);
      assertEquals(266.21512F, cubicCurve0.y2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x1(), 0.01F);
      assertEquals(266.21512F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-755.747F), point0.y(), 0.01F);
      assertEquals((-4081.6367F), point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1738.97F), (-1738.97F), (-1738.97F), (-1738.97F), 124.54944F, 2579.876F, 2579.876F, 958.2F);
      assertNotNull(cubicCurve0);
      assertEquals(958.2F, cubicCurve0.y2, 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(2579.876F, cubicCurve0.ctrly2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1, 0.01F);
      assertEquals(958.2F, cubicCurve0.y2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1(), 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1(), 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2579.876F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlY1(), 0.01F);
      
      float float0 = cubicCurve0.flatnessSq();
      assertEquals(958.2F, cubicCurve0.y2, 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(2579.876F, cubicCurve0.ctrly2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1, 0.01F);
      assertEquals(7161346.5F, float0, 0.01F);
      assertEquals(958.2F, cubicCurve0.y2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1(), 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1(), 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2579.876F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlY1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(97.0F, (-3.1415927F), (-3.1415927F), (-3.1415927F), 1195.4F, (-3.1415927F), 3883.0F, 26.491333F);
      assertNotNull(cubicCurve0);
      assertEquals(26.491333F, cubicCurve0.y2, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-3.1415927F), cubicCurve0.y1(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2(), 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      
      float float0 = cubicCurve0.flatness();
      assertEquals(26.491333F, cubicCurve0.y2, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(100.141594F, float0, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-3.1415927F), cubicCurve0.y1(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2(), 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-2461.4F), 0.0F, 0.0F, 0.0F, 0.0F, 1935.6913F, (-2461.4F), 3129.729F);
      assertNotNull(cubicCurve0);
      assertEquals(1935.6913F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(3129.729F, cubicCurve0.y2, 0.01F);
      assertEquals((-2461.4F), cubicCurve0.x1, 0.01F);
      assertEquals((-2461.4F), cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(1935.6913F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-2461.4F), cubicCurve0.x2(), 0.01F);
      assertEquals((-2461.4F), cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(3129.729F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      
      Point point0 = cubicCurve0.ctrlP2();
      assertNotNull(point0);
      assertEquals(1935.6913F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(3129.729F, cubicCurve0.y2, 0.01F);
      assertEquals((-2461.4F), cubicCurve0.x1, 0.01F);
      assertEquals((-2461.4F), cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(1935.6913F, point0.y, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(1935.6913F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-2461.4F), cubicCurve0.x2(), 0.01F);
      assertEquals((-2461.4F), cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(3129.729F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(1935.6913F, point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      
      Point point0 = cubicCurve0.ctrlP2();
      assertNotNull(point0);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1.0F, 0.0F, (-1553.6278F), (-243.13542F), (-1553.6278F), (-243.13542F), 550.23F, 723.85F);
      assertNotNull(cubicCurve0);
      assertEquals((-243.13542F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(723.85F, cubicCurve0.y2, 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(550.23F, cubicCurve0.x2, 0.01F);
      assertEquals(1.0F, cubicCurve0.x1, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-1553.6278F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(550.23F, cubicCurve0.x2(), 0.01F);
      assertEquals(1.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(723.85F, cubicCurve0.y2(), 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrlY2(), 0.01F);
      
      Point point0 = cubicCurve0.ctrlP2();
      assertNotNull(point0);
      assertEquals((-243.13542F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(723.85F, cubicCurve0.y2, 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(550.23F, cubicCurve0.x2, 0.01F);
      assertEquals(1.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-1553.6278F), point0.x, 0.01F);
      assertEquals((-243.13542F), point0.y, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-1553.6278F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(550.23F, cubicCurve0.x2(), 0.01F);
      assertEquals(1.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(723.85F, cubicCurve0.y2(), 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-243.13542F), point0.y(), 0.01F);
      assertEquals((-1553.6278F), point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0F, 0.0F, 2765.0686F, 100.4F, 2765.0686F, (-1.0F), 100.4F, (-1.0F));
      assertNotNull(cubicCurve0);
      assertEquals(100.4F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-1.0F), cubicCurve0.y2, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(2765.0686F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(2765.0686F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(100.4F, cubicCurve0.ctrly1, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(2765.0686F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(100.4F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2765.0686F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals((-1.0F), cubicCurve0.y2(), 0.01F);
      assertEquals(100.4F, cubicCurve0.ctrlY1(), 0.01F);
      
      Point point0 = cubicCurve0.ctrlP1();
      assertNotNull(point0);
      assertEquals(100.4F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-1.0F), cubicCurve0.y2, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(2765.0686F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(2765.0686F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(100.4F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(100.4F, point0.y, 0.01F);
      assertEquals(2765.0686F, point0.x, 0.01F);
      assertEquals((-1.0F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(2765.0686F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(100.4F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2765.0686F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals((-1.0F), cubicCurve0.y2(), 0.01F);
      assertEquals(100.4F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(2765.0686F, point0.x(), 0.01F);
      assertEquals(100.4F, point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-4081.6367F), (-755.747F), (-4081.6367F), (-4081.6367F), (-4081.6367F), (-4081.6367F), (-4081.6367F), (-4081.6367F));
      assertNotNull(cubicCurve0);
      assertEquals((-4081.6367F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-755.747F), cubicCurve0.y1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x2, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.y2, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-755.747F), cubicCurve0.y1(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x1(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.y2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlY1(), 0.01F);
      
      Point point0 = cubicCurve0.ctrlP1();
      assertNotNull(point0);
      assertEquals((-4081.6367F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-755.747F), cubicCurve0.y1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x2, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.y2, 0.01F);
      assertEquals((-4081.6367F), point0.x, 0.01F);
      assertEquals((-4081.6367F), point0.y, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-755.747F), cubicCurve0.y1(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.x1(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.y2(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-4081.6367F), point0.y(), 0.01F);
      assertEquals((-4081.6367F), point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1738.97F), (-1738.97F), (-1738.97F), (-1738.97F), 124.54944F, 2579.876F, 2579.876F, 958.2F);
      assertNotNull(cubicCurve0);
      assertEquals((-1738.97F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1, 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2, 0.01F);
      assertEquals(2579.876F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(958.2F, cubicCurve0.y2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(124.54944F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(958.2F, cubicCurve0.y2(), 0.01F);
      assertEquals(2579.876F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1(), 0.01F);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      
      boolean boolean0 = cubicCurve0.contains((XY) point0);
      assertEquals((-1738.97F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1, 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2, 0.01F);
      assertEquals(2579.876F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(958.2F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertTrue(boolean0);
      assertEquals((-1738.97F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(124.54944F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(958.2F, cubicCurve0.y2(), 0.01F);
      assertEquals(2579.876F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1738.97F), (-1738.97F), (-1738.97F), (-1738.97F), 124.54944F, 2579.876F, 2579.876F, 958.2F);
      assertNotNull(cubicCurve0);
      assertEquals((-1738.97F), cubicCurve0.y1, 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1, 0.01F);
      assertEquals(958.2F, cubicCurve0.y2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(2579.876F, cubicCurve0.ctrly2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1(), 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(958.2F, cubicCurve0.y2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2579.876F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2(), 0.01F);
      
      boolean boolean0 = cubicCurve0.contains(958.2F, 958.2F);
      assertEquals((-1738.97F), cubicCurve0.y1, 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrly1, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.x1, 0.01F);
      assertEquals(958.2F, cubicCurve0.y2, 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(2579.876F, cubicCurve0.ctrly2, 0.01F);
      assertTrue(boolean0);
      assertEquals((-1738.97F), cubicCurve0.x1(), 0.01F);
      assertEquals(124.54944F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(958.2F, cubicCurve0.y2(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.y1(), 0.01F);
      assertEquals((-1738.97F), cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2579.876F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(2579.876F, cubicCurve0.x2(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-2000.69F), 0.0F, 1681.6406F, (-2000.69F), 0.0F, 3657.1707F, 0.0F, (-816.0576F));
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals((-2000.69F), cubicCurve0.x1, 0.01F);
      assertEquals((-816.0576F), cubicCurve0.y2, 0.01F);
      assertEquals(3657.1707F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(1681.6406F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-2000.69F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-816.0576F), cubicCurve0.y2(), 0.01F);
      assertEquals((-2000.69F), cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-2000.69F), cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(1681.6406F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(3657.1707F, cubicCurve0.ctrlY2(), 0.01F);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertNotNull(cubicCurve1);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals((-2000.69F), cubicCurve0.x1, 0.01F);
      assertEquals((-816.0576F), cubicCurve0.y2, 0.01F);
      assertEquals(3657.1707F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(1681.6406F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-2000.69F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve1.x2, 0.01F);
      assertEquals(0.0F, cubicCurve1.y1, 0.01F);
      assertEquals(3657.1707F, cubicCurve1.ctrly2, 0.01F);
      assertEquals((-2000.69F), cubicCurve1.x1, 0.01F);
      assertEquals((-816.0576F), cubicCurve1.y2, 0.01F);
      assertEquals(1681.6406F, cubicCurve1.ctrlx1, 0.01F);
      assertEquals((-2000.69F), cubicCurve1.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlx2, 0.01F);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-816.0576F), cubicCurve0.y2(), 0.01F);
      assertEquals((-2000.69F), cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-2000.69F), cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(1681.6406F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(3657.1707F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-816.0576F), cubicCurve1.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.x2(), 0.01F);
      assertEquals((-2000.69F), cubicCurve1.ctrlY1(), 0.01F);
      assertEquals((-2000.69F), cubicCurve1.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.y1(), 0.01F);
      assertTrue(cubicCurve1.isEmpty());
      assertEquals(3657.1707F, cubicCurve1.ctrlY2(), 0.01F);
      assertEquals(1681.6406F, cubicCurve1.ctrlX1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(97.0F, 97.0F, 97.0F, 97.0F, 1195.4F, 97.0F, 3883.0F, 444.98F);
      assertNotNull(cubicCurve0);
      assertEquals(97.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(444.98F, cubicCurve0.y2, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals(97.0F, cubicCurve0.y1, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(444.98F, cubicCurve0.y2(), 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(97.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertNotNull(cubicCurve1);
      assertEquals(97.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(444.98F, cubicCurve0.y2, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals(97.0F, cubicCurve0.y1, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(97.0F, cubicCurve1.ctrly1, 0.01F);
      assertEquals(1195.4F, cubicCurve1.ctrlx2, 0.01F);
      assertEquals(97.0F, cubicCurve1.y1, 0.01F);
      assertEquals(97.0F, cubicCurve1.x1, 0.01F);
      assertEquals(444.98F, cubicCurve1.y2, 0.01F);
      assertEquals(97.0F, cubicCurve1.ctrlx1, 0.01F);
      assertEquals(97.0F, cubicCurve1.ctrly2, 0.01F);
      assertEquals(3883.0F, cubicCurve1.x2, 0.01F);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertEquals(97.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(444.98F, cubicCurve0.y2(), 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(97.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(1195.4F, cubicCurve1.ctrlX2(), 0.01F);
      assertEquals(97.0F, cubicCurve1.x1(), 0.01F);
      assertEquals(97.0F, cubicCurve1.y1(), 0.01F);
      assertEquals(97.0F, cubicCurve1.ctrlY1(), 0.01F);
      assertTrue(cubicCurve1.isEmpty());
      assertEquals(3883.0F, cubicCurve1.x2(), 0.01F);
      assertEquals(444.98F, cubicCurve1.y2(), 0.01F);
      assertEquals(97.0F, cubicCurve1.ctrlX1(), 0.01F);
      assertEquals(97.0F, cubicCurve1.ctrlY2(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1.0F, (-1.0F), 1.0F, 1.0F, 1.0F, (-852.0F), 1.0F, (-852.0F));
      assertNotNull(cubicCurve0);
      assertEquals((-852.0F), cubicCurve0.y2, 0.01F);
      assertEquals(1.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(1.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-1.0F), cubicCurve0.y1, 0.01F);
      assertEquals(1.0F, cubicCurve0.x1, 0.01F);
      assertEquals(1.0F, cubicCurve0.x2, 0.01F);
      assertEquals((-852.0F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(1.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(1.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-852.0F), cubicCurve0.y2(), 0.01F);
      assertEquals((-1.0F), cubicCurve0.y1(), 0.01F);
      assertEquals((-852.0F), cubicCurve0.ctrlY2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(1.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(1.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(1.0F, cubicCurve0.ctrlX2(), 0.01F);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertNotNull(cubicCurve1);
      assertEquals((-852.0F), cubicCurve0.y2, 0.01F);
      assertEquals(1.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(1.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-1.0F), cubicCurve0.y1, 0.01F);
      assertEquals(1.0F, cubicCurve0.x1, 0.01F);
      assertEquals(1.0F, cubicCurve0.x2, 0.01F);
      assertEquals((-852.0F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(1.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(1.0F, cubicCurve1.x1, 0.01F);
      assertEquals((-1.0F), cubicCurve1.y1, 0.01F);
      assertEquals((-852.0F), cubicCurve1.ctrly2, 0.01F);
      assertEquals(1.0F, cubicCurve1.ctrly1, 0.01F);
      assertEquals((-852.0F), cubicCurve1.y2, 0.01F);
      assertEquals(1.0F, cubicCurve1.ctrlx1, 0.01F);
      assertEquals(1.0F, cubicCurve1.ctrlx2, 0.01F);
      assertEquals(1.0F, cubicCurve1.x2, 0.01F);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertEquals(1.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-852.0F), cubicCurve0.y2(), 0.01F);
      assertEquals((-1.0F), cubicCurve0.y1(), 0.01F);
      assertEquals((-852.0F), cubicCurve0.ctrlY2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(1.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(1.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(1.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(1.0F, cubicCurve1.ctrlX1(), 0.01F);
      assertEquals(1.0F, cubicCurve1.x2(), 0.01F);
      assertEquals(1.0F, cubicCurve1.x1(), 0.01F);
      assertEquals((-852.0F), cubicCurve1.ctrlY2(), 0.01F);
      assertEquals(1.0F, cubicCurve1.ctrlX2(), 0.01F);
      assertEquals(1.0F, cubicCurve1.ctrlY1(), 0.01F);
      assertEquals((-852.0F), cubicCurve1.y2(), 0.01F);
      assertEquals((-1.0F), cubicCurve1.y1(), 0.01F);
      assertTrue(cubicCurve1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1.0F, 0.0F, (-1553.6278F), (-243.13542F), (-1553.6278F), (-243.13542F), 550.23F, 723.85F);
      assertNotNull(cubicCurve0);
      assertEquals(1.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(723.85F, cubicCurve0.y2, 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(550.23F, cubicCurve0.x2, 0.01F);
      assertEquals(550.23F, cubicCurve0.x2(), 0.01F);
      assertEquals(1.0F, cubicCurve0.x1(), 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(723.85F, cubicCurve0.y2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-243.13542F), cubicCurve0.ctrlY2(), 0.01F);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertNotNull(cubicCurve1);
      assertEquals(1.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(723.85F, cubicCurve0.y2, 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(550.23F, cubicCurve0.x2, 0.01F);
      assertEquals((-243.13542F), cubicCurve1.ctrly1, 0.01F);
      assertEquals((-243.13542F), cubicCurve1.ctrly2, 0.01F);
      assertEquals(723.85F, cubicCurve1.y2, 0.01F);
      assertEquals(0.0F, cubicCurve1.y1, 0.01F);
      assertEquals(1.0F, cubicCurve1.x1, 0.01F);
      assertEquals(550.23F, cubicCurve1.x2, 0.01F);
      assertEquals((-1553.6278F), cubicCurve1.ctrlx2, 0.01F);
      assertEquals((-1553.6278F), cubicCurve1.ctrlx1, 0.01F);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertEquals(550.23F, cubicCurve0.x2(), 0.01F);
      assertEquals(1.0F, cubicCurve0.x1(), 0.01F);
      assertEquals((-243.13542F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-1553.6278F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(723.85F, cubicCurve0.y2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-243.13542F), cubicCurve0.ctrlY2(), 0.01F);
      assertTrue(cubicCurve1.isEmpty());
      assertEquals((-243.13542F), cubicCurve1.ctrlY1(), 0.01F);
      assertEquals((-1553.6278F), cubicCurve1.ctrlX2(), 0.01F);
      assertEquals(550.23F, cubicCurve1.x2(), 0.01F);
      assertEquals(723.85F, cubicCurve1.y2(), 0.01F);
      assertEquals((-1553.6278F), cubicCurve1.ctrlX1(), 0.01F);
      assertEquals((-243.13542F), cubicCurve1.ctrlY2(), 0.01F);
      assertEquals(1.0F, cubicCurve1.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.y1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertNotNull(cubicCurve1);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve1.y1, 0.01F);
      assertEquals(0.0F, cubicCurve1.x1, 0.01F);
      assertEquals(0.0F, cubicCurve1.y2, 0.01F);
      assertEquals(0.0F, cubicCurve1.x2, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrly1, 0.01F);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve1.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlY2(), 0.01F);
      assertTrue(cubicCurve1.isEmpty());
      assertEquals(0.0F, cubicCurve1.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve1.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve1.x2(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(265.508F, 881.0309F, 265.508F, 881.0309F, 265.508F, 72.0F, 881.0309F, 265.508F);
      assertNotNull(cubicCurve0);
      assertEquals(265.508F, cubicCurve0.x1, 0.01F);
      assertEquals(265.508F, cubicCurve0.y2, 0.01F);
      assertEquals(881.0309F, cubicCurve0.x2, 0.01F);
      assertEquals(881.0309F, cubicCurve0.y1, 0.01F);
      assertEquals(72.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(265.508F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(265.508F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(881.0309F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(265.508F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(265.508F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(881.0309F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(881.0309F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(881.0309F, cubicCurve0.y1(), 0.01F);
      assertEquals(265.508F, cubicCurve0.x1(), 0.01F);
      assertEquals(265.508F, cubicCurve0.y2(), 0.01F);
      assertEquals(72.0F, cubicCurve0.ctrlY2(), 0.01F);
      
      Rectangle rectangle0 = new Rectangle();
      assertNotNull(rectangle0);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals(0.0F, rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.height(), 0.01F);
      
      Rectangle rectangle1 = cubicCurve0.bounds(rectangle0);
      assertNotNull(rectangle1);
      assertEquals(265.508F, cubicCurve0.x1, 0.01F);
      assertEquals(265.508F, cubicCurve0.y2, 0.01F);
      assertEquals(881.0309F, cubicCurve0.x2, 0.01F);
      assertEquals(881.0309F, cubicCurve0.y1, 0.01F);
      assertEquals(72.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(265.508F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(265.508F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(881.0309F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(265.508F, rectangle0.x, 0.01F);
      assertEquals(615.5229F, rectangle0.width, 0.01F);
      assertEquals(809.0309F, rectangle0.height, 0.01F);
      assertEquals(72.0F, rectangle0.y, 0.01F);
      assertEquals(809.0309F, rectangle1.height, 0.01F);
      assertEquals(615.5229F, rectangle1.width, 0.01F);
      assertEquals(265.508F, rectangle1.x, 0.01F);
      assertEquals(72.0F, rectangle1.y, 0.01F);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(265.508F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(265.508F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(881.0309F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(881.0309F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(881.0309F, cubicCurve0.y1(), 0.01F);
      assertEquals(265.508F, cubicCurve0.x1(), 0.01F);
      assertEquals(265.508F, cubicCurve0.y2(), 0.01F);
      assertEquals(72.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(265.508F, rectangle0.x(), 0.01F);
      assertEquals(72.0F, rectangle0.y(), 0.01F);
      assertEquals(809.0309F, rectangle0.height(), 0.01F);
      assertEquals(615.5229F, rectangle0.width(), 0.01F);
      assertEquals(809.0309F, rectangle1.height(), 0.01F);
      assertEquals(265.508F, rectangle1.x(), 0.01F);
      assertEquals(72.0F, rectangle1.y(), 0.01F);
      assertEquals(615.5229F, rectangle1.width(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(rectangle0);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
      assertEquals(0.0F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals(0.0F, rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.height(), 0.01F);
      
      Rectangle rectangle1 = cubicCurve0.bounds(rectangle0);
      assertNotNull(rectangle1);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.height, 0.01F);
      assertEquals(0.0F, rectangle1.height, 0.01F);
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertEquals(0.0F, rectangle1.x, 0.01F);
      assertEquals(0.0F, rectangle1.y, 0.01F);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, rectangle0.width(), 0.01F);
      assertEquals(0.0F, rectangle0.x(), 0.01F);
      assertEquals(0.0F, rectangle0.y(), 0.01F);
      assertEquals(0.0F, rectangle0.height(), 0.01F);
      assertEquals(0.0F, rectangle1.width(), 0.01F);
      assertEquals(0.0F, rectangle1.y(), 0.01F);
      assertEquals(0.0F, rectangle1.x(), 0.01F);
      assertEquals(0.0F, rectangle1.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.5F, 0.5F, 0.5F, 0.5F, (-157.86588F), (-157.86588F), 0.5F, 0.5F);
      assertNotNull(cubicCurve0);
      assertEquals(0.5F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrly1, 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.5F, cubicCurve0.y1, 0.01F);
      assertEquals(0.5F, cubicCurve0.x1, 0.01F);
      assertEquals(0.5F, cubicCurve0.y2, 0.01F);
      assertEquals(0.5F, cubicCurve0.x2, 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.5F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-157.86588F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlY2(), 0.01F);
      
      Rectangle rectangle0 = new Rectangle((-2800.0383F), 0.5F, 1715.0F, (-1.0F));
      assertNotNull(rectangle0);
      assertEquals((-1.0F), rectangle0.height, 0.01F);
      assertEquals(1715.0F, rectangle0.width, 0.01F);
      assertEquals(0.5F, rectangle0.y, 0.01F);
      assertEquals((-2800.0383F), rectangle0.x, 0.01F);
      assertEquals((-1.0F), rectangle0.height(), 0.01F);
      assertEquals((-2800.0383F), rectangle0.x(), 0.01F);
      assertEquals(1715.0F, rectangle0.width(), 0.01F);
      assertEquals(0.5F, rectangle0.y(), 0.01F);
      
      Rectangle rectangle1 = cubicCurve0.bounds(rectangle0);
      assertNotNull(rectangle1);
      assertEquals(0.5F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrly1, 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.5F, cubicCurve0.y1, 0.01F);
      assertEquals(0.5F, cubicCurve0.x1, 0.01F);
      assertEquals(0.5F, cubicCurve0.y2, 0.01F);
      assertEquals(0.5F, cubicCurve0.x2, 0.01F);
      assertEquals((-157.86588F), rectangle0.y, 0.01F);
      assertEquals((-157.86588F), rectangle0.x, 0.01F);
      assertEquals(158.36588F, rectangle0.width, 0.01F);
      assertEquals(158.36588F, rectangle0.height, 0.01F);
      assertEquals(158.36588F, rectangle1.width, 0.01F);
      assertEquals(158.36588F, rectangle1.height, 0.01F);
      assertEquals((-157.86588F), rectangle1.y, 0.01F);
      assertEquals((-157.86588F), rectangle1.x, 0.01F);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(0.5F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.5F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.5F, cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-157.86588F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals((-157.86588F), cubicCurve0.ctrlY2(), 0.01F);
      assertEquals((-157.86588F), rectangle0.y(), 0.01F);
      assertEquals((-157.86588F), rectangle0.x(), 0.01F);
      assertEquals(158.36588F, rectangle0.height(), 0.01F);
      assertEquals(158.36588F, rectangle0.width(), 0.01F);
      assertEquals((-157.86588F), rectangle1.x(), 0.01F);
      assertEquals((-157.86588F), rectangle1.y(), 0.01F);
      assertEquals(158.36588F, rectangle1.width(), 0.01F);
      assertEquals(158.36588F, rectangle1.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(97.0F, 97.0F, 97.0F, 97.0F, 1195.4F, 97.0F, 3883.0F, 444.98F);
      assertNotNull(cubicCurve0);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals(97.0F, cubicCurve0.y1, 0.01F);
      assertEquals(444.98F, cubicCurve0.y2, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(444.98F, cubicCurve0.y2(), 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(97.0F, cubicCurve0.ctrlY1(), 0.01F);
      
      Rectangle rectangle0 = cubicCurve0.bounds();
      assertNotNull(rectangle0);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals(97.0F, cubicCurve0.y1, 0.01F);
      assertEquals(444.98F, cubicCurve0.y2, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(97.0F, rectangle0.y, 0.01F);
      assertEquals(97.0F, rectangle0.x, 0.01F);
      assertEquals(347.98F, rectangle0.height, 0.01F);
      assertEquals(3786.0F, rectangle0.width, 0.01F);
      assertEquals(444.98F, cubicCurve0.y2(), 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(97.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(97.0F, rectangle0.y(), 0.01F);
      assertEquals(97.0F, rectangle0.x(), 0.01F);
      assertEquals(3786.0F, rectangle0.width(), 0.01F);
      assertEquals(347.98F, rectangle0.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      
      // Undeclared exception!
      try { 
        cubicCurve0.pathIterator((Transform) null, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Flatness is less then zero
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      
      // Undeclared exception!
      try { 
        cubicCurve0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractCubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      
      // Undeclared exception!
      try { 
        cubicCurve0.contains((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractCubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(265.508F, 265.508F, 3078.24F, (-2.0F), (-4081.6367F), 838.21387F, (-1.0E-5F), 652.77F);
      assertNotNull(cubicCurve0);
      assertEquals(265.508F, cubicCurve0.x1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-2.0F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(265.508F, cubicCurve0.y1, 0.01F);
      assertEquals(652.77F, cubicCurve0.y2, 0.01F);
      assertEquals(838.21387F, cubicCurve0.ctrly2, 0.01F);
      assertEquals((-1.0E-5F), cubicCurve0.x2, 0.01F);
      assertEquals(3078.24F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(652.77F, cubicCurve0.y2(), 0.01F);
      assertEquals((-1.0E-5F), cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(265.508F, cubicCurve0.y1(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(265.508F, cubicCurve0.x1(), 0.01F);
      assertEquals(838.21387F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(3078.24F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-2.0F), cubicCurve0.ctrlY1(), 0.01F);
      
      boolean boolean0 = cubicCurve0.intersects(0.0F, (-1.0F), 0.0F, 0.0F);
      assertEquals(265.508F, cubicCurve0.x1, 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-2.0F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(265.508F, cubicCurve0.y1, 0.01F);
      assertEquals(652.77F, cubicCurve0.y2, 0.01F);
      assertEquals(838.21387F, cubicCurve0.ctrly2, 0.01F);
      assertEquals((-1.0E-5F), cubicCurve0.x2, 0.01F);
      assertEquals(3078.24F, cubicCurve0.ctrlx1, 0.01F);
      assertTrue(boolean0);
      assertEquals(652.77F, cubicCurve0.y2(), 0.01F);
      assertEquals((-1.0E-5F), cubicCurve0.x2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(265.508F, cubicCurve0.y1(), 0.01F);
      assertEquals((-4081.6367F), cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(265.508F, cubicCurve0.x1(), 0.01F);
      assertEquals(838.21387F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(3078.24F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-2.0F), cubicCurve0.ctrlY1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(97.0F, (-3.1415927F), (-3.1415927F), (-3.1415927F), 1195.4F, (-3.1415927F), 3883.0F, 26.491333F);
      assertNotNull(cubicCurve0);
      assertEquals((-3.1415927F), cubicCurve0.y1, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-3.1415927F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY2(), 0.01F);
      
      boolean boolean0 = cubicCurve0.intersects(3491.9822F, (-106.0F), (-3.1415927F), 2198.4912F);
      assertEquals((-3.1415927F), cubicCurve0.y1, 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly1, 0.01F);
      assertTrue(boolean0);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-3.1415927F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY2(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      
      boolean boolean0 = cubicCurve0.intersects(0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(97.0F, (-3.1415927F), (-3.1415927F), (-3.1415927F), 1195.4F, (-3.1415927F), 3883.0F, 26.491333F);
      assertNotNull(cubicCurve0);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
      
      boolean boolean0 = cubicCurve0.contains(1656.9344F, 0.0F, 0.0F, 2.7182817F);
      assertEquals(3883.0F, cubicCurve0.x2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlx1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly2, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1, 0.01F);
      assertEquals(97.0F, cubicCurve0.x1, 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrly1, 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2, 0.01F);
      assertEquals(1195.4F, cubicCurve0.ctrlx2, 0.01F);
      assertTrue(boolean0);
      assertEquals((-3.1415927F), cubicCurve0.ctrlX1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1195.4F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(26.491333F, cubicCurve0.y2(), 0.01F);
      assertEquals(3883.0F, cubicCurve0.x2(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-3.1415927F), cubicCurve0.y1(), 0.01F);
      assertEquals(97.0F, cubicCurve0.x1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      
      boolean boolean0 = cubicCurve0.contains(0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      
      // Undeclared exception!
      try { 
        cubicCurve0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractCubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      
      PathIterator pathIterator0 = cubicCurve0.pathIterator((Transform) affineTransform0);
      assertNotNull(pathIterator0);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1, pathIterator0.windingRule());
      assertFalse(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertNotNull(cubicCurve0);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      
      AffineTransform affineTransform0 = new AffineTransform(644.0555F, (-1183.153F), (-1.0F), 1.0F, (-1183.153F), 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(644.0555F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0F), affineTransform0.m10, 0.01F);
      assertEquals((-1183.153F), affineTransform0.m01, 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, affineTransform0);
      assertNotNull(abstractCubicCurve_Iterator0);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(644.0555F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0F), affineTransform0.m10, 0.01F);
      assertEquals((-1183.153F), affineTransform0.m01, 0.01F);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      
      float[] floatArray0 = new float[6];
      int int0 = abstractCubicCurve_Iterator0.currentSegment(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1183.153F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx1, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlx2, 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrly1, 0.01F);
      assertEquals(0.0F, cubicCurve0.x1, 0.01F);
      assertEquals(0.0F, cubicCurve0.y2, 0.01F);
      assertEquals(0.0F, cubicCurve0.x2, 0.01F);
      assertEquals(0.0F, cubicCurve0.y1, 0.01F);
      assertEquals(644.0555F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0F), affineTransform0.m10, 0.01F);
      assertEquals((-1183.153F), affineTransform0.m01, 0.01F);
      assertEquals(0, int0);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0F, cubicCurve0.ctrlX2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlX1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.x1(), 0.01F);
      assertEquals(0.0F, cubicCurve0.y2(), 0.01F);
      assertEquals(0.0F, cubicCurve0.ctrlY1(), 0.01F);
      assertEquals((-1183.153F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
      assertFalse(abstractCubicCurve_Iterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, identityTransform0);
      float[] floatArray0 = new float[2];
      abstractCubicCurve_Iterator0.next();
      abstractCubicCurve_Iterator0.next();
      // Undeclared exception!
      try { 
        abstractCubicCurve_Iterator0.currentSegment(floatArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.f.AbstractCubicCurve$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1.0F), (-1.0F), 265.69095F, (-1.0F), (-1.0F), 265.69095F, (-1.0F), (-1.0F));
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = cubicCurve0.intersects((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(265.508F, 881.0309F, 265.508F, 881.0309F, 265.508F, 72.0F, 881.0309F, 265.508F);
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = cubicCurve0.intersects((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(265.508F, 881.0309F, 265.508F, 881.0309F, 265.508F, 72.0F, 881.0309F, 265.508F);
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = cubicCurve0.contains((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1684.6122F, 0.0F, 26.491333F, 0.0F, 461.0F, (-2711.0F), (-4081.6367F), 461.0F);
      CubicCurve cubicCurve1 = new CubicCurve();
      Rectangle rectangle0 = cubicCurve1.bounds();
      boolean boolean0 = cubicCurve0.contains((IRectangle) rectangle0);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      boolean boolean0 = cubicCurve0.contains(1001.47955F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(97.0F, (-3.1415927F), (-3.1415927F), (-3.1415927F), 1195.4F, (-3.1415927F), 3883.0F, 26.491333F);
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 558.96F, (-3423.6946F), 3883.0F, (-4405.99F));
      PathIterator pathIterator0 = cubicCurve0.pathIterator((Transform) affineTransform0, 824.2899F);
      assertEquals(1, pathIterator0.windingRule());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      boolean boolean0 = cubicCurve0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1684.6122F, 0.0F, 26.491333F, 0.0F, 461.0F, (-2711.0F), (-4081.6367F), 461.0F);
      Point point0 = cubicCurve0.ctrlP2();
      assertEquals(461.0F, point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Point point0 = cubicCurve0.p1();
      boolean boolean0 = cubicCurve0.contains((XY) point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1684.6122F, 0.0F, 26.491333F, 0.0F, 461.0F, (-2711.0F), (-4081.6367F), 461.0F);
      Rectangle rectangle0 = cubicCurve0.bounds();
      boolean boolean0 = cubicCurve0.intersects((IRectangle) rectangle0);
      assertEquals(5766.249F, rectangle0.width, 0.01F);
      assertEquals((-4081.6367F), rectangle0.x, 0.01F);
      assertEquals(3172.0F, rectangle0.height, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      float float0 = cubicCurve0.flatness();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1684.6122F, 0.0F, 26.491333F, 0.0F, 461.0F, (-2711.0F), (-4081.6367F), 461.0F);
      Rectangle rectangle0 = cubicCurve0.bounds();
      boolean boolean0 = cubicCurve0.contains((IRectangle) rectangle0);
      assertEquals(5766.249F, rectangle0.width, 0.01F);
      assertFalse(boolean0);
      assertEquals(3172.0F, rectangle0.height, 0.01F);
      assertEquals((-2711.0F), rectangle0.y, 0.01F);
      assertEquals((-4081.6367F), rectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1684.6122F, 0.0F, 26.491333F, 0.0F, 461.0F, (-2711.0F), (-4081.6367F), 461.0F);
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      // Undeclared exception!
      try { 
        cubicCurve0.contains((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractCubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Point point0 = cubicCurve0.ctrlP1();
      assertEquals(0.0F, point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      float float0 = cubicCurve0.flatnessSq();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1684.6122F, 0.0F, 26.491333F, 0.0F, 461.0F, (-2711.0F), (-4081.6367F), 461.0F);
      Point point0 = cubicCurve0.p2();
      assertEquals(461.0F, point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      AffineTransform affineTransform0 = new AffineTransform(644.0555F, (-1183.153F), (-1.0F), 1.0F, (-1183.153F), 0.0F);
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, affineTransform0);
      int int0 = abstractCubicCurve_Iterator0.windingRule();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1684.6122F, 0.0F, 26.491333F, 0.0F, 461.0F, (-2711.0F), (-4081.6367F), 461.0F);
      boolean boolean0 = cubicCurve0.contains((-1309.0F), 0.0F, 558.96F, 461.0F);
      assertFalse(boolean0);
  }
}
