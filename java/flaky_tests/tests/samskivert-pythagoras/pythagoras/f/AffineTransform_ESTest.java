/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:40:32 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AffineTransform;
import pythagoras.f.IPoint;
import pythagoras.f.IVector;
import pythagoras.f.IdentityTransform;
import pythagoras.f.MathUtil;
import pythagoras.f.Point;
import pythagoras.f.Transform;
import pythagoras.f.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AffineTransform_ESTest extends AffineTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.setTy((-1.0F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1.0F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1.0F), affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals((-1.0F), affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals((-1.0F), affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      String string0 = affineTransform0.toString();
      assertSame(affineTransform0, affineTransform1);
      assertEquals("trans +0.0-1.0", string0);
      assertNotNull(string0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1.0F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals((-1.0F), affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translate((-12358.486F), (-12358.486F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-12358.486F), affineTransform0.tx(), 0.01F);
      assertEquals((-12358.486F), affineTransform0.ty(), 0.01F);
      assertEquals((-12358.486F), affineTransform1.tx(), 0.01F);
      assertEquals((-12358.486F), affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals((-12358.486F), affineTransform0.ty, 0.01F);
      assertEquals((-12358.486F), affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals((-12358.486F), affineTransform1.tx, 0.01F);
      assertEquals((-12358.486F), affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      
      String string0 = affineTransform0.toString();
      assertSame(affineTransform0, affineTransform1);
      assertEquals("trans -12358.486-12358.486", string0);
      assertNotNull(string0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-12358.486F), affineTransform0.tx(), 0.01F);
      assertEquals((-12358.486F), affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals((-12358.486F), affineTransform0.ty, 0.01F);
      assertEquals((-12358.486F), affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 0.0F, 1.0F, 0.0F, 4, 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(4.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(4.0F, affineTransform0.tx, 0.01F);
      
      String string0 = affineTransform0.toString();
      assertEquals("affine [+1.0 +0.0 +1.0 +0.0 +4.0+1.0]", string0);
      assertNotNull(string0);
      assertEquals(4.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(4.0F, affineTransform0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      
      affineTransform0.m01 = (-3048.898F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      
      String string0 = affineTransform0.toString();
      assertEquals("affine [+1.0 -3048.897 +0.0 +1.0 +0.0+0.0]", string0);
      assertNotNull(string0);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals((-3048.898F), affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 0.0F, 0.0F, 1.0F, 4);
      assertNotNull(affineTransform0);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0F, affineTransform0.ty, 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      
      Vector vector0 = affineTransform0.scale();
      assertNotNull(vector0);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0F, affineTransform0.ty, 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(37.008976F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(37.008976F, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0F, affineTransform0.ty, 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
      assertEquals(37.008976F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.tx, 0.01F);
      assertEquals(4.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Vector vector1 = affineTransform1.inverseTransform((IVector) vector0, vector0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(vector0, vector1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Float.NaN, vector0.y(), 0.01F);
      assertEquals(Float.NaN, vector0.x(), 0.01F);
      assertEquals(1.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Float.NaN, vector1.x(), 0.01F);
      assertEquals(Float.NaN, vector1.y(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(37.008976F, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0F, affineTransform0.ty, 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
      assertEquals(Float.NaN, vector0.x, 0.01F);
      assertEquals(Float.NaN, vector0.y, 0.01F);
      assertEquals(37.008976F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.tx, 0.01F);
      assertEquals(4.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, vector1.y, 0.01F);
      assertEquals(Float.NaN, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.87758255F, 0.0F, (-617.45F), 661.0F);
      assertNotNull(affineTransform0);
      assertEquals((-617.45F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(661.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.87758255F, affineTransform0.m11, 0.01F);
      assertEquals(661.0F, affineTransform0.ty, 0.01F);
      assertEquals((-617.45F), affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(1910.76F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-617.45F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(661.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-617.45F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(661.0F, affineTransform1.ty(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1910.7601F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(661.0F, affineTransform0.ty, 0.01F);
      assertEquals((-617.45F), affineTransform0.tx, 0.01F);
      assertEquals(661.0F, affineTransform1.ty, 0.01F);
      assertEquals(1910.7601F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals((-617.45F), affineTransform1.tx, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      
      Vector vector0 = affineTransform1.scale();
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(vector0);
      assertEquals((-617.45F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(661.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-617.45F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(661.0F, affineTransform1.ty(), 0.01F);
      assertEquals(Float.NaN, vector0.x(), 0.01F);
      assertEquals(1910.7601F, vector0.y(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1910.7601F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(661.0F, affineTransform0.ty, 0.01F);
      assertEquals((-617.45F), affineTransform0.tx, 0.01F);
      assertEquals(661.0F, affineTransform1.ty, 0.01F);
      assertEquals(1910.7601F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals((-617.45F), affineTransform1.tx, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals(Float.NaN, vector0.x, 0.01F);
      assertEquals(1910.7601F, vector0.y, 0.01F);
      
      Point point0 = new Point(vector0);
      assertNotNull(point0);
      assertEquals((-617.45F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(661.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-617.45F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(661.0F, affineTransform1.ty(), 0.01F);
      assertEquals(Float.NaN, vector0.x(), 0.01F);
      assertEquals(1910.7601F, vector0.y(), 0.01F);
      assertEquals(Float.NaN, point0.x(), 0.01F);
      assertEquals(1910.7601F, point0.y(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1910.7601F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(661.0F, affineTransform0.ty, 0.01F);
      assertEquals((-617.45F), affineTransform0.tx, 0.01F);
      assertEquals(661.0F, affineTransform1.ty, 0.01F);
      assertEquals(1910.7601F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals((-617.45F), affineTransform1.tx, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals(Float.NaN, vector0.x, 0.01F);
      assertEquals(1910.7601F, vector0.y, 0.01F);
      assertEquals(1910.7601F, point0.y, 0.01F);
      assertEquals(Float.NaN, point0.x, 0.01F);
      
      Point point1 = affineTransform1.inverseTransform((IPoint) point0, point0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertNotNull(point1);
      assertEquals((-617.45F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(661.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-617.45F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(661.0F, affineTransform1.ty(), 0.01F);
      assertEquals(Float.NaN, vector0.x(), 0.01F);
      assertEquals(1910.7601F, vector0.y(), 0.01F);
      assertEquals(Float.NaN, point0.y(), 0.01F);
      assertEquals(Float.NaN, point0.x(), 0.01F);
      assertEquals(Float.NaN, point1.y(), 0.01F);
      assertEquals(Float.NaN, point1.x(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1910.7601F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(661.0F, affineTransform0.ty, 0.01F);
      assertEquals((-617.45F), affineTransform0.tx, 0.01F);
      assertEquals(661.0F, affineTransform1.ty, 0.01F);
      assertEquals(1910.7601F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals((-617.45F), affineTransform1.tx, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals(Float.NaN, vector0.x, 0.01F);
      assertEquals(1910.7601F, vector0.y, 0.01F);
      assertEquals(Float.NaN, point0.y, 0.01F);
      assertEquals(Float.NaN, point0.x, 0.01F);
      assertEquals(Float.NaN, point1.y, 0.01F);
      assertEquals(Float.NaN, point1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1006.0F, 0.0F, (-1395.214F));
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1006.0F, affineTransform0.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) 2146982255;
      // Undeclared exception!
      try { 
        affineTransform0.transform(floatArray0, 0, floatArray0, 0, 2142501851);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1006.0F, 0.0F, (-1395.214F));
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1006.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-0.01395214F);
      // Undeclared exception!
      try { 
        affineTransform0.transform(floatArray0, 0, floatArray0, 0, 2142501851);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3440.523F, 3440.523F, 3440.523F, 3440.523F, 3440.523F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3440.523F, affineTransform0.tx(), 0.01F);
      assertEquals(3440.523F, affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3053.3237F), affineTransform0.m00, 0.01F);
      assertEquals((-3053.3237F), affineTransform0.m11, 0.01F);
      assertEquals((-1585.6896F), affineTransform0.m01, 0.01F);
      assertEquals(1585.6896F, affineTransform0.m10, 0.01F);
      assertEquals(3440.523F, affineTransform0.ty, 0.01F);
      assertEquals(3440.523F, affineTransform0.tx, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[5] = (float) 4;
      // Undeclared exception!
      try { 
        affineTransform0.transform(floatArray0, 4, floatArray0, 1463, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1463 out of bounds for length 7
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(65.2791F, 65.2791F, 65.2791F, 1910.76F, 2220.485F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-41.771046F), affineTransform0.m10, 0.01F);
      assertEquals(41.771046F, affineTransform0.m01, 0.01F);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals((-50.165134F), affineTransform0.m00, 0.01F);
      assertEquals((-50.165134F), affineTransform0.m11, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      
      float[] floatArray0 = new float[8];
      affineTransform0.transform(floatArray0, 4, floatArray0, 4, 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-41.771046F), affineTransform0.m10, 0.01F);
      assertEquals(41.771046F, affineTransform0.m01, 0.01F);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals((-50.165134F), affineTransform0.m00, 0.01F);
      assertEquals((-50.165134F), affineTransform0.m11, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3440.523F, (-1.0F), (-1.0F), 2222.6055F, 2222.6055F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      
      IPoint[] iPointArray0 = new IPoint[0];
      Point[] pointArray0 = new Point[8];
      affineTransform0.transform(iPointArray0, 4, pointArray0, 3, 0);
      assertEquals(0, iPointArray0.length);
      assertEquals(8, pointArray0.length);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, 0.0F, 1871.751F);
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1871.751F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1871.751F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1871.751F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1871.751F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(1871.751F, affineTransform0.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1871.751F, affineTransform1.ty, 0.01F);
      
      AffineTransform affineTransform2 = affineTransform0.invert();
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1871.751F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Float.NaN, affineTransform2.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(Float.NaN, affineTransform2.ty(), 0.01F);
      assertEquals(1871.751F, affineTransform0.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform2.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform2.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-2704.918F), (-2704.918F), (-696.5F), (-696.5F));
      assertNotNull(affineTransform0);
      assertEquals((-696.5F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-696.5F), affineTransform0.tx(), 0.01F);
      assertEquals((-696.5F), affineTransform0.tx, 0.01F);
      assertEquals((-696.5F), affineTransform0.ty, 0.01F);
      assertEquals(2704.8574F, affineTransform0.m00, 0.01F);
      assertEquals(2704.8574F, affineTransform0.m11, 0.01F);
      assertEquals(18.106611F, affineTransform0.m10, 0.01F);
      assertEquals((-18.106611F), affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.scaleX(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-696.5F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-696.5F), affineTransform0.tx(), 0.01F);
      assertEquals((-696.5F), affineTransform1.ty(), 0.01F);
      assertEquals((-696.5F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-696.5F), affineTransform0.tx, 0.01F);
      assertEquals((-696.5F), affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(2704.8574F, affineTransform0.m11, 0.01F);
      assertEquals(18.106611F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(18.106611F, affineTransform1.m10, 0.01F);
      assertEquals((-696.5F), affineTransform1.ty, 0.01F);
      assertEquals((-696.5F), affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.m00, 0.01F);
      assertEquals(2704.8574F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform1.setScale(1.0F, (-2170.6F));
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertNotNull(affineTransform2);
      assertEquals((-696.5F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-696.5F), affineTransform0.tx(), 0.01F);
      assertEquals((-696.5F), affineTransform1.ty(), 0.01F);
      assertEquals((-696.5F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-696.5F), affineTransform2.ty(), 0.01F);
      assertEquals((-696.5F), affineTransform2.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-696.5F), affineTransform0.tx, 0.01F);
      assertEquals((-696.5F), affineTransform0.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals((-14.529909F), affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2170.5515F), affineTransform0.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals((-2170.5515F), affineTransform1.m11, 0.01F);
      assertEquals((-696.5F), affineTransform1.ty, 0.01F);
      assertEquals((-696.5F), affineTransform1.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals((-14.529909F), affineTransform1.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform2.m01, 0.01F);
      assertEquals((-696.5F), affineTransform2.ty, 0.01F);
      assertEquals((-696.5F), affineTransform2.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2170.5515F), affineTransform2.m11, 0.01F);
      assertEquals((-14.529909F), affineTransform2.m10, 0.01F);
      
      float float0 = affineTransform1.rotation();
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals((-696.5F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-696.5F), affineTransform0.tx(), 0.01F);
      assertEquals((-696.5F), affineTransform1.ty(), 0.01F);
      assertEquals((-696.5F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-696.5F), affineTransform0.tx, 0.01F);
      assertEquals((-696.5F), affineTransform0.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals((-14.529909F), affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2170.5515F), affineTransform0.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals((-2170.5515F), affineTransform1.m11, 0.01F);
      assertEquals((-696.5F), affineTransform1.ty, 0.01F);
      assertEquals((-696.5F), affineTransform1.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals((-14.529909F), affineTransform1.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(10.0F, 10.0F, 0.0F, 10.0F, 241.34018F, 10.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(241.34018F, affineTransform0.tx(), 0.01F);
      assertEquals(10.0F, affineTransform0.ty(), 0.01F);
      assertEquals(241.34018F, affineTransform0.tx, 0.01F);
      assertEquals(10.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(10.0F, affineTransform0.m01, 0.01F);
      assertEquals(10.0F, affineTransform0.m00, 0.01F);
      assertEquals(10.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(241.34018F, affineTransform0.tx(), 0.01F);
      assertEquals(10.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(241.34018F, affineTransform1.tx(), 0.01F);
      assertEquals(10.0F, affineTransform1.ty(), 0.01F);
      assertEquals(241.34018F, affineTransform0.tx, 0.01F);
      assertEquals(10.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(241.34018F, affineTransform1.tx, 0.01F);
      assertEquals(10.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform0.setScaleX(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertNotNull(affineTransform2);
      assertEquals(4, affineTransform0.generality());
      assertEquals(241.34018F, affineTransform0.tx(), 0.01F);
      assertEquals(10.0F, affineTransform0.ty(), 0.01F);
      assertEquals(10.0F, affineTransform2.ty(), 0.01F);
      assertEquals(241.34018F, affineTransform2.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(241.34018F, affineTransform0.tx, 0.01F);
      assertEquals(10.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(10.0F, affineTransform2.ty, 0.01F);
      assertEquals(241.34018F, affineTransform2.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m00, 0.01F);
      assertEquals(0.0F, affineTransform2.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m01, 0.01F);
      assertEquals(0.0F, affineTransform2.m10, 0.01F);
      
      AffineTransform affineTransform3 = affineTransform2.shearY(Float.NaN);
      assertSame(affineTransform0, affineTransform3);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform3);
      assertSame(affineTransform3, affineTransform2);
      assertSame(affineTransform3, affineTransform0);
      assertSame(affineTransform3, affineTransform1);
      assertNotNull(affineTransform3);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Float.NaN, affineTransform0.tx(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.ty(), 0.01F);
      assertEquals(Float.NaN, affineTransform2.ty(), 0.01F);
      assertEquals(Float.NaN, affineTransform2.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(Float.NaN, affineTransform3.tx(), 0.01F);
      assertEquals(Float.NaN, affineTransform3.ty(), 0.01F);
      assertEquals(4, affineTransform3.generality());
      assertEquals(Float.NaN, affineTransform0.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform2.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform2.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform3.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform3.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform3.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform3.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform3.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform3.ty, 0.01F);
      
      float float0 = affineTransform0.uniformScale();
      assertSame(affineTransform0, affineTransform3);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Float.NaN, affineTransform0.tx(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.ty(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1006.0F, 0.0F, (-1395.214F));
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(1006.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      float[] floatArray0 = new float[9];
      affineTransform0.get(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0E-5F, 1.0E-5F, 1.0E-5F, 1006.0F, 0.0F, (-1395.214F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(1006.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-467.6F), 1801.977F, 0.0F, (-712.972F), (-712.972F), (-467.6F));
      assertNotNull(affineTransform0);
      assertEquals((-467.6F), affineTransform0.ty(), 0.01F);
      assertEquals((-712.972F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1801.977F, affineTransform0.m01, 0.01F);
      assertEquals((-712.972F), affineTransform0.m11, 0.01F);
      assertEquals((-467.6F), affineTransform0.m00, 0.01F);
      assertEquals((-712.972F), affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals((-467.6F), affineTransform0.ty, 0.01F);
      
      float[] floatArray0 = new float[5];
      // Undeclared exception!
      try { 
        affineTransform0.get(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale(1294.7878F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1294.7878F, affineTransform0.m00, 0.01F);
      assertEquals(1294.7878F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1294.7878F, affineTransform1.m00, 0.01F);
      assertEquals(1294.7878F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1642.78F, 1642.78F, 1642.78F, 3664.9773F, (-2046.0F), 1642.78F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1642.78F, affineTransform0.ty(), 0.01F);
      assertEquals((-2046.0F), affineTransform0.tx(), 0.01F);
      assertEquals(1642.78F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2046.0F), affineTransform0.tx, 0.01F);
      assertEquals(3664.9773F, affineTransform0.m11, 0.01F);
      assertEquals(1642.78F, affineTransform0.m01, 0.01F);
      assertEquals(1642.78F, affineTransform0.m00, 0.01F);
      assertEquals(1642.78F, affineTransform0.ty, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale(1642.78F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1642.78F, affineTransform0.ty(), 0.01F);
      assertEquals((-2046.0F), affineTransform0.tx(), 0.01F);
      assertEquals(1642.78F, affineTransform1.ty(), 0.01F);
      assertEquals((-2046.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2046.0F), affineTransform0.tx, 0.01F);
      assertEquals(2698726.2F, affineTransform0.m01, 0.01F);
      assertEquals(2698726.2F, affineTransform0.m10, 0.01F);
      assertEquals(2698726.2F, affineTransform0.m00, 0.01F);
      assertEquals(1642.78F, affineTransform0.ty, 0.01F);
      assertEquals(6020751.5F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2046.0F), affineTransform1.tx, 0.01F);
      assertEquals(6020751.5F, affineTransform1.m11, 0.01F);
      assertEquals(1642.78F, affineTransform1.ty, 0.01F);
      assertEquals(2698726.2F, affineTransform1.m10, 0.01F);
      assertEquals(2698726.2F, affineTransform1.m00, 0.01F);
      assertEquals(2698726.2F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      
      float float0 = affineTransform0.uniformScale();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(387.7F, 0.0F, 4170.33F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(4170.33F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(387.7F, affineTransform0.m00, 0.01F);
      assertEquals(387.7F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4170.33F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      float float0 = affineTransform0.ty();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(4170.33F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(387.7F, affineTransform0.m00, 0.01F);
      assertEquals(387.7F, affineTransform0.m11, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4170.33F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1642.78F, 1642.78F, 1642.78F, 3664.9773F, (-2046.0F), 1642.78F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1642.78F, affineTransform0.ty(), 0.01F);
      assertEquals((-2046.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1642.78F, affineTransform0.m00, 0.01F);
      assertEquals(1642.78F, affineTransform0.m01, 0.01F);
      assertEquals(1642.78F, affineTransform0.m10, 0.01F);
      assertEquals(3664.9773F, affineTransform0.m11, 0.01F);
      assertEquals(1642.78F, affineTransform0.ty, 0.01F);
      assertEquals((-2046.0F), affineTransform0.tx, 0.01F);
      
      float float0 = affineTransform0.ty();
      assertEquals(1642.78F, float0, 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1642.78F, affineTransform0.ty(), 0.01F);
      assertEquals((-2046.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1642.78F, affineTransform0.m00, 0.01F);
      assertEquals(1642.78F, affineTransform0.m01, 0.01F);
      assertEquals(1642.78F, affineTransform0.m10, 0.01F);
      assertEquals(3664.9773F, affineTransform0.m11, 0.01F);
      assertEquals(1642.78F, affineTransform0.ty, 0.01F);
      assertEquals((-2046.0F), affineTransform0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2242.0F, 2242.0F, 2242.0F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2242.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(2242.0F, affineTransform0.tx, 0.01F);
      assertEquals(1995.1853F, affineTransform0.m10, 0.01F);
      assertEquals((-1995.1853F), affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translateY((-4629.348F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4734173.5F), affineTransform0.ty(), 0.01F);
      assertEquals((-9234165.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-4734173.5F), affineTransform1.ty(), 0.01F);
      assertEquals((-9234165.0F), affineTransform1.tx(), 0.01F);
      assertEquals(1995.1853F, affineTransform0.m10, 0.01F);
      assertEquals((-9234165.0F), affineTransform0.tx, 0.01F);
      assertEquals((-1995.1853F), affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1022.6436F, affineTransform0.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m11, 0.01F);
      assertEquals((-4734173.5F), affineTransform0.ty, 0.01F);
      assertEquals(1022.6436F, affineTransform1.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1995.1853F), affineTransform1.m01, 0.01F);
      assertEquals(1995.1853F, affineTransform1.m10, 0.01F);
      assertEquals((-9234165.0F), affineTransform1.tx, 0.01F);
      assertEquals((-4734173.5F), affineTransform1.ty, 0.01F);
      
      float float0 = affineTransform0.ty();
      assertSame(affineTransform0, affineTransform1);
      assertEquals((-4734173.5F), float0, 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4734173.5F), affineTransform0.ty(), 0.01F);
      assertEquals((-9234165.0F), affineTransform0.tx(), 0.01F);
      assertEquals(1995.1853F, affineTransform0.m10, 0.01F);
      assertEquals((-9234165.0F), affineTransform0.tx, 0.01F);
      assertEquals((-1995.1853F), affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1022.6436F, affineTransform0.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m11, 0.01F);
      assertEquals((-4734173.5F), affineTransform0.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      
      float float0 = affineTransform0.tx();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.5F, (-2562.4F), 63.0F, (-1250.4F));
      assertNotNull(affineTransform0);
      assertEquals((-1250.4F), affineTransform0.ty(), 0.01F);
      assertEquals(63.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(63.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.45425472F, affineTransform0.m01, 0.01F);
      assertEquals(0.20893218F, affineTransform0.m11, 0.01F);
      assertEquals((-1250.4F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      float float0 = affineTransform0.tx();
      assertEquals(63.0F, float0, 0.01F);
      assertEquals((-1250.4F), affineTransform0.ty(), 0.01F);
      assertEquals(63.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(63.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.45425472F, affineTransform0.m01, 0.01F);
      assertEquals(0.20893218F, affineTransform0.m11, 0.01F);
      assertEquals((-1250.4F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3440.523F, (-1.0F), (-1.0F), 2222.6055F, 2222.6055F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translateX((-2607.016F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(28.877197F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4844018.0F), affineTransform0.tx(), 0.01F);
      assertEquals(28.877197F, affineTransform1.ty(), 0.01F);
      assertEquals((-4844018.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals((-4844018.0F), affineTransform0.tx, 0.01F);
      assertEquals(28.877197F, affineTransform0.ty, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4844018.0F), affineTransform1.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform1.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform1.m11, 0.01F);
      assertEquals(2895.1F, affineTransform1.m10, 0.01F);
      assertEquals(28.877197F, affineTransform1.ty, 0.01F);
      assertEquals(0.84147096F, affineTransform1.m01, 0.01F);
      
      float float0 = affineTransform0.tx();
      assertSame(affineTransform0, affineTransform1);
      assertEquals((-4844018.0F), float0, 0.01F);
      assertEquals(28.877197F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4844018.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals((-4844018.0F), affineTransform0.tx, 0.01F);
      assertEquals(28.877197F, affineTransform0.ty, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(387.7F, 0.0F, 4170.33F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4170.33F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(387.7F, affineTransform0.m00, 0.01F);
      assertEquals(387.7F, affineTransform0.m11, 0.01F);
      assertEquals(4170.33F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translateY(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4170.33F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4170.33F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(387.7F, affineTransform0.m00, 0.01F);
      assertEquals(387.7F, affineTransform0.m11, 0.01F);
      assertEquals(4170.33F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4170.33F, affineTransform1.tx, 0.01F);
      assertEquals(387.7F, affineTransform1.m00, 0.01F);
      assertEquals(387.7F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.translateY(4);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(4.0F, affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-69.0F), (-69.0F), 0.0F, 0.0F, (-69.0F));
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-69.0F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals((-69.0F), affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-69.0F), affineTransform0.m00, 0.01F);
      assertEquals((-69.0F), affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translateX(0.5F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-69.0F), affineTransform0.ty(), 0.01F);
      assertEquals((-34.5F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals((-34.5F), affineTransform1.tx(), 0.01F);
      assertEquals((-69.0F), affineTransform1.ty(), 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals((-69.0F), affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals((-34.5F), affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-69.0F), affineTransform0.m00, 0.01F);
      assertEquals((-69.0F), affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals((-34.5F), affineTransform1.tx, 0.01F);
      assertEquals((-69.0F), affineTransform1.ty, 0.01F);
      assertEquals(-0.0F, affineTransform1.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-69.0F), affineTransform1.m00, 0.01F);
      assertEquals((-69.0F), affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.translateX(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translate(0.0F, 0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 5024.534F, 0.0F, 0.0F, 5024.534F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(5024.534F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(5024.534F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(5024.534F, affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translate(0.0F, 0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(5024.534F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(5024.534F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(5024.534F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(5024.534F, affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(5024.534F, affineTransform1.ty, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(5024.534F, affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.translate(1858.9224F, (-2569.846F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-2569.846F), affineTransform0.ty(), 0.01F);
      assertEquals(1858.9224F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1858.9224F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-2569.846F), affineTransform1.ty(), 0.01F);
      assertEquals(1858.9224F, affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals((-2569.846F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1858.9224F, affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals((-2569.846F), affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(236.231F, (-2.0F), 236.231F, (-2.0F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-2.0F), affineTransform0.ty(), 0.01F);
      assertEquals(236.231F, affineTransform0.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(214.80424F, affineTransform0.m10, 0.01F);
      assertEquals(236.231F, affineTransform0.tx, 0.01F);
      assertEquals((-2.0F), affineTransform0.ty, 0.01F);
      assertEquals((-214.80424F), affineTransform0.m01, 0.01F);
      assertEquals((-98.306786F), affineTransform0.m00, 0.01F);
      assertEquals((-98.306786F), affineTransform0.m11, 0.01F);
      
      Vector vector0 = new Vector(236.231F, 2266.09F);
      assertNotNull(vector0);
      assertEquals(236.231F, vector0.x(), 0.01F);
      assertEquals(2266.09F, vector0.y(), 0.01F);
      assertEquals(236.231F, vector0.x, 0.01F);
      assertEquals(2266.09F, vector0.y, 0.01F);
      
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-2.0F), affineTransform0.ty(), 0.01F);
      assertEquals(236.231F, affineTransform0.tx(), 0.01F);
      assertEquals((-273517.44F), vector0.y(), 0.01F);
      assertEquals(463778.88F, vector0.x(), 0.01F);
      assertEquals((-273517.44F), vector1.y(), 0.01F);
      assertEquals(463778.88F, vector1.x(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(214.80424F, affineTransform0.m10, 0.01F);
      assertEquals(236.231F, affineTransform0.tx, 0.01F);
      assertEquals((-2.0F), affineTransform0.ty, 0.01F);
      assertEquals((-214.80424F), affineTransform0.m01, 0.01F);
      assertEquals((-98.306786F), affineTransform0.m00, 0.01F);
      assertEquals((-98.306786F), affineTransform0.m11, 0.01F);
      assertEquals((-273517.44F), vector0.y, 0.01F);
      assertEquals(463778.88F, vector0.x, 0.01F);
      assertEquals((-273517.44F), vector1.y, 0.01F);
      assertEquals(463778.88F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(0.5F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      
      Vector vector0 = new Vector(point0);
      assertNotNull(vector0);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Vector vector1 = affineTransform1.transformPoint(vector0, vector0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(Float.NaN, vector0.x(), 0.01F);
      assertEquals(Float.NaN, vector0.y(), 0.01F);
      assertEquals(Float.NaN, vector1.y(), 0.01F);
      assertEquals(Float.NaN, vector1.x(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(Float.NaN, vector0.x, 0.01F);
      assertEquals(Float.NaN, vector0.y, 0.01F);
      assertEquals(Float.NaN, vector1.y, 0.01F);
      assertEquals(Float.NaN, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3440.523F, (-1.0F), (-1.0F), 2222.6055F, 2222.6055F);
      assertNotNull(affineTransform0);
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translateX((-2607.016F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4844018.0F), affineTransform0.tx(), 0.01F);
      assertEquals(28.877197F, affineTransform0.ty(), 0.01F);
      assertEquals(28.877197F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-4844018.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(28.877197F, affineTransform0.ty, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals((-4844018.0F), affineTransform0.tx, 0.01F);
      assertEquals(0.84147096F, affineTransform1.m01, 0.01F);
      assertEquals(1858.9224F, affineTransform1.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4844018.0F), affineTransform1.tx, 0.01F);
      assertEquals(2895.1F, affineTransform1.m10, 0.01F);
      assertEquals(28.877197F, affineTransform1.ty, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = affineTransform1.transformPoint(vector0, vector0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4844018.0F), affineTransform0.tx(), 0.01F);
      assertEquals(28.877197F, affineTransform0.ty(), 0.01F);
      assertEquals(28.877197F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-4844018.0F), affineTransform1.tx(), 0.01F);
      assertEquals((-4844018.0F), vector0.x(), 0.01F);
      assertEquals(28.877197F, vector0.y(), 0.01F);
      assertEquals(28.877197F, vector1.y(), 0.01F);
      assertEquals((-4844018.0F), vector1.x(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(28.877197F, affineTransform0.ty, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals((-4844018.0F), affineTransform0.tx, 0.01F);
      assertEquals(0.84147096F, affineTransform1.m01, 0.01F);
      assertEquals(1858.9224F, affineTransform1.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4844018.0F), affineTransform1.tx, 0.01F);
      assertEquals(2895.1F, affineTransform1.m10, 0.01F);
      assertEquals(28.877197F, affineTransform1.ty, 0.01F);
      assertEquals(28.877197F, vector0.y, 0.01F);
      assertEquals((-4844018.0F), vector0.x, 0.01F);
      assertEquals((-4844018.0F), vector1.x, 0.01F);
      assertEquals(28.877197F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(207.0F, 3.1415927F, 3.1415927F, (-1092.4515F), 1593.1144F, 3.1415927F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1593.1144F, affineTransform0.tx(), 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty(), 0.01F);
      assertEquals(1593.1144F, affineTransform0.tx, 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty, 0.01F);
      assertEquals((-1092.4515F), affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.1415927F, affineTransform0.m01, 0.01F);
      assertEquals(3.1415927F, affineTransform0.m10, 0.01F);
      assertEquals(207.0F, affineTransform0.m00, 0.01F);
      
      Point point0 = new Point(1.0F, 1857.4955F);
      assertNotNull(point0);
      assertEquals(1.0F, point0.x(), 0.01F);
      assertEquals(1857.4955F, point0.y(), 0.01F);
      assertEquals(1857.4955F, point0.y, 0.01F);
      assertEquals(1.0F, point0.x, 0.01F);
      
      Vector vector0 = new Vector(point0);
      assertNotNull(vector0);
      assertEquals(1.0F, point0.x(), 0.01F);
      assertEquals(1857.4955F, point0.y(), 0.01F);
      assertEquals(1857.4955F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1857.4955F, point0.y, 0.01F);
      assertEquals(1.0F, point0.x, 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1857.4955F, vector0.y, 0.01F);
      
      Vector vector1 = affineTransform0.transform((IVector) vector0, vector0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1593.1144F, affineTransform0.tx(), 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty(), 0.01F);
      assertEquals(1.0F, point0.x(), 0.01F);
      assertEquals(1857.4955F, point0.y(), 0.01F);
      assertEquals((-2029220.6F), vector0.y(), 0.01F);
      assertEquals(6042.494F, vector0.x(), 0.01F);
      assertEquals((-2029220.6F), vector1.y(), 0.01F);
      assertEquals(6042.494F, vector1.x(), 0.01F);
      assertEquals(1593.1144F, affineTransform0.tx, 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty, 0.01F);
      assertEquals((-1092.4515F), affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.1415927F, affineTransform0.m01, 0.01F);
      assertEquals(3.1415927F, affineTransform0.m10, 0.01F);
      assertEquals(207.0F, affineTransform0.m00, 0.01F);
      assertEquals(1857.4955F, point0.y, 0.01F);
      assertEquals(1.0F, point0.x, 0.01F);
      assertEquals(6042.494F, vector0.x, 0.01F);
      assertEquals((-2029220.6F), vector0.y, 0.01F);
      assertEquals((-2029220.6F), vector1.y, 0.01F);
      assertEquals(6042.494F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-69.0F), (-69.0F), 0.0F, 0.0F, (-69.0F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-69.0F), affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-69.0F), affineTransform0.m00, 0.01F);
      assertEquals((-69.0F), affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals((-69.0F), affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      
      Vector vector1 = affineTransform0.transform((IVector) vector0, vector0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-69.0F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(-0.0F, vector0.y(), 0.01F);
      assertEquals(-0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-69.0F), affineTransform0.m00, 0.01F);
      assertEquals((-69.0F), affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals((-69.0F), affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(-0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
      assertEquals(-0.0F, vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Vector vector0 = affineTransform0.scale();
      assertNotNull(vector0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      
      Vector vector1 = affineTransform0.transform((IVector) vector0, vector0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector1.y(), 0.01F);
      assertEquals(1.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1.0F, vector0.y, 0.01F);
      assertEquals(1.0F, vector1.y, 0.01F);
      assertEquals(1.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1288.9F, 1288.9F, 1.0F, (-782.0F), (-782.0F), 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-782.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(1288.9F, affineTransform0.m01, 0.01F);
      assertEquals(1288.9F, affineTransform0.m00, 0.01F);
      assertEquals((-782.0F), affineTransform0.tx, 0.01F);
      assertEquals((-782.0F), affineTransform0.m11, 0.01F);
      assertEquals(1.0F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setRotation(0.5F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-782.0F), affineTransform0.tx(), 0.01F);
      assertEquals((-782.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals((-374.91107F), affineTransform0.m10, 0.01F);
      assertEquals((-782.0F), affineTransform0.tx, 0.01F);
      assertEquals(873.88727F, affineTransform0.m01, 0.01F);
      assertEquals(1599.6399F, affineTransform0.m00, 0.01F);
      assertEquals(686.2701F, affineTransform0.m11, 0.01F);
      assertEquals(1.0F, affineTransform1.ty, 0.01F);
      assertEquals(686.2701F, affineTransform1.m11, 0.01F);
      assertEquals(873.88727F, affineTransform1.m01, 0.01F);
      assertEquals(1599.6399F, affineTransform1.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-782.0F), affineTransform1.tx, 0.01F);
      assertEquals((-374.91107F), affineTransform1.m10, 0.01F);
      
      Vector vector0 = new Vector(1.0F, 1599.6399F);
      assertNotNull(vector0);
      assertEquals(1599.6399F, vector0.y(), 0.01F);
      assertEquals(1.0F, vector0.x(), 0.01F);
      assertEquals(1.0F, vector0.x, 0.01F);
      assertEquals(1599.6399F, vector0.y, 0.01F);
      
      Vector vector1 = affineTransform1.transform((IVector) vector0, vector0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-782.0F), affineTransform0.tx(), 0.01F);
      assertEquals((-782.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0F, affineTransform1.ty(), 0.01F);
      assertEquals(1098658.9F, vector0.y(), 0.01F);
      assertEquals((-598123.06F), vector0.x(), 0.01F);
      assertEquals(1098658.9F, vector1.y(), 0.01F);
      assertEquals((-598123.06F), vector1.x(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals((-374.91107F), affineTransform0.m10, 0.01F);
      assertEquals((-782.0F), affineTransform0.tx, 0.01F);
      assertEquals(873.88727F, affineTransform0.m01, 0.01F);
      assertEquals(1599.6399F, affineTransform0.m00, 0.01F);
      assertEquals(686.2701F, affineTransform0.m11, 0.01F);
      assertEquals(1.0F, affineTransform1.ty, 0.01F);
      assertEquals(686.2701F, affineTransform1.m11, 0.01F);
      assertEquals(873.88727F, affineTransform1.m01, 0.01F);
      assertEquals(1599.6399F, affineTransform1.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-782.0F), affineTransform1.tx, 0.01F);
      assertEquals((-374.91107F), affineTransform1.m10, 0.01F);
      assertEquals((-598123.06F), vector0.x, 0.01F);
      assertEquals(1098658.9F, vector0.y, 0.01F);
      assertEquals(1098658.9F, vector1.y, 0.01F);
      assertEquals((-598123.06F), vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, (-1395.214F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(1.0E-5F, affineTransform0.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      
      Point point1 = affineTransform0.transform((IPoint) point0, point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertNotNull(point1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(1.0E-5F, affineTransform0.tx(), 0.01F);
      assertEquals((-1395.214F), point0.y(), 0.01F);
      assertEquals(1.0E-5F, point0.x(), 0.01F);
      assertEquals(1.0E-5F, point1.x(), 0.01F);
      assertEquals((-1395.214F), point1.y(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals((-1395.214F), point0.y, 0.01F);
      assertEquals(1.0E-5F, point0.x, 0.01F);
      assertEquals((-1395.214F), point1.y, 0.01F);
      assertEquals(1.0E-5F, point1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      
      Point point1 = affineTransform0.transform((IPoint) point0, point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertNotNull(point1);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point1.x(), 0.01F);
      assertEquals(0.0F, point1.y(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, point1.x, 0.01F);
      assertEquals(0.0F, point1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.5707964F, 1.5707964F, 1.5707964F, (-2612.0F), (-625.4407F), (-625.4407F));
      assertNotNull(affineTransform0);
      assertEquals((-625.4407F), affineTransform0.ty(), 0.01F);
      assertEquals((-625.4407F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5707964F, affineTransform0.m00, 0.01F);
      assertEquals(1.5707964F, affineTransform0.m01, 0.01F);
      assertEquals(1.5707964F, affineTransform0.m10, 0.01F);
      assertEquals((-625.4407F), affineTransform0.ty, 0.01F);
      assertEquals((-625.4407F), affineTransform0.tx, 0.01F);
      assertEquals((-2612.0F), affineTransform0.m11, 0.01F);
      
      Vector vector0 = new Vector((-625.4407F), (-614.877F));
      assertNotNull(vector0);
      assertEquals((-625.4407F), vector0.x(), 0.01F);
      assertEquals((-614.877F), vector0.y(), 0.01F);
      assertEquals((-614.877F), vector0.y, 0.01F);
      assertEquals((-625.4407F), vector0.x, 0.01F);
      
      Point point0 = new Point(vector0);
      assertNotNull(point0);
      assertEquals((-625.4407F), vector0.x(), 0.01F);
      assertEquals((-614.877F), vector0.y(), 0.01F);
      assertEquals((-614.877F), point0.y(), 0.01F);
      assertEquals((-625.4407F), point0.x(), 0.01F);
      assertEquals((-614.877F), vector0.y, 0.01F);
      assertEquals((-625.4407F), vector0.x, 0.01F);
      assertEquals((-625.4407F), point0.x, 0.01F);
      assertEquals((-614.877F), point0.y, 0.01F);
      
      Point point1 = affineTransform0.transform((IPoint) point0, point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertNotNull(point1);
      assertEquals((-625.4407F), affineTransform0.ty(), 0.01F);
      assertEquals((-625.4407F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-625.4407F), vector0.x(), 0.01F);
      assertEquals((-614.877F), vector0.y(), 0.01F);
      assertEquals(1604450.8F, point0.y(), 0.01F);
      assertEquals((-2573.727F), point0.x(), 0.01F);
      assertEquals((-2573.727F), point1.x(), 0.01F);
      assertEquals(1604450.8F, point1.y(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5707964F, affineTransform0.m00, 0.01F);
      assertEquals(1.5707964F, affineTransform0.m01, 0.01F);
      assertEquals(1.5707964F, affineTransform0.m10, 0.01F);
      assertEquals((-625.4407F), affineTransform0.ty, 0.01F);
      assertEquals((-625.4407F), affineTransform0.tx, 0.01F);
      assertEquals((-2612.0F), affineTransform0.m11, 0.01F);
      assertEquals((-614.877F), vector0.y, 0.01F);
      assertEquals((-625.4407F), vector0.x, 0.01F);
      assertEquals(1604450.8F, point0.y, 0.01F);
      assertEquals((-2573.727F), point0.x, 0.01F);
      assertEquals((-2573.727F), point1.x, 0.01F);
      assertEquals(1604450.8F, point1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.shearY(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(207.0F, 3.1415927F, 3.1415927F, (-1092.4515F), 1593.1144F, 3.1415927F);
      assertNotNull(affineTransform0);
      assertEquals(1593.1144F, affineTransform0.tx(), 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.1415927F, affineTransform0.ty, 0.01F);
      assertEquals((-1092.4515F), affineTransform0.m11, 0.01F);
      assertEquals(207.0F, affineTransform0.m00, 0.01F);
      assertEquals(3.1415927F, affineTransform0.m01, 0.01F);
      assertEquals(1593.1144F, affineTransform0.tx, 0.01F);
      assertEquals(3.1415927F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.shearX(207.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(1593.1144F, affineTransform0.tx(), 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.1415927F, affineTransform1.ty(), 0.01F);
      assertEquals(1593.1144F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(42852.14F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.1415927F, affineTransform0.ty, 0.01F);
      assertEquals(207.0F, affineTransform0.m00, 0.01F);
      assertEquals(3.1415927F, affineTransform0.m01, 0.01F);
      assertEquals((-442.14185F), affineTransform0.m11, 0.01F);
      assertEquals(1593.1144F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(42852.14F, affineTransform1.m10, 0.01F);
      assertEquals(3.1415927F, affineTransform1.m01, 0.01F);
      assertEquals((-442.14185F), affineTransform1.m11, 0.01F);
      assertEquals(1593.1144F, affineTransform1.tx, 0.01F);
      assertEquals(207.0F, affineTransform1.m00, 0.01F);
      assertEquals(3.1415927F, affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTx(866.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(866.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(866.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(866.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(866.0F, affineTransform1.tx, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      
      AffineTransform affineTransform2 = affineTransform0.shearX(523.51F);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertNotNull(affineTransform2);
      assertEquals(4, affineTransform0.generality());
      assertEquals(866.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(866.0F, affineTransform2.tx(), 0.01F);
      assertEquals(0.0F, affineTransform2.ty(), 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(523.51F, affineTransform0.m10, 0.01F);
      assertEquals(866.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform2.m01, 0.01F);
      assertEquals(0.0F, affineTransform2.ty, 0.01F);
      assertEquals(523.51F, affineTransform2.m10, 0.01F);
      assertEquals(866.0F, affineTransform2.tx, 0.01F);
      assertEquals(1.0F, affineTransform2.m00, 0.01F);
      assertEquals(1.0F, affineTransform2.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 222.577F, 222.577F, (-1.0F), (-4135.019F));
      assertNotNull(affineTransform0);
      assertEquals((-1.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4135.019F), affineTransform0.ty(), 0.01F);
      assertEquals((-0.8887971F), affineTransform0.m00, 0.01F);
      assertEquals((-0.4583009F), affineTransform0.m10, 0.01F);
      assertEquals((-197.82579F), affineTransform0.m11, 0.01F);
      assertEquals(102.00723F, affineTransform0.m01, 0.01F);
      assertEquals((-4135.019F), affineTransform0.ty, 0.01F);
      assertEquals((-1.0F), affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.shearX(3.1415927F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-1.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4135.019F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-4135.019F), affineTransform1.ty(), 0.01F);
      assertEquals((-1.0F), affineTransform1.tx(), 0.01F);
      assertEquals((-0.8887971F), affineTransform0.m00, 0.01F);
      assertEquals(122.63939F, affineTransform0.m11, 0.01F);
      assertEquals(102.00723F, affineTransform0.m01, 0.01F);
      assertEquals((-4135.019F), affineTransform0.ty, 0.01F);
      assertEquals((-3.2505393F), affineTransform0.m10, 0.01F);
      assertEquals((-1.0F), affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4135.019F), affineTransform1.ty, 0.01F);
      assertEquals((-0.8887971F), affineTransform1.m00, 0.01F);
      assertEquals(102.00723F, affineTransform1.m01, 0.01F);
      assertEquals((-1.0F), affineTransform1.tx, 0.01F);
      assertEquals((-3.2505393F), affineTransform1.m10, 0.01F);
      assertEquals(122.63939F, affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(65.2791F, 65.2791F, 1614.0F, 1910.76F, 2220.485F);
      assertNotNull(affineTransform0);
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-45.845543F), affineTransform0.m01, 0.01F);
      assertEquals(45.845543F, affineTransform0.m10, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(46.470924F, affineTransform0.m00, 0.01F);
      assertEquals(46.470924F, affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.shear((-1647.2034F), (-2602208.2F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals(1910.76F, affineTransform1.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform1.ty(), 0.01F);
      assertEquals((-1.192996E8F), affineTransform0.m00, 0.01F);
      assertEquals(75563.4F, affineTransform0.m11, 0.01F);
      assertEquals((-76501.22F), affineTransform0.m10, 0.01F);
      assertEquals((-1.20927072E8F), affineTransform0.m01, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2220.485F, affineTransform1.ty, 0.01F);
      assertEquals((-1.20927072E8F), affineTransform1.m01, 0.01F);
      assertEquals((-1.192996E8F), affineTransform1.m00, 0.01F);
      assertEquals(75563.4F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-76501.22F), affineTransform1.m10, 0.01F);
      assertEquals(1910.76F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2242.0F, 2242.0F, 2242.0F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(2242.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(2242.0F, affineTransform0.tx, 0.01F);
      assertEquals(1995.1853F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1995.1853F), affineTransform0.m01, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translateY((-4629.348F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-9234165.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4734173.5F), affineTransform0.ty(), 0.01F);
      assertEquals((-9234165.0F), affineTransform1.tx(), 0.01F);
      assertEquals((-4734173.5F), affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-4734173.5F), affineTransform0.ty, 0.01F);
      assertEquals(1995.1853F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-9234165.0F), affineTransform0.tx, 0.01F);
      assertEquals((-1995.1853F), affineTransform0.m01, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m11, 0.01F);
      assertEquals((-1995.1853F), affineTransform1.m01, 0.01F);
      assertEquals(1995.1853F, affineTransform1.m10, 0.01F);
      assertEquals((-4734173.5F), affineTransform1.ty, 0.01F);
      assertEquals(1022.6436F, affineTransform1.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform1.m11, 0.01F);
      assertEquals((-9234165.0F), affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform1.setUniformScale((-604.1789F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertNotNull(affineTransform2);
      assertEquals((-9234165.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4734173.5F), affineTransform0.ty(), 0.01F);
      assertEquals((-9234165.0F), affineTransform1.tx(), 0.01F);
      assertEquals((-4734173.5F), affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-9234165.0F), affineTransform2.tx(), 0.01F);
      assertEquals((-4734173.5F), affineTransform2.ty(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-275.58417F), affineTransform0.m00, 0.01F);
      assertEquals((-275.58417F), affineTransform0.m11, 0.01F);
      assertEquals((-4734173.5F), affineTransform0.ty, 0.01F);
      assertEquals((-537.66675F), affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(537.66675F, affineTransform0.m01, 0.01F);
      assertEquals((-9234165.0F), affineTransform0.tx, 0.01F);
      assertEquals((-537.66675F), affineTransform1.m10, 0.01F);
      assertEquals((-4734173.5F), affineTransform1.ty, 0.01F);
      assertEquals((-9234165.0F), affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(537.66675F, affineTransform1.m01, 0.01F);
      assertEquals((-275.58417F), affineTransform1.m00, 0.01F);
      assertEquals((-275.58417F), affineTransform1.m11, 0.01F);
      assertEquals((-537.66675F), affineTransform2.m10, 0.01F);
      assertEquals((-9234165.0F), affineTransform2.tx, 0.01F);
      assertEquals((-4734173.5F), affineTransform2.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(537.66675F, affineTransform2.m01, 0.01F);
      assertEquals((-275.58417F), affineTransform2.m00, 0.01F);
      assertEquals((-275.58417F), affineTransform2.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTy(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(387.7F, 0.0F, 4170.33F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4170.33F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4170.33F, affineTransform0.tx, 0.01F);
      assertEquals(387.7F, affineTransform0.m00, 0.01F);
      assertEquals(387.7F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.setTy(387.7F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(387.7F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4170.33F, affineTransform0.tx(), 0.01F);
      assertEquals(4170.33F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(387.7F, affineTransform1.ty(), 0.01F);
      assertEquals(4170.33F, affineTransform0.tx, 0.01F);
      assertEquals(387.7F, affineTransform0.m00, 0.01F);
      assertEquals(387.7F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(387.7F, affineTransform0.ty, 0.01F);
      assertEquals(387.7F, affineTransform1.ty, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(4170.33F, affineTransform1.tx, 0.01F);
      assertEquals(387.7F, affineTransform1.m00, 0.01F);
      assertEquals(387.7F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1288.9F, 1288.9F, 1.0F, (-782.0F), (-782.0F), 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-782.0F), affineTransform0.tx(), 0.01F);
      assertEquals(1288.9F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m10, 0.01F);
      assertEquals(1288.9F, affineTransform0.m01, 0.01F);
      assertEquals((-782.0F), affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-782.0F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTy((-15.636753F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-15.636753F), affineTransform0.ty(), 0.01F);
      assertEquals((-782.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-15.636753F), affineTransform1.ty(), 0.01F);
      assertEquals((-782.0F), affineTransform1.tx(), 0.01F);
      assertEquals(1288.9F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m10, 0.01F);
      assertEquals(1288.9F, affineTransform0.m01, 0.01F);
      assertEquals((-782.0F), affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-782.0F), affineTransform0.tx, 0.01F);
      assertEquals((-15.636753F), affineTransform0.ty, 0.01F);
      assertEquals((-782.0F), affineTransform1.m11, 0.01F);
      assertEquals((-15.636753F), affineTransform1.ty, 0.01F);
      assertEquals(1288.9F, affineTransform1.m00, 0.01F);
      assertEquals(1288.9F, affineTransform1.m01, 0.01F);
      assertEquals((-782.0F), affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTx(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1288.9F, 1288.9F, 1.0F, (-782.0F), (-782.0F), 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-782.0F), affineTransform0.tx(), 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals((-782.0F), affineTransform0.tx, 0.01F);
      assertEquals(1288.9F, affineTransform0.m01, 0.01F);
      assertEquals(1288.9F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-782.0F), affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTx((-1868.5875F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-1868.5875F), affineTransform0.tx(), 0.01F);
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1868.5875F), affineTransform1.tx(), 0.01F);
      assertEquals(1.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(1288.9F, affineTransform0.m01, 0.01F);
      assertEquals(1288.9F, affineTransform0.m00, 0.01F);
      assertEquals((-1868.5875F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-782.0F), affineTransform0.m11, 0.01F);
      assertEquals(1.0F, affineTransform1.m10, 0.01F);
      assertEquals(1288.9F, affineTransform1.m01, 0.01F);
      assertEquals((-1868.5875F), affineTransform1.tx, 0.01F);
      assertEquals(1288.9F, affineTransform1.m00, 0.01F);
      assertEquals((-782.0F), affineTransform1.m11, 0.01F);
      assertEquals(1.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.setTranslation(0.0F, (-2030.285F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-2030.285F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-2030.285F), affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-2030.285F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2030.285F), affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1286.0157F, 1286.0157F, 0.0F, 4597.0F, 4597.0F);
      assertNotNull(affineTransform0);
      assertEquals(4597.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4597.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4597.0F, affineTransform0.tx, 0.01F);
      assertEquals(4597.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1286.0157F, affineTransform0.m00, 0.01F);
      assertEquals(1286.0157F, affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTranslation((-14.81F), 0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-14.81F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals((-14.81F), affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-14.81F), affineTransform0.tx, 0.01F);
      assertEquals(1286.0157F, affineTransform0.m00, 0.01F);
      assertEquals(1286.0157F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(1286.0157F, affineTransform1.m00, 0.01F);
      assertEquals(1286.0157F, affineTransform1.m11, 0.01F);
      assertEquals((-14.81F), affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2220.485F, 1614.0F, 65.2791F, 1614.0F, (-1526.2289F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1614.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-1526.2289F), affineTransform0.ty(), 0.01F);
      assertEquals((-1526.2289F), affineTransform0.ty, 0.01F);
      assertEquals(1614.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1420.8528F), affineTransform0.m10, 0.01F);
      assertEquals(1032.7727F, affineTransform0.m01, 0.01F);
      assertEquals((-1706.3798F), affineTransform0.m00, 0.01F);
      assertEquals((-1240.3131F), affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTransform(1.0F, 0.017453292F, 1951.7827F, 0.0F, (-1.2912807F), 0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-1.2912807F), affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1.2912807F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.017453292F, affineTransform0.m01, 0.01F);
      assertEquals(1951.7827F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals((-1.2912807F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals((-1.2912807F), affineTransform1.tx, 0.01F);
      assertEquals(0.017453292F, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m11, 0.01F);
      assertEquals(1951.7827F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTransform(1072.4115F, 1072.4115F, 1072.4115F, 1072.4115F, 260993.56F, (-2430.1511F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(260993.56F, affineTransform0.tx(), 0.01F);
      assertEquals((-2430.1511F), affineTransform0.ty(), 0.01F);
      assertEquals((-2430.1511F), affineTransform1.ty(), 0.01F);
      assertEquals(260993.56F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1072.4115F, affineTransform0.m10, 0.01F);
      assertEquals(1072.4115F, affineTransform0.m00, 0.01F);
      assertEquals(1072.4115F, affineTransform0.m11, 0.01F);
      assertEquals(1072.4115F, affineTransform0.m01, 0.01F);
      assertEquals(260993.56F, affineTransform0.tx, 0.01F);
      assertEquals((-2430.1511F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1072.4115F, affineTransform1.m01, 0.01F);
      assertEquals(1072.4115F, affineTransform1.m10, 0.01F);
      assertEquals(1072.4115F, affineTransform1.m00, 0.01F);
      assertEquals(1072.4115F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2430.1511F), affineTransform1.ty, 0.01F);
      assertEquals(260993.56F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.5F, 0.5F, 722.0352F, 722.0352F, 722.0352F, (-1630.7F));
      assertNotNull(affineTransform0);
      assertEquals((-1630.7F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(722.0352F, affineTransform0.tx(), 0.01F);
      assertEquals(722.0352F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(722.0352F, affineTransform0.m10, 0.01F);
      assertEquals(0.5F, affineTransform0.m00, 0.01F);
      assertEquals(0.5F, affineTransform0.m01, 0.01F);
      assertEquals(722.0352F, affineTransform0.tx, 0.01F);
      assertEquals((-1630.7F), affineTransform0.ty, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTransform((-1750.3512F), (-1.0F), 722.0352F, 0.5F, (-1750.3512F), 0.5F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1750.3512F), affineTransform0.tx(), 0.01F);
      assertEquals(0.5F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.5F, affineTransform1.ty(), 0.01F);
      assertEquals((-1750.3512F), affineTransform1.tx(), 0.01F);
      assertEquals(0.5F, affineTransform0.ty, 0.01F);
      assertEquals((-1750.3512F), affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(722.0352F, affineTransform0.m10, 0.01F);
      assertEquals(0.5F, affineTransform0.m11, 0.01F);
      assertEquals((-1.0F), affineTransform0.m01, 0.01F);
      assertEquals((-1750.3512F), affineTransform0.m00, 0.01F);
      assertEquals((-1750.3512F), affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.5F, affineTransform1.m11, 0.01F);
      assertEquals((-1.0F), affineTransform1.m01, 0.01F);
      assertEquals(722.0352F, affineTransform1.m10, 0.01F);
      assertEquals(0.5F, affineTransform1.ty, 0.01F);
      assertEquals((-1750.3512F), affineTransform1.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3440.523F, (-1.0F), (-1.0F), 2222.6055F, 2222.6055F);
      assertNotNull(affineTransform0);
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleY(1858.9224F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2222.6055F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2222.6055F, affineTransform1.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.3469241F), affineTransform0.m11, 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1858.9224F, affineTransform1.m10, 0.01F);
      assertEquals(1858.9224F, affineTransform1.m00, 0.01F);
      assertEquals(2222.6055F, affineTransform1.tx, 0.01F);
      assertEquals(2222.6055F, affineTransform1.ty, 0.01F);
      assertEquals((-0.3469241F), affineTransform1.m11, 0.01F);
      assertEquals(0.84147096F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setTx(866.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(866.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(866.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(866.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(866.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform1.setScaleY((-968.981F));
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertNotNull(affineTransform2);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(866.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(866.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(866.0F, affineTransform2.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0F, affineTransform2.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(866.0F, affineTransform0.tx, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals((-968.981F), affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(866.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals((-968.981F), affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform2.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-968.981F), affineTransform2.m11, 0.01F);
      assertEquals(-0.0F, affineTransform2.m10, 0.01F);
      assertEquals(866.0F, affineTransform2.tx, 0.01F);
      assertEquals(0.0F, affineTransform2.m01, 0.01F);
      assertEquals(1.0F, affineTransform2.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 222.577F, 222.577F, (-1.0F), (-4135.019F));
      assertNotNull(affineTransform0);
      assertEquals((-4135.019F), affineTransform0.ty(), 0.01F);
      assertEquals((-1.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4135.019F), affineTransform0.ty, 0.01F);
      assertEquals((-1.0F), affineTransform0.tx, 0.01F);
      assertEquals((-197.82579F), affineTransform0.m11, 0.01F);
      assertEquals((-0.4583009F), affineTransform0.m10, 0.01F);
      assertEquals(102.00723F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.8887971F), affineTransform0.m00, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleY(1.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-4135.019F), affineTransform0.ty(), 0.01F);
      assertEquals((-1.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1.0F), affineTransform1.tx(), 0.01F);
      assertEquals((-4135.019F), affineTransform1.ty(), 0.01F);
      assertEquals((-4135.019F), affineTransform0.ty, 0.01F);
      assertEquals((-1.0F), affineTransform0.tx, 0.01F);
      assertEquals((-0.9999973F), affineTransform0.m11, 0.01F);
      assertEquals(102.00723F, affineTransform0.m01, 0.01F);
      assertEquals((-0.002316683F), affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.8887971F), affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.9999973F), affineTransform1.m11, 0.01F);
      assertEquals((-0.8887971F), affineTransform1.m00, 0.01F);
      assertEquals(102.00723F, affineTransform1.m01, 0.01F);
      assertEquals((-1.0F), affineTransform1.tx, 0.01F);
      assertEquals((-0.002316683F), affineTransform1.m10, 0.01F);
      assertEquals((-4135.019F), affineTransform1.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleX(2.7182817F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2.7182817F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(2.7182817F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F));
      assertNotNull(affineTransform0);
      assertEquals((-1353.6609F), affineTransform0.ty(), 0.01F);
      assertEquals((-1353.6609F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1353.6609F), affineTransform0.m01, 0.01F);
      assertEquals((-1353.6609F), affineTransform0.m10, 0.01F);
      assertEquals((-1353.6609F), affineTransform0.m00, 0.01F);
      assertEquals((-1353.6609F), affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1353.6609F), affineTransform0.ty, 0.01F);
      assertEquals((-1353.6609F), affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleX(2188.4597F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-1353.6609F), affineTransform0.ty(), 0.01F);
      assertEquals((-1353.6609F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1353.6609F), affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1353.6609F), affineTransform1.tx(), 0.01F);
      assertEquals((-1353.6609F), affineTransform0.m10, 0.01F);
      assertEquals((-1353.6609F), affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1547.4747F), affineTransform0.m01, 0.01F);
      assertEquals((-1547.4747F), affineTransform0.m00, 0.01F);
      assertEquals((-1353.6609F), affineTransform0.ty, 0.01F);
      assertEquals((-1353.6609F), affineTransform0.tx, 0.01F);
      assertEquals((-1547.4747F), affineTransform1.m01, 0.01F);
      assertEquals((-1353.6609F), affineTransform1.ty, 0.01F);
      assertEquals((-1353.6609F), affineTransform1.m10, 0.01F);
      assertEquals((-1353.6609F), affineTransform1.m11, 0.01F);
      assertEquals((-1353.6609F), affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1547.4747F), affineTransform1.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(65.2791F, 65.2791F, 1614.0F, 1910.76F, 2220.485F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(45.845543F, affineTransform0.m10, 0.01F);
      assertEquals((-45.845543F), affineTransform0.m01, 0.01F);
      assertEquals(46.470924F, affineTransform0.m00, 0.01F);
      assertEquals(46.470924F, affineTransform0.m11, 0.01F);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setRotation((-1949.4758F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1910.76F, affineTransform1.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform1.ty(), 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(64.82831F, affineTransform0.m10, 0.01F);
      assertEquals((-64.82831F), affineTransform0.m01, 0.01F);
      assertEquals((-7.658396F), affineTransform0.m00, 0.01F);
      assertEquals((-7.658396F), affineTransform0.m11, 0.01F);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-7.658396F), affineTransform1.m00, 0.01F);
      assertEquals((-7.658396F), affineTransform1.m11, 0.01F);
      assertEquals(1910.76F, affineTransform1.tx, 0.01F);
      assertEquals(2220.485F, affineTransform1.ty, 0.01F);
      assertEquals(64.82831F, affineTransform1.m10, 0.01F);
      assertEquals((-64.82831F), affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2242.0F, 2242.0F, 2242.0F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(2242.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-1995.1853F), affineTransform0.m01, 0.01F);
      assertEquals(2242.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1022.6436F, affineTransform0.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m11, 0.01F);
      assertEquals(1995.1853F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translateY((-4629.348F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4734173.5F), affineTransform0.ty(), 0.01F);
      assertEquals((-9234165.0F), affineTransform0.tx(), 0.01F);
      assertEquals((-4734173.5F), affineTransform1.ty(), 0.01F);
      assertEquals((-9234165.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1995.1853F), affineTransform0.m01, 0.01F);
      assertEquals((-4734173.5F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-9234165.0F), affineTransform0.tx, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform0.m11, 0.01F);
      assertEquals(1995.1853F, affineTransform0.m10, 0.01F);
      assertEquals(1995.1853F, affineTransform1.m10, 0.01F);
      assertEquals((-9234165.0F), affineTransform1.tx, 0.01F);
      assertEquals((-1995.1853F), affineTransform1.m01, 0.01F);
      assertEquals(1022.6436F, affineTransform1.m00, 0.01F);
      assertEquals(1022.6436F, affineTransform1.m11, 0.01F);
      assertEquals((-4734173.5F), affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform0.setRotation((-4629.348F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertNotNull(affineTransform2);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4734173.5F), affineTransform0.ty(), 0.01F);
      assertEquals((-9234165.0F), affineTransform0.tx(), 0.01F);
      assertEquals((-9234165.0F), affineTransform2.tx(), 0.01F);
      assertEquals((-4734173.5F), affineTransform2.ty(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-4734173.5F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-9234165.0F), affineTransform0.tx, 0.01F);
      assertEquals((-2192.1033F), affineTransform0.m10, 0.01F);
      assertEquals(470.36954F, affineTransform0.m00, 0.01F);
      assertEquals(470.36954F, affineTransform0.m11, 0.01F);
      assertEquals(2192.1033F, affineTransform0.m01, 0.01F);
      assertEquals(470.36954F, affineTransform2.m00, 0.01F);
      assertEquals(470.36954F, affineTransform2.m11, 0.01F);
      assertEquals((-2192.1033F), affineTransform2.m10, 0.01F);
      assertEquals(2192.1033F, affineTransform2.m01, 0.01F);
      assertEquals((-9234165.0F), affineTransform2.tx, 0.01F);
      assertEquals((-4734173.5F), affineTransform2.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, (-1395.214F));
      assertNotNull(affineTransform0);
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0E-5F, affineTransform0.tx(), 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.set(affineTransform0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0E-5F, affineTransform0.tx(), 0.01F);
      assertEquals(1.0E-5F, affineTransform1.tx(), 0.01F);
      assertEquals((-1395.214F), affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform1.m01, 0.01F);
      assertEquals(1.0E-5F, affineTransform1.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform1.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform1.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3440.523F, (-1.0F), (-1.0F), 2222.6055F, 2222.6055F);
      assertNotNull(affineTransform0);
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translateX((-2607.016F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(28.877197F, affineTransform0.ty(), 0.01F);
      assertEquals((-4844018.0F), affineTransform0.tx(), 0.01F);
      assertEquals((-4844018.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(28.877197F, affineTransform1.ty(), 0.01F);
      assertEquals((-4844018.0F), affineTransform0.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(28.877197F, affineTransform0.ty, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(28.877197F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4844018.0F), affineTransform1.tx, 0.01F);
      assertEquals(0.84147096F, affineTransform1.m01, 0.01F);
      assertEquals(2895.1F, affineTransform1.m10, 0.01F);
      assertEquals(1858.9224F, affineTransform1.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform1.m11, 0.01F);
      
      AffineTransform affineTransform2 = affineTransform0.set(affineTransform0);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertNotNull(affineTransform2);
      assertEquals(4, affineTransform0.generality());
      assertEquals(28.877197F, affineTransform0.ty(), 0.01F);
      assertEquals((-4844018.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-4844018.0F), affineTransform2.tx(), 0.01F);
      assertEquals(28.877197F, affineTransform2.ty(), 0.01F);
      assertEquals((-4844018.0F), affineTransform0.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(28.877197F, affineTransform0.ty, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(28.877197F, affineTransform2.ty, 0.01F);
      assertEquals((-4844018.0F), affineTransform2.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform2.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform2.m11, 0.01F);
      assertEquals(0.84147096F, affineTransform2.m01, 0.01F);
      assertEquals(2895.1F, affineTransform2.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.set(affineTransform0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.scaleY((-1.0F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals((-1.0F), affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals((-1.0F), affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1642.78F, 1642.78F, 1642.78F, 3664.9773F, (-2046.0F), 1642.78F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-2046.0F), affineTransform0.tx(), 0.01F);
      assertEquals(1642.78F, affineTransform0.ty(), 0.01F);
      assertEquals(1642.78F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2046.0F), affineTransform0.tx, 0.01F);
      assertEquals(1642.78F, affineTransform0.ty, 0.01F);
      assertEquals(3664.9773F, affineTransform0.m11, 0.01F);
      assertEquals(1642.78F, affineTransform0.m01, 0.01F);
      assertEquals(1642.78F, affineTransform0.m00, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.scaleY(3796.8481F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-2046.0F), affineTransform0.tx(), 0.01F);
      assertEquals(1642.78F, affineTransform0.ty(), 0.01F);
      assertEquals((-2046.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1642.78F, affineTransform1.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2046.0F), affineTransform0.tx, 0.01F);
      assertEquals(1642.78F, affineTransform0.ty, 0.01F);
      assertEquals(1.3915362E7F, affineTransform0.m11, 0.01F);
      assertEquals(1642.78F, affineTransform0.m01, 0.01F);
      assertEquals(6237386.5F, affineTransform0.m10, 0.01F);
      assertEquals(1642.78F, affineTransform0.m00, 0.01F);
      assertEquals(1.3915362E7F, affineTransform1.m11, 0.01F);
      assertEquals(1642.78F, affineTransform1.ty, 0.01F);
      assertEquals((-2046.0F), affineTransform1.tx, 0.01F);
      assertEquals(6237386.5F, affineTransform1.m10, 0.01F);
      assertEquals(1642.78F, affineTransform1.m00, 0.01F);
      assertEquals(1642.78F, affineTransform1.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-14.823062F), 1872.72F, 1.0F, 1872.72F, (-519.0F));
      assertNotNull(affineTransform0);
      assertEquals((-519.0F), affineTransform0.ty(), 0.01F);
      assertEquals(1872.72F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-8.008934F), affineTransform0.m00, 0.01F);
      assertEquals(12.473176F, affineTransform0.m10, 0.01F);
      assertEquals(1872.72F, affineTransform0.tx, 0.01F);
      assertEquals(1011.83484F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-519.0F), affineTransform0.ty, 0.01F);
      assertEquals(1575.8395F, affineTransform0.m01, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.scale((-14.823062F), -0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-519.0F), affineTransform0.ty(), 0.01F);
      assertEquals(1872.72F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals((-519.0F), affineTransform1.ty(), 0.01F);
      assertEquals(1872.72F, affineTransform1.tx(), 0.01F);
      assertEquals(1872.72F, affineTransform0.tx, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-23358.766F), affineTransform0.m01, 0.01F);
      assertEquals((-519.0F), affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m11, 0.01F);
      assertEquals(118.71693F, affineTransform0.m00, 0.01F);
      assertEquals(-0.0F, affineTransform1.m11, 0.01F);
      assertEquals((-519.0F), affineTransform1.ty, 0.01F);
      assertEquals(118.71693F, affineTransform1.m00, 0.01F);
      assertEquals((-23358.766F), affineTransform1.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1872.72F, affineTransform1.tx, 0.01F);
      
      float float0 = affineTransform1.scaleY();
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-519.0F), affineTransform0.ty(), 0.01F);
      assertEquals(1872.72F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals((-519.0F), affineTransform1.ty(), 0.01F);
      assertEquals(1872.72F, affineTransform1.tx(), 0.01F);
      assertEquals(1872.72F, affineTransform0.tx, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-23358.766F), affineTransform0.m01, 0.01F);
      assertEquals((-519.0F), affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m11, 0.01F);
      assertEquals(118.71693F, affineTransform0.m00, 0.01F);
      assertEquals(-0.0F, affineTransform1.m11, 0.01F);
      assertEquals((-519.0F), affineTransform1.ty, 0.01F);
      assertEquals(118.71693F, affineTransform1.m00, 0.01F);
      assertEquals((-23358.766F), affineTransform1.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1872.72F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      float float0 = affineTransform0.scaleY();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1286.0157F, 1286.0157F, 0.0F, 4597.0F, 4597.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4597.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4597.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1286.0157F, affineTransform0.m00, 0.01F);
      assertEquals(1286.0157F, affineTransform0.m11, 0.01F);
      assertEquals(4597.0F, affineTransform0.tx, 0.01F);
      assertEquals(4597.0F, affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.scaleX(2845.941F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4597.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4597.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4597.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4597.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3659924.8F, affineTransform0.m00, 0.01F);
      assertEquals(1286.0157F, affineTransform0.m11, 0.01F);
      assertEquals(4597.0F, affineTransform0.tx, 0.01F);
      assertEquals(4597.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4597.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(3659924.8F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(4597.0F, affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1286.0157F, affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 1.0F, 1.0F, 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals((-0.84147096F), affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(0.5403023F, affineTransform0.m00, 0.01F);
      assertEquals(0.5403023F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.translate((-1299.0F), 1.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals((-1091.5305F), affineTransform0.ty(), 0.01F);
      assertEquals((-701.69415F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-701.69415F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1091.5305F), affineTransform1.ty(), 0.01F);
      assertEquals((-1091.5305F), affineTransform0.ty, 0.01F);
      assertEquals((-0.84147096F), affineTransform0.m10, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(0.5403023F, affineTransform0.m00, 0.01F);
      assertEquals(0.5403023F, affineTransform0.m11, 0.01F);
      assertEquals((-701.69415F), affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1091.5305F), affineTransform1.ty, 0.01F);
      assertEquals(0.84147096F, affineTransform1.m01, 0.01F);
      assertEquals((-0.84147096F), affineTransform1.m10, 0.01F);
      assertEquals((-701.69415F), affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.5403023F, affineTransform1.m00, 0.01F);
      assertEquals(0.5403023F, affineTransform1.m11, 0.01F);
      
      AffineTransform affineTransform2 = affineTransform0.scaleX(1.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertNotNull(affineTransform2);
      assertEquals((-1091.5305F), affineTransform0.ty(), 0.01F);
      assertEquals((-701.69415F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-701.69415F), affineTransform2.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-1091.5305F), affineTransform2.ty(), 0.01F);
      assertEquals((-1091.5305F), affineTransform0.ty, 0.01F);
      assertEquals((-0.84147096F), affineTransform0.m10, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(0.5403023F, affineTransform0.m00, 0.01F);
      assertEquals(0.5403023F, affineTransform0.m11, 0.01F);
      assertEquals((-701.69415F), affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1091.5305F), affineTransform2.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-701.69415F), affineTransform2.tx, 0.01F);
      assertEquals((-0.84147096F), affineTransform2.m10, 0.01F);
      assertEquals(0.84147096F, affineTransform2.m01, 0.01F);
      assertEquals(0.5403023F, affineTransform2.m00, 0.01F);
      assertEquals(0.5403023F, affineTransform2.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 4, 0.0F, 1.0F, 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(4.0F, affineTransform0.m11, 0.01F);
      
      float float0 = affineTransform0.scaleX();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(4.0F, affineTransform0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      
      float float0 = affineTransform0.scaleX();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(207.0F, 3.1415927F, 3.1415927F, (-1092.4515F), 1593.1144F, 3.1415927F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1593.1144F, affineTransform0.tx(), 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty(), 0.01F);
      assertEquals(3.1415927F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.1415927F, affineTransform0.m01, 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty, 0.01F);
      assertEquals((-1092.4515F), affineTransform0.m11, 0.01F);
      assertEquals(1593.1144F, affineTransform0.tx, 0.01F);
      assertEquals(207.0F, affineTransform0.m00, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.scale(0.5F, (-1092.4515F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1593.1144F, affineTransform0.tx(), 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1593.1144F, affineTransform1.tx(), 0.01F);
      assertEquals(3.1415927F, affineTransform1.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5707964F, affineTransform0.m01, 0.01F);
      assertEquals(3.1415927F, affineTransform0.ty, 0.01F);
      assertEquals(1593.1144F, affineTransform0.tx, 0.01F);
      assertEquals(1193450.4F, affineTransform0.m11, 0.01F);
      assertEquals(103.5F, affineTransform0.m00, 0.01F);
      assertEquals((-3432.0378F), affineTransform0.m10, 0.01F);
      assertEquals((-3432.0378F), affineTransform1.m10, 0.01F);
      assertEquals(103.5F, affineTransform1.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.1415927F, affineTransform1.ty, 0.01F);
      assertEquals(1193450.4F, affineTransform1.m11, 0.01F);
      assertEquals(1593.1144F, affineTransform1.tx, 0.01F);
      assertEquals(1.5707964F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.scale(0.0F, 0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m11, 0.01F);
      
      affineTransform1.tx = (-5162.181F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-5162.181F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-5162.181F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      
      AffineTransform affineTransform2 = affineTransform0.scale(1784.16F, 0.0F);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertNotNull(affineTransform2);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-5162.181F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0F, affineTransform2.ty(), 0.01F);
      assertEquals((-5162.181F), affineTransform2.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals((-5162.181F), affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform2.m01, 0.01F);
      assertEquals((-5162.181F), affineTransform2.tx, 0.01F);
      assertEquals(0.0F, affineTransform2.m00, 0.01F);
      assertEquals(0.0F, affineTransform2.m11, 0.01F);
      assertEquals(-0.0F, affineTransform2.m10, 0.01F);
      assertEquals(0.0F, affineTransform2.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3440.523F, (-1.0F), (-1.0F), 2222.6055F, 2222.6055F);
      assertNotNull(affineTransform0);
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      
      float float0 = affineTransform0.rotation();
      assertEquals(0.42311275F, float0, 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-69.0F), (-69.0F), 0.0F, 0.0F, (-69.0F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-69.0F), affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-69.0F), affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-69.0F), affineTransform0.m00, 0.01F);
      assertEquals((-69.0F), affineTransform0.m11, 0.01F);
      
      float float0 = affineTransform0.rotation();
      assertEquals((-3.1415927F), float0, 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-69.0F), affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-69.0F), affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-69.0F), affineTransform0.m00, 0.01F);
      assertEquals((-69.0F), affineTransform0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 596.61F, 0.5F, 0.0F, (-1973.873F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1973.873F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-1973.873F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(286.03006F, affineTransform0.m01, 0.01F);
      assertEquals(523.5745F, affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.rotate(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1973.873F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-1973.873F), affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-1973.873F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(286.03006F, affineTransform0.m01, 0.01F);
      assertEquals(523.5745F, affineTransform0.m11, 0.01F);
      assertEquals(286.03006F, affineTransform1.m01, 0.01F);
      assertEquals((-1973.873F), affineTransform1.ty, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(523.5745F, affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 0.0F, 0.0F, 1871.751F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1871.751F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(1871.751F, affineTransform0.ty, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1871.751F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(1871.751F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(1871.751F, affineTransform0.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform1.m10, 0.01F);
      assertEquals(1871.751F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      
      AffineTransform affineTransform2 = affineTransform1.rotate(Float.NaN);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertNotNull(affineTransform2);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Float.NaN, affineTransform0.ty(), 0.01F);
      assertEquals(Float.NaN, affineTransform0.tx(), 0.01F);
      assertEquals(Float.NaN, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Float.NaN, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(Float.NaN, affineTransform2.tx(), 0.01F);
      assertEquals(Float.NaN, affineTransform2.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform0.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform0.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform0.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform0.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m01, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform1.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform1.ty, 0.01F);
      assertEquals(Float.NaN, affineTransform1.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform2.tx, 0.01F);
      assertEquals(Float.NaN, affineTransform2.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Float.NaN, affineTransform2.m00, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m11, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m10, 0.01F);
      assertEquals(Float.NaN, affineTransform2.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1288.9F, 1288.9F, 1.0F, (-782.0F), (-782.0F), 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-782.0F), affineTransform0.tx(), 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals((-782.0F), affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-782.0F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m10, 0.01F);
      assertEquals(1288.9F, affineTransform0.m00, 0.01F);
      assertEquals(1288.9F, affineTransform0.m01, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.rotate(0.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-782.0F), affineTransform0.tx(), 0.01F);
      assertEquals(1.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-782.0F), affineTransform1.tx(), 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals((-782.0F), affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-782.0F), affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform0.m10, 0.01F);
      assertEquals(1288.9F, affineTransform0.m00, 0.01F);
      assertEquals(1288.9F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.ty, 0.01F);
      assertEquals((-782.0F), affineTransform1.tx, 0.01F);
      assertEquals(1288.9F, affineTransform1.m00, 0.01F);
      assertEquals(1288.9F, affineTransform1.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform1.m10, 0.01F);
      assertEquals((-782.0F), affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.shear(879.0F, 1455.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(879.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(1455.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(879.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(1455.0F, affineTransform1.m01, 0.01F);
      
      AffineTransform affineTransform2 = affineTransform0.translateX(1.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertNotNull(affineTransform2);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1455.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1455.0F, affineTransform2.ty(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(1.0F, affineTransform2.tx(), 0.01F);
      assertEquals(879.0F, affineTransform0.m10, 0.01F);
      assertEquals(1455.0F, affineTransform0.ty, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(1455.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1455.0F, affineTransform2.m01, 0.01F);
      assertEquals(1.0F, affineTransform2.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(879.0F, affineTransform2.m10, 0.01F);
      assertEquals(1455.0F, affineTransform2.ty, 0.01F);
      assertEquals(1.0F, affineTransform2.m00, 0.01F);
      assertEquals(1.0F, affineTransform2.m11, 0.01F);
      
      AffineTransform affineTransform3 = (AffineTransform)affineTransform2.preConcatenate(affineTransform0);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform0, affineTransform3);
      assertSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform2, affineTransform3);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform3, affineTransform1);
      assertNotSame(affineTransform3, affineTransform2);
      assertNotSame(affineTransform3, affineTransform0);
      assertFalse(affineTransform3.equals((Object)affineTransform1));
      assertFalse(affineTransform3.equals((Object)affineTransform2));
      assertFalse(affineTransform3.equals((Object)affineTransform0));
      assertNotNull(affineTransform3);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1455.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1455.0F, affineTransform2.ty(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(1.0F, affineTransform2.tx(), 0.01F);
      assertEquals(1278947.0F, affineTransform3.tx(), 0.01F);
      assertEquals(4, affineTransform3.generality());
      assertEquals(4365.0F, affineTransform3.ty(), 0.01F);
      assertEquals(879.0F, affineTransform0.m10, 0.01F);
      assertEquals(1455.0F, affineTransform0.ty, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(1455.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1455.0F, affineTransform2.m01, 0.01F);
      assertEquals(1.0F, affineTransform2.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(879.0F, affineTransform2.m10, 0.01F);
      assertEquals(1455.0F, affineTransform2.ty, 0.01F);
      assertEquals(1.0F, affineTransform2.m00, 0.01F);
      assertEquals(1.0F, affineTransform2.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4365.0F, affineTransform3.ty, 0.01F);
      assertEquals(1758.0F, affineTransform3.m10, 0.01F);
      assertEquals(1278947.0F, affineTransform3.tx, 0.01F);
      assertEquals(1278946.0F, affineTransform3.m00, 0.01F);
      assertEquals(1278946.0F, affineTransform3.m11, 0.01F);
      assertEquals(2910.0F, affineTransform3.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.translateX(1.0F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(1.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(1.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform1.preConcatenate(affineTransform0);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(1.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0F, affineTransform2.ty(), 0.01F);
      assertEquals(2.0F, affineTransform2.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(1.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(2.0F, affineTransform2.tx, 0.01F);
      assertEquals(0.0F, affineTransform2.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform2.m10, 0.01F);
      assertEquals(1.0F, affineTransform2.m00, 0.01F);
      assertEquals(1.0F, affineTransform2.m11, 0.01F);
      assertEquals(0.0F, affineTransform2.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1006.0F, 0.0F, (-1395.214F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1006.0F, affineTransform0.m11, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.preConcatenate(affineTransform0);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals((-0.01395214F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1404980.5F), affineTransform1.ty(), 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1006.0F, affineTransform0.m11, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals((-1404980.5F), affineTransform1.ty, 0.01F);
      assertEquals(1012036.0F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.010059999F, affineTransform1.m01, 0.01F);
      assertEquals(1.9999999E-10F, affineTransform1.m00, 0.01F);
      assertEquals((-0.01395214F), affineTransform1.tx, 0.01F);
      assertEquals(0.010059999F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3440.523F, (-1.0F), (-1.0F), 2222.6055F, 2222.6055F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2222.6055F, affineTransform0.ty(), 0.01F);
      assertEquals(2222.6055F, affineTransform0.tx(), 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2222.6055F, affineTransform0.tx, 0.01F);
      assertEquals(2222.6055F, affineTransform0.ty, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.translateX((-2607.016F));
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(28.877197F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4844018.0F), affineTransform0.tx(), 0.01F);
      assertEquals((-4844018.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(28.877197F, affineTransform1.ty(), 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4844018.0F), affineTransform0.tx, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(28.877197F, affineTransform0.ty, 0.01F);
      assertEquals((-0.5403023F), affineTransform1.m11, 0.01F);
      assertEquals((-4844018.0F), affineTransform1.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1858.9224F, affineTransform1.m00, 0.01F);
      assertEquals(28.877197F, affineTransform1.ty, 0.01F);
      assertEquals(0.84147096F, affineTransform1.m01, 0.01F);
      assertEquals(2895.1F, affineTransform1.m10, 0.01F);
      
      AffineTransform affineTransform2 = new AffineTransform();
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0F, affineTransform2.tx(), 0.01F);
      assertEquals(0.0F, affineTransform2.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform2.m00, 0.01F);
      assertEquals(1.0F, affineTransform2.m11, 0.01F);
      assertEquals(0.0F, affineTransform2.m10, 0.01F);
      assertEquals(0.0F, affineTransform2.ty, 0.01F);
      assertEquals(0.0F, affineTransform2.tx, 0.01F);
      assertEquals(0.0F, affineTransform2.m01, 0.01F);
      
      AffineTransform affineTransform3 = affineTransform2.setTy(1580.7203F);
      assertNotSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform3);
      assertNotSame(affineTransform2, affineTransform1);
      assertSame(affineTransform3, affineTransform2);
      assertNotSame(affineTransform3, affineTransform1);
      assertNotSame(affineTransform3, affineTransform0);
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertFalse(affineTransform3.equals((Object)affineTransform1));
      assertFalse(affineTransform3.equals((Object)affineTransform0));
      assertNotNull(affineTransform3);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0F, affineTransform2.tx(), 0.01F);
      assertEquals(1580.7203F, affineTransform2.ty(), 0.01F);
      assertEquals(0.0F, affineTransform3.tx(), 0.01F);
      assertEquals(4, affineTransform3.generality());
      assertEquals(1580.7203F, affineTransform3.ty(), 0.01F);
      assertEquals(1580.7203F, affineTransform2.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform2.m00, 0.01F);
      assertEquals(1.0F, affineTransform2.m11, 0.01F);
      assertEquals(0.0F, affineTransform2.m10, 0.01F);
      assertEquals(0.0F, affineTransform2.tx, 0.01F);
      assertEquals(0.0F, affineTransform2.m01, 0.01F);
      assertEquals(0.0F, affineTransform3.m01, 0.01F);
      assertEquals(1.0F, affineTransform3.m00, 0.01F);
      assertEquals(1.0F, affineTransform3.m11, 0.01F);
      assertEquals(1580.7203F, affineTransform3.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform3.tx, 0.01F);
      assertEquals(0.0F, affineTransform3.m10, 0.01F);
      
      AffineTransform affineTransform4 = (AffineTransform)affineTransform3.lerp(affineTransform0, 25391.99F);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform0, affineTransform3);
      assertNotSame(affineTransform0, affineTransform4);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform3);
      assertNotSame(affineTransform2, affineTransform4);
      assertNotSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform3, affineTransform4);
      assertSame(affineTransform3, affineTransform2);
      assertNotSame(affineTransform3, affineTransform1);
      assertNotSame(affineTransform3, affineTransform0);
      assertNotSame(affineTransform4, affineTransform3);
      assertNotSame(affineTransform4, affineTransform1);
      assertNotSame(affineTransform4, affineTransform0);
      assertNotSame(affineTransform4, affineTransform2);
      assertFalse(affineTransform0.equals((Object)affineTransform2));
      assertFalse(affineTransform0.equals((Object)affineTransform3));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertFalse(affineTransform3.equals((Object)affineTransform1));
      assertFalse(affineTransform3.equals((Object)affineTransform0));
      assertFalse(affineTransform4.equals((Object)affineTransform3));
      assertFalse(affineTransform4.equals((Object)affineTransform1));
      assertFalse(affineTransform4.equals((Object)affineTransform0));
      assertFalse(affineTransform4.equals((Object)affineTransform2));
      assertNotNull(affineTransform4);
      assertEquals(28.877197F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4844018.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0F, affineTransform2.tx(), 0.01F);
      assertEquals(1580.7203F, affineTransform2.ty(), 0.01F);
      assertEquals(0.0F, affineTransform3.tx(), 0.01F);
      assertEquals(4, affineTransform3.generality());
      assertEquals(1580.7203F, affineTransform3.ty(), 0.01F);
      assertEquals((-1.22999259E11F), affineTransform4.tx(), 0.01F);
      assertEquals(4, affineTransform4.generality());
      assertEquals((-3.9402804E7F), affineTransform4.ty(), 0.01F);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4844018.0F), affineTransform0.tx, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(28.877197F, affineTransform0.ty, 0.01F);
      assertEquals(1580.7203F, affineTransform2.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform2.m00, 0.01F);
      assertEquals(1.0F, affineTransform2.m11, 0.01F);
      assertEquals(0.0F, affineTransform2.m10, 0.01F);
      assertEquals(0.0F, affineTransform2.tx, 0.01F);
      assertEquals(0.0F, affineTransform2.m01, 0.01F);
      assertEquals(0.0F, affineTransform3.m01, 0.01F);
      assertEquals(1.0F, affineTransform3.m00, 0.01F);
      assertEquals(1.0F, affineTransform3.m11, 0.01F);
      assertEquals(1580.7203F, affineTransform3.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform3.tx, 0.01F);
      assertEquals(0.0F, affineTransform3.m10, 0.01F);
      assertEquals(21366.623F, affineTransform4.m01, 0.01F);
      assertEquals((-39110.34F), affineTransform4.m11, 0.01F);
      assertEquals(7.3512352E7F, affineTransform4.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.22999259E11F), affineTransform4.tx, 0.01F);
      assertEquals(4.7176348E7F, affineTransform4.m00, 0.01F);
      assertEquals((-3.9402804E7F), affineTransform4.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = new AffineTransform(1.0F, 0.0F, 0.0F, 4, 1.0F);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(1.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.ty, 0.01F);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform0.lerp(affineTransform1, 4);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertFalse(affineTransform0.equals((Object)affineTransform1));
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertNotNull(affineTransform2);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4.0F, affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4.0F, affineTransform2.ty(), 0.01F);
      assertEquals(16.0F, affineTransform2.tx(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.ty, 0.01F);
      assertEquals(4.0F, affineTransform2.ty, 0.01F);
      assertEquals(0.0F, affineTransform2.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform2.m00, 0.01F);
      assertEquals((-3.0F), affineTransform2.m11, 0.01F);
      assertEquals(0.0F, affineTransform2.m01, 0.01F);
      assertEquals(16.0F, affineTransform2.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.5F, 0.5F, 722.0352F, 722.0352F, 722.0352F, (-1630.7F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1630.7F), affineTransform0.ty(), 0.01F);
      assertEquals(722.0352F, affineTransform0.tx(), 0.01F);
      assertEquals(722.0352F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.5F, affineTransform0.m01, 0.01F);
      assertEquals(722.0352F, affineTransform0.m10, 0.01F);
      assertEquals(722.0352F, affineTransform0.m11, 0.01F);
      assertEquals((-1630.7F), affineTransform0.ty, 0.01F);
      assertEquals(0.5F, affineTransform0.m00, 0.01F);
      
      AffineTransform affineTransform1 = new AffineTransform((-1630.7F), 722.0352F, (-1630.7F), (-777.6F), 1.0E-5F);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-777.6F), affineTransform1.tx(), 0.01F);
      assertEquals(1.0E-5F, affineTransform1.ty(), 0.01F);
      assertEquals((-777.6F), affineTransform1.tx, 0.01F);
      assertEquals(1.0E-5F, affineTransform1.ty, 0.01F);
      assertEquals(1593.7224F, affineTransform1.m00, 0.01F);
      assertEquals(345.2987F, affineTransform1.m10, 0.01F);
      assertEquals((-705.6624F), affineTransform1.m11, 0.01F);
      assertEquals(152.89006F, affineTransform1.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform0.lerp(affineTransform1, 1593.7224F);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertFalse(affineTransform0.equals((Object)affineTransform1));
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1630.7F), affineTransform0.ty(), 0.01F);
      assertEquals(722.0352F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-777.6F), affineTransform1.tx(), 0.01F);
      assertEquals(1.0E-5F, affineTransform1.ty(), 0.01F);
      assertEquals(2597252.2F, affineTransform2.ty(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-2389280.2F), affineTransform2.tx(), 0.01F);
      assertEquals(722.0352F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.5F, affineTransform0.m01, 0.01F);
      assertEquals(722.0352F, affineTransform0.m10, 0.01F);
      assertEquals(722.0352F, affineTransform0.m11, 0.01F);
      assertEquals((-1630.7F), affineTransform0.ty, 0.01F);
      assertEquals(0.5F, affineTransform0.m00, 0.01F);
      assertEquals((-777.6F), affineTransform1.tx, 0.01F);
      assertEquals(1.0E-5F, affineTransform1.ty, 0.01F);
      assertEquals(1593.7224F, affineTransform1.m00, 0.01F);
      assertEquals(345.2987F, affineTransform1.m10, 0.01F);
      assertEquals((-705.6624F), affineTransform1.m11, 0.01F);
      assertEquals(152.89006F, affineTransform1.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(242867.95F, affineTransform2.m01, 0.01F);
      assertEquals((-599691.4F), affineTransform2.m10, 0.01F);
      assertEquals(2539154.8F, affineTransform2.m00, 0.01F);
      assertEquals(2597252.2F, affineTransform2.ty, 0.01F);
      assertEquals((-2389280.2F), affineTransform2.tx, 0.01F);
      assertEquals((-2274631.8F), affineTransform2.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.invert();
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(-0.0F, affineTransform1.m10, 0.01F);
      assertEquals(-0.0F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(65.2791F, 65.2791F, 1614.0F, 1910.76F, 2220.485F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(45.845543F, affineTransform0.m10, 0.01F);
      assertEquals((-45.845543F), affineTransform0.m01, 0.01F);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals(46.470924F, affineTransform0.m00, 0.01F);
      assertEquals(46.470924F, affineTransform0.m11, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(2220.485F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(2220.485F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1910.76F, affineTransform1.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals(1580.7203F, affineTransform0.m00, 0.01F);
      assertEquals(1580.7203F, affineTransform0.m11, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      assertEquals((-1559.4479F), affineTransform0.m01, 0.01F);
      assertEquals(1559.4479F, affineTransform0.m10, 0.01F);
      assertEquals(1559.4479F, affineTransform1.m10, 0.01F);
      assertEquals(1580.7203F, affineTransform1.m00, 0.01F);
      assertEquals(1580.7203F, affineTransform1.m11, 0.01F);
      assertEquals((-1559.4479F), affineTransform1.m01, 0.01F);
      assertEquals(1910.76F, affineTransform1.tx, 0.01F);
      assertEquals(2220.485F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      affineTransform1.m11 = (-1706.9758F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(2220.485F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1910.76F, affineTransform1.tx(), 0.01F);
      
      AffineTransform affineTransform2 = affineTransform0.invert();
      assertNotSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-25.24405F), affineTransform2.tx(), 0.01F);
      assertEquals(24.363127F, affineTransform2.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1706.9758F), affineTransform0.m11, 0.01F);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals(1580.7203F, affineTransform0.m00, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      assertEquals((-1559.4479F), affineTransform0.m01, 0.01F);
      assertEquals(1559.4479F, affineTransform0.m10, 0.01F);
      assertEquals(24.363127F, affineTransform2.ty, 0.01F);
      assertEquals((-0.00593422F), affineTransform2.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.0058543603F), affineTransform2.m10, 0.01F);
      assertEquals(0.0058543603F, affineTransform2.m01, 0.01F);
      assertEquals((-25.24405F), affineTransform2.tx, 0.01F);
      assertEquals(0.0064081987F, affineTransform2.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(65.2791F, 65.2791F, 1614.0F, 1910.76F, 2220.485F);
      assertNotNull(affineTransform0);
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(46.470924F, affineTransform0.m00, 0.01F);
      assertEquals(46.470924F, affineTransform0.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(45.845543F, affineTransform0.m10, 0.01F);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals((-45.845543F), affineTransform0.m01, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(2220.485F);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(affineTransform1);
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform1.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1559.4479F), affineTransform0.m01, 0.01F);
      assertEquals(1559.4479F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals(1580.7203F, affineTransform0.m00, 0.01F);
      assertEquals(1580.7203F, affineTransform0.m11, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      assertEquals((-1559.4479F), affineTransform1.m01, 0.01F);
      assertEquals(1559.4479F, affineTransform1.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1580.7203F, affineTransform1.m00, 0.01F);
      assertEquals(1580.7203F, affineTransform1.m11, 0.01F);
      assertEquals(1910.76F, affineTransform1.tx, 0.01F);
      assertEquals(2220.485F, affineTransform1.ty, 0.01F);
      
      affineTransform1.m11 = (-1706.9758F);
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform1.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      
      Vector vector0 = affineTransform1.scale();
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotNull(vector0);
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform1.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2220.485F, vector0.x(), 0.01F);
      assertEquals(2312.065F, vector0.y(), 0.01F);
      assertEquals((-1559.4479F), affineTransform0.m01, 0.01F);
      assertEquals((-1706.9758F), affineTransform0.m11, 0.01F);
      assertEquals(1559.4479F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals(1580.7203F, affineTransform0.m00, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      assertEquals((-1706.9758F), affineTransform1.m11, 0.01F);
      assertEquals((-1559.4479F), affineTransform1.m01, 0.01F);
      assertEquals(1559.4479F, affineTransform1.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1580.7203F, affineTransform1.m00, 0.01F);
      assertEquals(1910.76F, affineTransform1.tx, 0.01F);
      assertEquals(2220.485F, affineTransform1.ty, 0.01F);
      assertEquals(2220.485F, vector0.x, 0.01F);
      assertEquals(2312.065F, vector0.y, 0.01F);
      
      Vector vector1 = affineTransform1.inverseTransform((IVector) vector0, vector0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(1910.76F, affineTransform0.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1910.76F, affineTransform1.tx(), 0.01F);
      assertEquals(2220.485F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-26.719822F), vector0.y(), 0.01F);
      assertEquals(27.76497F, vector0.x(), 0.01F);
      assertEquals((-26.719822F), vector1.y(), 0.01F);
      assertEquals(27.76497F, vector1.x(), 0.01F);
      assertEquals((-1559.4479F), affineTransform0.m01, 0.01F);
      assertEquals((-1706.9758F), affineTransform0.m11, 0.01F);
      assertEquals(1559.4479F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2220.485F, affineTransform0.ty, 0.01F);
      assertEquals(1580.7203F, affineTransform0.m00, 0.01F);
      assertEquals(1910.76F, affineTransform0.tx, 0.01F);
      assertEquals((-1706.9758F), affineTransform1.m11, 0.01F);
      assertEquals((-1559.4479F), affineTransform1.m01, 0.01F);
      assertEquals(1559.4479F, affineTransform1.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1580.7203F, affineTransform1.m00, 0.01F);
      assertEquals(1910.76F, affineTransform1.tx, 0.01F);
      assertEquals(2220.485F, affineTransform1.ty, 0.01F);
      assertEquals((-26.719822F), vector0.y, 0.01F);
      assertEquals(27.76497F, vector0.x, 0.01F);
      assertEquals(27.76497F, vector1.x, 0.01F);
      assertEquals((-26.719822F), vector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Vector vector0 = affineTransform0.translation();
      assertNotNull(vector0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, vector0.x(), 0.01F);
      assertEquals(0.0F, vector0.y(), 0.01F);
      assertEquals(0.0F, vector1.x(), 0.01F);
      assertEquals(0.0F, vector1.y(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, vector0.x, 0.01F);
      assertEquals(0.0F, vector0.y, 0.01F);
      assertEquals(0.0F, vector1.y, 0.01F);
      assertEquals(0.0F, vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1910.76F, 1614.0F, 1614.0F, 2220.485F, 8.9652367E12F);
      assertNotNull(affineTransform0);
      assertEquals(2220.485F, affineTransform0.tx(), 0.01F);
      assertEquals(8.9652367E12F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1148.9753F, affineTransform0.m11, 0.01F);
      assertEquals(2220.485F, affineTransform0.tx, 0.01F);
      assertEquals(1360.233F, affineTransform0.m00, 0.01F);
      assertEquals(1341.9277F, affineTransform0.m10, 0.01F);
      assertEquals((-1133.513F), affineTransform0.m01, 0.01F);
      assertEquals(8.9652367E12F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Vector vector0 = affineTransform0.scale();
      assertNotNull(vector0);
      assertEquals(2220.485F, affineTransform0.tx(), 0.01F);
      assertEquals(8.9652367E12F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1766.611F, vector0.y(), 0.01F);
      assertEquals(1770.6173F, vector0.x(), 0.01F);
      assertEquals(1148.9753F, affineTransform0.m11, 0.01F);
      assertEquals(2220.485F, affineTransform0.tx, 0.01F);
      assertEquals(1360.233F, affineTransform0.m00, 0.01F);
      assertEquals(1341.9277F, affineTransform0.m10, 0.01F);
      assertEquals((-1133.513F), affineTransform0.m01, 0.01F);
      assertEquals(8.9652367E12F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1766.611F, vector0.y, 0.01F);
      assertEquals(1770.6173F, vector0.x, 0.01F);
      
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertNotNull(vector1);
      assertEquals(2220.485F, affineTransform0.tx(), 0.01F);
      assertEquals(8.9652367E12F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-0.1090377F), vector0.x(), 0.01F);
      assertEquals(1.429983F, vector0.y(), 0.01F);
      assertEquals((-0.1090377F), vector1.x(), 0.01F);
      assertEquals(1.429983F, vector1.y(), 0.01F);
      assertEquals(1148.9753F, affineTransform0.m11, 0.01F);
      assertEquals(2220.485F, affineTransform0.tx, 0.01F);
      assertEquals(1360.233F, affineTransform0.m00, 0.01F);
      assertEquals(1341.9277F, affineTransform0.m10, 0.01F);
      assertEquals((-1133.513F), affineTransform0.m01, 0.01F);
      assertEquals(8.9652367E12F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.429983F, vector0.y, 0.01F);
      assertEquals((-0.1090377F), vector0.x, 0.01F);
      assertEquals(1.429983F, vector1.y, 0.01F);
      assertEquals((-0.1090377F), vector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      
      Point point1 = affineTransform0.inverseTransform((IPoint) point0, point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertNotNull(point1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point1.x(), 0.01F);
      assertEquals(0.0F, point1.y(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      assertEquals(0.0F, point1.y, 0.01F);
      assertEquals(0.0F, point1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1006.0F, (-1395.214F), 2994.28F, 2994.28F, 2994.28F, (-1395.214F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(2994.28F, affineTransform0.tx(), 0.01F);
      assertEquals((-1395.214F), affineTransform0.m01, 0.01F);
      assertEquals(2994.28F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2994.28F, affineTransform0.m10, 0.01F);
      assertEquals(2994.28F, affineTransform0.m11, 0.01F);
      assertEquals(1006.0F, affineTransform0.m00, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      
      Point point0 = new Point(1873.4587F, 2994.28F);
      assertNotNull(point0);
      assertEquals(1873.4587F, point0.x(), 0.01F);
      assertEquals(2994.28F, point0.y(), 0.01F);
      assertEquals(2994.28F, point0.y, 0.01F);
      assertEquals(1873.4587F, point0.x, 0.01F);
      
      Point point1 = affineTransform0.inverseTransform((IPoint) point0, point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertNotNull(point1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(2994.28F, affineTransform0.tx(), 0.01F);
      assertEquals(0.39667347F, point0.y(), 0.01F);
      assertEquals((-2.294804F), point0.x(), 0.01F);
      assertEquals(0.39667347F, point1.y(), 0.01F);
      assertEquals((-2.294804F), point1.x(), 0.01F);
      assertEquals((-1395.214F), affineTransform0.m01, 0.01F);
      assertEquals(2994.28F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2994.28F, affineTransform0.m10, 0.01F);
      assertEquals(2994.28F, affineTransform0.m11, 0.01F);
      assertEquals(1006.0F, affineTransform0.m00, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(0.39667347F, point0.y, 0.01F);
      assertEquals((-2.294804F), point0.x, 0.01F);
      assertEquals((-2.294804F), point1.x, 0.01F);
      assertEquals(0.39667347F, point1.y, 0.01F);
      
      Point point2 = affineTransform0.inverseTransform((IPoint) point1, point0);
      assertSame(point0, point1);
      assertSame(point0, point2);
      assertSame(point1, point2);
      assertSame(point1, point0);
      assertSame(point2, point1);
      assertSame(point2, point0);
      assertNotNull(point2);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(2994.28F, affineTransform0.tx(), 0.01F);
      assertEquals((-0.38621902F), point0.y(), 0.01F);
      assertEquals((-1.8291521F), point0.x(), 0.01F);
      assertEquals((-1.8291521F), point1.x(), 0.01F);
      assertEquals((-0.38621902F), point1.y(), 0.01F);
      assertEquals((-0.38621902F), point2.y(), 0.01F);
      assertEquals((-1.8291521F), point2.x(), 0.01F);
      assertEquals((-1395.214F), affineTransform0.m01, 0.01F);
      assertEquals(2994.28F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2994.28F, affineTransform0.m10, 0.01F);
      assertEquals(2994.28F, affineTransform0.m11, 0.01F);
      assertEquals(1006.0F, affineTransform0.m00, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals((-0.38621902F), point0.y, 0.01F);
      assertEquals((-1.8291521F), point0.x, 0.01F);
      assertEquals((-1.8291521F), point1.x, 0.01F);
      assertEquals((-0.38621902F), point1.y, 0.01F);
      assertEquals((-0.38621902F), point2.y, 0.01F);
      assertEquals((-1.8291521F), point2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1919.616F, 1.0F, 1919.616F, 1919.616F, 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(1919.616F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals((-1909.4708F), affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(197.09502F, affineTransform0.m10, 0.01F);
      assertEquals((-0.10267419F), affineTransform0.m01, 0.01F);
      assertEquals((-0.99471503F), affineTransform0.m11, 0.01F);
      assertEquals(1919.616F, affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.copy();
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(1919.616F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1919.616F, affineTransform1.tx(), 0.01F);
      assertEquals(1.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1909.4708F), affineTransform0.m00, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(197.09502F, affineTransform0.m10, 0.01F);
      assertEquals((-0.10267419F), affineTransform0.m01, 0.01F);
      assertEquals((-0.99471503F), affineTransform0.m11, 0.01F);
      assertEquals(1919.616F, affineTransform0.tx, 0.01F);
      assertEquals((-1909.4708F), affineTransform1.m00, 0.01F);
      assertEquals((-0.99471503F), affineTransform1.m11, 0.01F);
      assertEquals(1919.616F, affineTransform1.tx, 0.01F);
      assertEquals((-0.10267419F), affineTransform1.m01, 0.01F);
      assertEquals(197.09502F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.copy();
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.tx(), 0.01F);
      assertEquals(0.0F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 222.577F, 222.577F, (-1.0F), (-4135.019F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4135.019F), affineTransform0.ty(), 0.01F);
      assertEquals((-1.0F), affineTransform0.tx(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4135.019F), affineTransform0.ty, 0.01F);
      assertEquals((-0.8887971F), affineTransform0.m00, 0.01F);
      assertEquals((-0.4583009F), affineTransform0.m10, 0.01F);
      assertEquals((-197.82579F), affineTransform0.m11, 0.01F);
      assertEquals(102.00723F, affineTransform0.m01, 0.01F);
      assertEquals((-1.0F), affineTransform0.tx, 0.01F);
      
      AffineTransform affineTransform1 = affineTransform0.copy();
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4135.019F), affineTransform0.ty(), 0.01F);
      assertEquals((-1.0F), affineTransform0.tx(), 0.01F);
      assertEquals((-1.0F), affineTransform1.tx(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-4135.019F), affineTransform1.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4135.019F), affineTransform0.ty, 0.01F);
      assertEquals((-0.8887971F), affineTransform0.m00, 0.01F);
      assertEquals((-0.4583009F), affineTransform0.m10, 0.01F);
      assertEquals((-197.82579F), affineTransform0.m11, 0.01F);
      assertEquals(102.00723F, affineTransform0.m01, 0.01F);
      assertEquals((-1.0F), affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0F), affineTransform1.tx, 0.01F);
      assertEquals((-4135.019F), affineTransform1.ty, 0.01F);
      assertEquals((-0.8887971F), affineTransform1.m00, 0.01F);
      assertEquals((-197.82579F), affineTransform1.m11, 0.01F);
      assertEquals(102.00723F, affineTransform1.m01, 0.01F);
      assertEquals((-0.4583009F), affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3440.523F, (-1.0F), (-1.0F), 3440.523F, 3440.523F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3440.523F, affineTransform0.ty(), 0.01F);
      assertEquals(3440.523F, affineTransform0.tx(), 0.01F);
      assertEquals(3440.523F, affineTransform0.ty, 0.01F);
      assertEquals(3440.523F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.concatenate(affineTransform0);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3440.523F, affineTransform0.ty(), 0.01F);
      assertEquals(3440.523F, affineTransform0.tx(), 0.01F);
      assertEquals(4476.7007F, affineTransform1.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.6359764E7F, affineTransform1.tx(), 0.01F);
      assertEquals(3440.523F, affineTransform0.ty, 0.01F);
      assertEquals(3440.523F, affineTransform0.tx, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.84147096F, affineTransform0.m01, 0.01F);
      assertEquals(1858.9224F, affineTransform0.m00, 0.01F);
      assertEquals((-0.5403023F), affineTransform0.m11, 0.01F);
      assertEquals(2895.1F, affineTransform0.m10, 0.01F);
      assertEquals(3458028.5F, affineTransform1.m00, 0.01F);
      assertEquals(1563.7745F, affineTransform1.m01, 0.01F);
      assertEquals(1.6359764E7F, affineTransform1.tx, 0.01F);
      assertEquals(4476.7007F, affineTransform1.ty, 0.01F);
      assertEquals(5380202.5F, affineTransform1.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2436.4346F, affineTransform1.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, (-1395.214F));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0E-5F, affineTransform0.tx(), 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.tx, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      
      IdentityTransform identityTransform0 = new IdentityTransform();
      assertNotNull(identityTransform0);
      assertEquals(0, identityTransform0.generality());
      assertEquals("ident", identityTransform0.toString());
      assertEquals(1.0F, identityTransform0.uniformScale(), 0.01F);
      assertEquals(0.0F, identityTransform0.ty(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleY(), 0.01F);
      assertEquals(0.0F, identityTransform0.tx(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleX(), 0.01F);
      assertEquals(0.0F, identityTransform0.rotation(), 0.01F);
      assertEquals(0, IdentityTransform.GENERALITY);
      
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.concatenate(identityTransform0);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0E-5F, affineTransform0.tx(), 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(0, identityTransform0.generality());
      assertEquals("ident", identityTransform0.toString());
      assertEquals(1.0F, identityTransform0.uniformScale(), 0.01F);
      assertEquals(0.0F, identityTransform0.ty(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleY(), 0.01F);
      assertEquals(0.0F, identityTransform0.tx(), 0.01F);
      assertEquals(1.0F, identityTransform0.scaleX(), 0.01F);
      assertEquals(0.0F, identityTransform0.rotation(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0E-5F, affineTransform1.tx(), 0.01F);
      assertEquals((-1395.214F), affineTransform1.ty(), 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.tx, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform1.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform1.ty, 0.01F);
      assertEquals(1.0E-5F, affineTransform1.m01, 0.01F);
      assertEquals(1.0E-5F, affineTransform1.m00, 0.01F);
      assertEquals(1.0E-5F, affineTransform1.m11, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1006.0F, 0.0F, (-1395.214F));
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1006.0F, affineTransform0.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.concatenate(affineTransform0);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1395.214F), affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-0.01395214F), affineTransform1.tx(), 0.01F);
      assertEquals((-1404980.5F), affineTransform1.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals((-1395.214F), affineTransform0.ty, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m01, 0.01F);
      assertEquals(1006.0F, affineTransform0.m11, 0.01F);
      assertEquals(1.0E-5F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0E-5F, affineTransform0.m00, 0.01F);
      assertEquals((-1404980.5F), affineTransform1.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1012036.0F, affineTransform1.m11, 0.01F);
      assertEquals((-0.01395214F), affineTransform1.tx, 0.01F);
      assertEquals(0.010059999F, affineTransform1.m10, 0.01F);
      assertEquals(0.010059999F, affineTransform1.m01, 0.01F);
      assertEquals(1.9999999E-10F, affineTransform1.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      
      Point[] pointArray0 = new Point[0];
      // Undeclared exception!
      try { 
        affineTransform0.transform((IPoint[]) null, 2934, pointArray0, 2080116227, 2934);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      // Undeclared exception!
      try { 
        affineTransform0.transform((float[]) null, 1543, (float[]) null, 1543, 1543);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0F, point0.y(), 0.01F);
      assertEquals(0.0F, point0.x(), 0.01F);
      assertEquals(0.0F, point0.x, 0.01F);
      assertEquals(0.0F, point0.y, 0.01F);
      
      // Undeclared exception!
      try { 
        affineTransform0.transform((IPoint) null, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtil.TO_STRING_DECIMAL_PLACES = 2138446208;
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 0.0F, 0.0F, 4, 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(4.0F, affineTransform0.tx(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.ty, 0.01F);
      assertEquals(4.0F, affineTransform0.tx, 0.01F);
      
      // Undeclared exception!
      affineTransform0.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 1.0F, 0.0F);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(1.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m00, 0.01F);
      assertEquals(0.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      
      // Undeclared exception!
      try { 
        affineTransform0.rotation();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [+0.0 +0.0 +0.0 +0.0 +1.0+0.0]
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      
      // Undeclared exception!
      try { 
        affineTransform0.preConcatenate((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.ty(), 0.01F);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, AffineTransform.GENERALITY);
      
      // Undeclared exception!
      try { 
        affineTransform0.lerp((Transform) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F));
      MathUtil.TO_STRING_DECIMAL_PLACES = 5539;
      Vector vector0 = new Vector((-1353.6609F), 1.0E-5F);
      // Undeclared exception!
      affineTransform0.inverseTransform((IVector) vector0, vector0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.translation();
      // Undeclared exception!
      try { 
        affineTransform0.inverseTransform((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Point point0 = new Point(0.0F, 0.0F);
      // Undeclared exception!
      try { 
        affineTransform0.inverseTransform((IPoint) point0, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 596.61F, 0.5F, 0.0F, (-1973.873F));
      // Undeclared exception!
      try { 
        affineTransform0.get((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      // Undeclared exception!
      try { 
        affineTransform0.concatenate((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-69.0F), (-69.0F), 0.0F, 0.0F, (-69.0F));
      String string0 = affineTransform0.toString();
      assertEquals("affine [-69.0 +0.0 +0.0 -69.0 +0.0-69.0]", string0);
      assertEquals(-0.0F, affineTransform0.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3502.4102F), 6.2831855F, (-3502.4102F), 3.1415927F);
      int int0 = affineTransform0.generality();
      assertEquals((-3502.4102F), affineTransform0.tx, 0.01F);
      assertEquals(4, int0);
      assertEquals(3.1415927F, affineTransform0.ty, 0.01F);
      assertEquals((-6.1238086E-4F), affineTransform0.m01, 0.01F);
      assertEquals(6.1238086E-4F, affineTransform0.m10, 0.01F);
      assertEquals((-3502.4102F), affineTransform0.m00, 0.01F);
      assertEquals((-3502.4102F), affineTransform0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      String string0 = affineTransform0.toString();
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals("ident", string0);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.setScaleY(645.899F);
      affineTransform0.toString();
      assertEquals(645.899F, affineTransform0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 4, 0.0F, 4, 0.0F, 0.0F);
      String string0 = affineTransform0.toString();
      assertEquals("affine [+1.0 +4.0 +0.0 +4.0 +0.0+0.0]", string0);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.tx(), 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F));
      Vector vector0 = new Vector((-1353.6609F), 1.0E-5F);
      // Undeclared exception!
      try { 
        affineTransform0.inverseTransform((IVector) vector0, vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [-1353.66 -1353.66 -1353.66 -1353.66 -1353.66-1353.66]
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 1.0F, 1.0F, 1.0F, 0.0F);
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        affineTransform0.inverseTransform((IPoint) point0, point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [+0.0 +0.841 +0.0 +0.54 +1.0+0.0]
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(236.231F, (-2.0F), 236.231F, (-2.0F));
      float[] floatArray0 = new float[0];
      affineTransform0.transform(floatArray0, 2146291444, floatArray0, (-476), (-476));
      assertEquals((-214.80424F), affineTransform0.m01, 0.01F);
      assertEquals(236.231F, affineTransform0.tx, 0.01F);
      assertEquals((-98.306786F), affineTransform0.m11, 0.01F);
      assertEquals((-98.306786F), affineTransform0.m00, 0.01F);
      assertEquals((-2.0F), affineTransform0.ty, 0.01F);
      assertEquals(214.80424F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IPoint[] iPointArray0 = new IPoint[0];
      Point[] pointArray0 = new Point[0];
      // Undeclared exception!
      try { 
        affineTransform0.transform(iPointArray0, 4, pointArray0, 4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 0
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IPoint[] iPointArray0 = new IPoint[0];
      Point[] pointArray0 = new Point[0];
      affineTransform0.transform(iPointArray0, 4, pointArray0, 4, (-766));
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.lerp(affineTransform0, 4);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.preConcatenate(identityTransform0);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.concatenate(identityTransform0);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(4, affineTransform1.generality());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F);
      // Undeclared exception!
      try { 
        affineTransform0.invert();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [+0.0 +0.0 +1.0 +0.0 +0.0+0.0]
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(236.231F, (-2.0F), 236.231F, (-2.0F));
      AffineTransform affineTransform1 = affineTransform0.invert();
      assertEquals((-0.9128207F), affineTransform1.ty, 0.01F);
      assertEquals(0.0038491876F, affineTransform1.m10, 0.01F);
      assertEquals((-0.0017616098F), affineTransform1.m11, 0.01F);
      assertEquals((-0.0017616098F), affineTransform1.m00, 0.01F);
      assertEquals(0.4084485F, affineTransform1.tx, 0.01F);
      assertEquals((-0.0038491876F), affineTransform1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      float float0 = affineTransform0.rotation();
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, affineTransform0.m11, 0.01F);
      assertEquals(1.0F, affineTransform0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1080.092F, 1080.092F, 1080.092F, 1080.092F, 1080.092F, 1080.092F);
      AffineTransform affineTransform1 = null;
      try {
        affineTransform1 = new AffineTransform(affineTransform0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [+1080.092 +1080.092 +1080.092 +1080.092 +1080.092+1080.092]
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(168.4F, 168.4F, 168.4F, 168.4F);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      assertEquals(159.59583F, affineTransform1.m10, 0.01F);
      assertEquals(168.4F, affineTransform1.ty, 0.01F);
      assertEquals(53.737602F, affineTransform1.m11, 0.01F);
      assertEquals(168.4F, affineTransform1.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = affineTransform0.setScaleY((-1800.2731F));
      float float0 = affineTransform1.uniformScale();
      assertEquals((-1800.2731F), affineTransform0.m11, 0.01F);
      assertEquals((-42.429626F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      float float0 = affineTransform0.uniformScale();
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(0.0F, affineTransform0.m10, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.scaleX(575.05F);
      assertEquals(575.05F, affineTransform0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.setTranslation(1835.2396F, 1835.2396F);
      assertEquals(1835.2396F, affineTransform0.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = affineTransform0.rotate(0.0F);
      assertEquals(0.0F, affineTransform0.tx, 0.01F);
      assertEquals(0.0F, affineTransform0.ty, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      // Undeclared exception!
      try { 
        affineTransform0.set((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F));
      affineTransform0.shear(2855.0698F, (-738.1132F));
      assertEquals((-3866150.0F), affineTransform0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.lerp(identityTransform0, 0.0F);
      assertEquals(0.0F, affineTransform1.m01, 0.01F);
      assertEquals(1.0F, affineTransform1.m00, 0.01F);
      assertEquals(1.0F, affineTransform1.m11, 0.01F);
      assertEquals(0.0F, affineTransform1.m10, 0.01F);
      assertEquals(0.0F, affineTransform1.ty, 0.01F);
      assertEquals(0.0F, affineTransform1.tx, 0.01F);
      assertEquals(4, affineTransform1.generality());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F), (-1353.6609F));
      affineTransform0.shearY((-3511.697F));
      assertEquals(4752293.5F, affineTransform0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.translateX(0.007071147F);
      affineTransform0.toString();
      assertEquals(0.007071147F, affineTransform0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.shearX((-2450.452F));
      affineTransform0.toString();
      assertEquals((-2450.452F), affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      // Undeclared exception!
      try { 
        affineTransform0.transformPoint((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.setRotation(0.0F);
      assertEquals(-0.0F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(236.231F, (-2.0F), 236.231F, (-2.0F));
      affineTransform0.setTx(0.5F);
      assertEquals(0.5F, affineTransform0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = affineTransform0.setTy(3566.0994F);
      String string0 = affineTransform1.toString();
      assertEquals(3566.0994F, affineTransform0.ty, 0.01F);
      assertEquals("trans +0.0+3566.099", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      // Undeclared exception!
      try { 
        affineTransform0.transform((IVector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-14.823062F), 1872.72F, 1.0F, 1872.72F, (-519.0F));
      affineTransform0.scaleY(5.502443E-11F);
      assertEquals(6.863294E-10F, affineTransform0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, 1.0E-5F, (-1395.214F));
      affineTransform0.uniformScale((float) 4);
      assertEquals(4.0E-5F, affineTransform0.m00, 0.01F);
  }
}
