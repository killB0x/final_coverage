/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:30:57 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.Box;
import pythagoras.f.IBox;
import pythagoras.f.IMatrix4;
import pythagoras.f.IRay3;
import pythagoras.f.IVector3;
import pythagoras.f.Matrix3;
import pythagoras.f.Matrix4;
import pythagoras.f.Plane;
import pythagoras.f.Ray3;
import pythagoras.f.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Box_ESTest extends Box_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = box0._minExtent;
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.x, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.x(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.x, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.x(), 0.01F);
      assertNotNull(ray3_0);
      
      Ray3 ray3_1 = new Ray3(ray3_0);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.x, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.x(), 0.01F);
      assertNotNull(ray3_1);
      
      float float0 = box0.intersectionZ(ray3_1, -0.0F);
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.x, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertNotSame(ray3_0, ray3_1);
      assertNotSame(ray3_1, ray3_0);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.x(), 0.01F);
      
      IVector3[] iVector3Array0 = new IVector3[19];
      // Undeclared exception!
      try { 
        box0.fromPoints(iVector3Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = box0._maxExtent;
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertNotNull(ray3_0);
      
      Ray3 ray3_1 = new Ray3(ray3_0);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertNotNull(ray3_1);
      
      float float0 = box0.intersectionZ(ray3_1, 0.0F);
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertNotSame(ray3_0, ray3_1);
      assertNotSame(ray3_1, ray3_0);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      
      Matrix4 matrix4_0 = new Matrix4(0.0F, 0.0F, 0.0F, 0.0F, (-3.1415927F), 57.295776F, (-3.1415927F), (-888.04535F), 0.0F, (-888.04535F), 0.0F, 3.4028235E38F, 0.5F, (-1529.82F), 0.0F, 0.0F);
      assertEquals(0.5F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals(0.0F, matrix4_0.m22, 0.01F);
      assertEquals(0.0F, matrix4_0.m33, 0.01F);
      assertEquals((-888.04535F), matrix4_0.m31, 0.01F);
      assertEquals(57.295776F, matrix4_0.m11, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01, 0.01F);
      assertEquals((-888.04535F), matrix4_0.m12, 0.01F);
      assertEquals((-1529.82F), matrix4_0.m13, 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-888.04535F), matrix4_0.m31(), 0.01F);
      assertEquals((-1529.82F), matrix4_0.m13(), 0.01F);
      assertEquals((-888.04535F), matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.5F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-3.1415927F), matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m33(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(0.0F, matrix4_0.m22(), 0.01F);
      assertEquals(57.295776F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01(), 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertNotNull(matrix4_0);
      
      Vector3 vector3_1 = (Vector3)box0.minimumExtent();
      assertEquals((-1.0F), vector3_1.y, 0.01F);
      assertEquals((-1.0F), vector3_1.x, 0.01F);
      assertEquals((-1.0F), vector3_1.z, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_1, vector3_0);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals((-1.0F), vector3_1.y(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals((-1.0F), vector3_1.x(), 0.01F);
      assertEquals((-1.0F), vector3_1.z(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(ray3_0);
      
      float float0 = box0.intersectionZ(ray3_0, 0.0F);
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertNotNull(matrix4_0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = matrix4_0.transformPoint((IVector3) vector3_0, vector3_0);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertNotNull(vector3_1);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_1);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertNotNull(ray3_0);
      
      float float0 = box0.intersectionZ(ray3_0, 0.0F);
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      
      Box box1 = Box.EMPTY;
      assertTrue(box1.equals((Object)box0));
      assertNotSame(box1, box0);
      assertTrue(box1.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
      
      Box box2 = box0.intersectLocal(box1);
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box2.equals((Object)box1));
      assertNotSame(box0, box1);
      assertSame(box0, box2);
      assertNotSame(box1, box2);
      assertNotSame(box1, box0);
      assertSame(box2, box0);
      assertNotSame(box2, box1);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertTrue(box1.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box2.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box2.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box2.diagonalLength(), 0.01F);
      assertNotNull(box2);
      
      Box box3 = Box.MAX_VALUE;
      assertFalse(box3.equals((Object)box2));
      assertFalse(box3.equals((Object)box1));
      assertFalse(box3.equals((Object)box0));
      assertNotSame(box3, box2);
      assertNotSame(box3, box1);
      assertNotSame(box3, box0);
      assertEquals(Float.POSITIVE_INFINITY, box3.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box3.longestEdge(), 0.01F);
      assertFalse(box3.isEmpty());
      assertNotNull(box3);
      
      boolean boolean0 = box2.intersectsX(ray3_0, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertTrue(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box3));
      assertTrue(box1.equals((Object)box0));
      assertFalse(box1.equals((Object)box3));
      assertTrue(box1.equals((Object)box2));
      assertTrue(box2.equals((Object)box1));
      assertFalse(box2.equals((Object)box3));
      assertNotSame(box0, box1);
      assertNotSame(box0, box3);
      assertSame(box0, box2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotSame(box1, box3);
      assertNotSame(box1, box2);
      assertNotSame(box1, box0);
      assertSame(box2, box0);
      assertNotSame(box2, box3);
      assertNotSame(box2, box1);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box2.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box2.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box2.diagonalLength(), 0.01F);
      
      Box box4 = Box.UNIT;
      assertFalse(box4.equals((Object)box1));
      assertFalse(box4.equals((Object)box0));
      assertFalse(box4.equals((Object)box3));
      assertFalse(box4.equals((Object)box2));
      assertNotSame(box4, box1);
      assertNotSame(box4, box0);
      assertNotSame(box4, box3);
      assertNotSame(box4, box2);
      assertEquals(2.0F, box4.longestEdge(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(3.4641016F, box4.diagonalLength(), 0.01F);
      assertNotNull(box4);
      
      Vector3 vector3_2 = matrix4_0.transformPointLocal(vector3_1);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(1.0F, vector3_2.z, 0.01F);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.length(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertNotNull(vector3_2);
      
      Ray3 ray3_1 = new Ray3();
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertNotNull(ray3_1);
      
      Box box5 = new Box(ray3_0.direction, ray3_1.origin);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertFalse(box5.equals((Object)box1));
      assertFalse(box5.equals((Object)box4));
      assertFalse(box5.equals((Object)box3));
      assertFalse(box5.equals((Object)box2));
      assertFalse(box5.equals((Object)box0));
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertTrue(box5.isEmpty());
      assertEquals(0.0F, box5.longestEdge(), 0.01F);
      assertEquals(1.0F, box5.diagonalLength(), 0.01F);
      assertNotNull(box5);
      
      boolean boolean1 = box5.intersection(ray3_0, ray3_0.direction);
      assertTrue(boolean1);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertFalse(box5.equals((Object)box1));
      assertFalse(box5.equals((Object)box4));
      assertFalse(box5.equals((Object)box3));
      assertFalse(box5.equals((Object)box2));
      assertFalse(box5.equals((Object)box0));
      assertFalse(boolean1 == boolean0);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertNotSame(ray3_0, ray3_1);
      assertNotSame(ray3_1, ray3_0);
      assertNotSame(box5, box1);
      assertNotSame(box5, box4);
      assertNotSame(box5, box3);
      assertNotSame(box5, box2);
      assertNotSame(box5, box0);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertTrue(box5.isEmpty());
      assertEquals(0.0F, box5.longestEdge(), 0.01F);
      assertEquals(1.0F, box5.diagonalLength(), 0.01F);
      
      float float1 = box1.extentDistance(box4);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(box1.equals((Object)box4));
      assertFalse(box1.equals((Object)box5));
      assertTrue(box1.equals((Object)box0));
      assertFalse(box1.equals((Object)box3));
      assertTrue(box1.equals((Object)box2));
      assertFalse(box4.equals((Object)box1));
      assertFalse(box4.equals((Object)box5));
      assertFalse(box4.equals((Object)box0));
      assertFalse(box4.equals((Object)box3));
      assertFalse(box4.equals((Object)box2));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(box1, box4);
      assertNotSame(box1, box5);
      assertNotSame(box1, box3);
      assertNotSame(box1, box2);
      assertNotSame(box1, box0);
      assertNotSame(box4, box1);
      assertNotSame(box4, box5);
      assertNotSame(box4, box0);
      assertNotSame(box4, box3);
      assertNotSame(box4, box2);
      assertTrue(box1.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(2.0F, box4.longestEdge(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(3.4641016F, box4.diagonalLength(), 0.01F);
      
      Box box6 = box0.expand(4021.7842F, (-1112.0F), (-3.4028235E38F));
      assertFalse(box6.equals((Object)box5));
      assertFalse(box6.equals((Object)box1));
      assertFalse(box6.equals((Object)box0));
      assertFalse(box6.equals((Object)box3));
      assertFalse(box6.equals((Object)box2));
      assertFalse(box6.equals((Object)box4));
      assertTrue(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box4));
      assertFalse(box0.equals((Object)box5));
      assertFalse(box0.equals((Object)box3));
      assertNotSame(box6, box5);
      assertNotSame(box6, box1);
      assertNotSame(box6, box0);
      assertNotSame(box6, box3);
      assertNotSame(box6, box2);
      assertNotSame(box6, box4);
      assertNotSame(box0, box4);
      assertNotSame(box0, box6);
      assertNotSame(box0, box5);
      assertNotSame(box0, box1);
      assertNotSame(box0, box3);
      assertSame(box0, box2);
      assertTrue(box6.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box6.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box6.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box6);
      
      Vector3 vector3_3 = matrix4_0.transformPoint((IVector3) vector3_1, ray3_0.origin);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(1.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(ray3_0, ray3_1);
      assertEquals(1.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(1.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = box4._maxExtent;
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(1.0F, vector3_4.x, 0.01F);
      assertEquals(1.0F, vector3_4.y, 0.01F);
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertEquals(3.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.7320508F, vector3_4.length(), 0.01F);
      assertEquals(1.0F, vector3_4.x(), 0.01F);
      assertEquals(1.0F, vector3_4.y(), 0.01F);
      assertNotNull(vector3_4);
      
      Vector3 vector3_5 = matrix4_0.transformPointLocal(vector3_4);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(1.0F, vector3_4.x, 0.01F);
      assertEquals(1.0F, vector3_4.y, 0.01F);
      assertEquals(1.0F, vector3_5.y, 0.01F);
      assertEquals(1.0F, vector3_5.x, 0.01F);
      assertEquals(1.0F, vector3_5.z, 0.01F);
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(box4.equals((Object)box6));
      assertFalse(box4.equals((Object)box1));
      assertFalse(box4.equals((Object)box5));
      assertFalse(box4.equals((Object)box0));
      assertFalse(box4.equals((Object)box3));
      assertFalse(box4.equals((Object)box2));
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(box4, box6);
      assertNotSame(box4, box1);
      assertNotSame(box4, box5);
      assertNotSame(box4, box0);
      assertNotSame(box4, box3);
      assertNotSame(box4, box2);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(3.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.7320508F, vector3_4.length(), 0.01F);
      assertEquals(1.0F, vector3_4.x(), 0.01F);
      assertEquals(1.0F, vector3_4.y(), 0.01F);
      assertEquals(1.7320508F, vector3_5.length(), 0.01F);
      assertEquals(3.0F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_5.x(), 0.01F);
      assertEquals(1.0F, vector3_5.y(), 0.01F);
      assertEquals(1.0F, vector3_5.z(), 0.01F);
      assertEquals(2.0F, box4.longestEdge(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(3.4641016F, box4.diagonalLength(), 0.01F);
      assertNotNull(vector3_5);
      
      Box box7 = box1.set((IVector3) ray3_0.origin, (IVector3) vector3_5);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(1.0F, vector3_4.z, 0.01F);
      assertEquals(1.0F, vector3_4.x, 0.01F);
      assertEquals(1.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_5.y, 0.01F);
      assertEquals(1.0F, vector3_5.x, 0.01F);
      assertEquals(1.0F, vector3_5.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(box7.equals((Object)box0));
      assertFalse(box7.equals((Object)box2));
      assertFalse(box7.equals((Object)box4));
      assertFalse(box7.equals((Object)box5));
      assertFalse(box7.equals((Object)box6));
      assertFalse(box7.equals((Object)box3));
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(box1.equals((Object)box4));
      assertFalse(box1.equals((Object)box5));
      assertFalse(box1.equals((Object)box3));
      assertFalse(box1.equals((Object)box2));
      assertFalse(box1.equals((Object)box6));
      assertFalse(box1.equals((Object)box0));
      assertFalse(box4.equals((Object)box6));
      assertFalse(box4.equals((Object)box1));
      assertFalse(box4.equals((Object)box5));
      assertFalse(box4.equals((Object)box0));
      assertFalse(box4.equals((Object)box3));
      assertFalse(box4.equals((Object)box2));
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_5);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(box7, box0);
      assertSame(box7, box1);
      assertNotSame(box7, box2);
      assertNotSame(box7, box4);
      assertNotSame(box7, box5);
      assertNotSame(box7, box6);
      assertNotSame(box7, box3);
      assertNotSame(ray3_0, ray3_1);
      assertNotSame(box1, box4);
      assertNotSame(box1, box5);
      assertSame(box1, box7);
      assertNotSame(box1, box3);
      assertNotSame(box1, box2);
      assertNotSame(box1, box6);
      assertNotSame(box1, box0);
      assertNotSame(box4, box6);
      assertNotSame(box4, box7);
      assertNotSame(box4, box1);
      assertNotSame(box4, box5);
      assertNotSame(box4, box0);
      assertNotSame(box4, box3);
      assertNotSame(box4, box2);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(3.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_4.z(), 0.01F);
      assertEquals(1.7320508F, vector3_4.length(), 0.01F);
      assertEquals(1.0F, vector3_4.x(), 0.01F);
      assertEquals(1.0F, vector3_4.y(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_5.length(), 0.01F);
      assertEquals(3.0F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_5.x(), 0.01F);
      assertEquals(1.0F, vector3_5.y(), 0.01F);
      assertEquals(1.0F, vector3_5.z(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, box7.longestEdge(), 0.01F);
      assertFalse(box7.isEmpty());
      assertEquals(1.4142135F, box7.diagonalLength(), 0.01F);
      assertEquals(1.4142135F, box1.diagonalLength(), 0.01F);
      assertEquals(1.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box4.longestEdge(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(3.4641016F, box4.diagonalLength(), 0.01F);
      assertNotNull(box7);
      
      Matrix4 matrix4_1 = new Matrix4();
      assertEquals(0.0F, matrix4_1.m03, 0.01F);
      assertEquals(0.0F, matrix4_1.m20, 0.01F);
      assertEquals(0.0F, matrix4_1.m31, 0.01F);
      assertEquals(0.0F, matrix4_1.m30, 0.01F);
      assertEquals(0.0F, matrix4_1.m02, 0.01F);
      assertEquals(0.0F, matrix4_1.m13, 0.01F);
      assertEquals(0.0F, matrix4_1.m10, 0.01F);
      assertEquals(0.0F, matrix4_1.m21, 0.01F);
      assertEquals(0.0F, matrix4_1.m32, 0.01F);
      assertEquals(0.0F, matrix4_1.m01, 0.01F);
      assertEquals(0.0F, matrix4_1.m12, 0.01F);
      assertEquals(0.0F, matrix4_1.m23, 0.01F);
      assertEquals(1.0F, matrix4_1.m00, 0.01F);
      assertEquals(1.0F, matrix4_1.m11, 0.01F);
      assertEquals(1.0F, matrix4_1.m22, 0.01F);
      assertEquals(1.0F, matrix4_1.m33, 0.01F);
      assertTrue(matrix4_1.equals((Object)matrix4_0));
      assertEquals(0.0F, matrix4_1.m23(), 0.01F);
      assertEquals(0.0F, matrix4_1.m01(), 0.01F);
      assertEquals(0.0F, matrix4_1.m12(), 0.01F);
      assertEquals(0.0F, matrix4_1.m20(), 0.01F);
      assertEquals(0.0F, matrix4_1.m31(), 0.01F);
      assertEquals(0.0F, matrix4_1.m30(), 0.01F);
      assertEquals(1.0F, matrix4_1.m33(), 0.01F);
      assertEquals(1.0F, matrix4_1.m00(), 0.01F);
      assertEquals(1.0F, matrix4_1.m22(), 0.01F);
      assertEquals(1.0F, matrix4_1.m11(), 0.01F);
      assertEquals(0.0F, matrix4_1.m21(), 0.01F);
      assertEquals(0.0F, matrix4_1.m32(), 0.01F);
      assertEquals(0.0F, matrix4_1.m10(), 0.01F);
      assertEquals(0.0F, matrix4_1.m13(), 0.01F);
      assertEquals(0.0F, matrix4_1.m02(), 0.01F);
      assertEquals(1.0F, matrix4_1.approximateUniformScale(), 0.01F);
      assertTrue(matrix4_1.isAffine());
      assertFalse(matrix4_1.isMirrored());
      assertEquals(0.0F, matrix4_1.m03(), 0.01F);
      assertNotNull(matrix4_1);
      
      Vector3 vector3_6 = matrix4_1.extractScale();
      assertEquals(0.0F, matrix4_1.m03, 0.01F);
      assertEquals(0.0F, matrix4_1.m20, 0.01F);
      assertEquals(0.0F, matrix4_1.m31, 0.01F);
      assertEquals(0.0F, matrix4_1.m30, 0.01F);
      assertEquals(0.0F, matrix4_1.m02, 0.01F);
      assertEquals(0.0F, matrix4_1.m13, 0.01F);
      assertEquals(0.0F, matrix4_1.m10, 0.01F);
      assertEquals(0.0F, matrix4_1.m21, 0.01F);
      assertEquals(0.0F, matrix4_1.m32, 0.01F);
      assertEquals(0.0F, matrix4_1.m01, 0.01F);
      assertEquals(0.0F, matrix4_1.m12, 0.01F);
      assertEquals(0.0F, matrix4_1.m23, 0.01F);
      assertEquals(1.0F, matrix4_1.m00, 0.01F);
      assertEquals(1.0F, matrix4_1.m11, 0.01F);
      assertEquals(1.0F, matrix4_1.m22, 0.01F);
      assertEquals(1.0F, matrix4_1.m33, 0.01F);
      assertEquals(1.0F, vector3_6.z, 0.01F);
      assertEquals(1.0F, vector3_6.x, 0.01F);
      assertEquals(1.0F, vector3_6.y, 0.01F);
      assertTrue(matrix4_1.equals((Object)matrix4_0));
      assertTrue(vector3_6.equals((Object)vector3_4));
      assertTrue(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertNotSame(matrix4_1, matrix4_0);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_2);
      assertEquals(0.0F, matrix4_1.m23(), 0.01F);
      assertEquals(0.0F, matrix4_1.m01(), 0.01F);
      assertEquals(0.0F, matrix4_1.m12(), 0.01F);
      assertEquals(0.0F, matrix4_1.m20(), 0.01F);
      assertEquals(0.0F, matrix4_1.m31(), 0.01F);
      assertEquals(0.0F, matrix4_1.m30(), 0.01F);
      assertEquals(1.0F, matrix4_1.m33(), 0.01F);
      assertEquals(1.0F, matrix4_1.m00(), 0.01F);
      assertEquals(1.0F, matrix4_1.m22(), 0.01F);
      assertEquals(1.0F, matrix4_1.m11(), 0.01F);
      assertEquals(0.0F, matrix4_1.m21(), 0.01F);
      assertEquals(0.0F, matrix4_1.m32(), 0.01F);
      assertEquals(0.0F, matrix4_1.m10(), 0.01F);
      assertEquals(0.0F, matrix4_1.m13(), 0.01F);
      assertEquals(0.0F, matrix4_1.m02(), 0.01F);
      assertEquals(1.0F, matrix4_1.approximateUniformScale(), 0.01F);
      assertTrue(matrix4_1.isAffine());
      assertFalse(matrix4_1.isMirrored());
      assertEquals(0.0F, matrix4_1.m03(), 0.01F);
      assertEquals(1.0F, vector3_6.x(), 0.01F);
      assertEquals(1.0F, vector3_6.z(), 0.01F);
      assertEquals(3.0F, vector3_6.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_6.y(), 0.01F);
      assertEquals(1.7320508F, vector3_6.length(), 0.01F);
      assertNotNull(vector3_6);
      
      Box box8 = Box.ZERO;
      assertFalse(box8.equals((Object)box5));
      assertFalse(box8.equals((Object)box1));
      assertFalse(box8.equals((Object)box6));
      assertFalse(box8.equals((Object)box0));
      assertFalse(box8.equals((Object)box2));
      assertFalse(box8.equals((Object)box4));
      assertFalse(box8.equals((Object)box7));
      assertFalse(box8.equals((Object)box3));
      assertNotSame(box8, box5);
      assertNotSame(box8, box1);
      assertNotSame(box8, box6);
      assertNotSame(box8, box0);
      assertNotSame(box8, box2);
      assertNotSame(box8, box4);
      assertNotSame(box8, box7);
      assertNotSame(box8, box3);
      assertFalse(box8.isEmpty());
      assertEquals(0.0F, box8.longestEdge(), 0.01F);
      assertEquals(0.0F, box8.diagonalLength(), 0.01F);
      assertNotNull(box8);
      
      Box box9 = new Box(ray3_0.origin, vector3_6);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, matrix4_1.m03, 0.01F);
      assertEquals(0.0F, matrix4_1.m20, 0.01F);
      assertEquals(0.0F, matrix4_1.m31, 0.01F);
      assertEquals(0.0F, matrix4_1.m30, 0.01F);
      assertEquals(0.0F, matrix4_1.m02, 0.01F);
      assertEquals(0.0F, matrix4_1.m13, 0.01F);
      assertEquals(0.0F, matrix4_1.m10, 0.01F);
      assertEquals(0.0F, matrix4_1.m21, 0.01F);
      assertEquals(0.0F, matrix4_1.m32, 0.01F);
      assertEquals(0.0F, matrix4_1.m01, 0.01F);
      assertEquals(0.0F, matrix4_1.m12, 0.01F);
      assertEquals(0.0F, matrix4_1.m23, 0.01F);
      assertEquals(1.0F, matrix4_1.m00, 0.01F);
      assertEquals(1.0F, matrix4_1.m11, 0.01F);
      assertEquals(1.0F, matrix4_1.m22, 0.01F);
      assertEquals(1.0F, matrix4_1.m33, 0.01F);
      assertEquals(1.0F, vector3_6.z, 0.01F);
      assertEquals(1.0F, vector3_6.x, 0.01F);
      assertEquals(1.0F, vector3_6.y, 0.01F);
      assertTrue(matrix4_0.equals((Object)matrix4_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertTrue(matrix4_1.equals((Object)matrix4_0));
      assertTrue(vector3_6.equals((Object)vector3_4));
      assertTrue(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertTrue(box9.equals((Object)box1));
      assertFalse(box9.equals((Object)box6));
      assertFalse(box9.equals((Object)box5));
      assertFalse(box9.equals((Object)box3));
      assertFalse(box9.equals((Object)box0));
      assertTrue(box9.equals((Object)box7));
      assertFalse(box9.equals((Object)box8));
      assertFalse(box9.equals((Object)box4));
      assertFalse(box9.equals((Object)box2));
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, matrix4_1.m23(), 0.01F);
      assertEquals(0.0F, matrix4_1.m01(), 0.01F);
      assertEquals(0.0F, matrix4_1.m12(), 0.01F);
      assertEquals(0.0F, matrix4_1.m20(), 0.01F);
      assertEquals(0.0F, matrix4_1.m31(), 0.01F);
      assertEquals(0.0F, matrix4_1.m30(), 0.01F);
      assertEquals(1.0F, matrix4_1.m33(), 0.01F);
      assertEquals(1.0F, matrix4_1.m00(), 0.01F);
      assertEquals(1.0F, matrix4_1.m22(), 0.01F);
      assertEquals(1.0F, matrix4_1.m11(), 0.01F);
      assertEquals(0.0F, matrix4_1.m21(), 0.01F);
      assertEquals(0.0F, matrix4_1.m32(), 0.01F);
      assertEquals(0.0F, matrix4_1.m10(), 0.01F);
      assertEquals(0.0F, matrix4_1.m13(), 0.01F);
      assertEquals(0.0F, matrix4_1.m02(), 0.01F);
      assertEquals(1.0F, matrix4_1.approximateUniformScale(), 0.01F);
      assertTrue(matrix4_1.isAffine());
      assertFalse(matrix4_1.isMirrored());
      assertEquals(0.0F, matrix4_1.m03(), 0.01F);
      assertEquals(1.0F, vector3_6.x(), 0.01F);
      assertEquals(1.0F, vector3_6.z(), 0.01F);
      assertEquals(3.0F, vector3_6.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_6.y(), 0.01F);
      assertEquals(1.7320508F, vector3_6.length(), 0.01F);
      assertEquals(1.0F, box9.longestEdge(), 0.01F);
      assertEquals(1.4142135F, box9.diagonalLength(), 0.01F);
      assertFalse(box9.isEmpty());
      assertNotNull(box9);
      
      Box box10 = new Box();
      assertFalse(box10.equals((Object)box9));
      assertTrue(box10.equals((Object)box0));
      assertFalse(box10.equals((Object)box6));
      assertFalse(box10.equals((Object)box5));
      assertFalse(box10.equals((Object)box3));
      assertTrue(box10.equals((Object)box2));
      assertFalse(box10.equals((Object)box1));
      assertFalse(box10.equals((Object)box8));
      assertFalse(box10.equals((Object)box7));
      assertFalse(box10.equals((Object)box4));
      assertTrue(box10.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box10.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box10.longestEdge(), 0.01F);
      assertNotNull(box10);
      
      Box box11 = box1.intersectLocal(box6);
      assertTrue(box6.equals((Object)box1));
      assertFalse(box6.equals((Object)box10));
      assertFalse(box6.equals((Object)box8));
      assertFalse(box6.equals((Object)box5));
      assertFalse(box6.equals((Object)box0));
      assertFalse(box6.equals((Object)box3));
      assertTrue(box6.equals((Object)box7));
      assertFalse(box6.equals((Object)box2));
      assertFalse(box6.equals((Object)box9));
      assertFalse(box6.equals((Object)box4));
      assertFalse(box0.equals((Object)box7));
      assertFalse(box0.equals((Object)box9));
      assertFalse(box0.equals((Object)box4));
      assertFalse(box0.equals((Object)box6));
      assertTrue(box0.equals((Object)box10));
      assertFalse(box0.equals((Object)box5));
      assertFalse(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box8));
      assertFalse(box0.equals((Object)box3));
      assertFalse(box1.equals((Object)box4));
      assertFalse(box1.equals((Object)box5));
      assertFalse(box1.equals((Object)box8));
      assertFalse(box1.equals((Object)box3));
      assertTrue(box1.equals((Object)box6));
      assertFalse(box1.equals((Object)box10));
      assertFalse(box1.equals((Object)box2));
      assertFalse(box1.equals((Object)box9));
      assertFalse(box1.equals((Object)box0));
      assertTrue(box11.equals((Object)box6));
      assertFalse(box11.equals((Object)box2));
      assertFalse(box11.equals((Object)box0));
      assertFalse(box11.equals((Object)box10));
      assertFalse(box11.equals((Object)box5));
      assertFalse(box11.equals((Object)box4));
      assertFalse(box11.equals((Object)box9));
      assertFalse(box11.equals((Object)box3));
      assertFalse(box11.equals((Object)box8));
      assertNotSame(box6, box7);
      assertNotSame(box6, box10);
      assertNotSame(box6, box8);
      assertNotSame(box6, box5);
      assertNotSame(box6, box1);
      assertNotSame(box6, box0);
      assertNotSame(box6, box3);
      assertNotSame(box6, box2);
      assertNotSame(box6, box9);
      assertNotSame(box6, box4);
      assertNotSame(box6, box11);
      assertNotSame(box0, box7);
      assertNotSame(box0, box11);
      assertNotSame(box0, box9);
      assertNotSame(box0, box4);
      assertNotSame(box0, box10);
      assertNotSame(box0, box6);
      assertNotSame(box0, box5);
      assertNotSame(box0, box1);
      assertNotSame(box0, box8);
      assertNotSame(box0, box3);
      assertSame(box0, box2);
      assertNotSame(box1, box4);
      assertNotSame(box1, box5);
      assertSame(box1, box7);
      assertSame(box1, box11);
      assertNotSame(box1, box8);
      assertNotSame(box1, box3);
      assertNotSame(box1, box10);
      assertNotSame(box1, box2);
      assertNotSame(box1, box6);
      assertNotSame(box1, box9);
      assertNotSame(box1, box0);
      assertNotSame(box11, box2);
      assertNotSame(box11, box0);
      assertSame(box11, box1);
      assertNotSame(box11, box10);
      assertNotSame(box11, box6);
      assertNotSame(box11, box5);
      assertNotSame(box11, box4);
      assertNotSame(box11, box9);
      assertNotSame(box11, box3);
      assertNotSame(box11, box8);
      assertSame(box11, box7);
      assertTrue(box6.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box6.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box6.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertTrue(box1.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box11.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box11.diagonalLength(), 0.01F);
      assertTrue(box11.isEmpty());
      assertNotNull(box11);
      
      boolean boolean2 = box5.intersection(ray3_1, ray3_0.origin);
      assertFalse(boolean2);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertTrue(matrix4_0.equals((Object)matrix4_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(boolean2 == boolean1);
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertFalse(box5.equals((Object)box1));
      assertFalse(box5.equals((Object)box4));
      assertFalse(box5.equals((Object)box3));
      assertFalse(box5.equals((Object)box8));
      assertFalse(box5.equals((Object)box7));
      assertFalse(box5.equals((Object)box11));
      assertFalse(box5.equals((Object)box2));
      assertFalse(box5.equals((Object)box9));
      assertFalse(box5.equals((Object)box0));
      assertFalse(box5.equals((Object)box10));
      assertFalse(box5.equals((Object)box6));
      assertNotSame(matrix4_0, matrix4_1);
      assertNotSame(vector3_0, vector3_6);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(ray3_0, ray3_1);
      assertNotSame(ray3_1, ray3_0);
      assertNotSame(box5, box1);
      assertNotSame(box5, box4);
      assertNotSame(box5, box3);
      assertNotSame(box5, box8);
      assertNotSame(box5, box7);
      assertNotSame(box5, box11);
      assertNotSame(box5, box2);
      assertNotSame(box5, box9);
      assertNotSame(box5, box0);
      assertNotSame(box5, box10);
      assertNotSame(box5, box6);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertTrue(box5.isEmpty());
      assertEquals(0.0F, box5.longestEdge(), 0.01F);
      assertEquals(1.0F, box5.diagonalLength(), 0.01F);
      
      Box box12 = box2.expandLocal(1.0F, (-2989.8413F), 1.0F);
      assertFalse(box0.equals((Object)box7));
      assertFalse(box0.equals((Object)box11));
      assertFalse(box0.equals((Object)box9));
      assertFalse(box0.equals((Object)box4));
      assertFalse(box0.equals((Object)box6));
      assertTrue(box0.equals((Object)box10));
      assertFalse(box0.equals((Object)box5));
      assertFalse(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box8));
      assertFalse(box0.equals((Object)box3));
      assertFalse(box1.equals((Object)box4));
      assertFalse(box1.equals((Object)box5));
      assertFalse(box1.equals((Object)box8));
      assertFalse(box1.equals((Object)box3));
      assertTrue(box1.equals((Object)box6));
      assertFalse(box1.equals((Object)box10));
      assertFalse(box1.equals((Object)box2));
      assertFalse(box1.equals((Object)box9));
      assertFalse(box1.equals((Object)box0));
      assertFalse(box2.equals((Object)box6));
      assertFalse(box2.equals((Object)box11));
      assertFalse(box2.equals((Object)box4));
      assertFalse(box2.equals((Object)box7));
      assertFalse(box2.equals((Object)box9));
      assertFalse(box2.equals((Object)box3));
      assertTrue(box2.equals((Object)box10));
      assertFalse(box2.equals((Object)box5));
      assertFalse(box2.equals((Object)box8));
      assertFalse(box2.equals((Object)box1));
      assertFalse(box12.equals((Object)box4));
      assertFalse(box12.equals((Object)box9));
      assertFalse(box12.equals((Object)box1));
      assertFalse(box12.equals((Object)box6));
      assertFalse(box12.equals((Object)box5));
      assertFalse(box12.equals((Object)box3));
      assertFalse(box12.equals((Object)box8));
      assertFalse(box12.equals((Object)box7));
      assertTrue(box12.equals((Object)box10));
      assertFalse(box12.equals((Object)box11));
      assertNotSame(box0, box7);
      assertNotSame(box0, box11);
      assertNotSame(box0, box9);
      assertNotSame(box0, box4);
      assertSame(box0, box12);
      assertNotSame(box0, box6);
      assertNotSame(box0, box10);
      assertNotSame(box0, box5);
      assertNotSame(box0, box1);
      assertNotSame(box0, box8);
      assertNotSame(box0, box3);
      assertSame(box0, box2);
      assertNotSame(box1, box4);
      assertNotSame(box1, box5);
      assertSame(box1, box7);
      assertSame(box1, box11);
      assertNotSame(box1, box8);
      assertNotSame(box1, box3);
      assertNotSame(box1, box12);
      assertNotSame(box1, box2);
      assertNotSame(box1, box10);
      assertNotSame(box1, box6);
      assertNotSame(box1, box9);
      assertNotSame(box1, box0);
      assertNotSame(box2, box6);
      assertSame(box2, box0);
      assertSame(box2, box12);
      assertNotSame(box2, box4);
      assertNotSame(box2, box10);
      assertNotSame(box2, box11);
      assertNotSame(box2, box7);
      assertNotSame(box2, box9);
      assertNotSame(box2, box3);
      assertNotSame(box2, box5);
      assertNotSame(box2, box8);
      assertNotSame(box2, box1);
      assertNotSame(box12, box4);
      assertNotSame(box12, box9);
      assertNotSame(box12, box1);
      assertNotSame(box12, box6);
      assertSame(box12, box0);
      assertSame(box12, box2);
      assertNotSame(box12, box5);
      assertNotSame(box12, box10);
      assertNotSame(box12, box3);
      assertNotSame(box12, box8);
      assertNotSame(box12, box7);
      assertNotSame(box12, box11);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertTrue(box1.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box2.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box2.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box2.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box12.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box12.diagonalLength(), 0.01F);
      assertTrue(box12.isEmpty());
      assertNotNull(box12);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Matrix4 matrix4_0 = new Matrix4((-2260.529F), (-2260.529F), (-3964.9F), (-3.1415927F), (-3.1415927F), (-340.86108F), (-3964.9F), 3451.0F, (-3.1415927F), Float.NaN, (-1198.32F), 3451.0F, (-0.99999F), (-0.99999F), (-0.99999F), (-1.0F));
      assertEquals((-2260.529F), matrix4_0.m00, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m02, 0.01F);
      assertEquals((-2260.529F), matrix4_0.m10, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m13, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m23, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m03, 0.01F);
      assertEquals((-3964.9F), matrix4_0.m20, 0.01F);
      assertEquals((-1198.32F), matrix4_0.m22, 0.01F);
      assertEquals((-1.0F), matrix4_0.m33, 0.01F);
      assertEquals((-3964.9F), matrix4_0.m21, 0.01F);
      assertEquals((-340.86108F), matrix4_0.m11, 0.01F);
      assertEquals(3451.0F, matrix4_0.m32, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m30, 0.01F);
      assertEquals(3451.0F, matrix4_0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4_0.m12, 0.01F);
      assertEquals((-3964.9F), matrix4_0.m21(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m33(), 0.01F);
      assertEquals((-3964.9F), matrix4_0.m20(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m30(), 0.01F);
      assertEquals(Float.NaN, matrix4_0.m12(), 0.01F);
      assertEquals((-340.86108F), matrix4_0.m11(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-1198.32F), matrix4_0.m22(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m13(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m23(), 0.01F);
      assertEquals((-2260.529F), matrix4_0.m00(), 0.01F);
      assertEquals((-2260.529F), matrix4_0.m10(), 0.01F);
      assertEquals(3451.0F, matrix4_0.m31(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m02(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(Float.NaN, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(3451.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m03(), 0.01F);
      assertNotNull(matrix4_0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = matrix4_0.projectPoint((IVector3) vector3_0);
      assertEquals((-2260.529F), matrix4_0.m00, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m02, 0.01F);
      assertEquals((-2260.529F), matrix4_0.m10, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m13, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m23, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m03, 0.01F);
      assertEquals((-3964.9F), matrix4_0.m20, 0.01F);
      assertEquals((-1198.32F), matrix4_0.m22, 0.01F);
      assertEquals((-1.0F), matrix4_0.m33, 0.01F);
      assertEquals((-3964.9F), matrix4_0.m21, 0.01F);
      assertEquals((-340.86108F), matrix4_0.m11, 0.01F);
      assertEquals(3451.0F, matrix4_0.m32, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m30, 0.01F);
      assertEquals(3451.0F, matrix4_0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(3.1415927F, vector3_1.x, 0.01F);
      assertEquals((-3451.0F), vector3_1.y, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals((-3964.9F), matrix4_0.m21(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m33(), 0.01F);
      assertEquals((-3964.9F), matrix4_0.m20(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m30(), 0.01F);
      assertEquals(Float.NaN, matrix4_0.m12(), 0.01F);
      assertEquals((-340.86108F), matrix4_0.m11(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-1198.32F), matrix4_0.m22(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m13(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m23(), 0.01F);
      assertEquals((-2260.529F), matrix4_0.m00(), 0.01F);
      assertEquals((-2260.529F), matrix4_0.m10(), 0.01F);
      assertEquals(3451.0F, matrix4_0.m31(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m02(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(Float.NaN, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(3451.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(3.1415927F, vector3_1.x(), 0.01F);
      assertEquals((-3451.0F), vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertNotNull(vector3_1);
      
      Ray3 ray3_0 = new Ray3(vector3_1, vector3_1);
      assertEquals((-2260.529F), matrix4_0.m00, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m02, 0.01F);
      assertEquals((-2260.529F), matrix4_0.m10, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m13, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m23, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m03, 0.01F);
      assertEquals((-3964.9F), matrix4_0.m20, 0.01F);
      assertEquals((-1198.32F), matrix4_0.m22, 0.01F);
      assertEquals((-1.0F), matrix4_0.m33, 0.01F);
      assertEquals((-3964.9F), matrix4_0.m21, 0.01F);
      assertEquals((-340.86108F), matrix4_0.m11, 0.01F);
      assertEquals(3451.0F, matrix4_0.m32, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m30, 0.01F);
      assertEquals(3451.0F, matrix4_0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(3.1415927F, vector3_1.x, 0.01F);
      assertEquals((-3451.0F), vector3_1.y, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals((-3964.9F), matrix4_0.m21(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m33(), 0.01F);
      assertEquals((-3964.9F), matrix4_0.m20(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m30(), 0.01F);
      assertEquals(Float.NaN, matrix4_0.m12(), 0.01F);
      assertEquals((-340.86108F), matrix4_0.m11(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-1198.32F), matrix4_0.m22(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m13(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m23(), 0.01F);
      assertEquals((-2260.529F), matrix4_0.m00(), 0.01F);
      assertEquals((-2260.529F), matrix4_0.m10(), 0.01F);
      assertEquals(3451.0F, matrix4_0.m31(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m02(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(Float.NaN, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(3451.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(3.1415927F, vector3_1.x(), 0.01F);
      assertEquals((-3451.0F), vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
      assertNotNull(ray3_0);
      
      boolean boolean0 = box0.intersection(ray3_0, ray3_0.direction);
      assertFalse(boolean0);
      assertEquals((-2260.529F), matrix4_0.m00, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m02, 0.01F);
      assertEquals((-2260.529F), matrix4_0.m10, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m13, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m23, 0.01F);
      assertEquals((-0.99999F), matrix4_0.m03, 0.01F);
      assertEquals((-3964.9F), matrix4_0.m20, 0.01F);
      assertEquals((-1198.32F), matrix4_0.m22, 0.01F);
      assertEquals((-1.0F), matrix4_0.m33, 0.01F);
      assertEquals((-3964.9F), matrix4_0.m21, 0.01F);
      assertEquals((-340.86108F), matrix4_0.m11, 0.01F);
      assertEquals(3451.0F, matrix4_0.m32, 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m30, 0.01F);
      assertEquals(3451.0F, matrix4_0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(Float.NaN, vector3_1.z, 0.01F);
      assertEquals(3.1415927F, vector3_1.x, 0.01F);
      assertEquals((-3451.0F), vector3_1.y, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals((-3964.9F), matrix4_0.m21(), 0.01F);
      assertEquals((-1.0F), matrix4_0.m33(), 0.01F);
      assertEquals((-3964.9F), matrix4_0.m20(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m30(), 0.01F);
      assertEquals(Float.NaN, matrix4_0.m12(), 0.01F);
      assertEquals((-340.86108F), matrix4_0.m11(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-1198.32F), matrix4_0.m22(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m13(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m23(), 0.01F);
      assertEquals((-2260.529F), matrix4_0.m00(), 0.01F);
      assertEquals((-2260.529F), matrix4_0.m10(), 0.01F);
      assertEquals(3451.0F, matrix4_0.m31(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m01(), 0.01F);
      assertEquals((-3.1415927F), matrix4_0.m02(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(Float.NaN, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(3451.0F, matrix4_0.m32(), 0.01F);
      assertEquals((-0.99999F), matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.z(), 0.01F);
      assertEquals(3.1415927F, vector3_1.x(), 0.01F);
      assertEquals((-3451.0F), vector3_1.y(), 0.01F);
      assertEquals(Float.NaN, vector3_1.length(), 0.01F);
      assertEquals(Float.NaN, vector3_1.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      Vector3 vector3_0 = box0._maxExtent;
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertNotNull(ray3_0);
      
      boolean boolean0 = box0.intersectsY(ray3_0, 1613.0F);
      assertFalse(boolean0);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = box0.setToEmpty();
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = 1.0E-5F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0E-5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1.0E-5F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(9.9999994E-11F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0E-5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1.0E-5F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(9.9999994E-11F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.y(), 0.01F);
      assertNotNull(ray3_0);
      
      boolean boolean0 = box0.intersection(ray3_0, ray3_0.origin);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0E-5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1.0E-5F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertSame(box0, box1);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(9.9999994E-11F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      Vector3 vector3_0 = new Vector3(1.0E-5F, (-1032.0F), 1.0E-5F);
      assertEquals((-1032.0F), vector3_0.y, 0.01F);
      assertEquals(1.0E-5F, vector3_0.z, 0.01F);
      assertEquals(1.0E-5F, vector3_0.x, 0.01F);
      assertEquals(1.0E-5F, vector3_0.z(), 0.01F);
      assertEquals(1065024.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.x(), 0.01F);
      assertEquals(1032.0F, vector3_0.length(), 0.01F);
      assertEquals((-1032.0F), vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals((-1032.0F), vector3_0.y, 0.01F);
      assertEquals(1.0E-5F, vector3_0.z, 0.01F);
      assertEquals(1.0E-5F, vector3_0.x, 0.01F);
      assertEquals(1.0E-5F, vector3_0.z(), 0.01F);
      assertEquals(1065024.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.x(), 0.01F);
      assertEquals(1032.0F, vector3_0.length(), 0.01F);
      assertEquals((-1032.0F), vector3_0.y(), 0.01F);
      assertNotNull(ray3_0);
      
      boolean boolean0 = box0.intersection(ray3_0, ray3_0.direction);
      assertFalse(boolean0);
      assertEquals((-1032.0F), vector3_0.y, 0.01F);
      assertEquals(1.0E-5F, vector3_0.z, 0.01F);
      assertEquals(1.0E-5F, vector3_0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(1.0E-5F, vector3_0.z(), 0.01F);
      assertEquals(1065024.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.x(), 0.01F);
      assertEquals(1032.0F, vector3_0.length(), 0.01F);
      assertEquals((-1032.0F), vector3_0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      Vector3 vector3_0 = new Vector3(1.0E-5F, 1.0E-5F, 383.7268F);
      assertEquals(383.7268F, vector3_0.z, 0.01F);
      assertEquals(1.0E-5F, vector3_0.y, 0.01F);
      assertEquals(1.0E-5F, vector3_0.x, 0.01F);
      assertEquals(1.0E-5F, vector3_0.x(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.y(), 0.01F);
      assertEquals(383.7268F, vector3_0.length(), 0.01F);
      assertEquals(147246.27F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(383.7268F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(383.7268F, vector3_0.z, 0.01F);
      assertEquals(1.0E-5F, vector3_0.y, 0.01F);
      assertEquals(1.0E-5F, vector3_0.x, 0.01F);
      assertEquals(1.0E-5F, vector3_0.x(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.y(), 0.01F);
      assertEquals(383.7268F, vector3_0.length(), 0.01F);
      assertEquals(147246.27F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(383.7268F, vector3_0.z(), 0.01F);
      assertNotNull(ray3_0);
      
      boolean boolean0 = box0.intersects((IRay3) ray3_0);
      assertFalse(boolean0);
      assertEquals(383.7268F, vector3_0.z, 0.01F);
      assertEquals(1.0E-5F, vector3_0.y, 0.01F);
      assertEquals(1.0E-5F, vector3_0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(1.0E-5F, vector3_0.x(), 0.01F);
      assertEquals(1.0E-5F, vector3_0.y(), 0.01F);
      assertEquals(383.7268F, vector3_0.length(), 0.01F);
      assertEquals(147246.27F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(383.7268F, vector3_0.z(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = Box.MAX_VALUE;
      assertFalse(box1.equals((Object)box0));
      assertNotSame(box1, box0);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertNotNull(box1);
      
      boolean boolean0 = box1.intersects((IBox) box0);
      assertTrue(boolean0);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = Box.EMPTY;
      assertFalse(box1.equals((Object)box0));
      assertNotSame(box1, box0);
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
      
      boolean boolean0 = box0.contains((IBox) box1);
      assertTrue(boolean0);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Box box0 = new Box(vector3_0, vector3_0);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = Box.MAX_VALUE;
      assertFalse(box1.equals((Object)box0));
      assertNotSame(box1, box0);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertNotNull(box1);
      
      Box box2 = box1.ZERO.add((IBox) box0, box0);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box0));
      assertFalse(box2.equals((Object)box1));
      assertNotSame(box0, box1);
      assertSame(box0, box2);
      assertNotSame(box1, box0);
      assertNotSame(box1, box2);
      assertNotSame(box2, box1);
      assertSame(box2, box0);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(1.7320508F, box0.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(1.7320508F, box2.diagonalLength(), 0.01F);
      assertEquals(1.0F, box2.longestEdge(), 0.01F);
      assertFalse(box2.isEmpty());
      assertNotNull(box2);
      
      boolean boolean0 = box2.contains((IBox) box1);
      assertFalse(boolean0);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box0));
      assertFalse(box1.equals((Object)box2));
      assertFalse(box2.equals((Object)box1));
      assertNotSame(box0, box1);
      assertSame(box0, box2);
      assertNotSame(box1, box0);
      assertNotSame(box1, box2);
      assertNotSame(box2, box1);
      assertSame(box2, box0);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(1.7320508F, box0.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(1.7320508F, box2.diagonalLength(), 0.01F);
      assertEquals(1.0F, box2.longestEdge(), 0.01F);
      assertFalse(box2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = box0.expand((-2776.0142F), 0.0F, 0.0F);
      assertFalse(box1.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(5550.029F, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
      
      float float0 = box1.extentDistance(box0);
      assertEquals(5552.0283F, float0, 0.01F);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(5550.029F, box1.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      boolean boolean0 = box0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = new Vector3(1188.0F, 1188.0F, 0.0F);
      assertEquals(1188.0F, vector3_0.x, 0.01F);
      assertEquals(1188.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(1680.0857F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1188.0F, vector3_0.y(), 0.01F);
      assertEquals(1188.0F, vector3_0.x(), 0.01F);
      assertEquals(2822688.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertNotNull(vector3_1);
      
      Box box1 = box0.set((IVector3) vector3_1, (IVector3) vector3_0);
      assertEquals(1188.0F, vector3_0.x, 0.01F);
      assertEquals(1188.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertSame(box0, box1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(box1, box0);
      assertEquals(1680.086F, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(1188.0F, box0.longestEdge(), 0.01F);
      assertEquals(1680.0857F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1188.0F, vector3_0.y(), 0.01F);
      assertEquals(1188.0F, vector3_0.x(), 0.01F);
      assertEquals(2822688.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1680.086F, box1.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(1188.0F, box1.longestEdge(), 0.01F);
      assertNotNull(box1);
      
      boolean boolean0 = box0.isEmpty();
      assertTrue(boolean0);
      assertSame(box0, box1);
      assertEquals(1680.086F, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(1188.0F, box0.longestEdge(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = new Box(box0);
      assertTrue(box1.equals((Object)box0));
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertNotNull(box1);
      
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertNotNull(matrix4_0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = matrix4_0.transformVector((IVector3) vector3_0);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals((-1.0F), vector3_1.y, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals((-1.0F), vector3_1.z(), 0.01F);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = matrix4_0.projectPoint((IVector3) vector3_1);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals((-1.0F), vector3_1.y, 0.01F);
      assertEquals((-1.0F), vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_2.x, 0.01F);
      assertEquals((-1.0F), vector3_2.y, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals((-1.0F), vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_2.x(), 0.01F);
      assertEquals((-1.0F), vector3_2.z(), 0.01F);
      assertEquals(3.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_2.y(), 0.01F);
      assertEquals(1.7320508F, vector3_2.length(), 0.01F);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = box1.vertex(11, vector3_2);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals((-1.0F), vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_2.z, 0.01F);
      assertEquals((-1.0F), vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(1.0F, vector3_3.z, 0.01F);
      assertEquals((-1.0F), vector3_3.x, 0.01F);
      assertEquals(1.0F, vector3_3.y, 0.01F);
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals((-1.0F), vector3_1.z(), 0.01F);
      assertEquals((-1.0F), vector3_2.x(), 0.01F);
      assertEquals(1.0F, vector3_2.z(), 0.01F);
      assertEquals(3.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals(1.7320508F, vector3_2.length(), 0.01F);
      assertEquals(3.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_3.y(), 0.01F);
      assertEquals((-1.0F), vector3_3.x(), 0.01F);
      assertEquals(1.7320508F, vector3_3.length(), 0.01F);
      assertEquals(1.0F, vector3_3.z(), 0.01F);
      assertNotNull(vector3_3);
      
      Box box2 = box1.addLocal((IBox) box0);
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box2.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box0, box2);
      assertNotSame(box1, box0);
      assertSame(box1, box2);
      assertNotSame(box2, box0);
      assertSame(box2, box1);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(3.4641016F, box2.diagonalLength(), 0.01F);
      assertEquals(2.0F, box2.longestEdge(), 0.01F);
      assertFalse(box2.isEmpty());
      assertNotNull(box2);
      
      Box box3 = box2.EMPTY.addLocal((IBox) box1);
      assertTrue(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box2.equals((Object)box0));
      assertTrue(box3.equals((Object)box2));
      assertTrue(box3.equals((Object)box1));
      assertTrue(box3.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box1, box0);
      assertNotSame(box1, box3);
      assertSame(box1, box2);
      assertNotSame(box2, box3);
      assertNotSame(box2, box0);
      assertSame(box2, box1);
      assertNotSame(box3, box1);
      assertNotSame(box3, box0);
      assertNotSame(box3, box2);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(3.4641016F, box2.diagonalLength(), 0.01F);
      assertEquals(2.0F, box2.longestEdge(), 0.01F);
      assertFalse(box2.isEmpty());
      assertFalse(box3.isEmpty());
      assertEquals(3.4641016F, box3.diagonalLength(), 0.01F);
      assertEquals(2.0F, box3.longestEdge(), 0.01F);
      assertNotNull(box3);
      
      boolean boolean0 = box2.isEmpty();
      assertFalse(boolean0);
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box1.equals((Object)box3));
      assertTrue(box2.equals((Object)box0));
      assertTrue(box2.equals((Object)box3));
      assertNotSame(box0, box1);
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box1, box0);
      assertNotSame(box1, box3);
      assertSame(box1, box2);
      assertNotSame(box2, box3);
      assertNotSame(box2, box0);
      assertSame(box2, box1);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(3.4641016F, box2.diagonalLength(), 0.01F);
      assertEquals(2.0F, box2.longestEdge(), 0.01F);
      assertFalse(box2.isEmpty());
      
      float float0 = box0.extentDistance(box1);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box1.equals((Object)box3));
      assertNotSame(box0, box1);
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box1, box0);
      assertNotSame(box1, box3);
      assertSame(box1, box2);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      
      Ray3 ray3_0 = new Ray3();
      assertNotNull(ray3_0);
      
      boolean boolean1 = box1.intersection(ray3_0, ray3_0.origin);
      assertTrue(boolean1);
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box1.equals((Object)box3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(box0, box1);
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box1, box0);
      assertNotSame(box1, box3);
      assertSame(box1, box2);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      
      float float1 = box1.longestEdge();
      assertEquals(2.0F, float1, 0.01F);
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box1.equals((Object)box3));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(box0, box1);
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box1, box0);
      assertNotSame(box1, box3);
      assertSame(box1, box2);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      float float0 = box0.longestEdge();
      assertEquals(2.0F, float0, 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Box box0 = new Box();
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Box box1 = new Box(box0);
      assertTrue(box1.equals((Object)box0));
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertNotNull(box1);
      
      Box box2 = box0.MAX_VALUE.add((IBox) box1, box1);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box0));
      assertFalse(box2.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box0, box2);
      assertSame(box1, box2);
      assertNotSame(box1, box0);
      assertSame(box2, box1);
      assertNotSame(box2, box0);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box2.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box2.diagonalLength(), 0.01F);
      assertFalse(box2.isEmpty());
      assertNotNull(box2);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[5] = 0.0F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertNotNull(vector3_1);
      
      Box box3 = box0.addLocal((IVector3) vector3_0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(box3.equals((Object)box2));
      assertFalse(box3.equals((Object)box1));
      assertNotSame(box0, box1);
      assertSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(box3, box0);
      assertNotSame(box3, box2);
      assertNotSame(box3, box1);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertFalse(box3.isEmpty());
      assertEquals(0.0F, box3.longestEdge(), 0.01F);
      assertEquals(0.0F, box3.diagonalLength(), 0.01F);
      assertNotNull(box3);
      
      Vector3 vector3_2 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.57735026F, vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.y, 0.01F);
      assertEquals(0.57735026F, vector3_2.x, 0.01F);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.99999994F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_2.z(), 0.01F);
      assertEquals(0.99999994F, vector3_2.length(), 0.01F);
      assertEquals(0.57735026F, vector3_2.y(), 0.01F);
      assertEquals(0.57735026F, vector3_2.x(), 0.01F);
      assertNotNull(vector3_2);
      
      boolean boolean0 = box0.contains((IVector3) vector3_1);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertNotSame(box0, box1);
      assertSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      
      Box box4 = box0.set((IVector3) vector3_2, (IVector3) vector3_0);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.y, 0.01F);
      assertEquals(0.57735026F, vector3_2.x, 0.01F);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box2));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(box4.equals((Object)box2));
      assertFalse(box4.equals((Object)box1));
      assertSame(box0, box4);
      assertNotSame(box0, box1);
      assertSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(box4, box0);
      assertNotSame(box4, box2);
      assertSame(box4, box3);
      assertNotSame(box4, box1);
      assertEquals(0.42264974F, box0.longestEdge(), 0.01F);
      assertEquals(0.91940165F, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_2.z(), 0.01F);
      assertEquals(0.99999994F, vector3_2.length(), 0.01F);
      assertEquals(0.57735026F, vector3_2.y(), 0.01F);
      assertEquals(0.57735026F, vector3_2.x(), 0.01F);
      assertTrue(box4.isEmpty());
      assertEquals(0.91940165F, box4.diagonalLength(), 0.01F);
      assertEquals(0.42264974F, box4.longestEdge(), 0.01F);
      assertNotNull(box4);
      
      boolean boolean1 = box3.isEmpty();
      assertTrue(boolean1);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box2));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(box3.equals((Object)box2));
      assertFalse(box3.equals((Object)box1));
      assertFalse(boolean1 == boolean0);
      assertSame(box0, box4);
      assertNotSame(box0, box1);
      assertSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(box3, box0);
      assertNotSame(box3, box2);
      assertNotSame(box3, box1);
      assertSame(box3, box4);
      assertEquals(0.42264974F, box0.longestEdge(), 0.01F);
      assertEquals(0.91940165F, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertTrue(box3.isEmpty());
      assertEquals(0.91940165F, box3.diagonalLength(), 0.01F);
      assertEquals(0.42264974F, box3.longestEdge(), 0.01F);
      
      Box box5 = new Box(box4);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.z, 0.01F);
      assertEquals(0.57735026F, vector3_2.y, 0.01F);
      assertEquals(0.57735026F, vector3_2.x, 0.01F);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box2));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(box4.equals((Object)box2));
      assertFalse(box4.equals((Object)box1));
      assertTrue(box5.equals((Object)box3));
      assertFalse(box5.equals((Object)box1));
      assertFalse(box5.equals((Object)box2));
      assertTrue(box5.equals((Object)box0));
      assertTrue(box5.equals((Object)box4));
      assertEquals(0.42264974F, box0.longestEdge(), 0.01F);
      assertEquals(0.91940165F, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_2.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_2.z(), 0.01F);
      assertEquals(0.99999994F, vector3_2.length(), 0.01F);
      assertEquals(0.57735026F, vector3_2.y(), 0.01F);
      assertEquals(0.57735026F, vector3_2.x(), 0.01F);
      assertTrue(box4.isEmpty());
      assertEquals(0.91940165F, box4.diagonalLength(), 0.01F);
      assertEquals(0.42264974F, box4.longestEdge(), 0.01F);
      assertEquals(0.42264974F, box5.longestEdge(), 0.01F);
      assertEquals(0.91940165F, box5.diagonalLength(), 0.01F);
      assertTrue(box5.isEmpty());
      assertNotNull(box5);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Matrix4 matrix4_0 = (Matrix4)Matrix4.IDENTITY;
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertNotNull(matrix4_0);
      
      Box box0 = Box.ZERO;
      assertEquals(Float.NaN, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NaN, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      Box box1 = box0.projectLocal(matrix4_0);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(Float.NaN, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NaN, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(Float.NaN, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(Float.NaN, box1.longestEdge(), 0.01F);
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      Matrix4 matrix4_0 = new Matrix4(3.4028235E38F, 3.1415827F, 4681.7866F, 3.4028235E38F, 699.97F, 2729.5725F, 3.1415827F, 1676.0282F, (-1652.5536F), (-2864.2922F), 1.0F, (-209.26001F), 63.1259F, 735.0F, 3.4028235E38F, 1.0F);
      assertEquals(3.4028235E38F, matrix4_0.m30, 0.01F);
      assertEquals((-1652.5536F), matrix4_0.m02, 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m00, 0.01F);
      assertEquals((-2864.2922F), matrix4_0.m12, 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m23, 0.01F);
      assertEquals(735.0F, matrix4_0.m13, 0.01F);
      assertEquals(4681.7866F, matrix4_0.m20, 0.01F);
      assertEquals((-209.26001F), matrix4_0.m32, 0.01F);
      assertEquals(3.1415827F, matrix4_0.m10, 0.01F);
      assertEquals(3.1415827F, matrix4_0.m21, 0.01F);
      assertEquals(2729.5725F, matrix4_0.m11, 0.01F);
      assertEquals(699.97F, matrix4_0.m01, 0.01F);
      assertEquals(63.1259F, matrix4_0.m03, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(1676.0282F, matrix4_0.m31, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-209.26001F), matrix4_0.m32(), 0.01F);
      assertEquals(3.1415827F, matrix4_0.m21(), 0.01F);
      assertEquals(3.1415827F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1676.0282F, matrix4_0.m31(), 0.01F);
      assertEquals((-2864.2922F), matrix4_0.m12(), 0.01F);
      assertEquals(2729.5725F, matrix4_0.m11(), 0.01F);
      assertEquals(735.0F, matrix4_0.m13(), 0.01F);
      assertEquals(699.97F, matrix4_0.m01(), 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m00(), 0.01F);
      assertEquals(4681.7866F, matrix4_0.m20(), 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m23(), 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m30(), 0.01F);
      assertEquals(63.1259F, matrix4_0.m03(), 0.01F);
      assertEquals((-1652.5536F), matrix4_0.m02(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertNotNull(matrix4_0);
      
      Box box1 = box0.EMPTY.project((IMatrix4) matrix4_0, box0);
      assertEquals(3.4028235E38F, matrix4_0.m30, 0.01F);
      assertEquals((-1652.5536F), matrix4_0.m02, 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m00, 0.01F);
      assertEquals((-2864.2922F), matrix4_0.m12, 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m23, 0.01F);
      assertEquals(735.0F, matrix4_0.m13, 0.01F);
      assertEquals(4681.7866F, matrix4_0.m20, 0.01F);
      assertEquals((-209.26001F), matrix4_0.m32, 0.01F);
      assertEquals(3.1415827F, matrix4_0.m10, 0.01F);
      assertEquals(3.1415827F, matrix4_0.m21, 0.01F);
      assertEquals(2729.5725F, matrix4_0.m11, 0.01F);
      assertEquals(699.97F, matrix4_0.m01, 0.01F);
      assertEquals(63.1259F, matrix4_0.m03, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(1676.0282F, matrix4_0.m31, 0.01F);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertEquals(Float.NaN, box0.longestEdge(), 0.01F);
      assertEquals(Float.NaN, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-209.26001F), matrix4_0.m32(), 0.01F);
      assertEquals(3.1415827F, matrix4_0.m21(), 0.01F);
      assertEquals(3.1415827F, matrix4_0.m10(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1676.0282F, matrix4_0.m31(), 0.01F);
      assertEquals((-2864.2922F), matrix4_0.m12(), 0.01F);
      assertEquals(2729.5725F, matrix4_0.m11(), 0.01F);
      assertEquals(735.0F, matrix4_0.m13(), 0.01F);
      assertEquals(699.97F, matrix4_0.m01(), 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m00(), 0.01F);
      assertEquals(4681.7866F, matrix4_0.m20(), 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m23(), 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m30(), 0.01F);
      assertEquals(63.1259F, matrix4_0.m03(), 0.01F);
      assertEquals((-1652.5536F), matrix4_0.m02(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals(Float.NaN, box1.longestEdge(), 0.01F);
      assertEquals(Float.NaN, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(0.0F, 0.0F, (-1339.3F));
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-1339.3F), vector3_0.z, 0.01F);
      assertEquals(1339.3F, vector3_0.length(), 0.01F);
      assertEquals(1793724.6F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1339.3F), vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Box box0 = new Box(vector3_0, vector3_0);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-1339.3F), vector3_0.z, 0.01F);
      assertEquals(1339.3F, vector3_0.length(), 0.01F);
      assertEquals(1793724.6F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1339.3F), vector3_0.z(), 0.01F);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      Vector3 vector3_1 = (Vector3)box0.minimumExtent();
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals((-1339.3F), vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals((-1339.3F), vector3_1.z, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(1339.3F, vector3_0.length(), 0.01F);
      assertEquals(1793724.6F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1339.3F), vector3_0.z(), 0.01F);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(1339.3F, vector3_1.length(), 0.01F);
      assertEquals((-1339.3F), vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1793724.6F, vector3_1.lengthSquared(), 0.01F);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = (Vector3)box0.minimumExtent();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertNotNull(vector3_0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Box box0 = Box.EMPTY;
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 594.7089F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {594.7089F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(594.7089F, vector3_0.x, 0.01F);
      assertEquals(594.7089F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(594.7089F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(353678.72F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Box box1 = box0.set((IVector3) vector3_0, (IVector3) vector3_0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {594.7089F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(594.7089F, vector3_0.x, 0.01F);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(594.7089F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(594.7089F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(353678.72F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertNotNull(box1);
      
      Vector3 vector3_1 = (Vector3)box1.maximumExtent();
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {594.7089F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(594.7089F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(594.7089F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertSame(box0, box1);
      assertNotSame(vector3_0, vector3_1);
      assertSame(box1, box0);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(594.7089F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(594.7089F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(353678.72F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(594.7089F, vector3_1.length(), 0.01F);
      assertEquals(353678.72F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(594.7089F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (-1.0F);
      Vector3 vector3_0 = new Vector3(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertNotNull(vector3_0);
      
      Box box0 = new Box(vector3_0, vector3_0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertNotNull(ray3_0);
      
      boolean boolean0 = box0.intersectsZ(ray3_0, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = box0._maxExtent;
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertNotNull(ray3_0);
      
      boolean boolean0 = box0.intersectsY(ray3_0, 383.731F);
      assertFalse(boolean0);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      assertEquals(Float.POSITIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = box0.intersectLocal(box0);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertEquals(Float.POSITIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      Box box1 = box0.intersect((IBox) box0, box0);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = box0.intersect((IBox) box0);
      assertTrue(box1.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = box0.intersect((IBox) box0);
      assertTrue(box1.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertTrue(box1.isEmpty());
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Plane plane0 = new Plane();
      assertEquals(0.0F, plane0.constant, 0.01F);
      assertEquals(0.0F, plane0.constant(), 0.01F);
      assertNotNull(plane0);
      
      Vector3 vector3_0 = plane0._normal;
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertNotNull(vector3_0);
      
      IVector3[] iVector3Array0 = new IVector3[1];
      iVector3Array0[0] = (IVector3) vector3_0;
      Box box1 = box0.fromPoints(iVector3Array0);
      assertEquals(1, iVector3Array0.length);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      Box box1 = box0.expandLocal(-0.0F, 0.0F, 0.0F);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      Box box1 = box0.ZERO.expandLocal(0.0F, 0.0F, 0.0F);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertFalse(box1.isEmpty());
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      Box box1 = new Box(box0);
      assertTrue(box1.equals((Object)box0));
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
      
      Box box2 = box0.UNIT.expand((-2097.0F), 3962.817F, 0.0F, box1);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box0));
      assertFalse(box2.equals((Object)box0));
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertSame(box1, box2);
      assertNotSame(box1, box0);
      assertSame(box2, box1);
      assertNotSame(box2, box0);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(7927.634F, box1.longestEdge(), 0.01F);
      assertEquals(8967.733F, box1.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(7927.634F, box2.longestEdge(), 0.01F);
      assertEquals(8967.733F, box2.diagonalLength(), 0.01F);
      assertTrue(box2.isEmpty());
      assertNotNull(box2);
      
      Vector3 vector3_0 = (Vector3)box0.minimumExtent();
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.x, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertFalse(box0.equals((Object)box2));
      assertFalse(box0.equals((Object)box1));
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_0.x(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Box box0 = Box.EMPTY;
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Box box1 = box0.set((IVector3) vector3_0, (IVector3) vector3_0);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
      
      Matrix4 matrix4_0 = new Matrix4(0.0F, 0.0F, 3.4028235E38F, 0.0F, 0.57735026F, 594.7089F, 0.0F, (-113.4481F), (-14.282104F), 1943.7515F, (-1076.0F), (-168.9F), 0.0F, (-1027.3086F), 603.8311F, (-113.4481F));
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals((-113.4481F), matrix4_0.m33, 0.01F);
      assertEquals((-168.9F), matrix4_0.m32, 0.01F);
      assertEquals((-14.282104F), matrix4_0.m02, 0.01F);
      assertEquals((-1027.3086F), matrix4_0.m13, 0.01F);
      assertEquals(0.57735026F, matrix4_0.m01, 0.01F);
      assertEquals((-113.4481F), matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(603.8311F, matrix4_0.m23, 0.01F);
      assertEquals((-1076.0F), matrix4_0.m22, 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(594.7089F, matrix4_0.m11, 0.01F);
      assertEquals(1943.7515F, matrix4_0.m12, 0.01F);
      assertEquals(1943.7515F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals((-168.9F), matrix4_0.m32(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-1027.3086F), matrix4_0.m13(), 0.01F);
      assertEquals(0.57735026F, matrix4_0.m01(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(3.4028235E38F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals((-1076.0F), matrix4_0.m22(), 0.01F);
      assertEquals((-113.4481F), matrix4_0.m33(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(594.7089F, matrix4_0.m11(), 0.01F);
      assertEquals((-113.4481F), matrix4_0.m31(), 0.01F);
      assertEquals((-14.282104F), matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(603.8311F, matrix4_0.m23(), 0.01F);
      assertNotNull(matrix4_0);
      
      Box box2 = box1.EMPTY.project((IMatrix4) matrix4_0, box0);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals((-113.4481F), matrix4_0.m33, 0.01F);
      assertEquals((-168.9F), matrix4_0.m32, 0.01F);
      assertEquals((-14.282104F), matrix4_0.m02, 0.01F);
      assertEquals((-1027.3086F), matrix4_0.m13, 0.01F);
      assertEquals(0.57735026F, matrix4_0.m01, 0.01F);
      assertEquals((-113.4481F), matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(603.8311F, matrix4_0.m23, 0.01F);
      assertEquals((-1076.0F), matrix4_0.m22, 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(594.7089F, matrix4_0.m11, 0.01F);
      assertEquals(1943.7515F, matrix4_0.m12, 0.01F);
      assertSame(box0, box1);
      assertSame(box0, box2);
      assertSame(box1, box0);
      assertSame(box1, box2);
      assertSame(box2, box1);
      assertSame(box2, box0);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertEquals(1943.7515F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals((-168.9F), matrix4_0.m32(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-1027.3086F), matrix4_0.m13(), 0.01F);
      assertEquals(0.57735026F, matrix4_0.m01(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(3.4028235E38F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals((-1076.0F), matrix4_0.m22(), 0.01F);
      assertEquals((-113.4481F), matrix4_0.m33(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(594.7089F, matrix4_0.m11(), 0.01F);
      assertEquals((-113.4481F), matrix4_0.m31(), 0.01F);
      assertEquals((-14.282104F), matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(603.8311F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, box2.diagonalLength(), 0.01F);
      assertFalse(box2.isEmpty());
      assertEquals(0.0F, box2.longestEdge(), 0.01F);
      assertNotNull(box2);
      
      Box box3 = box2.project((IMatrix4) matrix4_0);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals((-113.4481F), matrix4_0.m33, 0.01F);
      assertEquals((-168.9F), matrix4_0.m32, 0.01F);
      assertEquals((-14.282104F), matrix4_0.m02, 0.01F);
      assertEquals((-1027.3086F), matrix4_0.m13, 0.01F);
      assertEquals(0.57735026F, matrix4_0.m01, 0.01F);
      assertEquals((-113.4481F), matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(603.8311F, matrix4_0.m23, 0.01F);
      assertEquals((-1076.0F), matrix4_0.m22, 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(594.7089F, matrix4_0.m11, 0.01F);
      assertEquals(1943.7515F, matrix4_0.m12, 0.01F);
      assertFalse(box3.equals((Object)box1));
      assertFalse(box3.equals((Object)box0));
      assertFalse(box3.equals((Object)box2));
      assertSame(box0, box1);
      assertNotSame(box0, box3);
      assertSame(box0, box2);
      assertSame(box1, box0);
      assertNotSame(box1, box3);
      assertSame(box1, box2);
      assertNotSame(box2, box3);
      assertSame(box2, box1);
      assertSame(box2, box0);
      assertNotSame(box3, box1);
      assertNotSame(box3, box0);
      assertNotSame(box3, box2);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertEquals(1943.7515F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals((-168.9F), matrix4_0.m32(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-1027.3086F), matrix4_0.m13(), 0.01F);
      assertEquals(0.57735026F, matrix4_0.m01(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(3.4028235E38F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals((-1076.0F), matrix4_0.m22(), 0.01F);
      assertEquals((-113.4481F), matrix4_0.m33(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(594.7089F, matrix4_0.m11(), 0.01F);
      assertEquals((-113.4481F), matrix4_0.m31(), 0.01F);
      assertEquals((-14.282104F), matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(603.8311F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, box2.diagonalLength(), 0.01F);
      assertFalse(box2.isEmpty());
      assertEquals(0.0F, box2.longestEdge(), 0.01F);
      assertEquals(0.0F, box3.diagonalLength(), 0.01F);
      assertFalse(box3.isEmpty());
      assertEquals(0.0F, box3.longestEdge(), 0.01F);
      assertNotNull(box3);
      
      Box box4 = box3.expand((-1.0F), 0.0F, 0.57735026F, box1);
      assertEquals(0.57735026F, vector3_0.z, 0.01F);
      assertEquals(0.57735026F, vector3_0.x, 0.01F);
      assertEquals(0.57735026F, vector3_0.y, 0.01F);
      assertEquals(0.0F, matrix4_0.m00, 0.01F);
      assertEquals((-113.4481F), matrix4_0.m33, 0.01F);
      assertEquals((-168.9F), matrix4_0.m32, 0.01F);
      assertEquals((-14.282104F), matrix4_0.m02, 0.01F);
      assertEquals((-1027.3086F), matrix4_0.m13, 0.01F);
      assertEquals(0.57735026F, matrix4_0.m01, 0.01F);
      assertEquals((-113.4481F), matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(603.8311F, matrix4_0.m23, 0.01F);
      assertEquals((-1076.0F), matrix4_0.m22, 0.01F);
      assertEquals(3.4028235E38F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(594.7089F, matrix4_0.m11, 0.01F);
      assertEquals(1943.7515F, matrix4_0.m12, 0.01F);
      assertTrue(box0.equals((Object)box3));
      assertTrue(box1.equals((Object)box3));
      assertTrue(box2.equals((Object)box3));
      assertTrue(box3.equals((Object)box2));
      assertTrue(box3.equals((Object)box1));
      assertTrue(box3.equals((Object)box0));
      assertTrue(box4.equals((Object)box3));
      assertSame(box0, box1);
      assertNotSame(box0, box3);
      assertSame(box0, box2);
      assertSame(box0, box4);
      assertSame(box1, box0);
      assertNotSame(box1, box3);
      assertSame(box1, box2);
      assertSame(box1, box4);
      assertNotSame(box2, box3);
      assertSame(box2, box1);
      assertSame(box2, box4);
      assertSame(box2, box0);
      assertNotSame(box3, box1);
      assertNotSame(box3, box0);
      assertNotSame(box3, box2);
      assertNotSame(box3, box4);
      assertSame(box4, box0);
      assertSame(box4, box1);
      assertNotSame(box4, box3);
      assertSame(box4, box2);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.57735026F, vector3_0.x(), 0.01F);
      assertEquals(0.99999994F, vector3_0.length(), 0.01F);
      assertEquals(0.57735026F, vector3_0.y(), 0.01F);
      assertEquals(0.99999994F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.57735026F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertEquals(1943.7515F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals((-168.9F), matrix4_0.m32(), 0.01F);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-1027.3086F), matrix4_0.m13(), 0.01F);
      assertEquals(0.57735026F, matrix4_0.m01(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(3.4028235E38F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals((-1076.0F), matrix4_0.m22(), 0.01F);
      assertEquals((-113.4481F), matrix4_0.m33(), 0.01F);
      assertEquals(0.0F, matrix4_0.m00(), 0.01F);
      assertEquals(594.7089F, matrix4_0.m11(), 0.01F);
      assertEquals((-113.4481F), matrix4_0.m31(), 0.01F);
      assertEquals((-14.282104F), matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(603.8311F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, box2.diagonalLength(), 0.01F);
      assertFalse(box2.isEmpty());
      assertEquals(0.0F, box2.longestEdge(), 0.01F);
      assertEquals(0.0F, box3.diagonalLength(), 0.01F);
      assertFalse(box3.isEmpty());
      assertEquals(0.0F, box3.longestEdge(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(0.0F, box4.longestEdge(), 0.01F);
      assertEquals(0.0F, box4.diagonalLength(), 0.01F);
      assertNotNull(box4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      Box box1 = box0.expand(-0.0F, 0.0F, 0.0F);
      assertTrue(box1.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertNotNull(ray3_0);
      
      Box box1 = box0.set((IVector3) vector3_0, (IVector3) ray3_0.origin);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertNotNull(box1);
      
      float float0 = box1.diagonalLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Box box0 = Box.EMPTY;
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      float[] floatArray0 = new float[5];
      Vector3 vector3_0 = new Vector3(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      boolean boolean0 = box0.contains((IVector3) vector3_0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Matrix4 matrix4_0 = (Matrix4)Matrix4.IDENTITY;
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertNotNull(matrix4_0);
      
      Matrix4 matrix4_1 = new Matrix4(matrix4_0);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_1.m01, 0.01F);
      assertEquals(0.0F, matrix4_1.m12, 0.01F);
      assertEquals(0.0F, matrix4_1.m23, 0.01F);
      assertEquals(0.0F, matrix4_1.m02, 0.01F);
      assertEquals(0.0F, matrix4_1.m13, 0.01F);
      assertEquals(0.0F, matrix4_1.m10, 0.01F);
      assertEquals(0.0F, matrix4_1.m21, 0.01F);
      assertEquals(0.0F, matrix4_1.m32, 0.01F);
      assertEquals(1.0F, matrix4_1.m00, 0.01F);
      assertEquals(1.0F, matrix4_1.m11, 0.01F);
      assertEquals(1.0F, matrix4_1.m22, 0.01F);
      assertEquals(1.0F, matrix4_1.m33, 0.01F);
      assertEquals(0.0F, matrix4_1.m30, 0.01F);
      assertEquals(0.0F, matrix4_1.m20, 0.01F);
      assertEquals(0.0F, matrix4_1.m31, 0.01F);
      assertEquals(0.0F, matrix4_1.m03, 0.01F);
      assertTrue(matrix4_1.equals((Object)matrix4_0));
      assertFalse(matrix4_0.isMirrored());
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_1.m03(), 0.01F);
      assertEquals(1.0F, matrix4_1.approximateUniformScale(), 0.01F);
      assertTrue(matrix4_1.isAffine());
      assertEquals(1.0F, matrix4_1.m33(), 0.01F);
      assertEquals(1.0F, matrix4_1.m00(), 0.01F);
      assertEquals(1.0F, matrix4_1.m22(), 0.01F);
      assertEquals(1.0F, matrix4_1.m11(), 0.01F);
      assertEquals(0.0F, matrix4_1.m21(), 0.01F);
      assertEquals(0.0F, matrix4_1.m32(), 0.01F);
      assertEquals(0.0F, matrix4_1.m10(), 0.01F);
      assertFalse(matrix4_1.isMirrored());
      assertEquals(0.0F, matrix4_1.m20(), 0.01F);
      assertEquals(0.0F, matrix4_1.m31(), 0.01F);
      assertEquals(0.0F, matrix4_1.m30(), 0.01F);
      assertEquals(0.0F, matrix4_1.m13(), 0.01F);
      assertEquals(0.0F, matrix4_1.m02(), 0.01F);
      assertEquals(0.0F, matrix4_1.m23(), 0.01F);
      assertEquals(0.0F, matrix4_1.m01(), 0.01F);
      assertEquals(0.0F, matrix4_1.m12(), 0.01F);
      assertNotNull(matrix4_1);
      
      Vector3 vector3_0 = matrix4_1.extractScale();
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_1.m01, 0.01F);
      assertEquals(0.0F, matrix4_1.m12, 0.01F);
      assertEquals(0.0F, matrix4_1.m23, 0.01F);
      assertEquals(0.0F, matrix4_1.m02, 0.01F);
      assertEquals(0.0F, matrix4_1.m13, 0.01F);
      assertEquals(0.0F, matrix4_1.m10, 0.01F);
      assertEquals(0.0F, matrix4_1.m21, 0.01F);
      assertEquals(0.0F, matrix4_1.m32, 0.01F);
      assertEquals(1.0F, matrix4_1.m00, 0.01F);
      assertEquals(1.0F, matrix4_1.m11, 0.01F);
      assertEquals(1.0F, matrix4_1.m22, 0.01F);
      assertEquals(1.0F, matrix4_1.m33, 0.01F);
      assertEquals(0.0F, matrix4_1.m30, 0.01F);
      assertEquals(0.0F, matrix4_1.m20, 0.01F);
      assertEquals(0.0F, matrix4_1.m31, 0.01F);
      assertEquals(0.0F, matrix4_1.m03, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertTrue(matrix4_0.equals((Object)matrix4_1));
      assertTrue(matrix4_1.equals((Object)matrix4_0));
      assertNotSame(matrix4_0, matrix4_1);
      assertNotSame(matrix4_1, matrix4_0);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_1.m03(), 0.01F);
      assertEquals(1.0F, matrix4_1.approximateUniformScale(), 0.01F);
      assertTrue(matrix4_1.isAffine());
      assertEquals(1.0F, matrix4_1.m33(), 0.01F);
      assertEquals(1.0F, matrix4_1.m00(), 0.01F);
      assertEquals(1.0F, matrix4_1.m22(), 0.01F);
      assertEquals(1.0F, matrix4_1.m11(), 0.01F);
      assertEquals(0.0F, matrix4_1.m21(), 0.01F);
      assertEquals(0.0F, matrix4_1.m32(), 0.01F);
      assertEquals(0.0F, matrix4_1.m10(), 0.01F);
      assertFalse(matrix4_1.isMirrored());
      assertEquals(0.0F, matrix4_1.m20(), 0.01F);
      assertEquals(0.0F, matrix4_1.m31(), 0.01F);
      assertEquals(0.0F, matrix4_1.m30(), 0.01F);
      assertEquals(0.0F, matrix4_1.m13(), 0.01F);
      assertEquals(0.0F, matrix4_1.m02(), 0.01F);
      assertEquals(0.0F, matrix4_1.m23(), 0.01F);
      assertEquals(0.0F, matrix4_1.m01(), 0.01F);
      assertEquals(0.0F, matrix4_1.m12(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      Plane plane0 = Plane.XY_PLANE;
      assertEquals(0.0F, plane0.constant, 0.01F);
      assertEquals(0.0F, plane0.constant(), 0.01F);
      assertNotNull(plane0);
      
      Vector3 vector3_1 = plane0._normal;
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_1, vector3_0);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_0.lerp((IVector3) vector3_1, 0.0F, vector3_1);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_1.m01, 0.01F);
      assertEquals(0.0F, matrix4_1.m12, 0.01F);
      assertEquals(0.0F, matrix4_1.m23, 0.01F);
      assertEquals(0.0F, matrix4_1.m02, 0.01F);
      assertEquals(0.0F, matrix4_1.m13, 0.01F);
      assertEquals(0.0F, matrix4_1.m10, 0.01F);
      assertEquals(0.0F, matrix4_1.m21, 0.01F);
      assertEquals(0.0F, matrix4_1.m32, 0.01F);
      assertEquals(1.0F, matrix4_1.m00, 0.01F);
      assertEquals(1.0F, matrix4_1.m11, 0.01F);
      assertEquals(1.0F, matrix4_1.m22, 0.01F);
      assertEquals(1.0F, matrix4_1.m33, 0.01F);
      assertEquals(0.0F, matrix4_1.m30, 0.01F);
      assertEquals(0.0F, matrix4_1.m20, 0.01F);
      assertEquals(0.0F, matrix4_1.m31, 0.01F);
      assertEquals(0.0F, matrix4_1.m03, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, plane0.constant, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(1.0F, vector3_2.x, 0.01F);
      assertTrue(matrix4_0.equals((Object)matrix4_1));
      assertTrue(matrix4_1.equals((Object)matrix4_0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertNotSame(matrix4_0, matrix4_1);
      assertNotSame(matrix4_1, matrix4_0);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_1.m03(), 0.01F);
      assertEquals(1.0F, matrix4_1.approximateUniformScale(), 0.01F);
      assertTrue(matrix4_1.isAffine());
      assertEquals(1.0F, matrix4_1.m33(), 0.01F);
      assertEquals(1.0F, matrix4_1.m00(), 0.01F);
      assertEquals(1.0F, matrix4_1.m22(), 0.01F);
      assertEquals(1.0F, matrix4_1.m11(), 0.01F);
      assertEquals(0.0F, matrix4_1.m21(), 0.01F);
      assertEquals(0.0F, matrix4_1.m32(), 0.01F);
      assertEquals(0.0F, matrix4_1.m10(), 0.01F);
      assertFalse(matrix4_1.isMirrored());
      assertEquals(0.0F, matrix4_1.m20(), 0.01F);
      assertEquals(0.0F, matrix4_1.m31(), 0.01F);
      assertEquals(0.0F, matrix4_1.m30(), 0.01F);
      assertEquals(0.0F, matrix4_1.m13(), 0.01F);
      assertEquals(0.0F, matrix4_1.m02(), 0.01F);
      assertEquals(0.0F, matrix4_1.m23(), 0.01F);
      assertEquals(0.0F, matrix4_1.m01(), 0.01F);
      assertEquals(0.0F, matrix4_1.m12(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, plane0.constant(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_2.length(), 0.01F);
      assertEquals(1.0F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.x(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals(3.0F, vector3_2.lengthSquared(), 0.01F);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = box0.center(vector3_1);
      assertEquals(0.0F, plane0.constant, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.z, 0.01F);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, plane0.constant(), 0.01F);
      assertEquals(0.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.length(), 0.01F);
      assertEquals(0.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertNotNull(vector3_3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertNotNull(matrix4_0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = matrix4_0.transformPoint((IVector3) vector3_0, vector3_0);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertNotNull(vector3_1);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_1);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertNotNull(ray3_0);
      
      float float0 = box0.intersectionZ(ray3_0, (-3.4028235E38F));
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      
      Box box1 = Box.EMPTY;
      assertTrue(box1.equals((Object)box0));
      assertNotSame(box1, box0);
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertNotNull(box1);
      
      Box box2 = box0.intersectLocal(box1);
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box2.equals((Object)box1));
      assertNotSame(box0, box1);
      assertSame(box0, box2);
      assertNotSame(box1, box2);
      assertNotSame(box1, box0);
      assertNotSame(box2, box1);
      assertSame(box2, box0);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertTrue(box2.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box2.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box2.longestEdge(), 0.01F);
      assertNotNull(box2);
      
      Box box3 = Box.MAX_VALUE;
      assertFalse(box3.equals((Object)box0));
      assertFalse(box3.equals((Object)box2));
      assertFalse(box3.equals((Object)box1));
      assertNotSame(box3, box0);
      assertNotSame(box3, box2);
      assertNotSame(box3, box1);
      assertEquals(Float.POSITIVE_INFINITY, box3.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box3.longestEdge(), 0.01F);
      assertFalse(box3.isEmpty());
      assertNotNull(box3);
      
      boolean boolean0 = box2.intersectsX(ray3_0, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertTrue(box0.equals((Object)box1));
      assertFalse(box0.equals((Object)box3));
      assertFalse(box1.equals((Object)box3));
      assertTrue(box1.equals((Object)box2));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box2.equals((Object)box1));
      assertFalse(box2.equals((Object)box3));
      assertNotSame(box0, box1);
      assertNotSame(box0, box3);
      assertSame(box0, box2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertNotSame(box1, box3);
      assertNotSame(box1, box2);
      assertNotSame(box1, box0);
      assertNotSame(box2, box3);
      assertNotSame(box2, box1);
      assertSame(box2, box0);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertTrue(box2.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box2.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box2.longestEdge(), 0.01F);
      
      Box box4 = Box.UNIT;
      assertFalse(box4.equals((Object)box3));
      assertFalse(box4.equals((Object)box1));
      assertFalse(box4.equals((Object)box2));
      assertFalse(box4.equals((Object)box0));
      assertNotSame(box4, box3);
      assertNotSame(box4, box1);
      assertNotSame(box4, box2);
      assertNotSame(box4, box0);
      assertEquals(2.0F, box4.longestEdge(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(3.4641016F, box4.diagonalLength(), 0.01F);
      assertNotNull(box4);
      
      Vector3 vector3_2 = matrix4_0.transformPointLocal(vector3_1);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.z, 0.01F);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_0);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_2.z(), 0.01F);
      assertEquals(0.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.length(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertNotNull(vector3_2);
      
      Ray3 ray3_1 = new Ray3();
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertNotNull(ray3_1);
      
      Box box5 = new Box(ray3_0.direction, ray3_1.origin);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertFalse(box5.equals((Object)box4));
      assertFalse(box5.equals((Object)box2));
      assertFalse(box5.equals((Object)box0));
      assertFalse(box5.equals((Object)box1));
      assertFalse(box5.equals((Object)box3));
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, box5.longestEdge(), 0.01F);
      assertEquals(1.0F, box5.diagonalLength(), 0.01F);
      assertTrue(box5.isEmpty());
      assertNotNull(box5);
      
      boolean boolean1 = box5.intersection(ray3_0, ray3_0.direction);
      assertTrue(boolean1);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(ray3_1.equals((Object)ray3_0));
      assertFalse(box5.equals((Object)box4));
      assertFalse(box5.equals((Object)box2));
      assertFalse(box5.equals((Object)box0));
      assertFalse(box5.equals((Object)box1));
      assertFalse(box5.equals((Object)box3));
      assertFalse(boolean1 == boolean0);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_0);
      assertNotSame(ray3_0, ray3_1);
      assertNotSame(ray3_1, ray3_0);
      assertNotSame(box5, box4);
      assertNotSame(box5, box2);
      assertNotSame(box5, box0);
      assertNotSame(box5, box1);
      assertNotSame(box5, box3);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, box5.longestEdge(), 0.01F);
      assertEquals(1.0F, box5.diagonalLength(), 0.01F);
      assertTrue(box5.isEmpty());
      
      float float1 = box1.extentDistance(box4);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(box1.equals((Object)box3));
      assertFalse(box1.equals((Object)box5));
      assertFalse(box1.equals((Object)box4));
      assertTrue(box1.equals((Object)box2));
      assertTrue(box1.equals((Object)box0));
      assertFalse(box4.equals((Object)box3));
      assertFalse(box4.equals((Object)box5));
      assertFalse(box4.equals((Object)box1));
      assertFalse(box4.equals((Object)box2));
      assertFalse(box4.equals((Object)box0));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(box1, box3);
      assertNotSame(box1, box5);
      assertNotSame(box1, box4);
      assertNotSame(box1, box2);
      assertNotSame(box1, box0);
      assertNotSame(box4, box3);
      assertNotSame(box4, box5);
      assertNotSame(box4, box1);
      assertNotSame(box4, box2);
      assertNotSame(box4, box0);
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(2.0F, box4.longestEdge(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(3.4641016F, box4.diagonalLength(), 0.01F);
      
      Box box6 = box3.expand(1.0F, 0.0F, 6.77139F);
      assertFalse(box6.equals((Object)box2));
      assertTrue(box6.equals((Object)box3));
      assertFalse(box6.equals((Object)box1));
      assertFalse(box6.equals((Object)box0));
      assertFalse(box6.equals((Object)box5));
      assertFalse(box6.equals((Object)box4));
      assertFalse(box3.equals((Object)box0));
      assertFalse(box3.equals((Object)box2));
      assertFalse(box3.equals((Object)box1));
      assertFalse(box3.equals((Object)box4));
      assertFalse(box3.equals((Object)box5));
      assertNotSame(box6, box2);
      assertNotSame(box6, box1);
      assertNotSame(box6, box0);
      assertNotSame(box6, box5);
      assertNotSame(box6, box3);
      assertNotSame(box6, box4);
      assertNotSame(box3, box6);
      assertNotSame(box3, box0);
      assertNotSame(box3, box2);
      assertNotSame(box3, box1);
      assertNotSame(box3, box4);
      assertNotSame(box3, box5);
      assertFalse(box6.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box6.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box6.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box3.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box3.longestEdge(), 0.01F);
      assertFalse(box3.isEmpty());
      assertNotNull(box6);
      
      Vector3 vector3_3 = matrix4_0.transformPoint((IVector3) vector3_1, ray3_0.direction);
      assertEquals(1.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(ray3_0, ray3_1);
      assertEquals(1.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(1.0F, vector3_3.length(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertNotNull(vector3_3);
      
      Box box7 = box6.set((IVector3) vector3_3, (IVector3) ray3_0.origin);
      assertEquals(1.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertFalse(box6.equals((Object)box2));
      assertFalse(box6.equals((Object)box1));
      assertFalse(box6.equals((Object)box0));
      assertFalse(box6.equals((Object)box5));
      assertFalse(box6.equals((Object)box3));
      assertFalse(box6.equals((Object)box4));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertFalse(box7.equals((Object)box4));
      assertFalse(box7.equals((Object)box5));
      assertFalse(box7.equals((Object)box3));
      assertFalse(box7.equals((Object)box2));
      assertFalse(box7.equals((Object)box0));
      assertFalse(box7.equals((Object)box1));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(box3.equals((Object)box6));
      assertFalse(box3.equals((Object)box0));
      assertFalse(box3.equals((Object)box2));
      assertFalse(box3.equals((Object)box1));
      assertFalse(box3.equals((Object)box4));
      assertFalse(box3.equals((Object)box5));
      assertNotSame(box6, box2);
      assertNotSame(box6, box1);
      assertNotSame(box6, box0);
      assertNotSame(box6, box5);
      assertNotSame(box6, box3);
      assertNotSame(box6, box4);
      assertSame(box6, box7);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(box7, box4);
      assertNotSame(box7, box5);
      assertSame(box7, box6);
      assertNotSame(box7, box3);
      assertNotSame(box7, box2);
      assertNotSame(box7, box0);
      assertNotSame(box7, box1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(ray3_0, ray3_1);
      assertNotSame(box3, box7);
      assertNotSame(box3, box6);
      assertNotSame(box3, box0);
      assertNotSame(box3, box2);
      assertNotSame(box3, box1);
      assertNotSame(box3, box4);
      assertNotSame(box3, box5);
      assertFalse(box6.isEmpty());
      assertEquals(0.0F, box6.longestEdge(), 0.01F);
      assertEquals(0.0F, box6.diagonalLength(), 0.01F);
      assertEquals(1.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(1.0F, vector3_3.length(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, box7.diagonalLength(), 0.01F);
      assertEquals(0.0F, box7.longestEdge(), 0.01F);
      assertFalse(box7.isEmpty());
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box3.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box3.longestEdge(), 0.01F);
      assertFalse(box3.isEmpty());
      assertNotNull(box7);
      
      IVector3[] iVector3Array0 = new IVector3[9];
      iVector3Array0[0] = (IVector3) ray3_0.origin;
      iVector3Array0[1] = (IVector3) vector3_1;
      iVector3Array0[2] = (IVector3) vector3_2;
      Vector3 vector3_4 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028235E38F, vector3_4.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_4.z, 0.01F);
      assertEquals(3.4028235E38F, vector3_4.x, 0.01F);
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertEquals(3.4028235E38F, vector3_4.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_4.lengthSquared(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_4.length(), 0.01F);
      assertEquals(3.4028235E38F, vector3_4.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_4.x(), 0.01F);
      assertNotNull(vector3_4);
      
      iVector3Array0[3] = (IVector3) vector3_4;
      iVector3Array0[4] = (IVector3) ray3_1.direction;
      Vector3 vector3_5 = box7.center();
      assertEquals(1.0F, vector3_3.z, 0.01F);
      assertEquals(0.0F, vector3_3.x, 0.01F);
      assertEquals(0.0F, vector3_3.y, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_5.z, 0.01F);
      assertEquals(0.0F, vector3_5.x, 0.01F);
      assertEquals(0.0F, vector3_5.y, 0.01F);
      assertFalse(box6.equals((Object)box2));
      assertFalse(box6.equals((Object)box1));
      assertFalse(box6.equals((Object)box0));
      assertFalse(box6.equals((Object)box5));
      assertFalse(box6.equals((Object)box3));
      assertFalse(box6.equals((Object)box4));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertFalse(box7.equals((Object)box4));
      assertFalse(box7.equals((Object)box5));
      assertFalse(box7.equals((Object)box3));
      assertFalse(box7.equals((Object)box2));
      assertFalse(box7.equals((Object)box0));
      assertFalse(box7.equals((Object)box1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertFalse(box3.equals((Object)box7));
      assertFalse(box3.equals((Object)box6));
      assertFalse(box3.equals((Object)box0));
      assertFalse(box3.equals((Object)box2));
      assertFalse(box3.equals((Object)box1));
      assertFalse(box3.equals((Object)box4));
      assertFalse(box3.equals((Object)box5));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertTrue(vector3_5.equals((Object)vector3_2));
      assertTrue(vector3_5.equals((Object)vector3_1));
      assertTrue(vector3_5.equals((Object)vector3_0));
      assertTrue(vector3_5.equals((Object)vector3_3));
      assertNotSame(box6, box2);
      assertNotSame(box6, box1);
      assertNotSame(box6, box0);
      assertNotSame(box6, box5);
      assertNotSame(box6, box3);
      assertNotSame(box6, box4);
      assertSame(box6, box7);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(box7, box4);
      assertNotSame(box7, box5);
      assertSame(box7, box6);
      assertNotSame(box7, box3);
      assertNotSame(box7, box2);
      assertNotSame(box7, box0);
      assertNotSame(box7, box1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(ray3_0, ray3_1);
      assertNotSame(box3, box7);
      assertNotSame(box3, box6);
      assertNotSame(box3, box0);
      assertNotSame(box3, box2);
      assertNotSame(box3, box1);
      assertNotSame(box3, box4);
      assertNotSame(box3, box5);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_4);
      assertFalse(box6.isEmpty());
      assertEquals(0.0F, box6.longestEdge(), 0.01F);
      assertEquals(0.0F, box6.diagonalLength(), 0.01F);
      assertEquals(1.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, vector3_3.x(), 0.01F);
      assertEquals(0.0F, vector3_3.y(), 0.01F);
      assertEquals(1.0F, vector3_3.length(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, box7.diagonalLength(), 0.01F);
      assertEquals(0.0F, box7.longestEdge(), 0.01F);
      assertFalse(box7.isEmpty());
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box3.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box3.longestEdge(), 0.01F);
      assertFalse(box3.isEmpty());
      assertEquals(1.0F, vector3_5.length(), 0.01F);
      assertEquals(1.0F, vector3_5.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_5.x(), 0.01F);
      assertEquals(0.0F, vector3_5.y(), 0.01F);
      assertEquals(1.0F, vector3_5.z(), 0.01F);
      assertNotNull(vector3_5);
      
      iVector3Array0[5] = (IVector3) vector3_5;
      iVector3Array0[6] = (IVector3) vector3_2;
      iVector3Array0[7] = (IVector3) vector3_3;
      Vector3 vector3_6 = new Vector3(ray3_0.direction);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(1.0F, vector3_6.z, 0.01F);
      assertEquals(0.0F, vector3_6.y, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertFalse(ray3_0.equals((Object)ray3_1));
      assertTrue(vector3_6.equals((Object)vector3_5));
      assertTrue(vector3_6.equals((Object)vector3_3));
      assertTrue(vector3_6.equals((Object)vector3_2));
      assertTrue(vector3_6.equals((Object)vector3_1));
      assertTrue(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(1.0F, vector3_6.length(), 0.01F);
      assertEquals(1.0F, vector3_6.z(), 0.01F);
      assertEquals(0.0F, vector3_6.x(), 0.01F);
      assertEquals(0.0F, vector3_6.y(), 0.01F);
      assertEquals(1.0F, vector3_6.lengthSquared(), 0.01F);
      assertNotNull(vector3_6);
      
      iVector3Array0[8] = (IVector3) vector3_6;
      Box box8 = box4.fromPoints(iVector3Array0);
      assertEquals(9, iVector3Array0.length);
      assertFalse(box8.equals((Object)box0));
      assertFalse(box8.equals((Object)box1));
      assertFalse(box8.equals((Object)box5));
      assertFalse(box8.equals((Object)box2));
      assertFalse(box8.equals((Object)box7));
      assertFalse(box8.equals((Object)box6));
      assertFalse(box8.equals((Object)box3));
      assertFalse(box4.equals((Object)box7));
      assertFalse(box4.equals((Object)box3));
      assertFalse(box4.equals((Object)box6));
      assertFalse(box4.equals((Object)box5));
      assertFalse(box4.equals((Object)box1));
      assertFalse(box4.equals((Object)box2));
      assertFalse(box4.equals((Object)box0));
      assertNotSame(box8, box0);
      assertNotSame(box8, box1);
      assertNotSame(box8, box5);
      assertNotSame(box8, box2);
      assertNotSame(box8, box7);
      assertNotSame(box8, box6);
      assertSame(box8, box4);
      assertNotSame(box8, box3);
      assertNotSame(box4, box7);
      assertNotSame(box4, box3);
      assertNotSame(box4, box6);
      assertSame(box4, box8);
      assertNotSame(box4, box5);
      assertNotSame(box4, box1);
      assertNotSame(box4, box2);
      assertNotSame(box4, box0);
      assertFalse(box8.isEmpty());
      assertEquals(3.4028235E38F, box8.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box8.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box4.diagonalLength(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(3.4028235E38F, box4.longestEdge(), 0.01F);
      assertNotNull(box8);
      
      Box box9 = box4.add((IVector3) vector3_1);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertTrue(box9.equals((Object)box8));
      assertFalse(box9.equals((Object)box3));
      assertTrue(box9.equals((Object)box4));
      assertFalse(box9.equals((Object)box5));
      assertFalse(box9.equals((Object)box0));
      assertFalse(box9.equals((Object)box1));
      assertFalse(box9.equals((Object)box7));
      assertFalse(box9.equals((Object)box2));
      assertFalse(box9.equals((Object)box6));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertTrue(vector3_1.equals((Object)vector3_6));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertFalse(box4.equals((Object)box7));
      assertFalse(box4.equals((Object)box3));
      assertFalse(box4.equals((Object)box6));
      assertFalse(box4.equals((Object)box5));
      assertFalse(box4.equals((Object)box1));
      assertFalse(box4.equals((Object)box2));
      assertFalse(box4.equals((Object)box0));
      assertNotSame(box9, box3);
      assertNotSame(box9, box5);
      assertNotSame(box9, box0);
      assertNotSame(box9, box8);
      assertNotSame(box9, box4);
      assertNotSame(box9, box1);
      assertNotSame(box9, box7);
      assertNotSame(box9, box2);
      assertNotSame(box9, box6);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(box4, box7);
      assertNotSame(box4, box3);
      assertNotSame(box4, box6);
      assertNotSame(box4, box9);
      assertSame(box4, box8);
      assertNotSame(box4, box5);
      assertNotSame(box4, box1);
      assertNotSame(box4, box2);
      assertNotSame(box4, box0);
      assertEquals(3.4028235E38F, box9.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box9.diagonalLength(), 0.01F);
      assertFalse(box9.isEmpty());
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(0.0F, vector3_1.x(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box4.diagonalLength(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(3.4028235E38F, box4.longestEdge(), 0.01F);
      assertNotNull(box9);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = box0._maxExtent;
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertNotNull(ray3_0);
      
      Box box1 = box0.set((IVector3) ray3_0.direction, (IVector3) ray3_0.direction);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(1.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.z, 0.01F);
      assertSame(box0, box1);
      assertSame(box1, box0);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(1.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertNotNull(box1);
      
      Vector3 vector3_1 = box0.UNIT.center();
      assertEquals(1.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.y, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertSame(box0, box1);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.z(), 0.01F);
      assertEquals(1.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = new Box(box0);
      assertTrue(box1.equals((Object)box0));
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertNotNull(box1);
      
      Box box2 = box1.expand(2351.8674F, 2351.8674F, (-0.017453292F));
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertFalse(box2.equals((Object)box1));
      assertFalse(box2.equals((Object)box0));
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box1, box2);
      assertNotSame(box1, box0);
      assertNotSame(box2, box1);
      assertNotSame(box2, box0);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(6654.914F, box2.diagonalLength(), 0.01F);
      assertFalse(box2.isEmpty());
      assertEquals(4705.735F, box2.longestEdge(), 0.01F);
      assertNotNull(box2);
      
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertNotNull(matrix4_0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = matrix4_0.transformVector((IVector3) vector3_0);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = matrix4_0.projectPoint((IVector3) vector3_1);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals(1.0F, vector3_2.x, 0.01F);
      assertEquals(0.0F, vector3_2.y, 0.01F);
      assertEquals(0.0F, vector3_2.z, 0.01F);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals(1.0F, vector3_2.x(), 0.01F);
      assertEquals(0.0F, vector3_2.y(), 0.01F);
      assertEquals(0.0F, vector3_2.z(), 0.01F);
      assertEquals(1.0F, vector3_2.length(), 0.01F);
      assertEquals(1.0F, vector3_2.lengthSquared(), 0.01F);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = box1.vertex(11, vector3_2);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals((-1.0F), vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(1.0F, vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_3.z, 0.01F);
      assertEquals(1.0F, vector3_3.y, 0.01F);
      assertEquals((-1.0F), vector3_3.x, 0.01F);
      assertFalse(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box2));
      assertTrue(box1.equals((Object)box0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box1, box2);
      assertNotSame(box1, box0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(1.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals((-1.0F), vector3_2.x(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.z(), 0.01F);
      assertEquals(1.7320508F, vector3_2.length(), 0.01F);
      assertEquals(3.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_3.x(), 0.01F);
      assertEquals(1.0F, vector3_3.y(), 0.01F);
      assertEquals(3.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_3.length(), 0.01F);
      assertEquals(1.0F, vector3_3.z(), 0.01F);
      assertNotNull(vector3_3);
      
      Box box3 = box1.addLocal((IBox) box0);
      assertFalse(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box2));
      assertTrue(box1.equals((Object)box0));
      assertFalse(box3.equals((Object)box2));
      assertTrue(box3.equals((Object)box0));
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box1, box2);
      assertSame(box1, box3);
      assertNotSame(box1, box0);
      assertNotSame(box3, box2);
      assertSame(box3, box1);
      assertNotSame(box3, box0);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box3.diagonalLength(), 0.01F);
      assertEquals(2.0F, box3.longestEdge(), 0.01F);
      assertFalse(box3.isEmpty());
      assertNotNull(box3);
      
      Box box4 = box1.projectLocal(matrix4_0);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertFalse(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box2));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box4.equals((Object)box0));
      assertFalse(box4.equals((Object)box2));
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box0, box4);
      assertNotSame(box1, box2);
      assertSame(box1, box3);
      assertNotSame(box1, box0);
      assertSame(box1, box4);
      assertSame(box4, box1);
      assertNotSame(box4, box0);
      assertSame(box4, box3);
      assertNotSame(box4, box2);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(2.0F, box4.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box4.diagonalLength(), 0.01F);
      assertNotNull(box4);
      
      Plane plane0 = Plane.XZ_PLANE;
      assertEquals(0.0F, plane0.constant, 0.01F);
      assertEquals(0.0F, plane0.constant(), 0.01F);
      assertNotNull(plane0);
      
      Vector3 vector3_4 = plane0._v1;
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.length(), 0.01F);
      assertEquals(0.0F, vector3_4.lengthSquared(), 0.01F);
      assertNotNull(vector3_4);
      
      Vector3 vector3_5 = vector3_4.subtract((IVector3) vector3_3, vector3_0);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals((-1.0F), vector3_0.z, 0.01F);
      assertEquals((-1.0F), vector3_0.y, 0.01F);
      assertEquals(1.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(1.0F, vector3_1.x, 0.01F);
      assertEquals((-1.0F), vector3_2.x, 0.01F);
      assertEquals(1.0F, vector3_2.y, 0.01F);
      assertEquals(1.0F, vector3_2.z, 0.01F);
      assertEquals(1.0F, vector3_3.z, 0.01F);
      assertEquals(1.0F, vector3_3.y, 0.01F);
      assertEquals((-1.0F), vector3_3.x, 0.01F);
      assertEquals(0.0F, plane0.constant, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals((-1.0F), vector3_5.z, 0.01F);
      assertEquals((-1.0F), vector3_5.y, 0.01F);
      assertEquals(1.0F, vector3_5.x, 0.01F);
      assertTrue(box0.equals((Object)box4));
      assertFalse(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box2));
      assertTrue(box1.equals((Object)box0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box0, box4);
      assertNotSame(box1, box2);
      assertSame(box1, box3);
      assertNotSame(box1, box0);
      assertSame(box1, box4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_2);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertEquals((-1.0F), vector3_0.z(), 0.01F);
      assertEquals(3.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_0.y(), 0.01F);
      assertEquals(1.7320508F, vector3_0.length(), 0.01F);
      assertEquals(1.0F, vector3_0.x(), 0.01F);
      assertEquals(1.0F, vector3_1.length(), 0.01F);
      assertEquals(1.0F, vector3_1.lengthSquared(), 0.01F);
      assertEquals(1.0F, vector3_1.x(), 0.01F);
      assertEquals(0.0F, vector3_1.z(), 0.01F);
      assertEquals(0.0F, vector3_1.y(), 0.01F);
      assertEquals((-1.0F), vector3_2.x(), 0.01F);
      assertEquals(1.0F, vector3_2.y(), 0.01F);
      assertEquals(1.0F, vector3_2.z(), 0.01F);
      assertEquals(1.7320508F, vector3_2.length(), 0.01F);
      assertEquals(3.0F, vector3_2.lengthSquared(), 0.01F);
      assertEquals((-1.0F), vector3_3.x(), 0.01F);
      assertEquals(1.0F, vector3_3.y(), 0.01F);
      assertEquals(3.0F, vector3_3.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_3.length(), 0.01F);
      assertEquals(1.0F, vector3_3.z(), 0.01F);
      assertEquals(0.0F, plane0.constant(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.length(), 0.01F);
      assertEquals(0.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(1.7320508F, vector3_5.length(), 0.01F);
      assertEquals((-1.0F), vector3_5.y(), 0.01F);
      assertEquals(1.0F, vector3_5.x(), 0.01F);
      assertEquals((-1.0F), vector3_5.z(), 0.01F);
      assertEquals(3.0F, vector3_5.lengthSquared(), 0.01F);
      assertNotNull(vector3_5);
      
      Vector3 vector3_6 = box4.center(vector3_4);
      assertEquals(0.0F, matrix4_0.m03, 0.01F);
      assertEquals(0.0F, matrix4_0.m10, 0.01F);
      assertEquals(0.0F, matrix4_0.m21, 0.01F);
      assertEquals(0.0F, matrix4_0.m32, 0.01F);
      assertEquals(0.0F, matrix4_0.m02, 0.01F);
      assertEquals(0.0F, matrix4_0.m13, 0.01F);
      assertEquals(0.0F, matrix4_0.m01, 0.01F);
      assertEquals(0.0F, matrix4_0.m12, 0.01F);
      assertEquals(0.0F, matrix4_0.m23, 0.01F);
      assertEquals(0.0F, matrix4_0.m20, 0.01F);
      assertEquals(0.0F, matrix4_0.m31, 0.01F);
      assertEquals(0.0F, matrix4_0.m30, 0.01F);
      assertEquals(1.0F, matrix4_0.m00, 0.01F);
      assertEquals(1.0F, matrix4_0.m11, 0.01F);
      assertEquals(1.0F, matrix4_0.m22, 0.01F);
      assertEquals(1.0F, matrix4_0.m33, 0.01F);
      assertEquals(0.0F, plane0.constant, 0.01F);
      assertEquals(0.0F, vector3_4.y, 0.01F);
      assertEquals(0.0F, vector3_4.z, 0.01F);
      assertEquals(0.0F, vector3_4.x, 0.01F);
      assertEquals(0.0F, vector3_6.y, 0.01F);
      assertEquals(0.0F, vector3_6.x, 0.01F);
      assertEquals(0.0F, vector3_6.z, 0.01F);
      assertTrue(box0.equals((Object)box4));
      assertFalse(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box2));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box4.equals((Object)box0));
      assertFalse(box4.equals((Object)box2));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box0, box4);
      assertNotSame(box1, box2);
      assertSame(box1, box3);
      assertNotSame(box1, box0);
      assertSame(box1, box4);
      assertSame(box4, box1);
      assertNotSame(box4, box0);
      assertSame(box4, box3);
      assertNotSame(box4, box2);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_0);
      assertSame(vector3_6, vector3_4);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertFalse(matrix4_0.isMirrored());
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0F, matrix4_0.m33(), 0.01F);
      assertEquals(1.0F, matrix4_0.m00(), 0.01F);
      assertEquals(1.0F, matrix4_0.m22(), 0.01F);
      assertEquals(1.0F, matrix4_0.m11(), 0.01F);
      assertEquals(0.0F, matrix4_0.m21(), 0.01F);
      assertEquals(0.0F, matrix4_0.m32(), 0.01F);
      assertEquals(0.0F, matrix4_0.m10(), 0.01F);
      assertEquals(0.0F, matrix4_0.m13(), 0.01F);
      assertEquals(0.0F, matrix4_0.m02(), 0.01F);
      assertEquals(1.0F, matrix4_0.approximateUniformScale(), 0.01F);
      assertEquals(0.0F, matrix4_0.m30(), 0.01F);
      assertEquals(0.0F, matrix4_0.m23(), 0.01F);
      assertEquals(0.0F, matrix4_0.m01(), 0.01F);
      assertEquals(0.0F, matrix4_0.m12(), 0.01F);
      assertEquals(0.0F, matrix4_0.m20(), 0.01F);
      assertEquals(0.0F, matrix4_0.m31(), 0.01F);
      assertEquals(0.0F, matrix4_0.m03(), 0.01F);
      assertFalse(box4.isEmpty());
      assertEquals(2.0F, box4.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box4.diagonalLength(), 0.01F);
      assertEquals(0.0F, plane0.constant(), 0.01F);
      assertEquals(0.0F, vector3_4.y(), 0.01F);
      assertEquals(0.0F, vector3_4.z(), 0.01F);
      assertEquals(0.0F, vector3_4.x(), 0.01F);
      assertEquals(0.0F, vector3_4.length(), 0.01F);
      assertEquals(0.0F, vector3_4.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_6.y(), 0.01F);
      assertEquals(0.0F, vector3_6.x(), 0.01F);
      assertEquals(0.0F, vector3_6.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_6.z(), 0.01F);
      assertEquals(0.0F, vector3_6.length(), 0.01F);
      assertNotNull(vector3_6);
      
      boolean boolean0 = box3.contains((float) 11, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertTrue(box0.equals((Object)box4));
      assertFalse(box0.equals((Object)box2));
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box2));
      assertTrue(box1.equals((Object)box0));
      assertFalse(box3.equals((Object)box2));
      assertTrue(box3.equals((Object)box0));
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box0, box4);
      assertNotSame(box1, box2);
      assertSame(box1, box3);
      assertNotSame(box1, box0);
      assertSame(box1, box4);
      assertNotSame(box3, box2);
      assertSame(box3, box4);
      assertSame(box3, box1);
      assertNotSame(box3, box0);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box3.diagonalLength(), 0.01F);
      assertEquals(2.0F, box3.longestEdge(), 0.01F);
      assertFalse(box3.isEmpty());
      
      Box box5 = Box.MAX_VALUE;
      assertFalse(box5.equals((Object)box1));
      assertFalse(box5.equals((Object)box2));
      assertFalse(box5.equals((Object)box3));
      assertFalse(box5.equals((Object)box0));
      assertFalse(box5.equals((Object)box4));
      assertNotSame(box5, box1);
      assertNotSame(box5, box2);
      assertNotSame(box5, box3);
      assertNotSame(box5, box0);
      assertNotSame(box5, box4);
      assertFalse(box5.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box5.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box5.diagonalLength(), 0.01F);
      assertNotNull(box5);
      
      Box box6 = box5.intersect((IBox) box3, box3);
      assertFalse(box6.equals((Object)box5));
      assertFalse(box6.equals((Object)box2));
      assertTrue(box6.equals((Object)box0));
      assertTrue(box0.equals((Object)box4));
      assertFalse(box0.equals((Object)box2));
      assertFalse(box0.equals((Object)box5));
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box2));
      assertFalse(box1.equals((Object)box5));
      assertTrue(box1.equals((Object)box0));
      assertFalse(box3.equals((Object)box2));
      assertTrue(box3.equals((Object)box0));
      assertFalse(box3.equals((Object)box5));
      assertFalse(box5.equals((Object)box1));
      assertFalse(box5.equals((Object)box2));
      assertFalse(box5.equals((Object)box3));
      assertFalse(box5.equals((Object)box0));
      assertFalse(box5.equals((Object)box4));
      assertNotSame(box6, box5);
      assertSame(box6, box4);
      assertNotSame(box6, box2);
      assertNotSame(box6, box0);
      assertSame(box6, box1);
      assertSame(box6, box3);
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box0, box5);
      assertNotSame(box0, box4);
      assertNotSame(box0, box6);
      assertNotSame(box1, box2);
      assertSame(box1, box3);
      assertNotSame(box1, box0);
      assertNotSame(box1, box5);
      assertSame(box1, box4);
      assertSame(box1, box6);
      assertNotSame(box3, box2);
      assertSame(box3, box6);
      assertSame(box3, box4);
      assertNotSame(box3, box5);
      assertSame(box3, box1);
      assertNotSame(box3, box0);
      assertNotSame(box5, box1);
      assertNotSame(box5, box2);
      assertNotSame(box5, box3);
      assertNotSame(box5, box6);
      assertNotSame(box5, box0);
      assertNotSame(box5, box4);
      assertFalse(box6.isEmpty());
      assertEquals(3.4641016F, box6.diagonalLength(), 0.01F);
      assertEquals(2.0F, box6.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box3.diagonalLength(), 0.01F);
      assertEquals(2.0F, box3.longestEdge(), 0.01F);
      assertFalse(box3.isEmpty());
      assertFalse(box5.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box5.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box5.diagonalLength(), 0.01F);
      assertNotNull(box6);
      
      boolean boolean1 = box3.intersects((IBox) box0);
      assertTrue(boolean1);
      assertTrue(box0.equals((Object)box4));
      assertTrue(box0.equals((Object)box6));
      assertFalse(box0.equals((Object)box2));
      assertFalse(box0.equals((Object)box5));
      assertTrue(box0.equals((Object)box3));
      assertTrue(box0.equals((Object)box1));
      assertFalse(boolean1 == boolean0);
      assertFalse(box1.equals((Object)box2));
      assertFalse(box1.equals((Object)box5));
      assertTrue(box1.equals((Object)box0));
      assertFalse(box3.equals((Object)box2));
      assertTrue(box3.equals((Object)box0));
      assertFalse(box3.equals((Object)box5));
      assertNotSame(box0, box3);
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box0, box5);
      assertNotSame(box0, box4);
      assertNotSame(box0, box6);
      assertNotSame(box1, box2);
      assertSame(box1, box3);
      assertNotSame(box1, box0);
      assertNotSame(box1, box5);
      assertSame(box1, box4);
      assertSame(box1, box6);
      assertNotSame(box3, box2);
      assertSame(box3, box6);
      assertSame(box3, box4);
      assertNotSame(box3, box5);
      assertSame(box3, box1);
      assertNotSame(box3, box0);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box1.diagonalLength(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(2.0F, box1.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box3.diagonalLength(), 0.01F);
      assertEquals(2.0F, box3.longestEdge(), 0.01F);
      assertFalse(box3.isEmpty());
      
      // Undeclared exception!
      try { 
        box4.intersects((IRay3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      Vector3 vector3_0 = (Vector3)box0.maximumExtent();
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertNotNull(vector3_0);
      
      Box box1 = box0.add((IVector3) vector3_0);
      assertEquals((-3.4028235E38F), vector3_0.z, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y, 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x, 0.01F);
      assertFalse(box1.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.z(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.x(), 0.01F);
      assertEquals((-3.4028235E38F), vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = box0._minExtent;
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(vector3_0);
      
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertNotNull(ray3_0);
      
      Box box1 = new Box();
      assertFalse(box1.equals((Object)box0));
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertNotNull(box1);
      
      Box box2 = box0.add((IBox) box0, box1);
      assertTrue(box0.equals((Object)box1));
      assertTrue(box1.equals((Object)box0));
      assertTrue(box2.equals((Object)box0));
      assertNotSame(box0, box2);
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertSame(box1, box2);
      assertSame(box2, box1);
      assertNotSame(box2, box0);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(0.0F, box2.longestEdge(), 0.01F);
      assertFalse(box2.isEmpty());
      assertEquals(0.0F, box2.diagonalLength(), 0.01F);
      assertNotNull(box2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Box box0 = Box.EMPTY;
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = Box.MAX_VALUE;
      assertFalse(box1.equals((Object)box0));
      assertNotSame(box1, box0);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertNotNull(box1);
      
      Box box2 = box0.UNIT.add((IBox) box1);
      assertFalse(box0.equals((Object)box1));
      assertFalse(box1.equals((Object)box0));
      assertTrue(box2.equals((Object)box1));
      assertFalse(box2.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box0, box2);
      assertNotSame(box1, box2);
      assertNotSame(box1, box0);
      assertNotSame(box2, box1);
      assertNotSame(box2, box0);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertFalse(box1.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box2.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box2.longestEdge(), 0.01F);
      assertFalse(box2.isEmpty());
      assertNotNull(box2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Box box0 = Box.EMPTY;
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Box box1 = box0.add((IBox) box0);
      assertTrue(box1.equals((Object)box0));
      assertNotSame(box0, box1);
      assertNotSame(box1, box0);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      assertTrue(box1.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box1.longestEdge(), 0.01F);
      assertNotNull(box1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.vertex(5117, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.set((IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Box box0 = Box.EMPTY;
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.set((IBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Box box0 = new Box();
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.projectLocal((IMatrix4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.project((IMatrix4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersectsZ((IRay3) null, 0.99999F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersectsY((IRay3) null, 8980.289F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersectsX((IRay3) null, 2644.264F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Box box0 = new Box();
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersects((IBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersectionZ((IRay3) null, 20345.832F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersectionY((IRay3) null, (-1092.9F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertFalse(box0.isEmpty());
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersectionX((IRay3) null, 791.1F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      assertEquals(Float.POSITIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      Vector3 vector3_0 = box0._maxExtent;
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x, 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.z(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.x(), 0.01F);
      assertEquals(3.4028235E38F, vector3_0.y(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.lengthSquared(), 0.01F);
      assertNotNull(vector3_0);
      
      // Undeclared exception!
      try { 
        box0.intersection((IRay3) null, vector3_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersectLocal((IBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersect((IBox) null, box0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.intersect((IBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.contains((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Box box0 = new Box();
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.contains((IBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Box box0 = new Box();
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.center((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Box box0 = Box.EMPTY;
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.addLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Box box0 = Box.ZERO;
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertEquals(0.0F, box0.longestEdge(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0F, vector3_0.z, 0.01F);
      assertEquals(0.0F, vector3_0.x, 0.01F);
      assertEquals(0.0F, vector3_0.y, 0.01F);
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
      assertEquals(0.0F, vector3_0.length(), 0.01F);
      assertEquals(0.0F, vector3_0.z(), 0.01F);
      assertEquals(0.0F, vector3_0.y(), 0.01F);
      assertEquals(0.0F, vector3_0.x(), 0.01F);
      assertNotNull(vector3_0);
      
      // Undeclared exception!
      try { 
        box0.add((IVector3) vector3_0, (Box) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Box box0 = Box.UNIT;
      assertEquals(2.0F, box0.longestEdge(), 0.01F);
      assertEquals(3.4641016F, box0.diagonalLength(), 0.01F);
      assertFalse(box0.isEmpty());
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.add((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.add((IBox) null, box0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Box box0 = new Box();
      assertTrue(box0.isEmpty());
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        box0.add((IBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Box box0 = null;
      try {
        box0 = new Box((IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Box box0 = null;
      try {
        box0 = new Box((IBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Box box0 = new Box();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
      assertNotNull(box0);
      
      Ray3 ray3_0 = new Ray3();
      assertNotNull(ray3_0);
      
      float float0 = box0.intersectionY(ray3_0, 0.0F);
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
      assertTrue(box0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Box box0 = new Box();
      Matrix4 matrix4_0 = new Matrix4();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Box box1 = new Box(box0);
      Box box2 = box0.MAX_VALUE.add((IBox) box1, box1);
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      Vector3 vector3_2 = new Vector3(vector3_1);
      Vector3 vector3_3 = matrix4_0.transformPoint((IVector3) vector3_0, vector3_2);
      Ray3 ray3_0 = new Ray3(vector3_2, vector3_2);
      box2.intersectionZ(ray3_0, 0.0F);
      Box box3 = Box.EMPTY;
      Box box4 = box0.intersectLocal(box1);
      Box box5 = Box.MAX_VALUE;
      box5.intersectsX(ray3_0, 2586.7446F);
      box5.EMPTY.add((IVector3) vector3_3, box0);
      box4.UNIT.hashCode();
      box5.vertex((-723), ray3_0.origin);
      box0.intersection(ray3_0, ray3_0.origin);
      box3.extentDistance(box4);
      box2.expand(3.4028235E38F, 1.0F, 0.0F);
      Matrix4 matrix4_1 = new Matrix4();
      matrix4_0.extractScale();
      box1.set((IVector3) vector3_0, (IVector3) vector3_2);
      box0.intersectLocal(box3);
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Box box0 = Box.EMPTY;
      Matrix4 matrix4_0 = new Matrix4((-336.6898F), (-336.6898F), (-336.6898F), 972.4F, 1628.7013F, 1628.7013F, 1628.7013F, (-336.6898F), (-1465.4F), (-1465.4F), (-336.6898F), (-1190.0F), (-2.9865998E38F), 0.34586772F, 0.34586772F, 48.2F);
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = matrix4_0.transformPoint((IVector3) vector3_0);
      Vector3 vector3_2 = matrix4_0.projectPoint((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_2.mult((IVector3) vector3_1, vector3_1);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_3);
      box0.set((IVector3) vector3_0, (IVector3) ray3_0.direction);
      boolean boolean0 = box0.intersectsY(ray3_0, 1628.7013F);
      assertFalse(box0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4((-336.6898F), (-336.6898F), (-336.6898F), (-336.6898F), 1628.7013F, 1628.7013F, 1628.7013F, (-336.6898F), (-1465.4F), (-1465.4F), (-336.6898F), (-1190.0F), (-2.9865998E38F), 0.34586772F, 0.34586772F, 48.2F);
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = matrix4_0.transformPoint((IVector3) vector3_0);
      Vector3 vector3_2 = vector3_1.mult((IVector3) vector3_1, vector3_1);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_2);
      Box box0 = Box.MAX_VALUE;
      boolean boolean0 = box0.intersects((IRay3) ray3_0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      Vector3 vector3_0 = box0._minExtent;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      boolean boolean0 = box0.intersects((IRay3) ray3_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Box box0 = new Box(vector3_0, vector3_0);
      boolean boolean0 = box0.contains((IBox) box0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Box box0 = Box.ZERO;
      boolean boolean0 = box0.contains(0.0F, 0.0F, 3.4028235E38F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Box box0 = Box.ZERO;
      boolean boolean0 = box0.contains(0.0F, 1191.333F, (-3.4028235E38F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Box box0 = Box.ZERO;
      boolean boolean0 = box0.contains(0.0F, 0.0F, (-2931.46F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      Box box1 = Box.EMPTY;
      assertEquals(Float.POSITIVE_INFINITY, box1.diagonalLength(), 0.01F);
      
      Box box2 = box0.ZERO.add((IBox) box1, box1);
      boolean boolean0 = box2.contains(0.0F, (-1766.3329F), 3179.48F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Box box0 = Box.UNIT;
      // Undeclared exception!
      try { 
        box0.project((IMatrix4) null, box0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(0.0F, 0.0F, 0.0F);
      box0.vertex(891, vector3_0);
      Box box1 = new Box(vector3_0, vector3_1);
      boolean boolean0 = box1.isEmpty();
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Box box0 = Box.ZERO;
      Box box1 = box0.intersect((IBox) box0, box0);
      assertEquals((-3.4028235E38F), box1.longestEdge(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Box box0 = new Box();
      // Undeclared exception!
      try { 
        box0.expand((-3724.73F), (-3724.73F), (-3724.73F), (Box) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Box box0 = new Box();
      Vector3 vector3_0 = box0._minExtent;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      boolean boolean0 = box0.intersection(ray3_0, vector3_0);
      assertFalse(boolean0);
      assertEquals(Float.POSITIVE_INFINITY, vector3_0.length(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Box box0 = Box.UNIT;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      float float0 = box0.intersectionY(ray3_0, 1.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Box box0 = Box.EMPTY;
      Box box1 = Box.MAX_VALUE;
      Vector3 vector3_1 = matrix4_0.transformPointLocal(vector3_0);
      Ray3 ray3_1 = new Ray3();
      Box box2 = new Box(ray3_0.direction, ray3_1.origin);
      Box box3 = box2.EMPTY.setToEmpty();
      box2.ZERO.expand(6.2831855F, 0.28194976F, 1.0F);
      assertEquals(1.0F, box2.diagonalLength(), 0.01F);
      
      box1.intersects((IRay3) ray3_0);
      box3.add((IVector3) vector3_1, box2);
      assertEquals(0.0F, box2.diagonalLength(), 0.01F);
      
      float float0 = box1.intersectionY(ray3_0, (-309.2F));
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      Vector3 vector3_0 = box0._maxExtent;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      float float0 = box0.intersectionX(ray3_0, 3.4028235E38F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[27];
      floatArray0[1] = 2.7182817F;
      floatArray0[2] = 813.7F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      Box box0 = new Box(vector3_0, vector3_0);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      boolean boolean0 = box0.intersectsZ(ray3_0, 1400.2688F);
      assertFalse(boolean0);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      Vector3 vector3_0 = box0._maxExtent;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[2] = 3.4028235E38F;
      Vector3 vector3_1 = new Vector3(floatArray0);
      Box box1 = new Box(ray3_0.direction, ray3_0.origin);
      Ray3 ray3_1 = new Ray3(vector3_1, ray3_0.origin);
      boolean boolean0 = box1.intersects((IRay3) ray3_1);
      assertFalse(boolean0);
      assertFalse(box1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Box box0 = Box.EMPTY;
      Vector3 vector3_0 = new Vector3(1.0E-5F, 3.4028235E38F, 1.0E-5F);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      boolean boolean0 = box0.intersects((IRay3) ray3_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      Matrix4 matrix4_0 = new Matrix4(0.0F, 0.0F, 1409.985F, 1.0F, 0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 382.157F, (-3.4028235E38F), 0.0F, (-1619.0F), 0.0F, 0.0F, (-0.99999F));
      Vector3 vector3_0 = matrix4_0.extractScale();
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      boolean boolean0 = box0.intersects((IRay3) ray3_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Box box0 = Box.EMPTY;
      boolean boolean0 = box0.equals(box0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Box box0 = Box.EMPTY;
      Box box1 = new Box(ray3_0.direction, ray3_0.origin);
      boolean boolean0 = box0.equals(box1);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Box box0 = Box.ZERO;
      Object object0 = new Object();
      boolean boolean0 = box0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Box box0 = Box.UNIT;
      Vector3 vector3_0 = box0._maxExtent;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      boolean boolean0 = box0.intersects((IRay3) ray3_0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Box box0 = Box.EMPTY;
      boolean boolean0 = box0.intersects((IRay3) ray3_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Box box0 = Box.EMPTY;
      float[] floatArray0 = new float[4];
      Vector3 vector3_0 = new Vector3(floatArray0);
      Box box1 = box0.addLocal((IVector3) vector3_0);
      Box box2 = box1.expand(4688.4077F, 1.0E-5F, (-205.617F));
      boolean boolean0 = box0.intersects((IBox) box2);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Box box0 = Box.EMPTY;
      boolean boolean0 = box0.intersects((IBox) box0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(0.0F, 0.0F, (-1339.3F));
      Box box0 = new Box(vector3_0, vector3_0);
      Box box1 = Box.UNIT;
      boolean boolean0 = box0.contains((IBox) box1);
      assertFalse(boolean0);
      assertEquals(0.0F, box0.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Box box0 = Box.EMPTY;
      Vector3 vector3_0 = box0._maxExtent;
      Vector3 vector3_1 = box0.vertex((-2147483647), vector3_0);
      Ray3 ray3_0 = new Ray3(vector3_1, vector3_0);
      boolean boolean0 = box0.intersection(ray3_0, ray3_0.direction);
      assertEquals(3.4028235E38F, vector3_0.y, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Box box0 = Box.ZERO;
      Vector3 vector3_0 = (Vector3)box0.maximumExtent();
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Vector3 vector3_1 = box0.vertex((-723), ray3_0.origin);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0F, vector3_1.x, 0.01F);
      assertEquals(0.0F, vector3_1.z, 0.01F);
      assertEquals(0.0F, vector3_1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Box box0 = Box.ZERO;
      Vector3 vector3_0 = box0._minExtent;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Matrix4 matrix4_0 = new Matrix4();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_2 = matrix4_0.transformVector((IVector3) ray3_0.direction);
      Vector3 vector3_3 = matrix4_0.projectPoint((IVector3) ray3_0.direction);
      box0.intersectionX(ray3_0, 0.0F);
      vector3_0.mult((IVector3) vector3_3, ray3_0.direction);
      box0.isEmpty();
      box0.contains((IVector3) vector3_2);
      Matrix3 matrix3_0 = new Matrix3();
      Vector3 vector3_4 = matrix3_0.transformLocal(ray3_0.origin);
      Box box1 = box0.set((IVector3) vector3_4, (IVector3) vector3_1);
      box0.isEmpty();
      Box box2 = new Box(box0);
      box2.EMPTY.set((IBox) box1);
      box2.maximumExtent();
      Box box3 = Box.UNIT;
      box3.contains((-98.531F), 0.0F, 0.0F);
      box0.intersectsX(ray3_0, 0.0F);
      box0.vertex(8, vector3_4);
      box0.intersection(ray3_0, vector3_2);
      boolean boolean0 = box3.contains((IBox) box0);
      assertEquals(1.0F, box0.diagonalLength(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Box box0 = Box.UNIT;
      IVector3[] iVector3Array0 = new IVector3[0];
      box0.fromPoints(iVector3Array0);
      assertEquals(Float.POSITIVE_INFINITY, box0.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Box box0 = Box.ZERO;
      Box box1 = box0.add((IBox) box0);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
      assertNotSame(box1, box0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Box box0 = new Box();
      float float0 = box0.diagonalLength();
      assertEquals(Float.NEGATIVE_INFINITY, box0.longestEdge(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Box box0 = Box.ZERO;
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Box box1 = box0.addLocal((IVector3) vector3_0);
      assertEquals(1339.3F, box1.longestEdge(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(0.0F, 0.0F, (-1339.3F));
      Box box0 = new Box(vector3_0, vector3_0);
      Box box1 = box0.intersect((IBox) box0);
      assertNotSame(box1, box0);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Box box0 = Box.ZERO;
      Box box1 = box0.intersectLocal(box0);
      assertEquals(0.0F, box1.diagonalLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Box box0 = Box.ZERO;
      Box box1 = box0.set((IBox) box0);
      assertEquals(0.0F, box1.longestEdge(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Box box0 = Box.MAX_VALUE;
      Matrix4 matrix4_0 = (Matrix4)Matrix4.IDENTITY;
      Box box1 = box0.project((IMatrix4) matrix4_0);
      assertTrue(box1.equals((Object)box0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Box box0 = new Box();
      // Undeclared exception!
      try { 
        box0.addLocal((IBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Box box0 = new Box();
      String string0 = box0.toString();
      assertEquals("[min=[3.4028235E38, 3.4028235E38, 3.4028235E38], max=[-3.4028235E38, -3.4028235E38, -3.4028235E38]]", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Box box0 = Box.UNIT;
      // Undeclared exception!
      try { 
        box0.extentDistance((IBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Box", e);
      }
  }
}
