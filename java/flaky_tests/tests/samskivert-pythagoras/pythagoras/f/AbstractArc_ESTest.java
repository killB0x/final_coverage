/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:52:10 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AbstractArc;
import pythagoras.f.AffineTransform;
import pythagoras.f.Arc;
import pythagoras.f.Dimension;
import pythagoras.f.IDimension;
import pythagoras.f.IRectangle;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Line;
import pythagoras.f.PathIterator;
import pythagoras.f.Point;
import pythagoras.f.Rectangle;
import pythagoras.f.Transform;
import pythagoras.f.Vector;
import pythagoras.f.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractArc_ESTest extends AbstractArc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1, 180.0F, 180.0F, 180.0F);
      Arc arc0 = new Arc(rectangle0, 180.0F, (-2185.423F), 1);
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point();
      arc0.setAngles((XY) point0, (XY) point0);
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      float[] floatArray0 = new float[9];
      abstractArc_Iterator0.currentSegment(floatArray0);
      assertEquals(108.62572F, arc0.start, 0.01F);
      assertArrayEquals(new float[] {62.25538F, 184.71375F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1, 180.0F, 180.0F, 180.0F);
      Arc arc0 = new Arc(rectangle0, 180.0F, (-2185.423F), 1);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      assertFalse(abstractArc_Iterator0.isDone());
      
      float[] floatArray0 = new float[9];
      int int0 = abstractArc_Iterator0.currentSegment(floatArray0);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {1.0F, 270.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Arc arc0 = new Arc(0.0F, 2, 2, 2, 2, 2, 2);
      boolean boolean0 = arc0.intersects((float) 2, (float) 2, (float) 2, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1, 180.0F, 180.0F, 180.0F);
      Arc arc0 = new Arc(rectangle0, 180.0F, (-2185.423F), 1);
      boolean boolean0 = arc0.intersects(180.0F, (-2268.186F), (-360.0F), 276.9067F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Arc arc0 = new Arc(2);
      arc0.extent = 1543.9491F;
      boolean boolean0 = arc0.contains((float) 2, 0.0F, 0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Arc arc0 = new Arc(10.0F, 207.0359F, 325.0F, 235.48933F, 0.017453292F, 117.74467F, 2);
      Rectangle rectangle0 = new Rectangle(180.0F, 235.48933F, 2, 2);
      boolean boolean0 = arc0.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.containsAngle(0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Vector vector0 = new Vector();
      arc0.setArcByTangent(vector0, vector0, vector0, 270.0F);
      arc0.frame();
      assertEquals(90.0F, arc0.start, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(320.5901F, 2, (-360.0F), 320.5901F);
      Arc arc0 = new Arc(rectangle0, 320.5901F, (-360.0F), 2);
      boolean boolean0 = arc0.containsAngle((-4260.469F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Arc arc0 = new Arc(0.0F, 0, 0, 0.0F, 0.0F, (-46.787384F), 0);
      boolean boolean0 = arc0.containsAngle((-46.787384F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = new Point();
      AffineTransform affineTransform0 = new AffineTransform(360.0F, 40.520264F, 0.0F, 40.520264F);
      Vector vector0 = affineTransform0.scale();
      arc0.setArcByTangent(vector0, point0, point0, 1211.39F);
      // Undeclared exception!
      try { 
        arc0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Arc arc0 = new Arc(342.5F, 342.5F, 342.5F, 342.5F, 342.5F, 342.5F, 2);
      boolean boolean0 = arc0.containsAngle(342.5F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Point point0 = rectangle0.center();
      Point point1 = new Point((-2104.05F), 3.1415927F);
      arc0.setAngles((XY) point1, (XY) point0);
      boolean boolean0 = arc0.containsAngle(1);
      assertEquals(179.91444F, arc0.extent, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(0.0F, 0.0F, 103.9491F, 0.0F);
      boolean boolean0 = arc0.containsAngle(103.9491F);
      assertEquals(360.0F, arc0.extent, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Arc arc0 = new Arc(1);
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, (Transform) null);
      boolean boolean0 = abstractArc_Iterator0.isDone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Arc arc0 = new Arc(1);
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point();
      arc0.setAngles((XY) point0, (XY) point0);
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      abstractArc_Iterator0.next();
      float[] floatArray0 = new float[9];
      int int0 = abstractArc_Iterator0.currentSegment(floatArray0);
      assertEquals(360.0F, arc0.extent, 0.01F);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Arc arc0 = new Arc();
      Point point0 = new Point();
      Point point1 = arc0.startPoint(point0);
      assertEquals(0.0F, point1.y, 0.01F);
      assertEquals(0.0F, point1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Arc arc0 = new Arc(0.0F, 0.0F, 0.5F, 4.712389F, 0.5F, 0.0F, 0);
      Line line0 = new Line();
      Point point0 = line0.p1();
      arc0.startPoint(point0);
      assertEquals(0.49999046F, point0.x, 0.01F);
      assertEquals(2.335633F, point0.y(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point point0 = new Point();
      Arc arc0 = new Arc((-400.0F), 1.5707964F, (-281.8065F), (-1645.4231F), 360.0F, 57.295776F, 0);
      arc0.startPoint(point0);
      assertEquals((-821.1406F), point0.y, 0.01F);
      assertEquals((-681.8065F), point0.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Arc arc0 = new Arc(1);
      arc0.setFrameFromDiagonal(1.0F, (-3714.7F), (-3714.7F), (float) 1);
      Point point0 = arc0.startPoint();
      assertEquals((-1856.85F), point0.y, 0.01F);
      assertEquals(1.0F, point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Arc arc0 = new Arc(1);
      float float0 = arc0.normAngle(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Arc arc0 = new Arc();
      float float0 = arc0.normAngle(5468.5693F);
      assertEquals(68.569336F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Arc arc0 = new Arc(2);
      Point point0 = new Point(0, 0.0F);
      Point point1 = arc0.endPoint(point0);
      assertEquals(0.0F, point1.y, 0.01F);
      assertEquals(0.0F, point1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1311.4F, 2, 1311.4F, 1311.4F);
      Arc arc0 = new Arc(rectangle0, 2, (-1049.366F), 2);
      Point point0 = arc0.endPoint();
      assertEquals(304.09933F, point0.y, 0.01F);
      assertEquals(2519.2856F, point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Arc arc0 = new Arc((-1879.8413F), (-1879.8413F), (-1879.8413F), (-1879.8413F), (-1879.8413F), 224.99998F, 2);
      Point point0 = arc0.endPoint();
      Point point1 = arc0.endPoint(point0);
      assertEquals((-2048.3337F), point1.x, 0.01F);
      assertEquals((-2282.7803F), point1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Arc arc0 = new Arc(1);
      AffineTransform affineTransform0 = new AffineTransform(3.4028235E38F, 224.99998F, (-2204.0F), 0.0F, 1, (-1729.54F));
      Vector vector0 = affineTransform0.scale();
      arc0.setArcByTangent(vector0, vector0, vector0, 91.235214F);
      Arc arc1 = arc0.clone();
      assertEquals(182.47043F, arc1.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Arc arc0 = new Arc((-400.0F), 1.5707964F, (-281.8065F), (-1645.4231F), 360.0F, 57.295776F, 0);
      Arc arc1 = arc0.clone();
      assertEquals(0, arc1.arcType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Rectangle rectangle0 = arc0.bounds();
      Arc arc1 = new Arc(rectangle0, (-753.29956F), 0, 1);
      Arc arc2 = arc1.clone();
      assertEquals(0.0F, arc2.width(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point point0 = new Point(1481.832F, (-1.0F));
      Vector vector0 = new Vector((-1575.3303F), 0.0F);
      Line line0 = new Line(point0, vector0);
      Rectangle rectangle0 = line0.bounds();
      Arc arc0 = new Arc(rectangle0, 0.0F, 90.0F, 0);
      Arc arc1 = arc0.clone();
      assertEquals((-1575.3303F), arc1.x(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Arc arc0 = new Arc(1);
      arc0.setAngleExtent((-4.144147F));
      Arc arc1 = arc0.clone();
      assertEquals(0.0F, arc1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      Arc arc0 = new Arc(rectangle0, 2.0F, 0.0F, 0);
      arc0.setFrame(0.0F, (-6.3323336F), 0.0F, 0.0F);
      Rectangle rectangle1 = arc0.bounds(rectangle0);
      assertEquals((-6.3323336F), rectangle1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      Arc arc0 = new Arc(rectangle0, 2.0F, 0.0F, 0);
      arc0.setFrame((-863.5569F), 74.744F, 0.0F, 413.7F);
      arc0.bounds(rectangle0);
      assertEquals(413.7F, rectangle0.height, 0.01F);
      assertEquals(413.7F, rectangle0.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Rectangle rectangle0 = arc0.bounds();
      Rectangle rectangle1 = arc0.bounds(rectangle0);
      assertEquals(0.0F, rectangle1.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.5707964F, (-341.6748F), (-1645.4231F), 797.8257F);
      Rectangle rectangle1 = rectangle0.intersection(1107.47F, 0.0F, 0.0F, (-3305.3F));
      Arc arc0 = new Arc(rectangle1, 90.0F, 0.0F, 0);
      arc0.bounds(rectangle0);
      assertEquals((-3305.3F), rectangle0.height, 0.01F);
      assertTrue(rectangle0.equals((Object)rectangle1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.endPoint((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Arc arc0 = new Arc();
      Vector vector0 = new Vector((-1216.5925F), 3504.6F);
      arc0.setArcByTangent(vector0, vector0, vector0, 0.0F);
      Point point0 = arc0.startPoint();
      arc0.setAngles((XY) point0, (XY) point0);
      boolean boolean0 = arc0.contains((XY) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(103.716354F, 103.716354F, 0.5F, 4278.35F);
      arc0.setFrameFromCenter((-2185.423F), (-2076.3281F), (-2185.423F), (-2185.423F));
      boolean boolean0 = arc0.contains((-2185.423F), (float) 2);
      assertEquals(315.0067F, arc0.extent, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(1.3333334F, 1.3333334F, 103.9491F, 473.5F);
      arc0.setFrameFromCenter(103.9491F, 371.64716F, 1829.969F, 1883.877F);
      boolean boolean0 = arc0.contains(1.3333334F, 1829.969F);
      assertEquals(327.38193F, arc0.extent, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles((-4.5F), (-4.5F), 103.716354F, 473.5F);
      arc0.setFrameFromCenter(103.716354F, (-3386.0F), 1829.969F, 1883.877F);
      boolean boolean0 = arc0.contains(1.3333334F, 1829.969F);
      assertEquals(135.0F, arc0.start, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Arc arc0 = new Arc(2);
      Point point0 = new Point(0, 0.0F);
      boolean boolean0 = arc0.contains((XY) point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Arc arc0 = new Arc((-2481.518F), 0.0F, 187.344F, 1862.0F, 0.0F, 2079.136F, 1);
      Point point0 = arc0.startPoint();
      boolean boolean0 = arc0.contains((XY) point0);
      assertEquals((-2294.174F), point0.x, 0.01F);
      assertTrue(boolean0);
      assertEquals(931.0F, point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrameFromCenter(103.9491F, 371.64716F, 1829.969F, 1883.877F);
      boolean boolean0 = arc0.contains(1.3333334F, 1829.969F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.contains(0.5F, (-4211.572F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Arc arc0 = new Arc(216.2F, 180.0F, 2, 133.91267F, (-3.1415927F), 180.0F, 2);
      boolean boolean0 = arc0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Arc arc0 = new Arc(1);
      boolean boolean0 = arc0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1, 1, 1, 1);
      Arc arc0 = new Arc(rectangle0, 1.0F, 1.0F, 1);
      boolean boolean0 = arc0.containsAngle(1.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Arc arc0 = new Arc(0.0F, 0.0F, 0, 90.0F, 89.81721F, 0.0F, 0);
      boolean boolean0 = arc0.containsAngle(0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Arc arc0 = new Arc(2, 925.5302F, 925.5302F, 2, 2, 2, 2);
      boolean boolean0 = arc0.containsAngle(925.5302F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Arc arc0 = new Arc();
      Point point0 = arc0.endPoint();
      arc0.setArcByTangent(point0, point0, point0, 0.0F);
      boolean boolean0 = arc0.containsAngle(Float.NaN);
      assertEquals(180.0F, arc0.extent, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Arc arc0 = new Arc((-1879.8413F), (-1879.8413F), (-1879.8413F), (-1879.8413F), (-1879.8413F), (-1879.8413F), 2);
      boolean boolean0 = arc0.containsAngle(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Arc arc0 = new Arc(342.5F, 342.5F, 342.5F, 342.5F, 342.5F, 342.5F, 2);
      boolean boolean0 = arc0.containsAngle(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.startPoint((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.AbstractArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = arc0.startPoint();
      arc0.setArcByTangent(point0, point0, point0, 341.7051F);
      boolean boolean0 = arc0.contains(3.4028235E38F, 180.0F);
      assertEquals(Float.POSITIVE_INFINITY, arc0.x, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Arc arc0 = new Arc();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, (Transform) null);
      assertFalse(abstractArc_Iterator0.isDone());
      
      float[] floatArray0 = new float[4];
      int int0 = abstractArc_Iterator0.currentSegment(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Arc arc0 = new Arc(1);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      abstractArc_Iterator0.next();
      int int0 = abstractArc_Iterator0.currentSegment((float[]) null);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Arc arc0 = new Arc(2);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      abstractArc_Iterator0.next();
      assertFalse(abstractArc_Iterator0.isDone());
      
      float[] floatArray0 = new float[6];
      int int0 = abstractArc_Iterator0.currentSegment(floatArray0);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.extent = 1.3333334F;
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, (Transform) null);
      abstractArc_Iterator0.next();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        abstractArc_Iterator0.currentSegment(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.AbstractArc$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Arc arc0 = new Arc((-1097.6F), 267.1455F, 267.1455F, (-1097.6F), 2, (-1097.6F), 2);
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = arc0.pathIterator((Transform) identityTransform0);
      assertTrue(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Arc arc0 = new Arc((-708.7F), (-708.7F), (-708.7F), (-708.7F), (-708.7F), (-708.7F), 2);
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = arc0.pathIterator((Transform) identityTransform0);
      assertTrue(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 2, 2);
      Arc arc0 = new Arc(2.0F, 2, 2, 2, 2, 2, 2);
      arc0.bounds(rectangle0);
      assertEquals(3.0F, rectangle0.x, 0.01F);
      assertEquals(0.06975651F, rectangle0.height(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Point point0 = new Point();
      Arc arc0 = new Arc(1);
      AffineTransform affineTransform0 = new AffineTransform(1652.5892F, 1.0F, 1652.5892F, 360.0F);
      Vector vector0 = affineTransform0.scale();
      arc0.setArcByTangent(point0, point0, vector0, 0.5F);
      boolean boolean0 = arc0.intersects((float) 0, 39.85743F, 1.0F, (float) 4);
      assertEquals(90.0F, arc0.start, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1, 1, 1, 1);
      Arc arc0 = new Arc(rectangle0, 1.0F, (-2185.423F), 1);
      boolean boolean0 = arc0.intersects(1.0F, 0.0F, 802.2738F, 1.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = new Point();
      AffineTransform affineTransform0 = new AffineTransform(360.0F, 0.0F, 0.0F, 0.0F);
      Vector vector0 = affineTransform0.scale();
      arc0.setArcByTangent(vector0, point0, point0, 1197.7F);
      boolean boolean0 = arc0.intersects(360.0F, 607.2F, 5601.4043F, 361.474F);
      assertEquals(225.0F, arc0.extent, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Arc arc0 = new Arc(2, 2, 2625.7434F, 2, 2625.7434F, 2625.7434F, 2);
      boolean boolean0 = arc0.intersects(360.0F, (float) 2, 64.37303F, 2.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Arc arc0 = new Arc(2.0F, 104.51879F, 104.51879F, 2, 2, 104.51879F, 2);
      boolean boolean0 = arc0.intersects(104.51879F, 104.51879F, 0.5F, 104.51879F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Arc arc0 = new Arc(2, 2, 90.0F, 2, 90.0F, 90.0F, 2);
      boolean boolean0 = arc0.intersects((float) 2, (float) 2, (float) 2, 90.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Arc arc0 = new Arc(2.0F, 2, 2, 2, 2, 2, 2);
      boolean boolean0 = arc0.intersects((float) 2, (float) 2, (float) 2, 3.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Arc arc0 = new Arc(923.1063F, 923.1063F, 923.1063F, 923.1063F, 923.1063F, 267.1455F, 2);
      boolean boolean0 = arc0.intersects(6.2831855F, (float) 2, 1402.9865F, 1402.9865F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 1037.16F, 1037.16F);
      Arc arc0 = new Arc(rectangle0, 2.0F, 1037.16F, 2);
      boolean boolean0 = arc0.intersects(1037.16F, 2.0F, 2.0F, 518.87085F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Arc arc0 = new Arc(926.99884F, 926.99884F, 926.99884F, 926.99884F, 926.99884F, 207.0359F, 2);
      boolean boolean0 = arc0.intersects(926.99884F, 1520.0F, 838.6436F, 207.0359F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = new Point();
      AffineTransform affineTransform0 = new AffineTransform(360.0F, 40.520264F, 0.0F, 40.520264F);
      Vector vector0 = affineTransform0.scale();
      arc0.setArcByTangent(vector0, point0, point0, 1211.39F);
      boolean boolean0 = arc0.intersects((-1.0F), (-341.6748F), 0.5F, (-5471.15F));
      assertEquals(225.0F, arc0.extent, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1, 1, 1, 1);
      Arc arc0 = new Arc(rectangle0, 1.0F, 1.0F, 1);
      boolean boolean0 = arc0.intersects(0.0F, 0.0F, 0.0F, 1.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Arc arc0 = new Arc(923.1063F, 923.1063F, 923.1063F, 923.1063F, 923.1063F, 267.1455F, 2);
      Rectangle rectangle0 = arc0.frame();
      Point point0 = arc0.min();
      Point point1 = arc0.endPoint(point0);
      rectangle0.setFrameFromCenter((XY) point1, (XY) point1);
      boolean boolean0 = arc0.contains((IRectangle) rectangle0);
      assertEquals(1224.8943F, rectangle0.x, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Arc arc0 = new Arc(342.6693F, 342.6693F, 342.6693F, 342.6693F, 342.6693F, 342.6693F, 2);
      Point point0 = arc0.center();
      point0.y = 342.6693F;
      Rectangle rectangle0 = new Rectangle(point0);
      boolean boolean0 = arc0.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Arc arc0 = new Arc(911.0F, 911.0F, 911.0F, 911.0F, 911.0F, 216.0F, 2);
      Point point0 = arc0.center();
      Rectangle rectangle0 = new Rectangle(point0);
      Dimension dimension0 = new Dimension(145.2F, 180.0F);
      rectangle0.setSize((IDimension) dimension0);
      boolean boolean0 = arc0.contains((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Arc arc0 = new Arc(2);
      Point point0 = new Point();
      arc0.setAngles((XY) point0, (XY) point0);
      boolean boolean0 = arc0.contains((float) 2, 0.0F, 0.0F, 0.0F);
      assertTrue(boolean0);
      assertEquals(0.0F, arc0.start, 0.01F);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Arc arc0 = new Arc(342.6693F, 342.6693F, 342.6693F, 342.6693F, 342.6693F, 342.6693F, 2);
      Point point0 = arc0.center();
      Rectangle rectangle0 = new Rectangle(point0);
      boolean boolean0 = arc0.contains((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = new Point();
      Vector vector0 = new Vector();
      arc0.setArcByTangent(vector0, point0, point0, 1211.39F);
      assertEquals(180.0F, arc0.extent, 0.01F);
      
      arc0.setAngles((XY) point0, (XY) point0);
      boolean boolean0 = arc0.contains(0.0F, 40.520264F, 40.520264F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Arc arc0 = new Arc(357.98422F, 357.98422F, 357.98422F, 0, 357.98422F, 357.98422F, 0);
      boolean boolean0 = arc0.contains((float) 0, 357.98422F, 1784.51F, 1784.51F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Arc arc0 = new Arc(216.2F, 216.2F, 216.2F, 0, 216.2F, 216.2F, 0);
      boolean boolean0 = arc0.contains((float) 0, 216.2F, 216.2F, 216.2F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Arc arc0 = new Arc(1);
      AffineTransform affineTransform0 = new AffineTransform(3.4028235E38F, 224.99998F, (-2204.0F), 0.0F, 1, (-1729.54F));
      Vector vector0 = affineTransform0.scale();
      arc0.setArcByTangent(vector0, vector0, vector0, 91.235214F);
      boolean boolean0 = arc0.intersects(Float.NaN, 0.5F, Float.POSITIVE_INFINITY, 1.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Arc arc0 = new Arc(923.1063F, 923.1063F, 923.1063F, 923.1063F, 923.1063F, 923.1063F, 2);
      boolean boolean0 = arc0.intersects(923.1063F, 923.1063F, (float) 2, 923.1063F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Rectangle rectangle0 = arc0.frame();
      Arc arc1 = new Arc(rectangle0, 490.7051F, 211.0F, 0);
      arc1.height = (-1936.4608F);
      boolean boolean0 = arc1.contains(0.0F, 90.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.intersects((-1788.5868F), (-3386.0F), (-568.0F), 1.3333334F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.containsAngle((-2120.0115F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Arc arc0 = new Arc(2, 856.0F, (-829.6106F), 2, (-829.6106F), 856.0F, 2);
      arc0.setArc((float) 2, (-829.6106F), (-829.6106F), (-876.5125F), 119.74467F, (-83.431F), 2);
      boolean boolean0 = arc0.containsAngle(1536.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Arc arc0 = new Arc(2, 2, 4.0F, 2, 4.0F, 4.0F, 2);
      boolean boolean0 = arc0.intersects((float) 2, (float) 2, (float) 2, 4.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Arc arc0 = new Arc(1);
      boolean boolean0 = arc0.contains(0.0F, 2.0F, 2421.4F, 2044.6016F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Arc arc0 = new Arc(1);
      arc0.setAngleExtent((-1.0F));
      boolean boolean0 = arc0.containsAngle(0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngleExtent((-11.188903F));
      boolean boolean0 = arc0.containsAngle((-1964.5267F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Arc arc0 = new Arc(216.2F, 180.0F, 2, 133.91267F, (-3.1415927F), 180.0F, 2);
      Point point0 = arc0.center();
      Rectangle rectangle0 = new Rectangle(point0);
      boolean boolean0 = arc0.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = new Point();
      AffineTransform affineTransform0 = new AffineTransform(360.0F, 0.0F, 0.0F, 0.0F);
      Vector vector0 = affineTransform0.scale();
      arc0.setArcByTangent(vector0, point0, point0, 1197.7F);
      boolean boolean0 = arc0.containsAngle((-1644.3835F));
      assertEquals(225.0F, arc0.start, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Arc arc0 = new Arc(2, 2, 2625.7434F, 2, 2625.7434F, 2625.7434F, 2);
      boolean boolean0 = arc0.containsAngle((-1000.9201F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Arc arc0 = new Arc(2, 2, 2, 2, 2, (-453.83075F), 2);
      AffineTransform affineTransform0 = new AffineTransform(2.0F, 2.0F, 2.0F, (-453.83075F), (-453.83075F));
      PathIterator pathIterator0 = arc0.pathIterator((Transform) affineTransform0);
      assertFalse(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Arc arc0 = new Arc(2, 2, 68.21863F, 2, 68.21863F, 68.21863F, 2);
      boolean boolean0 = arc0.intersects(68.21863F, (float) 2, 68.21863F, (float) 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Arc arc0 = new Arc();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, (Transform) null);
      abstractArc_Iterator0.next();
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try { 
        abstractArc_Iterator0.currentSegment(floatArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.f.AbstractArc$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Arc arc0 = new Arc(1);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      int int0 = abstractArc_Iterator0.windingRule();
      assertFalse(abstractArc_Iterator0.isDone());
      assertEquals(1, int0);
  }
}
