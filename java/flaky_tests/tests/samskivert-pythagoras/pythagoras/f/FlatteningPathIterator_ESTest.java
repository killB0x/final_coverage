/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:26:39 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.AbstractLine;
import pythagoras.f.AffineTransform;
import pythagoras.f.Area;
import pythagoras.f.Ellipse;
import pythagoras.f.FlatteningPathIterator;
import pythagoras.f.IdentityTransform;
import pythagoras.f.Line;
import pythagoras.f.Path;
import pythagoras.f.PathIterator;
import pythagoras.f.Point;
import pythagoras.f.QuadCurve;
import pythagoras.f.Rectangle;
import pythagoras.f.RoundRectangle;
import pythagoras.f.Transform;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlatteningPathIterator_ESTest extends FlatteningPathIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Area area0 = new Area();
      AffineTransform affineTransform0 = new AffineTransform((-2177.2F), (-1.0E-10F), (-1.0E-10F), 940.5824F, 403.4527F);
      PathIterator pathIterator0 = area0.pathIterator((Transform) affineTransform0, 3656.992F);
      pathIterator0.windingRule();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Path path0 = new Path(ellipse0);
      Path.Iterator path_Iterator0 = new Path.Iterator(path0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 0.0F, 0);
      flatteningPathIterator0.recursionLimit();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1165.63F, 1165.63F, 1165.63F, 1165.63F);
      Path.Iterator path_Iterator0 = new Path.Iterator((Path) null, affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 1165.63F);
      flatteningPathIterator0.flatness();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1165.63F, 1165.63F, 1165.63F, 1165.63F);
      Path.Iterator path_Iterator0 = new Path.Iterator((Path) null, affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 1165.63F);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.windingRule();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1165.63F, 1165.63F, 1165.63F, 1165.63F);
      Path.Iterator path_Iterator0 = new Path.Iterator((Path) null, affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 1165.63F);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.isDone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      QuadCurve quadCurve0 = new QuadCurve();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0, 2145353207);
      flatteningPathIterator0.next();
      // Undeclared exception!
      flatteningPathIterator0.evaluate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Path path0 = new Path(0, 0);
      Path.Iterator path_Iterator0 = new Path.Iterator(path0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 1);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.evaluate();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.f.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Path.Iterator path_Iterator0 = new Path.Iterator((Path) null, identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 0.0F);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.evaluate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      QuadCurve quadCurve0 = new QuadCurve();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 5938969.0F, 4);
      flatteningPathIterator0.next();
      // Undeclared exception!
      try { 
        flatteningPathIterator0.evaluate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2 out of bounds for length 4
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      QuadCurve quadCurve0 = new QuadCurve();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F, 9006);
      flatteningPathIterator0.next();
      float[] floatArray0 = new float[7];
      int int0 = flatteningPathIterator0.currentSegment(floatArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = ellipse0.pathIterator((Transform) identityTransform0, (float) 0);
      // Undeclared exception!
      try { 
        pathIterator0.currentSegment((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = ellipse0.pathIterator((Transform) identityTransform0, (float) 0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        pathIterator0.currentSegment(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FlatteningPathIterator flatteningPathIterator0 = null;
      try {
        flatteningPathIterator0 = new FlatteningPathIterator((PathIterator) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Path is null
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0F, 26.401505F, (-185.82753F), 295.57724F, (-1843.79F), 1166.1979F);
      PathIterator pathIterator0 = roundRectangle0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 1.0F);
      int int0 = flatteningPathIterator0.currentSegment((float[]) null);
      assertEquals(4, int0);
      assertEquals(1.0F, flatteningPathIterator0.flatness(), 0.01F);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)ellipse0.pathIterator((Transform) identityTransform0, (float) 0);
      flatteningPathIterator0.next();
      flatteningPathIterator0.evaluate();
      flatteningPathIterator0.isDone();
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertEquals(0.0F, flatteningPathIterator0.flatness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      QuadCurve quadCurve0 = new QuadCurve((-4200.707F), 0.0F, 0.0F, (-1724.6738F), (-1724.6738F), 0.0F);
      Point point0 = quadCurve0.ctrlP();
      Line line0 = new Line(point0, point0);
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, identityTransform0);
      abstractLine_Iterator0.next();
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractLine_Iterator0, 1165.4307F);
      flatteningPathIterator0.next();
      boolean boolean0 = flatteningPathIterator0.isDone();
      assertTrue(abstractLine_Iterator0.isDone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      Rectangle rectangle0 = ellipse0.bounds();
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) identityTransform0, 0.0F);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F);
      flatteningPathIterator0.isDone();
      assertEquals(0.0F, flatteningPathIterator0.flatness(), 0.01F);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse(2.0F, 2.0F, 2.0F, 2.0F);
      IdentityTransform identityTransform0 = new IdentityTransform();
      Path path0 = new Path(ellipse0);
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)path0.pathIterator((Transform) identityTransform0, 2.0F);
      flatteningPathIterator0.next();
      flatteningPathIterator0.evaluate();
      assertEquals(2.0F, flatteningPathIterator0.flatness(), 0.01F);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)ellipse0.pathIterator((Transform) identityTransform0, (float) 0);
      flatteningPathIterator0.next();
      flatteningPathIterator0.evaluate();
      flatteningPathIterator0.evaluate();
      assertEquals(0.0F, flatteningPathIterator0.flatness(), 0.01F);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float[] floatArray0 = new float[3];
      QuadCurve quadCurve0 = new QuadCurve();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F, 2250);
      flatteningPathIterator0.next();
      FlatteningPathIterator flatteningPathIterator1 = new FlatteningPathIterator(pathIterator0, 295.0F);
      int int0 = flatteningPathIterator1.currentSegment(floatArray0);
      assertEquals(16, flatteningPathIterator1.recursionLimit());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float[] floatArray0 = new float[3];
      QuadCurve quadCurve0 = new QuadCurve(0.0F, 0, 1086.0F, 0.0F, 0.0F, 0);
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F, 2250);
      flatteningPathIterator0.next();
      FlatteningPathIterator flatteningPathIterator1 = new FlatteningPathIterator(pathIterator0, 295.0F);
      int int0 = flatteningPathIterator1.currentSegment(floatArray0);
      assertEquals(16, flatteningPathIterator1.recursionLimit());
      assertEquals(1, int0);
      assertArrayEquals(new float[] {543.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      Rectangle rectangle0 = ellipse0.bounds();
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) identityTransform0, 0.0F);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F);
      float[] floatArray0 = new float[3];
      flatteningPathIterator0.next();
      int int0 = flatteningPathIterator0.currentSegment(floatArray0);
      assertEquals(1, int0);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      Rectangle rectangle0 = ellipse0.bounds();
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) identityTransform0, 0.0F);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F);
      float[] floatArray0 = new float[3];
      int int0 = flatteningPathIterator0.currentSegment(floatArray0);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertEquals(0, int0);
      assertEquals(0.0F, flatteningPathIterator0.flatness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)ellipse0.pathIterator((Transform) identityTransform0, (float) 0);
      flatteningPathIterator0.next();
      flatteningPathIterator0.evaluate();
      flatteningPathIterator0.next();
      assertEquals(0.0F, flatteningPathIterator0.flatness(), 0.01F);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Path path0 = new Path();
      Path.Iterator path_Iterator0 = new Path.Iterator(path0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 600.6124F, 1);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.currentSegment((float[]) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      float[] floatArray0 = new float[3];
      QuadCurve quadCurve0 = new QuadCurve();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F, 2250);
      flatteningPathIterator0.next();
      flatteningPathIterator0.currentSegment(floatArray0);
      int int0 = flatteningPathIterator0.currentSegment(floatArray0);
      assertEquals(2250, flatteningPathIterator0.recursionLimit());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FlatteningPathIterator flatteningPathIterator0 = null;
      try {
        flatteningPathIterator0 = new FlatteningPathIterator((PathIterator) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Path is null
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FlatteningPathIterator flatteningPathIterator0 = null;
      try {
        flatteningPathIterator0 = new FlatteningPathIterator((PathIterator) null, 0, (-673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Limit is less then zero
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FlatteningPathIterator flatteningPathIterator0 = null;
      try {
        flatteningPathIterator0 = new FlatteningPathIterator((PathIterator) null, (-2105.3804F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Flatness is less then zero
         //
         verifyException("pythagoras.f.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse(2.0F, 2.0F, 2.0F, 2.0F);
      IdentityTransform identityTransform0 = new IdentityTransform();
      Path path0 = new Path(ellipse0);
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)path0.pathIterator((Transform) identityTransform0, 2.0F);
      flatteningPathIterator0.windingRule();
      assertEquals(2.0F, flatteningPathIterator0.flatness(), 0.01F);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)ellipse0.pathIterator((Transform) identityTransform0, (float) 0);
      float float0 = flatteningPathIterator0.flatness();
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      Rectangle rectangle0 = ellipse0.bounds();
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) identityTransform0, 0.0F);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0F);
      int int0 = flatteningPathIterator0.recursionLimit();
      assertEquals(0.0F, flatteningPathIterator0.flatness(), 0.01F);
      assertEquals(16, int0);
  }
}
