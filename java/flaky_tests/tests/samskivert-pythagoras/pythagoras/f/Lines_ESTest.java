/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:14:48 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.Lines;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Lines_ESTest extends Lines_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = Lines.relativeCCW(0.0F, (-608.23804F), 1.6814924E37F, (-1481.0916F), (-5.4469334E12F), 1.6814924E37F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = Lines.relativeCCW(556.21F, 556.21F, 556.21F, (-1.117507E7F), 556.21F, 2.7182817F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Lines.relativeCCW((-4620.457F), 0.0F, (-1716.1654F), 0.0F, 2.7572274E14F, 0.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float float0 = Lines.pointSegDist(1.0F, (-1410.2F), 358302.94F, (-2.44360912E8F), 364.8619F, (-2.44360912E8F));
      assertEquals(2.44359504E8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect((-2320.0F), 0.0F, 755.27F, 571944.3F, 755.27F, 755.27F, 0.0F, 571944.3F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect(0.0F, 0.0F, 898.586F, (-442.3416F), 0.0F, (-701.4574F), 6.6187644E13F, 2940.135F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect(1046.3F, 1046.3F, 1046.3F, 1046.3F, 1046.3F, 1.0F, 1046.3F, (-1780.5F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(1.0F, 1.0F, (-1410.2F), (-1410.2F), (-1941.67F), (-1941.67F), (-1410.2F), (-1410.2F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect((-634.3F), 0.0F, (-634.3F), 0.0F, (-608.23804F), 0.0F, (-608.23804F), 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(0.0F, 0.0F, 26.257F, 0.0F, 1789.8398F, 0.0F, 1.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-22.51119F), 0.0F, 12.984569F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(0.0F, 0.0F, (-919.63824F), 0.0F, 329.64F, 0.0F, (-1566.511F), 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float float0 = Lines.pointSegDistSq(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float float0 = Lines.pointSegDist(425.67853F, 425.67853F, 425.67853F, 1364.5258F, 1364.5258F, 425.67853F);
      assertEquals(663.86523F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float float0 = Lines.pointLineDistSq(0.0F, 0.0F, 0.0F, 0.0F, 611.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float float0 = Lines.pointLineDist((-1060.76F), (-1060.76F), (-1060.76F), (-602.741F), (-1060.76F), (-445.354F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float float0 = Lines.pointSegDistSq((-2521.401F), (-2521.401F), 2229.5188F, 2229.5188F, (-2521.401F), (-1151.2087F));
      assertEquals(1877427.1F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-27.444283F), (-0.18195349F), (-27.444283F), (-27.444283F), (-27.444283F), 1526.0F, (-27.444283F), 934.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(0.0F, 0.0F, (-1.0F), (-1.0F), 1342.72F, 1342.72F, 858494.9F, 858494.9F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(0.0F, 0.0F, 1.0F, 0.0F, 3343.23F, 0.0F, 3343.23F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-608.23804F), (-608.23804F), (-635.0577F), (-608.23804F), 0.0F, (-608.23804F), (-608.23804F), (-608.23804F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(0.0F, (-149.0F), 0.0F, 0.0F, 0.0F, (-149.0F), 1.0F, 2239.52F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float float0 = Lines.pointLineDistSq((-1389.95F), (-1003.7659F), (-1389.95F), 504.3561F, 1.0F, (-1411.255F));
      assertEquals(785188.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = Lines.relativeCCW((-4800.6F), (-4800.6F), 1058.0175F, 1058.0175F, 1058.0175F, (-4800.6F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = Lines.relativeCCW(0.0F, 0.0F, (-64.951645F), (-64.951645F), 0.0F, 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = Lines.relativeCCW((-6.112284F), (-6.112284F), (-1.0F), (-6.112284F), (-11.243985F), (-6.112284F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = Lines.relativeCCW((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float float0 = Lines.pointSegDistSq(1073.4F, 1.0F, 1.0E-5F, 3.1415927F, 61.0F, 504.3561F);
      assertEquals(1135922.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float float0 = Lines.pointSegDistSq((-2333.87F), (-597.33215F), 0.017453292F, 1135922.0F, 3.78041779E9F, 1.2390137E19F);
      assertEquals(1.29168179E12F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect(0.0F, (-24.426735F), (-24.426735F), (-24.426735F), (-24.426735F), 0.0F, (-24.426735F), (-24.426735F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect(0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-1.2275192F), (-1.2275192F), (-1.2275192F), 506.7537F, (-24.530228F), 0.0F, 1.08936816E-4F, 942.31995F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(0.0F, 1940.44F, 0.0F, 293.53006F, 0.0F, 1.0E-5F, 0.0F, 1.0E-5F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(2.7818708F, 2.7818708F, 2.7818708F, (-22.822104F), 2.7818708F, (-22.822104F), 2.7818708F, (-22.822104F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(0.0F, (-568.16504F), 0.0F, 0.0F, 0.0F, 6653164.0F, 0.0F, (-176.428F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-608.238F), (-608.238F), (-608.238F), 0.0F, (-608.238F), 0.0F, (-608.238F), 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(0.0F, 2279.0828F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 1.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-506.7537F), (-506.7537F), (-506.7537F), 1.39138918E12F, (-506.7537F), 4.7458003E30F, (-506.7537F), 4.7458003E30F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-27.444283F), (-27.444283F), (-27.444283F), 271.61F, (-27.444283F), (-27.444283F), (-27.444283F), (-27.444283F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect(1.0E-5F, 0.0F, 1.0E-5F, 0.0F, 1.0E-5F, 1.0E-5F, 0.0F, 1.0E-5F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(506.7537F, 506.7537F, 0.0F, 506.7537F, (-816479.1F), 506.7537F, (-24.530228F), 506.7537F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(6653164.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect(506.7537F, 506.7537F, 0.0F, 506.7537F, (-816479.1F), 506.7537F, 223.36F, 506.7537F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect(0.0F, 0.0F, 0.0F, 0.0F, (-3.1415927F), 0.0F, (-3.1415927F), 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-1151.2087F), (-1151.2087F), 0.0F, (-1151.2087F), 3088.6F, (-1151.2087F), 0.0F, (-1151.2087F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = Lines.lineIntersectsRect((-608.238F), (-608.238F), 0.0F, 0.0F, (-608.238F), (-608.238F), 0.0F, (-608.238F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-2521.401F), (-2521.401F), (-2521.401F), (-2521.401F), (-2521.401F), (-2521.401F), (-2521.401F), 3088.6F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = Lines.linesIntersect((-1.2275192F), (-1.2275192F), (-1.2275192F), 506.7537F, 223.36F, 0.0F, 1.08936816E-4F, 954.11115F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float float0 = Lines.pointSegDist(954.11115F, (-816479.1F), 223.36F, 506.7537F, 954.11115F, (-816479.1F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float float0 = Lines.pointLineDist(391.73706F, 0.0F, (-1151.2087F), 2229.5188F, 1877427.1F, 0.0F);
      assertEquals(2227.686F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Lines lines0 = new Lines();
  }
}
