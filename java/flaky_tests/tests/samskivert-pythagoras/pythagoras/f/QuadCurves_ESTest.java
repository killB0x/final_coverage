/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:10:34 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IQuadCurve;
import pythagoras.f.QuadCurve;
import pythagoras.f.QuadCurves;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuadCurves_ESTest extends QuadCurves_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[3];
      // Undeclared exception!
      try { 
        QuadCurves.subdivide(floatArray0, 2, floatArray1, 1, floatArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("pythagoras.f.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[] floatArray0 = new float[11];
      QuadCurves.subdivide(floatArray0, 3, floatArray0, 0, (float[]) null, 3469);
      assertEquals(11, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[4] = 1935.8F;
      QuadCurves.subdivide(floatArray0, 0, floatArray0, 0, floatArray0, 0);
      assertArrayEquals(new float[] {483.95F, 0.0F, 967.9F, 0.0F, 1935.8F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[5] = (-573.82F);
      QuadCurves.subdivide(floatArray0, 0, floatArray0, 0, floatArray0, 0);
      assertArrayEquals(new float[] {0.0F, (-143.455F), 0.0F, (-286.91F), 0.0F, (-573.82F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[3] = 3169.307F;
      QuadCurves.subdivide(floatArray0, 0, floatArray0, 0, floatArray0, 0);
      assertArrayEquals(new float[] {0.0F, 1584.6534F, 0.0F, 1584.6534F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = (-1.0F);
      QuadCurves.subdivide(floatArray0, 0, floatArray0, 0, floatArray0, 0);
      assertArrayEquals(new float[] {(-0.5F), 0.0F, (-0.5F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2248.3F;
      QuadCurves.subdivide(floatArray0, 0, floatArray0, 0, floatArray0, 0);
      assertArrayEquals(new float[] {562.075F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      QuadCurve quadCurve1 = quadCurve0.clone();
      QuadCurves.subdivide((IQuadCurve) quadCurve0, quadCurve0, quadCurve1);
      assertEquals(0.0F, quadCurve1.ctrly, 0.01F);
      assertEquals(0.0F, quadCurve0.y1, 0.01F);
      assertEquals(0.0F, quadCurve1.x1, 0.01F);
      assertEquals(0.0F, quadCurve1.y2, 0.01F);
      assertEquals(0.0F, quadCurve1.y1, 0.01F);
      assertEquals(0.0F, quadCurve1.ctrlx, 0.01F);
      assertEquals(0.0F, quadCurve0.y2(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-4886.6943F), 0.0F, (-4886.6943F), (-4886.6943F), 2.0F, 2.0F);
      QuadCurves.subdivide((IQuadCurve) quadCurve0, quadCurve0, quadCurve0);
      assertEquals((-2442.3472F), quadCurve0.ctrlx, 0.01F);
      assertEquals((-3664.5208F), quadCurve0.x1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float float0 = QuadCurves.flatness(2.0F, 2.0F, 2.0F, 2.0F, (-1.0E-5F), (-935.74774F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float float0 = QuadCurves.flatness(0.0F, (-1.0F), 1159.4F, 1977.6666F, 0.0F, 0.0F);
      assertEquals(2292.4602F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float float0 = QuadCurves.flatnessSq(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float float0 = QuadCurves.flatnessSq(2292.4602F, 0.0F, (-1.0F), 1644.29F, 0.0F, 1159.4F);
      assertEquals(235119.33F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1977.6666F;
      floatArray0[2] = 1644.29F;
      int int0 = QuadCurves.solveQuadratic(floatArray0, floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = (-1.0F);
      int int0 = QuadCurves.solveQuadratic(floatArray0, floatArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 926.81F;
      floatArray0[2] = 704.0F;
      int int0 = QuadCurves.solveQuadratic(floatArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-2829.8628F);
      int int0 = QuadCurves.solveQuadratic(floatArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = (-1.0F);
      float float0 = QuadCurves.flatnessSq(floatArray0, 0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = (-1.0F);
      float float0 = QuadCurves.flatness(floatArray0, 0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuadCurves.subdivide((float[]) null, 0, (float[]) null, 0, (float[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      // Undeclared exception!
      try { 
        QuadCurves.subdivide((IQuadCurve) null, quadCurve0, quadCurve0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        QuadCurves.solveQuadratic((float[]) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        QuadCurves.solveQuadratic(floatArray0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 0
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuadCurves.solveQuadratic((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        QuadCurves.solveQuadratic(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 1
         //
         verifyException("pythagoras.f.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuadCurves.flatnessSq((float[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try { 
        QuadCurves.flatnessSq(floatArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 4
         //
         verifyException("pythagoras.f.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuadCurves.flatness((float[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[] floatArray0 = new float[9];
      // Undeclared exception!
      try { 
        QuadCurves.flatness(floatArray0, 951);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 953 out of bounds for length 9
         //
         verifyException("pythagoras.f.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = QuadCurves.solveQuadratic(floatArray0, floatArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[15];
      QuadCurves.subdivide(floatArray0, 7, (float[]) null, 7, (float[]) null, 7);
      assertEquals(15, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1.0F, 0.0F, (-838.6266F), 0.0F, 1.0F, (-838.6266F));
      QuadCurves.subdivide((IQuadCurve) quadCurve0, quadCurve0, quadCurve0);
      assertEquals((-419.3133F), quadCurve0.ctrly, 0.01F);
      assertEquals((-209.65665F), quadCurve0.y1(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      QuadCurves.subdivide((IQuadCurve) quadCurve0, (QuadCurve) null, (QuadCurve) null);
      assertEquals(0.0F, quadCurve0.x2(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QuadCurves quadCurves0 = new QuadCurves();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = QuadCurves.solveQuadratic(floatArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = QuadCurves.flatnessSq(floatArray0, 1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = QuadCurves.flatness(floatArray0, 1);
      assertEquals(0.0F, float0, 0.01F);
  }
}
