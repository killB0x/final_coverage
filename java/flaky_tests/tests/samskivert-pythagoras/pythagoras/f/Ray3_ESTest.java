/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:29:10 GMT 2022
 */

package pythagoras.f;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.f.IVector3;
import pythagoras.f.Ray3;
import pythagoras.f.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Ray3_ESTest extends Ray3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Vector3 vector3_1 = new Vector3();
      vector3_1.normalizeLocal();
      ray3_0.set(vector3_1, ray3_0.direction);
      Vector3 vector3_2 = ray3_0.origin();
      assertEquals(Float.NaN, vector3_2.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Vector3 vector3_1 = ray3_0.origin();
      assertEquals(1.0F, vector3_1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(109.1468F, 0.0F, (-1788.5979F));
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_2 = vector3_0.subtract((IVector3) vector3_1);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Ray3 ray3_1 = ray3_0.set(vector3_2, vector3_2);
      Vector3 vector3_3 = ray3_1.origin();
      assertEquals((-3.4028235E38F), vector3_3.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(109.1468F, 0.0F, (-1788.5979F));
      vector3_0.x = (-1.0F);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Vector3 vector3_1 = ray3_0.origin();
      assertEquals((-1788.5979F), vector3_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ray3 ray3_0 = new Ray3();
      Vector3 vector3_0 = ray3_0.origin();
      assertEquals(0.0F, vector3_0.lengthSquared(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = 19.716354F;
      Vector3 vector3_0 = new Vector3(floatArray0);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Vector3 vector3_1 = ray3_0.direction();
      assertEquals(19.716354F, vector3_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Vector3 vector3_1 = ray3_0.direction();
      assertEquals(1.0F, vector3_1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(109.1468F, 0.0F, (-1788.5979F));
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_2 = vector3_0.subtract((IVector3) vector3_1);
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Ray3 ray3_1 = ray3_0.set(vector3_2, vector3_2);
      Vector3 vector3_3 = ray3_1.direction();
      assertEquals((-3.4028235E38F), vector3_3.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ray3 ray3_0 = new Ray3();
      Vector3 vector3_0 = ray3_0.direction();
      assertEquals(0.0F, vector3_0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ray3 ray3_0 = new Ray3();
      // Undeclared exception!
      try { 
        ray3_0.set((Vector3) null, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(109.1468F, 0.0F, (-1788.5979F));
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      // Undeclared exception!
      try { 
        ray3_0.set((Ray3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray3", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ray3 ray3_0 = null;
      try {
        ray3_0 = new Ray3((Vector3) null, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ray3 ray3_0 = null;
      try {
        ray3_0 = new Ray3((Ray3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.f.Ray3", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(109.1468F, 0.0F, (-1788.5979F));
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Vector3 vector3_1 = ray3_0.direction();
      assertEquals((-1788.5979F), vector3_1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(109.1468F, 0.0F, (-1788.5979F));
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Ray3 ray3_1 = ray3_0.set(ray3_0);
      assertSame(ray3_0, ray3_1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ray3 ray3_0 = new Ray3();
      String string0 = ray3_0.toString();
      assertEquals("[origin=[0.0, 0.0, 0.0], direction=[0.0, 0.0, 0.0]]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ray3 ray3_0 = new Ray3();
      Ray3 ray3_1 = new Ray3(ray3_0);
      assertFalse(ray3_1.equals((Object)ray3_0));
  }
}
