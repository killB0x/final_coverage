/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:20:00 GMT 2022
 */

package pythagoras.i;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.i.Dimension;
import pythagoras.i.IPoint;
import pythagoras.i.IRectangle;
import pythagoras.i.Point;
import pythagoras.i.Rectangle;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractRectangle_ESTest extends AbstractRectangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      rectangle1.hashCode();
      assertEquals((-1), rectangle1.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals((-1), rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 2, 2);
      rectangle0.y = 1;
      rectangle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1146, 0);
      rectangle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0, 0, 0, 1985);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0, 0, 2708, 2708);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0, (-2610), 2, 3573);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 5, 2, 614);
      Rectangle rectangle1 = new Rectangle(5, 4, (-1860), 8);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(857, 857, 857, 857);
      Point point0 = new Point();
      rectangle0.setLocation((IPoint) point0);
      boolean boolean0 = rectangle0.intersects(0, 0, 556, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(5, 0, 2, 1146);
      boolean boolean0 = rectangle0.intersects((-1), (-1101), 10, 759);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Dimension dimension0 = new Dimension(8, 8);
      Rectangle rectangle0 = new Rectangle(dimension0);
      boolean boolean0 = rectangle0.intersects(7, 8, 3109, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setSize(8, 2295);
      boolean boolean0 = rectangle0.intersects(8, 2295, 4, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setSize(8, 2295);
      boolean boolean0 = rectangle0.intersects(0, 2, 0, 2797);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1, 1146);
      boolean boolean0 = rectangle0.intersects(1, (-386), 3595, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(857, 857, 857, 857);
      Point point0 = new Point();
      rectangle0.setLocation((IPoint) point0);
      boolean boolean0 = rectangle0.contains(0, 0, (-90), (-1364));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(857, 857, 857, 857);
      rectangle0.add((-3568), (-461));
      boolean boolean0 = rectangle0.contains(857, (-1907), (-1364), (-1319));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setSize(8, 2295);
      boolean boolean0 = rectangle0.contains(1, 8, 4, 2295);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(5, 0, 2, 1146);
      boolean boolean0 = rectangle0.contains(1146, 1146, 5, (-386));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 8, 265);
      rectangle0.setBounds(2, 8, 2, 8);
      boolean boolean0 = rectangle0.contains((-1119), 2, (-1), (-1119));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(857, 857, 857, 857);
      Point point0 = new Point();
      rectangle0.setLocation((IPoint) point0);
      boolean boolean0 = rectangle0.contains(8, 857);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setSize(8, 2295);
      boolean boolean0 = rectangle0.contains(8, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0, (-2610), 2, 3573);
      boolean boolean0 = rectangle0.contains(0, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(8, 8, 8, 1);
      int int0 = rectangle0.outcode(12, 8);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 2, 2);
      int int0 = rectangle0.outcode(2, 4076);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(8, 8, 1, 10);
      Point point0 = rectangle0.location();
      int int0 = rectangle0.outcode((IPoint) point0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, (-386), (-2479), 84);
      Point point0 = new Point();
      int int0 = rectangle0.outcode((IPoint) point0);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 4, 0);
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertEquals(4, rectangle1.x());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-762), (-762), (-762), (-762));
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertNotSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), (-386), (-386), (-386));
      Dimension dimension0 = rectangle0.size();
      Dimension dimension1 = rectangle0.size(dimension0);
      assertEquals((-386), dimension1.width);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 8, 265);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = rectangle0.size(dimension0);
      assertSame(dimension0, dimension1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1, 1146);
      Dimension dimension0 = rectangle0.size();
      assertEquals(1146, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1, 1146);
      int int0 = rectangle0.minY();
      assertEquals(1146, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.add(0, (-2813));
      int int0 = rectangle0.minY();
      assertEquals((-2813), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Dimension dimension0 = new Dimension(2756, 0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.setLocation(1, 0);
      int int0 = rectangle0.minX();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-582), 451, 0, 0);
      int int0 = rectangle0.minX();
      assertEquals((-582), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertEquals(0, rectangle1.y);
      
      rectangle1.y = 2;
      int int0 = rectangle1.maxY();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4, 4, 4, 0);
      int int0 = rectangle0.maxY();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1, 0);
      Dimension dimension0 = rectangle0.size();
      Rectangle rectangle1 = new Rectangle(dimension0);
      int int0 = rectangle1.maxX();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1146, 0);
      int int0 = rectangle0.maxX();
      assertEquals(759, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Point point0 = new Point();
      Point point1 = rectangle0.location(point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 8, 2);
      Point point0 = new Point();
      Point point1 = rectangle0.location(point0);
      assertEquals(2, point1.y);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1045), (-1045), (-1045), (-1045));
      Point point0 = new Point();
      Point point1 = rectangle0.location(point0);
      int int0 = rectangle0.outcode((IPoint) point1);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1045), (-1045), (-1045), (-1045));
      Point point0 = rectangle0.location();
      assertEquals((-1045), point0.x);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1752), (-1752), (-3626), 0);
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertEquals((-1), rectangle1.height);
      assertEquals((-1752), rectangle1.y);
      assertEquals((-1752), rectangle1.x);
      assertEquals((-3627), rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setBounds((-700), 1, 1324, (-510));
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertEquals((-511), rectangle1.height);
      assertEquals((-700), rectangle1.x);
      assertEquals(1323, rectangle1.width);
      assertEquals(1, rectangle1.y);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Dimension dimension0 = new Dimension(2949, 730);
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.setBounds(1135, 0, 1, 1063);
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertEquals(0, rectangle1.y);
      assertEquals(1135, rectangle1.x);
      assertEquals(1062, rectangle1.height);
      assertEquals(0, rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 2, 2);
      Rectangle rectangle1 = new Rectangle((-2339), 2, 3219, 4);
      rectangle0.y = 1;
      Rectangle rectangle2 = rectangle1.intersection((IRectangle) rectangle0);
      assertEquals(1, rectangle2.width);
      assertEquals(0, rectangle2.height);
      assertEquals(2, rectangle2.y);
      assertEquals(2, rectangle2.x);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1180), (-1180));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = rectangle0.intersection((-2607), (-1180), (-1180), (-1180));
      assertEquals((-2361), rectangle1.height);
      assertEquals((-3788), rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Point point0 = new Point(0, (-1035));
      Rectangle rectangle0 = new Rectangle(point0);
      rectangle0.x = (-1005);
      Rectangle rectangle1 = rectangle0.intersection((-1005), (-92), 2, (-1));
      assertEquals((-92), rectangle1.y);
      assertEquals((-1005), rectangle1.x);
      assertEquals((-1), rectangle1.width);
      assertEquals((-944), rectangle1.height);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 8, 2);
      Rectangle rectangle1 = rectangle0.intersection(8, 440, 1, (-1070));
      assertEquals((-1071), rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(8, rectangle1.x);
      assertEquals(440, rectangle1.y);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 8, 265);
      Rectangle rectangle1 = rectangle0.intersection(2, (-1123), 265, (-2116));
      assertEquals((-3242), rectangle1.height);
      assertEquals(2, rectangle1.y);
      assertEquals(2, rectangle1.x);
      assertEquals(7, rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.add(27, 27);
      Rectangle rectangle1 = rectangle0.intersection(27, 12, 0, 1);
      assertEquals(0, rectangle1.height);
      assertEquals(12, rectangle1.y);
      assertEquals(27, rectangle1.x);
      assertEquals((-1), rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setSize(0, 8);
      Rectangle rectangle1 = rectangle0.intersection(1543, (-1112), 7, 1543);
      assertEquals(7, rectangle1.height);
      assertEquals((-1544), rectangle1.width);
      assertEquals(1543, rectangle1.x);
      assertEquals(0, rectangle1.y);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setSize(8, 2295);
      boolean boolean0 = rectangle0.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1), (-1), (-1), (-1));
      Rectangle rectangle1 = rectangle0.clone();
      assertNotSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(857, 857, 857, 857);
      Rectangle rectangle1 = rectangle0.intersection(0, (-1907), (-461), (-458));
      Rectangle rectangle2 = rectangle1.clone();
      assertEquals(857, rectangle2.x);
      assertEquals((-3223), rectangle2.height);
      assertEquals(857, rectangle2.y);
      assertEquals((-1319), rectangle2.width);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.clone();
      assertEquals(0, rectangle1.x);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1, (-599));
      Rectangle rectangle1 = rectangle0.clone();
      assertEquals(1, rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.add(0, (-2798));
      Rectangle rectangle1 = rectangle0.bounds(rectangle0);
      assertEquals(0, rectangle1.x());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1146, 0);
      Rectangle rectangle1 = rectangle0.bounds(rectangle0);
      assertEquals(0, rectangle1.height());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1146, 0);
      Rectangle rectangle1 = new Rectangle(5, 0, 2, 1146);
      Rectangle rectangle2 = rectangle1.bounds(rectangle0);
      assertEquals(5, rectangle2.x());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2836, 2836, 2836, 2);
      Rectangle rectangle1 = rectangle0.bounds();
      assertNotSame(rectangle0, rectangle1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-762), (-762), (-762), (-762));
      Rectangle rectangle1 = rectangle0.bounds();
      assertNotSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.union((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.size((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.outcode((IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.intersection((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.contains((IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4150, 4150, 4150, 4150);
      boolean boolean0 = rectangle0.intersects(4150, 4150, 4150, 4150);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 3172, (-2020), (-2020));
      boolean boolean0 = rectangle0.intersects((-2363), 1198, (-1387), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-386), 1146, 1, (-599));
      boolean boolean0 = rectangle0.contains(2756, (-599), 1, (-599));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 2, 2);
      boolean boolean0 = rectangle0.contains(2, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(857, 857, 857, 857);
      boolean boolean0 = rectangle0.contains(856, 2309);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(863, 863, 19, 19);
      boolean boolean0 = rectangle0.contains(863, 19);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.contains((-1), (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1), 4);
      dimension0.setSize(1716, 0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      boolean boolean0 = rectangle0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 8, 2);
      boolean boolean0 = rectangle0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4150, 4150, 4150, 4150);
      int int0 = rectangle0.outcode(2, 2);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      int int0 = rectangle0.outcode(0, 0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.location((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Dimension dimension0 = new Dimension(2, 0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      int int0 = rectangle0.maxY();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      int int0 = rectangle0.maxX();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      rectangle0.height = 260;
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 8, 2);
      Point point0 = rectangle0.location();
      Rectangle rectangle1 = new Rectangle(point0);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Point point0 = new Point(0, 260);
      Rectangle rectangle1 = new Rectangle(point0);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
      assertFalse(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(857, 857, 857, 857);
      Rectangle rectangle1 = new Rectangle();
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.equals(rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 8, 2);
      Dimension dimension0 = new Dimension();
      boolean boolean0 = rectangle0.equals(dimension0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(39, 39, 39, 39);
      boolean boolean0 = rectangle0.intersects(39, 147, 147, 147);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(857, 857, 857, 857);
      boolean boolean0 = rectangle0.intersects(0, 857, 0, 857);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.contains((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(40, 40, 40, 40);
      boolean boolean0 = rectangle0.contains(40, 1974);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(293, 293, 293, 293);
      boolean boolean0 = rectangle0.contains(7764, 293);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = new Dimension(2949, 730);
      Rectangle rectangle1 = new Rectangle(dimension0);
      rectangle0.grow((-208), 10);
      Point point0 = rectangle0.location();
      boolean boolean0 = rectangle1.contains((IPoint) point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = new Dimension(2949, 730);
      Rectangle rectangle1 = new Rectangle(dimension0);
      Rectangle rectangle2 = rectangle0.union(rectangle1);
      Point point0 = rectangle0.location();
      boolean boolean0 = rectangle2.contains((IPoint) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0, 3596, 3596, (-2608));
      boolean boolean0 = rectangle1.intersects((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = new Dimension(2949, 730);
      Rectangle rectangle1 = new Rectangle(dimension0);
      Rectangle rectangle2 = rectangle0.union(rectangle1);
      rectangle0.grow((-208), 10);
      Point point0 = rectangle0.location();
      int int0 = rectangle2.outcode((IPoint) point0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertEquals(0, rectangle1.width());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      String string0 = rectangle0.toString();
      assertEquals("0x0+0+0", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      int int0 = rectangle0.minY();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.bounds();
      assertEquals(0, rectangle1.height);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      int int0 = rectangle0.minX();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = rectangle0.size();
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      rectangle1.bounds(rectangle0);
      assertEquals((-1), rectangle0.width);
      assertEquals(0, rectangle0.x());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Dimension dimension0 = new Dimension(8, 8);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = rectangle0.clone();
      assertNotSame(rectangle0, rectangle1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.add(27, 27);
      int int0 = rectangle0.outcode(27, 27);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.contains((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = new Dimension(2949, 730);
      Dimension dimension1 = rectangle0.size(dimension0);
      assertEquals(0, dimension1.width);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2, 8, 2);
      boolean boolean0 = rectangle0.intersects((IRectangle) rectangle0);
      assertTrue(boolean0);
  }
}
