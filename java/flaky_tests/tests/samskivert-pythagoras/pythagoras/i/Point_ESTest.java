/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:27:49 GMT 2022
 */

package pythagoras.i;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.i.IPoint;
import pythagoras.i.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Point_ESTest extends Point_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point point0 = new Point();
      point0.move(0, 1029);
      point0.translate(576, 0);
      assertEquals(1029, point0.y);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point point0 = new Point(0, 0);
      int int0 = point0.y();
      assertEquals(0, int0);
      assertEquals(0, point0.x);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = new Point(1, 1);
      int int0 = point0.y();
      assertEquals(1, point0.x);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point point0 = new Point();
      point0.translate(0, (-442));
      int int0 = point0.y();
      assertEquals((-442), point0.y);
      assertEquals((-442), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point point0 = new Point(0, 0);
      int int0 = point0.x();
      assertEquals(0, int0);
      assertEquals(0, point0.y);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(473, (-341));
      int int0 = point0.x();
      assertEquals(473, point0.x);
      assertEquals(473, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point point0 = new Point();
      point0.subtractLocal(0, 1595);
      assertEquals((-1595), point0.y);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.subtractLocal(0, 0);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.set(2195, 200);
      point1.subtractLocal(0, 0);
      assertEquals(200, point0.y());
      assertEquals(2195, point0.x);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = new Point(1, 1);
      Point point1 = point0.set((IPoint) point0);
      assertEquals(1, point1.x);
      assertEquals(1, point1.y);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.addLocal((-943), (-943));
      point1.set((IPoint) point0);
      assertEquals((-943), point0.y);
      assertEquals((-943), point0.x());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point point0 = new Point(0, 0);
      point0.set(0, 0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point point0 = new Point();
      point0.set((-1), (-341));
      assertEquals((-341), point0.y);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point point0 = new Point();
      point0.addLocal(1, 1);
      assertEquals(1, point0.x);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point point0 = new Point();
      point0.move((-2928), (-2928));
      point0.addLocal(1, (-2928));
      assertEquals((-5856), point0.y);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.setLocation((IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.set((IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point point0 = null;
      try {
        point0 = new Point((IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation((IPoint) point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point point0 = new Point();
      point0.addLocal(0, 254);
      assertEquals(254, point0.y);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point point0 = new Point();
      point0.subtractLocal(2221, 0);
      assertEquals((-2221), point0.x);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.set((IPoint) point0);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point point0 = new Point(0, 0);
      Point point1 = new Point(point0);
      assertEquals(0, point1.y);
      assertEquals(0, point0.x);
      assertTrue(point1.equals((Object)point0));
  }
}
