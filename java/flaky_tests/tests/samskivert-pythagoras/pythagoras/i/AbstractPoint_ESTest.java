/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:15:05 GMT 2022
 */

package pythagoras.i;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.i.IPoint;
import pythagoras.i.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPoint_ESTest extends AbstractPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point point0 = new Point(1656, 1656);
      point0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(point0);
      point0.addLocal(0, 2);
      boolean boolean0 = point0.equals(point1);
      assertEquals(2, point0.y);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = new Point((-134), (-134));
      Point point1 = new Point((-115), (-1276));
      boolean boolean0 = point1.equals(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point();
      Point point2 = point1.set(0, (-4078));
      point2.setLocation((-3638), 3495);
      point2.subtract((IPoint) point0, point0);
      assertEquals((-3638), point0.x);
      assertTrue(point0.equals((Object)point1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point();
      point1.x = 899;
      point1.subtract((IPoint) point0, point1);
      assertFalse(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point point0 = new Point();
      point0.set(182, 1891);
      point0.subtract(0, 1891, point0);
      assertEquals(0, point0.y);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point point0 = new Point();
      point0.subtract(0, (-2659), point0);
      assertEquals(2659, point0.y);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point point0 = new Point();
      point0.move(1607, (-134));
      point0.subtract(1, 267, point0);
      assertEquals(1606, point0.x);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point point0 = new Point();
      point0.subtract(1610, 4322, point0);
      assertEquals((-1610), point0.x);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.subtract(0, (-1755));
      assertEquals(0, point1.x);
      assertEquals(1755, point1.y);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point point0 = new Point(1656, 1656);
      Point point1 = point0.subtract((-453), 1656);
      assertEquals(2109, point1.x);
      assertEquals(0, point1.y);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(point0);
      point0.set(921, 921);
      Point point2 = point1.subtract((IPoint) point0, point0);
      point2.subtract(0, 0);
      assertEquals((-921), point0.y);
      assertEquals((-921), point0.x());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point point0 = new Point((-134), (-134));
      Point point1 = new Point((-115), (-1276));
      int int0 = point0.distanceSq((IPoint) point1);
      assertEquals(1304525, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point();
      Point point2 = point1.set(0, (-4078));
      point0.move(161, 808201);
      int int0 = point2.distanceSq((IPoint) point0);
      assertEquals((-1627763822), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point point0 = new Point();
      int int0 = point0.distanceSq(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point point0 = new Point(1503, (-134));
      int int0 = point0.distanceSq(23387845, (-1));
      assertEquals((-143313987), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(point0);
      point1.subtract(0, 3765, point0);
      int int0 = point0.distance((IPoint) point1);
      assertFalse(point1.equals((Object)point0));
      assertEquals(3765, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.addLocal(1, 1);
      int int0 = point1.distance(1, 1);
      assertEquals(1, point0.y);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.clone();
      assertEquals(0, point1.y());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.addLocal(1, 1);
      Point point2 = point1.add((-1), 1);
      point2.clone();
      assertEquals(1, point0.y);
      assertEquals(1, point0.x());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point point0 = new Point(1503, (-134));
      Point point1 = point0.set((-309), 1);
      Point point2 = point1.clone();
      assertEquals((-309), point2.x());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.add(0, 0, point0);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point point0 = new Point();
      point0.add(1610, (-1108), point0);
      assertEquals(1610, point0.x);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point point0 = new Point();
      point0.add(0, 4322, point0);
      assertEquals(4322, point0.y);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point point0 = new Point();
      point0.add((-400), 1, point0);
      assertEquals(1, point0.y);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.add(0, 0);
      assertTrue(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point point0 = new Point((-134), (-134));
      Point point1 = point0.add((-1), (-115));
      assertEquals((-249), point1.y);
      assertEquals((-135), point1.x);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point point0 = new Point(1656, 1656);
      Point point1 = point0.add(1656, (-453));
      assertEquals(1203, point1.y);
      assertEquals(3312, point1.x);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.subtract((IPoint) null, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.subtract(0, 0, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.distanceSq((IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.distance((IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.add(0, 0, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.i.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(point0);
      point1.subtract(0, 3765, point0);
      boolean boolean0 = point0.equals(point1);
      assertEquals((-3765), point0.y);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(5531, 0);
      boolean boolean0 = point0.equals(point1);
      assertFalse(point1.equals((Object)point0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point point0 = new Point();
      Object object0 = new Object();
      boolean boolean0 = point0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point point0 = new Point();
      boolean boolean0 = point0.equals(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(point0);
      boolean boolean0 = point0.equals(point1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point point0 = new Point();
      int int0 = point0.distanceSq((IPoint) point0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point point0 = new Point();
      int int0 = point0.distance((-5524), 899);
      assertEquals(5596, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point point0 = new Point();
      int int0 = point0.distance((IPoint) point0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point point0 = new Point(1503, (-134));
      Point point1 = point0.clone();
      assertEquals(1503, point1.x());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point point0 = new Point();
      String string0 = point0.toString();
      assertEquals("+0+0", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.subtract((IPoint) point0, point0);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point point0 = new Point();
      int int0 = point0.distanceSq((-277), 3495);
      assertEquals(12291754, int0);
  }
}
