/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:46:49 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.CrossingHelper;
import pythagoras.d.IntersectPoint;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CrossingHelper_ESTest extends CrossingHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = 0.25;
      doubleArray1[2] = (double) 5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[3] = (double) 5;
      doubleArray0[1] = doubleArray2;
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 5;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(1, intersectPointArray0.length);
      
      boolean boolean0 = crossingHelper0.containsPoint(doubleArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 4687;
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = (double) 4687;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        crossingHelper0.findCrossing();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.d.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      int[] intArray0 = new int[8];
      intArray0[0] = (-138);
      intArray0[1] = 2038;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        crossingHelper0.findCrossing();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 138 out of bounds for length 1
         //
         verifyException("pythagoras.d.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      int[] intArray0 = new int[7];
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(0, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[3];
      CrossingHelper crossingHelper0 = new CrossingHelper((double[][]) null, intArray0);
      // Undeclared exception!
      try { 
        crossingHelper0.findCrossing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      int[] intArray0 = new int[9];
      intArray0[1] = (-17);
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        crossingHelper0.findCrossing();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -8
         //
         verifyException("pythagoras.d.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[22];
      doubleArray1[2] = (double) 5;
      doubleArray1[5] = (double) 5;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 5;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      crossingHelper0.findCrossing();
      double[] doubleArray2 = new double[0];
      // Undeclared exception!
      try { 
        crossingHelper0.containsPoint(doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = CrossingHelper.compare(2565.76328243246, 2565.76328243246, 2565.76328243246, 709.837102404357);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = CrossingHelper.compare(1293.711831758, (-2167.03974), 0.0, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = CrossingHelper.compare(1293.71183, 1293.71183, 1293.71183, 1293.71183);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = CrossingHelper.compare((-2697.1591613), 7.0, (-1.0), 1.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = CrossingHelper.compare((-2.0172619433977927), (-2.0255413052848854), (-2.0172619433977927), (-2.0172619433977927));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = 0.25;
      doubleArray1[2] = (double) 7;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = 7;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(3, intersectPointArray0.length);
      
      boolean boolean0 = crossingHelper0.containsPoint(doubleArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = 97.82002611090394;
      doubleArray1[3] = (double) 7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 97.82002611090394;
      doubleArray2[3] = (double) 7;
      doubleArray2[5] = 97.82002611090394;
      doubleArray0[1] = doubleArray2;
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 7;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(2, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[10];
      doubleArray1[2] = (double) 6;
      doubleArray1[5] = (double) 6;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 6;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(3, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 6;
      doubleArray1[3] = (double) 6;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      int[] intArray0 = new int[8];
      intArray0[0] = 6;
      intArray0[1] = 6;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(3, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[12][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (double) 5;
      doubleArray1[5] = (double) 5;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 5;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(2, intersectPointArray0.length);
      
      doubleArray1[3] = (double) 7;
      IntersectPoint[] intersectPointArray1 = crossingHelper0.findCrossing();
      assertEquals(3, intersectPointArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[13][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 6;
      doubleArray1[5] = (double) 6;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      int[] intArray0 = new int[7];
      intArray0[0] = 6;
      intArray0[1] = 6;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      crossingHelper0.findCrossing();
      // Undeclared exception!
      try { 
        crossingHelper0.containsPoint((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.CrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[13][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 6;
      doubleArray0[1] = doubleArray1;
      int[] intArray0 = new int[7];
      intArray0[0] = 6;
      intArray0[1] = 6;
      CrossingHelper crossingHelper0 = new CrossingHelper(doubleArray0, intArray0);
      IntersectPoint[] intersectPointArray0 = crossingHelper0.findCrossing();
      assertEquals(0, intersectPointArray0.length);
  }
}
