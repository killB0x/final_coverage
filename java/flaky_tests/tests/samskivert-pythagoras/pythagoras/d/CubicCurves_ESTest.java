/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:05:59 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.CubicCurve;
import pythagoras.d.CubicCurves;
import pythagoras.d.ICubicCurve;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CubicCurves_ESTest extends CubicCurves_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 6.0;
      CubicCurves.subdivide(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 2.25, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 1.0;
      CubicCurves.subdivide(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.375, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 6.0;
      CubicCurves.subdivide(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 2.25, 0.0, 3.0, 0.0, 3.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 6.0;
      CubicCurves.subdivide(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertArrayEquals(new double[] {2.25, 0.0, 3.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, (-1529.01399180729), 0.0, 7.854280126131883, 7.854280126131883, 0.0, 0.0, 0.0);
      CubicCurves.subdivide((ICubicCurve) cubicCurve0, (CubicCurve) null, cubicCurve0);
      assertEquals(3.9271400630659414, cubicCurve0.ctrlx2, 0.01);
      assertEquals((-188.18139392861178), cubicCurve0.y1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 0.0, 1.0, 0.0, 1.0, (-1608.42), (-856.25), (-1608.42));
      CubicCurves.subdivide((ICubicCurve) cubicCurve0, cubicCurve0, cubicCurve0);
      assertEquals((-1206.315), cubicCurve0.ctrly1, 0.01);
      assertEquals((-804.21), cubicCurve0.y1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2663.0);
      doubleArray0[2] = 1138.0;
      CubicCurves.solveCubic(doubleArray0, doubleArray0);
      int int0 = CubicCurves.solveCubic(doubleArray0, doubleArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = 805.6540844620445;
      CubicCurves.subdivide(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      int int0 = CubicCurves.solveCubic(doubleArray0);
      assertArrayEquals(new double[] {100.70676055775556, 0.0, 201.41352111551112, 0.0, 402.82704223102223, 0.0, 805.6540844620445, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 2201987.1070619547;
      int int0 = CubicCurves.solveCubic(doubleArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = CubicCurves.solveCubic(doubleArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = CubicCurves.flatnessSq(doubleArray0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-1529.01399180729);
      double double0 = CubicCurves.flatnessSq(doubleArray0, 0);
      assertEquals(2337883.7871424635, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = CubicCurves.flatnessSq((double) 1309, (double) 1309, (double) 1309, (double) 1309, (double) 1309, (double) 1309, (double) 1309, (double) 1309);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 1.0;
      double double0 = CubicCurves.flatness(doubleArray0, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = CubicCurves.flatness(1728.5249, 1.0, 2.0, 1615.995967, 2.0, 4514.302828, 2.0, 1615.995967);
      assertEquals(2898.306861, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.subdivide((double[]) null, 0, (double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      // Undeclared exception!
      try { 
        CubicCurves.subdivide((ICubicCurve) null, cubicCurve0, cubicCurve0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.solveCubic((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        CubicCurves.solveCubic(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 2
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        CubicCurves.solveCubic(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 2
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        CubicCurves.flatnessSq(doubleArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.d.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.flatness((double[]) null, (-2771));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        CubicCurves.flatness(doubleArray0, 3006);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3006 out of bounds for length 2
         //
         verifyException("pythagoras.d.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = CubicCurves.flatnessSq(1.0, 1728.5249, 1.0, 1.0, 2.0, 0.0, 2898.306861, 0.0);
      assertEquals(2201987.1070619547, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = CubicCurves.flatness((double) 8, (double) 8, (double) 8, (double) 8, (double) 8, (double) 8, (double) 8, (double) 8);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        CubicCurves.subdivide(doubleArray0, 0, doubleArray0, 1709, doubleArray0, 555);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1709 out of bounds for length 8
         //
         verifyException("pythagoras.d.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      CubicCurves.subdivide(doubleArray0, 0, (double[]) null, 0, (double[]) null, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      CubicCurves.subdivide((ICubicCurve) cubicCurve0, cubicCurve0, (CubicCurve) null);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.flatnessSq((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.CubicCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        CubicCurves.solveCubic((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CubicCurves cubicCurves0 = new CubicCurves();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = CubicCurves.solveCubic(doubleArray0, doubleArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = CubicCurves.flatness(doubleArray0, 0);
      assertEquals(0.0, double0, 0.01);
  }
}
